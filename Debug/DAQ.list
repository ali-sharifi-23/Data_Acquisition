
DAQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed64  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bbc  0800ef34  0800ef34  0000ff34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011af0  08011af0  000131c8  2**0
                  CONTENTS
  4 .ARM          00000008  08011af0  08011af0  00012af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011af8  08011af8  000131c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011af8  08011af8  00012af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011afc  08011afc  00012afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08011b00  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  08011b88  00013088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  08011c28  00013128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008370  200001c8  08011cc8  000131c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008538  08011cc8  00013538  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000131c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d42e  00000000  00000000  000131f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005248  00000000  00000000  00030626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017f0  00000000  00000000  00035870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001313  00000000  00000000  00037060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000324c9  00000000  00000000  00038373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002a6f7  00000000  00000000  0006a83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00104cec  00000000  00000000  00094f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00199c1f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006ac4  00000000  00000000  00199c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000050  00000000  00000000  001a0728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c8 	.word	0x200001c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ef1c 	.word	0x0800ef1c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001cc 	.word	0x200001cc
 800020c:	0800ef1c 	.word	0x0800ef1c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <NTP_server>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void NTP_server(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80005a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80005a4:	b096      	sub	sp, #88	@ 0x58
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80005aa:	6239      	str	r1, [r7, #32]
 80005ac:	61fa      	str	r2, [r7, #28]
 80005ae:	61bb      	str	r3, [r7, #24]
	union NtpClientPacket client_packet;
	union NtpClientResponsePacket client_response;
	struct pbuf *response_buf;
	if(p->len == 8)
 80005b0:	69fb      	ldr	r3, [r7, #28]
 80005b2:	895b      	ldrh	r3, [r3, #10]
 80005b4:	2b08      	cmp	r3, #8
 80005b6:	d15d      	bne.n	8000674 <NTP_server+0xd4>
	{
		uint64_t t2 = ((uint64_t)(us_period_overflow - 1) << 32) | (uint64_t)htim2.Instance->CNT;
 80005b8:	4b32      	ldr	r3, [pc, #200]	@ (8000684 <NTP_server+0xe4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3b01      	subs	r3, #1
 80005be:	2200      	movs	r2, #0
 80005c0:	613b      	str	r3, [r7, #16]
 80005c2:	617a      	str	r2, [r7, #20]
 80005c4:	f04f 0200 	mov.w	r2, #0
 80005c8:	f04f 0300 	mov.w	r3, #0
 80005cc:	6939      	ldr	r1, [r7, #16]
 80005ce:	000b      	movs	r3, r1
 80005d0:	2200      	movs	r2, #0
 80005d2:	492d      	ldr	r1, [pc, #180]	@ (8000688 <NTP_server+0xe8>)
 80005d4:	6809      	ldr	r1, [r1, #0]
 80005d6:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80005d8:	2000      	movs	r0, #0
 80005da:	4688      	mov	r8, r1
 80005dc:	4681      	mov	r9, r0
 80005de:	ea42 0108 	orr.w	r1, r2, r8
 80005e2:	6039      	str	r1, [r7, #0]
 80005e4:	ea43 0309 	orr.w	r3, r3, r9
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80005ee:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		pbuf_copy_partial(p, client_packet.buffer, p->len, 0);
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	895a      	ldrh	r2, [r3, #10]
 80005f6:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80005fa:	2300      	movs	r3, #0
 80005fc:	69f8      	ldr	r0, [r7, #28]
 80005fe:	f005 f9bf 	bl	8005980 <pbuf_copy_partial>
		client_response.data.t1 = client_packet.t1;
 8000602:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8000606:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		client_response.data.t2 = t2;
 800060a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800060e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		response_buf = pbuf_alloc(PBUF_TRANSPORT, 24, PBUF_RAM);
 8000612:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000616:	2118      	movs	r1, #24
 8000618:	2036      	movs	r0, #54	@ 0x36
 800061a:	f004 fcd3 	bl	8004fc4 <pbuf_alloc>
 800061e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		client_response.data.t3 = ((uint64_t)(us_period_overflow - 1) << 32) | (uint64_t)htim2.Instance->CNT;
 8000620:	4b18      	ldr	r3, [pc, #96]	@ (8000684 <NTP_server+0xe4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	3b01      	subs	r3, #1
 8000626:	2200      	movs	r2, #0
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	60fa      	str	r2, [r7, #12]
 800062c:	f04f 0200 	mov.w	r2, #0
 8000630:	f04f 0300 	mov.w	r3, #0
 8000634:	68b9      	ldr	r1, [r7, #8]
 8000636:	000b      	movs	r3, r1
 8000638:	2200      	movs	r2, #0
 800063a:	4913      	ldr	r1, [pc, #76]	@ (8000688 <NTP_server+0xe8>)
 800063c:	6809      	ldr	r1, [r1, #0]
 800063e:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8000640:	2000      	movs	r0, #0
 8000642:	460c      	mov	r4, r1
 8000644:	4605      	mov	r5, r0
 8000646:	ea42 0a04 	orr.w	sl, r2, r4
 800064a:	ea43 0b05 	orr.w	fp, r3, r5
 800064e:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	@ 0x38
		pbuf_take(response_buf, client_response.buffer, 24);
 8000652:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000656:	2218      	movs	r2, #24
 8000658:	4619      	mov	r1, r3
 800065a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800065c:	f005 fa02 	bl	8005a64 <pbuf_take>
		udp_sendto(pcb, response_buf, addr, port);
 8000660:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8000664:	69ba      	ldr	r2, [r7, #24]
 8000666:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000668:	6a38      	ldr	r0, [r7, #32]
 800066a:	f00a fee1 	bl	800b430 <udp_sendto>
		pbuf_free(response_buf);
 800066e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000670:	f004 ff8c 	bl	800558c <pbuf_free>
	}
	pbuf_free(p);
 8000674:	69f8      	ldr	r0, [r7, #28]
 8000676:	f004 ff89 	bl	800558c <pbuf_free>
}
 800067a:	bf00      	nop
 800067c:	3758      	adds	r7, #88	@ 0x58
 800067e:	46bd      	mov	sp, r7
 8000680:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000684:	20000230 	.word	0x20000230
 8000688:	200001e4 	.word	0x200001e4

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 fc92 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f822 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 f8dc 	bl	8000854 <MX_GPIO_Init>
  MX_LWIP_Init();
 800069c:	f002 ffd4 	bl	8003648 <MX_LWIP_Init>
  MX_TIM2_Init();
 80006a0:	f000 f88a 	bl	80007b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  NTP_UDP = udp_new();
 80006a4:	f00b f922 	bl	800b8ec <udp_new>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a09      	ldr	r2, [pc, #36]	@ (80006d0 <main+0x44>)
 80006ac:	6013      	str	r3, [r2, #0]
  udp_bind(NTP_UDP, IP_ADDR_ANY, 10000);
 80006ae:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <main+0x44>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80006b6:	4907      	ldr	r1, [pc, #28]	@ (80006d4 <main+0x48>)
 80006b8:	4618      	mov	r0, r3
 80006ba:	f00b f86f 	bl	800b79c <udp_bind>
  udp_recv(NTP_UDP, NTP_server, NULL);
 80006be:	4b04      	ldr	r3, [pc, #16]	@ (80006d0 <main+0x44>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2200      	movs	r2, #0
 80006c4:	4904      	ldr	r1, [pc, #16]	@ (80006d8 <main+0x4c>)
 80006c6:	4618      	mov	r0, r3
 80006c8:	f00b f8f0 	bl	800b8ac <udp_recv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <main+0x40>
 80006d0:	20000234 	.word	0x20000234
 80006d4:	08011a00 	.word	0x08011a00
 80006d8:	080005a1 	.word	0x080005a1

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	@ 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2230      	movs	r2, #48	@ 0x30
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f00d fd71 	bl	800e1d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000700:	f001 ffb6 	bl	8002670 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000704:	4b2a      	ldr	r3, [pc, #168]	@ (80007b0 <SystemClock_Config+0xd4>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000708:	4a29      	ldr	r2, [pc, #164]	@ (80007b0 <SystemClock_Config+0xd4>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000710:	4b27      	ldr	r3, [pc, #156]	@ (80007b0 <SystemClock_Config+0xd4>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <SystemClock_Config+0xd8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a24      	ldr	r2, [pc, #144]	@ (80007b4 <SystemClock_Config+0xd8>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b22      	ldr	r3, [pc, #136]	@ (80007b4 <SystemClock_Config+0xd8>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000734:	2301      	movs	r3, #1
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000738:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800073c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000742:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000748:	2304      	movs	r3, #4
 800074a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 800074c:	23c8      	movs	r3, #200	@ 0xc8
 800074e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000754:	2309      	movs	r3, #9
 8000756:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4618      	mov	r0, r3
 800075e:	f001 ffe7 	bl	8002730 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000768:	f000 f948 	bl	80009fc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800076c:	f001 ff90 	bl	8002690 <HAL_PWREx_EnableOverDrive>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000776:	f000 f941 	bl	80009fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077a:	230f      	movs	r3, #15
 800077c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077e:	2302      	movs	r3, #2
 8000780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000786:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800078a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000790:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	2106      	movs	r1, #6
 8000798:	4618      	mov	r0, r3
 800079a:	f002 fa6d 	bl	8002c78 <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007a4:	f000 f92a 	bl	80009fc <Error_Handler>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3750      	adds	r7, #80	@ 0x50
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007be:	f107 0310 	add.w	r3, r7, #16
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000850 <MX_TIM2_Init+0x98>)
 80007d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 80007de:	4b1c      	ldr	r3, [pc, #112]	@ (8000850 <MX_TIM2_Init+0x98>)
 80007e0:	220a      	movs	r2, #10
 80007e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <MX_TIM2_Init+0x98>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007ea:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <MX_TIM2_Init+0x98>)
 80007ec:	f04f 32ff 	mov.w	r2, #4294967295
 80007f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f2:	4b17      	ldr	r3, [pc, #92]	@ (8000850 <MX_TIM2_Init+0x98>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f8:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <MX_TIM2_Init+0x98>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007fe:	4814      	ldr	r0, [pc, #80]	@ (8000850 <MX_TIM2_Init+0x98>)
 8000800:	f002 fc38 	bl	8003074 <HAL_TIM_Base_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800080a:	f000 f8f7 	bl	80009fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800080e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000812:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	4619      	mov	r1, r3
 800081a:	480d      	ldr	r0, [pc, #52]	@ (8000850 <MX_TIM2_Init+0x98>)
 800081c:	f002 fc82 	bl	8003124 <HAL_TIM_ConfigClockSource>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000826:	f000 f8e9 	bl	80009fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	@ (8000850 <MX_TIM2_Init+0x98>)
 8000838:	f002 fe78 	bl	800352c <HAL_TIMEx_MasterConfigSynchronization>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000842:	f000 f8db 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	3720      	adds	r7, #32
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200001e4 	.word	0x200001e4

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	@ 0x30
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b5e      	ldr	r3, [pc, #376]	@ (80009e4 <MX_GPIO_Init+0x190>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a5d      	ldr	r2, [pc, #372]	@ (80009e4 <MX_GPIO_Init+0x190>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b5b      	ldr	r3, [pc, #364]	@ (80009e4 <MX_GPIO_Init+0x190>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	61bb      	str	r3, [r7, #24]
 8000880:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	4b58      	ldr	r3, [pc, #352]	@ (80009e4 <MX_GPIO_Init+0x190>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a57      	ldr	r2, [pc, #348]	@ (80009e4 <MX_GPIO_Init+0x190>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b55      	ldr	r3, [pc, #340]	@ (80009e4 <MX_GPIO_Init+0x190>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b52      	ldr	r3, [pc, #328]	@ (80009e4 <MX_GPIO_Init+0x190>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a51      	ldr	r2, [pc, #324]	@ (80009e4 <MX_GPIO_Init+0x190>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b4f      	ldr	r3, [pc, #316]	@ (80009e4 <MX_GPIO_Init+0x190>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	4b4c      	ldr	r3, [pc, #304]	@ (80009e4 <MX_GPIO_Init+0x190>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a4b      	ldr	r2, [pc, #300]	@ (80009e4 <MX_GPIO_Init+0x190>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b49      	ldr	r3, [pc, #292]	@ (80009e4 <MX_GPIO_Init+0x190>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	4b46      	ldr	r3, [pc, #280]	@ (80009e4 <MX_GPIO_Init+0x190>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a45      	ldr	r2, [pc, #276]	@ (80009e4 <MX_GPIO_Init+0x190>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b43      	ldr	r3, [pc, #268]	@ (80009e4 <MX_GPIO_Init+0x190>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e2:	4b40      	ldr	r3, [pc, #256]	@ (80009e4 <MX_GPIO_Init+0x190>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a3f      	ldr	r2, [pc, #252]	@ (80009e4 <MX_GPIO_Init+0x190>)
 80008e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b3d      	ldr	r3, [pc, #244]	@ (80009e4 <MX_GPIO_Init+0x190>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000900:	4839      	ldr	r0, [pc, #228]	@ (80009e8 <MX_GPIO_Init+0x194>)
 8000902:	f001 fe9b 	bl	800263c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2140      	movs	r1, #64	@ 0x40
 800090a:	4838      	ldr	r0, [pc, #224]	@ (80009ec <MX_GPIO_Init+0x198>)
 800090c:	f001 fe96 	bl	800263c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000910:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000916:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4832      	ldr	r0, [pc, #200]	@ (80009f0 <MX_GPIO_Init+0x19c>)
 8000928:	f001 fcdc 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800092c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4828      	ldr	r0, [pc, #160]	@ (80009e8 <MX_GPIO_Init+0x194>)
 8000946:	f001 fccd 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800094a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000954:	2301      	movs	r3, #1
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000958:	2303      	movs	r3, #3
 800095a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800095c:	2307      	movs	r3, #7
 800095e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4823      	ldr	r0, [pc, #140]	@ (80009f4 <MX_GPIO_Init+0x1a0>)
 8000968:	f001 fcbc 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800096c:	2340      	movs	r3, #64	@ 0x40
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	481a      	ldr	r0, [pc, #104]	@ (80009ec <MX_GPIO_Init+0x198>)
 8000984:	f001 fcae 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000988:	2380      	movs	r3, #128	@ 0x80
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	4814      	ldr	r0, [pc, #80]	@ (80009ec <MX_GPIO_Init+0x198>)
 800099c:	f001 fca2 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009a0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ae:	2303      	movs	r3, #3
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009b2:	230a      	movs	r3, #10
 80009b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	480e      	ldr	r0, [pc, #56]	@ (80009f8 <MX_GPIO_Init+0x1a4>)
 80009be:	f001 fc91 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	4808      	ldr	r0, [pc, #32]	@ (80009f8 <MX_GPIO_Init+0x1a4>)
 80009d8:	f001 fc84 	bl	80022e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009dc:	bf00      	nop
 80009de:	3730      	adds	r7, #48	@ 0x30
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020400 	.word	0x40020400
 80009ec:	40021800 	.word	0x40021800
 80009f0:	40020800 	.word	0x40020800
 80009f4:	40020c00 	.word	0x40020c00
 80009f8:	40020000 	.word	0x40020000

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <Error_Handler+0x8>

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <HAL_MspInit+0x44>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a0e      	ldr	r2, [pc, #56]	@ (8000a4c <HAL_MspInit+0x44>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <HAL_MspInit+0x44>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <HAL_MspInit+0x44>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2a:	4a08      	ldr	r2, [pc, #32]	@ (8000a4c <HAL_MspInit+0x44>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a32:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <HAL_MspInit+0x44>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a60:	d10b      	bne.n	8000a7a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a62:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <HAL_TIM_Base_MspInit+0x38>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a66:	4a08      	ldr	r2, [pc, #32]	@ (8000a88 <HAL_TIM_Base_MspInit+0x38>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6e:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <HAL_TIM_Base_MspInit+0x38>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a7a:	bf00      	nop
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <NMI_Handler+0x4>

08000a94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae2:	f000 faa7 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  return 1;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <_kill>:

int _kill(int pid, int sig)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b06:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <_kill+0x20>)
 8000b08:	2216      	movs	r2, #22
 8000b0a:	601a      	str	r2, [r3, #0]
  return -1;
 8000b0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	20008528 	.word	0x20008528

08000b20 <_exit>:

void _exit (int status)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b28:	f04f 31ff 	mov.w	r1, #4294967295
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff ffe5 	bl	8000afc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b32:	bf00      	nop
 8000b34:	e7fd      	b.n	8000b32 <_exit+0x12>

08000b36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	e00a      	b.n	8000b5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b48:	f3af 8000 	nop.w
 8000b4c:	4601      	mov	r1, r0
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	1c5a      	adds	r2, r3, #1
 8000b52:	60ba      	str	r2, [r7, #8]
 8000b54:	b2ca      	uxtb	r2, r1
 8000b56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	dbf0      	blt.n	8000b48 <_read+0x12>
  }

  return len;
 8000b66:	687b      	ldr	r3, [r7, #4]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	e009      	b.n	8000b96 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	1c5a      	adds	r2, r3, #1
 8000b86:	60ba      	str	r2, [r7, #8]
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	3301      	adds	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	dbf1      	blt.n	8000b82 <_write+0x12>
  }
  return len;
 8000b9e:	687b      	ldr	r3, [r7, #4]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <_close>:

int _close(int file)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bd0:	605a      	str	r2, [r3, #4]
  return 0;
 8000bd2:	2300      	movs	r3, #0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <_isatty>:

int _isatty(int file)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000be8:	2301      	movs	r3, #1
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b085      	sub	sp, #20
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	60f8      	str	r0, [r7, #12]
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c02:	2300      	movs	r3, #0
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b087      	sub	sp, #28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c18:	4a14      	ldr	r2, [pc, #80]	@ (8000c6c <_sbrk+0x5c>)
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <_sbrk+0x60>)
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c24:	4b13      	ldr	r3, [pc, #76]	@ (8000c74 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d102      	bne.n	8000c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <_sbrk+0x64>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	@ (8000c78 <_sbrk+0x68>)
 8000c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c32:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d205      	bcs.n	8000c4c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <_sbrk+0x6c>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4a:	e009      	b.n	8000c60 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c52:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	4a06      	ldr	r2, [pc, #24]	@ (8000c74 <_sbrk+0x64>)
 8000c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	371c      	adds	r7, #28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	20050000 	.word	0x20050000
 8000c70:	00000400 	.word	0x00000400
 8000c74:	20000238 	.word	0x20000238
 8000c78:	20008538 	.word	0x20008538
 8000c7c:	20008528 	.word	0x20008528

08000c80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca8:	480d      	ldr	r0, [pc, #52]	@ (8000ce0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000caa:	490e      	ldr	r1, [pc, #56]	@ (8000ce4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cac:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000cec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc0:	4c0b      	ldr	r4, [pc, #44]	@ (8000cf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cce:	f7ff ffd7 	bl	8000c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f00d facd 	bl	800e270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd6:	f7ff fcd9 	bl	800068c <main>
  bx  lr    
 8000cda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cdc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000ce8:	08011b00 	.word	0x08011b00
  ldr r2, =_sbss
 8000cec:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000cf0:	20008538 	.word	0x20008538

08000cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>

08000cf6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d00b      	beq.n	8000d1e <LAN8742_RegisterBusIO+0x28>
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d007      	beq.n	8000d1e <LAN8742_RegisterBusIO+0x28>
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <LAN8742_RegisterBusIO+0x28>
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d102      	bne.n	8000d24 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	e014      	b.n	8000d4e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685a      	ldr	r2, [r3, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	691a      	ldr	r2, [r3, #16]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d17c      	bne.n	8000e74 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d002      	beq.n	8000d88 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2220      	movs	r2, #32
 8000d8c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	e01c      	b.n	8000dce <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	f107 0208 	add.w	r2, r7, #8
 8000d9c:	2112      	movs	r1, #18
 8000d9e:	6978      	ldr	r0, [r7, #20]
 8000da0:	4798      	blx	r3
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	da03      	bge.n	8000db0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000da8:	f06f 0304 	mvn.w	r3, #4
 8000dac:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000dae:	e00b      	b.n	8000dc8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	f003 031f 	and.w	r3, r3, #31
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d105      	bne.n	8000dc8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
         break;
 8000dc6:	e005      	b.n	8000dd4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	2b1f      	cmp	r3, #31
 8000dd2:	d9df      	bls.n	8000d94 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b1f      	cmp	r3, #31
 8000dda:	d902      	bls.n	8000de2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000ddc:	f06f 0302 	mvn.w	r3, #2
 8000de0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d145      	bne.n	8000e74 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	6810      	ldr	r0, [r2, #0]
 8000df0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000df4:	2100      	movs	r1, #0
 8000df6:	4798      	blx	r3
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	db37      	blt.n	8000e6e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	6810      	ldr	r0, [r2, #0]
 8000e06:	f107 0208 	add.w	r2, r7, #8
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4798      	blx	r3
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db28      	blt.n	8000e66 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4798      	blx	r3
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000e1e:	e01c      	b.n	8000e5a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4798      	blx	r3
 8000e26:	4603      	mov	r3, r0
 8000e28:	461a      	mov	r2, r3
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e32:	d80e      	bhi.n	8000e52 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	6810      	ldr	r0, [r2, #0]
 8000e3c:	f107 0208 	add.w	r2, r7, #8
 8000e40:	2100      	movs	r1, #0
 8000e42:	4798      	blx	r3
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	da07      	bge.n	8000e5a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000e4a:	f06f 0304 	mvn.w	r3, #4
 8000e4e:	613b      	str	r3, [r7, #16]
                 break;
 8000e50:	e010      	b.n	8000e74 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000e52:	f06f 0301 	mvn.w	r3, #1
 8000e56:	613b      	str	r3, [r7, #16]
               break;
 8000e58:	e00c      	b.n	8000e74 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1dd      	bne.n	8000e20 <LAN8742_Init+0xc6>
 8000e64:	e006      	b.n	8000e74 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000e66:	f06f 0304 	mvn.w	r3, #4
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	e002      	b.n	8000e74 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000e6e:	f06f 0303 	mvn.w	r3, #3
 8000e72:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d112      	bne.n	8000ea0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	4798      	blx	r3
 8000e80:	4603      	mov	r3, r0
 8000e82:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000e84:	bf00      	nop
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	4798      	blx	r3
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e98:	d9f5      	bls.n	8000e86 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000ea0:	693b      	ldr	r3, [r7, #16]
 }
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b084      	sub	sp, #16
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	6810      	ldr	r0, [r2, #0]
 8000ebe:	f107 020c 	add.w	r2, r7, #12
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	4798      	blx	r3
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	da02      	bge.n	8000ed2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000ecc:	f06f 0304 	mvn.w	r3, #4
 8000ed0:	e06e      	b.n	8000fb0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	6810      	ldr	r0, [r2, #0]
 8000eda:	f107 020c 	add.w	r2, r7, #12
 8000ede:	2101      	movs	r1, #1
 8000ee0:	4798      	blx	r3
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	da02      	bge.n	8000eee <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000ee8:	f06f 0304 	mvn.w	r3, #4
 8000eec:	e060      	b.n	8000fb0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d101      	bne.n	8000efc <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e059      	b.n	8000fb0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	6810      	ldr	r0, [r2, #0]
 8000f04:	f107 020c 	add.w	r2, r7, #12
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4798      	blx	r3
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	da02      	bge.n	8000f18 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f12:	f06f 0304 	mvn.w	r3, #4
 8000f16:	e04b      	b.n	8000fb0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d11b      	bne.n	8000f5a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d006      	beq.n	8000f3a <LAN8742_GetLinkState+0x90>
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f36:	2302      	movs	r3, #2
 8000f38:	e03a      	b.n	8000fb0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e033      	b.n	8000fb0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f52:	2304      	movs	r3, #4
 8000f54:	e02c      	b.n	8000fb0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f56:	2305      	movs	r3, #5
 8000f58:	e02a      	b.n	8000fb0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	6810      	ldr	r0, [r2, #0]
 8000f62:	f107 020c 	add.w	r2, r7, #12
 8000f66:	211f      	movs	r1, #31
 8000f68:	4798      	blx	r3
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	da02      	bge.n	8000f76 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000f70:	f06f 0304 	mvn.w	r3, #4
 8000f74:	e01c      	b.n	8000fb0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000f80:	2306      	movs	r3, #6
 8000f82:	e015      	b.n	8000fb0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 031c 	and.w	r3, r3, #28
 8000f8a:	2b18      	cmp	r3, #24
 8000f8c:	d101      	bne.n	8000f92 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e00e      	b.n	8000fb0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f003 031c 	and.w	r3, r3, #28
 8000f98:	2b08      	cmp	r3, #8
 8000f9a:	d101      	bne.n	8000fa0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e007      	b.n	8000fb0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 031c 	and.w	r3, r3, #28
 8000fa6:	2b14      	cmp	r3, #20
 8000fa8:	d101      	bne.n	8000fae <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000faa:	2304      	movs	r3, #4
 8000fac:	e000      	b.n	8000fb0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000fae:	2305      	movs	r3, #5
    }				
  }
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f000 f92f 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f000 f806 	bl	8000fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc8:	f7ff fd1e 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_InitTick+0x54>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b12      	ldr	r3, [pc, #72]	@ (800102c <HAL_InitTick+0x58>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f93b 	bl	800126e <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00e      	b.n	8001020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d80a      	bhi.n	800101e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 f911 	bl	8001236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4a06      	ldr	r2, [pc, #24]	@ (8001030 <HAL_InitTick+0x5c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000000 	.word	0x20000000
 800102c:	20000008 	.word	0x20000008
 8001030:	20000004 	.word	0x20000004

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	@ (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008
 8001058:	2000023c 	.word	0x2000023c

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	@ (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	2000023c 	.word	0x2000023c

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff ffee 	bl	800105c <HAL_GetTick>
 8001080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d005      	beq.n	800109a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <HAL_Delay+0x44>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800109a:	bf00      	nop
 800109c:	f7ff ffde 	bl	800105c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d8f7      	bhi.n	800109c <HAL_Delay+0x28>
  {
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000008 	.word	0x20000008

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <__NVIC_SetPriorityGrouping+0x40>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010e6:	4313      	orrs	r3, r2
 80010e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ea:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <__NVIC_SetPriorityGrouping+0x40>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	60d3      	str	r3, [r2, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00
 8001100:	05fa0000 	.word	0x05fa0000

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	@ (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	@ (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	@ (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	@ 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
         );
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	@ 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011ec:	d301      	bcc.n	80011f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00f      	b.n	8001212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <SysTick_Config+0x40>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fa:	210f      	movs	r1, #15
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f7ff ff8e 	bl	8001120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <SysTick_Config+0x40>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	@ (800121c <SysTick_Config+0x40>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff47 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001248:	f7ff ff5c 	bl	8001104 <__NVIC_GetPriorityGrouping>
 800124c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	f7ff ff8e 	bl	8001174 <NVIC_EncodePriority>
 8001258:	4602      	mov	r2, r0
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5d 	bl	8001120 <__NVIC_SetPriority>
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ffb0 	bl	80011dc <SysTick_Config>
 800127c:	4603      	mov	r3, r0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e06a      	b.n	8001370 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d106      	bne.n	80012b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2223      	movs	r2, #35	@ 0x23
 80012a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f002 fc6d 	bl	8003b8c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	4b31      	ldr	r3, [pc, #196]	@ (8001378 <HAL_ETH_Init+0xf0>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b6:	4a30      	ldr	r2, [pc, #192]	@ (8001378 <HAL_ETH_Init+0xf0>)
 80012b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012be:	4b2e      	ldr	r3, [pc, #184]	@ (8001378 <HAL_ETH_Init+0xf0>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012ca:	4b2c      	ldr	r3, [pc, #176]	@ (800137c <HAL_ETH_Init+0xf4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	4a2b      	ldr	r2, [pc, #172]	@ (800137c <HAL_ETH_Init+0xf4>)
 80012d0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80012d4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012d6:	4b29      	ldr	r3, [pc, #164]	@ (800137c <HAL_ETH_Init+0xf4>)
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	4927      	ldr	r1, [pc, #156]	@ (800137c <HAL_ETH_Init+0xf4>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012e4:	4b25      	ldr	r3, [pc, #148]	@ (800137c <HAL_ETH_Init+0xf4>)
 80012e6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6812      	ldr	r2, [r2, #0]
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001300:	f7ff feac 	bl	800105c <HAL_GetTick>
 8001304:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001306:	e011      	b.n	800132c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001308:	f7ff fea8 	bl	800105c <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001316:	d909      	bls.n	800132c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2204      	movs	r2, #4
 800131c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	22e0      	movs	r2, #224	@ 0xe0
 8001324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e021      	b.n	8001370 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1e4      	bne.n	8001308 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 fd2c 	bl	8001d9c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 fdd3 	bl	8001ef0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 fe29 	bl	8001fa2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	461a      	mov	r2, r3
 8001356:	2100      	movs	r1, #0
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 fd91 	bl	8001e80 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2210      	movs	r2, #16
 800136a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40023800 	.word	0x40023800
 800137c:	40013800 	.word	0x40013800

08001380 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800138e:	2b10      	cmp	r3, #16
 8001390:	d150      	bne.n	8001434 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2223      	movs	r2, #35	@ 0x23
 8001396:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2204      	movs	r2, #4
 800139e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f939 	bl	8001618 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 0208 	orr.w	r2, r2, #8
 80013b4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013be:	2001      	movs	r0, #1
 80013c0:	f7ff fe58 	bl	8001074 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 0204 	orr.w	r2, r2, #4
 80013da:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013e4:	2001      	movs	r0, #1
 80013e6:	f7ff fe45 	bl	8001074 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 fb72 	bl	8001adc <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800140a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800140e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	f043 0302 	orr.w	r3, r3, #2
 8001422:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001426:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2223      	movs	r2, #35	@ 0x23
 800142c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	e000      	b.n	8001436 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
  }
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b084      	sub	sp, #16
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800144c:	2b23      	cmp	r3, #35	@ 0x23
 800144e:	d14a      	bne.n	80014e6 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2223      	movs	r2, #35	@ 0x23
 8001454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800146a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800146e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	f023 0302 	bic.w	r3, r3, #2
 8001482:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001486:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0204 	bic.w	r2, r2, #4
 8001496:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f7ff fde7 	bl	8001074 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 fb14 	bl	8001adc <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0208 	bic.w	r2, r2, #8
 80014c2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014cc:	2001      	movs	r0, #1
 80014ce:	f7ff fdd1 	bl	8001074 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2210      	movs	r2, #16
 80014de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e000      	b.n	80014e8 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
  }
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d109      	bne.n	8001516 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001508:	f043 0201 	orr.w	r2, r3, #1
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e07c      	b.n	8001610 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800151c:	2b23      	cmp	r3, #35	@ 0x23
 800151e:	d176      	bne.n	800160e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001520:	2200      	movs	r2, #0
 8001522:	68b9      	ldr	r1, [r7, #8]
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f000 fda9 	bl	800207c <ETH_Prepare_Tx_Descriptors>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d009      	beq.n	8001544 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001536:	f043 0202 	orr.w	r2, r3, #2
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e065      	b.n	8001610 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001544:	f3bf 8f4f 	dsb	sy
}
 8001548:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3206      	adds	r2, #6
 8001552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001556:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	629a      	str	r2, [r3, #40]	@ 0x28
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001566:	2b03      	cmp	r3, #3
 8001568:	d904      	bls.n	8001574 <HAL_ETH_Transmit+0x84>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156e:	1f1a      	subs	r2, r3, #4
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	3106      	adds	r1, #6
 8001580:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001584:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001588:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800158a:	f7ff fd67 	bl	800105c <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001590:	e037      	b.n	8001602 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d011      	beq.n	80015c8 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015aa:	f043 0208 	orr.w	r2, r3, #8
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015bc:	695a      	ldr	r2, [r3, #20]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e023      	b.n	8001610 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ce:	d018      	beq.n	8001602 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015d0:	f7ff fd44 	bl	800105c <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d302      	bcc.n	80015e6 <HAL_ETH_Transmit+0xf6>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10d      	bne.n	8001602 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015ec:	f043 0204 	orr.w	r2, r3, #4
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80015fc:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e006      	b.n	8001610 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	dbc3      	blt.n	8001592 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
  }
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001624:	2301      	movs	r3, #1
 8001626:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800162c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69fa      	ldr	r2, [r7, #28]
 8001632:	3212      	adds	r2, #18
 8001634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001638:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800163e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001640:	e040      	b.n	80016c4 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d112      	bne.n	8001670 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	4618      	mov	r0, r3
 8001650:	f002 fc2e 	bl	8003eb0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	74fb      	strb	r3, [r7, #19]
 800165e:	e007      	b.n	8001670 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	461a      	mov	r2, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	461a      	mov	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001670:	7cfb      	ldrb	r3, [r7, #19]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d026      	beq.n	80016c4 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167a:	2b00      	cmp	r3, #0
 800167c:	d103      	bne.n	8001686 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	4a1e      	ldr	r2, [pc, #120]	@ (80016fc <ETH_UpdateDescriptor+0xe4>)
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	e003      	b.n	800168e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 800168c:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800168e:	f3bf 8f5f 	dmb	sy
}
 8001692:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	3301      	adds	r3, #1
 80016a4:	61fb      	str	r3, [r7, #28]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	d902      	bls.n	80016b2 <ETH_UpdateDescriptor+0x9a>
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	3b04      	subs	r3, #4
 80016b0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	3212      	adds	r2, #18
 80016b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016bc:	617b      	str	r3, [r7, #20]
      desccount--;
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <ETH_UpdateDescriptor+0xb8>
 80016ca:	7cfb      	ldrb	r3, [r7, #19]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1b8      	bne.n	8001642 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d00c      	beq.n	80016f4 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016e2:	461a      	mov	r2, r3
 80016e4:	2300      	movs	r3, #0
 80016e6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80016f4:	bf00      	nop
 80016f6:	3720      	adds	r7, #32
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	80004600 	.word	0x80004600

08001700 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f003 031c 	and.w	r3, r3, #28
 800171c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	02db      	lsls	r3, r3, #11
 8001722:	b29b      	uxth	r3, r3
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	4313      	orrs	r3, r2
 8001728:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	019b      	lsls	r3, r3, #6
 800172e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4313      	orrs	r3, r2
 8001736:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f023 0302 	bic.w	r3, r3, #2
 800173e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001750:	f7ff fc84 	bl	800105c <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001756:	e00d      	b.n	8001774 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001758:	f7ff fc80 	bl	800105c <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001766:	d301      	bcc.n	800176c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e010      	b.n	800178e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1ec      	bne.n	8001758 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	b29b      	uxth	r3, r3
 8001786:	461a      	mov	r2, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f003 031c 	and.w	r3, r3, #28
 80017b2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	02db      	lsls	r3, r3, #11
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	4313      	orrs	r3, r2
 80017be:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	019b      	lsls	r3, r3, #6
 80017c4:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017f0:	f7ff fc34 	bl	800105c <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017f6:	e00d      	b.n	8001814 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80017f8:	f7ff fc30 	bl	800105c <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001806:	d301      	bcc.n	800180c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e009      	b.n	8001820 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1ec      	bne.n	80017f8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0d9      	b.n	80019f0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	2b00      	cmp	r3, #0
 8001848:	bf14      	ite	ne
 800184a:	2301      	movne	r3, #1
 800184c:	2300      	moveq	r3, #0
 800184e:	b2db      	uxtb	r3, r3
 8001850:	461a      	mov	r2, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001870:	2b00      	cmp	r3, #0
 8001872:	bf0c      	ite	eq
 8001874:	2301      	moveq	r3, #1
 8001876:	2300      	movne	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	461a      	mov	r2, r3
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf14      	ite	ne
 8001890:	2301      	movne	r3, #1
 8001892:	2300      	moveq	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	bf0c      	ite	eq
 80018aa:	2301      	moveq	r3, #1
 80018ac:	2300      	movne	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf14      	ite	ne
 80018c4:	2301      	movne	r3, #1
 80018c6:	2300      	moveq	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	bf0c      	ite	eq
 80018fa:	2301      	moveq	r3, #1
 80018fc:	2300      	movne	r3, #0
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	461a      	mov	r2, r3
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800192a:	2b00      	cmp	r3, #0
 800192c:	bf14      	ite	ne
 800192e:	2301      	movne	r3, #1
 8001930:	2300      	moveq	r3, #0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	461a      	mov	r2, r3
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001952:	2b00      	cmp	r3, #0
 8001954:	bf14      	ite	ne
 8001956:	2301      	movne	r3, #1
 8001958:	2300      	moveq	r3, #0
 800195a:	b2db      	uxtb	r3, r3
 800195c:	461a      	mov	r2, r3
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	bf14      	ite	ne
 8001970:	2301      	movne	r3, #1
 8001972:	2300      	moveq	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001988:	2b00      	cmp	r3, #0
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	461a      	mov	r2, r3
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	0c1b      	lsrs	r3, r3, #16
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf14      	ite	ne
 80019c4:	2301      	movne	r3, #1
 80019c6:	2300      	moveq	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf14      	ite	ne
 80019e0:	2301      	movne	r3, #1
 80019e2:	2300      	moveq	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e00b      	b.n	8001a28 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a16:	2b10      	cmp	r3, #16
 8001a18:	d105      	bne.n	8001a26 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001a1a:	6839      	ldr	r1, [r7, #0]
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f883 	bl	8001b28 <ETH_SetMACConfig>

    return HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e000      	b.n	8001a28 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
  }
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f023 031c 	bic.w	r3, r3, #28
 8001a46:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001a48:	f001 fb08 	bl	800305c <HAL_RCC_GetHCLKFreq>
 8001a4c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d908      	bls.n	8001a68 <HAL_ETH_SetMDIOClockRange+0x38>
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	4a1c      	ldr	r2, [pc, #112]	@ (8001acc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d804      	bhi.n	8001a68 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f043 0308 	orr.w	r3, r3, #8
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	e027      	b.n	8001ab8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4a18      	ldr	r2, [pc, #96]	@ (8001acc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d908      	bls.n	8001a82 <HAL_ETH_SetMDIOClockRange+0x52>
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4a17      	ldr	r2, [pc, #92]	@ (8001ad0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d204      	bcs.n	8001a82 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f043 030c 	orr.w	r3, r3, #12
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	e01a      	b.n	8001ab8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	4a12      	ldr	r2, [pc, #72]	@ (8001ad0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d303      	bcc.n	8001a92 <HAL_ETH_SetMDIOClockRange+0x62>
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	4a11      	ldr	r2, [pc, #68]	@ (8001ad4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d911      	bls.n	8001ab6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	4a0f      	ldr	r2, [pc, #60]	@ (8001ad4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d908      	bls.n	8001aac <HAL_ETH_SetMDIOClockRange+0x7c>
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	4a0e      	ldr	r2, [pc, #56]	@ (8001ad8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d804      	bhi.n	8001aac <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	e005      	b.n	8001ab8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f043 0310 	orr.w	r3, r3, #16
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	e000      	b.n	8001ab8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001ab6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	611a      	str	r2, [r3, #16]
}
 8001ac0:	bf00      	nop
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	01312cff 	.word	0x01312cff
 8001acc:	02160ebf 	.word	0x02160ebf
 8001ad0:	03938700 	.word	0x03938700
 8001ad4:	05f5e0ff 	.word	0x05f5e0ff
 8001ad8:	08f0d17f 	.word	0x08f0d17f

08001adc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001afa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001afe:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f7ff fab1 	bl	8001074 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b1c:	6193      	str	r3, [r2, #24]
}
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4b51      	ldr	r3, [pc, #324]	@ (8001c84 <ETH_SetMACConfig+0x15c>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	7c1b      	ldrb	r3, [r3, #16]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d102      	bne.n	8001b50 <ETH_SetMACConfig+0x28>
 8001b4a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001b4e:	e000      	b.n	8001b52 <ETH_SetMACConfig+0x2a>
 8001b50:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	7c5b      	ldrb	r3, [r3, #17]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d102      	bne.n	8001b60 <ETH_SetMACConfig+0x38>
 8001b5a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b5e:	e000      	b.n	8001b62 <ETH_SetMACConfig+0x3a>
 8001b60:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b62:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b68:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	7fdb      	ldrb	r3, [r3, #31]
 8001b6e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001b70:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	7f92      	ldrb	r2, [r2, #30]
 8001b7c:	2a00      	cmp	r2, #0
 8001b7e:	d102      	bne.n	8001b86 <ETH_SetMACConfig+0x5e>
 8001b80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b84:	e000      	b.n	8001b88 <ETH_SetMACConfig+0x60>
 8001b86:	2200      	movs	r2, #0
                        macconf->Speed |
 8001b88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	7f1b      	ldrb	r3, [r3, #28]
 8001b8e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b90:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b96:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	791b      	ldrb	r3, [r3, #4]
 8001b9c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001b9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ba6:	2a00      	cmp	r2, #0
 8001ba8:	d102      	bne.n	8001bb0 <ETH_SetMACConfig+0x88>
 8001baa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bae:	e000      	b.n	8001bb2 <ETH_SetMACConfig+0x8a>
 8001bb0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001bb2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	7bdb      	ldrb	r3, [r3, #15]
 8001bb8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001bba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001bc0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001bc8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001be2:	2001      	movs	r0, #1
 8001be4:	f7ff fa46 	bl	8001074 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001bfe:	4013      	ands	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c06:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001c0e:	2a00      	cmp	r2, #0
 8001c10:	d101      	bne.n	8001c16 <ETH_SetMACConfig+0xee>
 8001c12:	2280      	movs	r2, #128	@ 0x80
 8001c14:	e000      	b.n	8001c18 <ETH_SetMACConfig+0xf0>
 8001c16:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c18:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001c1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001c26:	2a01      	cmp	r2, #1
 8001c28:	d101      	bne.n	8001c2e <ETH_SetMACConfig+0x106>
 8001c2a:	2208      	movs	r2, #8
 8001c2c:	e000      	b.n	8001c30 <ETH_SetMACConfig+0x108>
 8001c2e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001c30:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001c38:	2a01      	cmp	r2, #1
 8001c3a:	d101      	bne.n	8001c40 <ETH_SetMACConfig+0x118>
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	e000      	b.n	8001c42 <ETH_SetMACConfig+0x11a>
 8001c40:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001c42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001c4a:	2a01      	cmp	r2, #1
 8001c4c:	d101      	bne.n	8001c52 <ETH_SetMACConfig+0x12a>
 8001c4e:	2202      	movs	r2, #2
 8001c50:	e000      	b.n	8001c54 <ETH_SetMACConfig+0x12c>
 8001c52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c54:	4313      	orrs	r3, r2
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f7ff fa01 	bl	8001074 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	619a      	str	r2, [r3, #24]
}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	ff20810f 	.word	0xff20810f

08001c88 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4b3d      	ldr	r3, [pc, #244]	@ (8001d98 <ETH_SetDMAConfig+0x110>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	7b1b      	ldrb	r3, [r3, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d102      	bne.n	8001cb4 <ETH_SetDMAConfig+0x2c>
 8001cae:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001cb2:	e000      	b.n	8001cb6 <ETH_SetDMAConfig+0x2e>
 8001cb4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	7b5b      	ldrb	r3, [r3, #13]
 8001cba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001cbc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	7f52      	ldrb	r2, [r2, #29]
 8001cc2:	2a00      	cmp	r2, #0
 8001cc4:	d102      	bne.n	8001ccc <ETH_SetDMAConfig+0x44>
 8001cc6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001cca:	e000      	b.n	8001cce <ETH_SetDMAConfig+0x46>
 8001ccc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001cce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	7b9b      	ldrb	r3, [r3, #14]
 8001cd4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001cd6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001cdc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	7f1b      	ldrb	r3, [r3, #28]
 8001ce2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001ce4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	7f9b      	ldrb	r3, [r3, #30]
 8001cea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001cec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001cf2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001cfa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f7ff f9a8 	bl	8001074 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	791b      	ldrb	r3, [r3, #4]
 8001d36:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d3c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001d42:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d48:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d50:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001d52:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d58:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d5a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d60:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d6e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f7ff f979 	bl	8001074 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6013      	str	r3, [r2, #0]
}
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	f8de3f23 	.word	0xf8de3f23

08001d9c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b0a6      	sub	sp, #152	@ 0x98
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001da4:	2301      	movs	r3, #1
 8001da6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001daa:	2301      	movs	r3, #1
 8001dac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001db0:	2300      	movs	r3, #0
 8001db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001dec:	2300      	movs	r3, #0
 8001dee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001dfe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e02:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e10:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e14:	4619      	mov	r1, r3
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff fe86 	bl	8001b28 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001e20:	2301      	movs	r3, #1
 8001e22:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001e24:	2301      	movs	r3, #1
 8001e26:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001e42:	2301      	movs	r3, #1
 8001e44:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e50:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e56:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e5c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e6c:	f107 0308 	add.w	r3, r7, #8
 8001e70:	4619      	mov	r1, r3
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ff08 	bl	8001c88 <ETH_SetDMAConfig>
}
 8001e78:	bf00      	nop
 8001e7a:	3798      	adds	r7, #152	@ 0x98
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3305      	adds	r3, #5
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	021b      	lsls	r3, r3, #8
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	3204      	adds	r2, #4
 8001e98:	7812      	ldrb	r2, [r2, #0]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <ETH_MACAddressConfig+0x68>)
 8001ea2:	4413      	add	r3, r2
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3303      	adds	r3, #3
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	061a      	lsls	r2, r3, #24
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	041b      	lsls	r3, r3, #16
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	7812      	ldrb	r2, [r2, #0]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <ETH_MACAddressConfig+0x6c>)
 8001ed2:	4413      	add	r3, r2
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	6013      	str	r3, [r2, #0]
}
 8001eda:	bf00      	nop
 8001edc:	371c      	adds	r7, #28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40028040 	.word	0x40028040
 8001eec:	40028044 	.word	0x40028044

08001ef0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	e03e      	b.n	8001f7c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68d9      	ldr	r1, [r3, #12]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	440b      	add	r3, r1
 8001f0e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2200      	movs	r2, #0
 8001f26:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	3206      	adds	r2, #6
 8001f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d80c      	bhi.n	8001f60 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68d9      	ldr	r1, [r3, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1c5a      	adds	r2, r3, #1
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	440b      	add	r3, r1
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	e004      	b.n	8001f6a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	461a      	mov	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d9bd      	bls.n	8001efe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f94:	611a      	str	r2, [r3, #16]
}
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b085      	sub	sp, #20
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	e046      	b.n	800203e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6919      	ldr	r1, [r3, #16]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	440b      	add	r3, r1
 8001fc0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001fec:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8001ff4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002002:	68b9      	ldr	r1, [r7, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	3212      	adds	r2, #18
 800200a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d80c      	bhi.n	800202e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6919      	ldr	r1, [r3, #16]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1c5a      	adds	r2, r3, #1
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	440b      	add	r3, r1
 8002026:	461a      	mov	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	60da      	str	r2, [r3, #12]
 800202c:	e004      	b.n	8002038 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	461a      	mov	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3301      	adds	r3, #1
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d9b5      	bls.n	8001fb0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691a      	ldr	r2, [r3, #16]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800206e:	60da      	str	r2, [r3, #12]
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800207c:	b480      	push	{r7}
 800207e:	b08d      	sub	sp, #52	@ 0x34
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3318      	adds	r3, #24
 800208c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80020ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80020be:	d007      	beq.n	80020d0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020c4:	3304      	adds	r3, #4
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80020d0:	2302      	movs	r3, #2
 80020d2:	e0ff      	b.n	80022d4 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80020d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d6:	3301      	adds	r3, #1
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	4b7d      	ldr	r3, [pc, #500]	@ (80022e0 <ETH_Prepare_Tx_Descriptors+0x264>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	69fa      	ldr	r2, [r7, #28]
 80020ee:	6852      	ldr	r2, [r2, #4]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d008      	beq.n	8002114 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	431a      	orrs	r2, r3
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	431a      	orrs	r2, r3
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	2b00      	cmp	r3, #0
 800213c:	d005      	beq.n	800214a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002156:	f3bf 8f5f 	dmb	sy
}
 800215a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002168:	e082      	b.n	8002270 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d006      	beq.n	800218a <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	e005      	b.n	8002196 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002198:	3301      	adds	r3, #1
 800219a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800219c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d902      	bls.n	80021a8 <ETH_Prepare_Tx_Descriptors+0x12c>
 80021a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021a4:	3b04      	subs	r3, #4
 80021a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80021c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80021ca:	d007      	beq.n	80021dc <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021d0:	3304      	adds	r3, #4
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d029      	beq.n	8002230 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021ee:	e019      	b.n	8002224 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80021f0:	f3bf 8f5f 	dmb	sy
}
 80021f4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002204:	3301      	adds	r3, #1
 8002206:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800220a:	2b03      	cmp	r3, #3
 800220c:	d902      	bls.n	8002214 <ETH_Prepare_Tx_Descriptors+0x198>
 800220e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002210:	3b04      	subs	r3, #4
 8002212:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800221e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002220:	3301      	adds	r3, #1
 8002222:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002224:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002228:	429a      	cmp	r2, r3
 800222a:	d3e1      	bcc.n	80021f0 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 800222c:	2302      	movs	r3, #2
 800222e:	e051      	b.n	80022d4 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002232:	3301      	adds	r3, #1
 8002234:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	4b25      	ldr	r3, [pc, #148]	@ (80022e0 <ETH_Prepare_Tx_Descriptors+0x264>)
 800224c:	4013      	ands	r3, r2
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	6852      	ldr	r2, [r2, #4]
 8002252:	431a      	orrs	r2, r3
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	3301      	adds	r3, #1
 800225c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800225e:	f3bf 8f5f 	dmb	sy
}
 8002262:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	f47f af78 	bne.w	800216a <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d006      	beq.n	800228e <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	e005      	b.n	800229a <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80022a2:	6a3b      	ldr	r3, [r7, #32]
 80022a4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022aa:	6979      	ldr	r1, [r7, #20]
 80022ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ae:	3304      	adds	r3, #4
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022ba:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80022bc:	b672      	cpsid	i
}
 80022be:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	4413      	add	r3, r2
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80022ce:	b662      	cpsie	i
}
 80022d0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3734      	adds	r7, #52	@ 0x34
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	ffffe000 	.word	0xffffe000

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	@ 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	e175      	b.n	80025f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002304:	2201      	movs	r2, #1
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	429a      	cmp	r2, r3
 800231e:	f040 8164 	bne.w	80025ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b01      	cmp	r3, #1
 800232c:	d005      	beq.n	800233a <HAL_GPIO_Init+0x56>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d130      	bne.n	800239c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	2203      	movs	r2, #3
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002370:	2201      	movs	r2, #1
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 0201 	and.w	r2, r3, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d017      	beq.n	80023d8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	2203      	movs	r2, #3
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d123      	bne.n	800242c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	08da      	lsrs	r2, r3, #3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3208      	adds	r2, #8
 80023ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	220f      	movs	r2, #15
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	08da      	lsrs	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3208      	adds	r2, #8
 8002426:	69b9      	ldr	r1, [r7, #24]
 8002428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	2203      	movs	r2, #3
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0203 	and.w	r2, r3, #3
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80be 	beq.w	80025ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246e:	4b66      	ldr	r3, [pc, #408]	@ (8002608 <HAL_GPIO_Init+0x324>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002472:	4a65      	ldr	r2, [pc, #404]	@ (8002608 <HAL_GPIO_Init+0x324>)
 8002474:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002478:	6453      	str	r3, [r2, #68]	@ 0x44
 800247a:	4b63      	ldr	r3, [pc, #396]	@ (8002608 <HAL_GPIO_Init+0x324>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002486:	4a61      	ldr	r2, [pc, #388]	@ (800260c <HAL_GPIO_Init+0x328>)
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	3302      	adds	r3, #2
 800248e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	220f      	movs	r2, #15
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a58      	ldr	r2, [pc, #352]	@ (8002610 <HAL_GPIO_Init+0x32c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d037      	beq.n	8002522 <HAL_GPIO_Init+0x23e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a57      	ldr	r2, [pc, #348]	@ (8002614 <HAL_GPIO_Init+0x330>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d031      	beq.n	800251e <HAL_GPIO_Init+0x23a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a56      	ldr	r2, [pc, #344]	@ (8002618 <HAL_GPIO_Init+0x334>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d02b      	beq.n	800251a <HAL_GPIO_Init+0x236>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a55      	ldr	r2, [pc, #340]	@ (800261c <HAL_GPIO_Init+0x338>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d025      	beq.n	8002516 <HAL_GPIO_Init+0x232>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a54      	ldr	r2, [pc, #336]	@ (8002620 <HAL_GPIO_Init+0x33c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d01f      	beq.n	8002512 <HAL_GPIO_Init+0x22e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a53      	ldr	r2, [pc, #332]	@ (8002624 <HAL_GPIO_Init+0x340>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d019      	beq.n	800250e <HAL_GPIO_Init+0x22a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a52      	ldr	r2, [pc, #328]	@ (8002628 <HAL_GPIO_Init+0x344>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d013      	beq.n	800250a <HAL_GPIO_Init+0x226>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a51      	ldr	r2, [pc, #324]	@ (800262c <HAL_GPIO_Init+0x348>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d00d      	beq.n	8002506 <HAL_GPIO_Init+0x222>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a50      	ldr	r2, [pc, #320]	@ (8002630 <HAL_GPIO_Init+0x34c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d007      	beq.n	8002502 <HAL_GPIO_Init+0x21e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4f      	ldr	r2, [pc, #316]	@ (8002634 <HAL_GPIO_Init+0x350>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d101      	bne.n	80024fe <HAL_GPIO_Init+0x21a>
 80024fa:	2309      	movs	r3, #9
 80024fc:	e012      	b.n	8002524 <HAL_GPIO_Init+0x240>
 80024fe:	230a      	movs	r3, #10
 8002500:	e010      	b.n	8002524 <HAL_GPIO_Init+0x240>
 8002502:	2308      	movs	r3, #8
 8002504:	e00e      	b.n	8002524 <HAL_GPIO_Init+0x240>
 8002506:	2307      	movs	r3, #7
 8002508:	e00c      	b.n	8002524 <HAL_GPIO_Init+0x240>
 800250a:	2306      	movs	r3, #6
 800250c:	e00a      	b.n	8002524 <HAL_GPIO_Init+0x240>
 800250e:	2305      	movs	r3, #5
 8002510:	e008      	b.n	8002524 <HAL_GPIO_Init+0x240>
 8002512:	2304      	movs	r3, #4
 8002514:	e006      	b.n	8002524 <HAL_GPIO_Init+0x240>
 8002516:	2303      	movs	r3, #3
 8002518:	e004      	b.n	8002524 <HAL_GPIO_Init+0x240>
 800251a:	2302      	movs	r3, #2
 800251c:	e002      	b.n	8002524 <HAL_GPIO_Init+0x240>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <HAL_GPIO_Init+0x240>
 8002522:	2300      	movs	r3, #0
 8002524:	69fa      	ldr	r2, [r7, #28]
 8002526:	f002 0203 	and.w	r2, r2, #3
 800252a:	0092      	lsls	r2, r2, #2
 800252c:	4093      	lsls	r3, r2
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002534:	4935      	ldr	r1, [pc, #212]	@ (800260c <HAL_GPIO_Init+0x328>)
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	089b      	lsrs	r3, r3, #2
 800253a:	3302      	adds	r3, #2
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002542:	4b3d      	ldr	r3, [pc, #244]	@ (8002638 <HAL_GPIO_Init+0x354>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	43db      	mvns	r3, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002566:	4a34      	ldr	r2, [pc, #208]	@ (8002638 <HAL_GPIO_Init+0x354>)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800256c:	4b32      	ldr	r3, [pc, #200]	@ (8002638 <HAL_GPIO_Init+0x354>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002590:	4a29      	ldr	r2, [pc, #164]	@ (8002638 <HAL_GPIO_Init+0x354>)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002596:	4b28      	ldr	r3, [pc, #160]	@ (8002638 <HAL_GPIO_Init+0x354>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ba:	4a1f      	ldr	r2, [pc, #124]	@ (8002638 <HAL_GPIO_Init+0x354>)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002638 <HAL_GPIO_Init+0x354>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025e4:	4a14      	ldr	r2, [pc, #80]	@ (8002638 <HAL_GPIO_Init+0x354>)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3301      	adds	r3, #1
 80025ee:	61fb      	str	r3, [r7, #28]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	2b0f      	cmp	r3, #15
 80025f4:	f67f ae86 	bls.w	8002304 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	3724      	adds	r7, #36	@ 0x24
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800
 800260c:	40013800 	.word	0x40013800
 8002610:	40020000 	.word	0x40020000
 8002614:	40020400 	.word	0x40020400
 8002618:	40020800 	.word	0x40020800
 800261c:	40020c00 	.word	0x40020c00
 8002620:	40021000 	.word	0x40021000
 8002624:	40021400 	.word	0x40021400
 8002628:	40021800 	.word	0x40021800
 800262c:	40021c00 	.word	0x40021c00
 8002630:	40022000 	.word	0x40022000
 8002634:	40022400 	.word	0x40022400
 8002638:	40013c00 	.word	0x40013c00

0800263c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	807b      	strh	r3, [r7, #2]
 8002648:	4613      	mov	r3, r2
 800264a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800264c:	787b      	ldrb	r3, [r7, #1]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002652:	887a      	ldrh	r2, [r7, #2]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002658:	e003      	b.n	8002662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800265a:	887b      	ldrh	r3, [r7, #2]
 800265c:	041a      	lsls	r2, r3, #16
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	619a      	str	r2, [r3, #24]
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002674:	4b05      	ldr	r3, [pc, #20]	@ (800268c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a04      	ldr	r2, [pc, #16]	@ (800268c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800267a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800267e:	6013      	str	r3, [r2, #0]
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40007000 	.word	0x40007000

08002690 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800269a:	4b23      	ldr	r3, [pc, #140]	@ (8002728 <HAL_PWREx_EnableOverDrive+0x98>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	4a22      	ldr	r2, [pc, #136]	@ (8002728 <HAL_PWREx_EnableOverDrive+0x98>)
 80026a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026a6:	4b20      	ldr	r3, [pc, #128]	@ (8002728 <HAL_PWREx_EnableOverDrive+0x98>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ae:	603b      	str	r3, [r7, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80026b2:	4b1e      	ldr	r3, [pc, #120]	@ (800272c <HAL_PWREx_EnableOverDrive+0x9c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a1d      	ldr	r2, [pc, #116]	@ (800272c <HAL_PWREx_EnableOverDrive+0x9c>)
 80026b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026be:	f7fe fccd 	bl	800105c <HAL_GetTick>
 80026c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026c4:	e009      	b.n	80026da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026c6:	f7fe fcc9 	bl	800105c <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026d4:	d901      	bls.n	80026da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e022      	b.n	8002720 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026da:	4b14      	ldr	r3, [pc, #80]	@ (800272c <HAL_PWREx_EnableOverDrive+0x9c>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026e6:	d1ee      	bne.n	80026c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80026e8:	4b10      	ldr	r3, [pc, #64]	@ (800272c <HAL_PWREx_EnableOverDrive+0x9c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a0f      	ldr	r2, [pc, #60]	@ (800272c <HAL_PWREx_EnableOverDrive+0x9c>)
 80026ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026f4:	f7fe fcb2 	bl	800105c <HAL_GetTick>
 80026f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026fa:	e009      	b.n	8002710 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026fc:	f7fe fcae 	bl	800105c <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800270a:	d901      	bls.n	8002710 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e007      	b.n	8002720 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002718:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800271c:	d1ee      	bne.n	80026fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40023800 	.word	0x40023800
 800272c:	40007000 	.word	0x40007000

08002730 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002738:	2300      	movs	r3, #0
 800273a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e291      	b.n	8002c6a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 8087 	beq.w	8002862 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002754:	4b96      	ldr	r3, [pc, #600]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 030c 	and.w	r3, r3, #12
 800275c:	2b04      	cmp	r3, #4
 800275e:	d00c      	beq.n	800277a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002760:	4b93      	ldr	r3, [pc, #588]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 030c 	and.w	r3, r3, #12
 8002768:	2b08      	cmp	r3, #8
 800276a:	d112      	bne.n	8002792 <HAL_RCC_OscConfig+0x62>
 800276c:	4b90      	ldr	r3, [pc, #576]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002774:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002778:	d10b      	bne.n	8002792 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277a:	4b8d      	ldr	r3, [pc, #564]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d06c      	beq.n	8002860 <HAL_RCC_OscConfig+0x130>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d168      	bne.n	8002860 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e26b      	b.n	8002c6a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800279a:	d106      	bne.n	80027aa <HAL_RCC_OscConfig+0x7a>
 800279c:	4b84      	ldr	r3, [pc, #528]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a83      	ldr	r2, [pc, #524]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 80027a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	e02e      	b.n	8002808 <HAL_RCC_OscConfig+0xd8>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0x9c>
 80027b2:	4b7f      	ldr	r3, [pc, #508]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a7e      	ldr	r2, [pc, #504]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 80027b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b7c      	ldr	r3, [pc, #496]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a7b      	ldr	r2, [pc, #492]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 80027c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e01d      	b.n	8002808 <HAL_RCC_OscConfig+0xd8>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027d4:	d10c      	bne.n	80027f0 <HAL_RCC_OscConfig+0xc0>
 80027d6:	4b76      	ldr	r3, [pc, #472]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a75      	ldr	r2, [pc, #468]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 80027dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	4b73      	ldr	r3, [pc, #460]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a72      	ldr	r2, [pc, #456]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 80027e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	e00b      	b.n	8002808 <HAL_RCC_OscConfig+0xd8>
 80027f0:	4b6f      	ldr	r3, [pc, #444]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a6e      	ldr	r2, [pc, #440]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 80027f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027fa:	6013      	str	r3, [r2, #0]
 80027fc:	4b6c      	ldr	r3, [pc, #432]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a6b      	ldr	r2, [pc, #428]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002802:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d013      	beq.n	8002838 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002810:	f7fe fc24 	bl	800105c <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002818:	f7fe fc20 	bl	800105c <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b64      	cmp	r3, #100	@ 0x64
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e21f      	b.n	8002c6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	4b61      	ldr	r3, [pc, #388]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0xe8>
 8002836:	e014      	b.n	8002862 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7fe fc10 	bl	800105c <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002840:	f7fe fc0c 	bl	800105c <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b64      	cmp	r3, #100	@ 0x64
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e20b      	b.n	8002c6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002852:	4b57      	ldr	r3, [pc, #348]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x110>
 800285e:	e000      	b.n	8002862 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d069      	beq.n	8002942 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800286e:	4b50      	ldr	r3, [pc, #320]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00b      	beq.n	8002892 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800287a:	4b4d      	ldr	r3, [pc, #308]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b08      	cmp	r3, #8
 8002884:	d11c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x190>
 8002886:	4b4a      	ldr	r3, [pc, #296]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d116      	bne.n	80028c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002892:	4b47      	ldr	r3, [pc, #284]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <HAL_RCC_OscConfig+0x17a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d001      	beq.n	80028aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e1df      	b.n	8002c6a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028aa:	4b41      	ldr	r3, [pc, #260]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	493d      	ldr	r1, [pc, #244]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028be:	e040      	b.n	8002942 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d023      	beq.n	8002910 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028c8:	4b39      	ldr	r3, [pc, #228]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a38      	ldr	r2, [pc, #224]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe fbc2 	bl	800105c <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028dc:	f7fe fbbe 	bl	800105c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e1bd      	b.n	8002c6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ee:	4b30      	ldr	r3, [pc, #192]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fa:	4b2d      	ldr	r3, [pc, #180]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4929      	ldr	r1, [pc, #164]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
 800290e:	e018      	b.n	8002942 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002910:	4b27      	ldr	r3, [pc, #156]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a26      	ldr	r2, [pc, #152]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002916:	f023 0301 	bic.w	r3, r3, #1
 800291a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7fe fb9e 	bl	800105c <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002924:	f7fe fb9a 	bl	800105c <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e199      	b.n	8002c6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002936:	4b1e      	ldr	r3, [pc, #120]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d038      	beq.n	80029c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d019      	beq.n	800298a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002956:	4b16      	ldr	r3, [pc, #88]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800295a:	4a15      	ldr	r2, [pc, #84]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002962:	f7fe fb7b 	bl	800105c <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296a:	f7fe fb77 	bl	800105c <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e176      	b.n	8002c6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297c:	4b0c      	ldr	r3, [pc, #48]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 800297e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x23a>
 8002988:	e01a      	b.n	80029c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298a:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 800298c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800298e:	4a08      	ldr	r2, [pc, #32]	@ (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002990:	f023 0301 	bic.w	r3, r3, #1
 8002994:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002996:	f7fe fb61 	bl	800105c <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800299c:	e00a      	b.n	80029b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299e:	f7fe fb5d 	bl	800105c <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d903      	bls.n	80029b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e15c      	b.n	8002c6a <HAL_RCC_OscConfig+0x53a>
 80029b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b4:	4b91      	ldr	r3, [pc, #580]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 80029b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1ee      	bne.n	800299e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 80a4 	beq.w	8002b16 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ce:	4b8b      	ldr	r3, [pc, #556]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10d      	bne.n	80029f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80029da:	4b88      	ldr	r3, [pc, #544]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	4a87      	ldr	r2, [pc, #540]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 80029e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029e6:	4b85      	ldr	r3, [pc, #532]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f2:	2301      	movs	r3, #1
 80029f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f6:	4b82      	ldr	r3, [pc, #520]	@ (8002c00 <HAL_RCC_OscConfig+0x4d0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d118      	bne.n	8002a34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a02:	4b7f      	ldr	r3, [pc, #508]	@ (8002c00 <HAL_RCC_OscConfig+0x4d0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a7e      	ldr	r2, [pc, #504]	@ (8002c00 <HAL_RCC_OscConfig+0x4d0>)
 8002a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0e:	f7fe fb25 	bl	800105c <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a16:	f7fe fb21 	bl	800105c <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b64      	cmp	r3, #100	@ 0x64
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e120      	b.n	8002c6a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a28:	4b75      	ldr	r3, [pc, #468]	@ (8002c00 <HAL_RCC_OscConfig+0x4d0>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d106      	bne.n	8002a4a <HAL_RCC_OscConfig+0x31a>
 8002a3c:	4b6f      	ldr	r3, [pc, #444]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a40:	4a6e      	ldr	r2, [pc, #440]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a48:	e02d      	b.n	8002aa6 <HAL_RCC_OscConfig+0x376>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x33c>
 8002a52:	4b6a      	ldr	r3, [pc, #424]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a56:	4a69      	ldr	r2, [pc, #420]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002a58:	f023 0301 	bic.w	r3, r3, #1
 8002a5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a5e:	4b67      	ldr	r3, [pc, #412]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a62:	4a66      	ldr	r2, [pc, #408]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002a64:	f023 0304 	bic.w	r3, r3, #4
 8002a68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a6a:	e01c      	b.n	8002aa6 <HAL_RCC_OscConfig+0x376>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b05      	cmp	r3, #5
 8002a72:	d10c      	bne.n	8002a8e <HAL_RCC_OscConfig+0x35e>
 8002a74:	4b61      	ldr	r3, [pc, #388]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a78:	4a60      	ldr	r2, [pc, #384]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002a7a:	f043 0304 	orr.w	r3, r3, #4
 8002a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a80:	4b5e      	ldr	r3, [pc, #376]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a84:	4a5d      	ldr	r2, [pc, #372]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a8c:	e00b      	b.n	8002aa6 <HAL_RCC_OscConfig+0x376>
 8002a8e:	4b5b      	ldr	r3, [pc, #364]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a92:	4a5a      	ldr	r2, [pc, #360]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002a94:	f023 0301 	bic.w	r3, r3, #1
 8002a98:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a9a:	4b58      	ldr	r3, [pc, #352]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9e:	4a57      	ldr	r2, [pc, #348]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002aa0:	f023 0304 	bic.w	r3, r3, #4
 8002aa4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d015      	beq.n	8002ada <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aae:	f7fe fad5 	bl	800105c <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab4:	e00a      	b.n	8002acc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab6:	f7fe fad1 	bl	800105c <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e0ce      	b.n	8002c6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002acc:	4b4b      	ldr	r3, [pc, #300]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0ee      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x386>
 8002ad8:	e014      	b.n	8002b04 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ada:	f7fe fabf 	bl	800105c <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae0:	e00a      	b.n	8002af8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae2:	f7fe fabb 	bl	800105c <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e0b8      	b.n	8002c6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af8:	4b40      	ldr	r3, [pc, #256]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1ee      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b04:	7dfb      	ldrb	r3, [r7, #23]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d105      	bne.n	8002b16 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0a:	4b3c      	ldr	r3, [pc, #240]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	4a3b      	ldr	r2, [pc, #236]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002b10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b14:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 80a4 	beq.w	8002c68 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b20:	4b36      	ldr	r3, [pc, #216]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 030c 	and.w	r3, r3, #12
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d06b      	beq.n	8002c04 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d149      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b34:	4b31      	ldr	r3, [pc, #196]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a30      	ldr	r2, [pc, #192]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002b3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe fa8c 	bl	800105c <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b48:	f7fe fa88 	bl	800105c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e087      	b.n	8002c6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5a:	4b28      	ldr	r3, [pc, #160]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69da      	ldr	r2, [r3, #28]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b74:	019b      	lsls	r3, r3, #6
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7c:	085b      	lsrs	r3, r3, #1
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	041b      	lsls	r3, r3, #16
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b88:	061b      	lsls	r3, r3, #24
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002b8e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002b92:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b94:	4b19      	ldr	r3, [pc, #100]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a18      	ldr	r2, [pc, #96]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002b9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fa5c 	bl	800105c <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fe fa58 	bl	800105c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e057      	b.n	8002c6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bba:	4b10      	ldr	r3, [pc, #64]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x478>
 8002bc6:	e04f      	b.n	8002c68 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a0b      	ldr	r2, [pc, #44]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002bce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7fe fa42 	bl	800105c <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bdc:	f7fe fa3e 	bl	800105c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e03d      	b.n	8002c6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bee:	4b03      	ldr	r3, [pc, #12]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x4ac>
 8002bfa:	e035      	b.n	8002c68 <HAL_RCC_OscConfig+0x538>
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c04:	4b1b      	ldr	r3, [pc, #108]	@ (8002c74 <HAL_RCC_OscConfig+0x544>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d028      	beq.n	8002c64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d121      	bne.n	8002c64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d11a      	bne.n	8002c64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c34:	4013      	ands	r3, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d111      	bne.n	8002c64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4a:	085b      	lsrs	r3, r3, #1
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d107      	bne.n	8002c64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d001      	beq.n	8002c68 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800

08002c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0d0      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c90:	4b6a      	ldr	r3, [pc, #424]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d910      	bls.n	8002cc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b67      	ldr	r3, [pc, #412]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f023 020f 	bic.w	r2, r3, #15
 8002ca6:	4965      	ldr	r1, [pc, #404]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cae:	4b63      	ldr	r3, [pc, #396]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0b8      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cd8:	4b59      	ldr	r3, [pc, #356]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c8>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4a58      	ldr	r2, [pc, #352]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c8>)
 8002cde:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ce2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf0:	4b53      	ldr	r3, [pc, #332]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	4a52      	ldr	r2, [pc, #328]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cfa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cfc:	4b50      	ldr	r3, [pc, #320]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c8>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	494d      	ldr	r1, [pc, #308]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c8>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d040      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d107      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d22:	4b47      	ldr	r3, [pc, #284]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d115      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e07f      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d107      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3a:	4b41      	ldr	r3, [pc, #260]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e073      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e06b      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d5a:	4b39      	ldr	r3, [pc, #228]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f023 0203 	bic.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4936      	ldr	r1, [pc, #216]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c8>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d6c:	f7fe f976 	bl	800105c <HAL_GetTick>
 8002d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d74:	f7fe f972 	bl	800105c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e053      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 020c 	and.w	r2, r3, #12
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d1eb      	bne.n	8002d74 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b27      	ldr	r3, [pc, #156]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d210      	bcs.n	8002dcc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b24      	ldr	r3, [pc, #144]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 020f 	bic.w	r2, r3, #15
 8002db2:	4922      	ldr	r1, [pc, #136]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dba:	4b20      	ldr	r3, [pc, #128]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e032      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd8:	4b19      	ldr	r3, [pc, #100]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c8>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4916      	ldr	r1, [pc, #88]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c8>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002df6:	4b12      	ldr	r3, [pc, #72]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c8>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	490e      	ldr	r1, [pc, #56]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c8>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e0a:	f000 f821 	bl	8002e50 <HAL_RCC_GetSysClockFreq>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c8>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	490a      	ldr	r1, [pc, #40]	@ (8002e44 <HAL_RCC_ClockConfig+0x1cc>)
 8002e1c:	5ccb      	ldrb	r3, [r1, r3]
 8002e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e22:	4a09      	ldr	r2, [pc, #36]	@ (8002e48 <HAL_RCC_ClockConfig+0x1d0>)
 8002e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e26:	4b09      	ldr	r3, [pc, #36]	@ (8002e4c <HAL_RCC_ClockConfig+0x1d4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe f8d2 	bl	8000fd4 <HAL_InitTick>

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023c00 	.word	0x40023c00
 8002e40:	40023800 	.word	0x40023800
 8002e44:	08011914 	.word	0x08011914
 8002e48:	20000000 	.word	0x20000000
 8002e4c:	20000004 	.word	0x20000004

08002e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e54:	b094      	sub	sp, #80	@ 0x50
 8002e56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e60:	2300      	movs	r3, #0
 8002e62:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e68:	4b79      	ldr	r3, [pc, #484]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 030c 	and.w	r3, r3, #12
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d00d      	beq.n	8002e90 <HAL_RCC_GetSysClockFreq+0x40>
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	f200 80e1 	bhi.w	800303c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0x34>
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d003      	beq.n	8002e8a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e82:	e0db      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e84:	4b73      	ldr	r3, [pc, #460]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e88:	e0db      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e8a:	4b73      	ldr	r3, [pc, #460]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e8e:	e0d8      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e90:	4b6f      	ldr	r3, [pc, #444]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e98:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e9a:	4b6d      	ldr	r3, [pc, #436]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d063      	beq.n	8002f6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea6:	4b6a      	ldr	r3, [pc, #424]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	099b      	lsrs	r3, r3, #6
 8002eac:	2200      	movs	r2, #0
 8002eae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002eb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002eba:	2300      	movs	r3, #0
 8002ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ebe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ec2:	4622      	mov	r2, r4
 8002ec4:	462b      	mov	r3, r5
 8002ec6:	f04f 0000 	mov.w	r0, #0
 8002eca:	f04f 0100 	mov.w	r1, #0
 8002ece:	0159      	lsls	r1, r3, #5
 8002ed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ed4:	0150      	lsls	r0, r2, #5
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4621      	mov	r1, r4
 8002edc:	1a51      	subs	r1, r2, r1
 8002ede:	6139      	str	r1, [r7, #16]
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ef4:	4659      	mov	r1, fp
 8002ef6:	018b      	lsls	r3, r1, #6
 8002ef8:	4651      	mov	r1, sl
 8002efa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002efe:	4651      	mov	r1, sl
 8002f00:	018a      	lsls	r2, r1, #6
 8002f02:	4651      	mov	r1, sl
 8002f04:	ebb2 0801 	subs.w	r8, r2, r1
 8002f08:	4659      	mov	r1, fp
 8002f0a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f22:	4690      	mov	r8, r2
 8002f24:	4699      	mov	r9, r3
 8002f26:	4623      	mov	r3, r4
 8002f28:	eb18 0303 	adds.w	r3, r8, r3
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	462b      	mov	r3, r5
 8002f30:	eb49 0303 	adc.w	r3, r9, r3
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f42:	4629      	mov	r1, r5
 8002f44:	024b      	lsls	r3, r1, #9
 8002f46:	4621      	mov	r1, r4
 8002f48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	024a      	lsls	r2, r1, #9
 8002f50:	4610      	mov	r0, r2
 8002f52:	4619      	mov	r1, r3
 8002f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f56:	2200      	movs	r2, #0
 8002f58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f60:	f7fd f9a6 	bl	80002b0 <__aeabi_uldivmod>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4613      	mov	r3, r2
 8002f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f6c:	e058      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f6e:	4b38      	ldr	r3, [pc, #224]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	099b      	lsrs	r3, r3, #6
 8002f74:	2200      	movs	r2, #0
 8002f76:	4618      	mov	r0, r3
 8002f78:	4611      	mov	r1, r2
 8002f7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f7e:	623b      	str	r3, [r7, #32]
 8002f80:	2300      	movs	r3, #0
 8002f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f88:	4642      	mov	r2, r8
 8002f8a:	464b      	mov	r3, r9
 8002f8c:	f04f 0000 	mov.w	r0, #0
 8002f90:	f04f 0100 	mov.w	r1, #0
 8002f94:	0159      	lsls	r1, r3, #5
 8002f96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f9a:	0150      	lsls	r0, r2, #5
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4641      	mov	r1, r8
 8002fa2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fa6:	4649      	mov	r1, r9
 8002fa8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fc0:	ebb2 040a 	subs.w	r4, r2, sl
 8002fc4:	eb63 050b 	sbc.w	r5, r3, fp
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	00eb      	lsls	r3, r5, #3
 8002fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fd6:	00e2      	lsls	r2, r4, #3
 8002fd8:	4614      	mov	r4, r2
 8002fda:	461d      	mov	r5, r3
 8002fdc:	4643      	mov	r3, r8
 8002fde:	18e3      	adds	r3, r4, r3
 8002fe0:	603b      	str	r3, [r7, #0]
 8002fe2:	464b      	mov	r3, r9
 8002fe4:	eb45 0303 	adc.w	r3, r5, r3
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	028b      	lsls	r3, r1, #10
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003000:	4621      	mov	r1, r4
 8003002:	028a      	lsls	r2, r1, #10
 8003004:	4610      	mov	r0, r2
 8003006:	4619      	mov	r1, r3
 8003008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800300a:	2200      	movs	r2, #0
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	61fa      	str	r2, [r7, #28]
 8003010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003014:	f7fd f94c 	bl	80002b0 <__aeabi_uldivmod>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4613      	mov	r3, r2
 800301e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003020:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	0c1b      	lsrs	r3, r3, #16
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	3301      	adds	r3, #1
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003030:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003034:	fbb2 f3f3 	udiv	r3, r2, r3
 8003038:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800303a:	e002      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800303c:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x204>)
 800303e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003042:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003044:	4618      	mov	r0, r3
 8003046:	3750      	adds	r7, #80	@ 0x50
 8003048:	46bd      	mov	sp, r7
 800304a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
 8003054:	00f42400 	.word	0x00f42400
 8003058:	007a1200 	.word	0x007a1200

0800305c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003060:	4b03      	ldr	r3, [pc, #12]	@ (8003070 <HAL_RCC_GetHCLKFreq+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000000 	.word	0x20000000

08003074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e049      	b.n	800311a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fd fcd8 	bl	8000a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3304      	adds	r3, #4
 80030b0:	4619      	mov	r1, r3
 80030b2:	4610      	mov	r0, r2
 80030b4:	f000 f900 	bl	80032b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_TIM_ConfigClockSource+0x1c>
 800313c:	2302      	movs	r3, #2
 800313e:	e0b4      	b.n	80032aa <HAL_TIM_ConfigClockSource+0x186>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	4b56      	ldr	r3, [pc, #344]	@ (80032b4 <HAL_TIM_ConfigClockSource+0x190>)
 800315c:	4013      	ands	r3, r2
 800315e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003166:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003178:	d03e      	beq.n	80031f8 <HAL_TIM_ConfigClockSource+0xd4>
 800317a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800317e:	f200 8087 	bhi.w	8003290 <HAL_TIM_ConfigClockSource+0x16c>
 8003182:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003186:	f000 8086 	beq.w	8003296 <HAL_TIM_ConfigClockSource+0x172>
 800318a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800318e:	d87f      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x16c>
 8003190:	2b70      	cmp	r3, #112	@ 0x70
 8003192:	d01a      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0xa6>
 8003194:	2b70      	cmp	r3, #112	@ 0x70
 8003196:	d87b      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x16c>
 8003198:	2b60      	cmp	r3, #96	@ 0x60
 800319a:	d050      	beq.n	800323e <HAL_TIM_ConfigClockSource+0x11a>
 800319c:	2b60      	cmp	r3, #96	@ 0x60
 800319e:	d877      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x16c>
 80031a0:	2b50      	cmp	r3, #80	@ 0x50
 80031a2:	d03c      	beq.n	800321e <HAL_TIM_ConfigClockSource+0xfa>
 80031a4:	2b50      	cmp	r3, #80	@ 0x50
 80031a6:	d873      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x16c>
 80031a8:	2b40      	cmp	r3, #64	@ 0x40
 80031aa:	d058      	beq.n	800325e <HAL_TIM_ConfigClockSource+0x13a>
 80031ac:	2b40      	cmp	r3, #64	@ 0x40
 80031ae:	d86f      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x16c>
 80031b0:	2b30      	cmp	r3, #48	@ 0x30
 80031b2:	d064      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x15a>
 80031b4:	2b30      	cmp	r3, #48	@ 0x30
 80031b6:	d86b      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x16c>
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d060      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x15a>
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d867      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x16c>
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d05c      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x15a>
 80031c4:	2b10      	cmp	r3, #16
 80031c6:	d05a      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x15a>
 80031c8:	e062      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031da:	f000 f987 	bl	80034ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	609a      	str	r2, [r3, #8]
      break;
 80031f6:	e04f      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003208:	f000 f970 	bl	80034ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800321a:	609a      	str	r2, [r3, #8]
      break;
 800321c:	e03c      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800322a:	461a      	mov	r2, r3
 800322c:	f000 f8e4 	bl	80033f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2150      	movs	r1, #80	@ 0x50
 8003236:	4618      	mov	r0, r3
 8003238:	f000 f93d 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 800323c:	e02c      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800324a:	461a      	mov	r2, r3
 800324c:	f000 f903 	bl	8003456 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2160      	movs	r1, #96	@ 0x60
 8003256:	4618      	mov	r0, r3
 8003258:	f000 f92d 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 800325c:	e01c      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800326a:	461a      	mov	r2, r3
 800326c:	f000 f8c4 	bl	80033f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2140      	movs	r1, #64	@ 0x40
 8003276:	4618      	mov	r0, r3
 8003278:	f000 f91d 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 800327c:	e00c      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4619      	mov	r1, r3
 8003288:	4610      	mov	r0, r2
 800328a:	f000 f914 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 800328e:	e003      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
      break;
 8003294:	e000      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003296:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	fffeff88 	.word	0xfffeff88

080032b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a40      	ldr	r2, [pc, #256]	@ (80033cc <TIM_Base_SetConfig+0x114>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d013      	beq.n	80032f8 <TIM_Base_SetConfig+0x40>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032d6:	d00f      	beq.n	80032f8 <TIM_Base_SetConfig+0x40>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a3d      	ldr	r2, [pc, #244]	@ (80033d0 <TIM_Base_SetConfig+0x118>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00b      	beq.n	80032f8 <TIM_Base_SetConfig+0x40>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a3c      	ldr	r2, [pc, #240]	@ (80033d4 <TIM_Base_SetConfig+0x11c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d007      	beq.n	80032f8 <TIM_Base_SetConfig+0x40>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a3b      	ldr	r2, [pc, #236]	@ (80033d8 <TIM_Base_SetConfig+0x120>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d003      	beq.n	80032f8 <TIM_Base_SetConfig+0x40>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a3a      	ldr	r2, [pc, #232]	@ (80033dc <TIM_Base_SetConfig+0x124>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d108      	bne.n	800330a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	4313      	orrs	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a2f      	ldr	r2, [pc, #188]	@ (80033cc <TIM_Base_SetConfig+0x114>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d02b      	beq.n	800336a <TIM_Base_SetConfig+0xb2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003318:	d027      	beq.n	800336a <TIM_Base_SetConfig+0xb2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a2c      	ldr	r2, [pc, #176]	@ (80033d0 <TIM_Base_SetConfig+0x118>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d023      	beq.n	800336a <TIM_Base_SetConfig+0xb2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a2b      	ldr	r2, [pc, #172]	@ (80033d4 <TIM_Base_SetConfig+0x11c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d01f      	beq.n	800336a <TIM_Base_SetConfig+0xb2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a2a      	ldr	r2, [pc, #168]	@ (80033d8 <TIM_Base_SetConfig+0x120>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d01b      	beq.n	800336a <TIM_Base_SetConfig+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a29      	ldr	r2, [pc, #164]	@ (80033dc <TIM_Base_SetConfig+0x124>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d017      	beq.n	800336a <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a28      	ldr	r2, [pc, #160]	@ (80033e0 <TIM_Base_SetConfig+0x128>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d013      	beq.n	800336a <TIM_Base_SetConfig+0xb2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a27      	ldr	r2, [pc, #156]	@ (80033e4 <TIM_Base_SetConfig+0x12c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00f      	beq.n	800336a <TIM_Base_SetConfig+0xb2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a26      	ldr	r2, [pc, #152]	@ (80033e8 <TIM_Base_SetConfig+0x130>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00b      	beq.n	800336a <TIM_Base_SetConfig+0xb2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a25      	ldr	r2, [pc, #148]	@ (80033ec <TIM_Base_SetConfig+0x134>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d007      	beq.n	800336a <TIM_Base_SetConfig+0xb2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a24      	ldr	r2, [pc, #144]	@ (80033f0 <TIM_Base_SetConfig+0x138>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d003      	beq.n	800336a <TIM_Base_SetConfig+0xb2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a23      	ldr	r2, [pc, #140]	@ (80033f4 <TIM_Base_SetConfig+0x13c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d108      	bne.n	800337c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	4313      	orrs	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a0a      	ldr	r2, [pc, #40]	@ (80033cc <TIM_Base_SetConfig+0x114>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d003      	beq.n	80033b0 <TIM_Base_SetConfig+0xf8>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a0c      	ldr	r2, [pc, #48]	@ (80033dc <TIM_Base_SetConfig+0x124>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d103      	bne.n	80033b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	615a      	str	r2, [r3, #20]
}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40010000 	.word	0x40010000
 80033d0:	40000400 	.word	0x40000400
 80033d4:	40000800 	.word	0x40000800
 80033d8:	40000c00 	.word	0x40000c00
 80033dc:	40010400 	.word	0x40010400
 80033e0:	40014000 	.word	0x40014000
 80033e4:	40014400 	.word	0x40014400
 80033e8:	40014800 	.word	0x40014800
 80033ec:	40001800 	.word	0x40001800
 80033f0:	40001c00 	.word	0x40001c00
 80033f4:	40002000 	.word	0x40002000

080033f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	f023 0201 	bic.w	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f023 030a 	bic.w	r3, r3, #10
 8003434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	621a      	str	r2, [r3, #32]
}
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003456:	b480      	push	{r7}
 8003458:	b087      	sub	sp, #28
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	f023 0210 	bic.w	r2, r3, #16
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003480:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	031b      	lsls	r3, r3, #12
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003492:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	621a      	str	r2, [r3, #32]
}
 80034aa:	bf00      	nop
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f043 0307 	orr.w	r3, r3, #7
 80034d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	609a      	str	r2, [r3, #8]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003506:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	021a      	lsls	r2, r3, #8
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	431a      	orrs	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4313      	orrs	r3, r2
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	609a      	str	r2, [r3, #8]
}
 8003520:	bf00      	nop
 8003522:	371c      	adds	r7, #28
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003540:	2302      	movs	r3, #2
 8003542:	e06d      	b.n	8003620 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a30      	ldr	r2, [pc, #192]	@ (800362c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d004      	beq.n	8003578 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a2f      	ldr	r2, [pc, #188]	@ (8003630 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d108      	bne.n	800358a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800357e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003590:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4313      	orrs	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a20      	ldr	r2, [pc, #128]	@ (800362c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d022      	beq.n	80035f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035b6:	d01d      	beq.n	80035f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003634 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d018      	beq.n	80035f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003638 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d013      	beq.n	80035f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a1a      	ldr	r2, [pc, #104]	@ (800363c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00e      	beq.n	80035f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a15      	ldr	r2, [pc, #84]	@ (8003630 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d009      	beq.n	80035f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a16      	ldr	r2, [pc, #88]	@ (8003640 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d004      	beq.n	80035f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a15      	ldr	r2, [pc, #84]	@ (8003644 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d10c      	bne.n	800360e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	4313      	orrs	r3, r2
 8003604:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	40010000 	.word	0x40010000
 8003630:	40010400 	.word	0x40010400
 8003634:	40000400 	.word	0x40000400
 8003638:	40000800 	.word	0x40000800
 800363c:	40000c00 	.word	0x40000c00
 8003640:	40014000 	.word	0x40014000
 8003644:	40001800 	.word	0x40001800

08003648 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800364e:	4b87      	ldr	r3, [pc, #540]	@ (800386c <MX_LWIP_Init+0x224>)
 8003650:	22c0      	movs	r2, #192	@ 0xc0
 8003652:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003654:	4b85      	ldr	r3, [pc, #532]	@ (800386c <MX_LWIP_Init+0x224>)
 8003656:	22a8      	movs	r2, #168	@ 0xa8
 8003658:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800365a:	4b84      	ldr	r3, [pc, #528]	@ (800386c <MX_LWIP_Init+0x224>)
 800365c:	2201      	movs	r2, #1
 800365e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 9;
 8003660:	4b82      	ldr	r3, [pc, #520]	@ (800386c <MX_LWIP_Init+0x224>)
 8003662:	2209      	movs	r2, #9
 8003664:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003666:	4b82      	ldr	r3, [pc, #520]	@ (8003870 <MX_LWIP_Init+0x228>)
 8003668:	22ff      	movs	r2, #255	@ 0xff
 800366a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800366c:	4b80      	ldr	r3, [pc, #512]	@ (8003870 <MX_LWIP_Init+0x228>)
 800366e:	22ff      	movs	r2, #255	@ 0xff
 8003670:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003672:	4b7f      	ldr	r3, [pc, #508]	@ (8003870 <MX_LWIP_Init+0x228>)
 8003674:	22ff      	movs	r2, #255	@ 0xff
 8003676:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003678:	4b7d      	ldr	r3, [pc, #500]	@ (8003870 <MX_LWIP_Init+0x228>)
 800367a:	2200      	movs	r2, #0
 800367c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800367e:	4b7d      	ldr	r3, [pc, #500]	@ (8003874 <MX_LWIP_Init+0x22c>)
 8003680:	22c0      	movs	r2, #192	@ 0xc0
 8003682:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003684:	4b7b      	ldr	r3, [pc, #492]	@ (8003874 <MX_LWIP_Init+0x22c>)
 8003686:	22a8      	movs	r2, #168	@ 0xa8
 8003688:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 50;
 800368a:	4b7a      	ldr	r3, [pc, #488]	@ (8003874 <MX_LWIP_Init+0x22c>)
 800368c:	2232      	movs	r2, #50	@ 0x32
 800368e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003690:	4b78      	ldr	r3, [pc, #480]	@ (8003874 <MX_LWIP_Init+0x22c>)
 8003692:	2201      	movs	r2, #1
 8003694:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8003696:	f000 fc69 	bl	8003f6c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800369a:	4b74      	ldr	r3, [pc, #464]	@ (800386c <MX_LWIP_Init+0x224>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	061a      	lsls	r2, r3, #24
 80036a0:	4b72      	ldr	r3, [pc, #456]	@ (800386c <MX_LWIP_Init+0x224>)
 80036a2:	785b      	ldrb	r3, [r3, #1]
 80036a4:	041b      	lsls	r3, r3, #16
 80036a6:	431a      	orrs	r2, r3
 80036a8:	4b70      	ldr	r3, [pc, #448]	@ (800386c <MX_LWIP_Init+0x224>)
 80036aa:	789b      	ldrb	r3, [r3, #2]
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	4313      	orrs	r3, r2
 80036b0:	4a6e      	ldr	r2, [pc, #440]	@ (800386c <MX_LWIP_Init+0x224>)
 80036b2:	78d2      	ldrb	r2, [r2, #3]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	061a      	lsls	r2, r3, #24
 80036b8:	4b6c      	ldr	r3, [pc, #432]	@ (800386c <MX_LWIP_Init+0x224>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	0619      	lsls	r1, r3, #24
 80036be:	4b6b      	ldr	r3, [pc, #428]	@ (800386c <MX_LWIP_Init+0x224>)
 80036c0:	785b      	ldrb	r3, [r3, #1]
 80036c2:	041b      	lsls	r3, r3, #16
 80036c4:	4319      	orrs	r1, r3
 80036c6:	4b69      	ldr	r3, [pc, #420]	@ (800386c <MX_LWIP_Init+0x224>)
 80036c8:	789b      	ldrb	r3, [r3, #2]
 80036ca:	021b      	lsls	r3, r3, #8
 80036cc:	430b      	orrs	r3, r1
 80036ce:	4967      	ldr	r1, [pc, #412]	@ (800386c <MX_LWIP_Init+0x224>)
 80036d0:	78c9      	ldrb	r1, [r1, #3]
 80036d2:	430b      	orrs	r3, r1
 80036d4:	021b      	lsls	r3, r3, #8
 80036d6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80036da:	431a      	orrs	r2, r3
 80036dc:	4b63      	ldr	r3, [pc, #396]	@ (800386c <MX_LWIP_Init+0x224>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	0619      	lsls	r1, r3, #24
 80036e2:	4b62      	ldr	r3, [pc, #392]	@ (800386c <MX_LWIP_Init+0x224>)
 80036e4:	785b      	ldrb	r3, [r3, #1]
 80036e6:	041b      	lsls	r3, r3, #16
 80036e8:	4319      	orrs	r1, r3
 80036ea:	4b60      	ldr	r3, [pc, #384]	@ (800386c <MX_LWIP_Init+0x224>)
 80036ec:	789b      	ldrb	r3, [r3, #2]
 80036ee:	021b      	lsls	r3, r3, #8
 80036f0:	430b      	orrs	r3, r1
 80036f2:	495e      	ldr	r1, [pc, #376]	@ (800386c <MX_LWIP_Init+0x224>)
 80036f4:	78c9      	ldrb	r1, [r1, #3]
 80036f6:	430b      	orrs	r3, r1
 80036f8:	0a1b      	lsrs	r3, r3, #8
 80036fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80036fe:	431a      	orrs	r2, r3
 8003700:	4b5a      	ldr	r3, [pc, #360]	@ (800386c <MX_LWIP_Init+0x224>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	0619      	lsls	r1, r3, #24
 8003706:	4b59      	ldr	r3, [pc, #356]	@ (800386c <MX_LWIP_Init+0x224>)
 8003708:	785b      	ldrb	r3, [r3, #1]
 800370a:	041b      	lsls	r3, r3, #16
 800370c:	4319      	orrs	r1, r3
 800370e:	4b57      	ldr	r3, [pc, #348]	@ (800386c <MX_LWIP_Init+0x224>)
 8003710:	789b      	ldrb	r3, [r3, #2]
 8003712:	021b      	lsls	r3, r3, #8
 8003714:	430b      	orrs	r3, r1
 8003716:	4955      	ldr	r1, [pc, #340]	@ (800386c <MX_LWIP_Init+0x224>)
 8003718:	78c9      	ldrb	r1, [r1, #3]
 800371a:	430b      	orrs	r3, r1
 800371c:	0e1b      	lsrs	r3, r3, #24
 800371e:	4313      	orrs	r3, r2
 8003720:	4a55      	ldr	r2, [pc, #340]	@ (8003878 <MX_LWIP_Init+0x230>)
 8003722:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003724:	4b52      	ldr	r3, [pc, #328]	@ (8003870 <MX_LWIP_Init+0x228>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	061a      	lsls	r2, r3, #24
 800372a:	4b51      	ldr	r3, [pc, #324]	@ (8003870 <MX_LWIP_Init+0x228>)
 800372c:	785b      	ldrb	r3, [r3, #1]
 800372e:	041b      	lsls	r3, r3, #16
 8003730:	431a      	orrs	r2, r3
 8003732:	4b4f      	ldr	r3, [pc, #316]	@ (8003870 <MX_LWIP_Init+0x228>)
 8003734:	789b      	ldrb	r3, [r3, #2]
 8003736:	021b      	lsls	r3, r3, #8
 8003738:	4313      	orrs	r3, r2
 800373a:	4a4d      	ldr	r2, [pc, #308]	@ (8003870 <MX_LWIP_Init+0x228>)
 800373c:	78d2      	ldrb	r2, [r2, #3]
 800373e:	4313      	orrs	r3, r2
 8003740:	061a      	lsls	r2, r3, #24
 8003742:	4b4b      	ldr	r3, [pc, #300]	@ (8003870 <MX_LWIP_Init+0x228>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	0619      	lsls	r1, r3, #24
 8003748:	4b49      	ldr	r3, [pc, #292]	@ (8003870 <MX_LWIP_Init+0x228>)
 800374a:	785b      	ldrb	r3, [r3, #1]
 800374c:	041b      	lsls	r3, r3, #16
 800374e:	4319      	orrs	r1, r3
 8003750:	4b47      	ldr	r3, [pc, #284]	@ (8003870 <MX_LWIP_Init+0x228>)
 8003752:	789b      	ldrb	r3, [r3, #2]
 8003754:	021b      	lsls	r3, r3, #8
 8003756:	430b      	orrs	r3, r1
 8003758:	4945      	ldr	r1, [pc, #276]	@ (8003870 <MX_LWIP_Init+0x228>)
 800375a:	78c9      	ldrb	r1, [r1, #3]
 800375c:	430b      	orrs	r3, r1
 800375e:	021b      	lsls	r3, r3, #8
 8003760:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003764:	431a      	orrs	r2, r3
 8003766:	4b42      	ldr	r3, [pc, #264]	@ (8003870 <MX_LWIP_Init+0x228>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	0619      	lsls	r1, r3, #24
 800376c:	4b40      	ldr	r3, [pc, #256]	@ (8003870 <MX_LWIP_Init+0x228>)
 800376e:	785b      	ldrb	r3, [r3, #1]
 8003770:	041b      	lsls	r3, r3, #16
 8003772:	4319      	orrs	r1, r3
 8003774:	4b3e      	ldr	r3, [pc, #248]	@ (8003870 <MX_LWIP_Init+0x228>)
 8003776:	789b      	ldrb	r3, [r3, #2]
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	430b      	orrs	r3, r1
 800377c:	493c      	ldr	r1, [pc, #240]	@ (8003870 <MX_LWIP_Init+0x228>)
 800377e:	78c9      	ldrb	r1, [r1, #3]
 8003780:	430b      	orrs	r3, r1
 8003782:	0a1b      	lsrs	r3, r3, #8
 8003784:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003788:	431a      	orrs	r2, r3
 800378a:	4b39      	ldr	r3, [pc, #228]	@ (8003870 <MX_LWIP_Init+0x228>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	0619      	lsls	r1, r3, #24
 8003790:	4b37      	ldr	r3, [pc, #220]	@ (8003870 <MX_LWIP_Init+0x228>)
 8003792:	785b      	ldrb	r3, [r3, #1]
 8003794:	041b      	lsls	r3, r3, #16
 8003796:	4319      	orrs	r1, r3
 8003798:	4b35      	ldr	r3, [pc, #212]	@ (8003870 <MX_LWIP_Init+0x228>)
 800379a:	789b      	ldrb	r3, [r3, #2]
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	430b      	orrs	r3, r1
 80037a0:	4933      	ldr	r1, [pc, #204]	@ (8003870 <MX_LWIP_Init+0x228>)
 80037a2:	78c9      	ldrb	r1, [r1, #3]
 80037a4:	430b      	orrs	r3, r1
 80037a6:	0e1b      	lsrs	r3, r3, #24
 80037a8:	4313      	orrs	r3, r2
 80037aa:	4a34      	ldr	r2, [pc, #208]	@ (800387c <MX_LWIP_Init+0x234>)
 80037ac:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80037ae:	4b31      	ldr	r3, [pc, #196]	@ (8003874 <MX_LWIP_Init+0x22c>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	061a      	lsls	r2, r3, #24
 80037b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003874 <MX_LWIP_Init+0x22c>)
 80037b6:	785b      	ldrb	r3, [r3, #1]
 80037b8:	041b      	lsls	r3, r3, #16
 80037ba:	431a      	orrs	r2, r3
 80037bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003874 <MX_LWIP_Init+0x22c>)
 80037be:	789b      	ldrb	r3, [r3, #2]
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	4313      	orrs	r3, r2
 80037c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003874 <MX_LWIP_Init+0x22c>)
 80037c6:	78d2      	ldrb	r2, [r2, #3]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	061a      	lsls	r2, r3, #24
 80037cc:	4b29      	ldr	r3, [pc, #164]	@ (8003874 <MX_LWIP_Init+0x22c>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	0619      	lsls	r1, r3, #24
 80037d2:	4b28      	ldr	r3, [pc, #160]	@ (8003874 <MX_LWIP_Init+0x22c>)
 80037d4:	785b      	ldrb	r3, [r3, #1]
 80037d6:	041b      	lsls	r3, r3, #16
 80037d8:	4319      	orrs	r1, r3
 80037da:	4b26      	ldr	r3, [pc, #152]	@ (8003874 <MX_LWIP_Init+0x22c>)
 80037dc:	789b      	ldrb	r3, [r3, #2]
 80037de:	021b      	lsls	r3, r3, #8
 80037e0:	430b      	orrs	r3, r1
 80037e2:	4924      	ldr	r1, [pc, #144]	@ (8003874 <MX_LWIP_Init+0x22c>)
 80037e4:	78c9      	ldrb	r1, [r1, #3]
 80037e6:	430b      	orrs	r3, r1
 80037e8:	021b      	lsls	r3, r3, #8
 80037ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80037ee:	431a      	orrs	r2, r3
 80037f0:	4b20      	ldr	r3, [pc, #128]	@ (8003874 <MX_LWIP_Init+0x22c>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	0619      	lsls	r1, r3, #24
 80037f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003874 <MX_LWIP_Init+0x22c>)
 80037f8:	785b      	ldrb	r3, [r3, #1]
 80037fa:	041b      	lsls	r3, r3, #16
 80037fc:	4319      	orrs	r1, r3
 80037fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003874 <MX_LWIP_Init+0x22c>)
 8003800:	789b      	ldrb	r3, [r3, #2]
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	430b      	orrs	r3, r1
 8003806:	491b      	ldr	r1, [pc, #108]	@ (8003874 <MX_LWIP_Init+0x22c>)
 8003808:	78c9      	ldrb	r1, [r1, #3]
 800380a:	430b      	orrs	r3, r1
 800380c:	0a1b      	lsrs	r3, r3, #8
 800380e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003812:	431a      	orrs	r2, r3
 8003814:	4b17      	ldr	r3, [pc, #92]	@ (8003874 <MX_LWIP_Init+0x22c>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	0619      	lsls	r1, r3, #24
 800381a:	4b16      	ldr	r3, [pc, #88]	@ (8003874 <MX_LWIP_Init+0x22c>)
 800381c:	785b      	ldrb	r3, [r3, #1]
 800381e:	041b      	lsls	r3, r3, #16
 8003820:	4319      	orrs	r1, r3
 8003822:	4b14      	ldr	r3, [pc, #80]	@ (8003874 <MX_LWIP_Init+0x22c>)
 8003824:	789b      	ldrb	r3, [r3, #2]
 8003826:	021b      	lsls	r3, r3, #8
 8003828:	430b      	orrs	r3, r1
 800382a:	4912      	ldr	r1, [pc, #72]	@ (8003874 <MX_LWIP_Init+0x22c>)
 800382c:	78c9      	ldrb	r1, [r1, #3]
 800382e:	430b      	orrs	r3, r1
 8003830:	0e1b      	lsrs	r3, r3, #24
 8003832:	4313      	orrs	r3, r2
 8003834:	4a12      	ldr	r2, [pc, #72]	@ (8003880 <MX_LWIP_Init+0x238>)
 8003836:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003838:	4b12      	ldr	r3, [pc, #72]	@ (8003884 <MX_LWIP_Init+0x23c>)
 800383a:	9302      	str	r3, [sp, #8]
 800383c:	4b12      	ldr	r3, [pc, #72]	@ (8003888 <MX_LWIP_Init+0x240>)
 800383e:	9301      	str	r3, [sp, #4]
 8003840:	2300      	movs	r3, #0
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	4b0e      	ldr	r3, [pc, #56]	@ (8003880 <MX_LWIP_Init+0x238>)
 8003846:	4a0d      	ldr	r2, [pc, #52]	@ (800387c <MX_LWIP_Init+0x234>)
 8003848:	490b      	ldr	r1, [pc, #44]	@ (8003878 <MX_LWIP_Init+0x230>)
 800384a:	4810      	ldr	r0, [pc, #64]	@ (800388c <MX_LWIP_Init+0x244>)
 800384c:	f001 f87a 	bl	8004944 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003850:	480e      	ldr	r0, [pc, #56]	@ (800388c <MX_LWIP_Init+0x244>)
 8003852:	f001 fa29 	bl	8004ca8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003856:	480d      	ldr	r0, [pc, #52]	@ (800388c <MX_LWIP_Init+0x244>)
 8003858:	f001 fa36 	bl	8004cc8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800385c:	490c      	ldr	r1, [pc, #48]	@ (8003890 <MX_LWIP_Init+0x248>)
 800385e:	480b      	ldr	r0, [pc, #44]	@ (800388c <MX_LWIP_Init+0x244>)
 8003860:	f001 fb34 	bl	8004ecc <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003864:	bf00      	nop
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20000280 	.word	0x20000280
 8003870:	20000284 	.word	0x20000284
 8003874:	20000288 	.word	0x20000288
 8003878:	20000274 	.word	0x20000274
 800387c:	20000278 	.word	0x20000278
 8003880:	2000027c 	.word	0x2000027c
 8003884:	0800dd5d 	.word	0x0800dd5d
 8003888:	08003aed 	.word	0x08003aed
 800388c:	20000240 	.word	0x20000240
 8003890:	08003895 	.word	0x08003895

08003894 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80038b4:	4b44      	ldr	r3, [pc, #272]	@ (80039c8 <low_level_init+0x120>)
 80038b6:	4a45      	ldr	r2, [pc, #276]	@ (80039cc <low_level_init+0x124>)
 80038b8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80038ba:	2300      	movs	r3, #0
 80038bc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80038be:	2380      	movs	r3, #128	@ 0x80
 80038c0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80038c2:	23e1      	movs	r3, #225	@ 0xe1
 80038c4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80038c6:	2300      	movs	r3, #0
 80038c8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80038ca:	2300      	movs	r3, #0
 80038cc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80038ce:	2300      	movs	r3, #0
 80038d0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80038d2:	4a3d      	ldr	r2, [pc, #244]	@ (80039c8 <low_level_init+0x120>)
 80038d4:	f107 0308 	add.w	r3, r7, #8
 80038d8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80038da:	4b3b      	ldr	r3, [pc, #236]	@ (80039c8 <low_level_init+0x120>)
 80038dc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80038e0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80038e2:	4b39      	ldr	r3, [pc, #228]	@ (80039c8 <low_level_init+0x120>)
 80038e4:	4a3a      	ldr	r2, [pc, #232]	@ (80039d0 <low_level_init+0x128>)
 80038e6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80038e8:	4b37      	ldr	r3, [pc, #220]	@ (80039c8 <low_level_init+0x120>)
 80038ea:	4a3a      	ldr	r2, [pc, #232]	@ (80039d4 <low_level_init+0x12c>)
 80038ec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80038ee:	4b36      	ldr	r3, [pc, #216]	@ (80039c8 <low_level_init+0x120>)
 80038f0:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80038f4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80038f6:	4834      	ldr	r0, [pc, #208]	@ (80039c8 <low_level_init+0x120>)
 80038f8:	f7fd fcc6 	bl	8001288 <HAL_ETH_Init>
 80038fc:	4603      	mov	r3, r0
 80038fe:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003900:	2238      	movs	r2, #56	@ 0x38
 8003902:	2100      	movs	r1, #0
 8003904:	4834      	ldr	r0, [pc, #208]	@ (80039d8 <low_level_init+0x130>)
 8003906:	f00a fc64 	bl	800e1d2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800390a:	4b33      	ldr	r3, [pc, #204]	@ (80039d8 <low_level_init+0x130>)
 800390c:	2221      	movs	r2, #33	@ 0x21
 800390e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003910:	4b31      	ldr	r3, [pc, #196]	@ (80039d8 <low_level_init+0x130>)
 8003912:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8003916:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003918:	4b2f      	ldr	r3, [pc, #188]	@ (80039d8 <low_level_init+0x130>)
 800391a:	2200      	movs	r2, #0
 800391c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800391e:	482f      	ldr	r0, [pc, #188]	@ (80039dc <low_level_init+0x134>)
 8003920:	f000 fed8 	bl	80046d4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2206      	movs	r2, #6
 8003928:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800392c:	4b26      	ldr	r3, [pc, #152]	@ (80039c8 <low_level_init+0x120>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	781a      	ldrb	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003938:	4b23      	ldr	r3, [pc, #140]	@ (80039c8 <low_level_init+0x120>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	785a      	ldrb	r2, [r3, #1]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003944:	4b20      	ldr	r3, [pc, #128]	@ (80039c8 <low_level_init+0x120>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	789a      	ldrb	r2, [r3, #2]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003950:	4b1d      	ldr	r3, [pc, #116]	@ (80039c8 <low_level_init+0x120>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	78da      	ldrb	r2, [r3, #3]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800395c:	4b1a      	ldr	r3, [pc, #104]	@ (80039c8 <low_level_init+0x120>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	791a      	ldrb	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003968:	4b17      	ldr	r3, [pc, #92]	@ (80039c8 <low_level_init+0x120>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	795a      	ldrb	r2, [r3, #5]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800397a:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003982:	f043 030a 	orr.w	r3, r3, #10
 8003986:	b2da      	uxtb	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800398e:	4914      	ldr	r1, [pc, #80]	@ (80039e0 <low_level_init+0x138>)
 8003990:	4814      	ldr	r0, [pc, #80]	@ (80039e4 <low_level_init+0x13c>)
 8003992:	f7fd f9b0 	bl	8000cf6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8003996:	4813      	ldr	r0, [pc, #76]	@ (80039e4 <low_level_init+0x13c>)
 8003998:	f7fd f9df 	bl	8000d5a <LAN8742_Init>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d006      	beq.n	80039b0 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f001 fa62 	bl	8004e6c <netif_set_link_down>
    netif_set_down(netif);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f001 f9f9 	bl	8004da0 <netif_set_down>
 80039ae:	e008      	b.n	80039c2 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d103      	bne.n	80039be <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f9ee 	bl	8003d98 <ethernet_link_check_state>
 80039bc:	e001      	b.n	80039c2 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 80039be:	f7fd f81d 	bl	80009fc <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20004c18 	.word	0x20004c18
 80039cc:	40028000 	.word	0x40028000
 80039d0:	20000128 	.word	0x20000128
 80039d4:	20000088 	.word	0x20000088
 80039d8:	20004cc8 	.word	0x20004cc8
 80039dc:	08011924 	.word	0x08011924
 80039e0:	2000000c 	.word	0x2000000c
 80039e4:	20004d00 	.word	0x20004d00

080039e8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b092      	sub	sp, #72	@ 0x48
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003a00:	f107 030c 	add.w	r3, r7, #12
 8003a04:	2230      	movs	r2, #48	@ 0x30
 8003a06:	2100      	movs	r1, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f00a fbe2 	bl	800e1d2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003a0e:	f107 030c 	add.w	r3, r7, #12
 8003a12:	2230      	movs	r2, #48	@ 0x30
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f00a fbdb 	bl	800e1d2 <memset>

  for(q = p; q != NULL; q = q->next)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a20:	e045      	b.n	8003aae <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003a22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d902      	bls.n	8003a2e <low_level_output+0x46>
      return ERR_IF;
 8003a28:	f06f 030b 	mvn.w	r3, #11
 8003a2c:	e055      	b.n	8003ada <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8003a2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a30:	6859      	ldr	r1, [r3, #4]
 8003a32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a34:	4613      	mov	r3, r2
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	4413      	add	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	3348      	adds	r3, #72	@ 0x48
 8003a3e:	443b      	add	r3, r7
 8003a40:	3b3c      	subs	r3, #60	@ 0x3c
 8003a42:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003a44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a46:	895b      	ldrh	r3, [r3, #10]
 8003a48:	4619      	mov	r1, r3
 8003a4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	3348      	adds	r3, #72	@ 0x48
 8003a56:	443b      	add	r3, r7
 8003a58:	3b38      	subs	r3, #56	@ 0x38
 8003a5a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003a5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d011      	beq.n	8003a86 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003a62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a64:	1e5a      	subs	r2, r3, #1
 8003a66:	f107 000c 	add.w	r0, r7, #12
 8003a6a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	440b      	add	r3, r1
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	18c1      	adds	r1, r0, r3
 8003a76:	4613      	mov	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	3348      	adds	r3, #72	@ 0x48
 8003a80:	443b      	add	r3, r7
 8003a82:	3b34      	subs	r3, #52	@ 0x34
 8003a84:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003a86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d109      	bne.n	8003aa2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8003a8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a90:	4613      	mov	r3, r2
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	3348      	adds	r3, #72	@ 0x48
 8003a9a:	443b      	add	r3, r7
 8003a9c:	3b34      	subs	r3, #52	@ 0x34
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003aa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8003aa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	643b      	str	r3, [r7, #64]	@ 0x40
 8003aae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1b6      	bne.n	8003a22 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	891b      	ldrh	r3, [r3, #8]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae4 <low_level_output+0xfc>)
 8003abc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8003abe:	4a09      	ldr	r2, [pc, #36]	@ (8003ae4 <low_level_output+0xfc>)
 8003ac0:	f107 030c 	add.w	r3, r7, #12
 8003ac4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003ac6:	4a07      	ldr	r2, [pc, #28]	@ (8003ae4 <low_level_output+0xfc>)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8003acc:	2214      	movs	r2, #20
 8003ace:	4905      	ldr	r1, [pc, #20]	@ (8003ae4 <low_level_output+0xfc>)
 8003ad0:	4805      	ldr	r0, [pc, #20]	@ (8003ae8 <low_level_output+0x100>)
 8003ad2:	f7fd fd0d 	bl	80014f0 <HAL_ETH_Transmit>

  return errval;
 8003ad6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3748      	adds	r7, #72	@ 0x48
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20004cc8 	.word	0x20004cc8
 8003ae8:	20004c18 	.word	0x20004c18

08003aec <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <ethernetif_init+0x1c>
 8003afa:	4b0e      	ldr	r3, [pc, #56]	@ (8003b34 <ethernetif_init+0x48>)
 8003afc:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8003b00:	490d      	ldr	r1, [pc, #52]	@ (8003b38 <ethernetif_init+0x4c>)
 8003b02:	480e      	ldr	r0, [pc, #56]	@ (8003b3c <ethernetif_init+0x50>)
 8003b04:	f00a fb00 	bl	800e108 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2273      	movs	r2, #115	@ 0x73
 8003b0c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2274      	movs	r2, #116	@ 0x74
 8003b14:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a09      	ldr	r2, [pc, #36]	@ (8003b40 <ethernetif_init+0x54>)
 8003b1c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a08      	ldr	r2, [pc, #32]	@ (8003b44 <ethernetif_init+0x58>)
 8003b22:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff febf 	bl	80038a8 <low_level_init>

  return ERR_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	0800ef34 	.word	0x0800ef34
 8003b38:	0800ef50 	.word	0x0800ef50
 8003b3c:	0800ef60 	.word	0x0800ef60
 8003b40:	0800c215 	.word	0x0800c215
 8003b44:	080039e9 	.word	0x080039e9

08003b48 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003b54:	68f9      	ldr	r1, [r7, #12]
 8003b56:	4807      	ldr	r0, [pc, #28]	@ (8003b74 <pbuf_free_custom+0x2c>)
 8003b58:	f000 fe9e 	bl	8004898 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003b5c:	4b06      	ldr	r3, [pc, #24]	@ (8003b78 <pbuf_free_custom+0x30>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d102      	bne.n	8003b6a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003b64:	4b04      	ldr	r3, [pc, #16]	@ (8003b78 <pbuf_free_custom+0x30>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	701a      	strb	r2, [r3, #0]
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	08011924 	.word	0x08011924
 8003b78:	20004c14 	.word	0x20004c14

08003b7c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003b80:	f7fd fa6c 	bl	800105c <HAL_GetTick>
 8003b84:	4603      	mov	r3, r0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b08e      	sub	sp, #56	@ 0x38
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	609a      	str	r2, [r3, #8]
 8003ba0:	60da      	str	r2, [r3, #12]
 8003ba2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a4e      	ldr	r2, [pc, #312]	@ (8003ce4 <HAL_ETH_MspInit+0x158>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	f040 8096 	bne.w	8003cdc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003bb0:	4b4d      	ldr	r3, [pc, #308]	@ (8003ce8 <HAL_ETH_MspInit+0x15c>)
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb4:	4a4c      	ldr	r2, [pc, #304]	@ (8003ce8 <HAL_ETH_MspInit+0x15c>)
 8003bb6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003bba:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bbc:	4b4a      	ldr	r3, [pc, #296]	@ (8003ce8 <HAL_ETH_MspInit+0x15c>)
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc4:	623b      	str	r3, [r7, #32]
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	4b47      	ldr	r3, [pc, #284]	@ (8003ce8 <HAL_ETH_MspInit+0x15c>)
 8003bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bcc:	4a46      	ldr	r2, [pc, #280]	@ (8003ce8 <HAL_ETH_MspInit+0x15c>)
 8003bce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003bd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bd4:	4b44      	ldr	r3, [pc, #272]	@ (8003ce8 <HAL_ETH_MspInit+0x15c>)
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	4b41      	ldr	r3, [pc, #260]	@ (8003ce8 <HAL_ETH_MspInit+0x15c>)
 8003be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be4:	4a40      	ldr	r2, [pc, #256]	@ (8003ce8 <HAL_ETH_MspInit+0x15c>)
 8003be6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003bea:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bec:	4b3e      	ldr	r3, [pc, #248]	@ (8003ce8 <HAL_ETH_MspInit+0x15c>)
 8003bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bf4:	61bb      	str	r3, [r7, #24]
 8003bf6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ce8 <HAL_ETH_MspInit+0x15c>)
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfc:	4a3a      	ldr	r2, [pc, #232]	@ (8003ce8 <HAL_ETH_MspInit+0x15c>)
 8003bfe:	f043 0304 	orr.w	r3, r3, #4
 8003c02:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c04:	4b38      	ldr	r3, [pc, #224]	@ (8003ce8 <HAL_ETH_MspInit+0x15c>)
 8003c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c10:	4b35      	ldr	r3, [pc, #212]	@ (8003ce8 <HAL_ETH_MspInit+0x15c>)
 8003c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c14:	4a34      	ldr	r2, [pc, #208]	@ (8003ce8 <HAL_ETH_MspInit+0x15c>)
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c1c:	4b32      	ldr	r3, [pc, #200]	@ (8003ce8 <HAL_ETH_MspInit+0x15c>)
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c28:	4b2f      	ldr	r3, [pc, #188]	@ (8003ce8 <HAL_ETH_MspInit+0x15c>)
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2c:	4a2e      	ldr	r2, [pc, #184]	@ (8003ce8 <HAL_ETH_MspInit+0x15c>)
 8003c2e:	f043 0302 	orr.w	r3, r3, #2
 8003c32:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c34:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce8 <HAL_ETH_MspInit+0x15c>)
 8003c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c40:	4b29      	ldr	r3, [pc, #164]	@ (8003ce8 <HAL_ETH_MspInit+0x15c>)
 8003c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c44:	4a28      	ldr	r2, [pc, #160]	@ (8003ce8 <HAL_ETH_MspInit+0x15c>)
 8003c46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c4c:	4b26      	ldr	r3, [pc, #152]	@ (8003ce8 <HAL_ETH_MspInit+0x15c>)
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003c58:	2332      	movs	r3, #50	@ 0x32
 8003c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c64:	2303      	movs	r3, #3
 8003c66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c68:	230b      	movs	r3, #11
 8003c6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c70:	4619      	mov	r1, r3
 8003c72:	481e      	ldr	r0, [pc, #120]	@ (8003cec <HAL_ETH_MspInit+0x160>)
 8003c74:	f7fe fb36 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003c78:	2386      	movs	r3, #134	@ 0x86
 8003c7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c84:	2303      	movs	r3, #3
 8003c86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c88:	230b      	movs	r3, #11
 8003c8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c90:	4619      	mov	r1, r3
 8003c92:	4817      	ldr	r0, [pc, #92]	@ (8003cf0 <HAL_ETH_MspInit+0x164>)
 8003c94:	f7fe fb26 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003c98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003caa:	230b      	movs	r3, #11
 8003cac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	480f      	ldr	r0, [pc, #60]	@ (8003cf4 <HAL_ETH_MspInit+0x168>)
 8003cb6:	f7fe fb15 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003cba:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ccc:	230b      	movs	r3, #11
 8003cce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003cd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4808      	ldr	r0, [pc, #32]	@ (8003cf8 <HAL_ETH_MspInit+0x16c>)
 8003cd8:	f7fe fb04 	bl	80022e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003cdc:	bf00      	nop
 8003cde:	3738      	adds	r7, #56	@ 0x38
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40028000 	.word	0x40028000
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	40020800 	.word	0x40020800
 8003cf0:	40020000 	.word	0x40020000
 8003cf4:	40020400 	.word	0x40020400
 8003cf8:	40021800 	.word	0x40021800

08003cfc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8003d00:	4802      	ldr	r0, [pc, #8]	@ (8003d0c <ETH_PHY_IO_Init+0x10>)
 8003d02:	f7fd fe95 	bl	8001a30 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20004c18 	.word	0x20004c18

08003d10 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  return 0;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	68f9      	ldr	r1, [r7, #12]
 8003d32:	4807      	ldr	r0, [pc, #28]	@ (8003d50 <ETH_PHY_IO_ReadReg+0x30>)
 8003d34:	f7fd fce4 	bl	8001700 <HAL_ETH_ReadPHYRegister>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8003d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d42:	e000      	b.n	8003d46 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20004c18 	.word	0x20004c18

08003d54 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	68f9      	ldr	r1, [r7, #12]
 8003d66:	4807      	ldr	r0, [pc, #28]	@ (8003d84 <ETH_PHY_IO_WriteReg+0x30>)
 8003d68:	f7fd fd15 	bl	8001796 <HAL_ETH_WritePHYRegister>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8003d72:	f04f 33ff 	mov.w	r3, #4294967295
 8003d76:	e000      	b.n	8003d7a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20004c18 	.word	0x20004c18

08003d88 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003d8c:	f7fd f966 	bl	800105c <HAL_GetTick>
 8003d90:	4603      	mov	r3, r0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b0a0      	sub	sp, #128	@ 0x80
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8003da0:	f107 030c 	add.w	r3, r7, #12
 8003da4:	2264      	movs	r2, #100	@ 0x64
 8003da6:	2100      	movs	r1, #0
 8003da8:	4618      	mov	r0, r3
 8003daa:	f00a fa12 	bl	800e1d2 <memset>
  int32_t PHYLinkState = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003db6:	2300      	movs	r3, #0
 8003db8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dba:	2300      	movs	r3, #0
 8003dbc:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003dbe:	483a      	ldr	r0, [pc, #232]	@ (8003ea8 <ethernet_link_check_state+0x110>)
 8003dc0:	f7fd f873 	bl	8000eaa <LAN8742_GetLinkState>
 8003dc4:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003dcc:	089b      	lsrs	r3, r3, #2
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00c      	beq.n	8003df2 <ethernet_link_check_state+0x5a>
 8003dd8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	dc09      	bgt.n	8003df2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8003dde:	4833      	ldr	r0, [pc, #204]	@ (8003eac <ethernet_link_check_state+0x114>)
 8003de0:	f7fd fb2d 	bl	800143e <HAL_ETH_Stop>
    netif_set_down(netif);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 ffdb 	bl	8004da0 <netif_set_down>
    netif_set_link_down(netif);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f001 f83e 	bl	8004e6c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8003df0:	e055      	b.n	8003e9e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d14e      	bne.n	8003e9e <ethernet_link_check_state+0x106>
 8003e00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	dd4b      	ble.n	8003e9e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8003e06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e08:	3b02      	subs	r3, #2
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d82a      	bhi.n	8003e64 <ethernet_link_check_state+0xcc>
 8003e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e14 <ethernet_link_check_state+0x7c>)
 8003e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e14:	08003e25 	.word	0x08003e25
 8003e18:	08003e37 	.word	0x08003e37
 8003e1c:	08003e47 	.word	0x08003e47
 8003e20:	08003e57 	.word	0x08003e57
      duplex = ETH_FULLDUPLEX_MODE;
 8003e24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e28:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8003e2a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e2e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003e30:	2301      	movs	r3, #1
 8003e32:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003e34:	e017      	b.n	8003e66 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003e36:	2300      	movs	r3, #0
 8003e38:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8003e3a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e3e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003e40:	2301      	movs	r3, #1
 8003e42:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003e44:	e00f      	b.n	8003e66 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8003e46:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e4a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003e50:	2301      	movs	r3, #1
 8003e52:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003e54:	e007      	b.n	8003e66 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003e56:	2300      	movs	r3, #0
 8003e58:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003e62:	e000      	b.n	8003e66 <ethernet_link_check_state+0xce>
      break;
 8003e64:	bf00      	nop
    if(linkchanged)
 8003e66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d018      	beq.n	8003e9e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003e6c:	f107 030c 	add.w	r3, r7, #12
 8003e70:	4619      	mov	r1, r3
 8003e72:	480e      	ldr	r0, [pc, #56]	@ (8003eac <ethernet_link_check_state+0x114>)
 8003e74:	f7fd fcd8 	bl	8001828 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8003e78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e7a:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8003e7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e7e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003e80:	f107 030c 	add.w	r3, r7, #12
 8003e84:	4619      	mov	r1, r3
 8003e86:	4809      	ldr	r0, [pc, #36]	@ (8003eac <ethernet_link_check_state+0x114>)
 8003e88:	f7fd fdb8 	bl	80019fc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8003e8c:	4807      	ldr	r0, [pc, #28]	@ (8003eac <ethernet_link_check_state+0x114>)
 8003e8e:	f7fd fa77 	bl	8001380 <HAL_ETH_Start>
      netif_set_up(netif);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 ff18 	bl	8004cc8 <netif_set_up>
      netif_set_link_up(netif);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 ffb3 	bl	8004e04 <netif_set_link_up>
}
 8003e9e:	bf00      	nop
 8003ea0:	3780      	adds	r7, #128	@ 0x80
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20004d00 	.word	0x20004d00
 8003eac:	20004c18 	.word	0x20004c18

08003eb0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8003eb8:	4812      	ldr	r0, [pc, #72]	@ (8003f04 <HAL_ETH_RxAllocateCallback+0x54>)
 8003eba:	f000 fc7f 	bl	80047bc <memp_malloc_pool>
 8003ebe:	60f8      	str	r0, [r7, #12]
  if (p)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d014      	beq.n	8003ef0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f103 0220 	add.w	r2, r3, #32
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4a0d      	ldr	r2, [pc, #52]	@ (8003f08 <HAL_ETH_RxAllocateCallback+0x58>)
 8003ed4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8003ede:	9201      	str	r2, [sp, #4]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2241      	movs	r2, #65	@ 0x41
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	2000      	movs	r0, #0
 8003eea:	f001 f995 	bl	8005218 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8003eee:	e005      	b.n	8003efc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8003ef0:	4b06      	ldr	r3, [pc, #24]	@ (8003f0c <HAL_ETH_RxAllocateCallback+0x5c>)
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
}
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	08011924 	.word	0x08011924
 8003f08:	08003b49 	.word	0x08003b49
 8003f0c:	20004c14 	.word	0x20004c14

08003f10 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003f1a:	88fb      	ldrh	r3, [r7, #6]
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	b21a      	sxth	r2, r3
 8003f20:	88fb      	ldrh	r3, [r7, #6]
 8003f22:	0a1b      	lsrs	r3, r3, #8
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	b21b      	sxth	r3, r3
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	b21b      	sxth	r3, r3
 8003f2c:	b29b      	uxth	r3, r3
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	061a      	lsls	r2, r3, #24
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	021b      	lsls	r3, r3, #8
 8003f4a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	0a1b      	lsrs	r3, r3, #8
 8003f54:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	0e1b      	lsrs	r3, r3, #24
 8003f5e:	4313      	orrs	r3, r2
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003f76:	f000 f8d5 	bl	8004124 <mem_init>
  memp_init();
 8003f7a:	f000 fbdb 	bl	8004734 <memp_init>
  pbuf_init();
  netif_init();
 8003f7e:	f000 fcd9 	bl	8004934 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003f82:	f007 f893 	bl	800b0ac <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003f86:	f001 fe31 	bl	8005bec <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003f8a:	f007 f847 	bl	800b01c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003fa2:	4b05      	ldr	r3, [pc, #20]	@ (8003fb8 <ptr_to_mem+0x20>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	4413      	add	r3, r2
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	2000538c 	.word	0x2000538c

08003fbc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003fc4:	4b05      	ldr	r3, [pc, #20]	@ (8003fdc <mem_to_ptr+0x20>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	b29b      	uxth	r3, r3
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	2000538c 	.word	0x2000538c

08003fe0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003fe0:	b590      	push	{r4, r7, lr}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003fe8:	4b45      	ldr	r3, [pc, #276]	@ (8004100 <plug_holes+0x120>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d206      	bcs.n	8004000 <plug_holes+0x20>
 8003ff2:	4b44      	ldr	r3, [pc, #272]	@ (8004104 <plug_holes+0x124>)
 8003ff4:	f240 12df 	movw	r2, #479	@ 0x1df
 8003ff8:	4943      	ldr	r1, [pc, #268]	@ (8004108 <plug_holes+0x128>)
 8003ffa:	4844      	ldr	r0, [pc, #272]	@ (800410c <plug_holes+0x12c>)
 8003ffc:	f00a f884 	bl	800e108 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004000:	4b43      	ldr	r3, [pc, #268]	@ (8004110 <plug_holes+0x130>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	429a      	cmp	r2, r3
 8004008:	d306      	bcc.n	8004018 <plug_holes+0x38>
 800400a:	4b3e      	ldr	r3, [pc, #248]	@ (8004104 <plug_holes+0x124>)
 800400c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8004010:	4940      	ldr	r1, [pc, #256]	@ (8004114 <plug_holes+0x134>)
 8004012:	483e      	ldr	r0, [pc, #248]	@ (800410c <plug_holes+0x12c>)
 8004014:	f00a f878 	bl	800e108 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	791b      	ldrb	r3, [r3, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d006      	beq.n	800402e <plug_holes+0x4e>
 8004020:	4b38      	ldr	r3, [pc, #224]	@ (8004104 <plug_holes+0x124>)
 8004022:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8004026:	493c      	ldr	r1, [pc, #240]	@ (8004118 <plug_holes+0x138>)
 8004028:	4838      	ldr	r0, [pc, #224]	@ (800410c <plug_holes+0x12c>)
 800402a:	f00a f86d 	bl	800e108 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004036:	d906      	bls.n	8004046 <plug_holes+0x66>
 8004038:	4b32      	ldr	r3, [pc, #200]	@ (8004104 <plug_holes+0x124>)
 800403a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800403e:	4937      	ldr	r1, [pc, #220]	@ (800411c <plug_holes+0x13c>)
 8004040:	4832      	ldr	r0, [pc, #200]	@ (800410c <plug_holes+0x12c>)
 8004042:	f00a f861 	bl	800e108 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff ffa4 	bl	8003f98 <ptr_to_mem>
 8004050:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	429a      	cmp	r2, r3
 8004058:	d024      	beq.n	80040a4 <plug_holes+0xc4>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	791b      	ldrb	r3, [r3, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d120      	bne.n	80040a4 <plug_holes+0xc4>
 8004062:	4b2b      	ldr	r3, [pc, #172]	@ (8004110 <plug_holes+0x130>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	429a      	cmp	r2, r3
 800406a:	d01b      	beq.n	80040a4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800406c:	4b2c      	ldr	r3, [pc, #176]	@ (8004120 <plug_holes+0x140>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	429a      	cmp	r2, r3
 8004074:	d102      	bne.n	800407c <plug_holes+0x9c>
      lfree = mem;
 8004076:	4a2a      	ldr	r2, [pc, #168]	@ (8004120 <plug_holes+0x140>)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	881a      	ldrh	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800408c:	d00a      	beq.n	80040a4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff ff80 	bl	8003f98 <ptr_to_mem>
 8004098:	4604      	mov	r4, r0
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff ff8e 	bl	8003fbc <mem_to_ptr>
 80040a0:	4603      	mov	r3, r0
 80040a2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	885b      	ldrh	r3, [r3, #2]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff ff75 	bl	8003f98 <ptr_to_mem>
 80040ae:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d01f      	beq.n	80040f8 <plug_holes+0x118>
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	791b      	ldrb	r3, [r3, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d11b      	bne.n	80040f8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80040c0:	4b17      	ldr	r3, [pc, #92]	@ (8004120 <plug_holes+0x140>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d102      	bne.n	80040d0 <plug_holes+0xf0>
      lfree = pmem;
 80040ca:	4a15      	ldr	r2, [pc, #84]	@ (8004120 <plug_holes+0x140>)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	881a      	ldrh	r2, [r3, #0]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80040e0:	d00a      	beq.n	80040f8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff ff56 	bl	8003f98 <ptr_to_mem>
 80040ec:	4604      	mov	r4, r0
 80040ee:	68b8      	ldr	r0, [r7, #8]
 80040f0:	f7ff ff64 	bl	8003fbc <mem_to_ptr>
 80040f4:	4603      	mov	r3, r0
 80040f6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80040f8:	bf00      	nop
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd90      	pop	{r4, r7, pc}
 8004100:	2000538c 	.word	0x2000538c
 8004104:	0800ef88 	.word	0x0800ef88
 8004108:	0800efb8 	.word	0x0800efb8
 800410c:	0800efd0 	.word	0x0800efd0
 8004110:	20005390 	.word	0x20005390
 8004114:	0800eff8 	.word	0x0800eff8
 8004118:	0800f014 	.word	0x0800f014
 800411c:	0800f030 	.word	0x0800f030
 8004120:	20005394 	.word	0x20005394

08004124 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800412a:	4b18      	ldr	r3, [pc, #96]	@ (800418c <mem_init+0x68>)
 800412c:	3303      	adds	r3, #3
 800412e:	f023 0303 	bic.w	r3, r3, #3
 8004132:	461a      	mov	r2, r3
 8004134:	4b16      	ldr	r3, [pc, #88]	@ (8004190 <mem_init+0x6c>)
 8004136:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004138:	4b15      	ldr	r3, [pc, #84]	@ (8004190 <mem_init+0x6c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004144:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004152:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8004156:	f7ff ff1f 	bl	8003f98 <ptr_to_mem>
 800415a:	4603      	mov	r3, r0
 800415c:	4a0d      	ldr	r2, [pc, #52]	@ (8004194 <mem_init+0x70>)
 800415e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004160:	4b0c      	ldr	r3, [pc, #48]	@ (8004194 <mem_init+0x70>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2201      	movs	r2, #1
 8004166:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004168:	4b0a      	ldr	r3, [pc, #40]	@ (8004194 <mem_init+0x70>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004170:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004172:	4b08      	ldr	r3, [pc, #32]	@ (8004194 <mem_init+0x70>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800417a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800417c:	4b04      	ldr	r3, [pc, #16]	@ (8004190 <mem_init+0x6c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a05      	ldr	r2, [pc, #20]	@ (8004198 <mem_init+0x74>)
 8004182:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004184:	bf00      	nop
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	20004d38 	.word	0x20004d38
 8004190:	2000538c 	.word	0x2000538c
 8004194:	20005390 	.word	0x20005390
 8004198:	20005394 	.word	0x20005394

0800419c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff ff09 	bl	8003fbc <mem_to_ptr>
 80041aa:	4603      	mov	r3, r0
 80041ac:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff fef0 	bl	8003f98 <ptr_to_mem>
 80041b8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	885b      	ldrh	r3, [r3, #2]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff feea 	bl	8003f98 <ptr_to_mem>
 80041c4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80041ce:	d818      	bhi.n	8004202 <mem_link_valid+0x66>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	885b      	ldrh	r3, [r3, #2]
 80041d4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80041d8:	d813      	bhi.n	8004202 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80041de:	8afa      	ldrh	r2, [r7, #22]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d004      	beq.n	80041ee <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	8afa      	ldrh	r2, [r7, #22]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d109      	bne.n	8004202 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80041ee:	4b08      	ldr	r3, [pc, #32]	@ (8004210 <mem_link_valid+0x74>)
 80041f0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d006      	beq.n	8004206 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	885b      	ldrh	r3, [r3, #2]
 80041fc:	8afa      	ldrh	r2, [r7, #22]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d001      	beq.n	8004206 <mem_link_valid+0x6a>
    return 0;
 8004202:	2300      	movs	r3, #0
 8004204:	e000      	b.n	8004208 <mem_link_valid+0x6c>
  }
  return 1;
 8004206:	2301      	movs	r3, #1
}
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20005390 	.word	0x20005390

08004214 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d04c      	beq.n	80042bc <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f003 0303 	and.w	r3, r3, #3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d007      	beq.n	800423c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800422c:	4b25      	ldr	r3, [pc, #148]	@ (80042c4 <mem_free+0xb0>)
 800422e:	f240 2273 	movw	r2, #627	@ 0x273
 8004232:	4925      	ldr	r1, [pc, #148]	@ (80042c8 <mem_free+0xb4>)
 8004234:	4825      	ldr	r0, [pc, #148]	@ (80042cc <mem_free+0xb8>)
 8004236:	f009 ff67 	bl	800e108 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800423a:	e040      	b.n	80042be <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3b08      	subs	r3, #8
 8004240:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004242:	4b23      	ldr	r3, [pc, #140]	@ (80042d0 <mem_free+0xbc>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	429a      	cmp	r2, r3
 800424a:	d306      	bcc.n	800425a <mem_free+0x46>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f103 020c 	add.w	r2, r3, #12
 8004252:	4b20      	ldr	r3, [pc, #128]	@ (80042d4 <mem_free+0xc0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d907      	bls.n	800426a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800425a:	4b1a      	ldr	r3, [pc, #104]	@ (80042c4 <mem_free+0xb0>)
 800425c:	f240 227f 	movw	r2, #639	@ 0x27f
 8004260:	491d      	ldr	r1, [pc, #116]	@ (80042d8 <mem_free+0xc4>)
 8004262:	481a      	ldr	r0, [pc, #104]	@ (80042cc <mem_free+0xb8>)
 8004264:	f009 ff50 	bl	800e108 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004268:	e029      	b.n	80042be <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	791b      	ldrb	r3, [r3, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d107      	bne.n	8004282 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004272:	4b14      	ldr	r3, [pc, #80]	@ (80042c4 <mem_free+0xb0>)
 8004274:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8004278:	4918      	ldr	r1, [pc, #96]	@ (80042dc <mem_free+0xc8>)
 800427a:	4814      	ldr	r0, [pc, #80]	@ (80042cc <mem_free+0xb8>)
 800427c:	f009 ff44 	bl	800e108 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004280:	e01d      	b.n	80042be <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f7ff ff8a 	bl	800419c <mem_link_valid>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d107      	bne.n	800429e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800428e:	4b0d      	ldr	r3, [pc, #52]	@ (80042c4 <mem_free+0xb0>)
 8004290:	f240 2295 	movw	r2, #661	@ 0x295
 8004294:	4912      	ldr	r1, [pc, #72]	@ (80042e0 <mem_free+0xcc>)
 8004296:	480d      	ldr	r0, [pc, #52]	@ (80042cc <mem_free+0xb8>)
 8004298:	f009 ff36 	bl	800e108 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800429c:	e00f      	b.n	80042be <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80042a4:	4b0f      	ldr	r3, [pc, #60]	@ (80042e4 <mem_free+0xd0>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d202      	bcs.n	80042b4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80042ae:	4a0d      	ldr	r2, [pc, #52]	@ (80042e4 <mem_free+0xd0>)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f7ff fe93 	bl	8003fe0 <plug_holes>
 80042ba:	e000      	b.n	80042be <mem_free+0xaa>
    return;
 80042bc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	0800ef88 	.word	0x0800ef88
 80042c8:	0800f05c 	.word	0x0800f05c
 80042cc:	0800efd0 	.word	0x0800efd0
 80042d0:	2000538c 	.word	0x2000538c
 80042d4:	20005390 	.word	0x20005390
 80042d8:	0800f080 	.word	0x0800f080
 80042dc:	0800f09c 	.word	0x0800f09c
 80042e0:	0800f0c4 	.word	0x0800f0c4
 80042e4:	20005394 	.word	0x20005394

080042e8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	460b      	mov	r3, r1
 80042f2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80042f4:	887b      	ldrh	r3, [r7, #2]
 80042f6:	3303      	adds	r3, #3
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	f023 0303 	bic.w	r3, r3, #3
 80042fe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004300:	8bfb      	ldrh	r3, [r7, #30]
 8004302:	2b0b      	cmp	r3, #11
 8004304:	d801      	bhi.n	800430a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004306:	230c      	movs	r3, #12
 8004308:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800430a:	8bfb      	ldrh	r3, [r7, #30]
 800430c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004310:	d803      	bhi.n	800431a <mem_trim+0x32>
 8004312:	8bfa      	ldrh	r2, [r7, #30]
 8004314:	887b      	ldrh	r3, [r7, #2]
 8004316:	429a      	cmp	r2, r3
 8004318:	d201      	bcs.n	800431e <mem_trim+0x36>
    return NULL;
 800431a:	2300      	movs	r3, #0
 800431c:	e0cc      	b.n	80044b8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800431e:	4b68      	ldr	r3, [pc, #416]	@ (80044c0 <mem_trim+0x1d8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	429a      	cmp	r2, r3
 8004326:	d304      	bcc.n	8004332 <mem_trim+0x4a>
 8004328:	4b66      	ldr	r3, [pc, #408]	@ (80044c4 <mem_trim+0x1dc>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	429a      	cmp	r2, r3
 8004330:	d306      	bcc.n	8004340 <mem_trim+0x58>
 8004332:	4b65      	ldr	r3, [pc, #404]	@ (80044c8 <mem_trim+0x1e0>)
 8004334:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8004338:	4964      	ldr	r1, [pc, #400]	@ (80044cc <mem_trim+0x1e4>)
 800433a:	4865      	ldr	r0, [pc, #404]	@ (80044d0 <mem_trim+0x1e8>)
 800433c:	f009 fee4 	bl	800e108 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004340:	4b5f      	ldr	r3, [pc, #380]	@ (80044c0 <mem_trim+0x1d8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	429a      	cmp	r2, r3
 8004348:	d304      	bcc.n	8004354 <mem_trim+0x6c>
 800434a:	4b5e      	ldr	r3, [pc, #376]	@ (80044c4 <mem_trim+0x1dc>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	429a      	cmp	r2, r3
 8004352:	d301      	bcc.n	8004358 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	e0af      	b.n	80044b8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3b08      	subs	r3, #8
 800435c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800435e:	69b8      	ldr	r0, [r7, #24]
 8004360:	f7ff fe2c 	bl	8003fbc <mem_to_ptr>
 8004364:	4603      	mov	r3, r0
 8004366:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	881a      	ldrh	r2, [r3, #0]
 800436c:	8afb      	ldrh	r3, [r7, #22]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b08      	subs	r3, #8
 8004374:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004376:	8bfa      	ldrh	r2, [r7, #30]
 8004378:	8abb      	ldrh	r3, [r7, #20]
 800437a:	429a      	cmp	r2, r3
 800437c:	d906      	bls.n	800438c <mem_trim+0xa4>
 800437e:	4b52      	ldr	r3, [pc, #328]	@ (80044c8 <mem_trim+0x1e0>)
 8004380:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8004384:	4953      	ldr	r1, [pc, #332]	@ (80044d4 <mem_trim+0x1ec>)
 8004386:	4852      	ldr	r0, [pc, #328]	@ (80044d0 <mem_trim+0x1e8>)
 8004388:	f009 febe 	bl	800e108 <iprintf>
  if (newsize > size) {
 800438c:	8bfa      	ldrh	r2, [r7, #30]
 800438e:	8abb      	ldrh	r3, [r7, #20]
 8004390:	429a      	cmp	r2, r3
 8004392:	d901      	bls.n	8004398 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004394:	2300      	movs	r3, #0
 8004396:	e08f      	b.n	80044b8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004398:	8bfa      	ldrh	r2, [r7, #30]
 800439a:	8abb      	ldrh	r3, [r7, #20]
 800439c:	429a      	cmp	r2, r3
 800439e:	d101      	bne.n	80043a4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	e089      	b.n	80044b8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff fdf5 	bl	8003f98 <ptr_to_mem>
 80043ae:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	791b      	ldrb	r3, [r3, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d13f      	bne.n	8004438 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80043c0:	d106      	bne.n	80043d0 <mem_trim+0xe8>
 80043c2:	4b41      	ldr	r3, [pc, #260]	@ (80044c8 <mem_trim+0x1e0>)
 80043c4:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80043c8:	4943      	ldr	r1, [pc, #268]	@ (80044d8 <mem_trim+0x1f0>)
 80043ca:	4841      	ldr	r0, [pc, #260]	@ (80044d0 <mem_trim+0x1e8>)
 80043cc:	f009 fe9c 	bl	800e108 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80043d6:	8afa      	ldrh	r2, [r7, #22]
 80043d8:	8bfb      	ldrh	r3, [r7, #30]
 80043da:	4413      	add	r3, r2
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3308      	adds	r3, #8
 80043e0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80043e2:	4b3e      	ldr	r3, [pc, #248]	@ (80044dc <mem_trim+0x1f4>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d106      	bne.n	80043fa <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80043ec:	89fb      	ldrh	r3, [r7, #14]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fdd2 	bl	8003f98 <ptr_to_mem>
 80043f4:	4603      	mov	r3, r0
 80043f6:	4a39      	ldr	r2, [pc, #228]	@ (80044dc <mem_trim+0x1f4>)
 80043f8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80043fa:	89fb      	ldrh	r3, [r7, #14]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff fdcb 	bl	8003f98 <ptr_to_mem>
 8004402:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2200      	movs	r2, #0
 8004408:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	89ba      	ldrh	r2, [r7, #12]
 800440e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	8afa      	ldrh	r2, [r7, #22]
 8004414:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	89fa      	ldrh	r2, [r7, #14]
 800441a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004424:	d047      	beq.n	80044b6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff fdb4 	bl	8003f98 <ptr_to_mem>
 8004430:	4602      	mov	r2, r0
 8004432:	89fb      	ldrh	r3, [r7, #14]
 8004434:	8053      	strh	r3, [r2, #2]
 8004436:	e03e      	b.n	80044b6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004438:	8bfb      	ldrh	r3, [r7, #30]
 800443a:	f103 0214 	add.w	r2, r3, #20
 800443e:	8abb      	ldrh	r3, [r7, #20]
 8004440:	429a      	cmp	r2, r3
 8004442:	d838      	bhi.n	80044b6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004444:	8afa      	ldrh	r2, [r7, #22]
 8004446:	8bfb      	ldrh	r3, [r7, #30]
 8004448:	4413      	add	r3, r2
 800444a:	b29b      	uxth	r3, r3
 800444c:	3308      	adds	r3, #8
 800444e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004458:	d106      	bne.n	8004468 <mem_trim+0x180>
 800445a:	4b1b      	ldr	r3, [pc, #108]	@ (80044c8 <mem_trim+0x1e0>)
 800445c:	f240 3216 	movw	r2, #790	@ 0x316
 8004460:	491d      	ldr	r1, [pc, #116]	@ (80044d8 <mem_trim+0x1f0>)
 8004462:	481b      	ldr	r0, [pc, #108]	@ (80044d0 <mem_trim+0x1e8>)
 8004464:	f009 fe50 	bl	800e108 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004468:	89fb      	ldrh	r3, [r7, #14]
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff fd94 	bl	8003f98 <ptr_to_mem>
 8004470:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004472:	4b1a      	ldr	r3, [pc, #104]	@ (80044dc <mem_trim+0x1f4>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	429a      	cmp	r2, r3
 800447a:	d202      	bcs.n	8004482 <mem_trim+0x19a>
      lfree = mem2;
 800447c:	4a17      	ldr	r2, [pc, #92]	@ (80044dc <mem_trim+0x1f4>)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	2200      	movs	r2, #0
 8004486:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	881a      	ldrh	r2, [r3, #0]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	8afa      	ldrh	r2, [r7, #22]
 8004494:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	89fa      	ldrh	r2, [r7, #14]
 800449a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80044a4:	d007      	beq.n	80044b6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff fd74 	bl	8003f98 <ptr_to_mem>
 80044b0:	4602      	mov	r2, r0
 80044b2:	89fb      	ldrh	r3, [r7, #14]
 80044b4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80044b6:	687b      	ldr	r3, [r7, #4]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3720      	adds	r7, #32
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	2000538c 	.word	0x2000538c
 80044c4:	20005390 	.word	0x20005390
 80044c8:	0800ef88 	.word	0x0800ef88
 80044cc:	0800f0f8 	.word	0x0800f0f8
 80044d0:	0800efd0 	.word	0x0800efd0
 80044d4:	0800f110 	.word	0x0800f110
 80044d8:	0800f130 	.word	0x0800f130
 80044dc:	20005394 	.word	0x20005394

080044e0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80044ea:	88fb      	ldrh	r3, [r7, #6]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <mem_malloc+0x14>
    return NULL;
 80044f0:	2300      	movs	r3, #0
 80044f2:	e0d9      	b.n	80046a8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80044f4:	88fb      	ldrh	r3, [r7, #6]
 80044f6:	3303      	adds	r3, #3
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f023 0303 	bic.w	r3, r3, #3
 80044fe:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004500:	8bbb      	ldrh	r3, [r7, #28]
 8004502:	2b0b      	cmp	r3, #11
 8004504:	d801      	bhi.n	800450a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004506:	230c      	movs	r3, #12
 8004508:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800450a:	8bbb      	ldrh	r3, [r7, #28]
 800450c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004510:	d803      	bhi.n	800451a <mem_malloc+0x3a>
 8004512:	8bba      	ldrh	r2, [r7, #28]
 8004514:	88fb      	ldrh	r3, [r7, #6]
 8004516:	429a      	cmp	r2, r3
 8004518:	d201      	bcs.n	800451e <mem_malloc+0x3e>
    return NULL;
 800451a:	2300      	movs	r3, #0
 800451c:	e0c4      	b.n	80046a8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800451e:	4b64      	ldr	r3, [pc, #400]	@ (80046b0 <mem_malloc+0x1d0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff fd4a 	bl	8003fbc <mem_to_ptr>
 8004528:	4603      	mov	r3, r0
 800452a:	83fb      	strh	r3, [r7, #30]
 800452c:	e0b4      	b.n	8004698 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800452e:	8bfb      	ldrh	r3, [r7, #30]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff fd31 	bl	8003f98 <ptr_to_mem>
 8004536:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	791b      	ldrb	r3, [r3, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f040 80a4 	bne.w	800468a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	8bfb      	ldrh	r3, [r7, #30]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	f1a3 0208 	sub.w	r2, r3, #8
 8004550:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004552:	429a      	cmp	r2, r3
 8004554:	f0c0 8099 	bcc.w	800468a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	461a      	mov	r2, r3
 800455e:	8bfb      	ldrh	r3, [r7, #30]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	f1a3 0208 	sub.w	r2, r3, #8
 8004566:	8bbb      	ldrh	r3, [r7, #28]
 8004568:	3314      	adds	r3, #20
 800456a:	429a      	cmp	r2, r3
 800456c:	d333      	bcc.n	80045d6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800456e:	8bfa      	ldrh	r2, [r7, #30]
 8004570:	8bbb      	ldrh	r3, [r7, #28]
 8004572:	4413      	add	r3, r2
 8004574:	b29b      	uxth	r3, r3
 8004576:	3308      	adds	r3, #8
 8004578:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800457a:	8a7b      	ldrh	r3, [r7, #18]
 800457c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004580:	d106      	bne.n	8004590 <mem_malloc+0xb0>
 8004582:	4b4c      	ldr	r3, [pc, #304]	@ (80046b4 <mem_malloc+0x1d4>)
 8004584:	f240 3287 	movw	r2, #903	@ 0x387
 8004588:	494b      	ldr	r1, [pc, #300]	@ (80046b8 <mem_malloc+0x1d8>)
 800458a:	484c      	ldr	r0, [pc, #304]	@ (80046bc <mem_malloc+0x1dc>)
 800458c:	f009 fdbc 	bl	800e108 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004590:	8a7b      	ldrh	r3, [r7, #18]
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff fd00 	bl	8003f98 <ptr_to_mem>
 8004598:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	881a      	ldrh	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8bfa      	ldrh	r2, [r7, #30]
 80045ac:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	8a7a      	ldrh	r2, [r7, #18]
 80045b2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2201      	movs	r2, #1
 80045b8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80045c2:	d00b      	beq.n	80045dc <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff fce5 	bl	8003f98 <ptr_to_mem>
 80045ce:	4602      	mov	r2, r0
 80045d0:	8a7b      	ldrh	r3, [r7, #18]
 80045d2:	8053      	strh	r3, [r2, #2]
 80045d4:	e002      	b.n	80045dc <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2201      	movs	r2, #1
 80045da:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80045dc:	4b34      	ldr	r3, [pc, #208]	@ (80046b0 <mem_malloc+0x1d0>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d127      	bne.n	8004636 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80045e6:	4b32      	ldr	r3, [pc, #200]	@ (80046b0 <mem_malloc+0x1d0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80045ec:	e005      	b.n	80045fa <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fcd0 	bl	8003f98 <ptr_to_mem>
 80045f8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	791b      	ldrb	r3, [r3, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d004      	beq.n	800460c <mem_malloc+0x12c>
 8004602:	4b2f      	ldr	r3, [pc, #188]	@ (80046c0 <mem_malloc+0x1e0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	429a      	cmp	r2, r3
 800460a:	d1f0      	bne.n	80045ee <mem_malloc+0x10e>
          }
          lfree = cur;
 800460c:	4a28      	ldr	r2, [pc, #160]	@ (80046b0 <mem_malloc+0x1d0>)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004612:	4b27      	ldr	r3, [pc, #156]	@ (80046b0 <mem_malloc+0x1d0>)
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	4b2a      	ldr	r3, [pc, #168]	@ (80046c0 <mem_malloc+0x1e0>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d00b      	beq.n	8004636 <mem_malloc+0x156>
 800461e:	4b24      	ldr	r3, [pc, #144]	@ (80046b0 <mem_malloc+0x1d0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	791b      	ldrb	r3, [r3, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d006      	beq.n	8004636 <mem_malloc+0x156>
 8004628:	4b22      	ldr	r3, [pc, #136]	@ (80046b4 <mem_malloc+0x1d4>)
 800462a:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800462e:	4925      	ldr	r1, [pc, #148]	@ (80046c4 <mem_malloc+0x1e4>)
 8004630:	4822      	ldr	r0, [pc, #136]	@ (80046bc <mem_malloc+0x1dc>)
 8004632:	f009 fd69 	bl	800e108 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004636:	8bba      	ldrh	r2, [r7, #28]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	4413      	add	r3, r2
 800463c:	3308      	adds	r3, #8
 800463e:	4a20      	ldr	r2, [pc, #128]	@ (80046c0 <mem_malloc+0x1e0>)
 8004640:	6812      	ldr	r2, [r2, #0]
 8004642:	4293      	cmp	r3, r2
 8004644:	d906      	bls.n	8004654 <mem_malloc+0x174>
 8004646:	4b1b      	ldr	r3, [pc, #108]	@ (80046b4 <mem_malloc+0x1d4>)
 8004648:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800464c:	491e      	ldr	r1, [pc, #120]	@ (80046c8 <mem_malloc+0x1e8>)
 800464e:	481b      	ldr	r0, [pc, #108]	@ (80046bc <mem_malloc+0x1dc>)
 8004650:	f009 fd5a 	bl	800e108 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d006      	beq.n	800466c <mem_malloc+0x18c>
 800465e:	4b15      	ldr	r3, [pc, #84]	@ (80046b4 <mem_malloc+0x1d4>)
 8004660:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8004664:	4919      	ldr	r1, [pc, #100]	@ (80046cc <mem_malloc+0x1ec>)
 8004666:	4815      	ldr	r0, [pc, #84]	@ (80046bc <mem_malloc+0x1dc>)
 8004668:	f009 fd4e 	bl	800e108 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d006      	beq.n	8004684 <mem_malloc+0x1a4>
 8004676:	4b0f      	ldr	r3, [pc, #60]	@ (80046b4 <mem_malloc+0x1d4>)
 8004678:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800467c:	4914      	ldr	r1, [pc, #80]	@ (80046d0 <mem_malloc+0x1f0>)
 800467e:	480f      	ldr	r0, [pc, #60]	@ (80046bc <mem_malloc+0x1dc>)
 8004680:	f009 fd42 	bl	800e108 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	3308      	adds	r3, #8
 8004688:	e00e      	b.n	80046a8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800468a:	8bfb      	ldrh	r3, [r7, #30]
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff fc83 	bl	8003f98 <ptr_to_mem>
 8004692:	4603      	mov	r3, r0
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004698:	8bfa      	ldrh	r2, [r7, #30]
 800469a:	8bbb      	ldrh	r3, [r7, #28]
 800469c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 80046a0:	429a      	cmp	r2, r3
 80046a2:	f4ff af44 	bcc.w	800452e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3720      	adds	r7, #32
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20005394 	.word	0x20005394
 80046b4:	0800ef88 	.word	0x0800ef88
 80046b8:	0800f130 	.word	0x0800f130
 80046bc:	0800efd0 	.word	0x0800efd0
 80046c0:	20005390 	.word	0x20005390
 80046c4:	0800f144 	.word	0x0800f144
 80046c8:	0800f160 	.word	0x0800f160
 80046cc:	0800f190 	.word	0x0800f190
 80046d0:	0800f1c0 	.word	0x0800f1c0

080046d4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	3303      	adds	r3, #3
 80046ea:	f023 0303 	bic.w	r3, r3, #3
 80046ee:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	e011      	b.n	800471a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	4413      	add	r3, r2
 8004712:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3301      	adds	r3, #1
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	885b      	ldrh	r3, [r3, #2]
 800471e:	461a      	mov	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4293      	cmp	r3, r2
 8004724:	dbe7      	blt.n	80046f6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004726:	bf00      	nop
 8004728:	bf00      	nop
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800473a:	2300      	movs	r3, #0
 800473c:	80fb      	strh	r3, [r7, #6]
 800473e:	e009      	b.n	8004754 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004740:	88fb      	ldrh	r3, [r7, #6]
 8004742:	4a08      	ldr	r2, [pc, #32]	@ (8004764 <memp_init+0x30>)
 8004744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff ffc3 	bl	80046d4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800474e:	88fb      	ldrh	r3, [r7, #6]
 8004750:	3301      	adds	r3, #1
 8004752:	80fb      	strh	r3, [r7, #6]
 8004754:	88fb      	ldrh	r3, [r7, #6]
 8004756:	2b08      	cmp	r3, #8
 8004758:	d9f2      	bls.n	8004740 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800475a:	bf00      	nop
 800475c:	bf00      	nop
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	0801199c 	.word	0x0801199c

08004768 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d012      	beq.n	80047a4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	6812      	ldr	r2, [r2, #0]
 8004786:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d006      	beq.n	80047a0 <do_memp_malloc_pool+0x38>
 8004792:	4b07      	ldr	r3, [pc, #28]	@ (80047b0 <do_memp_malloc_pool+0x48>)
 8004794:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8004798:	4906      	ldr	r1, [pc, #24]	@ (80047b4 <do_memp_malloc_pool+0x4c>)
 800479a:	4807      	ldr	r0, [pc, #28]	@ (80047b8 <do_memp_malloc_pool+0x50>)
 800479c:	f009 fcb4 	bl	800e108 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	e000      	b.n	80047a6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	0800f1e4 	.word	0x0800f1e4
 80047b4:	0800f214 	.word	0x0800f214
 80047b8:	0800f238 	.word	0x0800f238

080047bc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <memp_malloc_pool+0x1c>
 80047ca:	4b0a      	ldr	r3, [pc, #40]	@ (80047f4 <memp_malloc_pool+0x38>)
 80047cc:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80047d0:	4909      	ldr	r1, [pc, #36]	@ (80047f8 <memp_malloc_pool+0x3c>)
 80047d2:	480a      	ldr	r0, [pc, #40]	@ (80047fc <memp_malloc_pool+0x40>)
 80047d4:	f009 fc98 	bl	800e108 <iprintf>
  if (desc == NULL) {
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <memp_malloc_pool+0x26>
    return NULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	e003      	b.n	80047ea <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff ffc0 	bl	8004768 <do_memp_malloc_pool>
 80047e8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	0800f1e4 	.word	0x0800f1e4
 80047f8:	0800f260 	.word	0x0800f260
 80047fc:	0800f238 	.word	0x0800f238

08004800 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	4603      	mov	r3, r0
 8004808:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d908      	bls.n	8004822 <memp_malloc+0x22>
 8004810:	4b0a      	ldr	r3, [pc, #40]	@ (800483c <memp_malloc+0x3c>)
 8004812:	f240 1257 	movw	r2, #343	@ 0x157
 8004816:	490a      	ldr	r1, [pc, #40]	@ (8004840 <memp_malloc+0x40>)
 8004818:	480a      	ldr	r0, [pc, #40]	@ (8004844 <memp_malloc+0x44>)
 800481a:	f009 fc75 	bl	800e108 <iprintf>
 800481e:	2300      	movs	r3, #0
 8004820:	e008      	b.n	8004834 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004822:	79fb      	ldrb	r3, [r7, #7]
 8004824:	4a08      	ldr	r2, [pc, #32]	@ (8004848 <memp_malloc+0x48>)
 8004826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff ff9c 	bl	8004768 <do_memp_malloc_pool>
 8004830:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004832:	68fb      	ldr	r3, [r7, #12]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	0800f1e4 	.word	0x0800f1e4
 8004840:	0800f274 	.word	0x0800f274
 8004844:	0800f238 	.word	0x0800f238
 8004848:	0801199c 	.word	0x0801199c

0800484c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	f003 0303 	and.w	r3, r3, #3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d006      	beq.n	800486e <do_memp_free_pool+0x22>
 8004860:	4b0a      	ldr	r3, [pc, #40]	@ (800488c <do_memp_free_pool+0x40>)
 8004862:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8004866:	490a      	ldr	r1, [pc, #40]	@ (8004890 <do_memp_free_pool+0x44>)
 8004868:	480a      	ldr	r0, [pc, #40]	@ (8004894 <do_memp_free_pool+0x48>)
 800486a:	f009 fc4d 	bl	800e108 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004884:	bf00      	nop
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	0800f1e4 	.word	0x0800f1e4
 8004890:	0800f294 	.word	0x0800f294
 8004894:	0800f238 	.word	0x0800f238

08004898 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d106      	bne.n	80048b6 <memp_free_pool+0x1e>
 80048a8:	4b0a      	ldr	r3, [pc, #40]	@ (80048d4 <memp_free_pool+0x3c>)
 80048aa:	f240 1295 	movw	r2, #405	@ 0x195
 80048ae:	490a      	ldr	r1, [pc, #40]	@ (80048d8 <memp_free_pool+0x40>)
 80048b0:	480a      	ldr	r0, [pc, #40]	@ (80048dc <memp_free_pool+0x44>)
 80048b2:	f009 fc29 	bl	800e108 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d007      	beq.n	80048cc <memp_free_pool+0x34>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d004      	beq.n	80048cc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80048c2:	6839      	ldr	r1, [r7, #0]
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff ffc1 	bl	800484c <do_memp_free_pool>
 80048ca:	e000      	b.n	80048ce <memp_free_pool+0x36>
    return;
 80048cc:	bf00      	nop
}
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	0800f1e4 	.word	0x0800f1e4
 80048d8:	0800f260 	.word	0x0800f260
 80048dc:	0800f238 	.word	0x0800f238

080048e0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	6039      	str	r1, [r7, #0]
 80048ea:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80048ec:	79fb      	ldrb	r3, [r7, #7]
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d907      	bls.n	8004902 <memp_free+0x22>
 80048f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004924 <memp_free+0x44>)
 80048f4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80048f8:	490b      	ldr	r1, [pc, #44]	@ (8004928 <memp_free+0x48>)
 80048fa:	480c      	ldr	r0, [pc, #48]	@ (800492c <memp_free+0x4c>)
 80048fc:	f009 fc04 	bl	800e108 <iprintf>
 8004900:	e00c      	b.n	800491c <memp_free+0x3c>

  if (mem == NULL) {
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d008      	beq.n	800491a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004908:	79fb      	ldrb	r3, [r7, #7]
 800490a:	4a09      	ldr	r2, [pc, #36]	@ (8004930 <memp_free+0x50>)
 800490c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004910:	6839      	ldr	r1, [r7, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff ff9a 	bl	800484c <do_memp_free_pool>
 8004918:	e000      	b.n	800491c <memp_free+0x3c>
    return;
 800491a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	0800f1e4 	.word	0x0800f1e4
 8004928:	0800f2b4 	.word	0x0800f2b4
 800492c:	0800f238 	.word	0x0800f238
 8004930:	0801199c 	.word	0x0801199c

08004934 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004938:	bf00      	nop
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
	...

08004944 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d108      	bne.n	800496a <netif_add+0x26>
 8004958:	4b57      	ldr	r3, [pc, #348]	@ (8004ab8 <netif_add+0x174>)
 800495a:	f240 1227 	movw	r2, #295	@ 0x127
 800495e:	4957      	ldr	r1, [pc, #348]	@ (8004abc <netif_add+0x178>)
 8004960:	4857      	ldr	r0, [pc, #348]	@ (8004ac0 <netif_add+0x17c>)
 8004962:	f009 fbd1 	bl	800e108 <iprintf>
 8004966:	2300      	movs	r3, #0
 8004968:	e0a2      	b.n	8004ab0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496c:	2b00      	cmp	r3, #0
 800496e:	d108      	bne.n	8004982 <netif_add+0x3e>
 8004970:	4b51      	ldr	r3, [pc, #324]	@ (8004ab8 <netif_add+0x174>)
 8004972:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8004976:	4953      	ldr	r1, [pc, #332]	@ (8004ac4 <netif_add+0x180>)
 8004978:	4851      	ldr	r0, [pc, #324]	@ (8004ac0 <netif_add+0x17c>)
 800497a:	f009 fbc5 	bl	800e108 <iprintf>
 800497e:	2300      	movs	r3, #0
 8004980:	e096      	b.n	8004ab0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004988:	4b4f      	ldr	r3, [pc, #316]	@ (8004ac8 <netif_add+0x184>)
 800498a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004992:	4b4d      	ldr	r3, [pc, #308]	@ (8004ac8 <netif_add+0x184>)
 8004994:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800499c:	4b4a      	ldr	r3, [pc, #296]	@ (8004ac8 <netif_add+0x184>)
 800499e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4a45      	ldr	r2, [pc, #276]	@ (8004acc <netif_add+0x188>)
 80049b6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a3a      	ldr	r2, [r7, #32]
 80049d0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80049d2:	4b3f      	ldr	r3, [pc, #252]	@ (8004ad0 <netif_add+0x18c>)
 80049d4:	781a      	ldrb	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049e0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	68b9      	ldr	r1, [r7, #8]
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 f913 	bl	8004c14 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80049ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	4798      	blx	r3
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <netif_add+0xba>
    return NULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e058      	b.n	8004ab0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a04:	2bff      	cmp	r3, #255	@ 0xff
 8004a06:	d103      	bne.n	8004a10 <netif_add+0xcc>
        netif->num = 0;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8004a10:	2300      	movs	r3, #0
 8004a12:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004a14:	4b2f      	ldr	r3, [pc, #188]	@ (8004ad4 <netif_add+0x190>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	e02b      	b.n	8004a74 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d106      	bne.n	8004a32 <netif_add+0xee>
 8004a24:	4b24      	ldr	r3, [pc, #144]	@ (8004ab8 <netif_add+0x174>)
 8004a26:	f240 128b 	movw	r2, #395	@ 0x18b
 8004a2a:	492b      	ldr	r1, [pc, #172]	@ (8004ad8 <netif_add+0x194>)
 8004a2c:	4824      	ldr	r0, [pc, #144]	@ (8004ac0 <netif_add+0x17c>)
 8004a2e:	f009 fb6b 	bl	800e108 <iprintf>
        num_netifs++;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	3301      	adds	r3, #1
 8004a36:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	2bff      	cmp	r3, #255	@ 0xff
 8004a3c:	dd06      	ble.n	8004a4c <netif_add+0x108>
 8004a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ab8 <netif_add+0x174>)
 8004a40:	f240 128d 	movw	r2, #397	@ 0x18d
 8004a44:	4925      	ldr	r1, [pc, #148]	@ (8004adc <netif_add+0x198>)
 8004a46:	481e      	ldr	r0, [pc, #120]	@ (8004ac0 <netif_add+0x17c>)
 8004a48:	f009 fb5e 	bl	800e108 <iprintf>
        if (netif2->num == netif->num) {
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d108      	bne.n	8004a6e <netif_add+0x12a>
          netif->num++;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a62:	3301      	adds	r3, #1
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8004a6c:	e005      	b.n	8004a7a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1d0      	bne.n	8004a1c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1be      	bne.n	80049fe <netif_add+0xba>
  }
  if (netif->num == 254) {
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a86:	2bfe      	cmp	r3, #254	@ 0xfe
 8004a88:	d103      	bne.n	8004a92 <netif_add+0x14e>
    netif_num = 0;
 8004a8a:	4b11      	ldr	r3, [pc, #68]	@ (8004ad0 <netif_add+0x18c>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	701a      	strb	r2, [r3, #0]
 8004a90:	e006      	b.n	8004aa0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a98:	3301      	adds	r3, #1
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad0 <netif_add+0x18c>)
 8004a9e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad4 <netif_add+0x190>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8004ad4 <netif_add+0x190>)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004aae:	68fb      	ldr	r3, [r7, #12]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	0800f2d0 	.word	0x0800f2d0
 8004abc:	0800f364 	.word	0x0800f364
 8004ac0:	0800f320 	.word	0x0800f320
 8004ac4:	0800f380 	.word	0x0800f380
 8004ac8:	08011a00 	.word	0x08011a00
 8004acc:	08004eef 	.word	0x08004eef
 8004ad0:	2000828c 	.word	0x2000828c
 8004ad4:	20008284 	.word	0x20008284
 8004ad8:	0800f3a4 	.word	0x0800f3a4
 8004adc:	0800f3b8 	.word	0x0800f3b8

08004ae0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004aea:	6839      	ldr	r1, [r7, #0]
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f002 fbc7 	bl	8007280 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004af2:	6839      	ldr	r1, [r7, #0]
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f006 ff11 	bl	800b91c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d106      	bne.n	8004b24 <netif_do_set_ipaddr+0x20>
 8004b16:	4b1d      	ldr	r3, [pc, #116]	@ (8004b8c <netif_do_set_ipaddr+0x88>)
 8004b18:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8004b1c:	491c      	ldr	r1, [pc, #112]	@ (8004b90 <netif_do_set_ipaddr+0x8c>)
 8004b1e:	481d      	ldr	r0, [pc, #116]	@ (8004b94 <netif_do_set_ipaddr+0x90>)
 8004b20:	f009 faf2 	bl	800e108 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d106      	bne.n	8004b38 <netif_do_set_ipaddr+0x34>
 8004b2a:	4b18      	ldr	r3, [pc, #96]	@ (8004b8c <netif_do_set_ipaddr+0x88>)
 8004b2c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8004b30:	4917      	ldr	r1, [pc, #92]	@ (8004b90 <netif_do_set_ipaddr+0x8c>)
 8004b32:	4818      	ldr	r0, [pc, #96]	@ (8004b94 <netif_do_set_ipaddr+0x90>)
 8004b34:	f009 fae8 	bl	800e108 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d01c      	beq.n	8004b80 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004b56:	f107 0314 	add.w	r3, r7, #20
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff ffbf 	bl	8004ae0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <netif_do_set_ipaddr+0x6a>
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	e000      	b.n	8004b70 <netif_do_set_ipaddr+0x6c>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004b74:	2101      	movs	r1, #1
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 f8d2 	bl	8004d20 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	0800f2d0 	.word	0x0800f2d0
 8004b90:	0800f3e8 	.word	0x0800f3e8
 8004b94:	0800f320 	.word	0x0800f320

08004b98 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3308      	adds	r3, #8
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d00a      	beq.n	8004bc8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <netif_do_set_netmask+0x26>
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	e000      	b.n	8004bc0 <netif_do_set_netmask+0x28>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	60b9      	str	r1, [r7, #8]
 8004be0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	330c      	adds	r3, #12
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d00a      	beq.n	8004c06 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <netif_do_set_gw+0x26>
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	e000      	b.n	8004bfe <netif_do_set_gw+0x28>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004c02:	2301      	movs	r3, #1
 8004c04:	e000      	b.n	8004c08 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b088      	sub	sp, #32
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004c22:	2300      	movs	r3, #0
 8004c24:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004c30:	4b1c      	ldr	r3, [pc, #112]	@ (8004ca4 <netif_set_addr+0x90>)
 8004c32:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ca4 <netif_set_addr+0x90>)
 8004c3c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004c44:	4b17      	ldr	r3, [pc, #92]	@ (8004ca4 <netif_set_addr+0x90>)
 8004c46:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <netif_set_addr+0x42>
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <netif_set_addr+0x46>
 8004c56:	2301      	movs	r3, #1
 8004c58:	e000      	b.n	8004c5c <netif_set_addr+0x48>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d006      	beq.n	8004c72 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004c64:	f107 0310 	add.w	r3, r7, #16
 8004c68:	461a      	mov	r2, r3
 8004c6a:	68b9      	ldr	r1, [r7, #8]
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f7ff ff49 	bl	8004b04 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f7ff ff8e 	bl	8004b98 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	6839      	ldr	r1, [r7, #0]
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f7ff ffa8 	bl	8004bd6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004c8c:	f107 0310 	add.w	r3, r7, #16
 8004c90:	461a      	mov	r2, r3
 8004c92:	68b9      	ldr	r1, [r7, #8]
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f7ff ff35 	bl	8004b04 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004c9a:	bf00      	nop
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	08011a00 	.word	0x08011a00

08004ca8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004cb0:	4a04      	ldr	r2, [pc, #16]	@ (8004cc4 <netif_set_default+0x1c>)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	20008288 	.word	0x20008288

08004cc8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d107      	bne.n	8004ce6 <netif_set_up+0x1e>
 8004cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8004d14 <netif_set_up+0x4c>)
 8004cd8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8004cdc:	490e      	ldr	r1, [pc, #56]	@ (8004d18 <netif_set_up+0x50>)
 8004cde:	480f      	ldr	r0, [pc, #60]	@ (8004d1c <netif_set_up+0x54>)
 8004ce0:	f009 fa12 	bl	800e108 <iprintf>
 8004ce4:	e013      	b.n	8004d0e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10c      	bne.n	8004d0e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004d06:	2103      	movs	r1, #3
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f809 	bl	8004d20 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	0800f2d0 	.word	0x0800f2d0
 8004d18:	0800f458 	.word	0x0800f458
 8004d1c:	0800f320 	.word	0x0800f320

08004d20 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <netif_issue_reports+0x20>
 8004d32:	4b18      	ldr	r3, [pc, #96]	@ (8004d94 <netif_issue_reports+0x74>)
 8004d34:	f240 326d 	movw	r2, #877	@ 0x36d
 8004d38:	4917      	ldr	r1, [pc, #92]	@ (8004d98 <netif_issue_reports+0x78>)
 8004d3a:	4818      	ldr	r0, [pc, #96]	@ (8004d9c <netif_issue_reports+0x7c>)
 8004d3c:	f009 f9e4 	bl	800e108 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d01e      	beq.n	8004d8c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004d54:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d017      	beq.n	8004d8c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d013      	beq.n	8004d8e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00e      	beq.n	8004d8e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d007      	beq.n	8004d8e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3304      	adds	r3, #4
 8004d82:	4619      	mov	r1, r3
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f007 fd33 	bl	800c7f0 <etharp_request>
 8004d8a:	e000      	b.n	8004d8e <netif_issue_reports+0x6e>
    return;
 8004d8c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	0800f2d0 	.word	0x0800f2d0
 8004d98:	0800f474 	.word	0x0800f474
 8004d9c:	0800f320 	.word	0x0800f320

08004da0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d107      	bne.n	8004dbe <netif_set_down+0x1e>
 8004dae:	4b12      	ldr	r3, [pc, #72]	@ (8004df8 <netif_set_down+0x58>)
 8004db0:	f240 329b 	movw	r2, #923	@ 0x39b
 8004db4:	4911      	ldr	r1, [pc, #68]	@ (8004dfc <netif_set_down+0x5c>)
 8004db6:	4812      	ldr	r0, [pc, #72]	@ (8004e00 <netif_set_down+0x60>)
 8004db8:	f009 f9a6 	bl	800e108 <iprintf>
 8004dbc:	e019      	b.n	8004df2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d012      	beq.n	8004df2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004dd2:	f023 0301 	bic.w	r3, r3, #1
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f007 f8bd 	bl	800bf6c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	0800f2d0 	.word	0x0800f2d0
 8004dfc:	0800f498 	.word	0x0800f498
 8004e00:	0800f320 	.word	0x0800f320

08004e04 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d107      	bne.n	8004e22 <netif_set_link_up+0x1e>
 8004e12:	4b13      	ldr	r3, [pc, #76]	@ (8004e60 <netif_set_link_up+0x5c>)
 8004e14:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8004e18:	4912      	ldr	r1, [pc, #72]	@ (8004e64 <netif_set_link_up+0x60>)
 8004e1a:	4813      	ldr	r0, [pc, #76]	@ (8004e68 <netif_set_link_up+0x64>)
 8004e1c:	f009 f974 	bl	800e108 <iprintf>
 8004e20:	e01b      	b.n	8004e5a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d114      	bne.n	8004e5a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004e36:	f043 0304 	orr.w	r3, r3, #4
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004e42:	2103      	movs	r1, #3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7ff ff6b 	bl	8004d20 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <netif_set_link_up+0x56>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	0800f2d0 	.word	0x0800f2d0
 8004e64:	0800f4b8 	.word	0x0800f4b8
 8004e68:	0800f320 	.word	0x0800f320

08004e6c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d107      	bne.n	8004e8a <netif_set_link_down+0x1e>
 8004e7a:	4b11      	ldr	r3, [pc, #68]	@ (8004ec0 <netif_set_link_down+0x54>)
 8004e7c:	f240 4206 	movw	r2, #1030	@ 0x406
 8004e80:	4910      	ldr	r1, [pc, #64]	@ (8004ec4 <netif_set_link_down+0x58>)
 8004e82:	4811      	ldr	r0, [pc, #68]	@ (8004ec8 <netif_set_link_down+0x5c>)
 8004e84:	f009 f940 	bl	800e108 <iprintf>
 8004e88:	e017      	b.n	8004eba <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d010      	beq.n	8004eba <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004e9e:	f023 0304 	bic.w	r3, r3, #4
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <netif_set_link_down+0x4e>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	0800f2d0 	.word	0x0800f2d0
 8004ec4:	0800f4dc 	.word	0x0800f4dc
 8004ec8:	0800f320 	.word	0x0800f320

08004ecc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	61da      	str	r2, [r3, #28]
  }
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b085      	sub	sp, #20
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004efa:	f06f 030b 	mvn.w	r3, #11
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
	...

08004f0c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	4603      	mov	r3, r0
 8004f14:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004f16:	79fb      	ldrb	r3, [r7, #7]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d013      	beq.n	8004f44 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004f54 <netif_get_by_index+0x48>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	e00c      	b.n	8004f3e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	79fa      	ldrb	r2, [r7, #7]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d101      	bne.n	8004f38 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	e006      	b.n	8004f46 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1ef      	bne.n	8004f24 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	20008284 	.word	0x20008284

08004f58 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004f5c:	4b03      	ldr	r3, [pc, #12]	@ (8004f6c <pbuf_pool_is_empty+0x14>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004f62:	bf00      	nop
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	2000828d 	.word	0x2000828d

08004f70 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	460b      	mov	r3, r1
 8004f80:	80fb      	strh	r3, [r7, #6]
 8004f82:	4613      	mov	r3, r2
 8004f84:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	88fa      	ldrh	r2, [r7, #6]
 8004f96:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	88ba      	ldrh	r2, [r7, #4]
 8004f9c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004f9e:	8b3b      	ldrh	r3, [r7, #24]
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	7f3a      	ldrb	r2, [r7, #28]
 8004faa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	73da      	strb	r2, [r3, #15]
}
 8004fb8:	bf00      	nop
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08c      	sub	sp, #48	@ 0x30
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	4603      	mov	r3, r0
 8004fcc:	71fb      	strb	r3, [r7, #7]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	80bb      	strh	r3, [r7, #4]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004fd6:	79fb      	ldrb	r3, [r7, #7]
 8004fd8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004fda:	887b      	ldrh	r3, [r7, #2]
 8004fdc:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8004fe0:	d07f      	beq.n	80050e2 <pbuf_alloc+0x11e>
 8004fe2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8004fe6:	f300 80c8 	bgt.w	800517a <pbuf_alloc+0x1b6>
 8004fea:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8004fee:	d010      	beq.n	8005012 <pbuf_alloc+0x4e>
 8004ff0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8004ff4:	f300 80c1 	bgt.w	800517a <pbuf_alloc+0x1b6>
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d002      	beq.n	8005002 <pbuf_alloc+0x3e>
 8004ffc:	2b41      	cmp	r3, #65	@ 0x41
 8004ffe:	f040 80bc 	bne.w	800517a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005002:	887a      	ldrh	r2, [r7, #2]
 8005004:	88bb      	ldrh	r3, [r7, #4]
 8005006:	4619      	mov	r1, r3
 8005008:	2000      	movs	r0, #0
 800500a:	f000 f8d1 	bl	80051b0 <pbuf_alloc_reference>
 800500e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8005010:	e0bd      	b.n	800518e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005012:	2300      	movs	r3, #0
 8005014:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800501a:	88bb      	ldrh	r3, [r7, #4]
 800501c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800501e:	2008      	movs	r0, #8
 8005020:	f7ff fbee 	bl	8004800 <memp_malloc>
 8005024:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d109      	bne.n	8005040 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800502c:	f7ff ff94 	bl	8004f58 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <pbuf_alloc+0x78>
            pbuf_free(p);
 8005036:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005038:	f000 faa8 	bl	800558c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800503c:	2300      	movs	r3, #0
 800503e:	e0a7      	b.n	8005190 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005040:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005042:	3303      	adds	r3, #3
 8005044:	b29b      	uxth	r3, r3
 8005046:	f023 0303 	bic.w	r3, r3, #3
 800504a:	b29b      	uxth	r3, r3
 800504c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8005050:	b29b      	uxth	r3, r3
 8005052:	8b7a      	ldrh	r2, [r7, #26]
 8005054:	4293      	cmp	r3, r2
 8005056:	bf28      	it	cs
 8005058:	4613      	movcs	r3, r2
 800505a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800505c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800505e:	3310      	adds	r3, #16
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	4413      	add	r3, r2
 8005064:	3303      	adds	r3, #3
 8005066:	f023 0303 	bic.w	r3, r3, #3
 800506a:	4618      	mov	r0, r3
 800506c:	89f9      	ldrh	r1, [r7, #14]
 800506e:	8b7a      	ldrh	r2, [r7, #26]
 8005070:	2300      	movs	r3, #0
 8005072:	9301      	str	r3, [sp, #4]
 8005074:	887b      	ldrh	r3, [r7, #2]
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	460b      	mov	r3, r1
 800507a:	4601      	mov	r1, r0
 800507c:	6938      	ldr	r0, [r7, #16]
 800507e:	f7ff ff77 	bl	8004f70 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d006      	beq.n	800509c <pbuf_alloc+0xd8>
 800508e:	4b42      	ldr	r3, [pc, #264]	@ (8005198 <pbuf_alloc+0x1d4>)
 8005090:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005094:	4941      	ldr	r1, [pc, #260]	@ (800519c <pbuf_alloc+0x1d8>)
 8005096:	4842      	ldr	r0, [pc, #264]	@ (80051a0 <pbuf_alloc+0x1dc>)
 8005098:	f009 f836 	bl	800e108 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800509c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800509e:	3303      	adds	r3, #3
 80050a0:	f023 0303 	bic.w	r3, r3, #3
 80050a4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80050a8:	d106      	bne.n	80050b8 <pbuf_alloc+0xf4>
 80050aa:	4b3b      	ldr	r3, [pc, #236]	@ (8005198 <pbuf_alloc+0x1d4>)
 80050ac:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80050b0:	493c      	ldr	r1, [pc, #240]	@ (80051a4 <pbuf_alloc+0x1e0>)
 80050b2:	483b      	ldr	r0, [pc, #236]	@ (80051a0 <pbuf_alloc+0x1dc>)
 80050b4:	f009 f828 	bl	800e108 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80050b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d102      	bne.n	80050c4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050c2:	e002      	b.n	80050ca <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80050ce:	8b7a      	ldrh	r2, [r7, #26]
 80050d0:	89fb      	ldrh	r3, [r7, #14]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80050d6:	2300      	movs	r3, #0
 80050d8:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80050da:	8b7b      	ldrh	r3, [r7, #26]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d19e      	bne.n	800501e <pbuf_alloc+0x5a>
      break;
 80050e0:	e055      	b.n	800518e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80050e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80050e4:	3303      	adds	r3, #3
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	f023 0303 	bic.w	r3, r3, #3
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	88bb      	ldrh	r3, [r7, #4]
 80050f0:	3303      	adds	r3, #3
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	f023 0303 	bic.w	r3, r3, #3
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	4413      	add	r3, r2
 80050fc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80050fe:	8b3b      	ldrh	r3, [r7, #24]
 8005100:	3310      	adds	r3, #16
 8005102:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005104:	8b3a      	ldrh	r2, [r7, #24]
 8005106:	88bb      	ldrh	r3, [r7, #4]
 8005108:	3303      	adds	r3, #3
 800510a:	f023 0303 	bic.w	r3, r3, #3
 800510e:	429a      	cmp	r2, r3
 8005110:	d306      	bcc.n	8005120 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005112:	8afa      	ldrh	r2, [r7, #22]
 8005114:	88bb      	ldrh	r3, [r7, #4]
 8005116:	3303      	adds	r3, #3
 8005118:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800511c:	429a      	cmp	r2, r3
 800511e:	d201      	bcs.n	8005124 <pbuf_alloc+0x160>
        return NULL;
 8005120:	2300      	movs	r3, #0
 8005122:	e035      	b.n	8005190 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005124:	8afb      	ldrh	r3, [r7, #22]
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff f9da 	bl	80044e0 <mem_malloc>
 800512c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <pbuf_alloc+0x174>
        return NULL;
 8005134:	2300      	movs	r3, #0
 8005136:	e02b      	b.n	8005190 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005138:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800513a:	3310      	adds	r3, #16
 800513c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800513e:	4413      	add	r3, r2
 8005140:	3303      	adds	r3, #3
 8005142:	f023 0303 	bic.w	r3, r3, #3
 8005146:	4618      	mov	r0, r3
 8005148:	88b9      	ldrh	r1, [r7, #4]
 800514a:	88ba      	ldrh	r2, [r7, #4]
 800514c:	2300      	movs	r3, #0
 800514e:	9301      	str	r3, [sp, #4]
 8005150:	887b      	ldrh	r3, [r7, #2]
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	460b      	mov	r3, r1
 8005156:	4601      	mov	r1, r0
 8005158:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800515a:	f7ff ff09 	bl	8004f70 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d010      	beq.n	800518c <pbuf_alloc+0x1c8>
 800516a:	4b0b      	ldr	r3, [pc, #44]	@ (8005198 <pbuf_alloc+0x1d4>)
 800516c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8005170:	490d      	ldr	r1, [pc, #52]	@ (80051a8 <pbuf_alloc+0x1e4>)
 8005172:	480b      	ldr	r0, [pc, #44]	@ (80051a0 <pbuf_alloc+0x1dc>)
 8005174:	f008 ffc8 	bl	800e108 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005178:	e008      	b.n	800518c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800517a:	4b07      	ldr	r3, [pc, #28]	@ (8005198 <pbuf_alloc+0x1d4>)
 800517c:	f240 1227 	movw	r2, #295	@ 0x127
 8005180:	490a      	ldr	r1, [pc, #40]	@ (80051ac <pbuf_alloc+0x1e8>)
 8005182:	4807      	ldr	r0, [pc, #28]	@ (80051a0 <pbuf_alloc+0x1dc>)
 8005184:	f008 ffc0 	bl	800e108 <iprintf>
      return NULL;
 8005188:	2300      	movs	r3, #0
 800518a:	e001      	b.n	8005190 <pbuf_alloc+0x1cc>
      break;
 800518c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005190:	4618      	mov	r0, r3
 8005192:	3728      	adds	r7, #40	@ 0x28
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	0800f500 	.word	0x0800f500
 800519c:	0800f530 	.word	0x0800f530
 80051a0:	0800f560 	.word	0x0800f560
 80051a4:	0800f588 	.word	0x0800f588
 80051a8:	0800f5bc 	.word	0x0800f5bc
 80051ac:	0800f5e8 	.word	0x0800f5e8

080051b0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af02      	add	r7, sp, #8
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	807b      	strh	r3, [r7, #2]
 80051bc:	4613      	mov	r3, r2
 80051be:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80051c0:	883b      	ldrh	r3, [r7, #0]
 80051c2:	2b41      	cmp	r3, #65	@ 0x41
 80051c4:	d009      	beq.n	80051da <pbuf_alloc_reference+0x2a>
 80051c6:	883b      	ldrh	r3, [r7, #0]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d006      	beq.n	80051da <pbuf_alloc_reference+0x2a>
 80051cc:	4b0f      	ldr	r3, [pc, #60]	@ (800520c <pbuf_alloc_reference+0x5c>)
 80051ce:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80051d2:	490f      	ldr	r1, [pc, #60]	@ (8005210 <pbuf_alloc_reference+0x60>)
 80051d4:	480f      	ldr	r0, [pc, #60]	@ (8005214 <pbuf_alloc_reference+0x64>)
 80051d6:	f008 ff97 	bl	800e108 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80051da:	2007      	movs	r0, #7
 80051dc:	f7ff fb10 	bl	8004800 <memp_malloc>
 80051e0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80051e8:	2300      	movs	r3, #0
 80051ea:	e00b      	b.n	8005204 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80051ec:	8879      	ldrh	r1, [r7, #2]
 80051ee:	887a      	ldrh	r2, [r7, #2]
 80051f0:	2300      	movs	r3, #0
 80051f2:	9301      	str	r3, [sp, #4]
 80051f4:	883b      	ldrh	r3, [r7, #0]
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	460b      	mov	r3, r1
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f7ff feb7 	bl	8004f70 <pbuf_init_alloced_pbuf>
  return p;
 8005202:	68fb      	ldr	r3, [r7, #12]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	0800f500 	.word	0x0800f500
 8005210:	0800f604 	.word	0x0800f604
 8005214:	0800f560 	.word	0x0800f560

08005218 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b088      	sub	sp, #32
 800521c:	af02      	add	r7, sp, #8
 800521e:	607b      	str	r3, [r7, #4]
 8005220:	4603      	mov	r3, r0
 8005222:	73fb      	strb	r3, [r7, #15]
 8005224:	460b      	mov	r3, r1
 8005226:	81bb      	strh	r3, [r7, #12]
 8005228:	4613      	mov	r3, r2
 800522a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800522c:	7bfb      	ldrb	r3, [r7, #15]
 800522e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005230:	8a7b      	ldrh	r3, [r7, #18]
 8005232:	3303      	adds	r3, #3
 8005234:	f023 0203 	bic.w	r2, r3, #3
 8005238:	89bb      	ldrh	r3, [r7, #12]
 800523a:	441a      	add	r2, r3
 800523c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800523e:	429a      	cmp	r2, r3
 8005240:	d901      	bls.n	8005246 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005242:	2300      	movs	r3, #0
 8005244:	e018      	b.n	8005278 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d007      	beq.n	800525c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800524c:	8a7b      	ldrh	r3, [r7, #18]
 800524e:	3303      	adds	r3, #3
 8005250:	f023 0303 	bic.w	r3, r3, #3
 8005254:	6a3a      	ldr	r2, [r7, #32]
 8005256:	4413      	add	r3, r2
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	e001      	b.n	8005260 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800525c:	2300      	movs	r3, #0
 800525e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	89b9      	ldrh	r1, [r7, #12]
 8005264:	89ba      	ldrh	r2, [r7, #12]
 8005266:	2302      	movs	r3, #2
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	897b      	ldrh	r3, [r7, #10]
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	460b      	mov	r3, r1
 8005270:	6979      	ldr	r1, [r7, #20]
 8005272:	f7ff fe7d 	bl	8004f70 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005276:	687b      	ldr	r3, [r7, #4]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3718      	adds	r7, #24
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d106      	bne.n	80052a0 <pbuf_realloc+0x20>
 8005292:	4b3a      	ldr	r3, [pc, #232]	@ (800537c <pbuf_realloc+0xfc>)
 8005294:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8005298:	4939      	ldr	r1, [pc, #228]	@ (8005380 <pbuf_realloc+0x100>)
 800529a:	483a      	ldr	r0, [pc, #232]	@ (8005384 <pbuf_realloc+0x104>)
 800529c:	f008 ff34 	bl	800e108 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	891b      	ldrh	r3, [r3, #8]
 80052a4:	887a      	ldrh	r2, [r7, #2]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d263      	bcs.n	8005372 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	891a      	ldrh	r2, [r3, #8]
 80052ae:	887b      	ldrh	r3, [r7, #2]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80052b4:	887b      	ldrh	r3, [r7, #2]
 80052b6:	817b      	strh	r3, [r7, #10]
  q = p;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80052bc:	e018      	b.n	80052f0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	895b      	ldrh	r3, [r3, #10]
 80052c2:	897a      	ldrh	r2, [r7, #10]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	891a      	ldrh	r2, [r3, #8]
 80052cc:	893b      	ldrh	r3, [r7, #8]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <pbuf_realloc+0x70>
 80052e2:	4b26      	ldr	r3, [pc, #152]	@ (800537c <pbuf_realloc+0xfc>)
 80052e4:	f240 12af 	movw	r2, #431	@ 0x1af
 80052e8:	4927      	ldr	r1, [pc, #156]	@ (8005388 <pbuf_realloc+0x108>)
 80052ea:	4826      	ldr	r0, [pc, #152]	@ (8005384 <pbuf_realloc+0x104>)
 80052ec:	f008 ff0c 	bl	800e108 <iprintf>
  while (rem_len > q->len) {
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	895b      	ldrh	r3, [r3, #10]
 80052f4:	897a      	ldrh	r2, [r7, #10]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d8e1      	bhi.n	80052be <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	7b1b      	ldrb	r3, [r3, #12]
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	2b00      	cmp	r3, #0
 8005304:	d121      	bne.n	800534a <pbuf_realloc+0xca>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	895b      	ldrh	r3, [r3, #10]
 800530a:	897a      	ldrh	r2, [r7, #10]
 800530c:	429a      	cmp	r2, r3
 800530e:	d01c      	beq.n	800534a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	7b5b      	ldrb	r3, [r3, #13]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d116      	bne.n	800534a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	b29a      	uxth	r2, r3
 8005326:	897b      	ldrh	r3, [r7, #10]
 8005328:	4413      	add	r3, r2
 800532a:	b29b      	uxth	r3, r3
 800532c:	4619      	mov	r1, r3
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f7fe ffda 	bl	80042e8 <mem_trim>
 8005334:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d106      	bne.n	800534a <pbuf_realloc+0xca>
 800533c:	4b0f      	ldr	r3, [pc, #60]	@ (800537c <pbuf_realloc+0xfc>)
 800533e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8005342:	4912      	ldr	r1, [pc, #72]	@ (800538c <pbuf_realloc+0x10c>)
 8005344:	480f      	ldr	r0, [pc, #60]	@ (8005384 <pbuf_realloc+0x104>)
 8005346:	f008 fedf 	bl	800e108 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	897a      	ldrh	r2, [r7, #10]
 800534e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	895a      	ldrh	r2, [r3, #10]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d004      	beq.n	800536a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f000 f911 	bl	800558c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	e000      	b.n	8005374 <pbuf_realloc+0xf4>
    return;
 8005372:	bf00      	nop

}
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	0800f500 	.word	0x0800f500
 8005380:	0800f618 	.word	0x0800f618
 8005384:	0800f560 	.word	0x0800f560
 8005388:	0800f630 	.word	0x0800f630
 800538c:	0800f648 	.word	0x0800f648

08005390 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	4613      	mov	r3, r2
 800539c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d106      	bne.n	80053b2 <pbuf_add_header_impl+0x22>
 80053a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005454 <pbuf_add_header_impl+0xc4>)
 80053a6:	f240 12df 	movw	r2, #479	@ 0x1df
 80053aa:	492b      	ldr	r1, [pc, #172]	@ (8005458 <pbuf_add_header_impl+0xc8>)
 80053ac:	482b      	ldr	r0, [pc, #172]	@ (800545c <pbuf_add_header_impl+0xcc>)
 80053ae:	f008 feab 	bl	800e108 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <pbuf_add_header_impl+0x30>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053be:	d301      	bcc.n	80053c4 <pbuf_add_header_impl+0x34>
    return 1;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e043      	b.n	800544c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <pbuf_add_header_impl+0x3e>
    return 0;
 80053ca:	2300      	movs	r3, #0
 80053cc:	e03e      	b.n	800544c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	891a      	ldrh	r2, [r3, #8]
 80053d6:	8a7b      	ldrh	r3, [r7, #18]
 80053d8:	4413      	add	r3, r2
 80053da:	b29b      	uxth	r3, r3
 80053dc:	8a7a      	ldrh	r2, [r7, #18]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d901      	bls.n	80053e6 <pbuf_add_header_impl+0x56>
    return 1;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e032      	b.n	800544c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	7b1b      	ldrb	r3, [r3, #12]
 80053ea:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80053ec:	8a3b      	ldrh	r3, [r7, #16]
 80053ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00c      	beq.n	8005410 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	425b      	negs	r3, r3
 80053fe:	4413      	add	r3, r2
 8005400:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3310      	adds	r3, #16
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	429a      	cmp	r2, r3
 800540a:	d20d      	bcs.n	8005428 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800540c:	2301      	movs	r3, #1
 800540e:	e01d      	b.n	800544c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d006      	beq.n	8005424 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	425b      	negs	r3, r3
 800541e:	4413      	add	r3, r2
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	e001      	b.n	8005428 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005424:	2301      	movs	r3, #1
 8005426:	e011      	b.n	800544c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	895a      	ldrh	r2, [r3, #10]
 8005432:	8a7b      	ldrh	r3, [r7, #18]
 8005434:	4413      	add	r3, r2
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	891a      	ldrh	r2, [r3, #8]
 8005440:	8a7b      	ldrh	r3, [r7, #18]
 8005442:	4413      	add	r3, r2
 8005444:	b29a      	uxth	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	811a      	strh	r2, [r3, #8]


  return 0;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	0800f500 	.word	0x0800f500
 8005458:	0800f664 	.word	0x0800f664
 800545c:	0800f560 	.word	0x0800f560

08005460 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800546a:	2200      	movs	r2, #0
 800546c:	6839      	ldr	r1, [r7, #0]
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7ff ff8e 	bl	8005390 <pbuf_add_header_impl>
 8005474:	4603      	mov	r3, r0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d106      	bne.n	800549e <pbuf_remove_header+0x1e>
 8005490:	4b20      	ldr	r3, [pc, #128]	@ (8005514 <pbuf_remove_header+0x94>)
 8005492:	f240 224b 	movw	r2, #587	@ 0x24b
 8005496:	4920      	ldr	r1, [pc, #128]	@ (8005518 <pbuf_remove_header+0x98>)
 8005498:	4820      	ldr	r0, [pc, #128]	@ (800551c <pbuf_remove_header+0x9c>)
 800549a:	f008 fe35 	bl	800e108 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <pbuf_remove_header+0x2c>
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054aa:	d301      	bcc.n	80054b0 <pbuf_remove_header+0x30>
    return 1;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e02c      	b.n	800550a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <pbuf_remove_header+0x3a>
    return 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	e027      	b.n	800550a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	895b      	ldrh	r3, [r3, #10]
 80054c2:	89fa      	ldrh	r2, [r7, #14]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d908      	bls.n	80054da <pbuf_remove_header+0x5a>
 80054c8:	4b12      	ldr	r3, [pc, #72]	@ (8005514 <pbuf_remove_header+0x94>)
 80054ca:	f240 2255 	movw	r2, #597	@ 0x255
 80054ce:	4914      	ldr	r1, [pc, #80]	@ (8005520 <pbuf_remove_header+0xa0>)
 80054d0:	4812      	ldr	r0, [pc, #72]	@ (800551c <pbuf_remove_header+0x9c>)
 80054d2:	f008 fe19 	bl	800e108 <iprintf>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e017      	b.n	800550a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	441a      	add	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	895a      	ldrh	r2, [r3, #10]
 80054f0:	89fb      	ldrh	r3, [r7, #14]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	891a      	ldrh	r2, [r3, #8]
 80054fe:	89fb      	ldrh	r3, [r7, #14]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	b29a      	uxth	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	0800f500 	.word	0x0800f500
 8005518:	0800f664 	.word	0x0800f664
 800551c:	0800f560 	.word	0x0800f560
 8005520:	0800f670 	.word	0x0800f670

08005524 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	807b      	strh	r3, [r7, #2]
 8005530:	4613      	mov	r3, r2
 8005532:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005534:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005538:	2b00      	cmp	r3, #0
 800553a:	da08      	bge.n	800554e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800553c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005540:	425b      	negs	r3, r3
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff ff9b 	bl	8005480 <pbuf_remove_header>
 800554a:	4603      	mov	r3, r0
 800554c:	e007      	b.n	800555e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800554e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005552:	787a      	ldrb	r2, [r7, #1]
 8005554:	4619      	mov	r1, r3
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff ff1a 	bl	8005390 <pbuf_add_header_impl>
 800555c:	4603      	mov	r3, r0
  }
}
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	460b      	mov	r3, r1
 8005570:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005572:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005576:	2201      	movs	r2, #1
 8005578:	4619      	mov	r1, r3
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff ffd2 	bl	8005524 <pbuf_header_impl>
 8005580:	4603      	mov	r3, r0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10b      	bne.n	80055b2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d106      	bne.n	80055ae <pbuf_free+0x22>
 80055a0:	4b38      	ldr	r3, [pc, #224]	@ (8005684 <pbuf_free+0xf8>)
 80055a2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80055a6:	4938      	ldr	r1, [pc, #224]	@ (8005688 <pbuf_free+0xfc>)
 80055a8:	4838      	ldr	r0, [pc, #224]	@ (800568c <pbuf_free+0x100>)
 80055aa:	f008 fdad 	bl	800e108 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80055ae:	2300      	movs	r3, #0
 80055b0:	e063      	b.n	800567a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80055b2:	2300      	movs	r3, #0
 80055b4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80055b6:	e05c      	b.n	8005672 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	7b9b      	ldrb	r3, [r3, #14]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d106      	bne.n	80055ce <pbuf_free+0x42>
 80055c0:	4b30      	ldr	r3, [pc, #192]	@ (8005684 <pbuf_free+0xf8>)
 80055c2:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80055c6:	4932      	ldr	r1, [pc, #200]	@ (8005690 <pbuf_free+0x104>)
 80055c8:	4830      	ldr	r0, [pc, #192]	@ (800568c <pbuf_free+0x100>)
 80055ca:	f008 fd9d 	bl	800e108 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	7b9b      	ldrb	r3, [r3, #14]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	739a      	strb	r2, [r3, #14]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	7b9b      	ldrb	r3, [r3, #14]
 80055de:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80055e0:	7dbb      	ldrb	r3, [r7, #22]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d143      	bne.n	800566e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	7b1b      	ldrb	r3, [r3, #12]
 80055f0:	f003 030f 	and.w	r3, r3, #15
 80055f4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	7b5b      	ldrb	r3, [r3, #13]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d011      	beq.n	8005626 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d106      	bne.n	800561c <pbuf_free+0x90>
 800560e:	4b1d      	ldr	r3, [pc, #116]	@ (8005684 <pbuf_free+0xf8>)
 8005610:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8005614:	491f      	ldr	r1, [pc, #124]	@ (8005694 <pbuf_free+0x108>)
 8005616:	481d      	ldr	r0, [pc, #116]	@ (800568c <pbuf_free+0x100>)
 8005618:	f008 fd76 	bl	800e108 <iprintf>
        pc->custom_free_function(p);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	4798      	blx	r3
 8005624:	e01d      	b.n	8005662 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005626:	7bfb      	ldrb	r3, [r7, #15]
 8005628:	2b02      	cmp	r3, #2
 800562a:	d104      	bne.n	8005636 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800562c:	6879      	ldr	r1, [r7, #4]
 800562e:	2008      	movs	r0, #8
 8005630:	f7ff f956 	bl	80048e0 <memp_free>
 8005634:	e015      	b.n	8005662 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005636:	7bfb      	ldrb	r3, [r7, #15]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d104      	bne.n	8005646 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	2007      	movs	r0, #7
 8005640:	f7ff f94e 	bl	80048e0 <memp_free>
 8005644:	e00d      	b.n	8005662 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005646:	7bfb      	ldrb	r3, [r7, #15]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d103      	bne.n	8005654 <pbuf_free+0xc8>
          mem_free(p);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7fe fde1 	bl	8004214 <mem_free>
 8005652:	e006      	b.n	8005662 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005654:	4b0b      	ldr	r3, [pc, #44]	@ (8005684 <pbuf_free+0xf8>)
 8005656:	f240 320f 	movw	r2, #783	@ 0x30f
 800565a:	490f      	ldr	r1, [pc, #60]	@ (8005698 <pbuf_free+0x10c>)
 800565c:	480b      	ldr	r0, [pc, #44]	@ (800568c <pbuf_free+0x100>)
 800565e:	f008 fd53 	bl	800e108 <iprintf>
        }
      }
      count++;
 8005662:	7dfb      	ldrb	r3, [r7, #23]
 8005664:	3301      	adds	r3, #1
 8005666:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	607b      	str	r3, [r7, #4]
 800566c:	e001      	b.n	8005672 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800566e:	2300      	movs	r3, #0
 8005670:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d19f      	bne.n	80055b8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005678:	7dfb      	ldrb	r3, [r7, #23]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	0800f500 	.word	0x0800f500
 8005688:	0800f664 	.word	0x0800f664
 800568c:	0800f560 	.word	0x0800f560
 8005690:	0800f690 	.word	0x0800f690
 8005694:	0800f6a8 	.word	0x0800f6a8
 8005698:	0800f6cc 	.word	0x0800f6cc

0800569c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80056a4:	2300      	movs	r3, #0
 80056a6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80056a8:	e005      	b.n	80056b6 <pbuf_clen+0x1a>
    ++len;
 80056aa:	89fb      	ldrh	r3, [r7, #14]
 80056ac:	3301      	adds	r3, #1
 80056ae:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1f6      	bne.n	80056aa <pbuf_clen+0xe>
  }
  return len;
 80056bc:	89fb      	ldrh	r3, [r7, #14]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d010      	beq.n	80056fc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	7b9b      	ldrb	r3, [r3, #14]
 80056de:	3301      	adds	r3, #1
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	7b9b      	ldrb	r3, [r3, #14]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d106      	bne.n	80056fc <pbuf_ref+0x30>
 80056ee:	4b05      	ldr	r3, [pc, #20]	@ (8005704 <pbuf_ref+0x38>)
 80056f0:	f240 3242 	movw	r2, #834	@ 0x342
 80056f4:	4904      	ldr	r1, [pc, #16]	@ (8005708 <pbuf_ref+0x3c>)
 80056f6:	4805      	ldr	r0, [pc, #20]	@ (800570c <pbuf_ref+0x40>)
 80056f8:	f008 fd06 	bl	800e108 <iprintf>
  }
}
 80056fc:	bf00      	nop
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	0800f500 	.word	0x0800f500
 8005708:	0800f6e0 	.word	0x0800f6e0
 800570c:	0800f560 	.word	0x0800f560

08005710 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <pbuf_cat+0x16>
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d107      	bne.n	8005736 <pbuf_cat+0x26>
 8005726:	4b20      	ldr	r3, [pc, #128]	@ (80057a8 <pbuf_cat+0x98>)
 8005728:	f240 3259 	movw	r2, #857	@ 0x359
 800572c:	491f      	ldr	r1, [pc, #124]	@ (80057ac <pbuf_cat+0x9c>)
 800572e:	4820      	ldr	r0, [pc, #128]	@ (80057b0 <pbuf_cat+0xa0>)
 8005730:	f008 fcea 	bl	800e108 <iprintf>
 8005734:	e034      	b.n	80057a0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	e00a      	b.n	8005752 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	891a      	ldrh	r2, [r3, #8]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	891b      	ldrh	r3, [r3, #8]
 8005744:	4413      	add	r3, r2
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f0      	bne.n	800573c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	891a      	ldrh	r2, [r3, #8]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	895b      	ldrh	r3, [r3, #10]
 8005762:	429a      	cmp	r2, r3
 8005764:	d006      	beq.n	8005774 <pbuf_cat+0x64>
 8005766:	4b10      	ldr	r3, [pc, #64]	@ (80057a8 <pbuf_cat+0x98>)
 8005768:	f240 3262 	movw	r2, #866	@ 0x362
 800576c:	4911      	ldr	r1, [pc, #68]	@ (80057b4 <pbuf_cat+0xa4>)
 800576e:	4810      	ldr	r0, [pc, #64]	@ (80057b0 <pbuf_cat+0xa0>)
 8005770:	f008 fcca 	bl	800e108 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d006      	beq.n	800578a <pbuf_cat+0x7a>
 800577c:	4b0a      	ldr	r3, [pc, #40]	@ (80057a8 <pbuf_cat+0x98>)
 800577e:	f240 3263 	movw	r2, #867	@ 0x363
 8005782:	490d      	ldr	r1, [pc, #52]	@ (80057b8 <pbuf_cat+0xa8>)
 8005784:	480a      	ldr	r0, [pc, #40]	@ (80057b0 <pbuf_cat+0xa0>)
 8005786:	f008 fcbf 	bl	800e108 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	891a      	ldrh	r2, [r3, #8]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	891b      	ldrh	r3, [r3, #8]
 8005792:	4413      	add	r3, r2
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	0800f500 	.word	0x0800f500
 80057ac:	0800f6f4 	.word	0x0800f6f4
 80057b0:	0800f560 	.word	0x0800f560
 80057b4:	0800f72c 	.word	0x0800f72c
 80057b8:	0800f75c 	.word	0x0800f75c

080057bc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80057c6:	6839      	ldr	r1, [r7, #0]
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff ffa1 	bl	8005710 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80057ce:	6838      	ldr	r0, [r7, #0]
 80057d0:	f7ff ff7c 	bl	80056cc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80057d4:	bf00      	nop
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80057e6:	2300      	movs	r3, #0
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	2300      	movs	r3, #0
 80057ec:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d008      	beq.n	8005806 <pbuf_copy+0x2a>
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d005      	beq.n	8005806 <pbuf_copy+0x2a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	891a      	ldrh	r2, [r3, #8]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	891b      	ldrh	r3, [r3, #8]
 8005802:	429a      	cmp	r2, r3
 8005804:	d209      	bcs.n	800581a <pbuf_copy+0x3e>
 8005806:	4b57      	ldr	r3, [pc, #348]	@ (8005964 <pbuf_copy+0x188>)
 8005808:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800580c:	4956      	ldr	r1, [pc, #344]	@ (8005968 <pbuf_copy+0x18c>)
 800580e:	4857      	ldr	r0, [pc, #348]	@ (800596c <pbuf_copy+0x190>)
 8005810:	f008 fc7a 	bl	800e108 <iprintf>
 8005814:	f06f 030f 	mvn.w	r3, #15
 8005818:	e09f      	b.n	800595a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	895b      	ldrh	r3, [r3, #10]
 800581e:	461a      	mov	r2, r3
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	1ad2      	subs	r2, r2, r3
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	895b      	ldrh	r3, [r3, #10]
 8005828:	4619      	mov	r1, r3
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1acb      	subs	r3, r1, r3
 800582e:	429a      	cmp	r2, r3
 8005830:	d306      	bcc.n	8005840 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	895b      	ldrh	r3, [r3, #10]
 8005836:	461a      	mov	r2, r3
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	e005      	b.n	800584c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	895b      	ldrh	r3, [r3, #10]
 8005844:	461a      	mov	r2, r3
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	18d0      	adds	r0, r2, r3
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4413      	add	r3, r2
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4619      	mov	r1, r3
 8005860:	f008 fd2d 	bl	800e2be <memcpy>
    offset_to += len;
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4413      	add	r3, r2
 8005872:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	895b      	ldrh	r3, [r3, #10]
 8005878:	461a      	mov	r2, r3
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	4293      	cmp	r3, r2
 800587e:	d906      	bls.n	800588e <pbuf_copy+0xb2>
 8005880:	4b38      	ldr	r3, [pc, #224]	@ (8005964 <pbuf_copy+0x188>)
 8005882:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8005886:	493a      	ldr	r1, [pc, #232]	@ (8005970 <pbuf_copy+0x194>)
 8005888:	4838      	ldr	r0, [pc, #224]	@ (800596c <pbuf_copy+0x190>)
 800588a:	f008 fc3d 	bl	800e108 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	895b      	ldrh	r3, [r3, #10]
 8005892:	461a      	mov	r2, r3
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	4293      	cmp	r3, r2
 8005898:	d906      	bls.n	80058a8 <pbuf_copy+0xcc>
 800589a:	4b32      	ldr	r3, [pc, #200]	@ (8005964 <pbuf_copy+0x188>)
 800589c:	f240 32da 	movw	r2, #986	@ 0x3da
 80058a0:	4934      	ldr	r1, [pc, #208]	@ (8005974 <pbuf_copy+0x198>)
 80058a2:	4832      	ldr	r0, [pc, #200]	@ (800596c <pbuf_copy+0x190>)
 80058a4:	f008 fc30 	bl	800e108 <iprintf>
    if (offset_from >= p_from->len) {
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	895b      	ldrh	r3, [r3, #10]
 80058ac:	461a      	mov	r2, r3
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d304      	bcc.n	80058be <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80058b4:	2300      	movs	r3, #0
 80058b6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	895b      	ldrh	r3, [r3, #10]
 80058c2:	461a      	mov	r2, r3
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d114      	bne.n	80058f4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80058ca:	2300      	movs	r3, #0
 80058cc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10c      	bne.n	80058f4 <pbuf_copy+0x118>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d009      	beq.n	80058f4 <pbuf_copy+0x118>
 80058e0:	4b20      	ldr	r3, [pc, #128]	@ (8005964 <pbuf_copy+0x188>)
 80058e2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80058e6:	4924      	ldr	r1, [pc, #144]	@ (8005978 <pbuf_copy+0x19c>)
 80058e8:	4820      	ldr	r0, [pc, #128]	@ (800596c <pbuf_copy+0x190>)
 80058ea:	f008 fc0d 	bl	800e108 <iprintf>
 80058ee:	f06f 030f 	mvn.w	r3, #15
 80058f2:	e032      	b.n	800595a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d013      	beq.n	8005922 <pbuf_copy+0x146>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	895a      	ldrh	r2, [r3, #10]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	891b      	ldrh	r3, [r3, #8]
 8005902:	429a      	cmp	r2, r3
 8005904:	d10d      	bne.n	8005922 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d009      	beq.n	8005922 <pbuf_copy+0x146>
 800590e:	4b15      	ldr	r3, [pc, #84]	@ (8005964 <pbuf_copy+0x188>)
 8005910:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8005914:	4919      	ldr	r1, [pc, #100]	@ (800597c <pbuf_copy+0x1a0>)
 8005916:	4815      	ldr	r0, [pc, #84]	@ (800596c <pbuf_copy+0x190>)
 8005918:	f008 fbf6 	bl	800e108 <iprintf>
 800591c:	f06f 0305 	mvn.w	r3, #5
 8005920:	e01b      	b.n	800595a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d013      	beq.n	8005950 <pbuf_copy+0x174>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	895a      	ldrh	r2, [r3, #10]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	891b      	ldrh	r3, [r3, #8]
 8005930:	429a      	cmp	r2, r3
 8005932:	d10d      	bne.n	8005950 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d009      	beq.n	8005950 <pbuf_copy+0x174>
 800593c:	4b09      	ldr	r3, [pc, #36]	@ (8005964 <pbuf_copy+0x188>)
 800593e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8005942:	490e      	ldr	r1, [pc, #56]	@ (800597c <pbuf_copy+0x1a0>)
 8005944:	4809      	ldr	r0, [pc, #36]	@ (800596c <pbuf_copy+0x190>)
 8005946:	f008 fbdf 	bl	800e108 <iprintf>
 800594a:	f06f 0305 	mvn.w	r3, #5
 800594e:	e004      	b.n	800595a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	f47f af61 	bne.w	800581a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3718      	adds	r7, #24
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	0800f500 	.word	0x0800f500
 8005968:	0800f7a8 	.word	0x0800f7a8
 800596c:	0800f560 	.word	0x0800f560
 8005970:	0800f7d8 	.word	0x0800f7d8
 8005974:	0800f7f0 	.word	0x0800f7f0
 8005978:	0800f80c 	.word	0x0800f80c
 800597c:	0800f81c 	.word	0x0800f81c

08005980 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	4611      	mov	r1, r2
 800598c:	461a      	mov	r2, r3
 800598e:	460b      	mov	r3, r1
 8005990:	80fb      	strh	r3, [r7, #6]
 8005992:	4613      	mov	r3, r2
 8005994:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d108      	bne.n	80059b6 <pbuf_copy_partial+0x36>
 80059a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005a54 <pbuf_copy_partial+0xd4>)
 80059a6:	f240 420a 	movw	r2, #1034	@ 0x40a
 80059aa:	492b      	ldr	r1, [pc, #172]	@ (8005a58 <pbuf_copy_partial+0xd8>)
 80059ac:	482b      	ldr	r0, [pc, #172]	@ (8005a5c <pbuf_copy_partial+0xdc>)
 80059ae:	f008 fbab 	bl	800e108 <iprintf>
 80059b2:	2300      	movs	r3, #0
 80059b4:	e04a      	b.n	8005a4c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d108      	bne.n	80059ce <pbuf_copy_partial+0x4e>
 80059bc:	4b25      	ldr	r3, [pc, #148]	@ (8005a54 <pbuf_copy_partial+0xd4>)
 80059be:	f240 420b 	movw	r2, #1035	@ 0x40b
 80059c2:	4927      	ldr	r1, [pc, #156]	@ (8005a60 <pbuf_copy_partial+0xe0>)
 80059c4:	4825      	ldr	r0, [pc, #148]	@ (8005a5c <pbuf_copy_partial+0xdc>)
 80059c6:	f008 fb9f 	bl	800e108 <iprintf>
 80059ca:	2300      	movs	r3, #0
 80059cc:	e03e      	b.n	8005a4c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	61fb      	str	r3, [r7, #28]
 80059d2:	e034      	b.n	8005a3e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80059d4:	88bb      	ldrh	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <pbuf_copy_partial+0x70>
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	895b      	ldrh	r3, [r3, #10]
 80059de:	88ba      	ldrh	r2, [r7, #4]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d305      	bcc.n	80059f0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	895b      	ldrh	r3, [r3, #10]
 80059e8:	88ba      	ldrh	r2, [r7, #4]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	80bb      	strh	r3, [r7, #4]
 80059ee:	e023      	b.n	8005a38 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	895a      	ldrh	r2, [r3, #10]
 80059f4:	88bb      	ldrh	r3, [r7, #4]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80059fa:	8b3a      	ldrh	r2, [r7, #24]
 80059fc:	88fb      	ldrh	r3, [r7, #6]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d901      	bls.n	8005a06 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005a02:	88fb      	ldrh	r3, [r7, #6]
 8005a04:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8005a06:	8b7b      	ldrh	r3, [r7, #26]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	18d0      	adds	r0, r2, r3
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	88bb      	ldrh	r3, [r7, #4]
 8005a12:	4413      	add	r3, r2
 8005a14:	8b3a      	ldrh	r2, [r7, #24]
 8005a16:	4619      	mov	r1, r3
 8005a18:	f008 fc51 	bl	800e2be <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005a1c:	8afa      	ldrh	r2, [r7, #22]
 8005a1e:	8b3b      	ldrh	r3, [r7, #24]
 8005a20:	4413      	add	r3, r2
 8005a22:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005a24:	8b7a      	ldrh	r2, [r7, #26]
 8005a26:	8b3b      	ldrh	r3, [r7, #24]
 8005a28:	4413      	add	r3, r2
 8005a2a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005a2c:	88fa      	ldrh	r2, [r7, #6]
 8005a2e:	8b3b      	ldrh	r3, [r7, #24]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005a34:	2300      	movs	r3, #0
 8005a36:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	61fb      	str	r3, [r7, #28]
 8005a3e:	88fb      	ldrh	r3, [r7, #6]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <pbuf_copy_partial+0xca>
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1c4      	bne.n	80059d4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005a4a:	8afb      	ldrh	r3, [r7, #22]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3720      	adds	r7, #32
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	0800f500 	.word	0x0800f500
 8005a58:	0800f848 	.word	0x0800f848
 8005a5c:	0800f560 	.word	0x0800f560
 8005a60:	0800f868 	.word	0x0800f868

08005a64 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8005a72:	88fb      	ldrh	r3, [r7, #6]
 8005a74:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d109      	bne.n	8005a94 <pbuf_take+0x30>
 8005a80:	4b3a      	ldr	r3, [pc, #232]	@ (8005b6c <pbuf_take+0x108>)
 8005a82:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8005a86:	493a      	ldr	r1, [pc, #232]	@ (8005b70 <pbuf_take+0x10c>)
 8005a88:	483a      	ldr	r0, [pc, #232]	@ (8005b74 <pbuf_take+0x110>)
 8005a8a:	f008 fb3d 	bl	800e108 <iprintf>
 8005a8e:	f06f 030f 	mvn.w	r3, #15
 8005a92:	e067      	b.n	8005b64 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d109      	bne.n	8005aae <pbuf_take+0x4a>
 8005a9a:	4b34      	ldr	r3, [pc, #208]	@ (8005b6c <pbuf_take+0x108>)
 8005a9c:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 8005aa0:	4935      	ldr	r1, [pc, #212]	@ (8005b78 <pbuf_take+0x114>)
 8005aa2:	4834      	ldr	r0, [pc, #208]	@ (8005b74 <pbuf_take+0x110>)
 8005aa4:	f008 fb30 	bl	800e108 <iprintf>
 8005aa8:	f06f 030f 	mvn.w	r3, #15
 8005aac:	e05a      	b.n	8005b64 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	891b      	ldrh	r3, [r3, #8]
 8005ab2:	88fa      	ldrh	r2, [r7, #6]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d909      	bls.n	8005acc <pbuf_take+0x68>
 8005ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8005b6c <pbuf_take+0x108>)
 8005aba:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 8005abe:	492f      	ldr	r1, [pc, #188]	@ (8005b7c <pbuf_take+0x118>)
 8005ac0:	482c      	ldr	r0, [pc, #176]	@ (8005b74 <pbuf_take+0x110>)
 8005ac2:	f008 fb21 	bl	800e108 <iprintf>
 8005ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aca:	e04b      	b.n	8005b64 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d007      	beq.n	8005ae2 <pbuf_take+0x7e>
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d004      	beq.n	8005ae2 <pbuf_take+0x7e>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	891b      	ldrh	r3, [r3, #8]
 8005adc:	88fa      	ldrh	r2, [r7, #6]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d902      	bls.n	8005ae8 <pbuf_take+0x84>
    return ERR_ARG;
 8005ae2:	f06f 030f 	mvn.w	r3, #15
 8005ae6:	e03d      	b.n	8005b64 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	61fb      	str	r3, [r7, #28]
 8005aec:	e028      	b.n	8005b40 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d106      	bne.n	8005b02 <pbuf_take+0x9e>
 8005af4:	4b1d      	ldr	r3, [pc, #116]	@ (8005b6c <pbuf_take+0x108>)
 8005af6:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8005afa:	4921      	ldr	r1, [pc, #132]	@ (8005b80 <pbuf_take+0x11c>)
 8005afc:	481d      	ldr	r0, [pc, #116]	@ (8005b74 <pbuf_take+0x110>)
 8005afe:	f008 fb03 	bl	800e108 <iprintf>
    buf_copy_len = total_copy_len;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	895b      	ldrh	r3, [r3, #10]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d902      	bls.n	8005b18 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	895b      	ldrh	r3, [r3, #10]
 8005b16:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	6858      	ldr	r0, [r3, #4]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	4413      	add	r3, r2
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	4619      	mov	r1, r3
 8005b26:	f008 fbca 	bl	800e2be <memcpy>
    total_copy_len -= buf_copy_len;
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	4413      	add	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	61fb      	str	r3, [r7, #28]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1d3      	bne.n	8005aee <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d103      	bne.n	8005b54 <pbuf_take+0xf0>
 8005b4c:	88fb      	ldrh	r3, [r7, #6]
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d006      	beq.n	8005b62 <pbuf_take+0xfe>
 8005b54:	4b05      	ldr	r3, [pc, #20]	@ (8005b6c <pbuf_take+0x108>)
 8005b56:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8005b5a:	490a      	ldr	r1, [pc, #40]	@ (8005b84 <pbuf_take+0x120>)
 8005b5c:	4805      	ldr	r0, [pc, #20]	@ (8005b74 <pbuf_take+0x110>)
 8005b5e:	f008 fad3 	bl	800e108 <iprintf>
  return ERR_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3720      	adds	r7, #32
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	0800f500 	.word	0x0800f500
 8005b70:	0800f8d8 	.word	0x0800f8d8
 8005b74:	0800f560 	.word	0x0800f560
 8005b78:	0800f8f0 	.word	0x0800f8f0
 8005b7c:	0800f90c 	.word	0x0800f90c
 8005b80:	0800f92c 	.word	0x0800f92c
 8005b84:	0800f944 	.word	0x0800f944

08005b88 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	603a      	str	r2, [r7, #0]
 8005b92:	71fb      	strb	r3, [r7, #7]
 8005b94:	460b      	mov	r3, r1
 8005b96:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	8919      	ldrh	r1, [r3, #8]
 8005b9c:	88ba      	ldrh	r2, [r7, #4]
 8005b9e:	79fb      	ldrb	r3, [r7, #7]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff fa0f 	bl	8004fc4 <pbuf_alloc>
 8005ba6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <pbuf_clone+0x2a>
    return NULL;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	e011      	b.n	8005bd6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8005bb2:	6839      	ldr	r1, [r7, #0]
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f7ff fe11 	bl	80057dc <pbuf_copy>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005bbe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d006      	beq.n	8005bd4 <pbuf_clone+0x4c>
 8005bc6:	4b06      	ldr	r3, [pc, #24]	@ (8005be0 <pbuf_clone+0x58>)
 8005bc8:	f240 5224 	movw	r2, #1316	@ 0x524
 8005bcc:	4905      	ldr	r1, [pc, #20]	@ (8005be4 <pbuf_clone+0x5c>)
 8005bce:	4806      	ldr	r0, [pc, #24]	@ (8005be8 <pbuf_clone+0x60>)
 8005bd0:	f008 fa9a 	bl	800e108 <iprintf>
  return q;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	0800f500 	.word	0x0800f500
 8005be4:	0800f974 	.word	0x0800f974
 8005be8:	0800f560 	.word	0x0800f560

08005bec <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005bf0:	f008 f98a 	bl	800df08 <rand>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	4b01      	ldr	r3, [pc, #4]	@ (8005c0c <tcp_init+0x20>)
 8005c06:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005c08:	bf00      	nop
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	20000020 	.word	0x20000020

08005c10 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	7d1b      	ldrb	r3, [r3, #20]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d105      	bne.n	8005c2c <tcp_free+0x1c>
 8005c20:	4b06      	ldr	r3, [pc, #24]	@ (8005c3c <tcp_free+0x2c>)
 8005c22:	22d4      	movs	r2, #212	@ 0xd4
 8005c24:	4906      	ldr	r1, [pc, #24]	@ (8005c40 <tcp_free+0x30>)
 8005c26:	4807      	ldr	r0, [pc, #28]	@ (8005c44 <tcp_free+0x34>)
 8005c28:	f008 fa6e 	bl	800e108 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005c2c:	6879      	ldr	r1, [r7, #4]
 8005c2e:	2001      	movs	r0, #1
 8005c30:	f7fe fe56 	bl	80048e0 <memp_free>
}
 8005c34:	bf00      	nop
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	0800fa00 	.word	0x0800fa00
 8005c40:	0800fa30 	.word	0x0800fa30
 8005c44:	0800fa44 	.word	0x0800fa44

08005c48 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	7d1b      	ldrb	r3, [r3, #20]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d105      	bne.n	8005c64 <tcp_free_listen+0x1c>
 8005c58:	4b06      	ldr	r3, [pc, #24]	@ (8005c74 <tcp_free_listen+0x2c>)
 8005c5a:	22df      	movs	r2, #223	@ 0xdf
 8005c5c:	4906      	ldr	r1, [pc, #24]	@ (8005c78 <tcp_free_listen+0x30>)
 8005c5e:	4807      	ldr	r0, [pc, #28]	@ (8005c7c <tcp_free_listen+0x34>)
 8005c60:	f008 fa52 	bl	800e108 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	2002      	movs	r0, #2
 8005c68:	f7fe fe3a 	bl	80048e0 <memp_free>
}
 8005c6c:	bf00      	nop
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	0800fa00 	.word	0x0800fa00
 8005c78:	0800fa6c 	.word	0x0800fa6c
 8005c7c:	0800fa44 	.word	0x0800fa44

08005c80 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005c84:	f000 fea4 	bl	80069d0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005c88:	4b07      	ldr	r3, [pc, #28]	@ (8005ca8 <tcp_tmr+0x28>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	4b05      	ldr	r3, [pc, #20]	@ (8005ca8 <tcp_tmr+0x28>)
 8005c92:	701a      	strb	r2, [r3, #0]
 8005c94:	4b04      	ldr	r3, [pc, #16]	@ (8005ca8 <tcp_tmr+0x28>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005ca0:	f000 fb54 	bl	800634c <tcp_slowtmr>
  }
}
 8005ca4:	bf00      	nop
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	200082a5 	.word	0x200082a5

08005cac <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d105      	bne.n	8005cc8 <tcp_remove_listener+0x1c>
 8005cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf4 <tcp_remove_listener+0x48>)
 8005cbe:	22ff      	movs	r2, #255	@ 0xff
 8005cc0:	490d      	ldr	r1, [pc, #52]	@ (8005cf8 <tcp_remove_listener+0x4c>)
 8005cc2:	480e      	ldr	r0, [pc, #56]	@ (8005cfc <tcp_remove_listener+0x50>)
 8005cc4:	f008 fa20 	bl	800e108 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	e00a      	b.n	8005ce4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d102      	bne.n	8005cde <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1f1      	bne.n	8005cce <tcp_remove_listener+0x22>
    }
  }
}
 8005cea:	bf00      	nop
 8005cec:	bf00      	nop
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	0800fa00 	.word	0x0800fa00
 8005cf8:	0800fa88 	.word	0x0800fa88
 8005cfc:	0800fa44 	.word	0x0800fa44

08005d00 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d106      	bne.n	8005d1c <tcp_listen_closed+0x1c>
 8005d0e:	4b14      	ldr	r3, [pc, #80]	@ (8005d60 <tcp_listen_closed+0x60>)
 8005d10:	f240 1211 	movw	r2, #273	@ 0x111
 8005d14:	4913      	ldr	r1, [pc, #76]	@ (8005d64 <tcp_listen_closed+0x64>)
 8005d16:	4814      	ldr	r0, [pc, #80]	@ (8005d68 <tcp_listen_closed+0x68>)
 8005d18:	f008 f9f6 	bl	800e108 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	7d1b      	ldrb	r3, [r3, #20]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d006      	beq.n	8005d32 <tcp_listen_closed+0x32>
 8005d24:	4b0e      	ldr	r3, [pc, #56]	@ (8005d60 <tcp_listen_closed+0x60>)
 8005d26:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8005d2a:	4910      	ldr	r1, [pc, #64]	@ (8005d6c <tcp_listen_closed+0x6c>)
 8005d2c:	480e      	ldr	r0, [pc, #56]	@ (8005d68 <tcp_listen_closed+0x68>)
 8005d2e:	f008 f9eb 	bl	800e108 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005d32:	2301      	movs	r3, #1
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	e00b      	b.n	8005d50 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005d38:	4a0d      	ldr	r2, [pc, #52]	@ (8005d70 <tcp_listen_closed+0x70>)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7ff ffb1 	bl	8005cac <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d9f0      	bls.n	8005d38 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005d56:	bf00      	nop
 8005d58:	bf00      	nop
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	0800fa00 	.word	0x0800fa00
 8005d64:	0800fab0 	.word	0x0800fab0
 8005d68:	0800fa44 	.word	0x0800fa44
 8005d6c:	0800fabc 	.word	0x0800fabc
 8005d70:	080119d8 	.word	0x080119d8

08005d74 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005d74:	b5b0      	push	{r4, r5, r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af04      	add	r7, sp, #16
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d106      	bne.n	8005d94 <tcp_close_shutdown+0x20>
 8005d86:	4b63      	ldr	r3, [pc, #396]	@ (8005f14 <tcp_close_shutdown+0x1a0>)
 8005d88:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8005d8c:	4962      	ldr	r1, [pc, #392]	@ (8005f18 <tcp_close_shutdown+0x1a4>)
 8005d8e:	4863      	ldr	r0, [pc, #396]	@ (8005f1c <tcp_close_shutdown+0x1a8>)
 8005d90:	f008 f9ba 	bl	800e108 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005d94:	78fb      	ldrb	r3, [r7, #3]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d066      	beq.n	8005e68 <tcp_close_shutdown+0xf4>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	7d1b      	ldrb	r3, [r3, #20]
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d003      	beq.n	8005daa <tcp_close_shutdown+0x36>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	7d1b      	ldrb	r3, [r3, #20]
 8005da6:	2b07      	cmp	r3, #7
 8005da8:	d15e      	bne.n	8005e68 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d104      	bne.n	8005dbc <tcp_close_shutdown+0x48>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8005dba:	d055      	beq.n	8005e68 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	8b5b      	ldrh	r3, [r3, #26]
 8005dc0:	f003 0310 	and.w	r3, r3, #16
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d106      	bne.n	8005dd6 <tcp_close_shutdown+0x62>
 8005dc8:	4b52      	ldr	r3, [pc, #328]	@ (8005f14 <tcp_close_shutdown+0x1a0>)
 8005dca:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8005dce:	4954      	ldr	r1, [pc, #336]	@ (8005f20 <tcp_close_shutdown+0x1ac>)
 8005dd0:	4852      	ldr	r0, [pc, #328]	@ (8005f1c <tcp_close_shutdown+0x1a8>)
 8005dd2:	f008 f999 	bl	800e108 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005dde:	687d      	ldr	r5, [r7, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3304      	adds	r3, #4
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	8ad2      	ldrh	r2, [r2, #22]
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	8b09      	ldrh	r1, [r1, #24]
 8005dec:	9102      	str	r1, [sp, #8]
 8005dee:	9201      	str	r2, [sp, #4]
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	462b      	mov	r3, r5
 8005df4:	4622      	mov	r2, r4
 8005df6:	4601      	mov	r1, r0
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f004 fe8d 	bl	800ab18 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f001 f8c8 	bl	8006f94 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005e04:	4b47      	ldr	r3, [pc, #284]	@ (8005f24 <tcp_close_shutdown+0x1b0>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d105      	bne.n	8005e1a <tcp_close_shutdown+0xa6>
 8005e0e:	4b45      	ldr	r3, [pc, #276]	@ (8005f24 <tcp_close_shutdown+0x1b0>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	4a43      	ldr	r2, [pc, #268]	@ (8005f24 <tcp_close_shutdown+0x1b0>)
 8005e16:	6013      	str	r3, [r2, #0]
 8005e18:	e013      	b.n	8005e42 <tcp_close_shutdown+0xce>
 8005e1a:	4b42      	ldr	r3, [pc, #264]	@ (8005f24 <tcp_close_shutdown+0x1b0>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	e00c      	b.n	8005e3c <tcp_close_shutdown+0xc8>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d104      	bne.n	8005e36 <tcp_close_shutdown+0xc2>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68da      	ldr	r2, [r3, #12]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	60da      	str	r2, [r3, #12]
 8005e34:	e005      	b.n	8005e42 <tcp_close_shutdown+0xce>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1ef      	bne.n	8005e22 <tcp_close_shutdown+0xae>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	60da      	str	r2, [r3, #12]
 8005e48:	4b37      	ldr	r3, [pc, #220]	@ (8005f28 <tcp_close_shutdown+0x1b4>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8005e4e:	4b37      	ldr	r3, [pc, #220]	@ (8005f2c <tcp_close_shutdown+0x1b8>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d102      	bne.n	8005e5e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005e58:	f003 fd5c 	bl	8009914 <tcp_trigger_input_pcb_close>
 8005e5c:	e002      	b.n	8005e64 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff fed6 	bl	8005c10 <tcp_free>
      }
      return ERR_OK;
 8005e64:	2300      	movs	r3, #0
 8005e66:	e050      	b.n	8005f0a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	7d1b      	ldrb	r3, [r3, #20]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d03b      	beq.n	8005ee8 <tcp_close_shutdown+0x174>
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	dc44      	bgt.n	8005efe <tcp_close_shutdown+0x18a>
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <tcp_close_shutdown+0x10a>
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d02a      	beq.n	8005ed2 <tcp_close_shutdown+0x15e>
 8005e7c:	e03f      	b.n	8005efe <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	8adb      	ldrh	r3, [r3, #22]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d021      	beq.n	8005eca <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005e86:	4b2a      	ldr	r3, [pc, #168]	@ (8005f30 <tcp_close_shutdown+0x1bc>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d105      	bne.n	8005e9c <tcp_close_shutdown+0x128>
 8005e90:	4b27      	ldr	r3, [pc, #156]	@ (8005f30 <tcp_close_shutdown+0x1bc>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	4a26      	ldr	r2, [pc, #152]	@ (8005f30 <tcp_close_shutdown+0x1bc>)
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	e013      	b.n	8005ec4 <tcp_close_shutdown+0x150>
 8005e9c:	4b24      	ldr	r3, [pc, #144]	@ (8005f30 <tcp_close_shutdown+0x1bc>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	60bb      	str	r3, [r7, #8]
 8005ea2:	e00c      	b.n	8005ebe <tcp_close_shutdown+0x14a>
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d104      	bne.n	8005eb8 <tcp_close_shutdown+0x144>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	60da      	str	r2, [r3, #12]
 8005eb6:	e005      	b.n	8005ec4 <tcp_close_shutdown+0x150>
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	60bb      	str	r3, [r7, #8]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1ef      	bne.n	8005ea4 <tcp_close_shutdown+0x130>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7ff fea0 	bl	8005c10 <tcp_free>
      break;
 8005ed0:	e01a      	b.n	8005f08 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7ff ff14 	bl	8005d00 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	4816      	ldr	r0, [pc, #88]	@ (8005f34 <tcp_close_shutdown+0x1c0>)
 8005edc:	f001 f8aa 	bl	8007034 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f7ff feb1 	bl	8005c48 <tcp_free_listen>
      break;
 8005ee6:	e00f      	b.n	8005f08 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005ee8:	6879      	ldr	r1, [r7, #4]
 8005eea:	480e      	ldr	r0, [pc, #56]	@ (8005f24 <tcp_close_shutdown+0x1b0>)
 8005eec:	f001 f8a2 	bl	8007034 <tcp_pcb_remove>
 8005ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8005f28 <tcp_close_shutdown+0x1b4>)
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff fe8a 	bl	8005c10 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005efc:	e004      	b.n	8005f08 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f81a 	bl	8005f38 <tcp_close_shutdown_fin>
 8005f04:	4603      	mov	r3, r0
 8005f06:	e000      	b.n	8005f0a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bdb0      	pop	{r4, r5, r7, pc}
 8005f12:	bf00      	nop
 8005f14:	0800fa00 	.word	0x0800fa00
 8005f18:	0800fad4 	.word	0x0800fad4
 8005f1c:	0800fa44 	.word	0x0800fa44
 8005f20:	0800faf4 	.word	0x0800faf4
 8005f24:	2000829c 	.word	0x2000829c
 8005f28:	200082a4 	.word	0x200082a4
 8005f2c:	200082dc 	.word	0x200082dc
 8005f30:	20008294 	.word	0x20008294
 8005f34:	20008298 	.word	0x20008298

08005f38 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d106      	bne.n	8005f54 <tcp_close_shutdown_fin+0x1c>
 8005f46:	4b2e      	ldr	r3, [pc, #184]	@ (8006000 <tcp_close_shutdown_fin+0xc8>)
 8005f48:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8005f4c:	492d      	ldr	r1, [pc, #180]	@ (8006004 <tcp_close_shutdown_fin+0xcc>)
 8005f4e:	482e      	ldr	r0, [pc, #184]	@ (8006008 <tcp_close_shutdown_fin+0xd0>)
 8005f50:	f008 f8da 	bl	800e108 <iprintf>

  switch (pcb->state) {
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	7d1b      	ldrb	r3, [r3, #20]
 8005f58:	2b07      	cmp	r3, #7
 8005f5a:	d020      	beq.n	8005f9e <tcp_close_shutdown_fin+0x66>
 8005f5c:	2b07      	cmp	r3, #7
 8005f5e:	dc2b      	bgt.n	8005fb8 <tcp_close_shutdown_fin+0x80>
 8005f60:	2b03      	cmp	r3, #3
 8005f62:	d002      	beq.n	8005f6a <tcp_close_shutdown_fin+0x32>
 8005f64:	2b04      	cmp	r3, #4
 8005f66:	d00d      	beq.n	8005f84 <tcp_close_shutdown_fin+0x4c>
 8005f68:	e026      	b.n	8005fb8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f003 fee2 	bl	8009d34 <tcp_send_fin>
 8005f70:	4603      	mov	r3, r0
 8005f72:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d11f      	bne.n	8005fbc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2205      	movs	r2, #5
 8005f80:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005f82:	e01b      	b.n	8005fbc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f003 fed5 	bl	8009d34 <tcp_send_fin>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d114      	bne.n	8005fc0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2205      	movs	r2, #5
 8005f9a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005f9c:	e010      	b.n	8005fc0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f003 fec8 	bl	8009d34 <tcp_send_fin>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d109      	bne.n	8005fc4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2209      	movs	r2, #9
 8005fb4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005fb6:	e005      	b.n	8005fc4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	e01c      	b.n	8005ff6 <tcp_close_shutdown_fin+0xbe>
      break;
 8005fbc:	bf00      	nop
 8005fbe:	e002      	b.n	8005fc6 <tcp_close_shutdown_fin+0x8e>
      break;
 8005fc0:	bf00      	nop
 8005fc2:	e000      	b.n	8005fc6 <tcp_close_shutdown_fin+0x8e>
      break;
 8005fc4:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d103      	bne.n	8005fd6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f003 ffee 	bl	8009fb0 <tcp_output>
 8005fd4:	e00d      	b.n	8005ff2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fde:	d108      	bne.n	8005ff2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	8b5b      	ldrh	r3, [r3, #26]
 8005fe4:	f043 0308 	orr.w	r3, r3, #8
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e001      	b.n	8005ff6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	0800fa00 	.word	0x0800fa00
 8006004:	0800fab0 	.word	0x0800fab0
 8006008:	0800fa44 	.word	0x0800fa44

0800600c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d109      	bne.n	800602e <tcp_close+0x22>
 800601a:	4b0f      	ldr	r3, [pc, #60]	@ (8006058 <tcp_close+0x4c>)
 800601c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8006020:	490e      	ldr	r1, [pc, #56]	@ (800605c <tcp_close+0x50>)
 8006022:	480f      	ldr	r0, [pc, #60]	@ (8006060 <tcp_close+0x54>)
 8006024:	f008 f870 	bl	800e108 <iprintf>
 8006028:	f06f 030f 	mvn.w	r3, #15
 800602c:	e00f      	b.n	800604e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	7d1b      	ldrb	r3, [r3, #20]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d006      	beq.n	8006044 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	8b5b      	ldrh	r3, [r3, #26]
 800603a:	f043 0310 	orr.w	r3, r3, #16
 800603e:	b29a      	uxth	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006044:	2101      	movs	r1, #1
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff fe94 	bl	8005d74 <tcp_close_shutdown>
 800604c:	4603      	mov	r3, r0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	0800fa00 	.word	0x0800fa00
 800605c:	0800fb10 	.word	0x0800fb10
 8006060:	0800fa44 	.word	0x0800fa44

08006064 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b08e      	sub	sp, #56	@ 0x38
 8006068:	af04      	add	r7, sp, #16
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d107      	bne.n	8006084 <tcp_abandon+0x20>
 8006074:	4b52      	ldr	r3, [pc, #328]	@ (80061c0 <tcp_abandon+0x15c>)
 8006076:	f240 223d 	movw	r2, #573	@ 0x23d
 800607a:	4952      	ldr	r1, [pc, #328]	@ (80061c4 <tcp_abandon+0x160>)
 800607c:	4852      	ldr	r0, [pc, #328]	@ (80061c8 <tcp_abandon+0x164>)
 800607e:	f008 f843 	bl	800e108 <iprintf>
 8006082:	e099      	b.n	80061b8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	7d1b      	ldrb	r3, [r3, #20]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d106      	bne.n	800609a <tcp_abandon+0x36>
 800608c:	4b4c      	ldr	r3, [pc, #304]	@ (80061c0 <tcp_abandon+0x15c>)
 800608e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8006092:	494e      	ldr	r1, [pc, #312]	@ (80061cc <tcp_abandon+0x168>)
 8006094:	484c      	ldr	r0, [pc, #304]	@ (80061c8 <tcp_abandon+0x164>)
 8006096:	f008 f837 	bl	800e108 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	7d1b      	ldrb	r3, [r3, #20]
 800609e:	2b0a      	cmp	r3, #10
 80060a0:	d107      	bne.n	80060b2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	484a      	ldr	r0, [pc, #296]	@ (80061d0 <tcp_abandon+0x16c>)
 80060a6:	f000 ffc5 	bl	8007034 <tcp_pcb_remove>
    tcp_free(pcb);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7ff fdb0 	bl	8005c10 <tcp_free>
 80060b0:	e082      	b.n	80061b8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80060b2:	2300      	movs	r3, #0
 80060b4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80060b6:	2300      	movs	r3, #0
 80060b8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060be:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060cc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	7d1b      	ldrb	r3, [r3, #20]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d126      	bne.n	800612a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	8adb      	ldrh	r3, [r3, #22]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d02e      	beq.n	8006142 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80060e4:	4b3b      	ldr	r3, [pc, #236]	@ (80061d4 <tcp_abandon+0x170>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d105      	bne.n	80060fa <tcp_abandon+0x96>
 80060ee:	4b39      	ldr	r3, [pc, #228]	@ (80061d4 <tcp_abandon+0x170>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	4a37      	ldr	r2, [pc, #220]	@ (80061d4 <tcp_abandon+0x170>)
 80060f6:	6013      	str	r3, [r2, #0]
 80060f8:	e013      	b.n	8006122 <tcp_abandon+0xbe>
 80060fa:	4b36      	ldr	r3, [pc, #216]	@ (80061d4 <tcp_abandon+0x170>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	61fb      	str	r3, [r7, #28]
 8006100:	e00c      	b.n	800611c <tcp_abandon+0xb8>
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	429a      	cmp	r2, r3
 800610a:	d104      	bne.n	8006116 <tcp_abandon+0xb2>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68da      	ldr	r2, [r3, #12]
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	60da      	str	r2, [r3, #12]
 8006114:	e005      	b.n	8006122 <tcp_abandon+0xbe>
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	61fb      	str	r3, [r7, #28]
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1ef      	bne.n	8006102 <tcp_abandon+0x9e>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	60da      	str	r2, [r3, #12]
 8006128:	e00b      	b.n	8006142 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	8adb      	ldrh	r3, [r3, #22]
 8006132:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006134:	6879      	ldr	r1, [r7, #4]
 8006136:	4828      	ldr	r0, [pc, #160]	@ (80061d8 <tcp_abandon+0x174>)
 8006138:	f000 ff7c 	bl	8007034 <tcp_pcb_remove>
 800613c:	4b27      	ldr	r3, [pc, #156]	@ (80061dc <tcp_abandon+0x178>)
 800613e:	2201      	movs	r2, #1
 8006140:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006146:	2b00      	cmp	r3, #0
 8006148:	d004      	beq.n	8006154 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800614e:	4618      	mov	r0, r3
 8006150:	f000 fd1e 	bl	8006b90 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d004      	beq.n	8006166 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006160:	4618      	mov	r0, r3
 8006162:	f000 fd15 	bl	8006b90 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800616a:	2b00      	cmp	r3, #0
 800616c:	d004      	beq.n	8006178 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006172:	4618      	mov	r0, r3
 8006174:	f000 fd0c 	bl	8006b90 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00e      	beq.n	800619c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800617e:	6879      	ldr	r1, [r7, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3304      	adds	r3, #4
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	8b12      	ldrh	r2, [r2, #24]
 8006188:	9202      	str	r2, [sp, #8]
 800618a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800618c:	9201      	str	r2, [sp, #4]
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	460b      	mov	r3, r1
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	69b9      	ldr	r1, [r7, #24]
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f004 fcbe 	bl	800ab18 <tcp_rst>
    }
    last_state = pcb->state;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	7d1b      	ldrb	r3, [r3, #20]
 80061a0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7ff fd34 	bl	8005c10 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d004      	beq.n	80061b8 <tcp_abandon+0x154>
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f06f 010c 	mvn.w	r1, #12
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	4798      	blx	r3
  }
}
 80061b8:	3728      	adds	r7, #40	@ 0x28
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	0800fa00 	.word	0x0800fa00
 80061c4:	0800fb44 	.word	0x0800fb44
 80061c8:	0800fa44 	.word	0x0800fa44
 80061cc:	0800fb60 	.word	0x0800fb60
 80061d0:	200082a0 	.word	0x200082a0
 80061d4:	20008294 	.word	0x20008294
 80061d8:	2000829c 	.word	0x2000829c
 80061dc:	200082a4 	.word	0x200082a4

080061e0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80061e8:	2101      	movs	r1, #1
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7ff ff3a 	bl	8006064 <tcp_abandon>
}
 80061f0:	bf00      	nop
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d106      	bne.n	8006214 <tcp_update_rcv_ann_wnd+0x1c>
 8006206:	4b25      	ldr	r3, [pc, #148]	@ (800629c <tcp_update_rcv_ann_wnd+0xa4>)
 8006208:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800620c:	4924      	ldr	r1, [pc, #144]	@ (80062a0 <tcp_update_rcv_ann_wnd+0xa8>)
 800620e:	4825      	ldr	r0, [pc, #148]	@ (80062a4 <tcp_update_rcv_ann_wnd+0xac>)
 8006210:	f007 ff7a 	bl	800e108 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800621c:	4413      	add	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8006228:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800622c:	bf28      	it	cs
 800622e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8006232:	b292      	uxth	r2, r2
 8006234:	4413      	add	r3, r2
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	db08      	blt.n	8006250 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	e020      	b.n	8006292 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	dd03      	ble.n	8006266 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006264:	e014      	b.n	8006290 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006278:	d306      	bcc.n	8006288 <tcp_update_rcv_ann_wnd+0x90>
 800627a:	4b08      	ldr	r3, [pc, #32]	@ (800629c <tcp_update_rcv_ann_wnd+0xa4>)
 800627c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8006280:	4909      	ldr	r1, [pc, #36]	@ (80062a8 <tcp_update_rcv_ann_wnd+0xb0>)
 8006282:	4808      	ldr	r0, [pc, #32]	@ (80062a4 <tcp_update_rcv_ann_wnd+0xac>)
 8006284:	f007 ff40 	bl	800e108 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	b29a      	uxth	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8006290:	2300      	movs	r3, #0
  }
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	0800fa00 	.word	0x0800fa00
 80062a0:	0800fc5c 	.word	0x0800fc5c
 80062a4:	0800fa44 	.word	0x0800fa44
 80062a8:	0800fc80 	.word	0x0800fc80

080062ac <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	460b      	mov	r3, r1
 80062b6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d107      	bne.n	80062ce <tcp_recved+0x22>
 80062be:	4b1f      	ldr	r3, [pc, #124]	@ (800633c <tcp_recved+0x90>)
 80062c0:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80062c4:	491e      	ldr	r1, [pc, #120]	@ (8006340 <tcp_recved+0x94>)
 80062c6:	481f      	ldr	r0, [pc, #124]	@ (8006344 <tcp_recved+0x98>)
 80062c8:	f007 ff1e 	bl	800e108 <iprintf>
 80062cc:	e032      	b.n	8006334 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	7d1b      	ldrb	r3, [r3, #20]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d106      	bne.n	80062e4 <tcp_recved+0x38>
 80062d6:	4b19      	ldr	r3, [pc, #100]	@ (800633c <tcp_recved+0x90>)
 80062d8:	f240 32d2 	movw	r2, #978	@ 0x3d2
 80062dc:	491a      	ldr	r1, [pc, #104]	@ (8006348 <tcp_recved+0x9c>)
 80062de:	4819      	ldr	r0, [pc, #100]	@ (8006344 <tcp_recved+0x98>)
 80062e0:	f007 ff12 	bl	800e108 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80062e8:	887b      	ldrh	r3, [r7, #2]
 80062ea:	4413      	add	r3, r2
 80062ec:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80062ee:	89fb      	ldrh	r3, [r7, #14]
 80062f0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80062f4:	d804      	bhi.n	8006300 <tcp_recved+0x54>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062fa:	89fa      	ldrh	r2, [r7, #14]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d204      	bcs.n	800630a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8006306:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006308:	e002      	b.n	8006310 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	89fa      	ldrh	r2, [r7, #14]
 800630e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7ff ff71 	bl	80061f8 <tcp_update_rcv_ann_wnd>
 8006316:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800631e:	d309      	bcc.n	8006334 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	8b5b      	ldrh	r3, [r3, #26]
 8006324:	f043 0302 	orr.w	r3, r3, #2
 8006328:	b29a      	uxth	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f003 fe3e 	bl	8009fb0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	0800fa00 	.word	0x0800fa00
 8006340:	0800fc9c 	.word	0x0800fc9c
 8006344:	0800fa44 	.word	0x0800fa44
 8006348:	0800fcb4 	.word	0x0800fcb4

0800634c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800634c:	b5b0      	push	{r4, r5, r7, lr}
 800634e:	b090      	sub	sp, #64	@ 0x40
 8006350:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8006358:	4b95      	ldr	r3, [pc, #596]	@ (80065b0 <tcp_slowtmr+0x264>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3301      	adds	r3, #1
 800635e:	4a94      	ldr	r2, [pc, #592]	@ (80065b0 <tcp_slowtmr+0x264>)
 8006360:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006362:	4b94      	ldr	r3, [pc, #592]	@ (80065b4 <tcp_slowtmr+0x268>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	3301      	adds	r3, #1
 8006368:	b2da      	uxtb	r2, r3
 800636a:	4b92      	ldr	r3, [pc, #584]	@ (80065b4 <tcp_slowtmr+0x268>)
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	e000      	b.n	8006372 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8006370:	bf00      	nop
  prev = NULL;
 8006372:	2300      	movs	r3, #0
 8006374:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8006376:	4b90      	ldr	r3, [pc, #576]	@ (80065b8 <tcp_slowtmr+0x26c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800637c:	e29d      	b.n	80068ba <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800637e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006380:	7d1b      	ldrb	r3, [r3, #20]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d106      	bne.n	8006394 <tcp_slowtmr+0x48>
 8006386:	4b8d      	ldr	r3, [pc, #564]	@ (80065bc <tcp_slowtmr+0x270>)
 8006388:	f240 42be 	movw	r2, #1214	@ 0x4be
 800638c:	498c      	ldr	r1, [pc, #560]	@ (80065c0 <tcp_slowtmr+0x274>)
 800638e:	488d      	ldr	r0, [pc, #564]	@ (80065c4 <tcp_slowtmr+0x278>)
 8006390:	f007 feba 	bl	800e108 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006396:	7d1b      	ldrb	r3, [r3, #20]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d106      	bne.n	80063aa <tcp_slowtmr+0x5e>
 800639c:	4b87      	ldr	r3, [pc, #540]	@ (80065bc <tcp_slowtmr+0x270>)
 800639e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80063a2:	4989      	ldr	r1, [pc, #548]	@ (80065c8 <tcp_slowtmr+0x27c>)
 80063a4:	4887      	ldr	r0, [pc, #540]	@ (80065c4 <tcp_slowtmr+0x278>)
 80063a6:	f007 feaf 	bl	800e108 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80063aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ac:	7d1b      	ldrb	r3, [r3, #20]
 80063ae:	2b0a      	cmp	r3, #10
 80063b0:	d106      	bne.n	80063c0 <tcp_slowtmr+0x74>
 80063b2:	4b82      	ldr	r3, [pc, #520]	@ (80065bc <tcp_slowtmr+0x270>)
 80063b4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80063b8:	4984      	ldr	r1, [pc, #528]	@ (80065cc <tcp_slowtmr+0x280>)
 80063ba:	4882      	ldr	r0, [pc, #520]	@ (80065c4 <tcp_slowtmr+0x278>)
 80063bc:	f007 fea4 	bl	800e108 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80063c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c2:	7f9a      	ldrb	r2, [r3, #30]
 80063c4:	4b7b      	ldr	r3, [pc, #492]	@ (80065b4 <tcp_slowtmr+0x268>)
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d105      	bne.n	80063d8 <tcp_slowtmr+0x8c>
      prev = pcb;
 80063cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80063d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80063d6:	e270      	b.n	80068ba <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 80063d8:	4b76      	ldr	r3, [pc, #472]	@ (80065b4 <tcp_slowtmr+0x268>)
 80063da:	781a      	ldrb	r2, [r3, #0]
 80063dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063de:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80063e0:	2300      	movs	r3, #0
 80063e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80063ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ee:	7d1b      	ldrb	r3, [r3, #20]
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d10a      	bne.n	800640a <tcp_slowtmr+0xbe>
 80063f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063fa:	2b05      	cmp	r3, #5
 80063fc:	d905      	bls.n	800640a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80063fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006402:	3301      	adds	r3, #1
 8006404:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006408:	e11e      	b.n	8006648 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800640a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800640c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006410:	2b0b      	cmp	r3, #11
 8006412:	d905      	bls.n	8006420 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8006414:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006418:	3301      	adds	r3, #1
 800641a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800641e:	e113      	b.n	8006648 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8006420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006422:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006426:	2b00      	cmp	r3, #0
 8006428:	d075      	beq.n	8006516 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800642a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800642e:	2b00      	cmp	r3, #0
 8006430:	d006      	beq.n	8006440 <tcp_slowtmr+0xf4>
 8006432:	4b62      	ldr	r3, [pc, #392]	@ (80065bc <tcp_slowtmr+0x270>)
 8006434:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8006438:	4965      	ldr	r1, [pc, #404]	@ (80065d0 <tcp_slowtmr+0x284>)
 800643a:	4862      	ldr	r0, [pc, #392]	@ (80065c4 <tcp_slowtmr+0x278>)
 800643c:	f007 fe64 	bl	800e108 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d106      	bne.n	8006456 <tcp_slowtmr+0x10a>
 8006448:	4b5c      	ldr	r3, [pc, #368]	@ (80065bc <tcp_slowtmr+0x270>)
 800644a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800644e:	4961      	ldr	r1, [pc, #388]	@ (80065d4 <tcp_slowtmr+0x288>)
 8006450:	485c      	ldr	r0, [pc, #368]	@ (80065c4 <tcp_slowtmr+0x278>)
 8006452:	f007 fe59 	bl	800e108 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006458:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800645c:	2b0b      	cmp	r3, #11
 800645e:	d905      	bls.n	800646c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8006460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006464:	3301      	adds	r3, #1
 8006466:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800646a:	e0ed      	b.n	8006648 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800646c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800646e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006472:	3b01      	subs	r3, #1
 8006474:	4a58      	ldr	r2, [pc, #352]	@ (80065d8 <tcp_slowtmr+0x28c>)
 8006476:	5cd3      	ldrb	r3, [r2, r3]
 8006478:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800647a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800647c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006480:	7c7a      	ldrb	r2, [r7, #17]
 8006482:	429a      	cmp	r2, r3
 8006484:	d907      	bls.n	8006496 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8006486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006488:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800648c:	3301      	adds	r3, #1
 800648e:	b2da      	uxtb	r2, r3
 8006490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006492:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8006496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006498:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800649c:	7c7a      	ldrb	r2, [r7, #17]
 800649e:	429a      	cmp	r2, r3
 80064a0:	f200 80d2 	bhi.w	8006648 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80064a4:	2301      	movs	r3, #1
 80064a6:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80064a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d108      	bne.n	80064c4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80064b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80064b4:	f004 fc24 	bl	800ad00 <tcp_zero_window_probe>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d014      	beq.n	80064e8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80064be:	2300      	movs	r3, #0
 80064c0:	623b      	str	r3, [r7, #32]
 80064c2:	e011      	b.n	80064e8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80064c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80064ca:	4619      	mov	r1, r3
 80064cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80064ce:	f003 fae9 	bl	8009aa4 <tcp_split_unsent_seg>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d107      	bne.n	80064e8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80064d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80064da:	f003 fd69 	bl	8009fb0 <tcp_output>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 80064e4:	2300      	movs	r3, #0
 80064e6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 80ac 	beq.w	8006648 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80064f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80064f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064fa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80064fe:	2b06      	cmp	r3, #6
 8006500:	f200 80a2 	bhi.w	8006648 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8006504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006506:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800650a:	3301      	adds	r3, #1
 800650c:	b2da      	uxtb	r2, r3
 800650e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006510:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8006514:	e098      	b.n	8006648 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006518:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800651c:	2b00      	cmp	r3, #0
 800651e:	db0f      	blt.n	8006540 <tcp_slowtmr+0x1f4>
 8006520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006522:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006526:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800652a:	4293      	cmp	r3, r2
 800652c:	d008      	beq.n	8006540 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800652e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006530:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006534:	b29b      	uxth	r3, r3
 8006536:	3301      	adds	r3, #1
 8006538:	b29b      	uxth	r3, r3
 800653a:	b21a      	sxth	r2, r3
 800653c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800653e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8006540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006542:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8006546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006548:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800654c:	429a      	cmp	r2, r3
 800654e:	db7b      	blt.n	8006648 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006550:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006552:	f004 f821 	bl	800a598 <tcp_rexmit_rto_prepare>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d007      	beq.n	800656c <tcp_slowtmr+0x220>
 800655c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800655e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006560:	2b00      	cmp	r3, #0
 8006562:	d171      	bne.n	8006648 <tcp_slowtmr+0x2fc>
 8006564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006568:	2b00      	cmp	r3, #0
 800656a:	d06d      	beq.n	8006648 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800656c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656e:	7d1b      	ldrb	r3, [r3, #20]
 8006570:	2b02      	cmp	r3, #2
 8006572:	d03a      	beq.n	80065ea <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006576:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800657a:	2b0c      	cmp	r3, #12
 800657c:	bf28      	it	cs
 800657e:	230c      	movcs	r3, #12
 8006580:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006584:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8006588:	10db      	asrs	r3, r3, #3
 800658a:	b21b      	sxth	r3, r3
 800658c:	461a      	mov	r2, r3
 800658e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006590:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8006594:	4413      	add	r3, r2
 8006596:	7efa      	ldrb	r2, [r7, #27]
 8006598:	4910      	ldr	r1, [pc, #64]	@ (80065dc <tcp_slowtmr+0x290>)
 800659a:	5c8a      	ldrb	r2, [r1, r2]
 800659c:	4093      	lsls	r3, r2
 800659e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80065a6:	4293      	cmp	r3, r2
 80065a8:	dc1a      	bgt.n	80065e0 <tcp_slowtmr+0x294>
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	b21a      	sxth	r2, r3
 80065ae:	e019      	b.n	80065e4 <tcp_slowtmr+0x298>
 80065b0:	20008290 	.word	0x20008290
 80065b4:	200082a6 	.word	0x200082a6
 80065b8:	2000829c 	.word	0x2000829c
 80065bc:	0800fa00 	.word	0x0800fa00
 80065c0:	0800fd44 	.word	0x0800fd44
 80065c4:	0800fa44 	.word	0x0800fa44
 80065c8:	0800fd70 	.word	0x0800fd70
 80065cc:	0800fd9c 	.word	0x0800fd9c
 80065d0:	0800fdcc 	.word	0x0800fdcc
 80065d4:	0800fe00 	.word	0x0800fe00
 80065d8:	080119d0 	.word	0x080119d0
 80065dc:	080119c0 	.word	0x080119c0
 80065e0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80065e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80065ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ec:	2200      	movs	r2, #0
 80065ee:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80065f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80065f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80065fc:	4293      	cmp	r3, r2
 80065fe:	bf28      	it	cs
 8006600:	4613      	movcs	r3, r2
 8006602:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006604:	8a7b      	ldrh	r3, [r7, #18]
 8006606:	085b      	lsrs	r3, r3, #1
 8006608:	b29a      	uxth	r2, r3
 800660a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800660c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006612:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8006616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006618:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800661a:	005b      	lsls	r3, r3, #1
 800661c:	b29b      	uxth	r3, r3
 800661e:	429a      	cmp	r2, r3
 8006620:	d206      	bcs.n	8006630 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006624:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	b29a      	uxth	r2, r3
 800662a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800662c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8006630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006632:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8006634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006636:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800663a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800663c:	2200      	movs	r2, #0
 800663e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8006642:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006644:	f004 f818 	bl	800a678 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8006648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664a:	7d1b      	ldrb	r3, [r3, #20]
 800664c:	2b06      	cmp	r3, #6
 800664e:	d111      	bne.n	8006674 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8006650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006652:	8b5b      	ldrh	r3, [r3, #26]
 8006654:	f003 0310 	and.w	r3, r3, #16
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00b      	beq.n	8006674 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800665c:	4b9c      	ldr	r3, [pc, #624]	@ (80068d0 <tcp_slowtmr+0x584>)
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b28      	cmp	r3, #40	@ 0x28
 8006668:	d904      	bls.n	8006674 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800666a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800666e:	3301      	adds	r3, #1
 8006670:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006676:	7a5b      	ldrb	r3, [r3, #9]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b00      	cmp	r3, #0
 800667e:	d04a      	beq.n	8006716 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8006680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006682:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006684:	2b04      	cmp	r3, #4
 8006686:	d003      	beq.n	8006690 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8006688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800668a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800668c:	2b07      	cmp	r3, #7
 800668e:	d142      	bne.n	8006716 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006690:	4b8f      	ldr	r3, [pc, #572]	@ (80068d0 <tcp_slowtmr+0x584>)
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800669a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800669c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80066a0:	4b8c      	ldr	r3, [pc, #560]	@ (80068d4 <tcp_slowtmr+0x588>)
 80066a2:	440b      	add	r3, r1
 80066a4:	498c      	ldr	r1, [pc, #560]	@ (80068d8 <tcp_slowtmr+0x58c>)
 80066a6:	fba1 1303 	umull	r1, r3, r1, r3
 80066aa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d90a      	bls.n	80066c6 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 80066b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066b4:	3301      	adds	r3, #1
 80066b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80066ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066be:	3301      	adds	r3, #1
 80066c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80066c4:	e027      	b.n	8006716 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80066c6:	4b82      	ldr	r3, [pc, #520]	@ (80068d0 <tcp_slowtmr+0x584>)
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80066d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80066d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80066dc:	4618      	mov	r0, r3
 80066de:	4b7f      	ldr	r3, [pc, #508]	@ (80068dc <tcp_slowtmr+0x590>)
 80066e0:	fb00 f303 	mul.w	r3, r0, r3
 80066e4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80066e6:	497c      	ldr	r1, [pc, #496]	@ (80068d8 <tcp_slowtmr+0x58c>)
 80066e8:	fba1 1303 	umull	r1, r3, r1, r3
 80066ec:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d911      	bls.n	8006716 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80066f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066f4:	f004 fac4 	bl	800ac80 <tcp_keepalive>
 80066f8:	4603      	mov	r3, r0
 80066fa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80066fe:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006702:	2b00      	cmp	r3, #0
 8006704:	d107      	bne.n	8006716 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8006706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006708:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800670c:	3301      	adds	r3, #1
 800670e:	b2da      	uxtb	r2, r3
 8006710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006712:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8006716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800671a:	2b00      	cmp	r3, #0
 800671c:	d011      	beq.n	8006742 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800671e:	4b6c      	ldr	r3, [pc, #432]	@ (80068d0 <tcp_slowtmr+0x584>)
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	1ad2      	subs	r2, r2, r3
 8006728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800672a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800672e:	4619      	mov	r1, r3
 8006730:	460b      	mov	r3, r1
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	440b      	add	r3, r1
 8006736:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006738:	429a      	cmp	r2, r3
 800673a:	d302      	bcc.n	8006742 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800673c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800673e:	f000 fddd 	bl	80072fc <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8006742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006744:	7d1b      	ldrb	r3, [r3, #20]
 8006746:	2b03      	cmp	r3, #3
 8006748:	d10b      	bne.n	8006762 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800674a:	4b61      	ldr	r3, [pc, #388]	@ (80068d0 <tcp_slowtmr+0x584>)
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b28      	cmp	r3, #40	@ 0x28
 8006756:	d904      	bls.n	8006762 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8006758:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800675c:	3301      	adds	r3, #1
 800675e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8006762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006764:	7d1b      	ldrb	r3, [r3, #20]
 8006766:	2b09      	cmp	r3, #9
 8006768:	d10b      	bne.n	8006782 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800676a:	4b59      	ldr	r3, [pc, #356]	@ (80068d0 <tcp_slowtmr+0x584>)
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2bf0      	cmp	r3, #240	@ 0xf0
 8006776:	d904      	bls.n	8006782 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8006778:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800677c:	3301      	adds	r3, #1
 800677e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8006782:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006786:	2b00      	cmp	r3, #0
 8006788:	d060      	beq.n	800684c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800678a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800678c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006790:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8006792:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006794:	f000 fbfe 	bl	8006f94 <tcp_pcb_purge>
      if (prev != NULL) {
 8006798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800679a:	2b00      	cmp	r3, #0
 800679c:	d010      	beq.n	80067c0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800679e:	4b50      	ldr	r3, [pc, #320]	@ (80068e0 <tcp_slowtmr+0x594>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d106      	bne.n	80067b6 <tcp_slowtmr+0x46a>
 80067a8:	4b4e      	ldr	r3, [pc, #312]	@ (80068e4 <tcp_slowtmr+0x598>)
 80067aa:	f240 526d 	movw	r2, #1389	@ 0x56d
 80067ae:	494e      	ldr	r1, [pc, #312]	@ (80068e8 <tcp_slowtmr+0x59c>)
 80067b0:	484e      	ldr	r0, [pc, #312]	@ (80068ec <tcp_slowtmr+0x5a0>)
 80067b2:	f007 fca9 	bl	800e108 <iprintf>
        prev->next = pcb->next;
 80067b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067bc:	60da      	str	r2, [r3, #12]
 80067be:	e00f      	b.n	80067e0 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80067c0:	4b47      	ldr	r3, [pc, #284]	@ (80068e0 <tcp_slowtmr+0x594>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d006      	beq.n	80067d8 <tcp_slowtmr+0x48c>
 80067ca:	4b46      	ldr	r3, [pc, #280]	@ (80068e4 <tcp_slowtmr+0x598>)
 80067cc:	f240 5271 	movw	r2, #1393	@ 0x571
 80067d0:	4947      	ldr	r1, [pc, #284]	@ (80068f0 <tcp_slowtmr+0x5a4>)
 80067d2:	4846      	ldr	r0, [pc, #280]	@ (80068ec <tcp_slowtmr+0x5a0>)
 80067d4:	f007 fc98 	bl	800e108 <iprintf>
        tcp_active_pcbs = pcb->next;
 80067d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	4a40      	ldr	r2, [pc, #256]	@ (80068e0 <tcp_slowtmr+0x594>)
 80067de:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80067e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d013      	beq.n	8006810 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80067e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ea:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80067ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ee:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80067f0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80067f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f4:	3304      	adds	r3, #4
 80067f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067f8:	8ad2      	ldrh	r2, [r2, #22]
 80067fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067fc:	8b09      	ldrh	r1, [r1, #24]
 80067fe:	9102      	str	r1, [sp, #8]
 8006800:	9201      	str	r2, [sp, #4]
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	462b      	mov	r3, r5
 8006806:	4622      	mov	r2, r4
 8006808:	4601      	mov	r1, r0
 800680a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800680c:	f004 f984 	bl	800ab18 <tcp_rst>
      err_arg = pcb->callback_arg;
 8006810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006818:	7d1b      	ldrb	r3, [r3, #20]
 800681a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800681c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800681e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8006826:	6838      	ldr	r0, [r7, #0]
 8006828:	f7ff f9f2 	bl	8005c10 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800682c:	4b31      	ldr	r3, [pc, #196]	@ (80068f4 <tcp_slowtmr+0x5a8>)
 800682e:	2200      	movs	r2, #0
 8006830:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d004      	beq.n	8006842 <tcp_slowtmr+0x4f6>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f06f 010c 	mvn.w	r1, #12
 800683e:	68b8      	ldr	r0, [r7, #8]
 8006840:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006842:	4b2c      	ldr	r3, [pc, #176]	@ (80068f4 <tcp_slowtmr+0x5a8>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d037      	beq.n	80068ba <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800684a:	e592      	b.n	8006372 <tcp_slowtmr+0x26>
      prev = pcb;
 800684c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800684e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8006850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8006856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006858:	7f1b      	ldrb	r3, [r3, #28]
 800685a:	3301      	adds	r3, #1
 800685c:	b2da      	uxtb	r2, r3
 800685e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006860:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006864:	7f1a      	ldrb	r2, [r3, #28]
 8006866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006868:	7f5b      	ldrb	r3, [r3, #29]
 800686a:	429a      	cmp	r2, r3
 800686c:	d325      	bcc.n	80068ba <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800686e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006870:	2200      	movs	r2, #0
 8006872:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8006874:	4b1f      	ldr	r3, [pc, #124]	@ (80068f4 <tcp_slowtmr+0x5a8>)
 8006876:	2200      	movs	r2, #0
 8006878:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800687a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00b      	beq.n	800689c <tcp_slowtmr+0x550>
 8006884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006886:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800688a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800688c:	6912      	ldr	r2, [r2, #16]
 800688e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006890:	4610      	mov	r0, r2
 8006892:	4798      	blx	r3
 8006894:	4603      	mov	r3, r0
 8006896:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800689a:	e002      	b.n	80068a2 <tcp_slowtmr+0x556>
 800689c:	2300      	movs	r3, #0
 800689e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80068a2:	4b14      	ldr	r3, [pc, #80]	@ (80068f4 <tcp_slowtmr+0x5a8>)
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f47f ad62 	bne.w	8006370 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80068ac:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d102      	bne.n	80068ba <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80068b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068b6:	f003 fb7b 	bl	8009fb0 <tcp_output>
  while (pcb != NULL) {
 80068ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f47f ad5e 	bne.w	800637e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80068c6:	4b0c      	ldr	r3, [pc, #48]	@ (80068f8 <tcp_slowtmr+0x5ac>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80068cc:	e069      	b.n	80069a2 <tcp_slowtmr+0x656>
 80068ce:	bf00      	nop
 80068d0:	20008290 	.word	0x20008290
 80068d4:	000a4cb8 	.word	0x000a4cb8
 80068d8:	10624dd3 	.word	0x10624dd3
 80068dc:	000124f8 	.word	0x000124f8
 80068e0:	2000829c 	.word	0x2000829c
 80068e4:	0800fa00 	.word	0x0800fa00
 80068e8:	0800fe38 	.word	0x0800fe38
 80068ec:	0800fa44 	.word	0x0800fa44
 80068f0:	0800fe64 	.word	0x0800fe64
 80068f4:	200082a4 	.word	0x200082a4
 80068f8:	200082a0 	.word	0x200082a0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80068fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068fe:	7d1b      	ldrb	r3, [r3, #20]
 8006900:	2b0a      	cmp	r3, #10
 8006902:	d006      	beq.n	8006912 <tcp_slowtmr+0x5c6>
 8006904:	4b2b      	ldr	r3, [pc, #172]	@ (80069b4 <tcp_slowtmr+0x668>)
 8006906:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800690a:	492b      	ldr	r1, [pc, #172]	@ (80069b8 <tcp_slowtmr+0x66c>)
 800690c:	482b      	ldr	r0, [pc, #172]	@ (80069bc <tcp_slowtmr+0x670>)
 800690e:	f007 fbfb 	bl	800e108 <iprintf>
    pcb_remove = 0;
 8006912:	2300      	movs	r3, #0
 8006914:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006918:	4b29      	ldr	r3, [pc, #164]	@ (80069c0 <tcp_slowtmr+0x674>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2bf0      	cmp	r3, #240	@ 0xf0
 8006924:	d904      	bls.n	8006930 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8006926:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800692a:	3301      	adds	r3, #1
 800692c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006934:	2b00      	cmp	r3, #0
 8006936:	d02f      	beq.n	8006998 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006938:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800693a:	f000 fb2b 	bl	8006f94 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800693e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006940:	2b00      	cmp	r3, #0
 8006942:	d010      	beq.n	8006966 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006944:	4b1f      	ldr	r3, [pc, #124]	@ (80069c4 <tcp_slowtmr+0x678>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800694a:	429a      	cmp	r2, r3
 800694c:	d106      	bne.n	800695c <tcp_slowtmr+0x610>
 800694e:	4b19      	ldr	r3, [pc, #100]	@ (80069b4 <tcp_slowtmr+0x668>)
 8006950:	f240 52af 	movw	r2, #1455	@ 0x5af
 8006954:	491c      	ldr	r1, [pc, #112]	@ (80069c8 <tcp_slowtmr+0x67c>)
 8006956:	4819      	ldr	r0, [pc, #100]	@ (80069bc <tcp_slowtmr+0x670>)
 8006958:	f007 fbd6 	bl	800e108 <iprintf>
        prev->next = pcb->next;
 800695c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800695e:	68da      	ldr	r2, [r3, #12]
 8006960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006962:	60da      	str	r2, [r3, #12]
 8006964:	e00f      	b.n	8006986 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006966:	4b17      	ldr	r3, [pc, #92]	@ (80069c4 <tcp_slowtmr+0x678>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800696c:	429a      	cmp	r2, r3
 800696e:	d006      	beq.n	800697e <tcp_slowtmr+0x632>
 8006970:	4b10      	ldr	r3, [pc, #64]	@ (80069b4 <tcp_slowtmr+0x668>)
 8006972:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8006976:	4915      	ldr	r1, [pc, #84]	@ (80069cc <tcp_slowtmr+0x680>)
 8006978:	4810      	ldr	r0, [pc, #64]	@ (80069bc <tcp_slowtmr+0x670>)
 800697a:	f007 fbc5 	bl	800e108 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800697e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	4a10      	ldr	r2, [pc, #64]	@ (80069c4 <tcp_slowtmr+0x678>)
 8006984:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006988:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800698a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8006990:	69f8      	ldr	r0, [r7, #28]
 8006992:	f7ff f93d 	bl	8005c10 <tcp_free>
 8006996:	e004      	b.n	80069a2 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8006998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800699a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800699c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80069a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1a9      	bne.n	80068fc <tcp_slowtmr+0x5b0>
    }
  }
}
 80069a8:	bf00      	nop
 80069aa:	bf00      	nop
 80069ac:	3730      	adds	r7, #48	@ 0x30
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bdb0      	pop	{r4, r5, r7, pc}
 80069b2:	bf00      	nop
 80069b4:	0800fa00 	.word	0x0800fa00
 80069b8:	0800fe90 	.word	0x0800fe90
 80069bc:	0800fa44 	.word	0x0800fa44
 80069c0:	20008290 	.word	0x20008290
 80069c4:	200082a0 	.word	0x200082a0
 80069c8:	0800fec0 	.word	0x0800fec0
 80069cc:	0800fee8 	.word	0x0800fee8

080069d0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80069d6:	4b2d      	ldr	r3, [pc, #180]	@ (8006a8c <tcp_fasttmr+0xbc>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	3301      	adds	r3, #1
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	4b2b      	ldr	r3, [pc, #172]	@ (8006a8c <tcp_fasttmr+0xbc>)
 80069e0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80069e2:	4b2b      	ldr	r3, [pc, #172]	@ (8006a90 <tcp_fasttmr+0xc0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80069e8:	e048      	b.n	8006a7c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	7f9a      	ldrb	r2, [r3, #30]
 80069ee:	4b27      	ldr	r3, [pc, #156]	@ (8006a8c <tcp_fasttmr+0xbc>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d03f      	beq.n	8006a76 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80069f6:	4b25      	ldr	r3, [pc, #148]	@ (8006a8c <tcp_fasttmr+0xbc>)
 80069f8:	781a      	ldrb	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	8b5b      	ldrh	r3, [r3, #26]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d010      	beq.n	8006a2c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	8b5b      	ldrh	r3, [r3, #26]
 8006a0e:	f043 0302 	orr.w	r3, r3, #2
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f003 fac9 	bl	8009fb0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	8b5b      	ldrh	r3, [r3, #26]
 8006a22:	f023 0303 	bic.w	r3, r3, #3
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	8b5b      	ldrh	r3, [r3, #26]
 8006a30:	f003 0308 	and.w	r3, r3, #8
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d009      	beq.n	8006a4c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	8b5b      	ldrh	r3, [r3, #26]
 8006a3c:	f023 0308 	bic.w	r3, r3, #8
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7ff fa76 	bl	8005f38 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8006a94 <tcp_fasttmr+0xc4>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f819 	bl	8006a98 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006a66:	4b0b      	ldr	r3, [pc, #44]	@ (8006a94 <tcp_fasttmr+0xc4>)
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d000      	beq.n	8006a70 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006a6e:	e7b8      	b.n	80069e2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	607b      	str	r3, [r7, #4]
 8006a74:	e002      	b.n	8006a7c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1b3      	bne.n	80069ea <tcp_fasttmr+0x1a>
    }
  }
}
 8006a82:	bf00      	nop
 8006a84:	bf00      	nop
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	200082a6 	.word	0x200082a6
 8006a90:	2000829c 	.word	0x2000829c
 8006a94:	200082a4 	.word	0x200082a4

08006a98 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006a98:	b590      	push	{r4, r7, lr}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d109      	bne.n	8006aba <tcp_process_refused_data+0x22>
 8006aa6:	4b37      	ldr	r3, [pc, #220]	@ (8006b84 <tcp_process_refused_data+0xec>)
 8006aa8:	f240 6209 	movw	r2, #1545	@ 0x609
 8006aac:	4936      	ldr	r1, [pc, #216]	@ (8006b88 <tcp_process_refused_data+0xf0>)
 8006aae:	4837      	ldr	r0, [pc, #220]	@ (8006b8c <tcp_process_refused_data+0xf4>)
 8006ab0:	f007 fb2a 	bl	800e108 <iprintf>
 8006ab4:	f06f 030f 	mvn.w	r3, #15
 8006ab8:	e060      	b.n	8006b7c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006abe:	7b5b      	ldrb	r3, [r3, #13]
 8006ac0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ac6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00b      	beq.n	8006af0 <tcp_process_refused_data+0x58>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6918      	ldr	r0, [r3, #16]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	6879      	ldr	r1, [r7, #4]
 8006ae8:	47a0      	blx	r4
 8006aea:	4603      	mov	r3, r0
 8006aec:	73fb      	strb	r3, [r7, #15]
 8006aee:	e007      	b.n	8006b00 <tcp_process_refused_data+0x68>
 8006af0:	2300      	movs	r3, #0
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	6879      	ldr	r1, [r7, #4]
 8006af6:	2000      	movs	r0, #0
 8006af8:	f000 f8a4 	bl	8006c44 <tcp_recv_null>
 8006afc:	4603      	mov	r3, r0
 8006afe:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d12a      	bne.n	8006b5e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006b08:	7bbb      	ldrb	r3, [r7, #14]
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d033      	beq.n	8006b7a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b16:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006b1a:	d005      	beq.n	8006b28 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b20:	3301      	adds	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00b      	beq.n	8006b4a <tcp_process_refused_data+0xb2>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6918      	ldr	r0, [r3, #16]
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	2200      	movs	r2, #0
 8006b40:	6879      	ldr	r1, [r7, #4]
 8006b42:	47a0      	blx	r4
 8006b44:	4603      	mov	r3, r0
 8006b46:	73fb      	strb	r3, [r7, #15]
 8006b48:	e001      	b.n	8006b4e <tcp_process_refused_data+0xb6>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b52:	f113 0f0d 	cmn.w	r3, #13
 8006b56:	d110      	bne.n	8006b7a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006b58:	f06f 030c 	mvn.w	r3, #12
 8006b5c:	e00e      	b.n	8006b7c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b62:	f113 0f0d 	cmn.w	r3, #13
 8006b66:	d102      	bne.n	8006b6e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006b68:	f06f 030c 	mvn.w	r3, #12
 8006b6c:	e006      	b.n	8006b7c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8006b74:	f06f 0304 	mvn.w	r3, #4
 8006b78:	e000      	b.n	8006b7c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd90      	pop	{r4, r7, pc}
 8006b84:	0800fa00 	.word	0x0800fa00
 8006b88:	0800ff10 	.word	0x0800ff10
 8006b8c:	0800fa44 	.word	0x0800fa44

08006b90 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006b98:	e007      	b.n	8006baa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f80a 	bl	8006bba <tcp_seg_free>
    seg = next;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1f4      	bne.n	8006b9a <tcp_segs_free+0xa>
  }
}
 8006bb0:	bf00      	nop
 8006bb2:	bf00      	nop
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b082      	sub	sp, #8
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00c      	beq.n	8006be2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d004      	beq.n	8006bda <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7fe fcd9 	bl	800558c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006bda:	6879      	ldr	r1, [r7, #4]
 8006bdc:	2003      	movs	r0, #3
 8006bde:	f7fd fe7f 	bl	80048e0 <memp_free>
  }
}
 8006be2:	bf00      	nop
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d106      	bne.n	8006c08 <tcp_seg_copy+0x1c>
 8006bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8006c38 <tcp_seg_copy+0x4c>)
 8006bfc:	f240 6282 	movw	r2, #1666	@ 0x682
 8006c00:	490e      	ldr	r1, [pc, #56]	@ (8006c3c <tcp_seg_copy+0x50>)
 8006c02:	480f      	ldr	r0, [pc, #60]	@ (8006c40 <tcp_seg_copy+0x54>)
 8006c04:	f007 fa80 	bl	800e108 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006c08:	2003      	movs	r0, #3
 8006c0a:	f7fd fdf9 	bl	8004800 <memp_malloc>
 8006c0e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <tcp_seg_copy+0x2e>
    return NULL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	e00a      	b.n	8006c30 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006c1a:	2210      	movs	r2, #16
 8006c1c:	6879      	ldr	r1, [r7, #4]
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f007 fb4d 	bl	800e2be <memcpy>
  pbuf_ref(cseg->p);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7fe fd4f 	bl	80056cc <pbuf_ref>
  return cseg;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	0800fa00 	.word	0x0800fa00
 8006c3c:	0800ff54 	.word	0x0800ff54
 8006c40:	0800fa44 	.word	0x0800fa44

08006c44 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
 8006c50:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d109      	bne.n	8006c6c <tcp_recv_null+0x28>
 8006c58:	4b12      	ldr	r3, [pc, #72]	@ (8006ca4 <tcp_recv_null+0x60>)
 8006c5a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8006c5e:	4912      	ldr	r1, [pc, #72]	@ (8006ca8 <tcp_recv_null+0x64>)
 8006c60:	4812      	ldr	r0, [pc, #72]	@ (8006cac <tcp_recv_null+0x68>)
 8006c62:	f007 fa51 	bl	800e108 <iprintf>
 8006c66:	f06f 030f 	mvn.w	r3, #15
 8006c6a:	e016      	b.n	8006c9a <tcp_recv_null+0x56>

  if (p != NULL) {
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d009      	beq.n	8006c86 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	891b      	ldrh	r3, [r3, #8]
 8006c76:	4619      	mov	r1, r3
 8006c78:	68b8      	ldr	r0, [r7, #8]
 8006c7a:	f7ff fb17 	bl	80062ac <tcp_recved>
    pbuf_free(p);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7fe fc84 	bl	800558c <pbuf_free>
 8006c84:	e008      	b.n	8006c98 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006c86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d104      	bne.n	8006c98 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006c8e:	68b8      	ldr	r0, [r7, #8]
 8006c90:	f7ff f9bc 	bl	800600c <tcp_close>
 8006c94:	4603      	mov	r3, r0
 8006c96:	e000      	b.n	8006c9a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	0800fa00 	.word	0x0800fa00
 8006ca8:	0800ff70 	.word	0x0800ff70
 8006cac:	0800fa44 	.word	0x0800fa44

08006cb0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	db01      	blt.n	8006cc6 <tcp_kill_prio+0x16>
 8006cc2:	79fb      	ldrb	r3, [r7, #7]
 8006cc4:	e000      	b.n	8006cc8 <tcp_kill_prio+0x18>
 8006cc6:	237f      	movs	r3, #127	@ 0x7f
 8006cc8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006cca:	7afb      	ldrb	r3, [r7, #11]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d034      	beq.n	8006d3a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006cd0:	7afb      	ldrb	r3, [r7, #11]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006cde:	4b19      	ldr	r3, [pc, #100]	@ (8006d44 <tcp_kill_prio+0x94>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	e01f      	b.n	8006d26 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	7d5b      	ldrb	r3, [r3, #21]
 8006cea:	7afa      	ldrb	r2, [r7, #11]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d80c      	bhi.n	8006d0a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006cf4:	7afa      	ldrb	r2, [r7, #11]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d112      	bne.n	8006d20 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006cfa:	4b13      	ldr	r3, [pc, #76]	@ (8006d48 <tcp_kill_prio+0x98>)
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d80a      	bhi.n	8006d20 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8006d48 <tcp_kill_prio+0x98>)
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	7d5b      	ldrb	r3, [r3, #21]
 8006d1e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	617b      	str	r3, [r7, #20]
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1dc      	bne.n	8006ce6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d004      	beq.n	8006d3c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006d32:	6938      	ldr	r0, [r7, #16]
 8006d34:	f7ff fa54 	bl	80061e0 <tcp_abort>
 8006d38:	e000      	b.n	8006d3c <tcp_kill_prio+0x8c>
    return;
 8006d3a:	bf00      	nop
  }
}
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	2000829c 	.word	0x2000829c
 8006d48:	20008290 	.word	0x20008290

08006d4c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	4603      	mov	r3, r0
 8006d54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006d56:	79fb      	ldrb	r3, [r7, #7]
 8006d58:	2b08      	cmp	r3, #8
 8006d5a:	d009      	beq.n	8006d70 <tcp_kill_state+0x24>
 8006d5c:	79fb      	ldrb	r3, [r7, #7]
 8006d5e:	2b09      	cmp	r3, #9
 8006d60:	d006      	beq.n	8006d70 <tcp_kill_state+0x24>
 8006d62:	4b1a      	ldr	r3, [pc, #104]	@ (8006dcc <tcp_kill_state+0x80>)
 8006d64:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8006d68:	4919      	ldr	r1, [pc, #100]	@ (8006dd0 <tcp_kill_state+0x84>)
 8006d6a:	481a      	ldr	r0, [pc, #104]	@ (8006dd4 <tcp_kill_state+0x88>)
 8006d6c:	f007 f9cc 	bl	800e108 <iprintf>

  inactivity = 0;
 8006d70:	2300      	movs	r3, #0
 8006d72:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d78:	4b17      	ldr	r3, [pc, #92]	@ (8006dd8 <tcp_kill_state+0x8c>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	e017      	b.n	8006db0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	7d1b      	ldrb	r3, [r3, #20]
 8006d84:	79fa      	ldrb	r2, [r7, #7]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d10f      	bne.n	8006daa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006d8a:	4b14      	ldr	r3, [pc, #80]	@ (8006ddc <tcp_kill_state+0x90>)
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d807      	bhi.n	8006daa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006d9a:	4b10      	ldr	r3, [pc, #64]	@ (8006ddc <tcp_kill_state+0x90>)
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	617b      	str	r3, [r7, #20]
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1e4      	bne.n	8006d80 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	6938      	ldr	r0, [r7, #16]
 8006dc0:	f7ff f950 	bl	8006064 <tcp_abandon>
  }
}
 8006dc4:	bf00      	nop
 8006dc6:	3718      	adds	r7, #24
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	0800fa00 	.word	0x0800fa00
 8006dd0:	0800ff8c 	.word	0x0800ff8c
 8006dd4:	0800fa44 	.word	0x0800fa44
 8006dd8:	2000829c 	.word	0x2000829c
 8006ddc:	20008290 	.word	0x20008290

08006de0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006dea:	2300      	movs	r3, #0
 8006dec:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006dee:	4b12      	ldr	r3, [pc, #72]	@ (8006e38 <tcp_kill_timewait+0x58>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	e012      	b.n	8006e1c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006df6:	4b11      	ldr	r3, [pc, #68]	@ (8006e3c <tcp_kill_timewait+0x5c>)
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d807      	bhi.n	8006e16 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006e06:	4b0d      	ldr	r3, [pc, #52]	@ (8006e3c <tcp_kill_timewait+0x5c>)
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1e9      	bne.n	8006df6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d002      	beq.n	8006e2e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006e28:	68b8      	ldr	r0, [r7, #8]
 8006e2a:	f7ff f9d9 	bl	80061e0 <tcp_abort>
  }
}
 8006e2e:	bf00      	nop
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	200082a0 	.word	0x200082a0
 8006e3c:	20008290 	.word	0x20008290

08006e40 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006e46:	4b10      	ldr	r3, [pc, #64]	@ (8006e88 <tcp_handle_closepend+0x48>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006e4c:	e014      	b.n	8006e78 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	8b5b      	ldrh	r3, [r3, #26]
 8006e58:	f003 0308 	and.w	r3, r3, #8
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d009      	beq.n	8006e74 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	8b5b      	ldrh	r3, [r3, #26]
 8006e64:	f023 0308 	bic.w	r3, r3, #8
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7ff f862 	bl	8005f38 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1e7      	bne.n	8006e4e <tcp_handle_closepend+0xe>
  }
}
 8006e7e:	bf00      	nop
 8006e80:	bf00      	nop
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	2000829c 	.word	0x2000829c

08006e8c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	4603      	mov	r3, r0
 8006e94:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006e96:	2001      	movs	r0, #1
 8006e98:	f7fd fcb2 	bl	8004800 <memp_malloc>
 8006e9c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d126      	bne.n	8006ef2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006ea4:	f7ff ffcc 	bl	8006e40 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006ea8:	f7ff ff9a 	bl	8006de0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006eac:	2001      	movs	r0, #1
 8006eae:	f7fd fca7 	bl	8004800 <memp_malloc>
 8006eb2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d11b      	bne.n	8006ef2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006eba:	2009      	movs	r0, #9
 8006ebc:	f7ff ff46 	bl	8006d4c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006ec0:	2001      	movs	r0, #1
 8006ec2:	f7fd fc9d 	bl	8004800 <memp_malloc>
 8006ec6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d111      	bne.n	8006ef2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006ece:	2008      	movs	r0, #8
 8006ed0:	f7ff ff3c 	bl	8006d4c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006ed4:	2001      	movs	r0, #1
 8006ed6:	f7fd fc93 	bl	8004800 <memp_malloc>
 8006eda:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d107      	bne.n	8006ef2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006ee2:	79fb      	ldrb	r3, [r7, #7]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7ff fee3 	bl	8006cb0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006eea:	2001      	movs	r0, #1
 8006eec:	f7fd fc88 	bl	8004800 <memp_malloc>
 8006ef0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d03f      	beq.n	8006f78 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006ef8:	229c      	movs	r2, #156	@ 0x9c
 8006efa:	2100      	movs	r1, #0
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f007 f968 	bl	800e1d2 <memset>
    pcb->prio = prio;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	79fa      	ldrb	r2, [r7, #7]
 8006f06:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8006f0e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8006f18:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	22ff      	movs	r2, #255	@ 0xff
 8006f26:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8006f2e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2206      	movs	r2, #6
 8006f34:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2206      	movs	r2, #6
 8006f3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006f44:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8006f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f84 <tcp_alloc+0xf8>)
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006f56:	4b0c      	ldr	r3, [pc, #48]	@ (8006f88 <tcp_alloc+0xfc>)
 8006f58:	781a      	ldrb	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8006f64:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4a08      	ldr	r2, [pc, #32]	@ (8006f8c <tcp_alloc+0x100>)
 8006f6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4a07      	ldr	r2, [pc, #28]	@ (8006f90 <tcp_alloc+0x104>)
 8006f74:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006f78:	68fb      	ldr	r3, [r7, #12]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	20008290 	.word	0x20008290
 8006f88:	200082a6 	.word	0x200082a6
 8006f8c:	08006c45 	.word	0x08006c45
 8006f90:	006ddd00 	.word	0x006ddd00

08006f94 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d107      	bne.n	8006fb2 <tcp_pcb_purge+0x1e>
 8006fa2:	4b21      	ldr	r3, [pc, #132]	@ (8007028 <tcp_pcb_purge+0x94>)
 8006fa4:	f640 0251 	movw	r2, #2129	@ 0x851
 8006fa8:	4920      	ldr	r1, [pc, #128]	@ (800702c <tcp_pcb_purge+0x98>)
 8006faa:	4821      	ldr	r0, [pc, #132]	@ (8007030 <tcp_pcb_purge+0x9c>)
 8006fac:	f007 f8ac 	bl	800e108 <iprintf>
 8006fb0:	e037      	b.n	8007022 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	7d1b      	ldrb	r3, [r3, #20]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d033      	beq.n	8007022 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006fbe:	2b0a      	cmp	r3, #10
 8006fc0:	d02f      	beq.n	8007022 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d02b      	beq.n	8007022 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d007      	beq.n	8006fe2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fe fad8 	bl	800558c <pbuf_free>
      pcb->refused_data = NULL;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d002      	beq.n	8006ff0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f986 	bl	80072fc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006ff6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff fdc7 	bl	8006b90 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007006:	4618      	mov	r0, r3
 8007008:	f7ff fdc2 	bl	8006b90 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	0800fa00 	.word	0x0800fa00
 800702c:	0801004c 	.word	0x0801004c
 8007030:	0800fa44 	.word	0x0800fa44

08007034 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d106      	bne.n	8007052 <tcp_pcb_remove+0x1e>
 8007044:	4b3e      	ldr	r3, [pc, #248]	@ (8007140 <tcp_pcb_remove+0x10c>)
 8007046:	f640 0283 	movw	r2, #2179	@ 0x883
 800704a:	493e      	ldr	r1, [pc, #248]	@ (8007144 <tcp_pcb_remove+0x110>)
 800704c:	483e      	ldr	r0, [pc, #248]	@ (8007148 <tcp_pcb_remove+0x114>)
 800704e:	f007 f85b 	bl	800e108 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d106      	bne.n	8007066 <tcp_pcb_remove+0x32>
 8007058:	4b39      	ldr	r3, [pc, #228]	@ (8007140 <tcp_pcb_remove+0x10c>)
 800705a:	f640 0284 	movw	r2, #2180	@ 0x884
 800705e:	493b      	ldr	r1, [pc, #236]	@ (800714c <tcp_pcb_remove+0x118>)
 8007060:	4839      	ldr	r0, [pc, #228]	@ (8007148 <tcp_pcb_remove+0x114>)
 8007062:	f007 f851 	bl	800e108 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	429a      	cmp	r2, r3
 800706e:	d105      	bne.n	800707c <tcp_pcb_remove+0x48>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68da      	ldr	r2, [r3, #12]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	e013      	b.n	80070a4 <tcp_pcb_remove+0x70>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	60fb      	str	r3, [r7, #12]
 8007082:	e00c      	b.n	800709e <tcp_pcb_remove+0x6a>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d104      	bne.n	8007098 <tcp_pcb_remove+0x64>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	60da      	str	r2, [r3, #12]
 8007096:	e005      	b.n	80070a4 <tcp_pcb_remove+0x70>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	60fb      	str	r3, [r7, #12]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1ef      	bne.n	8007084 <tcp_pcb_remove+0x50>
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	2200      	movs	r2, #0
 80070a8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80070aa:	6838      	ldr	r0, [r7, #0]
 80070ac:	f7ff ff72 	bl	8006f94 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	7d1b      	ldrb	r3, [r3, #20]
 80070b4:	2b0a      	cmp	r3, #10
 80070b6:	d013      	beq.n	80070e0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d00f      	beq.n	80070e0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	8b5b      	ldrh	r3, [r3, #26]
 80070c4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d009      	beq.n	80070e0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	8b5b      	ldrh	r3, [r3, #26]
 80070d0:	f043 0302 	orr.w	r3, r3, #2
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80070da:	6838      	ldr	r0, [r7, #0]
 80070dc:	f002 ff68 	bl	8009fb0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	7d1b      	ldrb	r3, [r3, #20]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d020      	beq.n	800712a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d006      	beq.n	80070fe <tcp_pcb_remove+0xca>
 80070f0:	4b13      	ldr	r3, [pc, #76]	@ (8007140 <tcp_pcb_remove+0x10c>)
 80070f2:	f640 0293 	movw	r2, #2195	@ 0x893
 80070f6:	4916      	ldr	r1, [pc, #88]	@ (8007150 <tcp_pcb_remove+0x11c>)
 80070f8:	4813      	ldr	r0, [pc, #76]	@ (8007148 <tcp_pcb_remove+0x114>)
 80070fa:	f007 f805 	bl	800e108 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007102:	2b00      	cmp	r3, #0
 8007104:	d006      	beq.n	8007114 <tcp_pcb_remove+0xe0>
 8007106:	4b0e      	ldr	r3, [pc, #56]	@ (8007140 <tcp_pcb_remove+0x10c>)
 8007108:	f640 0294 	movw	r2, #2196	@ 0x894
 800710c:	4911      	ldr	r1, [pc, #68]	@ (8007154 <tcp_pcb_remove+0x120>)
 800710e:	480e      	ldr	r0, [pc, #56]	@ (8007148 <tcp_pcb_remove+0x114>)
 8007110:	f006 fffa 	bl	800e108 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007118:	2b00      	cmp	r3, #0
 800711a:	d006      	beq.n	800712a <tcp_pcb_remove+0xf6>
 800711c:	4b08      	ldr	r3, [pc, #32]	@ (8007140 <tcp_pcb_remove+0x10c>)
 800711e:	f640 0296 	movw	r2, #2198	@ 0x896
 8007122:	490d      	ldr	r1, [pc, #52]	@ (8007158 <tcp_pcb_remove+0x124>)
 8007124:	4808      	ldr	r0, [pc, #32]	@ (8007148 <tcp_pcb_remove+0x114>)
 8007126:	f006 ffef 	bl	800e108 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2200      	movs	r2, #0
 800712e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2200      	movs	r2, #0
 8007134:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007136:	bf00      	nop
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	0800fa00 	.word	0x0800fa00
 8007144:	08010068 	.word	0x08010068
 8007148:	0800fa44 	.word	0x0800fa44
 800714c:	08010084 	.word	0x08010084
 8007150:	080100a4 	.word	0x080100a4
 8007154:	080100bc 	.word	0x080100bc
 8007158:	080100d8 	.word	0x080100d8

0800715c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d106      	bne.n	8007178 <tcp_next_iss+0x1c>
 800716a:	4b0a      	ldr	r3, [pc, #40]	@ (8007194 <tcp_next_iss+0x38>)
 800716c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8007170:	4909      	ldr	r1, [pc, #36]	@ (8007198 <tcp_next_iss+0x3c>)
 8007172:	480a      	ldr	r0, [pc, #40]	@ (800719c <tcp_next_iss+0x40>)
 8007174:	f006 ffc8 	bl	800e108 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007178:	4b09      	ldr	r3, [pc, #36]	@ (80071a0 <tcp_next_iss+0x44>)
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	4b09      	ldr	r3, [pc, #36]	@ (80071a4 <tcp_next_iss+0x48>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4413      	add	r3, r2
 8007182:	4a07      	ldr	r2, [pc, #28]	@ (80071a0 <tcp_next_iss+0x44>)
 8007184:	6013      	str	r3, [r2, #0]
  return iss;
 8007186:	4b06      	ldr	r3, [pc, #24]	@ (80071a0 <tcp_next_iss+0x44>)
 8007188:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	0800fa00 	.word	0x0800fa00
 8007198:	080100f0 	.word	0x080100f0
 800719c:	0800fa44 	.word	0x0800fa44
 80071a0:	20000024 	.word	0x20000024
 80071a4:	20008290 	.word	0x20008290

080071a8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4603      	mov	r3, r0
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d106      	bne.n	80071ca <tcp_eff_send_mss_netif+0x22>
 80071bc:	4b14      	ldr	r3, [pc, #80]	@ (8007210 <tcp_eff_send_mss_netif+0x68>)
 80071be:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80071c2:	4914      	ldr	r1, [pc, #80]	@ (8007214 <tcp_eff_send_mss_netif+0x6c>)
 80071c4:	4814      	ldr	r0, [pc, #80]	@ (8007218 <tcp_eff_send_mss_netif+0x70>)
 80071c6:	f006 ff9f 	bl	800e108 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80071d0:	89fb      	ldrh	r3, [r7, #14]
 80071d2:	e019      	b.n	8007208 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80071d8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80071da:	8afb      	ldrh	r3, [r7, #22]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d012      	beq.n	8007206 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80071e0:	2328      	movs	r3, #40	@ 0x28
 80071e2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80071e4:	8afa      	ldrh	r2, [r7, #22]
 80071e6:	8abb      	ldrh	r3, [r7, #20]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d904      	bls.n	80071f6 <tcp_eff_send_mss_netif+0x4e>
 80071ec:	8afa      	ldrh	r2, [r7, #22]
 80071ee:	8abb      	ldrh	r3, [r7, #20]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	e000      	b.n	80071f8 <tcp_eff_send_mss_netif+0x50>
 80071f6:	2300      	movs	r3, #0
 80071f8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80071fa:	8a7a      	ldrh	r2, [r7, #18]
 80071fc:	89fb      	ldrh	r3, [r7, #14]
 80071fe:	4293      	cmp	r3, r2
 8007200:	bf28      	it	cs
 8007202:	4613      	movcs	r3, r2
 8007204:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007206:	89fb      	ldrh	r3, [r7, #14]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3718      	adds	r7, #24
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	0800fa00 	.word	0x0800fa00
 8007214:	0801010c 	.word	0x0801010c
 8007218:	0800fa44 	.word	0x0800fa44

0800721c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d119      	bne.n	8007264 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007230:	4b10      	ldr	r3, [pc, #64]	@ (8007274 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007232:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8007236:	4910      	ldr	r1, [pc, #64]	@ (8007278 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007238:	4810      	ldr	r0, [pc, #64]	@ (800727c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800723a:	f006 ff65 	bl	800e108 <iprintf>

  while (pcb != NULL) {
 800723e:	e011      	b.n	8007264 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	429a      	cmp	r2, r3
 800724a:	d108      	bne.n	800725e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f7fe ffc4 	bl	80061e0 <tcp_abort>
      pcb = next;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	e002      	b.n	8007264 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1ea      	bne.n	8007240 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800726a:	bf00      	nop
 800726c:	bf00      	nop
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	0800fa00 	.word	0x0800fa00
 8007278:	08010134 	.word	0x08010134
 800727c:	0800fa44 	.word	0x0800fa44

08007280 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d02a      	beq.n	80072e6 <tcp_netif_ip_addr_changed+0x66>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d026      	beq.n	80072e6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007298:	4b15      	ldr	r3, [pc, #84]	@ (80072f0 <tcp_netif_ip_addr_changed+0x70>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4619      	mov	r1, r3
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7ff ffbc 	bl	800721c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80072a4:	4b13      	ldr	r3, [pc, #76]	@ (80072f4 <tcp_netif_ip_addr_changed+0x74>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4619      	mov	r1, r3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7ff ffb6 	bl	800721c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d017      	beq.n	80072e6 <tcp_netif_ip_addr_changed+0x66>
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d013      	beq.n	80072e6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80072be:	4b0e      	ldr	r3, [pc, #56]	@ (80072f8 <tcp_netif_ip_addr_changed+0x78>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	60fb      	str	r3, [r7, #12]
 80072c4:	e00c      	b.n	80072e0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d103      	bne.n	80072da <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1ef      	bne.n	80072c6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80072e6:	bf00      	nop
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	2000829c 	.word	0x2000829c
 80072f4:	20008294 	.word	0x20008294
 80072f8:	20008298 	.word	0x20008298

080072fc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007308:	2b00      	cmp	r3, #0
 800730a:	d007      	beq.n	800731c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007310:	4618      	mov	r0, r3
 8007312:	f7ff fc3d 	bl	8006b90 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800731c:	bf00      	nop
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007324:	b590      	push	{r4, r7, lr}
 8007326:	b08d      	sub	sp, #52	@ 0x34
 8007328:	af04      	add	r7, sp, #16
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d105      	bne.n	8007340 <tcp_input+0x1c>
 8007334:	4b9b      	ldr	r3, [pc, #620]	@ (80075a4 <tcp_input+0x280>)
 8007336:	2283      	movs	r2, #131	@ 0x83
 8007338:	499b      	ldr	r1, [pc, #620]	@ (80075a8 <tcp_input+0x284>)
 800733a:	489c      	ldr	r0, [pc, #624]	@ (80075ac <tcp_input+0x288>)
 800733c:	f006 fee4 	bl	800e108 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	4a9a      	ldr	r2, [pc, #616]	@ (80075b0 <tcp_input+0x28c>)
 8007346:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	895b      	ldrh	r3, [r3, #10]
 800734c:	2b13      	cmp	r3, #19
 800734e:	f240 83d1 	bls.w	8007af4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007352:	4b98      	ldr	r3, [pc, #608]	@ (80075b4 <tcp_input+0x290>)
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	4a97      	ldr	r2, [pc, #604]	@ (80075b4 <tcp_input+0x290>)
 8007358:	6812      	ldr	r2, [r2, #0]
 800735a:	4611      	mov	r1, r2
 800735c:	4618      	mov	r0, r3
 800735e:	f005 fe7d 	bl	800d05c <ip4_addr_isbroadcast_u32>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	f040 83c7 	bne.w	8007af8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800736a:	4b92      	ldr	r3, [pc, #584]	@ (80075b4 <tcp_input+0x290>)
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007372:	2be0      	cmp	r3, #224	@ 0xe0
 8007374:	f000 83c0 	beq.w	8007af8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007378:	4b8d      	ldr	r3, [pc, #564]	@ (80075b0 <tcp_input+0x28c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	899b      	ldrh	r3, [r3, #12]
 800737e:	b29b      	uxth	r3, r3
 8007380:	4618      	mov	r0, r3
 8007382:	f7fc fdc5 	bl	8003f10 <lwip_htons>
 8007386:	4603      	mov	r3, r0
 8007388:	0b1b      	lsrs	r3, r3, #12
 800738a:	b29b      	uxth	r3, r3
 800738c:	b2db      	uxtb	r3, r3
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007392:	7cbb      	ldrb	r3, [r7, #18]
 8007394:	2b13      	cmp	r3, #19
 8007396:	f240 83b1 	bls.w	8007afc <tcp_input+0x7d8>
 800739a:	7cbb      	ldrb	r3, [r7, #18]
 800739c:	b29a      	uxth	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	891b      	ldrh	r3, [r3, #8]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	f200 83aa 	bhi.w	8007afc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80073a8:	7cbb      	ldrb	r3, [r7, #18]
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	3b14      	subs	r3, #20
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	4b81      	ldr	r3, [pc, #516]	@ (80075b8 <tcp_input+0x294>)
 80073b2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80073b4:	4b81      	ldr	r3, [pc, #516]	@ (80075bc <tcp_input+0x298>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	895a      	ldrh	r2, [r3, #10]
 80073be:	7cbb      	ldrb	r3, [r7, #18]
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d309      	bcc.n	80073da <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80073c6:	4b7c      	ldr	r3, [pc, #496]	@ (80075b8 <tcp_input+0x294>)
 80073c8:	881a      	ldrh	r2, [r3, #0]
 80073ca:	4b7d      	ldr	r3, [pc, #500]	@ (80075c0 <tcp_input+0x29c>)
 80073cc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80073ce:	7cbb      	ldrb	r3, [r7, #18]
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7fe f854 	bl	8005480 <pbuf_remove_header>
 80073d8:	e04e      	b.n	8007478 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d105      	bne.n	80073ee <tcp_input+0xca>
 80073e2:	4b70      	ldr	r3, [pc, #448]	@ (80075a4 <tcp_input+0x280>)
 80073e4:	22c2      	movs	r2, #194	@ 0xc2
 80073e6:	4977      	ldr	r1, [pc, #476]	@ (80075c4 <tcp_input+0x2a0>)
 80073e8:	4870      	ldr	r0, [pc, #448]	@ (80075ac <tcp_input+0x288>)
 80073ea:	f006 fe8d 	bl	800e108 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80073ee:	2114      	movs	r1, #20
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7fe f845 	bl	8005480 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	895a      	ldrh	r2, [r3, #10]
 80073fa:	4b71      	ldr	r3, [pc, #452]	@ (80075c0 <tcp_input+0x29c>)
 80073fc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80073fe:	4b6e      	ldr	r3, [pc, #440]	@ (80075b8 <tcp_input+0x294>)
 8007400:	881a      	ldrh	r2, [r3, #0]
 8007402:	4b6f      	ldr	r3, [pc, #444]	@ (80075c0 <tcp_input+0x29c>)
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800740a:	4b6d      	ldr	r3, [pc, #436]	@ (80075c0 <tcp_input+0x29c>)
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f7fe f835 	bl	8005480 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	895b      	ldrh	r3, [r3, #10]
 800741c:	8a3a      	ldrh	r2, [r7, #16]
 800741e:	429a      	cmp	r2, r3
 8007420:	f200 836e 	bhi.w	8007b00 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	4a64      	ldr	r2, [pc, #400]	@ (80075bc <tcp_input+0x298>)
 800742c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	8a3a      	ldrh	r2, [r7, #16]
 8007434:	4611      	mov	r1, r2
 8007436:	4618      	mov	r0, r3
 8007438:	f7fe f822 	bl	8005480 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	891a      	ldrh	r2, [r3, #8]
 8007440:	8a3b      	ldrh	r3, [r7, #16]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	b29a      	uxth	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	895b      	ldrh	r3, [r3, #10]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d005      	beq.n	800745e <tcp_input+0x13a>
 8007452:	4b54      	ldr	r3, [pc, #336]	@ (80075a4 <tcp_input+0x280>)
 8007454:	22df      	movs	r2, #223	@ 0xdf
 8007456:	495c      	ldr	r1, [pc, #368]	@ (80075c8 <tcp_input+0x2a4>)
 8007458:	4854      	ldr	r0, [pc, #336]	@ (80075ac <tcp_input+0x288>)
 800745a:	f006 fe55 	bl	800e108 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	891a      	ldrh	r2, [r3, #8]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	891b      	ldrh	r3, [r3, #8]
 8007468:	429a      	cmp	r2, r3
 800746a:	d005      	beq.n	8007478 <tcp_input+0x154>
 800746c:	4b4d      	ldr	r3, [pc, #308]	@ (80075a4 <tcp_input+0x280>)
 800746e:	22e0      	movs	r2, #224	@ 0xe0
 8007470:	4956      	ldr	r1, [pc, #344]	@ (80075cc <tcp_input+0x2a8>)
 8007472:	484e      	ldr	r0, [pc, #312]	@ (80075ac <tcp_input+0x288>)
 8007474:	f006 fe48 	bl	800e108 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007478:	4b4d      	ldr	r3, [pc, #308]	@ (80075b0 <tcp_input+0x28c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	881b      	ldrh	r3, [r3, #0]
 800747e:	b29b      	uxth	r3, r3
 8007480:	4a4b      	ldr	r2, [pc, #300]	@ (80075b0 <tcp_input+0x28c>)
 8007482:	6814      	ldr	r4, [r2, #0]
 8007484:	4618      	mov	r0, r3
 8007486:	f7fc fd43 	bl	8003f10 <lwip_htons>
 800748a:	4603      	mov	r3, r0
 800748c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800748e:	4b48      	ldr	r3, [pc, #288]	@ (80075b0 <tcp_input+0x28c>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	885b      	ldrh	r3, [r3, #2]
 8007494:	b29b      	uxth	r3, r3
 8007496:	4a46      	ldr	r2, [pc, #280]	@ (80075b0 <tcp_input+0x28c>)
 8007498:	6814      	ldr	r4, [r2, #0]
 800749a:	4618      	mov	r0, r3
 800749c:	f7fc fd38 	bl	8003f10 <lwip_htons>
 80074a0:	4603      	mov	r3, r0
 80074a2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80074a4:	4b42      	ldr	r3, [pc, #264]	@ (80075b0 <tcp_input+0x28c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	4a41      	ldr	r2, [pc, #260]	@ (80075b0 <tcp_input+0x28c>)
 80074ac:	6814      	ldr	r4, [r2, #0]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fc fd43 	bl	8003f3a <lwip_htonl>
 80074b4:	4603      	mov	r3, r0
 80074b6:	6063      	str	r3, [r4, #4]
 80074b8:	6863      	ldr	r3, [r4, #4]
 80074ba:	4a45      	ldr	r2, [pc, #276]	@ (80075d0 <tcp_input+0x2ac>)
 80074bc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80074be:	4b3c      	ldr	r3, [pc, #240]	@ (80075b0 <tcp_input+0x28c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	4a3a      	ldr	r2, [pc, #232]	@ (80075b0 <tcp_input+0x28c>)
 80074c6:	6814      	ldr	r4, [r2, #0]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7fc fd36 	bl	8003f3a <lwip_htonl>
 80074ce:	4603      	mov	r3, r0
 80074d0:	60a3      	str	r3, [r4, #8]
 80074d2:	68a3      	ldr	r3, [r4, #8]
 80074d4:	4a3f      	ldr	r2, [pc, #252]	@ (80075d4 <tcp_input+0x2b0>)
 80074d6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80074d8:	4b35      	ldr	r3, [pc, #212]	@ (80075b0 <tcp_input+0x28c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	89db      	ldrh	r3, [r3, #14]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	4a33      	ldr	r2, [pc, #204]	@ (80075b0 <tcp_input+0x28c>)
 80074e2:	6814      	ldr	r4, [r2, #0]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fc fd13 	bl	8003f10 <lwip_htons>
 80074ea:	4603      	mov	r3, r0
 80074ec:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80074ee:	4b30      	ldr	r3, [pc, #192]	@ (80075b0 <tcp_input+0x28c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	899b      	ldrh	r3, [r3, #12]
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fc fd0a 	bl	8003f10 <lwip_htons>
 80074fc:	4603      	mov	r3, r0
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007504:	b2da      	uxtb	r2, r3
 8007506:	4b34      	ldr	r3, [pc, #208]	@ (80075d8 <tcp_input+0x2b4>)
 8007508:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	891a      	ldrh	r2, [r3, #8]
 800750e:	4b33      	ldr	r3, [pc, #204]	@ (80075dc <tcp_input+0x2b8>)
 8007510:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007512:	4b31      	ldr	r3, [pc, #196]	@ (80075d8 <tcp_input+0x2b4>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	f003 0303 	and.w	r3, r3, #3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00c      	beq.n	8007538 <tcp_input+0x214>
    tcplen++;
 800751e:	4b2f      	ldr	r3, [pc, #188]	@ (80075dc <tcp_input+0x2b8>)
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	3301      	adds	r3, #1
 8007524:	b29a      	uxth	r2, r3
 8007526:	4b2d      	ldr	r3, [pc, #180]	@ (80075dc <tcp_input+0x2b8>)
 8007528:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	891a      	ldrh	r2, [r3, #8]
 800752e:	4b2b      	ldr	r3, [pc, #172]	@ (80075dc <tcp_input+0x2b8>)
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	429a      	cmp	r2, r3
 8007534:	f200 82e6 	bhi.w	8007b04 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007538:	2300      	movs	r3, #0
 800753a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800753c:	4b28      	ldr	r3, [pc, #160]	@ (80075e0 <tcp_input+0x2bc>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	61fb      	str	r3, [r7, #28]
 8007542:	e09d      	b.n	8007680 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	7d1b      	ldrb	r3, [r3, #20]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d105      	bne.n	8007558 <tcp_input+0x234>
 800754c:	4b15      	ldr	r3, [pc, #84]	@ (80075a4 <tcp_input+0x280>)
 800754e:	22fb      	movs	r2, #251	@ 0xfb
 8007550:	4924      	ldr	r1, [pc, #144]	@ (80075e4 <tcp_input+0x2c0>)
 8007552:	4816      	ldr	r0, [pc, #88]	@ (80075ac <tcp_input+0x288>)
 8007554:	f006 fdd8 	bl	800e108 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	7d1b      	ldrb	r3, [r3, #20]
 800755c:	2b0a      	cmp	r3, #10
 800755e:	d105      	bne.n	800756c <tcp_input+0x248>
 8007560:	4b10      	ldr	r3, [pc, #64]	@ (80075a4 <tcp_input+0x280>)
 8007562:	22fc      	movs	r2, #252	@ 0xfc
 8007564:	4920      	ldr	r1, [pc, #128]	@ (80075e8 <tcp_input+0x2c4>)
 8007566:	4811      	ldr	r0, [pc, #68]	@ (80075ac <tcp_input+0x288>)
 8007568:	f006 fdce 	bl	800e108 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	7d1b      	ldrb	r3, [r3, #20]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d105      	bne.n	8007580 <tcp_input+0x25c>
 8007574:	4b0b      	ldr	r3, [pc, #44]	@ (80075a4 <tcp_input+0x280>)
 8007576:	22fd      	movs	r2, #253	@ 0xfd
 8007578:	491c      	ldr	r1, [pc, #112]	@ (80075ec <tcp_input+0x2c8>)
 800757a:	480c      	ldr	r0, [pc, #48]	@ (80075ac <tcp_input+0x288>)
 800757c:	f006 fdc4 	bl	800e108 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	7a1b      	ldrb	r3, [r3, #8]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d033      	beq.n	80075f0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	7a1a      	ldrb	r2, [r3, #8]
 800758c:	4b09      	ldr	r3, [pc, #36]	@ (80075b4 <tcp_input+0x290>)
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007594:	3301      	adds	r3, #1
 8007596:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007598:	429a      	cmp	r2, r3
 800759a:	d029      	beq.n	80075f0 <tcp_input+0x2cc>
      prev = pcb;
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	61bb      	str	r3, [r7, #24]
      continue;
 80075a0:	e06b      	b.n	800767a <tcp_input+0x356>
 80075a2:	bf00      	nop
 80075a4:	08010168 	.word	0x08010168
 80075a8:	0801019c 	.word	0x0801019c
 80075ac:	080101b4 	.word	0x080101b4
 80075b0:	200082b8 	.word	0x200082b8
 80075b4:	20004d20 	.word	0x20004d20
 80075b8:	200082bc 	.word	0x200082bc
 80075bc:	200082c0 	.word	0x200082c0
 80075c0:	200082be 	.word	0x200082be
 80075c4:	080101dc 	.word	0x080101dc
 80075c8:	080101ec 	.word	0x080101ec
 80075cc:	080101f8 	.word	0x080101f8
 80075d0:	200082c8 	.word	0x200082c8
 80075d4:	200082cc 	.word	0x200082cc
 80075d8:	200082d4 	.word	0x200082d4
 80075dc:	200082d2 	.word	0x200082d2
 80075e0:	2000829c 	.word	0x2000829c
 80075e4:	08010218 	.word	0x08010218
 80075e8:	08010240 	.word	0x08010240
 80075ec:	0801026c 	.word	0x0801026c
    }

    if (pcb->remote_port == tcphdr->src &&
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	8b1a      	ldrh	r2, [r3, #24]
 80075f4:	4b72      	ldr	r3, [pc, #456]	@ (80077c0 <tcp_input+0x49c>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	881b      	ldrh	r3, [r3, #0]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d13a      	bne.n	8007676 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	8ada      	ldrh	r2, [r3, #22]
 8007604:	4b6e      	ldr	r3, [pc, #440]	@ (80077c0 <tcp_input+0x49c>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	885b      	ldrh	r3, [r3, #2]
 800760a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800760c:	429a      	cmp	r2, r3
 800760e:	d132      	bne.n	8007676 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	4b6b      	ldr	r3, [pc, #428]	@ (80077c4 <tcp_input+0x4a0>)
 8007616:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007618:	429a      	cmp	r2, r3
 800761a:	d12c      	bne.n	8007676 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	4b68      	ldr	r3, [pc, #416]	@ (80077c4 <tcp_input+0x4a0>)
 8007622:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007624:	429a      	cmp	r2, r3
 8007626:	d126      	bne.n	8007676 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	69fa      	ldr	r2, [r7, #28]
 800762e:	429a      	cmp	r2, r3
 8007630:	d106      	bne.n	8007640 <tcp_input+0x31c>
 8007632:	4b65      	ldr	r3, [pc, #404]	@ (80077c8 <tcp_input+0x4a4>)
 8007634:	f240 120d 	movw	r2, #269	@ 0x10d
 8007638:	4964      	ldr	r1, [pc, #400]	@ (80077cc <tcp_input+0x4a8>)
 800763a:	4865      	ldr	r0, [pc, #404]	@ (80077d0 <tcp_input+0x4ac>)
 800763c:	f006 fd64 	bl	800e108 <iprintf>
      if (prev != NULL) {
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00a      	beq.n	800765c <tcp_input+0x338>
        prev->next = pcb->next;
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	68da      	ldr	r2, [r3, #12]
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800764e:	4b61      	ldr	r3, [pc, #388]	@ (80077d4 <tcp_input+0x4b0>)
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007656:	4a5f      	ldr	r2, [pc, #380]	@ (80077d4 <tcp_input+0x4b0>)
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	69fa      	ldr	r2, [r7, #28]
 8007662:	429a      	cmp	r2, r3
 8007664:	d111      	bne.n	800768a <tcp_input+0x366>
 8007666:	4b58      	ldr	r3, [pc, #352]	@ (80077c8 <tcp_input+0x4a4>)
 8007668:	f240 1215 	movw	r2, #277	@ 0x115
 800766c:	495a      	ldr	r1, [pc, #360]	@ (80077d8 <tcp_input+0x4b4>)
 800766e:	4858      	ldr	r0, [pc, #352]	@ (80077d0 <tcp_input+0x4ac>)
 8007670:	f006 fd4a 	bl	800e108 <iprintf>
      break;
 8007674:	e009      	b.n	800768a <tcp_input+0x366>
    }
    prev = pcb;
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	61fb      	str	r3, [r7, #28]
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	2b00      	cmp	r3, #0
 8007684:	f47f af5e 	bne.w	8007544 <tcp_input+0x220>
 8007688:	e000      	b.n	800768c <tcp_input+0x368>
      break;
 800768a:	bf00      	nop
  }

  if (pcb == NULL) {
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	2b00      	cmp	r3, #0
 8007690:	f040 80aa 	bne.w	80077e8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007694:	4b51      	ldr	r3, [pc, #324]	@ (80077dc <tcp_input+0x4b8>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	61fb      	str	r3, [r7, #28]
 800769a:	e03f      	b.n	800771c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	7d1b      	ldrb	r3, [r3, #20]
 80076a0:	2b0a      	cmp	r3, #10
 80076a2:	d006      	beq.n	80076b2 <tcp_input+0x38e>
 80076a4:	4b48      	ldr	r3, [pc, #288]	@ (80077c8 <tcp_input+0x4a4>)
 80076a6:	f240 121f 	movw	r2, #287	@ 0x11f
 80076aa:	494d      	ldr	r1, [pc, #308]	@ (80077e0 <tcp_input+0x4bc>)
 80076ac:	4848      	ldr	r0, [pc, #288]	@ (80077d0 <tcp_input+0x4ac>)
 80076ae:	f006 fd2b 	bl	800e108 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	7a1b      	ldrb	r3, [r3, #8]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d009      	beq.n	80076ce <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	7a1a      	ldrb	r2, [r3, #8]
 80076be:	4b41      	ldr	r3, [pc, #260]	@ (80077c4 <tcp_input+0x4a0>)
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80076c6:	3301      	adds	r3, #1
 80076c8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d122      	bne.n	8007714 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	8b1a      	ldrh	r2, [r3, #24]
 80076d2:	4b3b      	ldr	r3, [pc, #236]	@ (80077c0 <tcp_input+0x49c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	881b      	ldrh	r3, [r3, #0]
 80076d8:	b29b      	uxth	r3, r3
 80076da:	429a      	cmp	r2, r3
 80076dc:	d11b      	bne.n	8007716 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	8ada      	ldrh	r2, [r3, #22]
 80076e2:	4b37      	ldr	r3, [pc, #220]	@ (80077c0 <tcp_input+0x49c>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	885b      	ldrh	r3, [r3, #2]
 80076e8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d113      	bne.n	8007716 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	685a      	ldr	r2, [r3, #4]
 80076f2:	4b34      	ldr	r3, [pc, #208]	@ (80077c4 <tcp_input+0x4a0>)
 80076f4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d10d      	bne.n	8007716 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	4b31      	ldr	r3, [pc, #196]	@ (80077c4 <tcp_input+0x4a0>)
 8007700:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007702:	429a      	cmp	r2, r3
 8007704:	d107      	bne.n	8007716 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007706:	69f8      	ldr	r0, [r7, #28]
 8007708:	f000 fb56 	bl	8007db8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7fd ff3d 	bl	800558c <pbuf_free>
        return;
 8007712:	e1fd      	b.n	8007b10 <tcp_input+0x7ec>
        continue;
 8007714:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	61fb      	str	r3, [r7, #28]
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1bc      	bne.n	800769c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007722:	2300      	movs	r3, #0
 8007724:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007726:	4b2f      	ldr	r3, [pc, #188]	@ (80077e4 <tcp_input+0x4c0>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	617b      	str	r3, [r7, #20]
 800772c:	e02a      	b.n	8007784 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	7a1b      	ldrb	r3, [r3, #8]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00c      	beq.n	8007750 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	7a1a      	ldrb	r2, [r3, #8]
 800773a:	4b22      	ldr	r3, [pc, #136]	@ (80077c4 <tcp_input+0x4a0>)
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007742:	3301      	adds	r3, #1
 8007744:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007746:	429a      	cmp	r2, r3
 8007748:	d002      	beq.n	8007750 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	61bb      	str	r3, [r7, #24]
        continue;
 800774e:	e016      	b.n	800777e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	8ada      	ldrh	r2, [r3, #22]
 8007754:	4b1a      	ldr	r3, [pc, #104]	@ (80077c0 <tcp_input+0x49c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	885b      	ldrh	r3, [r3, #2]
 800775a:	b29b      	uxth	r3, r3
 800775c:	429a      	cmp	r2, r3
 800775e:	d10c      	bne.n	800777a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	4b17      	ldr	r3, [pc, #92]	@ (80077c4 <tcp_input+0x4a0>)
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	429a      	cmp	r2, r3
 800776a:	d00f      	beq.n	800778c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00d      	beq.n	800778e <tcp_input+0x46a>
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d009      	beq.n	800778e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	617b      	str	r3, [r7, #20]
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1d1      	bne.n	800772e <tcp_input+0x40a>
 800778a:	e000      	b.n	800778e <tcp_input+0x46a>
            break;
 800778c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d029      	beq.n	80077e8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00a      	beq.n	80077b0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	68da      	ldr	r2, [r3, #12]
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80077a2:	4b10      	ldr	r3, [pc, #64]	@ (80077e4 <tcp_input+0x4c0>)
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80077aa:	4a0e      	ldr	r2, [pc, #56]	@ (80077e4 <tcp_input+0x4c0>)
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80077b0:	6978      	ldr	r0, [r7, #20]
 80077b2:	f000 fa03 	bl	8007bbc <tcp_listen_input>
      }
      pbuf_free(p);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7fd fee8 	bl	800558c <pbuf_free>
      return;
 80077bc:	e1a8      	b.n	8007b10 <tcp_input+0x7ec>
 80077be:	bf00      	nop
 80077c0:	200082b8 	.word	0x200082b8
 80077c4:	20004d20 	.word	0x20004d20
 80077c8:	08010168 	.word	0x08010168
 80077cc:	08010294 	.word	0x08010294
 80077d0:	080101b4 	.word	0x080101b4
 80077d4:	2000829c 	.word	0x2000829c
 80077d8:	080102c0 	.word	0x080102c0
 80077dc:	200082a0 	.word	0x200082a0
 80077e0:	080102ec 	.word	0x080102ec
 80077e4:	20008298 	.word	0x20008298
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 8158 	beq.w	8007aa0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80077f0:	4b95      	ldr	r3, [pc, #596]	@ (8007a48 <tcp_input+0x724>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	891a      	ldrh	r2, [r3, #8]
 80077fa:	4b93      	ldr	r3, [pc, #588]	@ (8007a48 <tcp_input+0x724>)
 80077fc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80077fe:	4a92      	ldr	r2, [pc, #584]	@ (8007a48 <tcp_input+0x724>)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007804:	4b91      	ldr	r3, [pc, #580]	@ (8007a4c <tcp_input+0x728>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a8f      	ldr	r2, [pc, #572]	@ (8007a48 <tcp_input+0x724>)
 800780a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800780c:	4b90      	ldr	r3, [pc, #576]	@ (8007a50 <tcp_input+0x72c>)
 800780e:	2200      	movs	r2, #0
 8007810:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007812:	4b90      	ldr	r3, [pc, #576]	@ (8007a54 <tcp_input+0x730>)
 8007814:	2200      	movs	r2, #0
 8007816:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007818:	4b8f      	ldr	r3, [pc, #572]	@ (8007a58 <tcp_input+0x734>)
 800781a:	2200      	movs	r2, #0
 800781c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800781e:	4b8f      	ldr	r3, [pc, #572]	@ (8007a5c <tcp_input+0x738>)
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	f003 0308 	and.w	r3, r3, #8
 8007826:	2b00      	cmp	r3, #0
 8007828:	d006      	beq.n	8007838 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	7b5b      	ldrb	r3, [r3, #13]
 800782e:	f043 0301 	orr.w	r3, r3, #1
 8007832:	b2da      	uxtb	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800783c:	2b00      	cmp	r3, #0
 800783e:	d017      	beq.n	8007870 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007840:	69f8      	ldr	r0, [r7, #28]
 8007842:	f7ff f929 	bl	8006a98 <tcp_process_refused_data>
 8007846:	4603      	mov	r3, r0
 8007848:	f113 0f0d 	cmn.w	r3, #13
 800784c:	d007      	beq.n	800785e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00c      	beq.n	8007870 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007856:	4b82      	ldr	r3, [pc, #520]	@ (8007a60 <tcp_input+0x73c>)
 8007858:	881b      	ldrh	r3, [r3, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d008      	beq.n	8007870 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007862:	2b00      	cmp	r3, #0
 8007864:	f040 80e3 	bne.w	8007a2e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007868:	69f8      	ldr	r0, [r7, #28]
 800786a:	f003 f9a7 	bl	800abbc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800786e:	e0de      	b.n	8007a2e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007870:	4a7c      	ldr	r2, [pc, #496]	@ (8007a64 <tcp_input+0x740>)
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007876:	69f8      	ldr	r0, [r7, #28]
 8007878:	f000 fb18 	bl	8007eac <tcp_process>
 800787c:	4603      	mov	r3, r0
 800787e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007880:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007884:	f113 0f0d 	cmn.w	r3, #13
 8007888:	f000 80d3 	beq.w	8007a32 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800788c:	4b71      	ldr	r3, [pc, #452]	@ (8007a54 <tcp_input+0x730>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	f003 0308 	and.w	r3, r3, #8
 8007894:	2b00      	cmp	r3, #0
 8007896:	d015      	beq.n	80078c4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d008      	beq.n	80078b4 <tcp_input+0x590>
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078a8:	69fa      	ldr	r2, [r7, #28]
 80078aa:	6912      	ldr	r2, [r2, #16]
 80078ac:	f06f 010d 	mvn.w	r1, #13
 80078b0:	4610      	mov	r0, r2
 80078b2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80078b4:	69f9      	ldr	r1, [r7, #28]
 80078b6:	486c      	ldr	r0, [pc, #432]	@ (8007a68 <tcp_input+0x744>)
 80078b8:	f7ff fbbc 	bl	8007034 <tcp_pcb_remove>
        tcp_free(pcb);
 80078bc:	69f8      	ldr	r0, [r7, #28]
 80078be:	f7fe f9a7 	bl	8005c10 <tcp_free>
 80078c2:	e0da      	b.n	8007a7a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80078c4:	2300      	movs	r3, #0
 80078c6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80078c8:	4b63      	ldr	r3, [pc, #396]	@ (8007a58 <tcp_input+0x734>)
 80078ca:	881b      	ldrh	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d01d      	beq.n	800790c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80078d0:	4b61      	ldr	r3, [pc, #388]	@ (8007a58 <tcp_input+0x734>)
 80078d2:	881b      	ldrh	r3, [r3, #0]
 80078d4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00a      	beq.n	80078f6 <tcp_input+0x5d2>
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078e6:	69fa      	ldr	r2, [r7, #28]
 80078e8:	6910      	ldr	r0, [r2, #16]
 80078ea:	89fa      	ldrh	r2, [r7, #14]
 80078ec:	69f9      	ldr	r1, [r7, #28]
 80078ee:	4798      	blx	r3
 80078f0:	4603      	mov	r3, r0
 80078f2:	74fb      	strb	r3, [r7, #19]
 80078f4:	e001      	b.n	80078fa <tcp_input+0x5d6>
 80078f6:	2300      	movs	r3, #0
 80078f8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80078fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80078fe:	f113 0f0d 	cmn.w	r3, #13
 8007902:	f000 8098 	beq.w	8007a36 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007906:	4b54      	ldr	r3, [pc, #336]	@ (8007a58 <tcp_input+0x734>)
 8007908:	2200      	movs	r2, #0
 800790a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800790c:	69f8      	ldr	r0, [r7, #28]
 800790e:	f000 f915 	bl	8007b3c <tcp_input_delayed_close>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	f040 8090 	bne.w	8007a3a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800791a:	4b4d      	ldr	r3, [pc, #308]	@ (8007a50 <tcp_input+0x72c>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d041      	beq.n	80079a6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007926:	2b00      	cmp	r3, #0
 8007928:	d006      	beq.n	8007938 <tcp_input+0x614>
 800792a:	4b50      	ldr	r3, [pc, #320]	@ (8007a6c <tcp_input+0x748>)
 800792c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8007930:	494f      	ldr	r1, [pc, #316]	@ (8007a70 <tcp_input+0x74c>)
 8007932:	4850      	ldr	r0, [pc, #320]	@ (8007a74 <tcp_input+0x750>)
 8007934:	f006 fbe8 	bl	800e108 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	8b5b      	ldrh	r3, [r3, #26]
 800793c:	f003 0310 	and.w	r3, r3, #16
 8007940:	2b00      	cmp	r3, #0
 8007942:	d008      	beq.n	8007956 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007944:	4b42      	ldr	r3, [pc, #264]	@ (8007a50 <tcp_input+0x72c>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4618      	mov	r0, r3
 800794a:	f7fd fe1f 	bl	800558c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800794e:	69f8      	ldr	r0, [r7, #28]
 8007950:	f7fe fc46 	bl	80061e0 <tcp_abort>
            goto aborted;
 8007954:	e091      	b.n	8007a7a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00c      	beq.n	800797a <tcp_input+0x656>
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	6918      	ldr	r0, [r3, #16]
 800796a:	4b39      	ldr	r3, [pc, #228]	@ (8007a50 <tcp_input+0x72c>)
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	2300      	movs	r3, #0
 8007970:	69f9      	ldr	r1, [r7, #28]
 8007972:	47a0      	blx	r4
 8007974:	4603      	mov	r3, r0
 8007976:	74fb      	strb	r3, [r7, #19]
 8007978:	e008      	b.n	800798c <tcp_input+0x668>
 800797a:	4b35      	ldr	r3, [pc, #212]	@ (8007a50 <tcp_input+0x72c>)
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	2300      	movs	r3, #0
 8007980:	69f9      	ldr	r1, [r7, #28]
 8007982:	2000      	movs	r0, #0
 8007984:	f7ff f95e 	bl	8006c44 <tcp_recv_null>
 8007988:	4603      	mov	r3, r0
 800798a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800798c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007990:	f113 0f0d 	cmn.w	r3, #13
 8007994:	d053      	beq.n	8007a3e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007996:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800799e:	4b2c      	ldr	r3, [pc, #176]	@ (8007a50 <tcp_input+0x72c>)
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80079a6:	4b2b      	ldr	r3, [pc, #172]	@ (8007a54 <tcp_input+0x730>)
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d030      	beq.n	8007a14 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d009      	beq.n	80079ce <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079be:	7b5a      	ldrb	r2, [r3, #13]
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079c4:	f042 0220 	orr.w	r2, r2, #32
 80079c8:	b2d2      	uxtb	r2, r2
 80079ca:	735a      	strb	r2, [r3, #13]
 80079cc:	e022      	b.n	8007a14 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079d2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80079d6:	d005      	beq.n	80079e4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079dc:	3301      	adds	r3, #1
 80079de:	b29a      	uxth	r2, r3
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00b      	beq.n	8007a06 <tcp_input+0x6e2>
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	6918      	ldr	r0, [r3, #16]
 80079f8:	2300      	movs	r3, #0
 80079fa:	2200      	movs	r2, #0
 80079fc:	69f9      	ldr	r1, [r7, #28]
 80079fe:	47a0      	blx	r4
 8007a00:	4603      	mov	r3, r0
 8007a02:	74fb      	strb	r3, [r7, #19]
 8007a04:	e001      	b.n	8007a0a <tcp_input+0x6e6>
 8007a06:	2300      	movs	r3, #0
 8007a08:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007a0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007a0e:	f113 0f0d 	cmn.w	r3, #13
 8007a12:	d016      	beq.n	8007a42 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007a14:	4b13      	ldr	r3, [pc, #76]	@ (8007a64 <tcp_input+0x740>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007a1a:	69f8      	ldr	r0, [r7, #28]
 8007a1c:	f000 f88e 	bl	8007b3c <tcp_input_delayed_close>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d128      	bne.n	8007a78 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007a26:	69f8      	ldr	r0, [r7, #28]
 8007a28:	f002 fac2 	bl	8009fb0 <tcp_output>
 8007a2c:	e025      	b.n	8007a7a <tcp_input+0x756>
        goto aborted;
 8007a2e:	bf00      	nop
 8007a30:	e023      	b.n	8007a7a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007a32:	bf00      	nop
 8007a34:	e021      	b.n	8007a7a <tcp_input+0x756>
              goto aborted;
 8007a36:	bf00      	nop
 8007a38:	e01f      	b.n	8007a7a <tcp_input+0x756>
          goto aborted;
 8007a3a:	bf00      	nop
 8007a3c:	e01d      	b.n	8007a7a <tcp_input+0x756>
            goto aborted;
 8007a3e:	bf00      	nop
 8007a40:	e01b      	b.n	8007a7a <tcp_input+0x756>
              goto aborted;
 8007a42:	bf00      	nop
 8007a44:	e019      	b.n	8007a7a <tcp_input+0x756>
 8007a46:	bf00      	nop
 8007a48:	200082a8 	.word	0x200082a8
 8007a4c:	200082b8 	.word	0x200082b8
 8007a50:	200082d8 	.word	0x200082d8
 8007a54:	200082d5 	.word	0x200082d5
 8007a58:	200082d0 	.word	0x200082d0
 8007a5c:	200082d4 	.word	0x200082d4
 8007a60:	200082d2 	.word	0x200082d2
 8007a64:	200082dc 	.word	0x200082dc
 8007a68:	2000829c 	.word	0x2000829c
 8007a6c:	08010168 	.word	0x08010168
 8007a70:	0801031c 	.word	0x0801031c
 8007a74:	080101b4 	.word	0x080101b4
          goto aborted;
 8007a78:	bf00      	nop
    tcp_input_pcb = NULL;
 8007a7a:	4b27      	ldr	r3, [pc, #156]	@ (8007b18 <tcp_input+0x7f4>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007a80:	4b26      	ldr	r3, [pc, #152]	@ (8007b1c <tcp_input+0x7f8>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007a86:	4b26      	ldr	r3, [pc, #152]	@ (8007b20 <tcp_input+0x7fc>)
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d03f      	beq.n	8007b0e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8007a8e:	4b24      	ldr	r3, [pc, #144]	@ (8007b20 <tcp_input+0x7fc>)
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fd fd7a 	bl	800558c <pbuf_free>
      inseg.p = NULL;
 8007a98:	4b21      	ldr	r3, [pc, #132]	@ (8007b20 <tcp_input+0x7fc>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007a9e:	e036      	b.n	8007b0e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007aa0:	4b20      	ldr	r3, [pc, #128]	@ (8007b24 <tcp_input+0x800>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	899b      	ldrh	r3, [r3, #12]
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7fc fa31 	bl	8003f10 <lwip_htons>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	f003 0304 	and.w	r3, r3, #4
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d118      	bne.n	8007aec <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007aba:	4b1b      	ldr	r3, [pc, #108]	@ (8007b28 <tcp_input+0x804>)
 8007abc:	6819      	ldr	r1, [r3, #0]
 8007abe:	4b1b      	ldr	r3, [pc, #108]	@ (8007b2c <tcp_input+0x808>)
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8007b30 <tcp_input+0x80c>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007aca:	4b16      	ldr	r3, [pc, #88]	@ (8007b24 <tcp_input+0x800>)
 8007acc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ace:	885b      	ldrh	r3, [r3, #2]
 8007ad0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ad2:	4a14      	ldr	r2, [pc, #80]	@ (8007b24 <tcp_input+0x800>)
 8007ad4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ad6:	8812      	ldrh	r2, [r2, #0]
 8007ad8:	b292      	uxth	r2, r2
 8007ada:	9202      	str	r2, [sp, #8]
 8007adc:	9301      	str	r3, [sp, #4]
 8007ade:	4b15      	ldr	r3, [pc, #84]	@ (8007b34 <tcp_input+0x810>)
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	4b15      	ldr	r3, [pc, #84]	@ (8007b38 <tcp_input+0x814>)
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	2000      	movs	r0, #0
 8007ae8:	f003 f816 	bl	800ab18 <tcp_rst>
    pbuf_free(p);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f7fd fd4d 	bl	800558c <pbuf_free>
  return;
 8007af2:	e00c      	b.n	8007b0e <tcp_input+0x7ea>
    goto dropped;
 8007af4:	bf00      	nop
 8007af6:	e006      	b.n	8007b06 <tcp_input+0x7e2>
    goto dropped;
 8007af8:	bf00      	nop
 8007afa:	e004      	b.n	8007b06 <tcp_input+0x7e2>
    goto dropped;
 8007afc:	bf00      	nop
 8007afe:	e002      	b.n	8007b06 <tcp_input+0x7e2>
      goto dropped;
 8007b00:	bf00      	nop
 8007b02:	e000      	b.n	8007b06 <tcp_input+0x7e2>
      goto dropped;
 8007b04:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7fd fd40 	bl	800558c <pbuf_free>
 8007b0c:	e000      	b.n	8007b10 <tcp_input+0x7ec>
  return;
 8007b0e:	bf00      	nop
}
 8007b10:	3724      	adds	r7, #36	@ 0x24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd90      	pop	{r4, r7, pc}
 8007b16:	bf00      	nop
 8007b18:	200082dc 	.word	0x200082dc
 8007b1c:	200082d8 	.word	0x200082d8
 8007b20:	200082a8 	.word	0x200082a8
 8007b24:	200082b8 	.word	0x200082b8
 8007b28:	200082cc 	.word	0x200082cc
 8007b2c:	200082d2 	.word	0x200082d2
 8007b30:	200082c8 	.word	0x200082c8
 8007b34:	20004d30 	.word	0x20004d30
 8007b38:	20004d34 	.word	0x20004d34

08007b3c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d106      	bne.n	8007b58 <tcp_input_delayed_close+0x1c>
 8007b4a:	4b17      	ldr	r3, [pc, #92]	@ (8007ba8 <tcp_input_delayed_close+0x6c>)
 8007b4c:	f240 225a 	movw	r2, #602	@ 0x25a
 8007b50:	4916      	ldr	r1, [pc, #88]	@ (8007bac <tcp_input_delayed_close+0x70>)
 8007b52:	4817      	ldr	r0, [pc, #92]	@ (8007bb0 <tcp_input_delayed_close+0x74>)
 8007b54:	f006 fad8 	bl	800e108 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007b58:	4b16      	ldr	r3, [pc, #88]	@ (8007bb4 <tcp_input_delayed_close+0x78>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	f003 0310 	and.w	r3, r3, #16
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d01c      	beq.n	8007b9e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	8b5b      	ldrh	r3, [r3, #26]
 8007b68:	f003 0310 	and.w	r3, r3, #16
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10d      	bne.n	8007b8c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d008      	beq.n	8007b8c <tcp_input_delayed_close+0x50>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	6912      	ldr	r2, [r2, #16]
 8007b84:	f06f 010e 	mvn.w	r1, #14
 8007b88:	4610      	mov	r0, r2
 8007b8a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007b8c:	6879      	ldr	r1, [r7, #4]
 8007b8e:	480a      	ldr	r0, [pc, #40]	@ (8007bb8 <tcp_input_delayed_close+0x7c>)
 8007b90:	f7ff fa50 	bl	8007034 <tcp_pcb_remove>
    tcp_free(pcb);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f7fe f83b 	bl	8005c10 <tcp_free>
    return 1;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e000      	b.n	8007ba0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	08010168 	.word	0x08010168
 8007bac:	08010338 	.word	0x08010338
 8007bb0:	080101b4 	.word	0x080101b4
 8007bb4:	200082d5 	.word	0x200082d5
 8007bb8:	2000829c 	.word	0x2000829c

08007bbc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007bbc:	b590      	push	{r4, r7, lr}
 8007bbe:	b08b      	sub	sp, #44	@ 0x2c
 8007bc0:	af04      	add	r7, sp, #16
 8007bc2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007bc4:	4b6f      	ldr	r3, [pc, #444]	@ (8007d84 <tcp_listen_input+0x1c8>)
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	f003 0304 	and.w	r3, r3, #4
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f040 80d2 	bne.w	8007d76 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d106      	bne.n	8007be6 <tcp_listen_input+0x2a>
 8007bd8:	4b6b      	ldr	r3, [pc, #428]	@ (8007d88 <tcp_listen_input+0x1cc>)
 8007bda:	f240 2281 	movw	r2, #641	@ 0x281
 8007bde:	496b      	ldr	r1, [pc, #428]	@ (8007d8c <tcp_listen_input+0x1d0>)
 8007be0:	486b      	ldr	r0, [pc, #428]	@ (8007d90 <tcp_listen_input+0x1d4>)
 8007be2:	f006 fa91 	bl	800e108 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007be6:	4b67      	ldr	r3, [pc, #412]	@ (8007d84 <tcp_listen_input+0x1c8>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	f003 0310 	and.w	r3, r3, #16
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d019      	beq.n	8007c26 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007bf2:	4b68      	ldr	r3, [pc, #416]	@ (8007d94 <tcp_listen_input+0x1d8>)
 8007bf4:	6819      	ldr	r1, [r3, #0]
 8007bf6:	4b68      	ldr	r3, [pc, #416]	@ (8007d98 <tcp_listen_input+0x1dc>)
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	4b67      	ldr	r3, [pc, #412]	@ (8007d9c <tcp_listen_input+0x1e0>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c02:	4b67      	ldr	r3, [pc, #412]	@ (8007da0 <tcp_listen_input+0x1e4>)
 8007c04:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c06:	885b      	ldrh	r3, [r3, #2]
 8007c08:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c0a:	4a65      	ldr	r2, [pc, #404]	@ (8007da0 <tcp_listen_input+0x1e4>)
 8007c0c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c0e:	8812      	ldrh	r2, [r2, #0]
 8007c10:	b292      	uxth	r2, r2
 8007c12:	9202      	str	r2, [sp, #8]
 8007c14:	9301      	str	r3, [sp, #4]
 8007c16:	4b63      	ldr	r3, [pc, #396]	@ (8007da4 <tcp_listen_input+0x1e8>)
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	4b63      	ldr	r3, [pc, #396]	@ (8007da8 <tcp_listen_input+0x1ec>)
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f002 ff7a 	bl	800ab18 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007c24:	e0a9      	b.n	8007d7a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8007c26:	4b57      	ldr	r3, [pc, #348]	@ (8007d84 <tcp_listen_input+0x1c8>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 80a3 	beq.w	8007d7a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	7d5b      	ldrb	r3, [r3, #21]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7ff f927 	bl	8006e8c <tcp_alloc>
 8007c3e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d111      	bne.n	8007c6a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00a      	beq.n	8007c64 <tcp_listen_input+0xa8>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	6910      	ldr	r0, [r2, #16]
 8007c56:	f04f 32ff 	mov.w	r2, #4294967295
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	4798      	blx	r3
 8007c5e:	4603      	mov	r3, r0
 8007c60:	73bb      	strb	r3, [r7, #14]
      return;
 8007c62:	e08b      	b.n	8007d7c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007c64:	23f0      	movs	r3, #240	@ 0xf0
 8007c66:	73bb      	strb	r3, [r7, #14]
      return;
 8007c68:	e088      	b.n	8007d7c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007c6a:	4b50      	ldr	r3, [pc, #320]	@ (8007dac <tcp_listen_input+0x1f0>)
 8007c6c:	695a      	ldr	r2, [r3, #20]
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007c72:	4b4e      	ldr	r3, [pc, #312]	@ (8007dac <tcp_listen_input+0x1f0>)
 8007c74:	691a      	ldr	r2, [r3, #16]
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	8ada      	ldrh	r2, [r3, #22]
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007c82:	4b47      	ldr	r3, [pc, #284]	@ (8007da0 <tcp_listen_input+0x1e4>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	881b      	ldrh	r3, [r3, #0]
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	2203      	movs	r2, #3
 8007c92:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007c94:	4b41      	ldr	r3, [pc, #260]	@ (8007d9c <tcp_listen_input+0x1e0>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8007ca6:	6978      	ldr	r0, [r7, #20]
 8007ca8:	f7ff fa58 	bl	800715c <tcp_next_iss>
 8007cac:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	693a      	ldr	r2, [r7, #16]
 8007cbe:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007cc6:	4b35      	ldr	r3, [pc, #212]	@ (8007d9c <tcp_listen_input+0x1e0>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	1e5a      	subs	r2, r3, #1
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	691a      	ldr	r2, [r3, #16]
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	7a5b      	ldrb	r3, [r3, #9]
 8007ce2:	f003 030c 	and.w	r3, r3, #12
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	7a1a      	ldrb	r2, [r3, #8]
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007cf4:	4b2e      	ldr	r3, [pc, #184]	@ (8007db0 <tcp_listen_input+0x1f4>)
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	60da      	str	r2, [r3, #12]
 8007cfc:	4a2c      	ldr	r2, [pc, #176]	@ (8007db0 <tcp_listen_input+0x1f4>)
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	6013      	str	r3, [r2, #0]
 8007d02:	f003 f8cb 	bl	800ae9c <tcp_timer_needed>
 8007d06:	4b2b      	ldr	r3, [pc, #172]	@ (8007db4 <tcp_listen_input+0x1f8>)
 8007d08:	2201      	movs	r2, #1
 8007d0a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007d0c:	6978      	ldr	r0, [r7, #20]
 8007d0e:	f001 fd8b 	bl	8009828 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007d12:	4b23      	ldr	r3, [pc, #140]	@ (8007da0 <tcp_listen_input+0x1e4>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	89db      	ldrh	r3, [r3, #14]
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	3304      	adds	r3, #4
 8007d34:	4618      	mov	r0, r3
 8007d36:	f004 fefb 	bl	800cb30 <ip4_route>
 8007d3a:	4601      	mov	r1, r0
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	3304      	adds	r3, #4
 8007d40:	461a      	mov	r2, r3
 8007d42:	4620      	mov	r0, r4
 8007d44:	f7ff fa30 	bl	80071a8 <tcp_eff_send_mss_netif>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007d50:	2112      	movs	r1, #18
 8007d52:	6978      	ldr	r0, [r7, #20]
 8007d54:	f002 f83e 	bl	8009dd4 <tcp_enqueue_flags>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d004      	beq.n	8007d6e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007d64:	2100      	movs	r1, #0
 8007d66:	6978      	ldr	r0, [r7, #20]
 8007d68:	f7fe f97c 	bl	8006064 <tcp_abandon>
      return;
 8007d6c:	e006      	b.n	8007d7c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8007d6e:	6978      	ldr	r0, [r7, #20]
 8007d70:	f002 f91e 	bl	8009fb0 <tcp_output>
  return;
 8007d74:	e001      	b.n	8007d7a <tcp_listen_input+0x1be>
    return;
 8007d76:	bf00      	nop
 8007d78:	e000      	b.n	8007d7c <tcp_listen_input+0x1c0>
  return;
 8007d7a:	bf00      	nop
}
 8007d7c:	371c      	adds	r7, #28
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd90      	pop	{r4, r7, pc}
 8007d82:	bf00      	nop
 8007d84:	200082d4 	.word	0x200082d4
 8007d88:	08010168 	.word	0x08010168
 8007d8c:	08010360 	.word	0x08010360
 8007d90:	080101b4 	.word	0x080101b4
 8007d94:	200082cc 	.word	0x200082cc
 8007d98:	200082d2 	.word	0x200082d2
 8007d9c:	200082c8 	.word	0x200082c8
 8007da0:	200082b8 	.word	0x200082b8
 8007da4:	20004d30 	.word	0x20004d30
 8007da8:	20004d34 	.word	0x20004d34
 8007dac:	20004d20 	.word	0x20004d20
 8007db0:	2000829c 	.word	0x2000829c
 8007db4:	200082a4 	.word	0x200082a4

08007db8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af04      	add	r7, sp, #16
 8007dbe:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007dc0:	4b2f      	ldr	r3, [pc, #188]	@ (8007e80 <tcp_timewait_input+0xc8>)
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	f003 0304 	and.w	r3, r3, #4
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d153      	bne.n	8007e74 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d106      	bne.n	8007de0 <tcp_timewait_input+0x28>
 8007dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8007e84 <tcp_timewait_input+0xcc>)
 8007dd4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8007dd8:	492b      	ldr	r1, [pc, #172]	@ (8007e88 <tcp_timewait_input+0xd0>)
 8007dda:	482c      	ldr	r0, [pc, #176]	@ (8007e8c <tcp_timewait_input+0xd4>)
 8007ddc:	f006 f994 	bl	800e108 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007de0:	4b27      	ldr	r3, [pc, #156]	@ (8007e80 <tcp_timewait_input+0xc8>)
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	f003 0302 	and.w	r3, r3, #2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d02a      	beq.n	8007e42 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007dec:	4b28      	ldr	r3, [pc, #160]	@ (8007e90 <tcp_timewait_input+0xd8>)
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	db2d      	blt.n	8007e56 <tcp_timewait_input+0x9e>
 8007dfa:	4b25      	ldr	r3, [pc, #148]	@ (8007e90 <tcp_timewait_input+0xd8>)
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e02:	6879      	ldr	r1, [r7, #4]
 8007e04:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007e06:	440b      	add	r3, r1
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	dc23      	bgt.n	8007e56 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e0e:	4b21      	ldr	r3, [pc, #132]	@ (8007e94 <tcp_timewait_input+0xdc>)
 8007e10:	6819      	ldr	r1, [r3, #0]
 8007e12:	4b21      	ldr	r3, [pc, #132]	@ (8007e98 <tcp_timewait_input+0xe0>)
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	461a      	mov	r2, r3
 8007e18:	4b1d      	ldr	r3, [pc, #116]	@ (8007e90 <tcp_timewait_input+0xd8>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8007e9c <tcp_timewait_input+0xe4>)
 8007e20:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e22:	885b      	ldrh	r3, [r3, #2]
 8007e24:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007e26:	4a1d      	ldr	r2, [pc, #116]	@ (8007e9c <tcp_timewait_input+0xe4>)
 8007e28:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e2a:	8812      	ldrh	r2, [r2, #0]
 8007e2c:	b292      	uxth	r2, r2
 8007e2e:	9202      	str	r2, [sp, #8]
 8007e30:	9301      	str	r3, [sp, #4]
 8007e32:	4b1b      	ldr	r3, [pc, #108]	@ (8007ea0 <tcp_timewait_input+0xe8>)
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	4b1b      	ldr	r3, [pc, #108]	@ (8007ea4 <tcp_timewait_input+0xec>)
 8007e38:	4602      	mov	r2, r0
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f002 fe6c 	bl	800ab18 <tcp_rst>
      return;
 8007e40:	e01b      	b.n	8007e7a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8007e42:	4b0f      	ldr	r3, [pc, #60]	@ (8007e80 <tcp_timewait_input+0xc8>)
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007e4e:	4b16      	ldr	r3, [pc, #88]	@ (8007ea8 <tcp_timewait_input+0xf0>)
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007e56:	4b10      	ldr	r3, [pc, #64]	@ (8007e98 <tcp_timewait_input+0xe0>)
 8007e58:	881b      	ldrh	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00c      	beq.n	8007e78 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	8b5b      	ldrh	r3, [r3, #26]
 8007e62:	f043 0302 	orr.w	r3, r3, #2
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f002 f89f 	bl	8009fb0 <tcp_output>
  }
  return;
 8007e72:	e001      	b.n	8007e78 <tcp_timewait_input+0xc0>
    return;
 8007e74:	bf00      	nop
 8007e76:	e000      	b.n	8007e7a <tcp_timewait_input+0xc2>
  return;
 8007e78:	bf00      	nop
}
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	200082d4 	.word	0x200082d4
 8007e84:	08010168 	.word	0x08010168
 8007e88:	08010380 	.word	0x08010380
 8007e8c:	080101b4 	.word	0x080101b4
 8007e90:	200082c8 	.word	0x200082c8
 8007e94:	200082cc 	.word	0x200082cc
 8007e98:	200082d2 	.word	0x200082d2
 8007e9c:	200082b8 	.word	0x200082b8
 8007ea0:	20004d30 	.word	0x20004d30
 8007ea4:	20004d34 	.word	0x20004d34
 8007ea8:	20008290 	.word	0x20008290

08007eac <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007eac:	b590      	push	{r4, r7, lr}
 8007eae:	b08d      	sub	sp, #52	@ 0x34
 8007eb0:	af04      	add	r7, sp, #16
 8007eb2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d106      	bne.n	8007ed0 <tcp_process+0x24>
 8007ec2:	4b9d      	ldr	r3, [pc, #628]	@ (8008138 <tcp_process+0x28c>)
 8007ec4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8007ec8:	499c      	ldr	r1, [pc, #624]	@ (800813c <tcp_process+0x290>)
 8007eca:	489d      	ldr	r0, [pc, #628]	@ (8008140 <tcp_process+0x294>)
 8007ecc:	f006 f91c 	bl	800e108 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007ed0:	4b9c      	ldr	r3, [pc, #624]	@ (8008144 <tcp_process+0x298>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	f003 0304 	and.w	r3, r3, #4
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d04e      	beq.n	8007f7a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	7d1b      	ldrb	r3, [r3, #20]
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d108      	bne.n	8007ef6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ee8:	4b97      	ldr	r3, [pc, #604]	@ (8008148 <tcp_process+0x29c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d123      	bne.n	8007f38 <tcp_process+0x8c>
        acceptable = 1;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	76fb      	strb	r3, [r7, #27]
 8007ef4:	e020      	b.n	8007f38 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007efa:	4b94      	ldr	r3, [pc, #592]	@ (800814c <tcp_process+0x2a0>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d102      	bne.n	8007f08 <tcp_process+0x5c>
        acceptable = 1;
 8007f02:	2301      	movs	r3, #1
 8007f04:	76fb      	strb	r3, [r7, #27]
 8007f06:	e017      	b.n	8007f38 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007f08:	4b90      	ldr	r3, [pc, #576]	@ (800814c <tcp_process+0x2a0>)
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	db10      	blt.n	8007f38 <tcp_process+0x8c>
 8007f16:	4b8d      	ldr	r3, [pc, #564]	@ (800814c <tcp_process+0x2a0>)
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f1e:	6879      	ldr	r1, [r7, #4]
 8007f20:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007f22:	440b      	add	r3, r1
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	dc06      	bgt.n	8007f38 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	8b5b      	ldrh	r3, [r3, #26]
 8007f2e:	f043 0302 	orr.w	r3, r3, #2
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007f38:	7efb      	ldrb	r3, [r7, #27]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d01b      	beq.n	8007f76 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	7d1b      	ldrb	r3, [r3, #20]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d106      	bne.n	8007f54 <tcp_process+0xa8>
 8007f46:	4b7c      	ldr	r3, [pc, #496]	@ (8008138 <tcp_process+0x28c>)
 8007f48:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8007f4c:	4980      	ldr	r1, [pc, #512]	@ (8008150 <tcp_process+0x2a4>)
 8007f4e:	487c      	ldr	r0, [pc, #496]	@ (8008140 <tcp_process+0x294>)
 8007f50:	f006 f8da 	bl	800e108 <iprintf>
      recv_flags |= TF_RESET;
 8007f54:	4b7f      	ldr	r3, [pc, #508]	@ (8008154 <tcp_process+0x2a8>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	f043 0308 	orr.w	r3, r3, #8
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	4b7d      	ldr	r3, [pc, #500]	@ (8008154 <tcp_process+0x2a8>)
 8007f60:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	8b5b      	ldrh	r3, [r3, #26]
 8007f66:	f023 0301 	bic.w	r3, r3, #1
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8007f70:	f06f 030d 	mvn.w	r3, #13
 8007f74:	e37a      	b.n	800866c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	e378      	b.n	800866c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007f7a:	4b72      	ldr	r3, [pc, #456]	@ (8008144 <tcp_process+0x298>)
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	f003 0302 	and.w	r3, r3, #2
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d010      	beq.n	8007fa8 <tcp_process+0xfc>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	7d1b      	ldrb	r3, [r3, #20]
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d00c      	beq.n	8007fa8 <tcp_process+0xfc>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	7d1b      	ldrb	r3, [r3, #20]
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d008      	beq.n	8007fa8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	8b5b      	ldrh	r3, [r3, #26]
 8007f9a:	f043 0302 	orr.w	r3, r3, #2
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	e361      	b.n	800866c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	8b5b      	ldrh	r3, [r3, #26]
 8007fac:	f003 0310 	and.w	r3, r3, #16
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d103      	bne.n	8007fbc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007fb4:	4b68      	ldr	r3, [pc, #416]	@ (8008158 <tcp_process+0x2ac>)
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 fc2b 	bl	8009828 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	7d1b      	ldrb	r3, [r3, #20]
 8007fd6:	3b02      	subs	r3, #2
 8007fd8:	2b07      	cmp	r3, #7
 8007fda:	f200 8337 	bhi.w	800864c <tcp_process+0x7a0>
 8007fde:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe4 <tcp_process+0x138>)
 8007fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe4:	08008005 	.word	0x08008005
 8007fe8:	08008235 	.word	0x08008235
 8007fec:	080083ad 	.word	0x080083ad
 8007ff0:	080083d7 	.word	0x080083d7
 8007ff4:	080084fb 	.word	0x080084fb
 8007ff8:	080083ad 	.word	0x080083ad
 8007ffc:	08008587 	.word	0x08008587
 8008000:	08008617 	.word	0x08008617
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008004:	4b4f      	ldr	r3, [pc, #316]	@ (8008144 <tcp_process+0x298>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	f003 0310 	and.w	r3, r3, #16
 800800c:	2b00      	cmp	r3, #0
 800800e:	f000 80e4 	beq.w	80081da <tcp_process+0x32e>
 8008012:	4b4c      	ldr	r3, [pc, #304]	@ (8008144 <tcp_process+0x298>)
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	f003 0302 	and.w	r3, r3, #2
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 80dd 	beq.w	80081da <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008024:	1c5a      	adds	r2, r3, #1
 8008026:	4b48      	ldr	r3, [pc, #288]	@ (8008148 <tcp_process+0x29c>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	429a      	cmp	r2, r3
 800802c:	f040 80d5 	bne.w	80081da <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008030:	4b46      	ldr	r3, [pc, #280]	@ (800814c <tcp_process+0x2a0>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	1c5a      	adds	r2, r3, #1
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8008042:	4b41      	ldr	r3, [pc, #260]	@ (8008148 <tcp_process+0x29c>)
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800804a:	4b44      	ldr	r3, [pc, #272]	@ (800815c <tcp_process+0x2b0>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	89db      	ldrh	r3, [r3, #14]
 8008050:	b29a      	uxth	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008064:	4b39      	ldr	r3, [pc, #228]	@ (800814c <tcp_process+0x2a0>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	1e5a      	subs	r2, r3, #1
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2204      	movs	r2, #4
 8008072:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	3304      	adds	r3, #4
 800807c:	4618      	mov	r0, r3
 800807e:	f004 fd57 	bl	800cb30 <ip4_route>
 8008082:	4601      	mov	r1, r0
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	3304      	adds	r3, #4
 8008088:	461a      	mov	r2, r3
 800808a:	4620      	mov	r0, r4
 800808c:	f7ff f88c 	bl	80071a8 <tcp_eff_send_mss_netif>
 8008090:	4603      	mov	r3, r0
 8008092:	461a      	mov	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800809c:	009a      	lsls	r2, r3, #2
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	f241 111c 	movw	r1, #4380	@ 0x111c
 80080a8:	428b      	cmp	r3, r1
 80080aa:	bf38      	it	cc
 80080ac:	460b      	movcc	r3, r1
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d204      	bcs.n	80080bc <tcp_process+0x210>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	e00d      	b.n	80080d8 <tcp_process+0x22c>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80080c0:	005b      	lsls	r3, r3, #1
 80080c2:	f241 121c 	movw	r2, #4380	@ 0x111c
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d904      	bls.n	80080d4 <tcp_process+0x228>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80080ce:	005b      	lsls	r3, r3, #1
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	e001      	b.n	80080d8 <tcp_process+0x22c>
 80080d4:	f241 131c 	movw	r3, #4380	@ 0x111c
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d106      	bne.n	80080f6 <tcp_process+0x24a>
 80080e8:	4b13      	ldr	r3, [pc, #76]	@ (8008138 <tcp_process+0x28c>)
 80080ea:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80080ee:	491c      	ldr	r1, [pc, #112]	@ (8008160 <tcp_process+0x2b4>)
 80080f0:	4813      	ldr	r0, [pc, #76]	@ (8008140 <tcp_process+0x294>)
 80080f2:	f006 f809 	bl	800e108 <iprintf>
        --pcb->snd_queuelen;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80080fc:	3b01      	subs	r3, #1
 80080fe:	b29a      	uxth	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800810a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d12a      	bne.n	8008168 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008116:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d106      	bne.n	800812c <tcp_process+0x280>
 800811e:	4b06      	ldr	r3, [pc, #24]	@ (8008138 <tcp_process+0x28c>)
 8008120:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8008124:	490f      	ldr	r1, [pc, #60]	@ (8008164 <tcp_process+0x2b8>)
 8008126:	4806      	ldr	r0, [pc, #24]	@ (8008140 <tcp_process+0x294>)
 8008128:	f005 ffee 	bl	800e108 <iprintf>
          pcb->unsent = rseg->next;
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008134:	e01c      	b.n	8008170 <tcp_process+0x2c4>
 8008136:	bf00      	nop
 8008138:	08010168 	.word	0x08010168
 800813c:	080103a0 	.word	0x080103a0
 8008140:	080101b4 	.word	0x080101b4
 8008144:	200082d4 	.word	0x200082d4
 8008148:	200082cc 	.word	0x200082cc
 800814c:	200082c8 	.word	0x200082c8
 8008150:	080103bc 	.word	0x080103bc
 8008154:	200082d5 	.word	0x200082d5
 8008158:	20008290 	.word	0x20008290
 800815c:	200082b8 	.word	0x200082b8
 8008160:	080103dc 	.word	0x080103dc
 8008164:	080103f4 	.word	0x080103f4
        } else {
          pcb->unacked = rseg->next;
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8008170:	69f8      	ldr	r0, [r7, #28]
 8008172:	f7fe fd22 	bl	8006bba <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800817a:	2b00      	cmp	r3, #0
 800817c:	d104      	bne.n	8008188 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008184:	861a      	strh	r2, [r3, #48]	@ 0x30
 8008186:	e006      	b.n	8008196 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00a      	beq.n	80081b6 <tcp_process+0x30a>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	6910      	ldr	r0, [r2, #16]
 80081aa:	2200      	movs	r2, #0
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	4798      	blx	r3
 80081b0:	4603      	mov	r3, r0
 80081b2:	76bb      	strb	r3, [r7, #26]
 80081b4:	e001      	b.n	80081ba <tcp_process+0x30e>
 80081b6:	2300      	movs	r3, #0
 80081b8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80081ba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80081be:	f113 0f0d 	cmn.w	r3, #13
 80081c2:	d102      	bne.n	80081ca <tcp_process+0x31e>
          return ERR_ABRT;
 80081c4:	f06f 030c 	mvn.w	r3, #12
 80081c8:	e250      	b.n	800866c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	8b5b      	ldrh	r3, [r3, #26]
 80081ce:	f043 0302 	orr.w	r3, r3, #2
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80081d8:	e23a      	b.n	8008650 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80081da:	4b98      	ldr	r3, [pc, #608]	@ (800843c <tcp_process+0x590>)
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	f003 0310 	and.w	r3, r3, #16
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f000 8234 	beq.w	8008650 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081e8:	4b95      	ldr	r3, [pc, #596]	@ (8008440 <tcp_process+0x594>)
 80081ea:	6819      	ldr	r1, [r3, #0]
 80081ec:	4b95      	ldr	r3, [pc, #596]	@ (8008444 <tcp_process+0x598>)
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	461a      	mov	r2, r3
 80081f2:	4b95      	ldr	r3, [pc, #596]	@ (8008448 <tcp_process+0x59c>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80081f8:	4b94      	ldr	r3, [pc, #592]	@ (800844c <tcp_process+0x5a0>)
 80081fa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081fc:	885b      	ldrh	r3, [r3, #2]
 80081fe:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008200:	4a92      	ldr	r2, [pc, #584]	@ (800844c <tcp_process+0x5a0>)
 8008202:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008204:	8812      	ldrh	r2, [r2, #0]
 8008206:	b292      	uxth	r2, r2
 8008208:	9202      	str	r2, [sp, #8]
 800820a:	9301      	str	r3, [sp, #4]
 800820c:	4b90      	ldr	r3, [pc, #576]	@ (8008450 <tcp_process+0x5a4>)
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	4b90      	ldr	r3, [pc, #576]	@ (8008454 <tcp_process+0x5a8>)
 8008212:	4602      	mov	r2, r0
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f002 fc7f 	bl	800ab18 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008220:	2b05      	cmp	r3, #5
 8008222:	f200 8215 	bhi.w	8008650 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f002 fa4b 	bl	800a6c8 <tcp_rexmit_rto>
      break;
 8008232:	e20d      	b.n	8008650 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008234:	4b81      	ldr	r3, [pc, #516]	@ (800843c <tcp_process+0x590>)
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	f003 0310 	and.w	r3, r3, #16
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 80a1 	beq.w	8008384 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008242:	4b7f      	ldr	r3, [pc, #508]	@ (8008440 <tcp_process+0x594>)
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	3b01      	subs	r3, #1
 800824e:	2b00      	cmp	r3, #0
 8008250:	db7e      	blt.n	8008350 <tcp_process+0x4a4>
 8008252:	4b7b      	ldr	r3, [pc, #492]	@ (8008440 <tcp_process+0x594>)
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	2b00      	cmp	r3, #0
 800825e:	dc77      	bgt.n	8008350 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2204      	movs	r2, #4
 8008264:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800826a:	2b00      	cmp	r3, #0
 800826c:	d102      	bne.n	8008274 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800826e:	23fa      	movs	r3, #250	@ 0xfa
 8008270:	76bb      	strb	r3, [r7, #26]
 8008272:	e01d      	b.n	80082b0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d106      	bne.n	800828c <tcp_process+0x3e0>
 800827e:	4b76      	ldr	r3, [pc, #472]	@ (8008458 <tcp_process+0x5ac>)
 8008280:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8008284:	4975      	ldr	r1, [pc, #468]	@ (800845c <tcp_process+0x5b0>)
 8008286:	4876      	ldr	r0, [pc, #472]	@ (8008460 <tcp_process+0x5b4>)
 8008288:	f005 ff3e 	bl	800e108 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00a      	beq.n	80082ac <tcp_process+0x400>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	6910      	ldr	r0, [r2, #16]
 80082a0:	2200      	movs	r2, #0
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	4798      	blx	r3
 80082a6:	4603      	mov	r3, r0
 80082a8:	76bb      	strb	r3, [r7, #26]
 80082aa:	e001      	b.n	80082b0 <tcp_process+0x404>
 80082ac:	23f0      	movs	r3, #240	@ 0xf0
 80082ae:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80082b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00a      	beq.n	80082ce <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80082b8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80082bc:	f113 0f0d 	cmn.w	r3, #13
 80082c0:	d002      	beq.n	80082c8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7fd ff8c 	bl	80061e0 <tcp_abort>
            }
            return ERR_ABRT;
 80082c8:	f06f 030c 	mvn.w	r3, #12
 80082cc:	e1ce      	b.n	800866c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fae0 	bl	8008894 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80082d4:	4b63      	ldr	r3, [pc, #396]	@ (8008464 <tcp_process+0x5b8>)
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d005      	beq.n	80082e8 <tcp_process+0x43c>
            recv_acked--;
 80082dc:	4b61      	ldr	r3, [pc, #388]	@ (8008464 <tcp_process+0x5b8>)
 80082de:	881b      	ldrh	r3, [r3, #0]
 80082e0:	3b01      	subs	r3, #1
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	4b5f      	ldr	r3, [pc, #380]	@ (8008464 <tcp_process+0x5b8>)
 80082e6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80082ec:	009a      	lsls	r2, r3, #2
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80082f2:	005b      	lsls	r3, r3, #1
 80082f4:	f241 111c 	movw	r1, #4380	@ 0x111c
 80082f8:	428b      	cmp	r3, r1
 80082fa:	bf38      	it	cc
 80082fc:	460b      	movcc	r3, r1
 80082fe:	429a      	cmp	r2, r3
 8008300:	d204      	bcs.n	800830c <tcp_process+0x460>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	b29b      	uxth	r3, r3
 800830a:	e00d      	b.n	8008328 <tcp_process+0x47c>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008310:	005b      	lsls	r3, r3, #1
 8008312:	f241 121c 	movw	r2, #4380	@ 0x111c
 8008316:	4293      	cmp	r3, r2
 8008318:	d904      	bls.n	8008324 <tcp_process+0x478>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800831e:	005b      	lsls	r3, r3, #1
 8008320:	b29b      	uxth	r3, r3
 8008322:	e001      	b.n	8008328 <tcp_process+0x47c>
 8008324:	f241 131c 	movw	r3, #4380	@ 0x111c
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800832e:	4b4e      	ldr	r3, [pc, #312]	@ (8008468 <tcp_process+0x5bc>)
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	f003 0320 	and.w	r3, r3, #32
 8008336:	2b00      	cmp	r3, #0
 8008338:	d037      	beq.n	80083aa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	8b5b      	ldrh	r3, [r3, #26]
 800833e:	f043 0302 	orr.w	r3, r3, #2
 8008342:	b29a      	uxth	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2207      	movs	r2, #7
 800834c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800834e:	e02c      	b.n	80083aa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008350:	4b3b      	ldr	r3, [pc, #236]	@ (8008440 <tcp_process+0x594>)
 8008352:	6819      	ldr	r1, [r3, #0]
 8008354:	4b3b      	ldr	r3, [pc, #236]	@ (8008444 <tcp_process+0x598>)
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	461a      	mov	r2, r3
 800835a:	4b3b      	ldr	r3, [pc, #236]	@ (8008448 <tcp_process+0x59c>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008360:	4b3a      	ldr	r3, [pc, #232]	@ (800844c <tcp_process+0x5a0>)
 8008362:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008364:	885b      	ldrh	r3, [r3, #2]
 8008366:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008368:	4a38      	ldr	r2, [pc, #224]	@ (800844c <tcp_process+0x5a0>)
 800836a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800836c:	8812      	ldrh	r2, [r2, #0]
 800836e:	b292      	uxth	r2, r2
 8008370:	9202      	str	r2, [sp, #8]
 8008372:	9301      	str	r3, [sp, #4]
 8008374:	4b36      	ldr	r3, [pc, #216]	@ (8008450 <tcp_process+0x5a4>)
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	4b36      	ldr	r3, [pc, #216]	@ (8008454 <tcp_process+0x5a8>)
 800837a:	4602      	mov	r2, r0
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f002 fbcb 	bl	800ab18 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008382:	e167      	b.n	8008654 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008384:	4b2d      	ldr	r3, [pc, #180]	@ (800843c <tcp_process+0x590>)
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	f003 0302 	and.w	r3, r3, #2
 800838c:	2b00      	cmp	r3, #0
 800838e:	f000 8161 	beq.w	8008654 <tcp_process+0x7a8>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008396:	1e5a      	subs	r2, r3, #1
 8008398:	4b2b      	ldr	r3, [pc, #172]	@ (8008448 <tcp_process+0x59c>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	429a      	cmp	r2, r3
 800839e:	f040 8159 	bne.w	8008654 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f002 f9b2 	bl	800a70c <tcp_rexmit>
      break;
 80083a8:	e154      	b.n	8008654 <tcp_process+0x7a8>
 80083aa:	e153      	b.n	8008654 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fa71 	bl	8008894 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80083b2:	4b2d      	ldr	r3, [pc, #180]	@ (8008468 <tcp_process+0x5bc>)
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	f003 0320 	and.w	r3, r3, #32
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f000 814c 	beq.w	8008658 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	8b5b      	ldrh	r3, [r3, #26]
 80083c4:	f043 0302 	orr.w	r3, r3, #2
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2207      	movs	r2, #7
 80083d2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80083d4:	e140      	b.n	8008658 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fa5c 	bl	8008894 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80083dc:	4b22      	ldr	r3, [pc, #136]	@ (8008468 <tcp_process+0x5bc>)
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	f003 0320 	and.w	r3, r3, #32
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d071      	beq.n	80084cc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80083e8:	4b14      	ldr	r3, [pc, #80]	@ (800843c <tcp_process+0x590>)
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	f003 0310 	and.w	r3, r3, #16
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d060      	beq.n	80084b6 <tcp_process+0x60a>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083f8:	4b11      	ldr	r3, [pc, #68]	@ (8008440 <tcp_process+0x594>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d15a      	bne.n	80084b6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008404:	2b00      	cmp	r3, #0
 8008406:	d156      	bne.n	80084b6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	8b5b      	ldrh	r3, [r3, #26]
 800840c:	f043 0302 	orr.w	r3, r3, #2
 8008410:	b29a      	uxth	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7fe fdbc 	bl	8006f94 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800841c:	4b13      	ldr	r3, [pc, #76]	@ (800846c <tcp_process+0x5c0>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	429a      	cmp	r2, r3
 8008424:	d105      	bne.n	8008432 <tcp_process+0x586>
 8008426:	4b11      	ldr	r3, [pc, #68]	@ (800846c <tcp_process+0x5c0>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	4a0f      	ldr	r2, [pc, #60]	@ (800846c <tcp_process+0x5c0>)
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	e02e      	b.n	8008490 <tcp_process+0x5e4>
 8008432:	4b0e      	ldr	r3, [pc, #56]	@ (800846c <tcp_process+0x5c0>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	617b      	str	r3, [r7, #20]
 8008438:	e027      	b.n	800848a <tcp_process+0x5de>
 800843a:	bf00      	nop
 800843c:	200082d4 	.word	0x200082d4
 8008440:	200082cc 	.word	0x200082cc
 8008444:	200082d2 	.word	0x200082d2
 8008448:	200082c8 	.word	0x200082c8
 800844c:	200082b8 	.word	0x200082b8
 8008450:	20004d30 	.word	0x20004d30
 8008454:	20004d34 	.word	0x20004d34
 8008458:	08010168 	.word	0x08010168
 800845c:	08010408 	.word	0x08010408
 8008460:	080101b4 	.word	0x080101b4
 8008464:	200082d0 	.word	0x200082d0
 8008468:	200082d5 	.word	0x200082d5
 800846c:	2000829c 	.word	0x2000829c
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	429a      	cmp	r2, r3
 8008478:	d104      	bne.n	8008484 <tcp_process+0x5d8>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68da      	ldr	r2, [r3, #12]
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	60da      	str	r2, [r3, #12]
 8008482:	e005      	b.n	8008490 <tcp_process+0x5e4>
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	617b      	str	r3, [r7, #20]
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1ef      	bne.n	8008470 <tcp_process+0x5c4>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	60da      	str	r2, [r3, #12]
 8008496:	4b77      	ldr	r3, [pc, #476]	@ (8008674 <tcp_process+0x7c8>)
 8008498:	2201      	movs	r2, #1
 800849a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	220a      	movs	r2, #10
 80084a0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80084a2:	4b75      	ldr	r3, [pc, #468]	@ (8008678 <tcp_process+0x7cc>)
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	60da      	str	r2, [r3, #12]
 80084aa:	4a73      	ldr	r2, [pc, #460]	@ (8008678 <tcp_process+0x7cc>)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	f002 fcf4 	bl	800ae9c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80084b4:	e0d2      	b.n	800865c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	8b5b      	ldrh	r3, [r3, #26]
 80084ba:	f043 0302 	orr.w	r3, r3, #2
 80084be:	b29a      	uxth	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2208      	movs	r2, #8
 80084c8:	751a      	strb	r2, [r3, #20]
      break;
 80084ca:	e0c7      	b.n	800865c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80084cc:	4b6b      	ldr	r3, [pc, #428]	@ (800867c <tcp_process+0x7d0>)
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	f003 0310 	and.w	r3, r3, #16
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f000 80c1 	beq.w	800865c <tcp_process+0x7b0>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084de:	4b68      	ldr	r3, [pc, #416]	@ (8008680 <tcp_process+0x7d4>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	f040 80ba 	bne.w	800865c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f040 80b5 	bne.w	800865c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2206      	movs	r2, #6
 80084f6:	751a      	strb	r2, [r3, #20]
      break;
 80084f8:	e0b0      	b.n	800865c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f9ca 	bl	8008894 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008500:	4b60      	ldr	r3, [pc, #384]	@ (8008684 <tcp_process+0x7d8>)
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	f003 0320 	and.w	r3, r3, #32
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 80a9 	beq.w	8008660 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	8b5b      	ldrh	r3, [r3, #26]
 8008512:	f043 0302 	orr.w	r3, r3, #2
 8008516:	b29a      	uxth	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7fe fd39 	bl	8006f94 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008522:	4b59      	ldr	r3, [pc, #356]	@ (8008688 <tcp_process+0x7dc>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	429a      	cmp	r2, r3
 800852a:	d105      	bne.n	8008538 <tcp_process+0x68c>
 800852c:	4b56      	ldr	r3, [pc, #344]	@ (8008688 <tcp_process+0x7dc>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	4a55      	ldr	r2, [pc, #340]	@ (8008688 <tcp_process+0x7dc>)
 8008534:	6013      	str	r3, [r2, #0]
 8008536:	e013      	b.n	8008560 <tcp_process+0x6b4>
 8008538:	4b53      	ldr	r3, [pc, #332]	@ (8008688 <tcp_process+0x7dc>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	613b      	str	r3, [r7, #16]
 800853e:	e00c      	b.n	800855a <tcp_process+0x6ae>
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	429a      	cmp	r2, r3
 8008548:	d104      	bne.n	8008554 <tcp_process+0x6a8>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	60da      	str	r2, [r3, #12]
 8008552:	e005      	b.n	8008560 <tcp_process+0x6b4>
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	613b      	str	r3, [r7, #16]
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1ef      	bne.n	8008540 <tcp_process+0x694>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	60da      	str	r2, [r3, #12]
 8008566:	4b43      	ldr	r3, [pc, #268]	@ (8008674 <tcp_process+0x7c8>)
 8008568:	2201      	movs	r2, #1
 800856a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	220a      	movs	r2, #10
 8008570:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008572:	4b41      	ldr	r3, [pc, #260]	@ (8008678 <tcp_process+0x7cc>)
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	60da      	str	r2, [r3, #12]
 800857a:	4a3f      	ldr	r2, [pc, #252]	@ (8008678 <tcp_process+0x7cc>)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6013      	str	r3, [r2, #0]
 8008580:	f002 fc8c 	bl	800ae9c <tcp_timer_needed>
      }
      break;
 8008584:	e06c      	b.n	8008660 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f984 	bl	8008894 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800858c:	4b3b      	ldr	r3, [pc, #236]	@ (800867c <tcp_process+0x7d0>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	f003 0310 	and.w	r3, r3, #16
 8008594:	2b00      	cmp	r3, #0
 8008596:	d065      	beq.n	8008664 <tcp_process+0x7b8>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800859c:	4b38      	ldr	r3, [pc, #224]	@ (8008680 <tcp_process+0x7d4>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d15f      	bne.n	8008664 <tcp_process+0x7b8>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d15b      	bne.n	8008664 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f7fe fcf1 	bl	8006f94 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80085b2:	4b35      	ldr	r3, [pc, #212]	@ (8008688 <tcp_process+0x7dc>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d105      	bne.n	80085c8 <tcp_process+0x71c>
 80085bc:	4b32      	ldr	r3, [pc, #200]	@ (8008688 <tcp_process+0x7dc>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	4a31      	ldr	r2, [pc, #196]	@ (8008688 <tcp_process+0x7dc>)
 80085c4:	6013      	str	r3, [r2, #0]
 80085c6:	e013      	b.n	80085f0 <tcp_process+0x744>
 80085c8:	4b2f      	ldr	r3, [pc, #188]	@ (8008688 <tcp_process+0x7dc>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	60fb      	str	r3, [r7, #12]
 80085ce:	e00c      	b.n	80085ea <tcp_process+0x73e>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d104      	bne.n	80085e4 <tcp_process+0x738>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68da      	ldr	r2, [r3, #12]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	60da      	str	r2, [r3, #12]
 80085e2:	e005      	b.n	80085f0 <tcp_process+0x744>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	60fb      	str	r3, [r7, #12]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1ef      	bne.n	80085d0 <tcp_process+0x724>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	60da      	str	r2, [r3, #12]
 80085f6:	4b1f      	ldr	r3, [pc, #124]	@ (8008674 <tcp_process+0x7c8>)
 80085f8:	2201      	movs	r2, #1
 80085fa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	220a      	movs	r2, #10
 8008600:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008602:	4b1d      	ldr	r3, [pc, #116]	@ (8008678 <tcp_process+0x7cc>)
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	60da      	str	r2, [r3, #12]
 800860a:	4a1b      	ldr	r2, [pc, #108]	@ (8008678 <tcp_process+0x7cc>)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6013      	str	r3, [r2, #0]
 8008610:	f002 fc44 	bl	800ae9c <tcp_timer_needed>
      }
      break;
 8008614:	e026      	b.n	8008664 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f93c 	bl	8008894 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800861c:	4b17      	ldr	r3, [pc, #92]	@ (800867c <tcp_process+0x7d0>)
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	f003 0310 	and.w	r3, r3, #16
 8008624:	2b00      	cmp	r3, #0
 8008626:	d01f      	beq.n	8008668 <tcp_process+0x7bc>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800862c:	4b14      	ldr	r3, [pc, #80]	@ (8008680 <tcp_process+0x7d4>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	429a      	cmp	r2, r3
 8008632:	d119      	bne.n	8008668 <tcp_process+0x7bc>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008638:	2b00      	cmp	r3, #0
 800863a:	d115      	bne.n	8008668 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800863c:	4b11      	ldr	r3, [pc, #68]	@ (8008684 <tcp_process+0x7d8>)
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	f043 0310 	orr.w	r3, r3, #16
 8008644:	b2da      	uxtb	r2, r3
 8008646:	4b0f      	ldr	r3, [pc, #60]	@ (8008684 <tcp_process+0x7d8>)
 8008648:	701a      	strb	r2, [r3, #0]
      }
      break;
 800864a:	e00d      	b.n	8008668 <tcp_process+0x7bc>
    default:
      break;
 800864c:	bf00      	nop
 800864e:	e00c      	b.n	800866a <tcp_process+0x7be>
      break;
 8008650:	bf00      	nop
 8008652:	e00a      	b.n	800866a <tcp_process+0x7be>
      break;
 8008654:	bf00      	nop
 8008656:	e008      	b.n	800866a <tcp_process+0x7be>
      break;
 8008658:	bf00      	nop
 800865a:	e006      	b.n	800866a <tcp_process+0x7be>
      break;
 800865c:	bf00      	nop
 800865e:	e004      	b.n	800866a <tcp_process+0x7be>
      break;
 8008660:	bf00      	nop
 8008662:	e002      	b.n	800866a <tcp_process+0x7be>
      break;
 8008664:	bf00      	nop
 8008666:	e000      	b.n	800866a <tcp_process+0x7be>
      break;
 8008668:	bf00      	nop
  }
  return ERR_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3724      	adds	r7, #36	@ 0x24
 8008670:	46bd      	mov	sp, r7
 8008672:	bd90      	pop	{r4, r7, pc}
 8008674:	200082a4 	.word	0x200082a4
 8008678:	200082a0 	.word	0x200082a0
 800867c:	200082d4 	.word	0x200082d4
 8008680:	200082cc 	.word	0x200082cc
 8008684:	200082d5 	.word	0x200082d5
 8008688:	2000829c 	.word	0x2000829c

0800868c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800868c:	b590      	push	{r4, r7, lr}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d106      	bne.n	80086aa <tcp_oos_insert_segment+0x1e>
 800869c:	4b3b      	ldr	r3, [pc, #236]	@ (800878c <tcp_oos_insert_segment+0x100>)
 800869e:	f240 421f 	movw	r2, #1055	@ 0x41f
 80086a2:	493b      	ldr	r1, [pc, #236]	@ (8008790 <tcp_oos_insert_segment+0x104>)
 80086a4:	483b      	ldr	r0, [pc, #236]	@ (8008794 <tcp_oos_insert_segment+0x108>)
 80086a6:	f005 fd2f 	bl	800e108 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	899b      	ldrh	r3, [r3, #12]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fb fc2c 	bl	8003f10 <lwip_htons>
 80086b8:	4603      	mov	r3, r0
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	f003 0301 	and.w	r3, r3, #1
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d028      	beq.n	8008716 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80086c4:	6838      	ldr	r0, [r7, #0]
 80086c6:	f7fe fa63 	bl	8006b90 <tcp_segs_free>
    next = NULL;
 80086ca:	2300      	movs	r3, #0
 80086cc:	603b      	str	r3, [r7, #0]
 80086ce:	e056      	b.n	800877e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	899b      	ldrh	r3, [r3, #12]
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fb fc19 	bl	8003f10 <lwip_htons>
 80086de:	4603      	mov	r3, r0
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00d      	beq.n	8008706 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	899b      	ldrh	r3, [r3, #12]
 80086f0:	b29c      	uxth	r4, r3
 80086f2:	2001      	movs	r0, #1
 80086f4:	f7fb fc0c 	bl	8003f10 <lwip_htons>
 80086f8:	4603      	mov	r3, r0
 80086fa:	461a      	mov	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	4322      	orrs	r2, r4
 8008702:	b292      	uxth	r2, r2
 8008704:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f7fe fa52 	bl	8006bba <tcp_seg_free>
    while (next &&
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00e      	beq.n	800873a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	891b      	ldrh	r3, [r3, #8]
 8008720:	461a      	mov	r2, r3
 8008722:	4b1d      	ldr	r3, [pc, #116]	@ (8008798 <tcp_oos_insert_segment+0x10c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	441a      	add	r2, r3
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	8909      	ldrh	r1, [r1, #8]
 8008732:	440b      	add	r3, r1
 8008734:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008736:	2b00      	cmp	r3, #0
 8008738:	daca      	bge.n	80086d0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d01e      	beq.n	800877e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	891b      	ldrh	r3, [r3, #8]
 8008744:	461a      	mov	r2, r3
 8008746:	4b14      	ldr	r3, [pc, #80]	@ (8008798 <tcp_oos_insert_segment+0x10c>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	441a      	add	r2, r3
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008754:	2b00      	cmp	r3, #0
 8008756:	dd12      	ble.n	800877e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	b29a      	uxth	r2, r3
 8008760:	4b0d      	ldr	r3, [pc, #52]	@ (8008798 <tcp_oos_insert_segment+0x10c>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	b29b      	uxth	r3, r3
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	b29a      	uxth	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	685a      	ldr	r2, [r3, #4]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	891b      	ldrh	r3, [r3, #8]
 8008776:	4619      	mov	r1, r3
 8008778:	4610      	mov	r0, r2
 800877a:	f7fc fd81 	bl	8005280 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	683a      	ldr	r2, [r7, #0]
 8008782:	601a      	str	r2, [r3, #0]
}
 8008784:	bf00      	nop
 8008786:	3714      	adds	r7, #20
 8008788:	46bd      	mov	sp, r7
 800878a:	bd90      	pop	{r4, r7, pc}
 800878c:	08010168 	.word	0x08010168
 8008790:	08010428 	.word	0x08010428
 8008794:	080101b4 	.word	0x080101b4
 8008798:	200082c8 	.word	0x200082c8

0800879c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800879c:	b5b0      	push	{r4, r5, r7, lr}
 800879e:	b086      	sub	sp, #24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
 80087a8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80087aa:	e03e      	b.n	800882a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7fc ff6e 	bl	800569c <pbuf_clen>
 80087c0:	4603      	mov	r3, r0
 80087c2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80087ca:	8a7a      	ldrh	r2, [r7, #18]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d906      	bls.n	80087de <tcp_free_acked_segments+0x42>
 80087d0:	4b2a      	ldr	r3, [pc, #168]	@ (800887c <tcp_free_acked_segments+0xe0>)
 80087d2:	f240 4257 	movw	r2, #1111	@ 0x457
 80087d6:	492a      	ldr	r1, [pc, #168]	@ (8008880 <tcp_free_acked_segments+0xe4>)
 80087d8:	482a      	ldr	r0, [pc, #168]	@ (8008884 <tcp_free_acked_segments+0xe8>)
 80087da:	f005 fc95 	bl	800e108 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80087e4:	8a7b      	ldrh	r3, [r7, #18]
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	891a      	ldrh	r2, [r3, #8]
 80087f4:	4b24      	ldr	r3, [pc, #144]	@ (8008888 <tcp_free_acked_segments+0xec>)
 80087f6:	881b      	ldrh	r3, [r3, #0]
 80087f8:	4413      	add	r3, r2
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	4b22      	ldr	r3, [pc, #136]	@ (8008888 <tcp_free_acked_segments+0xec>)
 80087fe:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008800:	6978      	ldr	r0, [r7, #20]
 8008802:	f7fe f9da 	bl	8006bba <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00c      	beq.n	800882a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d109      	bne.n	800882a <tcp_free_acked_segments+0x8e>
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d106      	bne.n	800882a <tcp_free_acked_segments+0x8e>
 800881c:	4b17      	ldr	r3, [pc, #92]	@ (800887c <tcp_free_acked_segments+0xe0>)
 800881e:	f240 4261 	movw	r2, #1121	@ 0x461
 8008822:	491a      	ldr	r1, [pc, #104]	@ (800888c <tcp_free_acked_segments+0xf0>)
 8008824:	4817      	ldr	r0, [pc, #92]	@ (8008884 <tcp_free_acked_segments+0xe8>)
 8008826:	f005 fc6f 	bl	800e108 <iprintf>
  while (seg_list != NULL &&
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d020      	beq.n	8008872 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	4618      	mov	r0, r3
 8008838:	f7fb fb7f 	bl	8003f3a <lwip_htonl>
 800883c:	4604      	mov	r4, r0
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	891b      	ldrh	r3, [r3, #8]
 8008842:	461d      	mov	r5, r3
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	899b      	ldrh	r3, [r3, #12]
 800884a:	b29b      	uxth	r3, r3
 800884c:	4618      	mov	r0, r3
 800884e:	f7fb fb5f 	bl	8003f10 <lwip_htons>
 8008852:	4603      	mov	r3, r0
 8008854:	b2db      	uxtb	r3, r3
 8008856:	f003 0303 	and.w	r3, r3, #3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <tcp_free_acked_segments+0xc6>
 800885e:	2301      	movs	r3, #1
 8008860:	e000      	b.n	8008864 <tcp_free_acked_segments+0xc8>
 8008862:	2300      	movs	r3, #0
 8008864:	442b      	add	r3, r5
 8008866:	18e2      	adds	r2, r4, r3
 8008868:	4b09      	ldr	r3, [pc, #36]	@ (8008890 <tcp_free_acked_segments+0xf4>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800886e:	2b00      	cmp	r3, #0
 8008870:	dd9c      	ble.n	80087ac <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008872:	68bb      	ldr	r3, [r7, #8]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3718      	adds	r7, #24
 8008878:	46bd      	mov	sp, r7
 800887a:	bdb0      	pop	{r4, r5, r7, pc}
 800887c:	08010168 	.word	0x08010168
 8008880:	08010450 	.word	0x08010450
 8008884:	080101b4 	.word	0x080101b4
 8008888:	200082d0 	.word	0x200082d0
 800888c:	08010478 	.word	0x08010478
 8008890:	200082cc 	.word	0x200082cc

08008894 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008894:	b5b0      	push	{r4, r5, r7, lr}
 8008896:	b094      	sub	sp, #80	@ 0x50
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800889c:	2300      	movs	r3, #0
 800889e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d106      	bne.n	80088b4 <tcp_receive+0x20>
 80088a6:	4b91      	ldr	r3, [pc, #580]	@ (8008aec <tcp_receive+0x258>)
 80088a8:	f240 427b 	movw	r2, #1147	@ 0x47b
 80088ac:	4990      	ldr	r1, [pc, #576]	@ (8008af0 <tcp_receive+0x25c>)
 80088ae:	4891      	ldr	r0, [pc, #580]	@ (8008af4 <tcp_receive+0x260>)
 80088b0:	f005 fc2a 	bl	800e108 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	7d1b      	ldrb	r3, [r3, #20]
 80088b8:	2b03      	cmp	r3, #3
 80088ba:	d806      	bhi.n	80088ca <tcp_receive+0x36>
 80088bc:	4b8b      	ldr	r3, [pc, #556]	@ (8008aec <tcp_receive+0x258>)
 80088be:	f240 427c 	movw	r2, #1148	@ 0x47c
 80088c2:	498d      	ldr	r1, [pc, #564]	@ (8008af8 <tcp_receive+0x264>)
 80088c4:	488b      	ldr	r0, [pc, #556]	@ (8008af4 <tcp_receive+0x260>)
 80088c6:	f005 fc1f 	bl	800e108 <iprintf>

  if (flags & TCP_ACK) {
 80088ca:	4b8c      	ldr	r3, [pc, #560]	@ (8008afc <tcp_receive+0x268>)
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	f003 0310 	and.w	r3, r3, #16
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f000 8264 	beq.w	8008da0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80088de:	461a      	mov	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088e4:	4413      	add	r3, r2
 80088e6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80088ec:	4b84      	ldr	r3, [pc, #528]	@ (8008b00 <tcp_receive+0x26c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	db1b      	blt.n	800892e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80088fa:	4b81      	ldr	r3, [pc, #516]	@ (8008b00 <tcp_receive+0x26c>)
 80088fc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80088fe:	429a      	cmp	r2, r3
 8008900:	d106      	bne.n	8008910 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008906:	4b7f      	ldr	r3, [pc, #508]	@ (8008b04 <tcp_receive+0x270>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	2b00      	cmp	r3, #0
 800890e:	db0e      	blt.n	800892e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008914:	4b7b      	ldr	r3, [pc, #492]	@ (8008b04 <tcp_receive+0x270>)
 8008916:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008918:	429a      	cmp	r2, r3
 800891a:	d125      	bne.n	8008968 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800891c:	4b7a      	ldr	r3, [pc, #488]	@ (8008b08 <tcp_receive+0x274>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	89db      	ldrh	r3, [r3, #14]
 8008922:	b29a      	uxth	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800892a:	429a      	cmp	r2, r3
 800892c:	d91c      	bls.n	8008968 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800892e:	4b76      	ldr	r3, [pc, #472]	@ (8008b08 <tcp_receive+0x274>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	89db      	ldrh	r3, [r3, #14]
 8008934:	b29a      	uxth	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008948:	429a      	cmp	r2, r3
 800894a:	d205      	bcs.n	8008958 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8008958:	4b69      	ldr	r3, [pc, #420]	@ (8008b00 <tcp_receive+0x26c>)
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8008960:	4b68      	ldr	r3, [pc, #416]	@ (8008b04 <tcp_receive+0x270>)
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008968:	4b66      	ldr	r3, [pc, #408]	@ (8008b04 <tcp_receive+0x270>)
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	dc58      	bgt.n	8008a28 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008976:	4b65      	ldr	r3, [pc, #404]	@ (8008b0c <tcp_receive+0x278>)
 8008978:	881b      	ldrh	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d14b      	bne.n	8008a16 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8008988:	4413      	add	r3, r2
 800898a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800898c:	429a      	cmp	r2, r3
 800898e:	d142      	bne.n	8008a16 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008996:	2b00      	cmp	r3, #0
 8008998:	db3d      	blt.n	8008a16 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800899e:	4b59      	ldr	r3, [pc, #356]	@ (8008b04 <tcp_receive+0x270>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d137      	bne.n	8008a16 <tcp_receive+0x182>
              found_dupack = 1;
 80089a6:	2301      	movs	r3, #1
 80089a8:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80089b0:	2bff      	cmp	r3, #255	@ 0xff
 80089b2:	d007      	beq.n	80089c4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80089ba:	3301      	adds	r3, #1
 80089bc:	b2da      	uxtb	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	d91b      	bls.n	8008a06 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80089d8:	4413      	add	r3, r2
 80089da:	b29a      	uxth	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d30a      	bcc.n	80089fc <tcp_receive+0x168>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80089f0:	4413      	add	r3, r2
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80089fa:	e004      	b.n	8008a06 <tcp_receive+0x172>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008a02:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d902      	bls.n	8008a16 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f001 fee7 	bl	800a7e4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008a16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f040 8161 	bne.w	8008ce0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a26:	e15b      	b.n	8008ce0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008a28:	4b36      	ldr	r3, [pc, #216]	@ (8008b04 <tcp_receive+0x270>)
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	3b01      	subs	r3, #1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f2c0 814e 	blt.w	8008cd6 <tcp_receive+0x442>
 8008a3a:	4b32      	ldr	r3, [pc, #200]	@ (8008b04 <tcp_receive+0x270>)
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f300 8146 	bgt.w	8008cd6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	8b5b      	ldrh	r3, [r3, #26]
 8008a4e:	f003 0304 	and.w	r3, r3, #4
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d010      	beq.n	8008a78 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	8b5b      	ldrh	r3, [r3, #26]
 8008a5a:	f023 0304 	bic.w	r3, r3, #4
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008a86:	10db      	asrs	r3, r3, #3
 8008a88:	b21b      	sxth	r3, r3
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	4413      	add	r3, r2
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	b21a      	sxth	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008aa0:	4b18      	ldr	r3, [pc, #96]	@ (8008b04 <tcp_receive+0x270>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8008ab8:	4b12      	ldr	r3, [pc, #72]	@ (8008b04 <tcp_receive+0x270>)
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	7d1b      	ldrb	r3, [r3, #20]
 8008ac4:	2b03      	cmp	r3, #3
 8008ac6:	f240 8097 	bls.w	8008bf8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d245      	bcs.n	8008b66 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	8b5b      	ldrh	r3, [r3, #26]
 8008ade:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d014      	beq.n	8008b10 <tcp_receive+0x27c>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e013      	b.n	8008b12 <tcp_receive+0x27e>
 8008aea:	bf00      	nop
 8008aec:	08010168 	.word	0x08010168
 8008af0:	08010498 	.word	0x08010498
 8008af4:	080101b4 	.word	0x080101b4
 8008af8:	080104b4 	.word	0x080104b4
 8008afc:	200082d4 	.word	0x200082d4
 8008b00:	200082c8 	.word	0x200082c8
 8008b04:	200082cc 	.word	0x200082cc
 8008b08:	200082b8 	.word	0x200082b8
 8008b0c:	200082d2 	.word	0x200082d2
 8008b10:	2302      	movs	r3, #2
 8008b12:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008b16:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8008b1a:	b29a      	uxth	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008b20:	fb12 f303 	smulbb	r3, r2, r3
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	bf28      	it	cs
 8008b2c:	4613      	movcs	r3, r2
 8008b2e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008b36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008b38:	4413      	add	r3, r2
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d309      	bcc.n	8008b5a <tcp_receive+0x2c6>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008b4c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008b4e:	4413      	add	r3, r2
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008b58:	e04e      	b.n	8008bf8 <tcp_receive+0x364>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008b60:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008b64:	e048      	b.n	8008bf8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008b6c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008b6e:	4413      	add	r3, r2
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d309      	bcc.n	8008b90 <tcp_receive+0x2fc>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008b82:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008b84:	4413      	add	r3, r2
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008b8e:	e004      	b.n	8008b9a <tcp_receive+0x306>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008b96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d326      	bcc.n	8008bf8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008bca:	4413      	add	r3, r2
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d30a      	bcc.n	8008bee <tcp_receive+0x35a>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008be2:	4413      	add	r3, r2
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008bec:	e004      	b.n	8008bf8 <tcp_receive+0x364>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008bf4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c00:	4a98      	ldr	r2, [pc, #608]	@ (8008e64 <tcp_receive+0x5d0>)
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7ff fdca 	bl	800879c <tcp_free_acked_segments>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c16:	4a94      	ldr	r2, [pc, #592]	@ (8008e68 <tcp_receive+0x5d4>)
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7ff fdbf 	bl	800879c <tcp_free_acked_segments>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d104      	bne.n	8008c36 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008c32:	861a      	strh	r2, [r3, #48]	@ 0x30
 8008c34:	e002      	b.n	8008c3c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d103      	bne.n	8008c52 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8008c58:	4b84      	ldr	r3, [pc, #528]	@ (8008e6c <tcp_receive+0x5d8>)
 8008c5a:	881b      	ldrh	r3, [r3, #0]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	8b5b      	ldrh	r3, [r3, #26]
 8008c6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d035      	beq.n	8008cde <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d118      	bne.n	8008cac <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00c      	beq.n	8008c9c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fb f953 	bl	8003f3a <lwip_htonl>
 8008c94:	4603      	mov	r3, r0
 8008c96:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	dc20      	bgt.n	8008cde <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	8b5b      	ldrh	r3, [r3, #26]
 8008ca0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008caa:	e018      	b.n	8008cde <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fb f93e 	bl	8003f3a <lwip_htonl>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	1ae3      	subs	r3, r4, r3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	dc0b      	bgt.n	8008cde <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	8b5b      	ldrh	r3, [r3, #26]
 8008cca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008cd4:	e003      	b.n	8008cde <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f001 ff70 	bl	800abbc <tcp_send_empty_ack>
 8008cdc:	e000      	b.n	8008ce0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008cde:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d05b      	beq.n	8008da0 <tcp_receive+0x50c>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cec:	4b60      	ldr	r3, [pc, #384]	@ (8008e70 <tcp_receive+0x5dc>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	da54      	bge.n	8008da0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008cf6:	4b5f      	ldr	r3, [pc, #380]	@ (8008e74 <tcp_receive+0x5e0>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	1ad3      	subs	r3, r2, r3
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008d0a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008d14:	10db      	asrs	r3, r3, #3
 8008d16:	b21b      	sxth	r3, r3
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008d2e:	4413      	add	r3, r2
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	b21a      	sxth	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8008d38:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	da05      	bge.n	8008d4c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8008d40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008d44:	425b      	negs	r3, r3
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008d4c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008d56:	109b      	asrs	r3, r3, #2
 8008d58:	b21b      	sxth	r3, r3
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008d70:	4413      	add	r3, r2
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	b21a      	sxth	r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008d80:	10db      	asrs	r3, r3, #3
 8008d82:	b21b      	sxth	r3, r3
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	4413      	add	r3, r2
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	b21a      	sxth	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008da0:	4b35      	ldr	r3, [pc, #212]	@ (8008e78 <tcp_receive+0x5e4>)
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f000 84df 	beq.w	8009768 <tcp_receive+0xed4>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	7d1b      	ldrb	r3, [r3, #20]
 8008dae:	2b06      	cmp	r3, #6
 8008db0:	f200 84da 	bhi.w	8009768 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008db8:	4b30      	ldr	r3, [pc, #192]	@ (8008e7c <tcp_receive+0x5e8>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f2c0 808f 	blt.w	8008ee4 <tcp_receive+0x650>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008dca:	4b2b      	ldr	r3, [pc, #172]	@ (8008e78 <tcp_receive+0x5e4>)
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8008e7c <tcp_receive+0x5e8>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	440b      	add	r3, r1
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	3301      	adds	r3, #1
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f300 8082 	bgt.w	8008ee4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008de0:	4b27      	ldr	r3, [pc, #156]	@ (8008e80 <tcp_receive+0x5ec>)
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008dea:	4b24      	ldr	r3, [pc, #144]	@ (8008e7c <tcp_receive+0x5e8>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	1ad3      	subs	r3, r2, r3
 8008df0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008df2:	4b23      	ldr	r3, [pc, #140]	@ (8008e80 <tcp_receive+0x5ec>)
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d106      	bne.n	8008e08 <tcp_receive+0x574>
 8008dfa:	4b22      	ldr	r3, [pc, #136]	@ (8008e84 <tcp_receive+0x5f0>)
 8008dfc:	f240 5294 	movw	r2, #1428	@ 0x594
 8008e00:	4921      	ldr	r1, [pc, #132]	@ (8008e88 <tcp_receive+0x5f4>)
 8008e02:	4822      	ldr	r0, [pc, #136]	@ (8008e8c <tcp_receive+0x5f8>)
 8008e04:	f005 f980 	bl	800e108 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d906      	bls.n	8008e20 <tcp_receive+0x58c>
 8008e12:	4b1c      	ldr	r3, [pc, #112]	@ (8008e84 <tcp_receive+0x5f0>)
 8008e14:	f240 5295 	movw	r2, #1429	@ 0x595
 8008e18:	491d      	ldr	r1, [pc, #116]	@ (8008e90 <tcp_receive+0x5fc>)
 8008e1a:	481c      	ldr	r0, [pc, #112]	@ (8008e8c <tcp_receive+0x5f8>)
 8008e1c:	f005 f974 	bl	800e108 <iprintf>
      off = (u16_t)off32;
 8008e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e22:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008e26:	4b16      	ldr	r3, [pc, #88]	@ (8008e80 <tcp_receive+0x5ec>)
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	891b      	ldrh	r3, [r3, #8]
 8008e2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d906      	bls.n	8008e42 <tcp_receive+0x5ae>
 8008e34:	4b13      	ldr	r3, [pc, #76]	@ (8008e84 <tcp_receive+0x5f0>)
 8008e36:	f240 5297 	movw	r2, #1431	@ 0x597
 8008e3a:	4916      	ldr	r1, [pc, #88]	@ (8008e94 <tcp_receive+0x600>)
 8008e3c:	4813      	ldr	r0, [pc, #76]	@ (8008e8c <tcp_receive+0x5f8>)
 8008e3e:	f005 f963 	bl	800e108 <iprintf>
      inseg.len -= off;
 8008e42:	4b0f      	ldr	r3, [pc, #60]	@ (8008e80 <tcp_receive+0x5ec>)
 8008e44:	891a      	ldrh	r2, [r3, #8]
 8008e46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8008e80 <tcp_receive+0x5ec>)
 8008e50:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008e52:	4b0b      	ldr	r3, [pc, #44]	@ (8008e80 <tcp_receive+0x5ec>)
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	891a      	ldrh	r2, [r3, #8]
 8008e58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8008e60:	e02a      	b.n	8008eb8 <tcp_receive+0x624>
 8008e62:	bf00      	nop
 8008e64:	080104d0 	.word	0x080104d0
 8008e68:	080104d8 	.word	0x080104d8
 8008e6c:	200082d0 	.word	0x200082d0
 8008e70:	200082cc 	.word	0x200082cc
 8008e74:	20008290 	.word	0x20008290
 8008e78:	200082d2 	.word	0x200082d2
 8008e7c:	200082c8 	.word	0x200082c8
 8008e80:	200082a8 	.word	0x200082a8
 8008e84:	08010168 	.word	0x08010168
 8008e88:	080104e0 	.word	0x080104e0
 8008e8c:	080101b4 	.word	0x080101b4
 8008e90:	080104f0 	.word	0x080104f0
 8008e94:	08010500 	.word	0x08010500
        off -= p->len;
 8008e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e9a:	895b      	ldrh	r3, [r3, #10]
 8008e9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008ea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ea8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008eaa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008eae:	2200      	movs	r2, #0
 8008eb0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8008eb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8008eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008eba:	895b      	ldrh	r3, [r3, #10]
 8008ebc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d8e9      	bhi.n	8008e98 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008ec4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008ec8:	4619      	mov	r1, r3
 8008eca:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8008ecc:	f7fc fad8 	bl	8005480 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed4:	4a90      	ldr	r2, [pc, #576]	@ (8009118 <tcp_receive+0x884>)
 8008ed6:	6013      	str	r3, [r2, #0]
 8008ed8:	4b90      	ldr	r3, [pc, #576]	@ (800911c <tcp_receive+0x888>)
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	4a8e      	ldr	r2, [pc, #568]	@ (8009118 <tcp_receive+0x884>)
 8008ede:	6812      	ldr	r2, [r2, #0]
 8008ee0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008ee2:	e00d      	b.n	8008f00 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008ee4:	4b8c      	ldr	r3, [pc, #560]	@ (8009118 <tcp_receive+0x884>)
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eec:	1ad3      	subs	r3, r2, r3
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	da06      	bge.n	8008f00 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	8b5b      	ldrh	r3, [r3, #26]
 8008ef6:	f043 0302 	orr.w	r3, r3, #2
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008f00:	4b85      	ldr	r3, [pc, #532]	@ (8009118 <tcp_receive+0x884>)
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f2c0 8427 	blt.w	800975e <tcp_receive+0xeca>
 8008f10:	4b81      	ldr	r3, [pc, #516]	@ (8009118 <tcp_receive+0x884>)
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f18:	6879      	ldr	r1, [r7, #4]
 8008f1a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008f1c:	440b      	add	r3, r1
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	3301      	adds	r3, #1
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f300 841b 	bgt.w	800975e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f2c:	4b7a      	ldr	r3, [pc, #488]	@ (8009118 <tcp_receive+0x884>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	f040 8298 	bne.w	8009466 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008f36:	4b79      	ldr	r3, [pc, #484]	@ (800911c <tcp_receive+0x888>)
 8008f38:	891c      	ldrh	r4, [r3, #8]
 8008f3a:	4b78      	ldr	r3, [pc, #480]	@ (800911c <tcp_receive+0x888>)
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	899b      	ldrh	r3, [r3, #12]
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fa ffe4 	bl	8003f10 <lwip_htons>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	f003 0303 	and.w	r3, r3, #3
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d001      	beq.n	8008f58 <tcp_receive+0x6c4>
 8008f54:	2301      	movs	r3, #1
 8008f56:	e000      	b.n	8008f5a <tcp_receive+0x6c6>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	4423      	add	r3, r4
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	4b70      	ldr	r3, [pc, #448]	@ (8009120 <tcp_receive+0x88c>)
 8008f60:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008f66:	4b6e      	ldr	r3, [pc, #440]	@ (8009120 <tcp_receive+0x88c>)
 8008f68:	881b      	ldrh	r3, [r3, #0]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d274      	bcs.n	8009058 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008f6e:	4b6b      	ldr	r3, [pc, #428]	@ (800911c <tcp_receive+0x888>)
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	899b      	ldrh	r3, [r3, #12]
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fa ffca 	bl	8003f10 <lwip_htons>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	f003 0301 	and.w	r3, r3, #1
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d01e      	beq.n	8008fc6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008f88:	4b64      	ldr	r3, [pc, #400]	@ (800911c <tcp_receive+0x888>)
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	899b      	ldrh	r3, [r3, #12]
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	b21b      	sxth	r3, r3
 8008f92:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008f96:	b21c      	sxth	r4, r3
 8008f98:	4b60      	ldr	r3, [pc, #384]	@ (800911c <tcp_receive+0x888>)
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	899b      	ldrh	r3, [r3, #12]
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7fa ffb5 	bl	8003f10 <lwip_htons>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7fa ffad 	bl	8003f10 <lwip_htons>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	b21b      	sxth	r3, r3
 8008fba:	4323      	orrs	r3, r4
 8008fbc:	b21a      	sxth	r2, r3
 8008fbe:	4b57      	ldr	r3, [pc, #348]	@ (800911c <tcp_receive+0x888>)
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	b292      	uxth	r2, r2
 8008fc4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008fca:	4b54      	ldr	r3, [pc, #336]	@ (800911c <tcp_receive+0x888>)
 8008fcc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008fce:	4b53      	ldr	r3, [pc, #332]	@ (800911c <tcp_receive+0x888>)
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	899b      	ldrh	r3, [r3, #12]
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fa ff9a 	bl	8003f10 <lwip_htons>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	f003 0302 	and.w	r3, r3, #2
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d005      	beq.n	8008ff4 <tcp_receive+0x760>
            inseg.len -= 1;
 8008fe8:	4b4c      	ldr	r3, [pc, #304]	@ (800911c <tcp_receive+0x888>)
 8008fea:	891b      	ldrh	r3, [r3, #8]
 8008fec:	3b01      	subs	r3, #1
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	4b4a      	ldr	r3, [pc, #296]	@ (800911c <tcp_receive+0x888>)
 8008ff2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008ff4:	4b49      	ldr	r3, [pc, #292]	@ (800911c <tcp_receive+0x888>)
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	4a48      	ldr	r2, [pc, #288]	@ (800911c <tcp_receive+0x888>)
 8008ffa:	8912      	ldrh	r2, [r2, #8]
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fc f93e 	bl	8005280 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009004:	4b45      	ldr	r3, [pc, #276]	@ (800911c <tcp_receive+0x888>)
 8009006:	891c      	ldrh	r4, [r3, #8]
 8009008:	4b44      	ldr	r3, [pc, #272]	@ (800911c <tcp_receive+0x888>)
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	899b      	ldrh	r3, [r3, #12]
 800900e:	b29b      	uxth	r3, r3
 8009010:	4618      	mov	r0, r3
 8009012:	f7fa ff7d 	bl	8003f10 <lwip_htons>
 8009016:	4603      	mov	r3, r0
 8009018:	b2db      	uxtb	r3, r3
 800901a:	f003 0303 	and.w	r3, r3, #3
 800901e:	2b00      	cmp	r3, #0
 8009020:	d001      	beq.n	8009026 <tcp_receive+0x792>
 8009022:	2301      	movs	r3, #1
 8009024:	e000      	b.n	8009028 <tcp_receive+0x794>
 8009026:	2300      	movs	r3, #0
 8009028:	4423      	add	r3, r4
 800902a:	b29a      	uxth	r2, r3
 800902c:	4b3c      	ldr	r3, [pc, #240]	@ (8009120 <tcp_receive+0x88c>)
 800902e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009030:	4b3b      	ldr	r3, [pc, #236]	@ (8009120 <tcp_receive+0x88c>)
 8009032:	881b      	ldrh	r3, [r3, #0]
 8009034:	461a      	mov	r2, r3
 8009036:	4b38      	ldr	r3, [pc, #224]	@ (8009118 <tcp_receive+0x884>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	441a      	add	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009040:	6879      	ldr	r1, [r7, #4]
 8009042:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009044:	440b      	add	r3, r1
 8009046:	429a      	cmp	r2, r3
 8009048:	d006      	beq.n	8009058 <tcp_receive+0x7c4>
 800904a:	4b36      	ldr	r3, [pc, #216]	@ (8009124 <tcp_receive+0x890>)
 800904c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8009050:	4935      	ldr	r1, [pc, #212]	@ (8009128 <tcp_receive+0x894>)
 8009052:	4836      	ldr	r0, [pc, #216]	@ (800912c <tcp_receive+0x898>)
 8009054:	f005 f858 	bl	800e108 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800905c:	2b00      	cmp	r3, #0
 800905e:	f000 80e6 	beq.w	800922e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009062:	4b2e      	ldr	r3, [pc, #184]	@ (800911c <tcp_receive+0x888>)
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	899b      	ldrh	r3, [r3, #12]
 8009068:	b29b      	uxth	r3, r3
 800906a:	4618      	mov	r0, r3
 800906c:	f7fa ff50 	bl	8003f10 <lwip_htons>
 8009070:	4603      	mov	r3, r0
 8009072:	b2db      	uxtb	r3, r3
 8009074:	f003 0301 	and.w	r3, r3, #1
 8009078:	2b00      	cmp	r3, #0
 800907a:	d010      	beq.n	800909e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800907c:	e00a      	b.n	8009094 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009082:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f7fd fd93 	bl	8006bba <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1f0      	bne.n	800907e <tcp_receive+0x7ea>
 800909c:	e0c7      	b.n	800922e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80090a4:	e051      	b.n	800914a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80090a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	899b      	ldrh	r3, [r3, #12]
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7fa ff2e 	bl	8003f10 <lwip_htons>
 80090b4:	4603      	mov	r3, r0
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	f003 0301 	and.w	r3, r3, #1
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d03c      	beq.n	800913a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80090c0:	4b16      	ldr	r3, [pc, #88]	@ (800911c <tcp_receive+0x888>)
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	899b      	ldrh	r3, [r3, #12]
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fa ff21 	bl	8003f10 <lwip_htons>
 80090ce:	4603      	mov	r3, r0
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d12f      	bne.n	800913a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80090da:	4b10      	ldr	r3, [pc, #64]	@ (800911c <tcp_receive+0x888>)
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	899b      	ldrh	r3, [r3, #12]
 80090e0:	b29c      	uxth	r4, r3
 80090e2:	2001      	movs	r0, #1
 80090e4:	f7fa ff14 	bl	8003f10 <lwip_htons>
 80090e8:	4603      	mov	r3, r0
 80090ea:	461a      	mov	r2, r3
 80090ec:	4b0b      	ldr	r3, [pc, #44]	@ (800911c <tcp_receive+0x888>)
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	4322      	orrs	r2, r4
 80090f2:	b292      	uxth	r2, r2
 80090f4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80090f6:	4b09      	ldr	r3, [pc, #36]	@ (800911c <tcp_receive+0x888>)
 80090f8:	891c      	ldrh	r4, [r3, #8]
 80090fa:	4b08      	ldr	r3, [pc, #32]	@ (800911c <tcp_receive+0x888>)
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	899b      	ldrh	r3, [r3, #12]
 8009100:	b29b      	uxth	r3, r3
 8009102:	4618      	mov	r0, r3
 8009104:	f7fa ff04 	bl	8003f10 <lwip_htons>
 8009108:	4603      	mov	r3, r0
 800910a:	b2db      	uxtb	r3, r3
 800910c:	f003 0303 	and.w	r3, r3, #3
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00d      	beq.n	8009130 <tcp_receive+0x89c>
 8009114:	2301      	movs	r3, #1
 8009116:	e00c      	b.n	8009132 <tcp_receive+0x89e>
 8009118:	200082c8 	.word	0x200082c8
 800911c:	200082a8 	.word	0x200082a8
 8009120:	200082d2 	.word	0x200082d2
 8009124:	08010168 	.word	0x08010168
 8009128:	08010510 	.word	0x08010510
 800912c:	080101b4 	.word	0x080101b4
 8009130:	2300      	movs	r3, #0
 8009132:	4423      	add	r3, r4
 8009134:	b29a      	uxth	r2, r3
 8009136:	4b98      	ldr	r3, [pc, #608]	@ (8009398 <tcp_receive+0xb04>)
 8009138:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800913a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800913c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800913e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8009144:	6938      	ldr	r0, [r7, #16]
 8009146:	f7fd fd38 	bl	8006bba <tcp_seg_free>
            while (next &&
 800914a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00e      	beq.n	800916e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009150:	4b91      	ldr	r3, [pc, #580]	@ (8009398 <tcp_receive+0xb04>)
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	461a      	mov	r2, r3
 8009156:	4b91      	ldr	r3, [pc, #580]	@ (800939c <tcp_receive+0xb08>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	441a      	add	r2, r3
 800915c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009164:	8909      	ldrh	r1, [r1, #8]
 8009166:	440b      	add	r3, r1
 8009168:	1ad3      	subs	r3, r2, r3
            while (next &&
 800916a:	2b00      	cmp	r3, #0
 800916c:	da9b      	bge.n	80090a6 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800916e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009170:	2b00      	cmp	r3, #0
 8009172:	d059      	beq.n	8009228 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8009174:	4b88      	ldr	r3, [pc, #544]	@ (8009398 <tcp_receive+0xb04>)
 8009176:	881b      	ldrh	r3, [r3, #0]
 8009178:	461a      	mov	r2, r3
 800917a:	4b88      	ldr	r3, [pc, #544]	@ (800939c <tcp_receive+0xb08>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	441a      	add	r2, r3
 8009180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009188:	2b00      	cmp	r3, #0
 800918a:	dd4d      	ble.n	8009228 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800918c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	b29a      	uxth	r2, r3
 8009194:	4b81      	ldr	r3, [pc, #516]	@ (800939c <tcp_receive+0xb08>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	b29b      	uxth	r3, r3
 800919a:	1ad3      	subs	r3, r2, r3
 800919c:	b29a      	uxth	r2, r3
 800919e:	4b80      	ldr	r3, [pc, #512]	@ (80093a0 <tcp_receive+0xb0c>)
 80091a0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80091a2:	4b7f      	ldr	r3, [pc, #508]	@ (80093a0 <tcp_receive+0xb0c>)
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	899b      	ldrh	r3, [r3, #12]
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fa feb0 	bl	8003f10 <lwip_htons>
 80091b0:	4603      	mov	r3, r0
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	f003 0302 	and.w	r3, r3, #2
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d005      	beq.n	80091c8 <tcp_receive+0x934>
                inseg.len -= 1;
 80091bc:	4b78      	ldr	r3, [pc, #480]	@ (80093a0 <tcp_receive+0xb0c>)
 80091be:	891b      	ldrh	r3, [r3, #8]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	4b76      	ldr	r3, [pc, #472]	@ (80093a0 <tcp_receive+0xb0c>)
 80091c6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80091c8:	4b75      	ldr	r3, [pc, #468]	@ (80093a0 <tcp_receive+0xb0c>)
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	4a74      	ldr	r2, [pc, #464]	@ (80093a0 <tcp_receive+0xb0c>)
 80091ce:	8912      	ldrh	r2, [r2, #8]
 80091d0:	4611      	mov	r1, r2
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fc f854 	bl	8005280 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80091d8:	4b71      	ldr	r3, [pc, #452]	@ (80093a0 <tcp_receive+0xb0c>)
 80091da:	891c      	ldrh	r4, [r3, #8]
 80091dc:	4b70      	ldr	r3, [pc, #448]	@ (80093a0 <tcp_receive+0xb0c>)
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	899b      	ldrh	r3, [r3, #12]
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7fa fe93 	bl	8003f10 <lwip_htons>
 80091ea:	4603      	mov	r3, r0
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	f003 0303 	and.w	r3, r3, #3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <tcp_receive+0x966>
 80091f6:	2301      	movs	r3, #1
 80091f8:	e000      	b.n	80091fc <tcp_receive+0x968>
 80091fa:	2300      	movs	r3, #0
 80091fc:	4423      	add	r3, r4
 80091fe:	b29a      	uxth	r2, r3
 8009200:	4b65      	ldr	r3, [pc, #404]	@ (8009398 <tcp_receive+0xb04>)
 8009202:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009204:	4b64      	ldr	r3, [pc, #400]	@ (8009398 <tcp_receive+0xb04>)
 8009206:	881b      	ldrh	r3, [r3, #0]
 8009208:	461a      	mov	r2, r3
 800920a:	4b64      	ldr	r3, [pc, #400]	@ (800939c <tcp_receive+0xb08>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	441a      	add	r2, r3
 8009210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	429a      	cmp	r2, r3
 8009218:	d006      	beq.n	8009228 <tcp_receive+0x994>
 800921a:	4b62      	ldr	r3, [pc, #392]	@ (80093a4 <tcp_receive+0xb10>)
 800921c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8009220:	4961      	ldr	r1, [pc, #388]	@ (80093a8 <tcp_receive+0xb14>)
 8009222:	4862      	ldr	r0, [pc, #392]	@ (80093ac <tcp_receive+0xb18>)
 8009224:	f004 ff70 	bl	800e108 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800922c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800922e:	4b5a      	ldr	r3, [pc, #360]	@ (8009398 <tcp_receive+0xb04>)
 8009230:	881b      	ldrh	r3, [r3, #0]
 8009232:	461a      	mov	r2, r3
 8009234:	4b59      	ldr	r3, [pc, #356]	@ (800939c <tcp_receive+0xb08>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	441a      	add	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009242:	4b55      	ldr	r3, [pc, #340]	@ (8009398 <tcp_receive+0xb04>)
 8009244:	881b      	ldrh	r3, [r3, #0]
 8009246:	429a      	cmp	r2, r3
 8009248:	d206      	bcs.n	8009258 <tcp_receive+0x9c4>
 800924a:	4b56      	ldr	r3, [pc, #344]	@ (80093a4 <tcp_receive+0xb10>)
 800924c:	f240 6207 	movw	r2, #1543	@ 0x607
 8009250:	4957      	ldr	r1, [pc, #348]	@ (80093b0 <tcp_receive+0xb1c>)
 8009252:	4856      	ldr	r0, [pc, #344]	@ (80093ac <tcp_receive+0xb18>)
 8009254:	f004 ff58 	bl	800e108 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800925c:	4b4e      	ldr	r3, [pc, #312]	@ (8009398 <tcp_receive+0xb04>)
 800925e:	881b      	ldrh	r3, [r3, #0]
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	b29a      	uxth	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7fc ffc5 	bl	80061f8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800926e:	4b4c      	ldr	r3, [pc, #304]	@ (80093a0 <tcp_receive+0xb0c>)
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	891b      	ldrh	r3, [r3, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d006      	beq.n	8009286 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8009278:	4b49      	ldr	r3, [pc, #292]	@ (80093a0 <tcp_receive+0xb0c>)
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	4a4d      	ldr	r2, [pc, #308]	@ (80093b4 <tcp_receive+0xb20>)
 800927e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009280:	4b47      	ldr	r3, [pc, #284]	@ (80093a0 <tcp_receive+0xb0c>)
 8009282:	2200      	movs	r2, #0
 8009284:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009286:	4b46      	ldr	r3, [pc, #280]	@ (80093a0 <tcp_receive+0xb0c>)
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	899b      	ldrh	r3, [r3, #12]
 800928c:	b29b      	uxth	r3, r3
 800928e:	4618      	mov	r0, r3
 8009290:	f7fa fe3e 	bl	8003f10 <lwip_htons>
 8009294:	4603      	mov	r3, r0
 8009296:	b2db      	uxtb	r3, r3
 8009298:	f003 0301 	and.w	r3, r3, #1
 800929c:	2b00      	cmp	r3, #0
 800929e:	f000 80b8 	beq.w	8009412 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80092a2:	4b45      	ldr	r3, [pc, #276]	@ (80093b8 <tcp_receive+0xb24>)
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	f043 0320 	orr.w	r3, r3, #32
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	4b42      	ldr	r3, [pc, #264]	@ (80093b8 <tcp_receive+0xb24>)
 80092ae:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80092b0:	e0af      	b.n	8009412 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092b6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	4a36      	ldr	r2, [pc, #216]	@ (800939c <tcp_receive+0xb08>)
 80092c2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	891b      	ldrh	r3, [r3, #8]
 80092c8:	461c      	mov	r4, r3
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	899b      	ldrh	r3, [r3, #12]
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fa fe1c 	bl	8003f10 <lwip_htons>
 80092d8:	4603      	mov	r3, r0
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	f003 0303 	and.w	r3, r3, #3
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d001      	beq.n	80092e8 <tcp_receive+0xa54>
 80092e4:	2301      	movs	r3, #1
 80092e6:	e000      	b.n	80092ea <tcp_receive+0xa56>
 80092e8:	2300      	movs	r3, #0
 80092ea:	191a      	adds	r2, r3, r4
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f0:	441a      	add	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092fa:	461c      	mov	r4, r3
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	891b      	ldrh	r3, [r3, #8]
 8009300:	461d      	mov	r5, r3
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	899b      	ldrh	r3, [r3, #12]
 8009308:	b29b      	uxth	r3, r3
 800930a:	4618      	mov	r0, r3
 800930c:	f7fa fe00 	bl	8003f10 <lwip_htons>
 8009310:	4603      	mov	r3, r0
 8009312:	b2db      	uxtb	r3, r3
 8009314:	f003 0303 	and.w	r3, r3, #3
 8009318:	2b00      	cmp	r3, #0
 800931a:	d001      	beq.n	8009320 <tcp_receive+0xa8c>
 800931c:	2301      	movs	r3, #1
 800931e:	e000      	b.n	8009322 <tcp_receive+0xa8e>
 8009320:	2300      	movs	r3, #0
 8009322:	442b      	add	r3, r5
 8009324:	429c      	cmp	r4, r3
 8009326:	d206      	bcs.n	8009336 <tcp_receive+0xaa2>
 8009328:	4b1e      	ldr	r3, [pc, #120]	@ (80093a4 <tcp_receive+0xb10>)
 800932a:	f240 622b 	movw	r2, #1579	@ 0x62b
 800932e:	4923      	ldr	r1, [pc, #140]	@ (80093bc <tcp_receive+0xb28>)
 8009330:	481e      	ldr	r0, [pc, #120]	@ (80093ac <tcp_receive+0xb18>)
 8009332:	f004 fee9 	bl	800e108 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	891b      	ldrh	r3, [r3, #8]
 800933a:	461c      	mov	r4, r3
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	899b      	ldrh	r3, [r3, #12]
 8009342:	b29b      	uxth	r3, r3
 8009344:	4618      	mov	r0, r3
 8009346:	f7fa fde3 	bl	8003f10 <lwip_htons>
 800934a:	4603      	mov	r3, r0
 800934c:	b2db      	uxtb	r3, r3
 800934e:	f003 0303 	and.w	r3, r3, #3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d001      	beq.n	800935a <tcp_receive+0xac6>
 8009356:	2301      	movs	r3, #1
 8009358:	e000      	b.n	800935c <tcp_receive+0xac8>
 800935a:	2300      	movs	r3, #0
 800935c:	1919      	adds	r1, r3, r4
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009362:	b28b      	uxth	r3, r1
 8009364:	1ad3      	subs	r3, r2, r3
 8009366:	b29a      	uxth	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f7fc ff43 	bl	80061f8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	891b      	ldrh	r3, [r3, #8]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d028      	beq.n	80093ce <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800937c:	4b0d      	ldr	r3, [pc, #52]	@ (80093b4 <tcp_receive+0xb20>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d01d      	beq.n	80093c0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8009384:	4b0b      	ldr	r3, [pc, #44]	@ (80093b4 <tcp_receive+0xb20>)
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	4619      	mov	r1, r3
 800938e:	4610      	mov	r0, r2
 8009390:	f7fc f9be 	bl	8005710 <pbuf_cat>
 8009394:	e018      	b.n	80093c8 <tcp_receive+0xb34>
 8009396:	bf00      	nop
 8009398:	200082d2 	.word	0x200082d2
 800939c:	200082c8 	.word	0x200082c8
 80093a0:	200082a8 	.word	0x200082a8
 80093a4:	08010168 	.word	0x08010168
 80093a8:	08010548 	.word	0x08010548
 80093ac:	080101b4 	.word	0x080101b4
 80093b0:	08010584 	.word	0x08010584
 80093b4:	200082d8 	.word	0x200082d8
 80093b8:	200082d5 	.word	0x200082d5
 80093bc:	080105a4 	.word	0x080105a4
            } else {
              recv_data = cseg->p;
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	4a70      	ldr	r2, [pc, #448]	@ (8009588 <tcp_receive+0xcf4>)
 80093c6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	2200      	movs	r2, #0
 80093cc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	899b      	ldrh	r3, [r3, #12]
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fa fd9a 	bl	8003f10 <lwip_htons>
 80093dc:	4603      	mov	r3, r0
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	f003 0301 	and.w	r3, r3, #1
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00d      	beq.n	8009404 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80093e8:	4b68      	ldr	r3, [pc, #416]	@ (800958c <tcp_receive+0xcf8>)
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	f043 0320 	orr.w	r3, r3, #32
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	4b66      	ldr	r3, [pc, #408]	@ (800958c <tcp_receive+0xcf8>)
 80093f4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	7d1b      	ldrb	r3, [r3, #20]
 80093fa:	2b04      	cmp	r3, #4
 80093fc:	d102      	bne.n	8009404 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2207      	movs	r2, #7
 8009402:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800940c:	68b8      	ldr	r0, [r7, #8]
 800940e:	f7fd fbd4 	bl	8006bba <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009416:	2b00      	cmp	r3, #0
 8009418:	d008      	beq.n	800942c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	685a      	ldr	r2, [r3, #4]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8009426:	429a      	cmp	r2, r3
 8009428:	f43f af43 	beq.w	80092b2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	8b5b      	ldrh	r3, [r3, #26]
 8009430:	f003 0301 	and.w	r3, r3, #1
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00e      	beq.n	8009456 <tcp_receive+0xbc2>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	8b5b      	ldrh	r3, [r3, #26]
 800943c:	f023 0301 	bic.w	r3, r3, #1
 8009440:	b29a      	uxth	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	835a      	strh	r2, [r3, #26]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	8b5b      	ldrh	r3, [r3, #26]
 800944a:	f043 0302 	orr.w	r3, r3, #2
 800944e:	b29a      	uxth	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009454:	e187      	b.n	8009766 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	8b5b      	ldrh	r3, [r3, #26]
 800945a:	f043 0301 	orr.w	r3, r3, #1
 800945e:	b29a      	uxth	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009464:	e17f      	b.n	8009766 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800946a:	2b00      	cmp	r3, #0
 800946c:	d106      	bne.n	800947c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800946e:	4848      	ldr	r0, [pc, #288]	@ (8009590 <tcp_receive+0xcfc>)
 8009470:	f7fd fbbc 	bl	8006bec <tcp_seg_copy>
 8009474:	4602      	mov	r2, r0
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	675a      	str	r2, [r3, #116]	@ 0x74
 800947a:	e16c      	b.n	8009756 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800947c:	2300      	movs	r3, #0
 800947e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009484:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009486:	e156      	b.n	8009736 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8009488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	4b41      	ldr	r3, [pc, #260]	@ (8009594 <tcp_receive+0xd00>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	429a      	cmp	r2, r3
 8009494:	d11d      	bne.n	80094d2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009496:	4b3e      	ldr	r3, [pc, #248]	@ (8009590 <tcp_receive+0xcfc>)
 8009498:	891a      	ldrh	r2, [r3, #8]
 800949a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800949c:	891b      	ldrh	r3, [r3, #8]
 800949e:	429a      	cmp	r2, r3
 80094a0:	f240 814e 	bls.w	8009740 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80094a4:	483a      	ldr	r0, [pc, #232]	@ (8009590 <tcp_receive+0xcfc>)
 80094a6:	f7fd fba1 	bl	8006bec <tcp_seg_copy>
 80094aa:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f000 8148 	beq.w	8009744 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80094b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d003      	beq.n	80094c2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80094ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094bc:	697a      	ldr	r2, [r7, #20]
 80094be:	601a      	str	r2, [r3, #0]
 80094c0:	e002      	b.n	80094c8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	697a      	ldr	r2, [r7, #20]
 80094c6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80094c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80094ca:	6978      	ldr	r0, [r7, #20]
 80094cc:	f7ff f8de 	bl	800868c <tcp_oos_insert_segment>
                }
                break;
 80094d0:	e138      	b.n	8009744 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80094d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d117      	bne.n	8009508 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80094d8:	4b2e      	ldr	r3, [pc, #184]	@ (8009594 <tcp_receive+0xd00>)
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	da57      	bge.n	8009598 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80094e8:	4829      	ldr	r0, [pc, #164]	@ (8009590 <tcp_receive+0xcfc>)
 80094ea:	f7fd fb7f 	bl	8006bec <tcp_seg_copy>
 80094ee:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f000 8128 	beq.w	8009748 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	69ba      	ldr	r2, [r7, #24]
 80094fc:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80094fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009500:	69b8      	ldr	r0, [r7, #24]
 8009502:	f7ff f8c3 	bl	800868c <tcp_oos_insert_segment>
                  }
                  break;
 8009506:	e11f      	b.n	8009748 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009508:	4b22      	ldr	r3, [pc, #136]	@ (8009594 <tcp_receive+0xd00>)
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	1ad3      	subs	r3, r2, r3
 8009514:	3b01      	subs	r3, #1
 8009516:	2b00      	cmp	r3, #0
 8009518:	db3e      	blt.n	8009598 <tcp_receive+0xd04>
 800951a:	4b1e      	ldr	r3, [pc, #120]	@ (8009594 <tcp_receive+0xd00>)
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	3301      	adds	r3, #1
 8009528:	2b00      	cmp	r3, #0
 800952a:	dc35      	bgt.n	8009598 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800952c:	4818      	ldr	r0, [pc, #96]	@ (8009590 <tcp_receive+0xcfc>)
 800952e:	f7fd fb5d 	bl	8006bec <tcp_seg_copy>
 8009532:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	2b00      	cmp	r3, #0
 8009538:	f000 8108 	beq.w	800974c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800953c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009544:	8912      	ldrh	r2, [r2, #8]
 8009546:	441a      	add	r2, r3
 8009548:	4b12      	ldr	r3, [pc, #72]	@ (8009594 <tcp_receive+0xd00>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	2b00      	cmp	r3, #0
 8009550:	dd12      	ble.n	8009578 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009552:	4b10      	ldr	r3, [pc, #64]	@ (8009594 <tcp_receive+0xd00>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	b29a      	uxth	r2, r3
 8009558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	b29b      	uxth	r3, r3
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	b29a      	uxth	r2, r3
 8009564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009566:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800956a:	685a      	ldr	r2, [r3, #4]
 800956c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800956e:	891b      	ldrh	r3, [r3, #8]
 8009570:	4619      	mov	r1, r3
 8009572:	4610      	mov	r0, r2
 8009574:	f7fb fe84 	bl	8005280 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800957a:	69fa      	ldr	r2, [r7, #28]
 800957c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800957e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009580:	69f8      	ldr	r0, [r7, #28]
 8009582:	f7ff f883 	bl	800868c <tcp_oos_insert_segment>
                  }
                  break;
 8009586:	e0e1      	b.n	800974c <tcp_receive+0xeb8>
 8009588:	200082d8 	.word	0x200082d8
 800958c:	200082d5 	.word	0x200082d5
 8009590:	200082a8 	.word	0x200082a8
 8009594:	200082c8 	.word	0x200082c8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800959c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f040 80c5 	bne.w	8009730 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80095a6:	4b7f      	ldr	r3, [pc, #508]	@ (80097a4 <tcp_receive+0xf10>)
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f340 80bc 	ble.w	8009730 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80095b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	899b      	ldrh	r3, [r3, #12]
 80095be:	b29b      	uxth	r3, r3
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7fa fca5 	bl	8003f10 <lwip_htons>
 80095c6:	4603      	mov	r3, r0
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f040 80be 	bne.w	8009750 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80095d4:	4874      	ldr	r0, [pc, #464]	@ (80097a8 <tcp_receive+0xf14>)
 80095d6:	f7fd fb09 	bl	8006bec <tcp_seg_copy>
 80095da:	4602      	mov	r2, r0
 80095dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095de:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80095e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f000 80b5 	beq.w	8009754 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80095ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80095f2:	8912      	ldrh	r2, [r2, #8]
 80095f4:	441a      	add	r2, r3
 80095f6:	4b6b      	ldr	r3, [pc, #428]	@ (80097a4 <tcp_receive+0xf10>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	1ad3      	subs	r3, r2, r3
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	dd12      	ble.n	8009626 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009600:	4b68      	ldr	r3, [pc, #416]	@ (80097a4 <tcp_receive+0xf10>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	b29a      	uxth	r2, r3
 8009606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	b29b      	uxth	r3, r3
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	b29a      	uxth	r2, r3
 8009612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009614:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009618:	685a      	ldr	r2, [r3, #4]
 800961a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961c:	891b      	ldrh	r3, [r3, #8]
 800961e:	4619      	mov	r1, r3
 8009620:	4610      	mov	r0, r2
 8009622:	f7fb fe2d 	bl	8005280 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009626:	4b61      	ldr	r3, [pc, #388]	@ (80097ac <tcp_receive+0xf18>)
 8009628:	881b      	ldrh	r3, [r3, #0]
 800962a:	461a      	mov	r2, r3
 800962c:	4b5d      	ldr	r3, [pc, #372]	@ (80097a4 <tcp_receive+0xf10>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	441a      	add	r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009636:	6879      	ldr	r1, [r7, #4]
 8009638:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800963a:	440b      	add	r3, r1
 800963c:	1ad3      	subs	r3, r2, r3
 800963e:	2b00      	cmp	r3, #0
 8009640:	f340 8088 	ble.w	8009754 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	899b      	ldrh	r3, [r3, #12]
 800964c:	b29b      	uxth	r3, r3
 800964e:	4618      	mov	r0, r3
 8009650:	f7fa fc5e 	bl	8003f10 <lwip_htons>
 8009654:	4603      	mov	r3, r0
 8009656:	b2db      	uxtb	r3, r3
 8009658:	f003 0301 	and.w	r3, r3, #1
 800965c:	2b00      	cmp	r3, #0
 800965e:	d021      	beq.n	80096a4 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	899b      	ldrh	r3, [r3, #12]
 8009668:	b29b      	uxth	r3, r3
 800966a:	b21b      	sxth	r3, r3
 800966c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009670:	b21c      	sxth	r4, r3
 8009672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	899b      	ldrh	r3, [r3, #12]
 800967a:	b29b      	uxth	r3, r3
 800967c:	4618      	mov	r0, r3
 800967e:	f7fa fc47 	bl	8003f10 <lwip_htons>
 8009682:	4603      	mov	r3, r0
 8009684:	b2db      	uxtb	r3, r3
 8009686:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800968a:	b29b      	uxth	r3, r3
 800968c:	4618      	mov	r0, r3
 800968e:	f7fa fc3f 	bl	8003f10 <lwip_htons>
 8009692:	4603      	mov	r3, r0
 8009694:	b21b      	sxth	r3, r3
 8009696:	4323      	orrs	r3, r4
 8009698:	b21a      	sxth	r2, r3
 800969a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	b292      	uxth	r2, r2
 80096a2:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096ae:	4413      	add	r3, r2
 80096b0:	b299      	uxth	r1, r3
 80096b2:	4b3c      	ldr	r3, [pc, #240]	@ (80097a4 <tcp_receive+0xf10>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	1a8a      	subs	r2, r1, r2
 80096be:	b292      	uxth	r2, r2
 80096c0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80096c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	685a      	ldr	r2, [r3, #4]
 80096c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	891b      	ldrh	r3, [r3, #8]
 80096ce:	4619      	mov	r1, r3
 80096d0:	4610      	mov	r0, r2
 80096d2:	f7fb fdd5 	bl	8005280 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80096d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	891c      	ldrh	r4, [r3, #8]
 80096dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	899b      	ldrh	r3, [r3, #12]
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7fa fc12 	bl	8003f10 <lwip_htons>
 80096ec:	4603      	mov	r3, r0
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	f003 0303 	and.w	r3, r3, #3
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <tcp_receive+0xe68>
 80096f8:	2301      	movs	r3, #1
 80096fa:	e000      	b.n	80096fe <tcp_receive+0xe6a>
 80096fc:	2300      	movs	r3, #0
 80096fe:	4423      	add	r3, r4
 8009700:	b29a      	uxth	r2, r3
 8009702:	4b2a      	ldr	r3, [pc, #168]	@ (80097ac <tcp_receive+0xf18>)
 8009704:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009706:	4b29      	ldr	r3, [pc, #164]	@ (80097ac <tcp_receive+0xf18>)
 8009708:	881b      	ldrh	r3, [r3, #0]
 800970a:	461a      	mov	r2, r3
 800970c:	4b25      	ldr	r3, [pc, #148]	@ (80097a4 <tcp_receive+0xf10>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	441a      	add	r2, r3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009716:	6879      	ldr	r1, [r7, #4]
 8009718:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800971a:	440b      	add	r3, r1
 800971c:	429a      	cmp	r2, r3
 800971e:	d019      	beq.n	8009754 <tcp_receive+0xec0>
 8009720:	4b23      	ldr	r3, [pc, #140]	@ (80097b0 <tcp_receive+0xf1c>)
 8009722:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8009726:	4923      	ldr	r1, [pc, #140]	@ (80097b4 <tcp_receive+0xf20>)
 8009728:	4823      	ldr	r0, [pc, #140]	@ (80097b8 <tcp_receive+0xf24>)
 800972a:	f004 fced 	bl	800e108 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800972e:	e011      	b.n	8009754 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009738:	2b00      	cmp	r3, #0
 800973a:	f47f aea5 	bne.w	8009488 <tcp_receive+0xbf4>
 800973e:	e00a      	b.n	8009756 <tcp_receive+0xec2>
                break;
 8009740:	bf00      	nop
 8009742:	e008      	b.n	8009756 <tcp_receive+0xec2>
                break;
 8009744:	bf00      	nop
 8009746:	e006      	b.n	8009756 <tcp_receive+0xec2>
                  break;
 8009748:	bf00      	nop
 800974a:	e004      	b.n	8009756 <tcp_receive+0xec2>
                  break;
 800974c:	bf00      	nop
 800974e:	e002      	b.n	8009756 <tcp_receive+0xec2>
                  break;
 8009750:	bf00      	nop
 8009752:	e000      	b.n	8009756 <tcp_receive+0xec2>
                break;
 8009754:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f001 fa30 	bl	800abbc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800975c:	e003      	b.n	8009766 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f001 fa2c 	bl	800abbc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009764:	e01a      	b.n	800979c <tcp_receive+0xf08>
 8009766:	e019      	b.n	800979c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009768:	4b0e      	ldr	r3, [pc, #56]	@ (80097a4 <tcp_receive+0xf10>)
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009770:	1ad3      	subs	r3, r2, r3
 8009772:	2b00      	cmp	r3, #0
 8009774:	db0a      	blt.n	800978c <tcp_receive+0xef8>
 8009776:	4b0b      	ldr	r3, [pc, #44]	@ (80097a4 <tcp_receive+0xf10>)
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800977e:	6879      	ldr	r1, [r7, #4]
 8009780:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009782:	440b      	add	r3, r1
 8009784:	1ad3      	subs	r3, r2, r3
 8009786:	3301      	adds	r3, #1
 8009788:	2b00      	cmp	r3, #0
 800978a:	dd07      	ble.n	800979c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	8b5b      	ldrh	r3, [r3, #26]
 8009790:	f043 0302 	orr.w	r3, r3, #2
 8009794:	b29a      	uxth	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800979a:	e7ff      	b.n	800979c <tcp_receive+0xf08>
 800979c:	bf00      	nop
 800979e:	3750      	adds	r7, #80	@ 0x50
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bdb0      	pop	{r4, r5, r7, pc}
 80097a4:	200082c8 	.word	0x200082c8
 80097a8:	200082a8 	.word	0x200082a8
 80097ac:	200082d2 	.word	0x200082d2
 80097b0:	08010168 	.word	0x08010168
 80097b4:	08010510 	.word	0x08010510
 80097b8:	080101b4 	.word	0x080101b4

080097bc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80097c2:	4b15      	ldr	r3, [pc, #84]	@ (8009818 <tcp_get_next_optbyte+0x5c>)
 80097c4:	881b      	ldrh	r3, [r3, #0]
 80097c6:	1c5a      	adds	r2, r3, #1
 80097c8:	b291      	uxth	r1, r2
 80097ca:	4a13      	ldr	r2, [pc, #76]	@ (8009818 <tcp_get_next_optbyte+0x5c>)
 80097cc:	8011      	strh	r1, [r2, #0]
 80097ce:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80097d0:	4b12      	ldr	r3, [pc, #72]	@ (800981c <tcp_get_next_optbyte+0x60>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d004      	beq.n	80097e2 <tcp_get_next_optbyte+0x26>
 80097d8:	4b11      	ldr	r3, [pc, #68]	@ (8009820 <tcp_get_next_optbyte+0x64>)
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	88fa      	ldrh	r2, [r7, #6]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d208      	bcs.n	80097f4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80097e2:	4b10      	ldr	r3, [pc, #64]	@ (8009824 <tcp_get_next_optbyte+0x68>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	3314      	adds	r3, #20
 80097e8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80097ea:	88fb      	ldrh	r3, [r7, #6]
 80097ec:	683a      	ldr	r2, [r7, #0]
 80097ee:	4413      	add	r3, r2
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	e00b      	b.n	800980c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80097f4:	88fb      	ldrh	r3, [r7, #6]
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	4b09      	ldr	r3, [pc, #36]	@ (8009820 <tcp_get_next_optbyte+0x64>)
 80097fa:	881b      	ldrh	r3, [r3, #0]
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009802:	4b06      	ldr	r3, [pc, #24]	@ (800981c <tcp_get_next_optbyte+0x60>)
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	797b      	ldrb	r3, [r7, #5]
 8009808:	4413      	add	r3, r2
 800980a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800980c:	4618      	mov	r0, r3
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr
 8009818:	200082c4 	.word	0x200082c4
 800981c:	200082c0 	.word	0x200082c0
 8009820:	200082be 	.word	0x200082be
 8009824:	200082b8 	.word	0x200082b8

08009828 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d106      	bne.n	8009844 <tcp_parseopt+0x1c>
 8009836:	4b32      	ldr	r3, [pc, #200]	@ (8009900 <tcp_parseopt+0xd8>)
 8009838:	f240 727d 	movw	r2, #1917	@ 0x77d
 800983c:	4931      	ldr	r1, [pc, #196]	@ (8009904 <tcp_parseopt+0xdc>)
 800983e:	4832      	ldr	r0, [pc, #200]	@ (8009908 <tcp_parseopt+0xe0>)
 8009840:	f004 fc62 	bl	800e108 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009844:	4b31      	ldr	r3, [pc, #196]	@ (800990c <tcp_parseopt+0xe4>)
 8009846:	881b      	ldrh	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d056      	beq.n	80098fa <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800984c:	4b30      	ldr	r3, [pc, #192]	@ (8009910 <tcp_parseopt+0xe8>)
 800984e:	2200      	movs	r2, #0
 8009850:	801a      	strh	r2, [r3, #0]
 8009852:	e046      	b.n	80098e2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8009854:	f7ff ffb2 	bl	80097bc <tcp_get_next_optbyte>
 8009858:	4603      	mov	r3, r0
 800985a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800985c:	7bfb      	ldrb	r3, [r7, #15]
 800985e:	2b02      	cmp	r3, #2
 8009860:	d006      	beq.n	8009870 <tcp_parseopt+0x48>
 8009862:	2b02      	cmp	r3, #2
 8009864:	dc2a      	bgt.n	80098bc <tcp_parseopt+0x94>
 8009866:	2b00      	cmp	r3, #0
 8009868:	d042      	beq.n	80098f0 <tcp_parseopt+0xc8>
 800986a:	2b01      	cmp	r3, #1
 800986c:	d038      	beq.n	80098e0 <tcp_parseopt+0xb8>
 800986e:	e025      	b.n	80098bc <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009870:	f7ff ffa4 	bl	80097bc <tcp_get_next_optbyte>
 8009874:	4603      	mov	r3, r0
 8009876:	2b04      	cmp	r3, #4
 8009878:	d13c      	bne.n	80098f4 <tcp_parseopt+0xcc>
 800987a:	4b25      	ldr	r3, [pc, #148]	@ (8009910 <tcp_parseopt+0xe8>)
 800987c:	881b      	ldrh	r3, [r3, #0]
 800987e:	3301      	adds	r3, #1
 8009880:	4a22      	ldr	r2, [pc, #136]	@ (800990c <tcp_parseopt+0xe4>)
 8009882:	8812      	ldrh	r2, [r2, #0]
 8009884:	4293      	cmp	r3, r2
 8009886:	da35      	bge.n	80098f4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009888:	f7ff ff98 	bl	80097bc <tcp_get_next_optbyte>
 800988c:	4603      	mov	r3, r0
 800988e:	021b      	lsls	r3, r3, #8
 8009890:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009892:	f7ff ff93 	bl	80097bc <tcp_get_next_optbyte>
 8009896:	4603      	mov	r3, r0
 8009898:	461a      	mov	r2, r3
 800989a:	89bb      	ldrh	r3, [r7, #12]
 800989c:	4313      	orrs	r3, r2
 800989e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80098a0:	89bb      	ldrh	r3, [r7, #12]
 80098a2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80098a6:	d804      	bhi.n	80098b2 <tcp_parseopt+0x8a>
 80098a8:	89bb      	ldrh	r3, [r7, #12]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d001      	beq.n	80098b2 <tcp_parseopt+0x8a>
 80098ae:	89ba      	ldrh	r2, [r7, #12]
 80098b0:	e001      	b.n	80098b6 <tcp_parseopt+0x8e>
 80098b2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80098ba:	e012      	b.n	80098e2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80098bc:	f7ff ff7e 	bl	80097bc <tcp_get_next_optbyte>
 80098c0:	4603      	mov	r3, r0
 80098c2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80098c4:	7afb      	ldrb	r3, [r7, #11]
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d916      	bls.n	80098f8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80098ca:	7afb      	ldrb	r3, [r7, #11]
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	4b10      	ldr	r3, [pc, #64]	@ (8009910 <tcp_parseopt+0xe8>)
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	4413      	add	r3, r2
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	3b02      	subs	r3, #2
 80098d8:	b29a      	uxth	r2, r3
 80098da:	4b0d      	ldr	r3, [pc, #52]	@ (8009910 <tcp_parseopt+0xe8>)
 80098dc:	801a      	strh	r2, [r3, #0]
 80098de:	e000      	b.n	80098e2 <tcp_parseopt+0xba>
          break;
 80098e0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80098e2:	4b0b      	ldr	r3, [pc, #44]	@ (8009910 <tcp_parseopt+0xe8>)
 80098e4:	881a      	ldrh	r2, [r3, #0]
 80098e6:	4b09      	ldr	r3, [pc, #36]	@ (800990c <tcp_parseopt+0xe4>)
 80098e8:	881b      	ldrh	r3, [r3, #0]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d3b2      	bcc.n	8009854 <tcp_parseopt+0x2c>
 80098ee:	e004      	b.n	80098fa <tcp_parseopt+0xd2>
          return;
 80098f0:	bf00      	nop
 80098f2:	e002      	b.n	80098fa <tcp_parseopt+0xd2>
            return;
 80098f4:	bf00      	nop
 80098f6:	e000      	b.n	80098fa <tcp_parseopt+0xd2>
            return;
 80098f8:	bf00      	nop
      }
    }
  }
}
 80098fa:	3710      	adds	r7, #16
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	08010168 	.word	0x08010168
 8009904:	080105cc 	.word	0x080105cc
 8009908:	080101b4 	.word	0x080101b4
 800990c:	200082bc 	.word	0x200082bc
 8009910:	200082c4 	.word	0x200082c4

08009914 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009914:	b480      	push	{r7}
 8009916:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009918:	4b05      	ldr	r3, [pc, #20]	@ (8009930 <tcp_trigger_input_pcb_close+0x1c>)
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	f043 0310 	orr.w	r3, r3, #16
 8009920:	b2da      	uxtb	r2, r3
 8009922:	4b03      	ldr	r3, [pc, #12]	@ (8009930 <tcp_trigger_input_pcb_close+0x1c>)
 8009924:	701a      	strb	r2, [r3, #0]
}
 8009926:	bf00      	nop
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	200082d5 	.word	0x200082d5

08009934 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00a      	beq.n	800995c <tcp_route+0x28>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	7a1b      	ldrb	r3, [r3, #8]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d006      	beq.n	800995c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	7a1b      	ldrb	r3, [r3, #8]
 8009952:	4618      	mov	r0, r3
 8009954:	f7fb fada 	bl	8004f0c <netif_get_by_index>
 8009958:	4603      	mov	r3, r0
 800995a:	e003      	b.n	8009964 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f003 f8e7 	bl	800cb30 <ip4_route>
 8009962:	4603      	mov	r3, r0
  }
}
 8009964:	4618      	mov	r0, r3
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800996c:	b590      	push	{r4, r7, lr}
 800996e:	b087      	sub	sp, #28
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	603b      	str	r3, [r7, #0]
 8009978:	4613      	mov	r3, r2
 800997a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d105      	bne.n	800998e <tcp_create_segment+0x22>
 8009982:	4b43      	ldr	r3, [pc, #268]	@ (8009a90 <tcp_create_segment+0x124>)
 8009984:	22a3      	movs	r2, #163	@ 0xa3
 8009986:	4943      	ldr	r1, [pc, #268]	@ (8009a94 <tcp_create_segment+0x128>)
 8009988:	4843      	ldr	r0, [pc, #268]	@ (8009a98 <tcp_create_segment+0x12c>)
 800998a:	f004 fbbd 	bl	800e108 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d105      	bne.n	80099a0 <tcp_create_segment+0x34>
 8009994:	4b3e      	ldr	r3, [pc, #248]	@ (8009a90 <tcp_create_segment+0x124>)
 8009996:	22a4      	movs	r2, #164	@ 0xa4
 8009998:	4940      	ldr	r1, [pc, #256]	@ (8009a9c <tcp_create_segment+0x130>)
 800999a:	483f      	ldr	r0, [pc, #252]	@ (8009a98 <tcp_create_segment+0x12c>)
 800999c:	f004 fbb4 	bl	800e108 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80099a0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	f003 0304 	and.w	r3, r3, #4
 80099ac:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80099ae:	2003      	movs	r0, #3
 80099b0:	f7fa ff26 	bl	8004800 <memp_malloc>
 80099b4:	6138      	str	r0, [r7, #16]
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d104      	bne.n	80099c6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80099bc:	68b8      	ldr	r0, [r7, #8]
 80099be:	f7fb fde5 	bl	800558c <pbuf_free>
    return NULL;
 80099c2:	2300      	movs	r3, #0
 80099c4:	e060      	b.n	8009a88 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80099cc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	2200      	movs	r2, #0
 80099d2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	891a      	ldrh	r2, [r3, #8]
 80099de:	7dfb      	ldrb	r3, [r7, #23]
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d205      	bcs.n	80099f2 <tcp_create_segment+0x86>
 80099e6:	4b2a      	ldr	r3, [pc, #168]	@ (8009a90 <tcp_create_segment+0x124>)
 80099e8:	22b0      	movs	r2, #176	@ 0xb0
 80099ea:	492d      	ldr	r1, [pc, #180]	@ (8009aa0 <tcp_create_segment+0x134>)
 80099ec:	482a      	ldr	r0, [pc, #168]	@ (8009a98 <tcp_create_segment+0x12c>)
 80099ee:	f004 fb8b 	bl	800e108 <iprintf>
  seg->len = p->tot_len - optlen;
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	891a      	ldrh	r2, [r3, #8]
 80099f6:	7dfb      	ldrb	r3, [r7, #23]
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009a02:	2114      	movs	r1, #20
 8009a04:	68b8      	ldr	r0, [r7, #8]
 8009a06:	f7fb fd2b 	bl	8005460 <pbuf_add_header>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d004      	beq.n	8009a1a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009a10:	6938      	ldr	r0, [r7, #16]
 8009a12:	f7fd f8d2 	bl	8006bba <tcp_seg_free>
    return NULL;
 8009a16:	2300      	movs	r3, #0
 8009a18:	e036      	b.n	8009a88 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	8ada      	ldrh	r2, [r3, #22]
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	68dc      	ldr	r4, [r3, #12]
 8009a2c:	4610      	mov	r0, r2
 8009a2e:	f7fa fa6f 	bl	8003f10 <lwip_htons>
 8009a32:	4603      	mov	r3, r0
 8009a34:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	8b1a      	ldrh	r2, [r3, #24]
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	68dc      	ldr	r4, [r3, #12]
 8009a3e:	4610      	mov	r0, r2
 8009a40:	f7fa fa66 	bl	8003f10 <lwip_htons>
 8009a44:	4603      	mov	r3, r0
 8009a46:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	68dc      	ldr	r4, [r3, #12]
 8009a4c:	6838      	ldr	r0, [r7, #0]
 8009a4e:	f7fa fa74 	bl	8003f3a <lwip_htonl>
 8009a52:	4603      	mov	r3, r0
 8009a54:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009a56:	7dfb      	ldrb	r3, [r7, #23]
 8009a58:	089b      	lsrs	r3, r3, #2
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	3305      	adds	r3, #5
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	031b      	lsls	r3, r3, #12
 8009a62:	b29a      	uxth	r2, r3
 8009a64:	79fb      	ldrb	r3, [r7, #7]
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	68dc      	ldr	r4, [r3, #12]
 8009a70:	4610      	mov	r0, r2
 8009a72:	f7fa fa4d 	bl	8003f10 <lwip_htons>
 8009a76:	4603      	mov	r3, r0
 8009a78:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	749a      	strb	r2, [r3, #18]
 8009a82:	2200      	movs	r2, #0
 8009a84:	74da      	strb	r2, [r3, #19]
  return seg;
 8009a86:	693b      	ldr	r3, [r7, #16]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	371c      	adds	r7, #28
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd90      	pop	{r4, r7, pc}
 8009a90:	080105e8 	.word	0x080105e8
 8009a94:	0801061c 	.word	0x0801061c
 8009a98:	0801063c 	.word	0x0801063c
 8009a9c:	08010664 	.word	0x08010664
 8009aa0:	08010688 	.word	0x08010688

08009aa4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009aa4:	b590      	push	{r4, r7, lr}
 8009aa6:	b08b      	sub	sp, #44	@ 0x2c
 8009aa8:	af02      	add	r7, sp, #8
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	460b      	mov	r3, r1
 8009aae:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	61fb      	str	r3, [r7, #28]
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d106      	bne.n	8009ad0 <tcp_split_unsent_seg+0x2c>
 8009ac2:	4b95      	ldr	r3, [pc, #596]	@ (8009d18 <tcp_split_unsent_seg+0x274>)
 8009ac4:	f240 324b 	movw	r2, #843	@ 0x34b
 8009ac8:	4994      	ldr	r1, [pc, #592]	@ (8009d1c <tcp_split_unsent_seg+0x278>)
 8009aca:	4895      	ldr	r0, [pc, #596]	@ (8009d20 <tcp_split_unsent_seg+0x27c>)
 8009acc:	f004 fb1c 	bl	800e108 <iprintf>

  useg = pcb->unsent;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ad4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d102      	bne.n	8009ae2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8009adc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae0:	e116      	b.n	8009d10 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8009ae2:	887b      	ldrh	r3, [r7, #2]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d109      	bne.n	8009afc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8009ae8:	4b8b      	ldr	r3, [pc, #556]	@ (8009d18 <tcp_split_unsent_seg+0x274>)
 8009aea:	f240 3253 	movw	r2, #851	@ 0x353
 8009aee:	498d      	ldr	r1, [pc, #564]	@ (8009d24 <tcp_split_unsent_seg+0x280>)
 8009af0:	488b      	ldr	r0, [pc, #556]	@ (8009d20 <tcp_split_unsent_seg+0x27c>)
 8009af2:	f004 fb09 	bl	800e108 <iprintf>
    return ERR_VAL;
 8009af6:	f06f 0305 	mvn.w	r3, #5
 8009afa:	e109      	b.n	8009d10 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	891b      	ldrh	r3, [r3, #8]
 8009b00:	887a      	ldrh	r2, [r7, #2]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d301      	bcc.n	8009b0a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8009b06:	2300      	movs	r3, #0
 8009b08:	e102      	b.n	8009d10 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009b0e:	887a      	ldrh	r2, [r7, #2]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d906      	bls.n	8009b22 <tcp_split_unsent_seg+0x7e>
 8009b14:	4b80      	ldr	r3, [pc, #512]	@ (8009d18 <tcp_split_unsent_seg+0x274>)
 8009b16:	f240 325b 	movw	r2, #859	@ 0x35b
 8009b1a:	4983      	ldr	r1, [pc, #524]	@ (8009d28 <tcp_split_unsent_seg+0x284>)
 8009b1c:	4880      	ldr	r0, [pc, #512]	@ (8009d20 <tcp_split_unsent_seg+0x27c>)
 8009b1e:	f004 faf3 	bl	800e108 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	891b      	ldrh	r3, [r3, #8]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d106      	bne.n	8009b38 <tcp_split_unsent_seg+0x94>
 8009b2a:	4b7b      	ldr	r3, [pc, #492]	@ (8009d18 <tcp_split_unsent_seg+0x274>)
 8009b2c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8009b30:	497e      	ldr	r1, [pc, #504]	@ (8009d2c <tcp_split_unsent_seg+0x288>)
 8009b32:	487b      	ldr	r0, [pc, #492]	@ (8009d20 <tcp_split_unsent_seg+0x27c>)
 8009b34:	f004 fae8 	bl	800e108 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	7a9b      	ldrb	r3, [r3, #10]
 8009b3c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009b3e:	7bfb      	ldrb	r3, [r7, #15]
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	f003 0304 	and.w	r3, r3, #4
 8009b48:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	891a      	ldrh	r2, [r3, #8]
 8009b4e:	887b      	ldrh	r3, [r7, #2]
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009b54:	7bbb      	ldrb	r3, [r7, #14]
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	89bb      	ldrh	r3, [r7, #12]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009b62:	4619      	mov	r1, r3
 8009b64:	2036      	movs	r0, #54	@ 0x36
 8009b66:	f7fb fa2d 	bl	8004fc4 <pbuf_alloc>
 8009b6a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	f000 80b7 	beq.w	8009ce2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	891a      	ldrh	r2, [r3, #8]
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	891b      	ldrh	r3, [r3, #8]
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	887b      	ldrh	r3, [r7, #2]
 8009b84:	4413      	add	r3, r2
 8009b86:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	6858      	ldr	r0, [r3, #4]
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	685a      	ldr	r2, [r3, #4]
 8009b90:	7bbb      	ldrb	r3, [r7, #14]
 8009b92:	18d1      	adds	r1, r2, r3
 8009b94:	897b      	ldrh	r3, [r7, #10]
 8009b96:	89ba      	ldrh	r2, [r7, #12]
 8009b98:	f7fb fef2 	bl	8005980 <pbuf_copy_partial>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	89bb      	ldrh	r3, [r7, #12]
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	f040 809f 	bne.w	8009ce6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	899b      	ldrh	r3, [r3, #12]
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7fa f9ad 	bl	8003f10 <lwip_htons>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009bbe:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8009bc4:	7efb      	ldrb	r3, [r7, #27]
 8009bc6:	f003 0308 	and.w	r3, r3, #8
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d007      	beq.n	8009bde <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8009bce:	7efb      	ldrb	r3, [r7, #27]
 8009bd0:	f023 0308 	bic.w	r3, r3, #8
 8009bd4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8009bd6:	7ebb      	ldrb	r3, [r7, #26]
 8009bd8:	f043 0308 	orr.w	r3, r3, #8
 8009bdc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8009bde:	7efb      	ldrb	r3, [r7, #27]
 8009be0:	f003 0301 	and.w	r3, r3, #1
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d007      	beq.n	8009bf8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8009be8:	7efb      	ldrb	r3, [r7, #27]
 8009bea:	f023 0301 	bic.w	r3, r3, #1
 8009bee:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8009bf0:	7ebb      	ldrb	r3, [r7, #26]
 8009bf2:	f043 0301 	orr.w	r3, r3, #1
 8009bf6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7fa f99b 	bl	8003f3a <lwip_htonl>
 8009c04:	4602      	mov	r2, r0
 8009c06:	887b      	ldrh	r3, [r7, #2]
 8009c08:	18d1      	adds	r1, r2, r3
 8009c0a:	7eba      	ldrb	r2, [r7, #26]
 8009c0c:	7bfb      	ldrb	r3, [r7, #15]
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	460b      	mov	r3, r1
 8009c12:	6939      	ldr	r1, [r7, #16]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f7ff fea9 	bl	800996c <tcp_create_segment>
 8009c1a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d063      	beq.n	8009cea <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7fb fd38 	bl	800569c <pbuf_clen>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	461a      	mov	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009c36:	1a9b      	subs	r3, r3, r2
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	6858      	ldr	r0, [r3, #4]
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	891a      	ldrh	r2, [r3, #8]
 8009c4a:	89bb      	ldrh	r3, [r7, #12]
 8009c4c:	1ad3      	subs	r3, r2, r3
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	4619      	mov	r1, r3
 8009c52:	f7fb fb15 	bl	8005280 <pbuf_realloc>
  useg->len -= remainder;
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	891a      	ldrh	r2, [r3, #8]
 8009c5a:	89bb      	ldrh	r3, [r7, #12]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	899b      	ldrh	r3, [r3, #12]
 8009c6a:	b29c      	uxth	r4, r3
 8009c6c:	7efb      	ldrb	r3, [r7, #27]
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fa f94d 	bl	8003f10 <lwip_htons>
 8009c76:	4603      	mov	r3, r0
 8009c78:	461a      	mov	r2, r3
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	4322      	orrs	r2, r4
 8009c80:	b292      	uxth	r2, r2
 8009c82:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7fb fd07 	bl	800569c <pbuf_clen>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	461a      	mov	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009c98:	4413      	add	r3, r2
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7fb fcf8 	bl	800569c <pbuf_clen>
 8009cac:	4603      	mov	r3, r0
 8009cae:	461a      	mov	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009cb6:	4413      	add	r3, r2
 8009cb8:	b29a      	uxth	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	69fa      	ldr	r2, [r7, #28]
 8009ccc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d103      	bne.n	8009cde <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	e016      	b.n	8009d10 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009ce2:	bf00      	nop
 8009ce4:	e002      	b.n	8009cec <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009ce6:	bf00      	nop
 8009ce8:	e000      	b.n	8009cec <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009cea:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d006      	beq.n	8009d00 <tcp_split_unsent_seg+0x25c>
 8009cf2:	4b09      	ldr	r3, [pc, #36]	@ (8009d18 <tcp_split_unsent_seg+0x274>)
 8009cf4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8009cf8:	490d      	ldr	r1, [pc, #52]	@ (8009d30 <tcp_split_unsent_seg+0x28c>)
 8009cfa:	4809      	ldr	r0, [pc, #36]	@ (8009d20 <tcp_split_unsent_seg+0x27c>)
 8009cfc:	f004 fa04 	bl	800e108 <iprintf>
  if (p != NULL) {
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d002      	beq.n	8009d0c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8009d06:	6938      	ldr	r0, [r7, #16]
 8009d08:	f7fb fc40 	bl	800558c <pbuf_free>
  }

  return ERR_MEM;
 8009d0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3724      	adds	r7, #36	@ 0x24
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd90      	pop	{r4, r7, pc}
 8009d18:	080105e8 	.word	0x080105e8
 8009d1c:	0801097c 	.word	0x0801097c
 8009d20:	0801063c 	.word	0x0801063c
 8009d24:	080109a0 	.word	0x080109a0
 8009d28:	080109c4 	.word	0x080109c4
 8009d2c:	080109d4 	.word	0x080109d4
 8009d30:	080109e4 	.word	0x080109e4

08009d34 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009d34:	b590      	push	{r4, r7, lr}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d106      	bne.n	8009d50 <tcp_send_fin+0x1c>
 8009d42:	4b21      	ldr	r3, [pc, #132]	@ (8009dc8 <tcp_send_fin+0x94>)
 8009d44:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8009d48:	4920      	ldr	r1, [pc, #128]	@ (8009dcc <tcp_send_fin+0x98>)
 8009d4a:	4821      	ldr	r0, [pc, #132]	@ (8009dd0 <tcp_send_fin+0x9c>)
 8009d4c:	f004 f9dc 	bl	800e108 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d02e      	beq.n	8009db6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d5c:	60fb      	str	r3, [r7, #12]
 8009d5e:	e002      	b.n	8009d66 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1f8      	bne.n	8009d60 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	899b      	ldrh	r3, [r3, #12]
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fa f8ca 	bl	8003f10 <lwip_htons>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	f003 0307 	and.w	r3, r3, #7
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d116      	bne.n	8009db6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	899b      	ldrh	r3, [r3, #12]
 8009d8e:	b29c      	uxth	r4, r3
 8009d90:	2001      	movs	r0, #1
 8009d92:	f7fa f8bd 	bl	8003f10 <lwip_htons>
 8009d96:	4603      	mov	r3, r0
 8009d98:	461a      	mov	r2, r3
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	4322      	orrs	r2, r4
 8009da0:	b292      	uxth	r2, r2
 8009da2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	8b5b      	ldrh	r3, [r3, #26]
 8009da8:	f043 0320 	orr.w	r3, r3, #32
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	e004      	b.n	8009dc0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009db6:	2101      	movs	r1, #1
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f80b 	bl	8009dd4 <tcp_enqueue_flags>
 8009dbe:	4603      	mov	r3, r0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3714      	adds	r7, #20
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd90      	pop	{r4, r7, pc}
 8009dc8:	080105e8 	.word	0x080105e8
 8009dcc:	080109f0 	.word	0x080109f0
 8009dd0:	0801063c 	.word	0x0801063c

08009dd4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b08a      	sub	sp, #40	@ 0x28
 8009dd8:	af02      	add	r7, sp, #8
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009de0:	2300      	movs	r3, #0
 8009de2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009de4:	2300      	movs	r3, #0
 8009de6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009de8:	78fb      	ldrb	r3, [r7, #3]
 8009dea:	f003 0303 	and.w	r3, r3, #3
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d106      	bne.n	8009e00 <tcp_enqueue_flags+0x2c>
 8009df2:	4b67      	ldr	r3, [pc, #412]	@ (8009f90 <tcp_enqueue_flags+0x1bc>)
 8009df4:	f240 4211 	movw	r2, #1041	@ 0x411
 8009df8:	4966      	ldr	r1, [pc, #408]	@ (8009f94 <tcp_enqueue_flags+0x1c0>)
 8009dfa:	4867      	ldr	r0, [pc, #412]	@ (8009f98 <tcp_enqueue_flags+0x1c4>)
 8009dfc:	f004 f984 	bl	800e108 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d106      	bne.n	8009e14 <tcp_enqueue_flags+0x40>
 8009e06:	4b62      	ldr	r3, [pc, #392]	@ (8009f90 <tcp_enqueue_flags+0x1bc>)
 8009e08:	f240 4213 	movw	r2, #1043	@ 0x413
 8009e0c:	4963      	ldr	r1, [pc, #396]	@ (8009f9c <tcp_enqueue_flags+0x1c8>)
 8009e0e:	4862      	ldr	r0, [pc, #392]	@ (8009f98 <tcp_enqueue_flags+0x1c4>)
 8009e10:	f004 f97a 	bl	800e108 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009e14:	78fb      	ldrb	r3, [r7, #3]
 8009e16:	f003 0302 	and.w	r3, r3, #2
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d001      	beq.n	8009e22 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009e22:	7ffb      	ldrb	r3, [r7, #31]
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	f003 0304 	and.w	r3, r3, #4
 8009e2c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009e2e:	7dfb      	ldrb	r3, [r7, #23]
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009e36:	4619      	mov	r1, r3
 8009e38:	2036      	movs	r0, #54	@ 0x36
 8009e3a:	f7fb f8c3 	bl	8004fc4 <pbuf_alloc>
 8009e3e:	6138      	str	r0, [r7, #16]
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d109      	bne.n	8009e5a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	8b5b      	ldrh	r3, [r3, #26]
 8009e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009e54:	f04f 33ff 	mov.w	r3, #4294967295
 8009e58:	e095      	b.n	8009f86 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	895a      	ldrh	r2, [r3, #10]
 8009e5e:	7dfb      	ldrb	r3, [r7, #23]
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d206      	bcs.n	8009e74 <tcp_enqueue_flags+0xa0>
 8009e66:	4b4a      	ldr	r3, [pc, #296]	@ (8009f90 <tcp_enqueue_flags+0x1bc>)
 8009e68:	f240 4239 	movw	r2, #1081	@ 0x439
 8009e6c:	494c      	ldr	r1, [pc, #304]	@ (8009fa0 <tcp_enqueue_flags+0x1cc>)
 8009e6e:	484a      	ldr	r0, [pc, #296]	@ (8009f98 <tcp_enqueue_flags+0x1c4>)
 8009e70:	f004 f94a 	bl	800e108 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8009e78:	78fa      	ldrb	r2, [r7, #3]
 8009e7a:	7ffb      	ldrb	r3, [r7, #31]
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	460b      	mov	r3, r1
 8009e80:	6939      	ldr	r1, [r7, #16]
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7ff fd72 	bl	800996c <tcp_create_segment>
 8009e88:	60f8      	str	r0, [r7, #12]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d109      	bne.n	8009ea4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	8b5b      	ldrh	r3, [r3, #26]
 8009e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009ea2:	e070      	b.n	8009f86 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	f003 0303 	and.w	r3, r3, #3
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d006      	beq.n	8009ebe <tcp_enqueue_flags+0xea>
 8009eb0:	4b37      	ldr	r3, [pc, #220]	@ (8009f90 <tcp_enqueue_flags+0x1bc>)
 8009eb2:	f240 4242 	movw	r2, #1090	@ 0x442
 8009eb6:	493b      	ldr	r1, [pc, #236]	@ (8009fa4 <tcp_enqueue_flags+0x1d0>)
 8009eb8:	4837      	ldr	r0, [pc, #220]	@ (8009f98 <tcp_enqueue_flags+0x1c4>)
 8009eba:	f004 f925 	bl	800e108 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	891b      	ldrh	r3, [r3, #8]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d006      	beq.n	8009ed4 <tcp_enqueue_flags+0x100>
 8009ec6:	4b32      	ldr	r3, [pc, #200]	@ (8009f90 <tcp_enqueue_flags+0x1bc>)
 8009ec8:	f240 4243 	movw	r2, #1091	@ 0x443
 8009ecc:	4936      	ldr	r1, [pc, #216]	@ (8009fa8 <tcp_enqueue_flags+0x1d4>)
 8009ece:	4832      	ldr	r0, [pc, #200]	@ (8009f98 <tcp_enqueue_flags+0x1c4>)
 8009ed0:	f004 f91a 	bl	800e108 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d103      	bne.n	8009ee4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	68fa      	ldr	r2, [r7, #12]
 8009ee0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009ee2:	e00d      	b.n	8009f00 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ee8:	61bb      	str	r3, [r7, #24]
 8009eea:	e002      	b.n	8009ef2 <tcp_enqueue_flags+0x11e>
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	61bb      	str	r3, [r7, #24]
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1f8      	bne.n	8009eec <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009f08:	78fb      	ldrb	r3, [r7, #3]
 8009f0a:	f003 0302 	and.w	r3, r3, #2
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d104      	bne.n	8009f1c <tcp_enqueue_flags+0x148>
 8009f12:	78fb      	ldrb	r3, [r7, #3]
 8009f14:	f003 0301 	and.w	r3, r3, #1
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d004      	beq.n	8009f26 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f20:	1c5a      	adds	r2, r3, #1
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009f26:	78fb      	ldrb	r3, [r7, #3]
 8009f28:	f003 0301 	and.w	r3, r3, #1
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d006      	beq.n	8009f3e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	8b5b      	ldrh	r3, [r3, #26]
 8009f34:	f043 0320 	orr.w	r3, r3, #32
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fb fbaa 	bl	800569c <pbuf_clen>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009f52:	4413      	add	r3, r2
 8009f54:	b29a      	uxth	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00e      	beq.n	8009f84 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10a      	bne.n	8009f84 <tcp_enqueue_flags+0x1b0>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d106      	bne.n	8009f84 <tcp_enqueue_flags+0x1b0>
 8009f76:	4b06      	ldr	r3, [pc, #24]	@ (8009f90 <tcp_enqueue_flags+0x1bc>)
 8009f78:	f240 4265 	movw	r2, #1125	@ 0x465
 8009f7c:	490b      	ldr	r1, [pc, #44]	@ (8009fac <tcp_enqueue_flags+0x1d8>)
 8009f7e:	4806      	ldr	r0, [pc, #24]	@ (8009f98 <tcp_enqueue_flags+0x1c4>)
 8009f80:	f004 f8c2 	bl	800e108 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3720      	adds	r7, #32
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	080105e8 	.word	0x080105e8
 8009f94:	08010a0c 	.word	0x08010a0c
 8009f98:	0801063c 	.word	0x0801063c
 8009f9c:	08010a64 	.word	0x08010a64
 8009fa0:	08010a84 	.word	0x08010a84
 8009fa4:	08010ac0 	.word	0x08010ac0
 8009fa8:	08010ad8 	.word	0x08010ad8
 8009fac:	08010b04 	.word	0x08010b04

08009fb0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009fb0:	b5b0      	push	{r4, r5, r7, lr}
 8009fb2:	b08a      	sub	sp, #40	@ 0x28
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d106      	bne.n	8009fcc <tcp_output+0x1c>
 8009fbe:	4b8a      	ldr	r3, [pc, #552]	@ (800a1e8 <tcp_output+0x238>)
 8009fc0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8009fc4:	4989      	ldr	r1, [pc, #548]	@ (800a1ec <tcp_output+0x23c>)
 8009fc6:	488a      	ldr	r0, [pc, #552]	@ (800a1f0 <tcp_output+0x240>)
 8009fc8:	f004 f89e 	bl	800e108 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	7d1b      	ldrb	r3, [r3, #20]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d106      	bne.n	8009fe2 <tcp_output+0x32>
 8009fd4:	4b84      	ldr	r3, [pc, #528]	@ (800a1e8 <tcp_output+0x238>)
 8009fd6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8009fda:	4986      	ldr	r1, [pc, #536]	@ (800a1f4 <tcp_output+0x244>)
 8009fdc:	4884      	ldr	r0, [pc, #528]	@ (800a1f0 <tcp_output+0x240>)
 8009fde:	f004 f893 	bl	800e108 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009fe2:	4b85      	ldr	r3, [pc, #532]	@ (800a1f8 <tcp_output+0x248>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d101      	bne.n	8009ff0 <tcp_output+0x40>
    return ERR_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	e1ce      	b.n	800a38e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	bf28      	it	cs
 800a000:	4613      	movcs	r3, r2
 800a002:	b29b      	uxth	r3, r3
 800a004:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a00a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800a00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10b      	bne.n	800a02a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	8b5b      	ldrh	r3, [r3, #26]
 800a016:	f003 0302 	and.w	r3, r3, #2
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f000 81aa 	beq.w	800a374 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 fdcb 	bl	800abbc <tcp_send_empty_ack>
 800a026:	4603      	mov	r3, r0
 800a028:	e1b1      	b.n	800a38e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	3304      	adds	r3, #4
 800a030:	461a      	mov	r2, r3
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f7ff fc7e 	bl	8009934 <tcp_route>
 800a038:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d102      	bne.n	800a046 <tcp_output+0x96>
    return ERR_RTE;
 800a040:	f06f 0303 	mvn.w	r3, #3
 800a044:	e1a3      	b.n	800a38e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d003      	beq.n	800a054 <tcp_output+0xa4>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d111      	bne.n	800a078 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d002      	beq.n	800a060 <tcp_output+0xb0>
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	3304      	adds	r3, #4
 800a05e:	e000      	b.n	800a062 <tcp_output+0xb2>
 800a060:	2300      	movs	r3, #0
 800a062:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d102      	bne.n	800a070 <tcp_output+0xc0>
      return ERR_RTE;
 800a06a:	f06f 0303 	mvn.w	r3, #3
 800a06e:	e18e      	b.n	800a38e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	4618      	mov	r0, r3
 800a080:	f7f9 ff5b 	bl	8003f3a <lwip_htonl>
 800a084:	4602      	mov	r2, r0
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a08e:	8912      	ldrh	r2, [r2, #8]
 800a090:	4413      	add	r3, r2
 800a092:	69ba      	ldr	r2, [r7, #24]
 800a094:	429a      	cmp	r2, r3
 800a096:	d227      	bcs.n	800a0e8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a09e:	461a      	mov	r2, r3
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d114      	bne.n	800a0d0 <tcp_output+0x120>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d110      	bne.n	800a0d0 <tcp_output+0x120>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10b      	bne.n	800a0d0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	8b5b      	ldrh	r3, [r3, #26]
 800a0d4:	f003 0302 	and.w	r3, r3, #2
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f000 814d 	beq.w	800a378 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 fd6c 	bl	800abbc <tcp_send_empty_ack>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	e152      	b.n	800a38e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0f4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a0f6:	6a3b      	ldr	r3, [r7, #32]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f000 811c 	beq.w	800a336 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800a0fe:	e002      	b.n	800a106 <tcp_output+0x156>
 800a100:	6a3b      	ldr	r3, [r7, #32]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	623b      	str	r3, [r7, #32]
 800a106:	6a3b      	ldr	r3, [r7, #32]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d1f8      	bne.n	800a100 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800a10e:	e112      	b.n	800a336 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	899b      	ldrh	r3, [r3, #12]
 800a116:	b29b      	uxth	r3, r3
 800a118:	4618      	mov	r0, r3
 800a11a:	f7f9 fef9 	bl	8003f10 <lwip_htons>
 800a11e:	4603      	mov	r3, r0
 800a120:	b2db      	uxtb	r3, r3
 800a122:	f003 0304 	and.w	r3, r3, #4
 800a126:	2b00      	cmp	r3, #0
 800a128:	d006      	beq.n	800a138 <tcp_output+0x188>
 800a12a:	4b2f      	ldr	r3, [pc, #188]	@ (800a1e8 <tcp_output+0x238>)
 800a12c:	f240 5236 	movw	r2, #1334	@ 0x536
 800a130:	4932      	ldr	r1, [pc, #200]	@ (800a1fc <tcp_output+0x24c>)
 800a132:	482f      	ldr	r0, [pc, #188]	@ (800a1f0 <tcp_output+0x240>)
 800a134:	f003 ffe8 	bl	800e108 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d01f      	beq.n	800a180 <tcp_output+0x1d0>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	8b5b      	ldrh	r3, [r3, #26]
 800a144:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d119      	bne.n	800a180 <tcp_output+0x1d0>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a150:	2b00      	cmp	r3, #0
 800a152:	d00b      	beq.n	800a16c <tcp_output+0x1bc>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d110      	bne.n	800a180 <tcp_output+0x1d0>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a162:	891a      	ldrh	r2, [r3, #8]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a168:	429a      	cmp	r2, r3
 800a16a:	d209      	bcs.n	800a180 <tcp_output+0x1d0>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a172:	2b00      	cmp	r3, #0
 800a174:	d004      	beq.n	800a180 <tcp_output+0x1d0>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a17c:	2b08      	cmp	r3, #8
 800a17e:	d901      	bls.n	800a184 <tcp_output+0x1d4>
 800a180:	2301      	movs	r3, #1
 800a182:	e000      	b.n	800a186 <tcp_output+0x1d6>
 800a184:	2300      	movs	r3, #0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d106      	bne.n	800a198 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	8b5b      	ldrh	r3, [r3, #26]
 800a18e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a192:	2b00      	cmp	r3, #0
 800a194:	f000 80e4 	beq.w	800a360 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	7d1b      	ldrb	r3, [r3, #20]
 800a19c:	2b02      	cmp	r3, #2
 800a19e:	d00d      	beq.n	800a1bc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	899b      	ldrh	r3, [r3, #12]
 800a1a6:	b29c      	uxth	r4, r3
 800a1a8:	2010      	movs	r0, #16
 800a1aa:	f7f9 feb1 	bl	8003f10 <lwip_htons>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	4322      	orrs	r2, r4
 800a1b8:	b292      	uxth	r2, r2
 800a1ba:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	6879      	ldr	r1, [r7, #4]
 800a1c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a1c2:	f000 f909 	bl	800a3d8 <tcp_output_segment>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a1ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d016      	beq.n	800a200 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	8b5b      	ldrh	r3, [r3, #26]
 800a1d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	835a      	strh	r2, [r3, #26]
      return err;
 800a1e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1e4:	e0d3      	b.n	800a38e <tcp_output+0x3de>
 800a1e6:	bf00      	nop
 800a1e8:	080105e8 	.word	0x080105e8
 800a1ec:	08010b2c 	.word	0x08010b2c
 800a1f0:	0801063c 	.word	0x0801063c
 800a1f4:	08010b44 	.word	0x08010b44
 800a1f8:	200082dc 	.word	0x200082dc
 800a1fc:	08010b6c 	.word	0x08010b6c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	7d1b      	ldrb	r3, [r3, #20]
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d006      	beq.n	800a21e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	8b5b      	ldrh	r3, [r3, #26]
 800a214:	f023 0303 	bic.w	r3, r3, #3
 800a218:	b29a      	uxth	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	4618      	mov	r0, r3
 800a226:	f7f9 fe88 	bl	8003f3a <lwip_htonl>
 800a22a:	4604      	mov	r4, r0
 800a22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a22e:	891b      	ldrh	r3, [r3, #8]
 800a230:	461d      	mov	r5, r3
 800a232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	899b      	ldrh	r3, [r3, #12]
 800a238:	b29b      	uxth	r3, r3
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7f9 fe68 	bl	8003f10 <lwip_htons>
 800a240:	4603      	mov	r3, r0
 800a242:	b2db      	uxtb	r3, r3
 800a244:	f003 0303 	and.w	r3, r3, #3
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d001      	beq.n	800a250 <tcp_output+0x2a0>
 800a24c:	2301      	movs	r3, #1
 800a24e:	e000      	b.n	800a252 <tcp_output+0x2a2>
 800a250:	2300      	movs	r3, #0
 800a252:	442b      	add	r3, r5
 800a254:	4423      	add	r3, r4
 800a256:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	1ad3      	subs	r3, r2, r3
 800a260:	2b00      	cmp	r3, #0
 800a262:	da02      	bge.n	800a26a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26c:	891b      	ldrh	r3, [r3, #8]
 800a26e:	461c      	mov	r4, r3
 800a270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	899b      	ldrh	r3, [r3, #12]
 800a276:	b29b      	uxth	r3, r3
 800a278:	4618      	mov	r0, r3
 800a27a:	f7f9 fe49 	bl	8003f10 <lwip_htons>
 800a27e:	4603      	mov	r3, r0
 800a280:	b2db      	uxtb	r3, r3
 800a282:	f003 0303 	and.w	r3, r3, #3
 800a286:	2b00      	cmp	r3, #0
 800a288:	d001      	beq.n	800a28e <tcp_output+0x2de>
 800a28a:	2301      	movs	r3, #1
 800a28c:	e000      	b.n	800a290 <tcp_output+0x2e0>
 800a28e:	2300      	movs	r3, #0
 800a290:	4423      	add	r3, r4
 800a292:	2b00      	cmp	r3, #0
 800a294:	d049      	beq.n	800a32a <tcp_output+0x37a>
      seg->next = NULL;
 800a296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a298:	2200      	movs	r2, #0
 800a29a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d105      	bne.n	800a2b0 <tcp_output+0x300>
        pcb->unacked = seg;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2a8:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ac:	623b      	str	r3, [r7, #32]
 800a2ae:	e03f      	b.n	800a330 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7f9 fe3f 	bl	8003f3a <lwip_htonl>
 800a2bc:	4604      	mov	r4, r0
 800a2be:	6a3b      	ldr	r3, [r7, #32]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7f9 fe38 	bl	8003f3a <lwip_htonl>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	1ae3      	subs	r3, r4, r3
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	da24      	bge.n	800a31c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	3370      	adds	r3, #112	@ 0x70
 800a2d6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a2d8:	e002      	b.n	800a2e0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d011      	beq.n	800a30c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7f9 fe22 	bl	8003f3a <lwip_htonl>
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7f9 fe1b 	bl	8003f3a <lwip_htonl>
 800a304:	4603      	mov	r3, r0
 800a306:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a308:	2b00      	cmp	r3, #0
 800a30a:	dbe6      	blt.n	800a2da <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a312:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a318:	601a      	str	r2, [r3, #0]
 800a31a:	e009      	b.n	800a330 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a320:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a322:	6a3b      	ldr	r3, [r7, #32]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	623b      	str	r3, [r7, #32]
 800a328:	e002      	b.n	800a330 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a32a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a32c:	f7fc fc45 	bl	8006bba <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a334:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800a336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d012      	beq.n	800a362 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	4618      	mov	r0, r3
 800a344:	f7f9 fdf9 	bl	8003f3a <lwip_htonl>
 800a348:	4602      	mov	r2, r0
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a34e:	1ad3      	subs	r3, r2, r3
 800a350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a352:	8912      	ldrh	r2, [r2, #8]
 800a354:	4413      	add	r3, r2
  while (seg != NULL &&
 800a356:	69ba      	ldr	r2, [r7, #24]
 800a358:	429a      	cmp	r2, r3
 800a35a:	f4bf aed9 	bcs.w	800a110 <tcp_output+0x160>
 800a35e:	e000      	b.n	800a362 <tcp_output+0x3b2>
      break;
 800a360:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a366:	2b00      	cmp	r3, #0
 800a368:	d108      	bne.n	800a37c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800a372:	e004      	b.n	800a37e <tcp_output+0x3ce>
    goto output_done;
 800a374:	bf00      	nop
 800a376:	e002      	b.n	800a37e <tcp_output+0x3ce>
    goto output_done;
 800a378:	bf00      	nop
 800a37a:	e000      	b.n	800a37e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a37c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	8b5b      	ldrh	r3, [r3, #26]
 800a382:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a386:	b29a      	uxth	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3728      	adds	r7, #40	@ 0x28
 800a392:	46bd      	mov	sp, r7
 800a394:	bdb0      	pop	{r4, r5, r7, pc}
 800a396:	bf00      	nop

0800a398 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d106      	bne.n	800a3b4 <tcp_output_segment_busy+0x1c>
 800a3a6:	4b09      	ldr	r3, [pc, #36]	@ (800a3cc <tcp_output_segment_busy+0x34>)
 800a3a8:	f240 529a 	movw	r2, #1434	@ 0x59a
 800a3ac:	4908      	ldr	r1, [pc, #32]	@ (800a3d0 <tcp_output_segment_busy+0x38>)
 800a3ae:	4809      	ldr	r0, [pc, #36]	@ (800a3d4 <tcp_output_segment_busy+0x3c>)
 800a3b0:	f003 feaa 	bl	800e108 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	7b9b      	ldrb	r3, [r3, #14]
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d001      	beq.n	800a3c2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e000      	b.n	800a3c4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	080105e8 	.word	0x080105e8
 800a3d0:	08010b84 	.word	0x08010b84
 800a3d4:	0801063c 	.word	0x0801063c

0800a3d8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a3d8:	b5b0      	push	{r4, r5, r7, lr}
 800a3da:	b08c      	sub	sp, #48	@ 0x30
 800a3dc:	af04      	add	r7, sp, #16
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d106      	bne.n	800a3f8 <tcp_output_segment+0x20>
 800a3ea:	4b64      	ldr	r3, [pc, #400]	@ (800a57c <tcp_output_segment+0x1a4>)
 800a3ec:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800a3f0:	4963      	ldr	r1, [pc, #396]	@ (800a580 <tcp_output_segment+0x1a8>)
 800a3f2:	4864      	ldr	r0, [pc, #400]	@ (800a584 <tcp_output_segment+0x1ac>)
 800a3f4:	f003 fe88 	bl	800e108 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d106      	bne.n	800a40c <tcp_output_segment+0x34>
 800a3fe:	4b5f      	ldr	r3, [pc, #380]	@ (800a57c <tcp_output_segment+0x1a4>)
 800a400:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800a404:	4960      	ldr	r1, [pc, #384]	@ (800a588 <tcp_output_segment+0x1b0>)
 800a406:	485f      	ldr	r0, [pc, #380]	@ (800a584 <tcp_output_segment+0x1ac>)
 800a408:	f003 fe7e 	bl	800e108 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d106      	bne.n	800a420 <tcp_output_segment+0x48>
 800a412:	4b5a      	ldr	r3, [pc, #360]	@ (800a57c <tcp_output_segment+0x1a4>)
 800a414:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800a418:	495c      	ldr	r1, [pc, #368]	@ (800a58c <tcp_output_segment+0x1b4>)
 800a41a:	485a      	ldr	r0, [pc, #360]	@ (800a584 <tcp_output_segment+0x1ac>)
 800a41c:	f003 fe74 	bl	800e108 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f7ff ffb9 	bl	800a398 <tcp_output_segment_busy>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a42c:	2300      	movs	r3, #0
 800a42e:	e0a1      	b.n	800a574 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	68dc      	ldr	r4, [r3, #12]
 800a438:	4610      	mov	r0, r2
 800a43a:	f7f9 fd7e 	bl	8003f3a <lwip_htonl>
 800a43e:	4603      	mov	r3, r0
 800a440:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	68dc      	ldr	r4, [r3, #12]
 800a44a:	4610      	mov	r0, r2
 800a44c:	f7f9 fd60 	bl	8003f10 <lwip_htons>
 800a450:	4603      	mov	r3, r0
 800a452:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a458:	68ba      	ldr	r2, [r7, #8]
 800a45a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800a45c:	441a      	add	r2, r3
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	3314      	adds	r3, #20
 800a468:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	7a9b      	ldrb	r3, [r3, #10]
 800a46e:	f003 0301 	and.w	r3, r3, #1
 800a472:	2b00      	cmp	r3, #0
 800a474:	d015      	beq.n	800a4a2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	3304      	adds	r3, #4
 800a47a:	461a      	mov	r2, r3
 800a47c:	6879      	ldr	r1, [r7, #4]
 800a47e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800a482:	f7fc fe91 	bl	80071a8 <tcp_eff_send_mss_netif>
 800a486:	4603      	mov	r3, r0
 800a488:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a48a:	8b7b      	ldrh	r3, [r7, #26]
 800a48c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800a490:	4618      	mov	r0, r3
 800a492:	f7f9 fd52 	bl	8003f3a <lwip_htonl>
 800a496:	4602      	mov	r2, r0
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	3304      	adds	r3, #4
 800a4a0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	da02      	bge.n	800a4b2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10c      	bne.n	800a4d4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800a4ba:	4b35      	ldr	r3, [pc, #212]	@ (800a590 <tcp_output_segment+0x1b8>)
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7f9 fd36 	bl	8003f3a <lwip_htonl>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	68da      	ldr	r2, [r3, #12]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	8959      	ldrh	r1, [r3, #10]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	8b3a      	ldrh	r2, [r7, #24]
 800a4ee:	1a8a      	subs	r2, r1, r2
 800a4f0:	b292      	uxth	r2, r2
 800a4f2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	8919      	ldrh	r1, [r3, #8]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	8b3a      	ldrh	r2, [r7, #24]
 800a500:	1a8a      	subs	r2, r1, r2
 800a502:	b292      	uxth	r2, r2
 800a504:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	68d2      	ldr	r2, [r2, #12]
 800a50e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	2200      	movs	r2, #0
 800a516:	741a      	strb	r2, [r3, #16]
 800a518:	2200      	movs	r2, #0
 800a51a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	68da      	ldr	r2, [r3, #12]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	7a9b      	ldrb	r3, [r3, #10]
 800a524:	f003 0301 	and.w	r3, r3, #1
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d001      	beq.n	800a530 <tcp_output_segment+0x158>
 800a52c:	2318      	movs	r3, #24
 800a52e:	e000      	b.n	800a532 <tcp_output_segment+0x15a>
 800a530:	2314      	movs	r3, #20
 800a532:	4413      	add	r3, r2
 800a534:	69fa      	ldr	r2, [r7, #28]
 800a536:	429a      	cmp	r2, r3
 800a538:	d006      	beq.n	800a548 <tcp_output_segment+0x170>
 800a53a:	4b10      	ldr	r3, [pc, #64]	@ (800a57c <tcp_output_segment+0x1a4>)
 800a53c:	f240 621c 	movw	r2, #1564	@ 0x61c
 800a540:	4914      	ldr	r1, [pc, #80]	@ (800a594 <tcp_output_segment+0x1bc>)
 800a542:	4810      	ldr	r0, [pc, #64]	@ (800a584 <tcp_output_segment+0x1ac>)
 800a544:	f003 fde0 	bl	800e108 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6858      	ldr	r0, [r3, #4]
 800a54c:	68b9      	ldr	r1, [r7, #8]
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	1d1c      	adds	r4, r3, #4
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	7add      	ldrb	r5, [r3, #11]
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	7a9b      	ldrb	r3, [r3, #10]
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	9202      	str	r2, [sp, #8]
 800a55e:	2206      	movs	r2, #6
 800a560:	9201      	str	r2, [sp, #4]
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	462b      	mov	r3, r5
 800a566:	4622      	mov	r2, r4
 800a568:	f002 fca0 	bl	800ceac <ip4_output_if>
 800a56c:	4603      	mov	r3, r0
 800a56e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800a570:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3720      	adds	r7, #32
 800a578:	46bd      	mov	sp, r7
 800a57a:	bdb0      	pop	{r4, r5, r7, pc}
 800a57c:	080105e8 	.word	0x080105e8
 800a580:	08010bac 	.word	0x08010bac
 800a584:	0801063c 	.word	0x0801063c
 800a588:	08010bcc 	.word	0x08010bcc
 800a58c:	08010bec 	.word	0x08010bec
 800a590:	20008290 	.word	0x20008290
 800a594:	08010c10 	.word	0x08010c10

0800a598 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800a598:	b5b0      	push	{r4, r5, r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d106      	bne.n	800a5b4 <tcp_rexmit_rto_prepare+0x1c>
 800a5a6:	4b31      	ldr	r3, [pc, #196]	@ (800a66c <tcp_rexmit_rto_prepare+0xd4>)
 800a5a8:	f240 6263 	movw	r2, #1635	@ 0x663
 800a5ac:	4930      	ldr	r1, [pc, #192]	@ (800a670 <tcp_rexmit_rto_prepare+0xd8>)
 800a5ae:	4831      	ldr	r0, [pc, #196]	@ (800a674 <tcp_rexmit_rto_prepare+0xdc>)
 800a5b0:	f003 fdaa 	bl	800e108 <iprintf>

  if (pcb->unacked == NULL) {
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d102      	bne.n	800a5c2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800a5bc:	f06f 0305 	mvn.w	r3, #5
 800a5c0:	e050      	b.n	800a664 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5c6:	60fb      	str	r3, [r7, #12]
 800a5c8:	e00b      	b.n	800a5e2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f7ff fee4 	bl	800a398 <tcp_output_segment_busy>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d002      	beq.n	800a5dc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a5d6:	f06f 0305 	mvn.w	r3, #5
 800a5da:	e043      	b.n	800a664 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	60fb      	str	r3, [r7, #12]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d1ef      	bne.n	800a5ca <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f7ff fed4 	bl	800a398 <tcp_output_segment_busy>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d002      	beq.n	800a5fc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a5f6:	f06f 0305 	mvn.w	r3, #5
 800a5fa:	e033      	b.n	800a664 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	8b5b      	ldrh	r3, [r3, #26]
 800a616:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	4618      	mov	r0, r3
 800a628:	f7f9 fc87 	bl	8003f3a <lwip_htonl>
 800a62c:	4604      	mov	r4, r0
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	891b      	ldrh	r3, [r3, #8]
 800a632:	461d      	mov	r5, r3
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	899b      	ldrh	r3, [r3, #12]
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7f9 fc67 	bl	8003f10 <lwip_htons>
 800a642:	4603      	mov	r3, r0
 800a644:	b2db      	uxtb	r3, r3
 800a646:	f003 0303 	and.w	r3, r3, #3
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d001      	beq.n	800a652 <tcp_rexmit_rto_prepare+0xba>
 800a64e:	2301      	movs	r3, #1
 800a650:	e000      	b.n	800a654 <tcp_rexmit_rto_prepare+0xbc>
 800a652:	2300      	movs	r3, #0
 800a654:	442b      	add	r3, r5
 800a656:	18e2      	adds	r2, r4, r3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bdb0      	pop	{r4, r5, r7, pc}
 800a66c:	080105e8 	.word	0x080105e8
 800a670:	08010c24 	.word	0x08010c24
 800a674:	0801063c 	.word	0x0801063c

0800a678 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d106      	bne.n	800a694 <tcp_rexmit_rto_commit+0x1c>
 800a686:	4b0d      	ldr	r3, [pc, #52]	@ (800a6bc <tcp_rexmit_rto_commit+0x44>)
 800a688:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800a68c:	490c      	ldr	r1, [pc, #48]	@ (800a6c0 <tcp_rexmit_rto_commit+0x48>)
 800a68e:	480d      	ldr	r0, [pc, #52]	@ (800a6c4 <tcp_rexmit_rto_commit+0x4c>)
 800a690:	f003 fd3a 	bl	800e108 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a69a:	2bff      	cmp	r3, #255	@ 0xff
 800a69c:	d007      	beq.n	800a6ae <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	b2da      	uxtb	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7ff fc7e 	bl	8009fb0 <tcp_output>
}
 800a6b4:	bf00      	nop
 800a6b6:	3708      	adds	r7, #8
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	080105e8 	.word	0x080105e8
 800a6c0:	08010c48 	.word	0x08010c48
 800a6c4:	0801063c 	.word	0x0801063c

0800a6c8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d106      	bne.n	800a6e4 <tcp_rexmit_rto+0x1c>
 800a6d6:	4b0a      	ldr	r3, [pc, #40]	@ (800a700 <tcp_rexmit_rto+0x38>)
 800a6d8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800a6dc:	4909      	ldr	r1, [pc, #36]	@ (800a704 <tcp_rexmit_rto+0x3c>)
 800a6de:	480a      	ldr	r0, [pc, #40]	@ (800a708 <tcp_rexmit_rto+0x40>)
 800a6e0:	f003 fd12 	bl	800e108 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f7ff ff57 	bl	800a598 <tcp_rexmit_rto_prepare>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d102      	bne.n	800a6f6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f7ff ffc1 	bl	800a678 <tcp_rexmit_rto_commit>
  }
}
 800a6f6:	bf00      	nop
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	080105e8 	.word	0x080105e8
 800a704:	08010c6c 	.word	0x08010c6c
 800a708:	0801063c 	.word	0x0801063c

0800a70c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a70c:	b590      	push	{r4, r7, lr}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d106      	bne.n	800a728 <tcp_rexmit+0x1c>
 800a71a:	4b2f      	ldr	r3, [pc, #188]	@ (800a7d8 <tcp_rexmit+0xcc>)
 800a71c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800a720:	492e      	ldr	r1, [pc, #184]	@ (800a7dc <tcp_rexmit+0xd0>)
 800a722:	482f      	ldr	r0, [pc, #188]	@ (800a7e0 <tcp_rexmit+0xd4>)
 800a724:	f003 fcf0 	bl	800e108 <iprintf>

  if (pcb->unacked == NULL) {
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d102      	bne.n	800a736 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a730:	f06f 0305 	mvn.w	r3, #5
 800a734:	e04c      	b.n	800a7d0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a73a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a73c:	68b8      	ldr	r0, [r7, #8]
 800a73e:	f7ff fe2b 	bl	800a398 <tcp_output_segment_busy>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d002      	beq.n	800a74e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a748:	f06f 0305 	mvn.w	r3, #5
 800a74c:	e040      	b.n	800a7d0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	336c      	adds	r3, #108	@ 0x6c
 800a75a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a75c:	e002      	b.n	800a764 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d011      	beq.n	800a790 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	4618      	mov	r0, r3
 800a776:	f7f9 fbe0 	bl	8003f3a <lwip_htonl>
 800a77a:	4604      	mov	r4, r0
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	68db      	ldr	r3, [r3, #12]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	4618      	mov	r0, r3
 800a784:	f7f9 fbd9 	bl	8003f3a <lwip_htonl>
 800a788:	4603      	mov	r3, r0
 800a78a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	dbe6      	blt.n	800a75e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d103      	bne.n	800a7ae <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a7b4:	2bff      	cmp	r3, #255	@ 0xff
 800a7b6:	d007      	beq.n	800a7c8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a7be:	3301      	adds	r3, #1
 800a7c0:	b2da      	uxtb	r2, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3714      	adds	r7, #20
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd90      	pop	{r4, r7, pc}
 800a7d8:	080105e8 	.word	0x080105e8
 800a7dc:	08010c88 	.word	0x08010c88
 800a7e0:	0801063c 	.word	0x0801063c

0800a7e4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d106      	bne.n	800a800 <tcp_rexmit_fast+0x1c>
 800a7f2:	4b2a      	ldr	r3, [pc, #168]	@ (800a89c <tcp_rexmit_fast+0xb8>)
 800a7f4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800a7f8:	4929      	ldr	r1, [pc, #164]	@ (800a8a0 <tcp_rexmit_fast+0xbc>)
 800a7fa:	482a      	ldr	r0, [pc, #168]	@ (800a8a4 <tcp_rexmit_fast+0xc0>)
 800a7fc:	f003 fc84 	bl	800e108 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a804:	2b00      	cmp	r3, #0
 800a806:	d045      	beq.n	800a894 <tcp_rexmit_fast+0xb0>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	8b5b      	ldrh	r3, [r3, #26]
 800a80c:	f003 0304 	and.w	r3, r3, #4
 800a810:	2b00      	cmp	r3, #0
 800a812:	d13f      	bne.n	800a894 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7ff ff79 	bl	800a70c <tcp_rexmit>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d139      	bne.n	800a894 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a82c:	4293      	cmp	r3, r2
 800a82e:	bf28      	it	cs
 800a830:	4613      	movcs	r3, r2
 800a832:	b29b      	uxth	r3, r3
 800a834:	2b00      	cmp	r3, #0
 800a836:	da00      	bge.n	800a83a <tcp_rexmit_fast+0x56>
 800a838:	3301      	adds	r3, #1
 800a83a:	105b      	asrs	r3, r3, #1
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800a84a:	461a      	mov	r2, r3
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a850:	005b      	lsls	r3, r3, #1
 800a852:	429a      	cmp	r2, r3
 800a854:	d206      	bcs.n	800a864 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a85a:	005b      	lsls	r3, r3, #1
 800a85c:	b29a      	uxth	r2, r3
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a86e:	4619      	mov	r1, r3
 800a870:	0049      	lsls	r1, r1, #1
 800a872:	440b      	add	r3, r1
 800a874:	b29b      	uxth	r3, r3
 800a876:	4413      	add	r3, r2
 800a878:	b29a      	uxth	r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	8b5b      	ldrh	r3, [r3, #26]
 800a884:	f043 0304 	orr.w	r3, r3, #4
 800a888:	b29a      	uxth	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800a894:	bf00      	nop
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	080105e8 	.word	0x080105e8
 800a8a0:	08010ca0 	.word	0x08010ca0
 800a8a4:	0801063c 	.word	0x0801063c

0800a8a8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b086      	sub	sp, #24
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	607b      	str	r3, [r7, #4]
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	817b      	strh	r3, [r7, #10]
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a8ba:	897a      	ldrh	r2, [r7, #10]
 800a8bc:	893b      	ldrh	r3, [r7, #8]
 800a8be:	4413      	add	r3, r2
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	3314      	adds	r3, #20
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	2022      	movs	r0, #34	@ 0x22
 800a8ce:	f7fa fb79 	bl	8004fc4 <pbuf_alloc>
 800a8d2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d04d      	beq.n	800a976 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a8da:	897b      	ldrh	r3, [r7, #10]
 800a8dc:	3313      	adds	r3, #19
 800a8de:	697a      	ldr	r2, [r7, #20]
 800a8e0:	8952      	ldrh	r2, [r2, #10]
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	db06      	blt.n	800a8f4 <tcp_output_alloc_header_common+0x4c>
 800a8e6:	4b26      	ldr	r3, [pc, #152]	@ (800a980 <tcp_output_alloc_header_common+0xd8>)
 800a8e8:	f240 7223 	movw	r2, #1827	@ 0x723
 800a8ec:	4925      	ldr	r1, [pc, #148]	@ (800a984 <tcp_output_alloc_header_common+0xdc>)
 800a8ee:	4826      	ldr	r0, [pc, #152]	@ (800a988 <tcp_output_alloc_header_common+0xe0>)
 800a8f0:	f003 fc0a 	bl	800e108 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a8fa:	8c3b      	ldrh	r3, [r7, #32]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7f9 fb07 	bl	8003f10 <lwip_htons>
 800a902:	4603      	mov	r3, r0
 800a904:	461a      	mov	r2, r3
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a90a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7f9 faff 	bl	8003f10 <lwip_htons>
 800a912:	4603      	mov	r3, r0
 800a914:	461a      	mov	r2, r3
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f7f9 fb0a 	bl	8003f3a <lwip_htonl>
 800a926:	4602      	mov	r2, r0
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a92c:	897b      	ldrh	r3, [r7, #10]
 800a92e:	089b      	lsrs	r3, r3, #2
 800a930:	b29b      	uxth	r3, r3
 800a932:	3305      	adds	r3, #5
 800a934:	b29b      	uxth	r3, r3
 800a936:	031b      	lsls	r3, r3, #12
 800a938:	b29a      	uxth	r2, r3
 800a93a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a93e:	b29b      	uxth	r3, r3
 800a940:	4313      	orrs	r3, r2
 800a942:	b29b      	uxth	r3, r3
 800a944:	4618      	mov	r0, r3
 800a946:	f7f9 fae3 	bl	8003f10 <lwip_htons>
 800a94a:	4603      	mov	r3, r0
 800a94c:	461a      	mov	r2, r3
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a952:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a954:	4618      	mov	r0, r3
 800a956:	f7f9 fadb 	bl	8003f10 <lwip_htons>
 800a95a:	4603      	mov	r3, r0
 800a95c:	461a      	mov	r2, r3
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	2200      	movs	r2, #0
 800a966:	741a      	strb	r2, [r3, #16]
 800a968:	2200      	movs	r2, #0
 800a96a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	2200      	movs	r2, #0
 800a970:	749a      	strb	r2, [r3, #18]
 800a972:	2200      	movs	r2, #0
 800a974:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a976:	697b      	ldr	r3, [r7, #20]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3718      	adds	r7, #24
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	080105e8 	.word	0x080105e8
 800a984:	08010cc0 	.word	0x08010cc0
 800a988:	0801063c 	.word	0x0801063c

0800a98c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a98c:	b5b0      	push	{r4, r5, r7, lr}
 800a98e:	b08a      	sub	sp, #40	@ 0x28
 800a990:	af04      	add	r7, sp, #16
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	607b      	str	r3, [r7, #4]
 800a996:	460b      	mov	r3, r1
 800a998:	817b      	strh	r3, [r7, #10]
 800a99a:	4613      	mov	r3, r2
 800a99c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d106      	bne.n	800a9b2 <tcp_output_alloc_header+0x26>
 800a9a4:	4b15      	ldr	r3, [pc, #84]	@ (800a9fc <tcp_output_alloc_header+0x70>)
 800a9a6:	f240 7242 	movw	r2, #1858	@ 0x742
 800a9aa:	4915      	ldr	r1, [pc, #84]	@ (800aa00 <tcp_output_alloc_header+0x74>)
 800a9ac:	4815      	ldr	r0, [pc, #84]	@ (800aa04 <tcp_output_alloc_header+0x78>)
 800a9ae:	f003 fbab 	bl	800e108 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	8adb      	ldrh	r3, [r3, #22]
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	8b12      	ldrh	r2, [r2, #24]
 800a9be:	68f9      	ldr	r1, [r7, #12]
 800a9c0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800a9c2:	893d      	ldrh	r5, [r7, #8]
 800a9c4:	897c      	ldrh	r4, [r7, #10]
 800a9c6:	9103      	str	r1, [sp, #12]
 800a9c8:	2110      	movs	r1, #16
 800a9ca:	9102      	str	r1, [sp, #8]
 800a9cc:	9201      	str	r2, [sp, #4]
 800a9ce:	9300      	str	r3, [sp, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	462a      	mov	r2, r5
 800a9d4:	4621      	mov	r1, r4
 800a9d6:	f7ff ff67 	bl	800a8a8 <tcp_output_alloc_header_common>
 800a9da:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d006      	beq.n	800a9f0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800a9ea:	441a      	add	r2, r3
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800a9f0:	697b      	ldr	r3, [r7, #20]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3718      	adds	r7, #24
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bdb0      	pop	{r4, r5, r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	080105e8 	.word	0x080105e8
 800aa00:	08010cf0 	.word	0x08010cf0
 800aa04:	0801063c 	.word	0x0801063c

0800aa08 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b088      	sub	sp, #32
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	4611      	mov	r1, r2
 800aa14:	461a      	mov	r2, r3
 800aa16:	460b      	mov	r3, r1
 800aa18:	71fb      	strb	r3, [r7, #7]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d106      	bne.n	800aa36 <tcp_output_fill_options+0x2e>
 800aa28:	4b12      	ldr	r3, [pc, #72]	@ (800aa74 <tcp_output_fill_options+0x6c>)
 800aa2a:	f240 7256 	movw	r2, #1878	@ 0x756
 800aa2e:	4912      	ldr	r1, [pc, #72]	@ (800aa78 <tcp_output_fill_options+0x70>)
 800aa30:	4812      	ldr	r0, [pc, #72]	@ (800aa7c <tcp_output_fill_options+0x74>)
 800aa32:	f003 fb69 	bl	800e108 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800aa3c:	69bb      	ldr	r3, [r7, #24]
 800aa3e:	3314      	adds	r3, #20
 800aa40:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800aa42:	8bfb      	ldrh	r3, [r7, #30]
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	461a      	mov	r2, r3
 800aa48:	79fb      	ldrb	r3, [r7, #7]
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	f003 0304 	and.w	r3, r3, #4
 800aa50:	4413      	add	r3, r2
 800aa52:	3314      	adds	r3, #20
 800aa54:	69ba      	ldr	r2, [r7, #24]
 800aa56:	4413      	add	r3, r2
 800aa58:	697a      	ldr	r2, [r7, #20]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d006      	beq.n	800aa6c <tcp_output_fill_options+0x64>
 800aa5e:	4b05      	ldr	r3, [pc, #20]	@ (800aa74 <tcp_output_fill_options+0x6c>)
 800aa60:	f240 7275 	movw	r2, #1909	@ 0x775
 800aa64:	4906      	ldr	r1, [pc, #24]	@ (800aa80 <tcp_output_fill_options+0x78>)
 800aa66:	4805      	ldr	r0, [pc, #20]	@ (800aa7c <tcp_output_fill_options+0x74>)
 800aa68:	f003 fb4e 	bl	800e108 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800aa6c:	bf00      	nop
 800aa6e:	3720      	adds	r7, #32
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	080105e8 	.word	0x080105e8
 800aa78:	08010d18 	.word	0x08010d18
 800aa7c:	0801063c 	.word	0x0801063c
 800aa80:	08010c10 	.word	0x08010c10

0800aa84 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b08a      	sub	sp, #40	@ 0x28
 800aa88:	af04      	add	r7, sp, #16
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	607a      	str	r2, [r7, #4]
 800aa90:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d106      	bne.n	800aaa6 <tcp_output_control_segment+0x22>
 800aa98:	4b1c      	ldr	r3, [pc, #112]	@ (800ab0c <tcp_output_control_segment+0x88>)
 800aa9a:	f240 7287 	movw	r2, #1927	@ 0x787
 800aa9e:	491c      	ldr	r1, [pc, #112]	@ (800ab10 <tcp_output_control_segment+0x8c>)
 800aaa0:	481c      	ldr	r0, [pc, #112]	@ (800ab14 <tcp_output_control_segment+0x90>)
 800aaa2:	f003 fb31 	bl	800e108 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800aaa6:	683a      	ldr	r2, [r7, #0]
 800aaa8:	6879      	ldr	r1, [r7, #4]
 800aaaa:	68f8      	ldr	r0, [r7, #12]
 800aaac:	f7fe ff42 	bl	8009934 <tcp_route>
 800aab0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d102      	bne.n	800aabe <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800aab8:	23fc      	movs	r3, #252	@ 0xfc
 800aaba:	75fb      	strb	r3, [r7, #23]
 800aabc:	e01c      	b.n	800aaf8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d006      	beq.n	800aad2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	7adb      	ldrb	r3, [r3, #11]
 800aac8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	7a9b      	ldrb	r3, [r3, #10]
 800aace:	757b      	strb	r3, [r7, #21]
 800aad0:	e003      	b.n	800aada <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800aad2:	23ff      	movs	r3, #255	@ 0xff
 800aad4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800aad6:	2300      	movs	r3, #0
 800aad8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800aada:	7dba      	ldrb	r2, [r7, #22]
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	9302      	str	r3, [sp, #8]
 800aae0:	2306      	movs	r3, #6
 800aae2:	9301      	str	r3, [sp, #4]
 800aae4:	7d7b      	ldrb	r3, [r7, #21]
 800aae6:	9300      	str	r3, [sp, #0]
 800aae8:	4613      	mov	r3, r2
 800aaea:	683a      	ldr	r2, [r7, #0]
 800aaec:	6879      	ldr	r1, [r7, #4]
 800aaee:	68b8      	ldr	r0, [r7, #8]
 800aaf0:	f002 f9dc 	bl	800ceac <ip4_output_if>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800aaf8:	68b8      	ldr	r0, [r7, #8]
 800aafa:	f7fa fd47 	bl	800558c <pbuf_free>
  return err;
 800aafe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3718      	adds	r7, #24
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	080105e8 	.word	0x080105e8
 800ab10:	08010d40 	.word	0x08010d40
 800ab14:	0801063c 	.word	0x0801063c

0800ab18 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ab18:	b590      	push	{r4, r7, lr}
 800ab1a:	b08b      	sub	sp, #44	@ 0x2c
 800ab1c:	af04      	add	r7, sp, #16
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	607a      	str	r2, [r7, #4]
 800ab24:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d106      	bne.n	800ab3a <tcp_rst+0x22>
 800ab2c:	4b1f      	ldr	r3, [pc, #124]	@ (800abac <tcp_rst+0x94>)
 800ab2e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800ab32:	491f      	ldr	r1, [pc, #124]	@ (800abb0 <tcp_rst+0x98>)
 800ab34:	481f      	ldr	r0, [pc, #124]	@ (800abb4 <tcp_rst+0x9c>)
 800ab36:	f003 fae7 	bl	800e108 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ab3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d106      	bne.n	800ab4e <tcp_rst+0x36>
 800ab40:	4b1a      	ldr	r3, [pc, #104]	@ (800abac <tcp_rst+0x94>)
 800ab42:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800ab46:	491c      	ldr	r1, [pc, #112]	@ (800abb8 <tcp_rst+0xa0>)
 800ab48:	481a      	ldr	r0, [pc, #104]	@ (800abb4 <tcp_rst+0x9c>)
 800ab4a:	f003 fadd 	bl	800e108 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ab4e:	2300      	movs	r3, #0
 800ab50:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ab52:	f246 0308 	movw	r3, #24584	@ 0x6008
 800ab56:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ab58:	7dfb      	ldrb	r3, [r7, #23]
 800ab5a:	b29c      	uxth	r4, r3
 800ab5c:	68b8      	ldr	r0, [r7, #8]
 800ab5e:	f7f9 f9ec 	bl	8003f3a <lwip_htonl>
 800ab62:	4602      	mov	r2, r0
 800ab64:	8abb      	ldrh	r3, [r7, #20]
 800ab66:	9303      	str	r3, [sp, #12]
 800ab68:	2314      	movs	r3, #20
 800ab6a:	9302      	str	r3, [sp, #8]
 800ab6c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800ab6e:	9301      	str	r3, [sp, #4]
 800ab70:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ab72:	9300      	str	r3, [sp, #0]
 800ab74:	4613      	mov	r3, r2
 800ab76:	2200      	movs	r2, #0
 800ab78:	4621      	mov	r1, r4
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f7ff fe94 	bl	800a8a8 <tcp_output_alloc_header_common>
 800ab80:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d00c      	beq.n	800aba2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ab88:	7dfb      	ldrb	r3, [r7, #23]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	6939      	ldr	r1, [r7, #16]
 800ab8e:	68f8      	ldr	r0, [r7, #12]
 800ab90:	f7ff ff3a 	bl	800aa08 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ab94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab96:	683a      	ldr	r2, [r7, #0]
 800ab98:	6939      	ldr	r1, [r7, #16]
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	f7ff ff72 	bl	800aa84 <tcp_output_control_segment>
 800aba0:	e000      	b.n	800aba4 <tcp_rst+0x8c>
    return;
 800aba2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800aba4:	371c      	adds	r7, #28
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd90      	pop	{r4, r7, pc}
 800abaa:	bf00      	nop
 800abac:	080105e8 	.word	0x080105e8
 800abb0:	08010d6c 	.word	0x08010d6c
 800abb4:	0801063c 	.word	0x0801063c
 800abb8:	08010d88 	.word	0x08010d88

0800abbc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800abbc:	b590      	push	{r4, r7, lr}
 800abbe:	b087      	sub	sp, #28
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800abc4:	2300      	movs	r3, #0
 800abc6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800abc8:	2300      	movs	r3, #0
 800abca:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d106      	bne.n	800abe0 <tcp_send_empty_ack+0x24>
 800abd2:	4b28      	ldr	r3, [pc, #160]	@ (800ac74 <tcp_send_empty_ack+0xb8>)
 800abd4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800abd8:	4927      	ldr	r1, [pc, #156]	@ (800ac78 <tcp_send_empty_ack+0xbc>)
 800abda:	4828      	ldr	r0, [pc, #160]	@ (800ac7c <tcp_send_empty_ack+0xc0>)
 800abdc:	f003 fa94 	bl	800e108 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800abe0:	7dfb      	ldrb	r3, [r7, #23]
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	f003 0304 	and.w	r3, r3, #4
 800abea:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800abec:	7d7b      	ldrb	r3, [r7, #21]
 800abee:	b29c      	uxth	r4, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7f9 f9a0 	bl	8003f3a <lwip_htonl>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2200      	movs	r2, #0
 800abfe:	4621      	mov	r1, r4
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f7ff fec3 	bl	800a98c <tcp_output_alloc_header>
 800ac06:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d109      	bne.n	800ac22 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	8b5b      	ldrh	r3, [r3, #26]
 800ac12:	f043 0303 	orr.w	r3, r3, #3
 800ac16:	b29a      	uxth	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ac1c:	f06f 0301 	mvn.w	r3, #1
 800ac20:	e023      	b.n	800ac6a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ac22:	7dbb      	ldrb	r3, [r7, #22]
 800ac24:	7dfa      	ldrb	r2, [r7, #23]
 800ac26:	6939      	ldr	r1, [r7, #16]
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f7ff feed 	bl	800aa08 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	3304      	adds	r3, #4
 800ac34:	6939      	ldr	r1, [r7, #16]
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f7ff ff24 	bl	800aa84 <tcp_output_control_segment>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ac40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d007      	beq.n	800ac58 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	8b5b      	ldrh	r3, [r3, #26]
 800ac4c:	f043 0303 	orr.w	r3, r3, #3
 800ac50:	b29a      	uxth	r2, r3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	835a      	strh	r2, [r3, #26]
 800ac56:	e006      	b.n	800ac66 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	8b5b      	ldrh	r3, [r3, #26]
 800ac5c:	f023 0303 	bic.w	r3, r3, #3
 800ac60:	b29a      	uxth	r2, r3
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ac66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	371c      	adds	r7, #28
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd90      	pop	{r4, r7, pc}
 800ac72:	bf00      	nop
 800ac74:	080105e8 	.word	0x080105e8
 800ac78:	08010da4 	.word	0x08010da4
 800ac7c:	0801063c 	.word	0x0801063c

0800ac80 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ac80:	b590      	push	{r4, r7, lr}
 800ac82:	b087      	sub	sp, #28
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ac88:	2300      	movs	r3, #0
 800ac8a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d106      	bne.n	800aca0 <tcp_keepalive+0x20>
 800ac92:	4b18      	ldr	r3, [pc, #96]	@ (800acf4 <tcp_keepalive+0x74>)
 800ac94:	f640 0224 	movw	r2, #2084	@ 0x824
 800ac98:	4917      	ldr	r1, [pc, #92]	@ (800acf8 <tcp_keepalive+0x78>)
 800ac9a:	4818      	ldr	r0, [pc, #96]	@ (800acfc <tcp_keepalive+0x7c>)
 800ac9c:	f003 fa34 	bl	800e108 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800aca0:	7dfb      	ldrb	r3, [r7, #23]
 800aca2:	b29c      	uxth	r4, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aca8:	3b01      	subs	r3, #1
 800acaa:	4618      	mov	r0, r3
 800acac:	f7f9 f945 	bl	8003f3a <lwip_htonl>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2200      	movs	r2, #0
 800acb4:	4621      	mov	r1, r4
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7ff fe68 	bl	800a98c <tcp_output_alloc_header>
 800acbc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d102      	bne.n	800acca <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800acc4:	f04f 33ff 	mov.w	r3, #4294967295
 800acc8:	e010      	b.n	800acec <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800acca:	7dfb      	ldrb	r3, [r7, #23]
 800accc:	2200      	movs	r2, #0
 800acce:	6939      	ldr	r1, [r7, #16]
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f7ff fe99 	bl	800aa08 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	3304      	adds	r3, #4
 800acdc:	6939      	ldr	r1, [r7, #16]
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f7ff fed0 	bl	800aa84 <tcp_output_control_segment>
 800ace4:	4603      	mov	r3, r0
 800ace6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ace8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800acec:	4618      	mov	r0, r3
 800acee:	371c      	adds	r7, #28
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd90      	pop	{r4, r7, pc}
 800acf4:	080105e8 	.word	0x080105e8
 800acf8:	08010dc4 	.word	0x08010dc4
 800acfc:	0801063c 	.word	0x0801063c

0800ad00 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ad00:	b590      	push	{r4, r7, lr}
 800ad02:	b08b      	sub	sp, #44	@ 0x2c
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d106      	bne.n	800ad22 <tcp_zero_window_probe+0x22>
 800ad14:	4b4c      	ldr	r3, [pc, #304]	@ (800ae48 <tcp_zero_window_probe+0x148>)
 800ad16:	f640 024f 	movw	r2, #2127	@ 0x84f
 800ad1a:	494c      	ldr	r1, [pc, #304]	@ (800ae4c <tcp_zero_window_probe+0x14c>)
 800ad1c:	484c      	ldr	r0, [pc, #304]	@ (800ae50 <tcp_zero_window_probe+0x150>)
 800ad1e:	f003 f9f3 	bl	800e108 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad26:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ad28:	6a3b      	ldr	r3, [r7, #32]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d101      	bne.n	800ad32 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	e086      	b.n	800ae40 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ad38:	2bff      	cmp	r3, #255	@ 0xff
 800ad3a:	d007      	beq.n	800ad4c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ad42:	3301      	adds	r3, #1
 800ad44:	b2da      	uxtb	r2, r3
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ad4c:	6a3b      	ldr	r3, [r7, #32]
 800ad4e:	68db      	ldr	r3, [r3, #12]
 800ad50:	899b      	ldrh	r3, [r3, #12]
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7f9 f8db 	bl	8003f10 <lwip_htons>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	f003 0301 	and.w	r3, r3, #1
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d005      	beq.n	800ad72 <tcp_zero_window_probe+0x72>
 800ad66:	6a3b      	ldr	r3, [r7, #32]
 800ad68:	891b      	ldrh	r3, [r3, #8]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d101      	bne.n	800ad72 <tcp_zero_window_probe+0x72>
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e000      	b.n	800ad74 <tcp_zero_window_probe+0x74>
 800ad72:	2300      	movs	r3, #0
 800ad74:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ad76:	7ffb      	ldrb	r3, [r7, #31]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	bf0c      	ite	eq
 800ad7c:	2301      	moveq	r3, #1
 800ad7e:	2300      	movne	r3, #0
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ad84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad88:	b299      	uxth	r1, r3
 800ad8a:	6a3b      	ldr	r3, [r7, #32]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	8bba      	ldrh	r2, [r7, #28]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f7ff fdfa 	bl	800a98c <tcp_output_alloc_header>
 800ad98:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d102      	bne.n	800ada6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ada0:	f04f 33ff 	mov.w	r3, #4294967295
 800ada4:	e04c      	b.n	800ae40 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800adac:	7ffb      	ldrb	r3, [r7, #31]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d011      	beq.n	800add6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	899b      	ldrh	r3, [r3, #12]
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	b21b      	sxth	r3, r3
 800adba:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800adbe:	b21c      	sxth	r4, r3
 800adc0:	2011      	movs	r0, #17
 800adc2:	f7f9 f8a5 	bl	8003f10 <lwip_htons>
 800adc6:	4603      	mov	r3, r0
 800adc8:	b21b      	sxth	r3, r3
 800adca:	4323      	orrs	r3, r4
 800adcc:	b21b      	sxth	r3, r3
 800adce:	b29a      	uxth	r2, r3
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	819a      	strh	r2, [r3, #12]
 800add4:	e010      	b.n	800adf8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	3314      	adds	r3, #20
 800addc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800adde:	6a3b      	ldr	r3, [r7, #32]
 800ade0:	6858      	ldr	r0, [r3, #4]
 800ade2:	6a3b      	ldr	r3, [r7, #32]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	891a      	ldrh	r2, [r3, #8]
 800ade8:	6a3b      	ldr	r3, [r7, #32]
 800adea:	891b      	ldrh	r3, [r3, #8]
 800adec:	1ad3      	subs	r3, r2, r3
 800adee:	b29b      	uxth	r3, r3
 800adf0:	2201      	movs	r2, #1
 800adf2:	6939      	ldr	r1, [r7, #16]
 800adf4:	f7fa fdc4 	bl	8005980 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800adf8:	6a3b      	ldr	r3, [r7, #32]
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7f9 f89b 	bl	8003f3a <lwip_htonl>
 800ae04:	4603      	mov	r3, r0
 800ae06:	3301      	adds	r3, #1
 800ae08:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	da02      	bge.n	800ae1c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ae1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae20:	2200      	movs	r2, #0
 800ae22:	69b9      	ldr	r1, [r7, #24]
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f7ff fdef 	bl	800aa08 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	3304      	adds	r3, #4
 800ae30:	69b9      	ldr	r1, [r7, #24]
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7ff fe26 	bl	800aa84 <tcp_output_control_segment>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ae3c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	372c      	adds	r7, #44	@ 0x2c
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd90      	pop	{r4, r7, pc}
 800ae48:	080105e8 	.word	0x080105e8
 800ae4c:	08010de0 	.word	0x08010de0
 800ae50:	0801063c 	.word	0x0801063c

0800ae54 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ae5c:	f7fa ff10 	bl	8005c80 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ae60:	4b0a      	ldr	r3, [pc, #40]	@ (800ae8c <tcpip_tcp_timer+0x38>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d103      	bne.n	800ae70 <tcpip_tcp_timer+0x1c>
 800ae68:	4b09      	ldr	r3, [pc, #36]	@ (800ae90 <tcpip_tcp_timer+0x3c>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d005      	beq.n	800ae7c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ae70:	2200      	movs	r2, #0
 800ae72:	4908      	ldr	r1, [pc, #32]	@ (800ae94 <tcpip_tcp_timer+0x40>)
 800ae74:	20fa      	movs	r0, #250	@ 0xfa
 800ae76:	f000 f8f3 	bl	800b060 <sys_timeout>
 800ae7a:	e003      	b.n	800ae84 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ae7c:	4b06      	ldr	r3, [pc, #24]	@ (800ae98 <tcpip_tcp_timer+0x44>)
 800ae7e:	2200      	movs	r2, #0
 800ae80:	601a      	str	r2, [r3, #0]
  }
}
 800ae82:	bf00      	nop
 800ae84:	bf00      	nop
 800ae86:	3708      	adds	r7, #8
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	2000829c 	.word	0x2000829c
 800ae90:	200082a0 	.word	0x200082a0
 800ae94:	0800ae55 	.word	0x0800ae55
 800ae98:	200082e8 	.word	0x200082e8

0800ae9c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800aea0:	4b0a      	ldr	r3, [pc, #40]	@ (800aecc <tcp_timer_needed+0x30>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d10f      	bne.n	800aec8 <tcp_timer_needed+0x2c>
 800aea8:	4b09      	ldr	r3, [pc, #36]	@ (800aed0 <tcp_timer_needed+0x34>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d103      	bne.n	800aeb8 <tcp_timer_needed+0x1c>
 800aeb0:	4b08      	ldr	r3, [pc, #32]	@ (800aed4 <tcp_timer_needed+0x38>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d007      	beq.n	800aec8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800aeb8:	4b04      	ldr	r3, [pc, #16]	@ (800aecc <tcp_timer_needed+0x30>)
 800aeba:	2201      	movs	r2, #1
 800aebc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800aebe:	2200      	movs	r2, #0
 800aec0:	4905      	ldr	r1, [pc, #20]	@ (800aed8 <tcp_timer_needed+0x3c>)
 800aec2:	20fa      	movs	r0, #250	@ 0xfa
 800aec4:	f000 f8cc 	bl	800b060 <sys_timeout>
  }
}
 800aec8:	bf00      	nop
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	200082e8 	.word	0x200082e8
 800aed0:	2000829c 	.word	0x2000829c
 800aed4:	200082a0 	.word	0x200082a0
 800aed8:	0800ae55 	.word	0x0800ae55

0800aedc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800aee8:	2006      	movs	r0, #6
 800aeea:	f7f9 fc89 	bl	8004800 <memp_malloc>
 800aeee:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d109      	bne.n	800af0a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d151      	bne.n	800afa0 <sys_timeout_abs+0xc4>
 800aefc:	4b2a      	ldr	r3, [pc, #168]	@ (800afa8 <sys_timeout_abs+0xcc>)
 800aefe:	22be      	movs	r2, #190	@ 0xbe
 800af00:	492a      	ldr	r1, [pc, #168]	@ (800afac <sys_timeout_abs+0xd0>)
 800af02:	482b      	ldr	r0, [pc, #172]	@ (800afb0 <sys_timeout_abs+0xd4>)
 800af04:	f003 f900 	bl	800e108 <iprintf>
    return;
 800af08:	e04a      	b.n	800afa0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	2200      	movs	r2, #0
 800af0e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800af22:	4b24      	ldr	r3, [pc, #144]	@ (800afb4 <sys_timeout_abs+0xd8>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d103      	bne.n	800af32 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800af2a:	4a22      	ldr	r2, [pc, #136]	@ (800afb4 <sys_timeout_abs+0xd8>)
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	6013      	str	r3, [r2, #0]
    return;
 800af30:	e037      	b.n	800afa2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	685a      	ldr	r2, [r3, #4]
 800af36:	4b1f      	ldr	r3, [pc, #124]	@ (800afb4 <sys_timeout_abs+0xd8>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	1ad3      	subs	r3, r2, r3
 800af3e:	0fdb      	lsrs	r3, r3, #31
 800af40:	f003 0301 	and.w	r3, r3, #1
 800af44:	b2db      	uxtb	r3, r3
 800af46:	2b00      	cmp	r3, #0
 800af48:	d007      	beq.n	800af5a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800af4a:	4b1a      	ldr	r3, [pc, #104]	@ (800afb4 <sys_timeout_abs+0xd8>)
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800af52:	4a18      	ldr	r2, [pc, #96]	@ (800afb4 <sys_timeout_abs+0xd8>)
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	6013      	str	r3, [r2, #0]
 800af58:	e023      	b.n	800afa2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800af5a:	4b16      	ldr	r3, [pc, #88]	@ (800afb4 <sys_timeout_abs+0xd8>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	617b      	str	r3, [r7, #20]
 800af60:	e01a      	b.n	800af98 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00b      	beq.n	800af82 <sys_timeout_abs+0xa6>
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	685a      	ldr	r2, [r3, #4]
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	1ad3      	subs	r3, r2, r3
 800af76:	0fdb      	lsrs	r3, r3, #31
 800af78:	f003 0301 	and.w	r3, r3, #1
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d007      	beq.n	800af92 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	693a      	ldr	r2, [r7, #16]
 800af8e:	601a      	str	r2, [r3, #0]
        break;
 800af90:	e007      	b.n	800afa2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	617b      	str	r3, [r7, #20]
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d1e1      	bne.n	800af62 <sys_timeout_abs+0x86>
 800af9e:	e000      	b.n	800afa2 <sys_timeout_abs+0xc6>
    return;
 800afa0:	bf00      	nop
      }
    }
  }
}
 800afa2:	3718      	adds	r7, #24
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	08010e04 	.word	0x08010e04
 800afac:	08010e38 	.word	0x08010e38
 800afb0:	08010e78 	.word	0x08010e78
 800afb4:	200082e0 	.word	0x200082e0

0800afb8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b086      	sub	sp, #24
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	4798      	blx	r3

  now = sys_now();
 800afca:	f7f8 fdd7 	bl	8003b7c <sys_now>
 800afce:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	4b0f      	ldr	r3, [pc, #60]	@ (800b014 <lwip_cyclic_timer+0x5c>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4413      	add	r3, r2
 800afda:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	1ad3      	subs	r3, r2, r3
 800afe2:	0fdb      	lsrs	r3, r3, #31
 800afe4:	f003 0301 	and.w	r3, r3, #1
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	2b00      	cmp	r3, #0
 800afec:	d009      	beq.n	800b002 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	681a      	ldr	r2, [r3, #0]
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	4413      	add	r3, r2
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	4907      	ldr	r1, [pc, #28]	@ (800b018 <lwip_cyclic_timer+0x60>)
 800affa:	4618      	mov	r0, r3
 800affc:	f7ff ff6e 	bl	800aedc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b000:	e004      	b.n	800b00c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	4904      	ldr	r1, [pc, #16]	@ (800b018 <lwip_cyclic_timer+0x60>)
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	f7ff ff68 	bl	800aedc <sys_timeout_abs>
}
 800b00c:	bf00      	nop
 800b00e:	3718      	adds	r7, #24
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	200082e4 	.word	0x200082e4
 800b018:	0800afb9 	.word	0x0800afb9

0800b01c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b022:	2301      	movs	r3, #1
 800b024:	607b      	str	r3, [r7, #4]
 800b026:	e00e      	b.n	800b046 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b028:	4a0b      	ldr	r2, [pc, #44]	@ (800b058 <sys_timeouts_init+0x3c>)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	00db      	lsls	r3, r3, #3
 800b034:	4a08      	ldr	r2, [pc, #32]	@ (800b058 <sys_timeouts_init+0x3c>)
 800b036:	4413      	add	r3, r2
 800b038:	461a      	mov	r2, r3
 800b03a:	4908      	ldr	r1, [pc, #32]	@ (800b05c <sys_timeouts_init+0x40>)
 800b03c:	f000 f810 	bl	800b060 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	3301      	adds	r3, #1
 800b044:	607b      	str	r3, [r7, #4]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2b02      	cmp	r3, #2
 800b04a:	d9ed      	bls.n	800b028 <sys_timeouts_init+0xc>
  }
}
 800b04c:	bf00      	nop
 800b04e:	bf00      	nop
 800b050:	3708      	adds	r7, #8
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	080119e8 	.word	0x080119e8
 800b05c:	0800afb9 	.word	0x0800afb9

0800b060 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b086      	sub	sp, #24
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b072:	d306      	bcc.n	800b082 <sys_timeout+0x22>
 800b074:	4b0a      	ldr	r3, [pc, #40]	@ (800b0a0 <sys_timeout+0x40>)
 800b076:	f240 1229 	movw	r2, #297	@ 0x129
 800b07a:	490a      	ldr	r1, [pc, #40]	@ (800b0a4 <sys_timeout+0x44>)
 800b07c:	480a      	ldr	r0, [pc, #40]	@ (800b0a8 <sys_timeout+0x48>)
 800b07e:	f003 f843 	bl	800e108 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b082:	f7f8 fd7b 	bl	8003b7c <sys_now>
 800b086:	4602      	mov	r2, r0
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	4413      	add	r3, r2
 800b08c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	68b9      	ldr	r1, [r7, #8]
 800b092:	6978      	ldr	r0, [r7, #20]
 800b094:	f7ff ff22 	bl	800aedc <sys_timeout_abs>
#endif
}
 800b098:	bf00      	nop
 800b09a:	3718      	adds	r7, #24
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	08010e04 	.word	0x08010e04
 800b0a4:	08010ea0 	.word	0x08010ea0
 800b0a8:	08010e78 	.word	0x08010e78

0800b0ac <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b0b0:	f002 ff2a 	bl	800df08 <rand>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800b0c2:	b29a      	uxth	r2, r3
 800b0c4:	4b01      	ldr	r3, [pc, #4]	@ (800b0cc <udp_init+0x20>)
 800b0c6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b0c8:	bf00      	nop
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	20000028 	.word	0x20000028

0800b0d0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b0da:	4b17      	ldr	r3, [pc, #92]	@ (800b138 <udp_new_port+0x68>)
 800b0dc:	881b      	ldrh	r3, [r3, #0]
 800b0de:	1c5a      	adds	r2, r3, #1
 800b0e0:	b291      	uxth	r1, r2
 800b0e2:	4a15      	ldr	r2, [pc, #84]	@ (800b138 <udp_new_port+0x68>)
 800b0e4:	8011      	strh	r1, [r2, #0]
 800b0e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d103      	bne.n	800b0f6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b0ee:	4b12      	ldr	r3, [pc, #72]	@ (800b138 <udp_new_port+0x68>)
 800b0f0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800b0f4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b0f6:	4b11      	ldr	r3, [pc, #68]	@ (800b13c <udp_new_port+0x6c>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	603b      	str	r3, [r7, #0]
 800b0fc:	e011      	b.n	800b122 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	8a5a      	ldrh	r2, [r3, #18]
 800b102:	4b0d      	ldr	r3, [pc, #52]	@ (800b138 <udp_new_port+0x68>)
 800b104:	881b      	ldrh	r3, [r3, #0]
 800b106:	429a      	cmp	r2, r3
 800b108:	d108      	bne.n	800b11c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b10a:	88fb      	ldrh	r3, [r7, #6]
 800b10c:	3301      	adds	r3, #1
 800b10e:	80fb      	strh	r3, [r7, #6]
 800b110:	88fb      	ldrh	r3, [r7, #6]
 800b112:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b116:	d3e0      	bcc.n	800b0da <udp_new_port+0xa>
        return 0;
 800b118:	2300      	movs	r3, #0
 800b11a:	e007      	b.n	800b12c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	603b      	str	r3, [r7, #0]
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d1ea      	bne.n	800b0fe <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800b128:	4b03      	ldr	r3, [pc, #12]	@ (800b138 <udp_new_port+0x68>)
 800b12a:	881b      	ldrh	r3, [r3, #0]
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr
 800b138:	20000028 	.word	0x20000028
 800b13c:	200082ec 	.word	0x200082ec

0800b140 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	4613      	mov	r3, r2
 800b14c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d105      	bne.n	800b160 <udp_input_local_match+0x20>
 800b154:	4b27      	ldr	r3, [pc, #156]	@ (800b1f4 <udp_input_local_match+0xb4>)
 800b156:	2287      	movs	r2, #135	@ 0x87
 800b158:	4927      	ldr	r1, [pc, #156]	@ (800b1f8 <udp_input_local_match+0xb8>)
 800b15a:	4828      	ldr	r0, [pc, #160]	@ (800b1fc <udp_input_local_match+0xbc>)
 800b15c:	f002 ffd4 	bl	800e108 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d105      	bne.n	800b172 <udp_input_local_match+0x32>
 800b166:	4b23      	ldr	r3, [pc, #140]	@ (800b1f4 <udp_input_local_match+0xb4>)
 800b168:	2288      	movs	r2, #136	@ 0x88
 800b16a:	4925      	ldr	r1, [pc, #148]	@ (800b200 <udp_input_local_match+0xc0>)
 800b16c:	4823      	ldr	r0, [pc, #140]	@ (800b1fc <udp_input_local_match+0xbc>)
 800b16e:	f002 ffcb 	bl	800e108 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	7a1b      	ldrb	r3, [r3, #8]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00b      	beq.n	800b192 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	7a1a      	ldrb	r2, [r3, #8]
 800b17e:	4b21      	ldr	r3, [pc, #132]	@ (800b204 <udp_input_local_match+0xc4>)
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b186:	3301      	adds	r3, #1
 800b188:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d001      	beq.n	800b192 <udp_input_local_match+0x52>
    return 0;
 800b18e:	2300      	movs	r3, #0
 800b190:	e02b      	b.n	800b1ea <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b192:	79fb      	ldrb	r3, [r7, #7]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d018      	beq.n	800b1ca <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d013      	beq.n	800b1c6 <udp_input_local_match+0x86>
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d00f      	beq.n	800b1c6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b1a6:	4b17      	ldr	r3, [pc, #92]	@ (800b204 <udp_input_local_match+0xc4>)
 800b1a8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ae:	d00a      	beq.n	800b1c6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	4b13      	ldr	r3, [pc, #76]	@ (800b204 <udp_input_local_match+0xc4>)
 800b1b6:	695b      	ldr	r3, [r3, #20]
 800b1b8:	405a      	eors	r2, r3
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	3308      	adds	r3, #8
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d110      	bne.n	800b1e8 <udp_input_local_match+0xa8>
          return 1;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e00f      	b.n	800b1ea <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d009      	beq.n	800b1e4 <udp_input_local_match+0xa4>
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d005      	beq.n	800b1e4 <udp_input_local_match+0xa4>
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	4b09      	ldr	r3, [pc, #36]	@ (800b204 <udp_input_local_match+0xc4>)
 800b1de:	695b      	ldr	r3, [r3, #20]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d101      	bne.n	800b1e8 <udp_input_local_match+0xa8>
        return 1;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e000      	b.n	800b1ea <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3710      	adds	r7, #16
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	08010eec 	.word	0x08010eec
 800b1f8:	08010f1c 	.word	0x08010f1c
 800b1fc:	08010f40 	.word	0x08010f40
 800b200:	08010f68 	.word	0x08010f68
 800b204:	20004d20 	.word	0x20004d20

0800b208 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b208:	b590      	push	{r4, r7, lr}
 800b20a:	b08d      	sub	sp, #52	@ 0x34
 800b20c:	af02      	add	r7, sp, #8
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b212:	2300      	movs	r3, #0
 800b214:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d105      	bne.n	800b228 <udp_input+0x20>
 800b21c:	4b7c      	ldr	r3, [pc, #496]	@ (800b410 <udp_input+0x208>)
 800b21e:	22cf      	movs	r2, #207	@ 0xcf
 800b220:	497c      	ldr	r1, [pc, #496]	@ (800b414 <udp_input+0x20c>)
 800b222:	487d      	ldr	r0, [pc, #500]	@ (800b418 <udp_input+0x210>)
 800b224:	f002 ff70 	bl	800e108 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d105      	bne.n	800b23a <udp_input+0x32>
 800b22e:	4b78      	ldr	r3, [pc, #480]	@ (800b410 <udp_input+0x208>)
 800b230:	22d0      	movs	r2, #208	@ 0xd0
 800b232:	497a      	ldr	r1, [pc, #488]	@ (800b41c <udp_input+0x214>)
 800b234:	4878      	ldr	r0, [pc, #480]	@ (800b418 <udp_input+0x210>)
 800b236:	f002 ff67 	bl	800e108 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	895b      	ldrh	r3, [r3, #10]
 800b23e:	2b07      	cmp	r3, #7
 800b240:	d803      	bhi.n	800b24a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f7fa f9a2 	bl	800558c <pbuf_free>
    goto end;
 800b248:	e0de      	b.n	800b408 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b250:	4b73      	ldr	r3, [pc, #460]	@ (800b420 <udp_input+0x218>)
 800b252:	695b      	ldr	r3, [r3, #20]
 800b254:	4a72      	ldr	r2, [pc, #456]	@ (800b420 <udp_input+0x218>)
 800b256:	6812      	ldr	r2, [r2, #0]
 800b258:	4611      	mov	r1, r2
 800b25a:	4618      	mov	r0, r3
 800b25c:	f001 fefe 	bl	800d05c <ip4_addr_isbroadcast_u32>
 800b260:	4603      	mov	r3, r0
 800b262:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	881b      	ldrh	r3, [r3, #0]
 800b268:	b29b      	uxth	r3, r3
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7f8 fe50 	bl	8003f10 <lwip_htons>
 800b270:	4603      	mov	r3, r0
 800b272:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	885b      	ldrh	r3, [r3, #2]
 800b278:	b29b      	uxth	r3, r3
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7f8 fe48 	bl	8003f10 <lwip_htons>
 800b280:	4603      	mov	r3, r0
 800b282:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b284:	2300      	movs	r3, #0
 800b286:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800b288:	2300      	movs	r3, #0
 800b28a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b28c:	2300      	movs	r3, #0
 800b28e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b290:	4b64      	ldr	r3, [pc, #400]	@ (800b424 <udp_input+0x21c>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	627b      	str	r3, [r7, #36]	@ 0x24
 800b296:	e054      	b.n	800b342 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b29a:	8a5b      	ldrh	r3, [r3, #18]
 800b29c:	89fa      	ldrh	r2, [r7, #14]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d14a      	bne.n	800b338 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b2a2:	7cfb      	ldrb	r3, [r7, #19]
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	6839      	ldr	r1, [r7, #0]
 800b2a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b2aa:	f7ff ff49 	bl	800b140 <udp_input_local_match>
 800b2ae:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d041      	beq.n	800b338 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b6:	7c1b      	ldrb	r3, [r3, #16]
 800b2b8:	f003 0304 	and.w	r3, r3, #4
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d11d      	bne.n	800b2fc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d102      	bne.n	800b2cc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c8:	61fb      	str	r3, [r7, #28]
 800b2ca:	e017      	b.n	800b2fc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b2cc:	7cfb      	ldrb	r3, [r7, #19]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d014      	beq.n	800b2fc <udp_input+0xf4>
 800b2d2:	4b53      	ldr	r3, [pc, #332]	@ (800b420 <udp_input+0x218>)
 800b2d4:	695b      	ldr	r3, [r3, #20]
 800b2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2da:	d10f      	bne.n	800b2fc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	3304      	adds	r3, #4
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d008      	beq.n	800b2fc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	3304      	adds	r3, #4
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d101      	bne.n	800b2fc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fe:	8a9b      	ldrh	r3, [r3, #20]
 800b300:	8a3a      	ldrh	r2, [r7, #16]
 800b302:	429a      	cmp	r2, r3
 800b304:	d118      	bne.n	800b338 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b308:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d005      	beq.n	800b31a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b310:	685a      	ldr	r2, [r3, #4]
 800b312:	4b43      	ldr	r3, [pc, #268]	@ (800b420 <udp_input+0x218>)
 800b314:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b316:	429a      	cmp	r2, r3
 800b318:	d10e      	bne.n	800b338 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b31a:	6a3b      	ldr	r3, [r7, #32]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d014      	beq.n	800b34a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b322:	68da      	ldr	r2, [r3, #12]
 800b324:	6a3b      	ldr	r3, [r7, #32]
 800b326:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b328:	4b3e      	ldr	r3, [pc, #248]	@ (800b424 <udp_input+0x21c>)
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b32e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b330:	4a3c      	ldr	r2, [pc, #240]	@ (800b424 <udp_input+0x21c>)
 800b332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b334:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b336:	e008      	b.n	800b34a <udp_input+0x142>
      }
    }

    prev = pcb;
 800b338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b33a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	627b      	str	r3, [r7, #36]	@ 0x24
 800b342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1a7      	bne.n	800b298 <udp_input+0x90>
 800b348:	e000      	b.n	800b34c <udp_input+0x144>
        break;
 800b34a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d101      	bne.n	800b356 <udp_input+0x14e>
    pcb = uncon_pcb;
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d002      	beq.n	800b362 <udp_input+0x15a>
    for_us = 1;
 800b35c:	2301      	movs	r3, #1
 800b35e:	76fb      	strb	r3, [r7, #27]
 800b360:	e00a      	b.n	800b378 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	3304      	adds	r3, #4
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	4b2d      	ldr	r3, [pc, #180]	@ (800b420 <udp_input+0x218>)
 800b36a:	695b      	ldr	r3, [r3, #20]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	bf0c      	ite	eq
 800b370:	2301      	moveq	r3, #1
 800b372:	2300      	movne	r3, #0
 800b374:	b2db      	uxtb	r3, r3
 800b376:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b378:	7efb      	ldrb	r3, [r7, #27]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d041      	beq.n	800b402 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b37e:	2108      	movs	r1, #8
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f7fa f87d 	bl	8005480 <pbuf_remove_header>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d00a      	beq.n	800b3a2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b38c:	4b20      	ldr	r3, [pc, #128]	@ (800b410 <udp_input+0x208>)
 800b38e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800b392:	4925      	ldr	r1, [pc, #148]	@ (800b428 <udp_input+0x220>)
 800b394:	4820      	ldr	r0, [pc, #128]	@ (800b418 <udp_input+0x210>)
 800b396:	f002 feb7 	bl	800e108 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f7fa f8f6 	bl	800558c <pbuf_free>
      goto end;
 800b3a0:	e032      	b.n	800b408 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d012      	beq.n	800b3ce <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3aa:	699b      	ldr	r3, [r3, #24]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d00a      	beq.n	800b3c6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b2:	699c      	ldr	r4, [r3, #24]
 800b3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b6:	69d8      	ldr	r0, [r3, #28]
 800b3b8:	8a3b      	ldrh	r3, [r7, #16]
 800b3ba:	9300      	str	r3, [sp, #0]
 800b3bc:	4b1b      	ldr	r3, [pc, #108]	@ (800b42c <udp_input+0x224>)
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b3c2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b3c4:	e021      	b.n	800b40a <udp_input+0x202>
        pbuf_free(p);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f7fa f8e0 	bl	800558c <pbuf_free>
        goto end;
 800b3cc:	e01c      	b.n	800b408 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b3ce:	7cfb      	ldrb	r3, [r7, #19]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d112      	bne.n	800b3fa <udp_input+0x1f2>
 800b3d4:	4b12      	ldr	r3, [pc, #72]	@ (800b420 <udp_input+0x218>)
 800b3d6:	695b      	ldr	r3, [r3, #20]
 800b3d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b3dc:	2be0      	cmp	r3, #224	@ 0xe0
 800b3de:	d00c      	beq.n	800b3fa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b3e0:	4b0f      	ldr	r3, [pc, #60]	@ (800b420 <udp_input+0x218>)
 800b3e2:	899b      	ldrh	r3, [r3, #12]
 800b3e4:	3308      	adds	r3, #8
 800b3e6:	b29b      	uxth	r3, r3
 800b3e8:	b21b      	sxth	r3, r3
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f7fa f8ba 	bl	8005566 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b3f2:	2103      	movs	r1, #3
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f001 fb11 	bl	800ca1c <icmp_dest_unreach>
      pbuf_free(p);
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f7fa f8c6 	bl	800558c <pbuf_free>
  return;
 800b400:	e003      	b.n	800b40a <udp_input+0x202>
    pbuf_free(p);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f7fa f8c2 	bl	800558c <pbuf_free>
  return;
 800b408:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b40a:	372c      	adds	r7, #44	@ 0x2c
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd90      	pop	{r4, r7, pc}
 800b410:	08010eec 	.word	0x08010eec
 800b414:	08010f90 	.word	0x08010f90
 800b418:	08010f40 	.word	0x08010f40
 800b41c:	08010fa8 	.word	0x08010fa8
 800b420:	20004d20 	.word	0x20004d20
 800b424:	200082ec 	.word	0x200082ec
 800b428:	08010fc4 	.word	0x08010fc4
 800b42c:	20004d30 	.word	0x20004d30

0800b430 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b088      	sub	sp, #32
 800b434:	af02      	add	r7, sp, #8
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	607a      	str	r2, [r7, #4]
 800b43c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d109      	bne.n	800b458 <udp_sendto+0x28>
 800b444:	4b23      	ldr	r3, [pc, #140]	@ (800b4d4 <udp_sendto+0xa4>)
 800b446:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800b44a:	4923      	ldr	r1, [pc, #140]	@ (800b4d8 <udp_sendto+0xa8>)
 800b44c:	4823      	ldr	r0, [pc, #140]	@ (800b4dc <udp_sendto+0xac>)
 800b44e:	f002 fe5b 	bl	800e108 <iprintf>
 800b452:	f06f 030f 	mvn.w	r3, #15
 800b456:	e038      	b.n	800b4ca <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d109      	bne.n	800b472 <udp_sendto+0x42>
 800b45e:	4b1d      	ldr	r3, [pc, #116]	@ (800b4d4 <udp_sendto+0xa4>)
 800b460:	f240 2219 	movw	r2, #537	@ 0x219
 800b464:	491e      	ldr	r1, [pc, #120]	@ (800b4e0 <udp_sendto+0xb0>)
 800b466:	481d      	ldr	r0, [pc, #116]	@ (800b4dc <udp_sendto+0xac>)
 800b468:	f002 fe4e 	bl	800e108 <iprintf>
 800b46c:	f06f 030f 	mvn.w	r3, #15
 800b470:	e02b      	b.n	800b4ca <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d109      	bne.n	800b48c <udp_sendto+0x5c>
 800b478:	4b16      	ldr	r3, [pc, #88]	@ (800b4d4 <udp_sendto+0xa4>)
 800b47a:	f240 221a 	movw	r2, #538	@ 0x21a
 800b47e:	4919      	ldr	r1, [pc, #100]	@ (800b4e4 <udp_sendto+0xb4>)
 800b480:	4816      	ldr	r0, [pc, #88]	@ (800b4dc <udp_sendto+0xac>)
 800b482:	f002 fe41 	bl	800e108 <iprintf>
 800b486:	f06f 030f 	mvn.w	r3, #15
 800b48a:	e01e      	b.n	800b4ca <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	7a1b      	ldrb	r3, [r3, #8]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d006      	beq.n	800b4a2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	7a1b      	ldrb	r3, [r3, #8]
 800b498:	4618      	mov	r0, r3
 800b49a:	f7f9 fd37 	bl	8004f0c <netif_get_by_index>
 800b49e:	6178      	str	r0, [r7, #20]
 800b4a0:	e003      	b.n	800b4aa <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f001 fb44 	bl	800cb30 <ip4_route>
 800b4a8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d102      	bne.n	800b4b6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800b4b0:	f06f 0303 	mvn.w	r3, #3
 800b4b4:	e009      	b.n	800b4ca <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800b4b6:	887a      	ldrh	r2, [r7, #2]
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	9300      	str	r3, [sp, #0]
 800b4bc:	4613      	mov	r3, r2
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	68b9      	ldr	r1, [r7, #8]
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f000 f810 	bl	800b4e8 <udp_sendto_if>
 800b4c8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3718      	adds	r7, #24
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	08010eec 	.word	0x08010eec
 800b4d8:	08011010 	.word	0x08011010
 800b4dc:	08010f40 	.word	0x08010f40
 800b4e0:	08011028 	.word	0x08011028
 800b4e4:	08011044 	.word	0x08011044

0800b4e8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b088      	sub	sp, #32
 800b4ec:	af02      	add	r7, sp, #8
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	607a      	str	r2, [r7, #4]
 800b4f4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d109      	bne.n	800b510 <udp_sendto_if+0x28>
 800b4fc:	4b2e      	ldr	r3, [pc, #184]	@ (800b5b8 <udp_sendto_if+0xd0>)
 800b4fe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b502:	492e      	ldr	r1, [pc, #184]	@ (800b5bc <udp_sendto_if+0xd4>)
 800b504:	482e      	ldr	r0, [pc, #184]	@ (800b5c0 <udp_sendto_if+0xd8>)
 800b506:	f002 fdff 	bl	800e108 <iprintf>
 800b50a:	f06f 030f 	mvn.w	r3, #15
 800b50e:	e04f      	b.n	800b5b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d109      	bne.n	800b52a <udp_sendto_if+0x42>
 800b516:	4b28      	ldr	r3, [pc, #160]	@ (800b5b8 <udp_sendto_if+0xd0>)
 800b518:	f240 2281 	movw	r2, #641	@ 0x281
 800b51c:	4929      	ldr	r1, [pc, #164]	@ (800b5c4 <udp_sendto_if+0xdc>)
 800b51e:	4828      	ldr	r0, [pc, #160]	@ (800b5c0 <udp_sendto_if+0xd8>)
 800b520:	f002 fdf2 	bl	800e108 <iprintf>
 800b524:	f06f 030f 	mvn.w	r3, #15
 800b528:	e042      	b.n	800b5b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d109      	bne.n	800b544 <udp_sendto_if+0x5c>
 800b530:	4b21      	ldr	r3, [pc, #132]	@ (800b5b8 <udp_sendto_if+0xd0>)
 800b532:	f240 2282 	movw	r2, #642	@ 0x282
 800b536:	4924      	ldr	r1, [pc, #144]	@ (800b5c8 <udp_sendto_if+0xe0>)
 800b538:	4821      	ldr	r0, [pc, #132]	@ (800b5c0 <udp_sendto_if+0xd8>)
 800b53a:	f002 fde5 	bl	800e108 <iprintf>
 800b53e:	f06f 030f 	mvn.w	r3, #15
 800b542:	e035      	b.n	800b5b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800b544:	6a3b      	ldr	r3, [r7, #32]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d109      	bne.n	800b55e <udp_sendto_if+0x76>
 800b54a:	4b1b      	ldr	r3, [pc, #108]	@ (800b5b8 <udp_sendto_if+0xd0>)
 800b54c:	f240 2283 	movw	r2, #643	@ 0x283
 800b550:	491e      	ldr	r1, [pc, #120]	@ (800b5cc <udp_sendto_if+0xe4>)
 800b552:	481b      	ldr	r0, [pc, #108]	@ (800b5c0 <udp_sendto_if+0xd8>)
 800b554:	f002 fdd8 	bl	800e108 <iprintf>
 800b558:	f06f 030f 	mvn.w	r3, #15
 800b55c:	e028      	b.n	800b5b0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d009      	beq.n	800b578 <udp_sendto_if+0x90>
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d005      	beq.n	800b578 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b574:	2be0      	cmp	r3, #224	@ 0xe0
 800b576:	d103      	bne.n	800b580 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800b578:	6a3b      	ldr	r3, [r7, #32]
 800b57a:	3304      	adds	r3, #4
 800b57c:	617b      	str	r3, [r7, #20]
 800b57e:	e00b      	b.n	800b598 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	6a3b      	ldr	r3, [r7, #32]
 800b586:	3304      	adds	r3, #4
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d002      	beq.n	800b594 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800b58e:	f06f 0303 	mvn.w	r3, #3
 800b592:	e00d      	b.n	800b5b0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800b598:	887a      	ldrh	r2, [r7, #2]
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	9301      	str	r3, [sp, #4]
 800b59e:	6a3b      	ldr	r3, [r7, #32]
 800b5a0:	9300      	str	r3, [sp, #0]
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	68b9      	ldr	r1, [r7, #8]
 800b5a8:	68f8      	ldr	r0, [r7, #12]
 800b5aa:	f000 f811 	bl	800b5d0 <udp_sendto_if_src>
 800b5ae:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3718      	adds	r7, #24
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	08010eec 	.word	0x08010eec
 800b5bc:	08011060 	.word	0x08011060
 800b5c0:	08010f40 	.word	0x08010f40
 800b5c4:	0801107c 	.word	0x0801107c
 800b5c8:	08011098 	.word	0x08011098
 800b5cc:	080110b8 	.word	0x080110b8

0800b5d0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b08c      	sub	sp, #48	@ 0x30
 800b5d4:	af04      	add	r7, sp, #16
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	607a      	str	r2, [r7, #4]
 800b5dc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d109      	bne.n	800b5f8 <udp_sendto_if_src+0x28>
 800b5e4:	4b65      	ldr	r3, [pc, #404]	@ (800b77c <udp_sendto_if_src+0x1ac>)
 800b5e6:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800b5ea:	4965      	ldr	r1, [pc, #404]	@ (800b780 <udp_sendto_if_src+0x1b0>)
 800b5ec:	4865      	ldr	r0, [pc, #404]	@ (800b784 <udp_sendto_if_src+0x1b4>)
 800b5ee:	f002 fd8b 	bl	800e108 <iprintf>
 800b5f2:	f06f 030f 	mvn.w	r3, #15
 800b5f6:	e0bc      	b.n	800b772 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d109      	bne.n	800b612 <udp_sendto_if_src+0x42>
 800b5fe:	4b5f      	ldr	r3, [pc, #380]	@ (800b77c <udp_sendto_if_src+0x1ac>)
 800b600:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800b604:	4960      	ldr	r1, [pc, #384]	@ (800b788 <udp_sendto_if_src+0x1b8>)
 800b606:	485f      	ldr	r0, [pc, #380]	@ (800b784 <udp_sendto_if_src+0x1b4>)
 800b608:	f002 fd7e 	bl	800e108 <iprintf>
 800b60c:	f06f 030f 	mvn.w	r3, #15
 800b610:	e0af      	b.n	800b772 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d109      	bne.n	800b62c <udp_sendto_if_src+0x5c>
 800b618:	4b58      	ldr	r3, [pc, #352]	@ (800b77c <udp_sendto_if_src+0x1ac>)
 800b61a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800b61e:	495b      	ldr	r1, [pc, #364]	@ (800b78c <udp_sendto_if_src+0x1bc>)
 800b620:	4858      	ldr	r0, [pc, #352]	@ (800b784 <udp_sendto_if_src+0x1b4>)
 800b622:	f002 fd71 	bl	800e108 <iprintf>
 800b626:	f06f 030f 	mvn.w	r3, #15
 800b62a:	e0a2      	b.n	800b772 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800b62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d109      	bne.n	800b646 <udp_sendto_if_src+0x76>
 800b632:	4b52      	ldr	r3, [pc, #328]	@ (800b77c <udp_sendto_if_src+0x1ac>)
 800b634:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800b638:	4955      	ldr	r1, [pc, #340]	@ (800b790 <udp_sendto_if_src+0x1c0>)
 800b63a:	4852      	ldr	r0, [pc, #328]	@ (800b784 <udp_sendto_if_src+0x1b4>)
 800b63c:	f002 fd64 	bl	800e108 <iprintf>
 800b640:	f06f 030f 	mvn.w	r3, #15
 800b644:	e095      	b.n	800b772 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800b646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d109      	bne.n	800b660 <udp_sendto_if_src+0x90>
 800b64c:	4b4b      	ldr	r3, [pc, #300]	@ (800b77c <udp_sendto_if_src+0x1ac>)
 800b64e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800b652:	4950      	ldr	r1, [pc, #320]	@ (800b794 <udp_sendto_if_src+0x1c4>)
 800b654:	484b      	ldr	r0, [pc, #300]	@ (800b784 <udp_sendto_if_src+0x1b4>)
 800b656:	f002 fd57 	bl	800e108 <iprintf>
 800b65a:	f06f 030f 	mvn.w	r3, #15
 800b65e:	e088      	b.n	800b772 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	8a5b      	ldrh	r3, [r3, #18]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d10f      	bne.n	800b688 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b668:	68f9      	ldr	r1, [r7, #12]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	8a5b      	ldrh	r3, [r3, #18]
 800b66e:	461a      	mov	r2, r3
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	f000 f893 	bl	800b79c <udp_bind>
 800b676:	4603      	mov	r3, r0
 800b678:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800b67a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d002      	beq.n	800b688 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800b682:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b686:	e074      	b.n	800b772 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	891b      	ldrh	r3, [r3, #8]
 800b68c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800b690:	4293      	cmp	r3, r2
 800b692:	d902      	bls.n	800b69a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800b694:	f04f 33ff 	mov.w	r3, #4294967295
 800b698:	e06b      	b.n	800b772 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800b69a:	2108      	movs	r1, #8
 800b69c:	68b8      	ldr	r0, [r7, #8]
 800b69e:	f7f9 fedf 	bl	8005460 <pbuf_add_header>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d015      	beq.n	800b6d4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800b6a8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b6ac:	2108      	movs	r1, #8
 800b6ae:	2022      	movs	r0, #34	@ 0x22
 800b6b0:	f7f9 fc88 	bl	8004fc4 <pbuf_alloc>
 800b6b4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800b6b6:	69fb      	ldr	r3, [r7, #28]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d102      	bne.n	800b6c2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800b6bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b6c0:	e057      	b.n	800b772 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	891b      	ldrh	r3, [r3, #8]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d006      	beq.n	800b6d8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800b6ca:	68b9      	ldr	r1, [r7, #8]
 800b6cc:	69f8      	ldr	r0, [r7, #28]
 800b6ce:	f7fa f875 	bl	80057bc <pbuf_chain>
 800b6d2:	e001      	b.n	800b6d8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800b6d8:	69fb      	ldr	r3, [r7, #28]
 800b6da:	895b      	ldrh	r3, [r3, #10]
 800b6dc:	2b07      	cmp	r3, #7
 800b6de:	d806      	bhi.n	800b6ee <udp_sendto_if_src+0x11e>
 800b6e0:	4b26      	ldr	r3, [pc, #152]	@ (800b77c <udp_sendto_if_src+0x1ac>)
 800b6e2:	f240 320d 	movw	r2, #781	@ 0x30d
 800b6e6:	492c      	ldr	r1, [pc, #176]	@ (800b798 <udp_sendto_if_src+0x1c8>)
 800b6e8:	4826      	ldr	r0, [pc, #152]	@ (800b784 <udp_sendto_if_src+0x1b4>)
 800b6ea:	f002 fd0d 	bl	800e108 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800b6ee:	69fb      	ldr	r3, [r7, #28]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	8a5b      	ldrh	r3, [r3, #18]
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7f8 fc09 	bl	8003f10 <lwip_htons>
 800b6fe:	4603      	mov	r3, r0
 800b700:	461a      	mov	r2, r3
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800b706:	887b      	ldrh	r3, [r7, #2]
 800b708:	4618      	mov	r0, r3
 800b70a:	f7f8 fc01 	bl	8003f10 <lwip_htons>
 800b70e:	4603      	mov	r3, r0
 800b710:	461a      	mov	r2, r3
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	2200      	movs	r2, #0
 800b71a:	719a      	strb	r2, [r3, #6]
 800b71c:	2200      	movs	r2, #0
 800b71e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	891b      	ldrh	r3, [r3, #8]
 800b724:	4618      	mov	r0, r3
 800b726:	f7f8 fbf3 	bl	8003f10 <lwip_htons>
 800b72a:	4603      	mov	r3, r0
 800b72c:	461a      	mov	r2, r3
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800b732:	2311      	movs	r3, #17
 800b734:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	7adb      	ldrb	r3, [r3, #11]
 800b73a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	7a9b      	ldrb	r3, [r3, #10]
 800b740:	7cb9      	ldrb	r1, [r7, #18]
 800b742:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b744:	9202      	str	r2, [sp, #8]
 800b746:	7cfa      	ldrb	r2, [r7, #19]
 800b748:	9201      	str	r2, [sp, #4]
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	460b      	mov	r3, r1
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b752:	69f8      	ldr	r0, [r7, #28]
 800b754:	f001 fbd4 	bl	800cf00 <ip4_output_if_src>
 800b758:	4603      	mov	r3, r0
 800b75a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800b75c:	69fa      	ldr	r2, [r7, #28]
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	429a      	cmp	r2, r3
 800b762:	d004      	beq.n	800b76e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800b764:	69f8      	ldr	r0, [r7, #28]
 800b766:	f7f9 ff11 	bl	800558c <pbuf_free>
    q = NULL;
 800b76a:	2300      	movs	r3, #0
 800b76c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800b76e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800b772:	4618      	mov	r0, r3
 800b774:	3720      	adds	r7, #32
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	08010eec 	.word	0x08010eec
 800b780:	080110d8 	.word	0x080110d8
 800b784:	08010f40 	.word	0x08010f40
 800b788:	080110f8 	.word	0x080110f8
 800b78c:	08011118 	.word	0x08011118
 800b790:	0801113c 	.word	0x0801113c
 800b794:	08011160 	.word	0x08011160
 800b798:	08011184 	.word	0x08011184

0800b79c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b086      	sub	sp, #24
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d101      	bne.n	800b7b4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800b7b0:	4b39      	ldr	r3, [pc, #228]	@ (800b898 <udp_bind+0xfc>)
 800b7b2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d109      	bne.n	800b7ce <udp_bind+0x32>
 800b7ba:	4b38      	ldr	r3, [pc, #224]	@ (800b89c <udp_bind+0x100>)
 800b7bc:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800b7c0:	4937      	ldr	r1, [pc, #220]	@ (800b8a0 <udp_bind+0x104>)
 800b7c2:	4838      	ldr	r0, [pc, #224]	@ (800b8a4 <udp_bind+0x108>)
 800b7c4:	f002 fca0 	bl	800e108 <iprintf>
 800b7c8:	f06f 030f 	mvn.w	r3, #15
 800b7cc:	e060      	b.n	800b890 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b7d2:	4b35      	ldr	r3, [pc, #212]	@ (800b8a8 <udp_bind+0x10c>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	617b      	str	r3, [r7, #20]
 800b7d8:	e009      	b.n	800b7ee <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d102      	bne.n	800b7e8 <udp_bind+0x4c>
      rebind = 1;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	74fb      	strb	r3, [r7, #19]
      break;
 800b7e6:	e005      	b.n	800b7f4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	617b      	str	r3, [r7, #20]
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1f2      	bne.n	800b7da <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800b7f4:	88fb      	ldrh	r3, [r7, #6]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d109      	bne.n	800b80e <udp_bind+0x72>
    port = udp_new_port();
 800b7fa:	f7ff fc69 	bl	800b0d0 <udp_new_port>
 800b7fe:	4603      	mov	r3, r0
 800b800:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b802:	88fb      	ldrh	r3, [r7, #6]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d12c      	bne.n	800b862 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800b808:	f06f 0307 	mvn.w	r3, #7
 800b80c:	e040      	b.n	800b890 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b80e:	4b26      	ldr	r3, [pc, #152]	@ (800b8a8 <udp_bind+0x10c>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	617b      	str	r3, [r7, #20]
 800b814:	e022      	b.n	800b85c <udp_bind+0xc0>
      if (pcb != ipcb) {
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d01b      	beq.n	800b856 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	8a5b      	ldrh	r3, [r3, #18]
 800b822:	88fa      	ldrh	r2, [r7, #6]
 800b824:	429a      	cmp	r2, r3
 800b826:	d116      	bne.n	800b856 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800b830:	429a      	cmp	r2, r3
 800b832:	d00d      	beq.n	800b850 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d00a      	beq.n	800b850 <udp_bind+0xb4>
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d006      	beq.n	800b850 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b842:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b844:	2b00      	cmp	r3, #0
 800b846:	d003      	beq.n	800b850 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d102      	bne.n	800b856 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800b850:	f06f 0307 	mvn.w	r3, #7
 800b854:	e01c      	b.n	800b890 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	617b      	str	r3, [r7, #20]
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d1d9      	bne.n	800b816 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d002      	beq.n	800b86e <udp_bind+0xd2>
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	e000      	b.n	800b870 <udp_bind+0xd4>
 800b86e:	2300      	movs	r3, #0
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	88fa      	ldrh	r2, [r7, #6]
 800b878:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800b87a:	7cfb      	ldrb	r3, [r7, #19]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d106      	bne.n	800b88e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800b880:	4b09      	ldr	r3, [pc, #36]	@ (800b8a8 <udp_bind+0x10c>)
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800b888:	4a07      	ldr	r2, [pc, #28]	@ (800b8a8 <udp_bind+0x10c>)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3718      	adds	r7, #24
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	08011a00 	.word	0x08011a00
 800b89c:	08010eec 	.word	0x08010eec
 800b8a0:	080111b4 	.word	0x080111b4
 800b8a4:	08010f40 	.word	0x08010f40
 800b8a8:	200082ec 	.word	0x200082ec

0800b8ac <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d107      	bne.n	800b8ce <udp_recv+0x22>
 800b8be:	4b08      	ldr	r3, [pc, #32]	@ (800b8e0 <udp_recv+0x34>)
 800b8c0:	f240 428a 	movw	r2, #1162	@ 0x48a
 800b8c4:	4907      	ldr	r1, [pc, #28]	@ (800b8e4 <udp_recv+0x38>)
 800b8c6:	4808      	ldr	r0, [pc, #32]	@ (800b8e8 <udp_recv+0x3c>)
 800b8c8:	f002 fc1e 	bl	800e108 <iprintf>
 800b8cc:	e005      	b.n	800b8da <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	61da      	str	r2, [r3, #28]
}
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	08010eec 	.word	0x08010eec
 800b8e4:	08011220 	.word	0x08011220
 800b8e8:	08010f40 	.word	0x08010f40

0800b8ec <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800b8f2:	2000      	movs	r0, #0
 800b8f4:	f7f8 ff84 	bl	8004800 <memp_malloc>
 800b8f8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d007      	beq.n	800b910 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800b900:	2220      	movs	r2, #32
 800b902:	2100      	movs	r1, #0
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f002 fc64 	bl	800e1d2 <memset>
    pcb->ttl = UDP_TTL;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	22ff      	movs	r2, #255	@ 0xff
 800b90e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800b910:	687b      	ldr	r3, [r7, #4]
}
 800b912:	4618      	mov	r0, r3
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
	...

0800b91c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d01e      	beq.n	800b96a <udp_netif_ip_addr_changed+0x4e>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d01a      	beq.n	800b96a <udp_netif_ip_addr_changed+0x4e>
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d017      	beq.n	800b96a <udp_netif_ip_addr_changed+0x4e>
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d013      	beq.n	800b96a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b942:	4b0d      	ldr	r3, [pc, #52]	@ (800b978 <udp_netif_ip_addr_changed+0x5c>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	60fb      	str	r3, [r7, #12]
 800b948:	e00c      	b.n	800b964 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	429a      	cmp	r2, r3
 800b954:	d103      	bne.n	800b95e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	60fb      	str	r3, [r7, #12]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1ef      	bne.n	800b94a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b96a:	bf00      	nop
 800b96c:	3714      	adds	r7, #20
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	200082ec 	.word	0x200082ec

0800b97c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b984:	4915      	ldr	r1, [pc, #84]	@ (800b9dc <etharp_free_entry+0x60>)
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	4613      	mov	r3, r2
 800b98a:	005b      	lsls	r3, r3, #1
 800b98c:	4413      	add	r3, r2
 800b98e:	00db      	lsls	r3, r3, #3
 800b990:	440b      	add	r3, r1
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d013      	beq.n	800b9c0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b998:	4910      	ldr	r1, [pc, #64]	@ (800b9dc <etharp_free_entry+0x60>)
 800b99a:	687a      	ldr	r2, [r7, #4]
 800b99c:	4613      	mov	r3, r2
 800b99e:	005b      	lsls	r3, r3, #1
 800b9a0:	4413      	add	r3, r2
 800b9a2:	00db      	lsls	r3, r3, #3
 800b9a4:	440b      	add	r3, r1
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7f9 fdef 	bl	800558c <pbuf_free>
    arp_table[i].q = NULL;
 800b9ae:	490b      	ldr	r1, [pc, #44]	@ (800b9dc <etharp_free_entry+0x60>)
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	4613      	mov	r3, r2
 800b9b4:	005b      	lsls	r3, r3, #1
 800b9b6:	4413      	add	r3, r2
 800b9b8:	00db      	lsls	r3, r3, #3
 800b9ba:	440b      	add	r3, r1
 800b9bc:	2200      	movs	r2, #0
 800b9be:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b9c0:	4906      	ldr	r1, [pc, #24]	@ (800b9dc <etharp_free_entry+0x60>)
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	005b      	lsls	r3, r3, #1
 800b9c8:	4413      	add	r3, r2
 800b9ca:	00db      	lsls	r3, r3, #3
 800b9cc:	440b      	add	r3, r1
 800b9ce:	3314      	adds	r3, #20
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800b9d4:	bf00      	nop
 800b9d6:	3708      	adds	r7, #8
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}
 800b9dc:	200082f0 	.word	0x200082f0

0800b9e0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	607b      	str	r3, [r7, #4]
 800b9ea:	e096      	b.n	800bb1a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b9ec:	494f      	ldr	r1, [pc, #316]	@ (800bb2c <etharp_tmr+0x14c>)
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	4613      	mov	r3, r2
 800b9f2:	005b      	lsls	r3, r3, #1
 800b9f4:	4413      	add	r3, r2
 800b9f6:	00db      	lsls	r3, r3, #3
 800b9f8:	440b      	add	r3, r1
 800b9fa:	3314      	adds	r3, #20
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800ba00:	78fb      	ldrb	r3, [r7, #3]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	f000 8086 	beq.w	800bb14 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800ba08:	4948      	ldr	r1, [pc, #288]	@ (800bb2c <etharp_tmr+0x14c>)
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	4613      	mov	r3, r2
 800ba0e:	005b      	lsls	r3, r3, #1
 800ba10:	4413      	add	r3, r2
 800ba12:	00db      	lsls	r3, r3, #3
 800ba14:	440b      	add	r3, r1
 800ba16:	3312      	adds	r3, #18
 800ba18:	881b      	ldrh	r3, [r3, #0]
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	b298      	uxth	r0, r3
 800ba1e:	4943      	ldr	r1, [pc, #268]	@ (800bb2c <etharp_tmr+0x14c>)
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	4613      	mov	r3, r2
 800ba24:	005b      	lsls	r3, r3, #1
 800ba26:	4413      	add	r3, r2
 800ba28:	00db      	lsls	r3, r3, #3
 800ba2a:	440b      	add	r3, r1
 800ba2c:	3312      	adds	r3, #18
 800ba2e:	4602      	mov	r2, r0
 800ba30:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ba32:	493e      	ldr	r1, [pc, #248]	@ (800bb2c <etharp_tmr+0x14c>)
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	4613      	mov	r3, r2
 800ba38:	005b      	lsls	r3, r3, #1
 800ba3a:	4413      	add	r3, r2
 800ba3c:	00db      	lsls	r3, r3, #3
 800ba3e:	440b      	add	r3, r1
 800ba40:	3312      	adds	r3, #18
 800ba42:	881b      	ldrh	r3, [r3, #0]
 800ba44:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800ba48:	d215      	bcs.n	800ba76 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ba4a:	4938      	ldr	r1, [pc, #224]	@ (800bb2c <etharp_tmr+0x14c>)
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	4613      	mov	r3, r2
 800ba50:	005b      	lsls	r3, r3, #1
 800ba52:	4413      	add	r3, r2
 800ba54:	00db      	lsls	r3, r3, #3
 800ba56:	440b      	add	r3, r1
 800ba58:	3314      	adds	r3, #20
 800ba5a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d10e      	bne.n	800ba7e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ba60:	4932      	ldr	r1, [pc, #200]	@ (800bb2c <etharp_tmr+0x14c>)
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	4613      	mov	r3, r2
 800ba66:	005b      	lsls	r3, r3, #1
 800ba68:	4413      	add	r3, r2
 800ba6a:	00db      	lsls	r3, r3, #3
 800ba6c:	440b      	add	r3, r1
 800ba6e:	3312      	adds	r3, #18
 800ba70:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ba72:	2b04      	cmp	r3, #4
 800ba74:	d903      	bls.n	800ba7e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f7ff ff80 	bl	800b97c <etharp_free_entry>
 800ba7c:	e04a      	b.n	800bb14 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ba7e:	492b      	ldr	r1, [pc, #172]	@ (800bb2c <etharp_tmr+0x14c>)
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	4613      	mov	r3, r2
 800ba84:	005b      	lsls	r3, r3, #1
 800ba86:	4413      	add	r3, r2
 800ba88:	00db      	lsls	r3, r3, #3
 800ba8a:	440b      	add	r3, r1
 800ba8c:	3314      	adds	r3, #20
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	2b03      	cmp	r3, #3
 800ba92:	d10a      	bne.n	800baaa <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ba94:	4925      	ldr	r1, [pc, #148]	@ (800bb2c <etharp_tmr+0x14c>)
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	4613      	mov	r3, r2
 800ba9a:	005b      	lsls	r3, r3, #1
 800ba9c:	4413      	add	r3, r2
 800ba9e:	00db      	lsls	r3, r3, #3
 800baa0:	440b      	add	r3, r1
 800baa2:	3314      	adds	r3, #20
 800baa4:	2204      	movs	r2, #4
 800baa6:	701a      	strb	r2, [r3, #0]
 800baa8:	e034      	b.n	800bb14 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800baaa:	4920      	ldr	r1, [pc, #128]	@ (800bb2c <etharp_tmr+0x14c>)
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	4613      	mov	r3, r2
 800bab0:	005b      	lsls	r3, r3, #1
 800bab2:	4413      	add	r3, r2
 800bab4:	00db      	lsls	r3, r3, #3
 800bab6:	440b      	add	r3, r1
 800bab8:	3314      	adds	r3, #20
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	2b04      	cmp	r3, #4
 800babe:	d10a      	bne.n	800bad6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800bac0:	491a      	ldr	r1, [pc, #104]	@ (800bb2c <etharp_tmr+0x14c>)
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	4613      	mov	r3, r2
 800bac6:	005b      	lsls	r3, r3, #1
 800bac8:	4413      	add	r3, r2
 800baca:	00db      	lsls	r3, r3, #3
 800bacc:	440b      	add	r3, r1
 800bace:	3314      	adds	r3, #20
 800bad0:	2202      	movs	r2, #2
 800bad2:	701a      	strb	r2, [r3, #0]
 800bad4:	e01e      	b.n	800bb14 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bad6:	4915      	ldr	r1, [pc, #84]	@ (800bb2c <etharp_tmr+0x14c>)
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	4613      	mov	r3, r2
 800badc:	005b      	lsls	r3, r3, #1
 800bade:	4413      	add	r3, r2
 800bae0:	00db      	lsls	r3, r3, #3
 800bae2:	440b      	add	r3, r1
 800bae4:	3314      	adds	r3, #20
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d113      	bne.n	800bb14 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800baec:	490f      	ldr	r1, [pc, #60]	@ (800bb2c <etharp_tmr+0x14c>)
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	4613      	mov	r3, r2
 800baf2:	005b      	lsls	r3, r3, #1
 800baf4:	4413      	add	r3, r2
 800baf6:	00db      	lsls	r3, r3, #3
 800baf8:	440b      	add	r3, r1
 800bafa:	3308      	adds	r3, #8
 800bafc:	6818      	ldr	r0, [r3, #0]
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	4613      	mov	r3, r2
 800bb02:	005b      	lsls	r3, r3, #1
 800bb04:	4413      	add	r3, r2
 800bb06:	00db      	lsls	r3, r3, #3
 800bb08:	4a08      	ldr	r2, [pc, #32]	@ (800bb2c <etharp_tmr+0x14c>)
 800bb0a:	4413      	add	r3, r2
 800bb0c:	3304      	adds	r3, #4
 800bb0e:	4619      	mov	r1, r3
 800bb10:	f000 fe6e 	bl	800c7f0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	3301      	adds	r3, #1
 800bb18:	607b      	str	r3, [r7, #4]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2b09      	cmp	r3, #9
 800bb1e:	f77f af65 	ble.w	800b9ec <etharp_tmr+0xc>
      }
    }
  }
}
 800bb22:	bf00      	nop
 800bb24:	bf00      	nop
 800bb26:	3708      	adds	r7, #8
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}
 800bb2c:	200082f0 	.word	0x200082f0

0800bb30 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b08a      	sub	sp, #40	@ 0x28
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	460b      	mov	r3, r1
 800bb3a:	607a      	str	r2, [r7, #4]
 800bb3c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800bb3e:	230a      	movs	r3, #10
 800bb40:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800bb42:	230a      	movs	r3, #10
 800bb44:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800bb46:	230a      	movs	r3, #10
 800bb48:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800bb4e:	230a      	movs	r3, #10
 800bb50:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800bb52:	2300      	movs	r3, #0
 800bb54:	83bb      	strh	r3, [r7, #28]
 800bb56:	2300      	movs	r3, #0
 800bb58:	837b      	strh	r3, [r7, #26]
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bb5e:	2300      	movs	r3, #0
 800bb60:	843b      	strh	r3, [r7, #32]
 800bb62:	e0ae      	b.n	800bcc2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800bb64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bb68:	49a6      	ldr	r1, [pc, #664]	@ (800be04 <etharp_find_entry+0x2d4>)
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	005b      	lsls	r3, r3, #1
 800bb6e:	4413      	add	r3, r2
 800bb70:	00db      	lsls	r3, r3, #3
 800bb72:	440b      	add	r3, r1
 800bb74:	3314      	adds	r3, #20
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800bb7a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800bb7e:	2b0a      	cmp	r3, #10
 800bb80:	d105      	bne.n	800bb8e <etharp_find_entry+0x5e>
 800bb82:	7dfb      	ldrb	r3, [r7, #23]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d102      	bne.n	800bb8e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800bb88:	8c3b      	ldrh	r3, [r7, #32]
 800bb8a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800bb8c:	e095      	b.n	800bcba <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800bb8e:	7dfb      	ldrb	r3, [r7, #23]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	f000 8092 	beq.w	800bcba <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800bb96:	7dfb      	ldrb	r3, [r7, #23]
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d009      	beq.n	800bbb0 <etharp_find_entry+0x80>
 800bb9c:	7dfb      	ldrb	r3, [r7, #23]
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	d806      	bhi.n	800bbb0 <etharp_find_entry+0x80>
 800bba2:	4b99      	ldr	r3, [pc, #612]	@ (800be08 <etharp_find_entry+0x2d8>)
 800bba4:	f240 1223 	movw	r2, #291	@ 0x123
 800bba8:	4998      	ldr	r1, [pc, #608]	@ (800be0c <etharp_find_entry+0x2dc>)
 800bbaa:	4899      	ldr	r0, [pc, #612]	@ (800be10 <etharp_find_entry+0x2e0>)
 800bbac:	f002 faac 	bl	800e108 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d020      	beq.n	800bbf8 <etharp_find_entry+0xc8>
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	6819      	ldr	r1, [r3, #0]
 800bbba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bbbe:	4891      	ldr	r0, [pc, #580]	@ (800be04 <etharp_find_entry+0x2d4>)
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	005b      	lsls	r3, r3, #1
 800bbc4:	4413      	add	r3, r2
 800bbc6:	00db      	lsls	r3, r3, #3
 800bbc8:	4403      	add	r3, r0
 800bbca:	3304      	adds	r3, #4
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	4299      	cmp	r1, r3
 800bbd0:	d112      	bne.n	800bbf8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d00c      	beq.n	800bbf2 <etharp_find_entry+0xc2>
 800bbd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bbdc:	4989      	ldr	r1, [pc, #548]	@ (800be04 <etharp_find_entry+0x2d4>)
 800bbde:	4613      	mov	r3, r2
 800bbe0:	005b      	lsls	r3, r3, #1
 800bbe2:	4413      	add	r3, r2
 800bbe4:	00db      	lsls	r3, r3, #3
 800bbe6:	440b      	add	r3, r1
 800bbe8:	3308      	adds	r3, #8
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d102      	bne.n	800bbf8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800bbf2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bbf6:	e100      	b.n	800bdfa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800bbf8:	7dfb      	ldrb	r3, [r7, #23]
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d140      	bne.n	800bc80 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800bbfe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc02:	4980      	ldr	r1, [pc, #512]	@ (800be04 <etharp_find_entry+0x2d4>)
 800bc04:	4613      	mov	r3, r2
 800bc06:	005b      	lsls	r3, r3, #1
 800bc08:	4413      	add	r3, r2
 800bc0a:	00db      	lsls	r3, r3, #3
 800bc0c:	440b      	add	r3, r1
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d01a      	beq.n	800bc4a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800bc14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc18:	497a      	ldr	r1, [pc, #488]	@ (800be04 <etharp_find_entry+0x2d4>)
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	005b      	lsls	r3, r3, #1
 800bc1e:	4413      	add	r3, r2
 800bc20:	00db      	lsls	r3, r3, #3
 800bc22:	440b      	add	r3, r1
 800bc24:	3312      	adds	r3, #18
 800bc26:	881b      	ldrh	r3, [r3, #0]
 800bc28:	8bba      	ldrh	r2, [r7, #28]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d845      	bhi.n	800bcba <etharp_find_entry+0x18a>
            old_queue = i;
 800bc2e:	8c3b      	ldrh	r3, [r7, #32]
 800bc30:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800bc32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc36:	4973      	ldr	r1, [pc, #460]	@ (800be04 <etharp_find_entry+0x2d4>)
 800bc38:	4613      	mov	r3, r2
 800bc3a:	005b      	lsls	r3, r3, #1
 800bc3c:	4413      	add	r3, r2
 800bc3e:	00db      	lsls	r3, r3, #3
 800bc40:	440b      	add	r3, r1
 800bc42:	3312      	adds	r3, #18
 800bc44:	881b      	ldrh	r3, [r3, #0]
 800bc46:	83bb      	strh	r3, [r7, #28]
 800bc48:	e037      	b.n	800bcba <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800bc4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc4e:	496d      	ldr	r1, [pc, #436]	@ (800be04 <etharp_find_entry+0x2d4>)
 800bc50:	4613      	mov	r3, r2
 800bc52:	005b      	lsls	r3, r3, #1
 800bc54:	4413      	add	r3, r2
 800bc56:	00db      	lsls	r3, r3, #3
 800bc58:	440b      	add	r3, r1
 800bc5a:	3312      	adds	r3, #18
 800bc5c:	881b      	ldrh	r3, [r3, #0]
 800bc5e:	8b7a      	ldrh	r2, [r7, #26]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d82a      	bhi.n	800bcba <etharp_find_entry+0x18a>
            old_pending = i;
 800bc64:	8c3b      	ldrh	r3, [r7, #32]
 800bc66:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800bc68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc6c:	4965      	ldr	r1, [pc, #404]	@ (800be04 <etharp_find_entry+0x2d4>)
 800bc6e:	4613      	mov	r3, r2
 800bc70:	005b      	lsls	r3, r3, #1
 800bc72:	4413      	add	r3, r2
 800bc74:	00db      	lsls	r3, r3, #3
 800bc76:	440b      	add	r3, r1
 800bc78:	3312      	adds	r3, #18
 800bc7a:	881b      	ldrh	r3, [r3, #0]
 800bc7c:	837b      	strh	r3, [r7, #26]
 800bc7e:	e01c      	b.n	800bcba <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800bc80:	7dfb      	ldrb	r3, [r7, #23]
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d919      	bls.n	800bcba <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800bc86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc8a:	495e      	ldr	r1, [pc, #376]	@ (800be04 <etharp_find_entry+0x2d4>)
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	005b      	lsls	r3, r3, #1
 800bc90:	4413      	add	r3, r2
 800bc92:	00db      	lsls	r3, r3, #3
 800bc94:	440b      	add	r3, r1
 800bc96:	3312      	adds	r3, #18
 800bc98:	881b      	ldrh	r3, [r3, #0]
 800bc9a:	8b3a      	ldrh	r2, [r7, #24]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d80c      	bhi.n	800bcba <etharp_find_entry+0x18a>
            old_stable = i;
 800bca0:	8c3b      	ldrh	r3, [r7, #32]
 800bca2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800bca4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bca8:	4956      	ldr	r1, [pc, #344]	@ (800be04 <etharp_find_entry+0x2d4>)
 800bcaa:	4613      	mov	r3, r2
 800bcac:	005b      	lsls	r3, r3, #1
 800bcae:	4413      	add	r3, r2
 800bcb0:	00db      	lsls	r3, r3, #3
 800bcb2:	440b      	add	r3, r1
 800bcb4:	3312      	adds	r3, #18
 800bcb6:	881b      	ldrh	r3, [r3, #0]
 800bcb8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bcba:	8c3b      	ldrh	r3, [r7, #32]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	843b      	strh	r3, [r7, #32]
 800bcc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bcc6:	2b09      	cmp	r3, #9
 800bcc8:	f77f af4c 	ble.w	800bb64 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800bccc:	7afb      	ldrb	r3, [r7, #11]
 800bcce:	f003 0302 	and.w	r3, r3, #2
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d108      	bne.n	800bce8 <etharp_find_entry+0x1b8>
 800bcd6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800bcda:	2b0a      	cmp	r3, #10
 800bcdc:	d107      	bne.n	800bcee <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800bcde:	7afb      	ldrb	r3, [r7, #11]
 800bce0:	f003 0301 	and.w	r3, r3, #1
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d102      	bne.n	800bcee <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800bce8:	f04f 33ff 	mov.w	r3, #4294967295
 800bcec:	e085      	b.n	800bdfa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800bcee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800bcf2:	2b09      	cmp	r3, #9
 800bcf4:	dc02      	bgt.n	800bcfc <etharp_find_entry+0x1cc>
    i = empty;
 800bcf6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bcf8:	843b      	strh	r3, [r7, #32]
 800bcfa:	e039      	b.n	800bd70 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800bcfc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800bd00:	2b09      	cmp	r3, #9
 800bd02:	dc14      	bgt.n	800bd2e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800bd04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bd06:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800bd08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd0c:	493d      	ldr	r1, [pc, #244]	@ (800be04 <etharp_find_entry+0x2d4>)
 800bd0e:	4613      	mov	r3, r2
 800bd10:	005b      	lsls	r3, r3, #1
 800bd12:	4413      	add	r3, r2
 800bd14:	00db      	lsls	r3, r3, #3
 800bd16:	440b      	add	r3, r1
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d018      	beq.n	800bd50 <etharp_find_entry+0x220>
 800bd1e:	4b3a      	ldr	r3, [pc, #232]	@ (800be08 <etharp_find_entry+0x2d8>)
 800bd20:	f240 126d 	movw	r2, #365	@ 0x16d
 800bd24:	493b      	ldr	r1, [pc, #236]	@ (800be14 <etharp_find_entry+0x2e4>)
 800bd26:	483a      	ldr	r0, [pc, #232]	@ (800be10 <etharp_find_entry+0x2e0>)
 800bd28:	f002 f9ee 	bl	800e108 <iprintf>
 800bd2c:	e010      	b.n	800bd50 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800bd2e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800bd32:	2b09      	cmp	r3, #9
 800bd34:	dc02      	bgt.n	800bd3c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800bd36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bd38:	843b      	strh	r3, [r7, #32]
 800bd3a:	e009      	b.n	800bd50 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800bd3c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bd40:	2b09      	cmp	r3, #9
 800bd42:	dc02      	bgt.n	800bd4a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800bd44:	8bfb      	ldrh	r3, [r7, #30]
 800bd46:	843b      	strh	r3, [r7, #32]
 800bd48:	e002      	b.n	800bd50 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800bd4a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd4e:	e054      	b.n	800bdfa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bd50:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bd54:	2b09      	cmp	r3, #9
 800bd56:	dd06      	ble.n	800bd66 <etharp_find_entry+0x236>
 800bd58:	4b2b      	ldr	r3, [pc, #172]	@ (800be08 <etharp_find_entry+0x2d8>)
 800bd5a:	f240 127f 	movw	r2, #383	@ 0x17f
 800bd5e:	492e      	ldr	r1, [pc, #184]	@ (800be18 <etharp_find_entry+0x2e8>)
 800bd60:	482b      	ldr	r0, [pc, #172]	@ (800be10 <etharp_find_entry+0x2e0>)
 800bd62:	f002 f9d1 	bl	800e108 <iprintf>
    etharp_free_entry(i);
 800bd66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7ff fe06 	bl	800b97c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bd70:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bd74:	2b09      	cmp	r3, #9
 800bd76:	dd06      	ble.n	800bd86 <etharp_find_entry+0x256>
 800bd78:	4b23      	ldr	r3, [pc, #140]	@ (800be08 <etharp_find_entry+0x2d8>)
 800bd7a:	f240 1283 	movw	r2, #387	@ 0x183
 800bd7e:	4926      	ldr	r1, [pc, #152]	@ (800be18 <etharp_find_entry+0x2e8>)
 800bd80:	4823      	ldr	r0, [pc, #140]	@ (800be10 <etharp_find_entry+0x2e0>)
 800bd82:	f002 f9c1 	bl	800e108 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800bd86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd8a:	491e      	ldr	r1, [pc, #120]	@ (800be04 <etharp_find_entry+0x2d4>)
 800bd8c:	4613      	mov	r3, r2
 800bd8e:	005b      	lsls	r3, r3, #1
 800bd90:	4413      	add	r3, r2
 800bd92:	00db      	lsls	r3, r3, #3
 800bd94:	440b      	add	r3, r1
 800bd96:	3314      	adds	r3, #20
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d006      	beq.n	800bdac <etharp_find_entry+0x27c>
 800bd9e:	4b1a      	ldr	r3, [pc, #104]	@ (800be08 <etharp_find_entry+0x2d8>)
 800bda0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800bda4:	491d      	ldr	r1, [pc, #116]	@ (800be1c <etharp_find_entry+0x2ec>)
 800bda6:	481a      	ldr	r0, [pc, #104]	@ (800be10 <etharp_find_entry+0x2e0>)
 800bda8:	f002 f9ae 	bl	800e108 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d00b      	beq.n	800bdca <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800bdb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6819      	ldr	r1, [r3, #0]
 800bdba:	4812      	ldr	r0, [pc, #72]	@ (800be04 <etharp_find_entry+0x2d4>)
 800bdbc:	4613      	mov	r3, r2
 800bdbe:	005b      	lsls	r3, r3, #1
 800bdc0:	4413      	add	r3, r2
 800bdc2:	00db      	lsls	r3, r3, #3
 800bdc4:	4403      	add	r3, r0
 800bdc6:	3304      	adds	r3, #4
 800bdc8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800bdca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bdce:	490d      	ldr	r1, [pc, #52]	@ (800be04 <etharp_find_entry+0x2d4>)
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	005b      	lsls	r3, r3, #1
 800bdd4:	4413      	add	r3, r2
 800bdd6:	00db      	lsls	r3, r3, #3
 800bdd8:	440b      	add	r3, r1
 800bdda:	3312      	adds	r3, #18
 800bddc:	2200      	movs	r2, #0
 800bdde:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800bde0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bde4:	4907      	ldr	r1, [pc, #28]	@ (800be04 <etharp_find_entry+0x2d4>)
 800bde6:	4613      	mov	r3, r2
 800bde8:	005b      	lsls	r3, r3, #1
 800bdea:	4413      	add	r3, r2
 800bdec:	00db      	lsls	r3, r3, #3
 800bdee:	440b      	add	r3, r1
 800bdf0:	3308      	adds	r3, #8
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800bdf6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3728      	adds	r7, #40	@ 0x28
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	200082f0 	.word	0x200082f0
 800be08:	08011250 	.word	0x08011250
 800be0c:	08011288 	.word	0x08011288
 800be10:	080112c8 	.word	0x080112c8
 800be14:	080112f0 	.word	0x080112f0
 800be18:	08011308 	.word	0x08011308
 800be1c:	0801131c 	.word	0x0801131c

0800be20 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b088      	sub	sp, #32
 800be24:	af02      	add	r7, sp, #8
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
 800be2c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800be34:	2b06      	cmp	r3, #6
 800be36:	d006      	beq.n	800be46 <etharp_update_arp_entry+0x26>
 800be38:	4b48      	ldr	r3, [pc, #288]	@ (800bf5c <etharp_update_arp_entry+0x13c>)
 800be3a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800be3e:	4948      	ldr	r1, [pc, #288]	@ (800bf60 <etharp_update_arp_entry+0x140>)
 800be40:	4848      	ldr	r0, [pc, #288]	@ (800bf64 <etharp_update_arp_entry+0x144>)
 800be42:	f002 f961 	bl	800e108 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d012      	beq.n	800be72 <etharp_update_arp_entry+0x52>
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d00e      	beq.n	800be72 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	68f9      	ldr	r1, [r7, #12]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f001 f8fe 	bl	800d05c <ip4_addr_isbroadcast_u32>
 800be60:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800be62:	2b00      	cmp	r3, #0
 800be64:	d105      	bne.n	800be72 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800be6e:	2be0      	cmp	r3, #224	@ 0xe0
 800be70:	d102      	bne.n	800be78 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800be72:	f06f 030f 	mvn.w	r3, #15
 800be76:	e06c      	b.n	800bf52 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800be78:	78fb      	ldrb	r3, [r7, #3]
 800be7a:	68fa      	ldr	r2, [r7, #12]
 800be7c:	4619      	mov	r1, r3
 800be7e:	68b8      	ldr	r0, [r7, #8]
 800be80:	f7ff fe56 	bl	800bb30 <etharp_find_entry>
 800be84:	4603      	mov	r3, r0
 800be86:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800be88:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	da02      	bge.n	800be96 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800be90:	8afb      	ldrh	r3, [r7, #22]
 800be92:	b25b      	sxtb	r3, r3
 800be94:	e05d      	b.n	800bf52 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800be96:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800be9a:	4933      	ldr	r1, [pc, #204]	@ (800bf68 <etharp_update_arp_entry+0x148>)
 800be9c:	4613      	mov	r3, r2
 800be9e:	005b      	lsls	r3, r3, #1
 800bea0:	4413      	add	r3, r2
 800bea2:	00db      	lsls	r3, r3, #3
 800bea4:	440b      	add	r3, r1
 800bea6:	3314      	adds	r3, #20
 800bea8:	2202      	movs	r2, #2
 800beaa:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800beac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800beb0:	492d      	ldr	r1, [pc, #180]	@ (800bf68 <etharp_update_arp_entry+0x148>)
 800beb2:	4613      	mov	r3, r2
 800beb4:	005b      	lsls	r3, r3, #1
 800beb6:	4413      	add	r3, r2
 800beb8:	00db      	lsls	r3, r3, #3
 800beba:	440b      	add	r3, r1
 800bebc:	3308      	adds	r3, #8
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800bec2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bec6:	4613      	mov	r3, r2
 800bec8:	005b      	lsls	r3, r3, #1
 800beca:	4413      	add	r3, r2
 800becc:	00db      	lsls	r3, r3, #3
 800bece:	3308      	adds	r3, #8
 800bed0:	4a25      	ldr	r2, [pc, #148]	@ (800bf68 <etharp_update_arp_entry+0x148>)
 800bed2:	4413      	add	r3, r2
 800bed4:	3304      	adds	r3, #4
 800bed6:	2206      	movs	r2, #6
 800bed8:	6879      	ldr	r1, [r7, #4]
 800beda:	4618      	mov	r0, r3
 800bedc:	f002 f9ef 	bl	800e2be <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800bee0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bee4:	4920      	ldr	r1, [pc, #128]	@ (800bf68 <etharp_update_arp_entry+0x148>)
 800bee6:	4613      	mov	r3, r2
 800bee8:	005b      	lsls	r3, r3, #1
 800beea:	4413      	add	r3, r2
 800beec:	00db      	lsls	r3, r3, #3
 800beee:	440b      	add	r3, r1
 800bef0:	3312      	adds	r3, #18
 800bef2:	2200      	movs	r2, #0
 800bef4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800bef6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800befa:	491b      	ldr	r1, [pc, #108]	@ (800bf68 <etharp_update_arp_entry+0x148>)
 800befc:	4613      	mov	r3, r2
 800befe:	005b      	lsls	r3, r3, #1
 800bf00:	4413      	add	r3, r2
 800bf02:	00db      	lsls	r3, r3, #3
 800bf04:	440b      	add	r3, r1
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d021      	beq.n	800bf50 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800bf0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bf10:	4915      	ldr	r1, [pc, #84]	@ (800bf68 <etharp_update_arp_entry+0x148>)
 800bf12:	4613      	mov	r3, r2
 800bf14:	005b      	lsls	r3, r3, #1
 800bf16:	4413      	add	r3, r2
 800bf18:	00db      	lsls	r3, r3, #3
 800bf1a:	440b      	add	r3, r1
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800bf20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bf24:	4910      	ldr	r1, [pc, #64]	@ (800bf68 <etharp_update_arp_entry+0x148>)
 800bf26:	4613      	mov	r3, r2
 800bf28:	005b      	lsls	r3, r3, #1
 800bf2a:	4413      	add	r3, r2
 800bf2c:	00db      	lsls	r3, r3, #3
 800bf2e:	440b      	add	r3, r1
 800bf30:	2200      	movs	r2, #0
 800bf32:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800bf3a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bf3e:	9300      	str	r3, [sp, #0]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6939      	ldr	r1, [r7, #16]
 800bf44:	68f8      	ldr	r0, [r7, #12]
 800bf46:	f001 ff97 	bl	800de78 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800bf4a:	6938      	ldr	r0, [r7, #16]
 800bf4c:	f7f9 fb1e 	bl	800558c <pbuf_free>
  }
  return ERR_OK;
 800bf50:	2300      	movs	r3, #0
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3718      	adds	r7, #24
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	08011250 	.word	0x08011250
 800bf60:	08011348 	.word	0x08011348
 800bf64:	080112c8 	.word	0x080112c8
 800bf68:	200082f0 	.word	0x200082f0

0800bf6c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bf74:	2300      	movs	r3, #0
 800bf76:	60fb      	str	r3, [r7, #12]
 800bf78:	e01e      	b.n	800bfb8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800bf7a:	4913      	ldr	r1, [pc, #76]	@ (800bfc8 <etharp_cleanup_netif+0x5c>)
 800bf7c:	68fa      	ldr	r2, [r7, #12]
 800bf7e:	4613      	mov	r3, r2
 800bf80:	005b      	lsls	r3, r3, #1
 800bf82:	4413      	add	r3, r2
 800bf84:	00db      	lsls	r3, r3, #3
 800bf86:	440b      	add	r3, r1
 800bf88:	3314      	adds	r3, #20
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800bf8e:	7afb      	ldrb	r3, [r7, #11]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d00e      	beq.n	800bfb2 <etharp_cleanup_netif+0x46>
 800bf94:	490c      	ldr	r1, [pc, #48]	@ (800bfc8 <etharp_cleanup_netif+0x5c>)
 800bf96:	68fa      	ldr	r2, [r7, #12]
 800bf98:	4613      	mov	r3, r2
 800bf9a:	005b      	lsls	r3, r3, #1
 800bf9c:	4413      	add	r3, r2
 800bf9e:	00db      	lsls	r3, r3, #3
 800bfa0:	440b      	add	r3, r1
 800bfa2:	3308      	adds	r3, #8
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d102      	bne.n	800bfb2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800bfac:	68f8      	ldr	r0, [r7, #12]
 800bfae:	f7ff fce5 	bl	800b97c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	60fb      	str	r3, [r7, #12]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2b09      	cmp	r3, #9
 800bfbc:	dddd      	ble.n	800bf7a <etharp_cleanup_netif+0xe>
    }
  }
}
 800bfbe:	bf00      	nop
 800bfc0:	bf00      	nop
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	200082f0 	.word	0x200082f0

0800bfcc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800bfcc:	b5b0      	push	{r4, r5, r7, lr}
 800bfce:	b08a      	sub	sp, #40	@ 0x28
 800bfd0:	af04      	add	r7, sp, #16
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d107      	bne.n	800bfec <etharp_input+0x20>
 800bfdc:	4b3d      	ldr	r3, [pc, #244]	@ (800c0d4 <etharp_input+0x108>)
 800bfde:	f240 228a 	movw	r2, #650	@ 0x28a
 800bfe2:	493d      	ldr	r1, [pc, #244]	@ (800c0d8 <etharp_input+0x10c>)
 800bfe4:	483d      	ldr	r0, [pc, #244]	@ (800c0dc <etharp_input+0x110>)
 800bfe6:	f002 f88f 	bl	800e108 <iprintf>
 800bfea:	e06f      	b.n	800c0cc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	881b      	ldrh	r3, [r3, #0]
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bffc:	d10c      	bne.n	800c018 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c002:	2b06      	cmp	r3, #6
 800c004:	d108      	bne.n	800c018 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c00a:	2b04      	cmp	r3, #4
 800c00c:	d104      	bne.n	800c018 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	885b      	ldrh	r3, [r3, #2]
 800c012:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c014:	2b08      	cmp	r3, #8
 800c016:	d003      	beq.n	800c020 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f7f9 fab7 	bl	800558c <pbuf_free>
    return;
 800c01e:	e055      	b.n	800c0cc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	330e      	adds	r3, #14
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	3318      	adds	r3, #24
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	3304      	adds	r3, #4
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d102      	bne.n	800c040 <etharp_input+0x74>
    for_us = 0;
 800c03a:	2300      	movs	r3, #0
 800c03c:	75fb      	strb	r3, [r7, #23]
 800c03e:	e009      	b.n	800c054 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c040:	68ba      	ldr	r2, [r7, #8]
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	3304      	adds	r3, #4
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	429a      	cmp	r2, r3
 800c04a:	bf0c      	ite	eq
 800c04c:	2301      	moveq	r3, #1
 800c04e:	2300      	movne	r3, #0
 800c050:	b2db      	uxtb	r3, r3
 800c052:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	f103 0208 	add.w	r2, r3, #8
 800c05a:	7dfb      	ldrb	r3, [r7, #23]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d001      	beq.n	800c064 <etharp_input+0x98>
 800c060:	2301      	movs	r3, #1
 800c062:	e000      	b.n	800c066 <etharp_input+0x9a>
 800c064:	2302      	movs	r3, #2
 800c066:	f107 010c 	add.w	r1, r7, #12
 800c06a:	6838      	ldr	r0, [r7, #0]
 800c06c:	f7ff fed8 	bl	800be20 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	88db      	ldrh	r3, [r3, #6]
 800c074:	b29b      	uxth	r3, r3
 800c076:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c07a:	d003      	beq.n	800c084 <etharp_input+0xb8>
 800c07c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c080:	d01e      	beq.n	800c0c0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c082:	e020      	b.n	800c0c6 <etharp_input+0xfa>
      if (for_us) {
 800c084:	7dfb      	ldrb	r3, [r7, #23]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d01c      	beq.n	800c0c4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c0a0:	693a      	ldr	r2, [r7, #16]
 800c0a2:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c0a4:	2102      	movs	r1, #2
 800c0a6:	9103      	str	r1, [sp, #12]
 800c0a8:	f107 010c 	add.w	r1, r7, #12
 800c0ac:	9102      	str	r1, [sp, #8]
 800c0ae:	9201      	str	r2, [sp, #4]
 800c0b0:	9300      	str	r3, [sp, #0]
 800c0b2:	462b      	mov	r3, r5
 800c0b4:	4622      	mov	r2, r4
 800c0b6:	4601      	mov	r1, r0
 800c0b8:	6838      	ldr	r0, [r7, #0]
 800c0ba:	f000 faeb 	bl	800c694 <etharp_raw>
      break;
 800c0be:	e001      	b.n	800c0c4 <etharp_input+0xf8>
      break;
 800c0c0:	bf00      	nop
 800c0c2:	e000      	b.n	800c0c6 <etharp_input+0xfa>
      break;
 800c0c4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f7f9 fa60 	bl	800558c <pbuf_free>
}
 800c0cc:	3718      	adds	r7, #24
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bdb0      	pop	{r4, r5, r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	08011250 	.word	0x08011250
 800c0d8:	080113a0 	.word	0x080113a0
 800c0dc:	080112c8 	.word	0x080112c8

0800c0e0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b086      	sub	sp, #24
 800c0e4:	af02      	add	r7, sp, #8
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c0ee:	79fa      	ldrb	r2, [r7, #7]
 800c0f0:	4944      	ldr	r1, [pc, #272]	@ (800c204 <etharp_output_to_arp_index+0x124>)
 800c0f2:	4613      	mov	r3, r2
 800c0f4:	005b      	lsls	r3, r3, #1
 800c0f6:	4413      	add	r3, r2
 800c0f8:	00db      	lsls	r3, r3, #3
 800c0fa:	440b      	add	r3, r1
 800c0fc:	3314      	adds	r3, #20
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	2b01      	cmp	r3, #1
 800c102:	d806      	bhi.n	800c112 <etharp_output_to_arp_index+0x32>
 800c104:	4b40      	ldr	r3, [pc, #256]	@ (800c208 <etharp_output_to_arp_index+0x128>)
 800c106:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800c10a:	4940      	ldr	r1, [pc, #256]	@ (800c20c <etharp_output_to_arp_index+0x12c>)
 800c10c:	4840      	ldr	r0, [pc, #256]	@ (800c210 <etharp_output_to_arp_index+0x130>)
 800c10e:	f001 fffb 	bl	800e108 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c112:	79fa      	ldrb	r2, [r7, #7]
 800c114:	493b      	ldr	r1, [pc, #236]	@ (800c204 <etharp_output_to_arp_index+0x124>)
 800c116:	4613      	mov	r3, r2
 800c118:	005b      	lsls	r3, r3, #1
 800c11a:	4413      	add	r3, r2
 800c11c:	00db      	lsls	r3, r3, #3
 800c11e:	440b      	add	r3, r1
 800c120:	3314      	adds	r3, #20
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	2b02      	cmp	r3, #2
 800c126:	d153      	bne.n	800c1d0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c128:	79fa      	ldrb	r2, [r7, #7]
 800c12a:	4936      	ldr	r1, [pc, #216]	@ (800c204 <etharp_output_to_arp_index+0x124>)
 800c12c:	4613      	mov	r3, r2
 800c12e:	005b      	lsls	r3, r3, #1
 800c130:	4413      	add	r3, r2
 800c132:	00db      	lsls	r3, r3, #3
 800c134:	440b      	add	r3, r1
 800c136:	3312      	adds	r3, #18
 800c138:	881b      	ldrh	r3, [r3, #0]
 800c13a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800c13e:	d919      	bls.n	800c174 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c140:	79fa      	ldrb	r2, [r7, #7]
 800c142:	4613      	mov	r3, r2
 800c144:	005b      	lsls	r3, r3, #1
 800c146:	4413      	add	r3, r2
 800c148:	00db      	lsls	r3, r3, #3
 800c14a:	4a2e      	ldr	r2, [pc, #184]	@ (800c204 <etharp_output_to_arp_index+0x124>)
 800c14c:	4413      	add	r3, r2
 800c14e:	3304      	adds	r3, #4
 800c150:	4619      	mov	r1, r3
 800c152:	68f8      	ldr	r0, [r7, #12]
 800c154:	f000 fb4c 	bl	800c7f0 <etharp_request>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d138      	bne.n	800c1d0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c15e:	79fa      	ldrb	r2, [r7, #7]
 800c160:	4928      	ldr	r1, [pc, #160]	@ (800c204 <etharp_output_to_arp_index+0x124>)
 800c162:	4613      	mov	r3, r2
 800c164:	005b      	lsls	r3, r3, #1
 800c166:	4413      	add	r3, r2
 800c168:	00db      	lsls	r3, r3, #3
 800c16a:	440b      	add	r3, r1
 800c16c:	3314      	adds	r3, #20
 800c16e:	2203      	movs	r2, #3
 800c170:	701a      	strb	r2, [r3, #0]
 800c172:	e02d      	b.n	800c1d0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c174:	79fa      	ldrb	r2, [r7, #7]
 800c176:	4923      	ldr	r1, [pc, #140]	@ (800c204 <etharp_output_to_arp_index+0x124>)
 800c178:	4613      	mov	r3, r2
 800c17a:	005b      	lsls	r3, r3, #1
 800c17c:	4413      	add	r3, r2
 800c17e:	00db      	lsls	r3, r3, #3
 800c180:	440b      	add	r3, r1
 800c182:	3312      	adds	r3, #18
 800c184:	881b      	ldrh	r3, [r3, #0]
 800c186:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800c18a:	d321      	bcc.n	800c1d0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c18c:	79fa      	ldrb	r2, [r7, #7]
 800c18e:	4613      	mov	r3, r2
 800c190:	005b      	lsls	r3, r3, #1
 800c192:	4413      	add	r3, r2
 800c194:	00db      	lsls	r3, r3, #3
 800c196:	4a1b      	ldr	r2, [pc, #108]	@ (800c204 <etharp_output_to_arp_index+0x124>)
 800c198:	4413      	add	r3, r2
 800c19a:	1d19      	adds	r1, r3, #4
 800c19c:	79fa      	ldrb	r2, [r7, #7]
 800c19e:	4613      	mov	r3, r2
 800c1a0:	005b      	lsls	r3, r3, #1
 800c1a2:	4413      	add	r3, r2
 800c1a4:	00db      	lsls	r3, r3, #3
 800c1a6:	3308      	adds	r3, #8
 800c1a8:	4a16      	ldr	r2, [pc, #88]	@ (800c204 <etharp_output_to_arp_index+0x124>)
 800c1aa:	4413      	add	r3, r2
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	68f8      	ldr	r0, [r7, #12]
 800c1b2:	f000 fafb 	bl	800c7ac <etharp_request_dst>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d109      	bne.n	800c1d0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c1bc:	79fa      	ldrb	r2, [r7, #7]
 800c1be:	4911      	ldr	r1, [pc, #68]	@ (800c204 <etharp_output_to_arp_index+0x124>)
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	005b      	lsls	r3, r3, #1
 800c1c4:	4413      	add	r3, r2
 800c1c6:	00db      	lsls	r3, r3, #3
 800c1c8:	440b      	add	r3, r1
 800c1ca:	3314      	adds	r3, #20
 800c1cc:	2203      	movs	r2, #3
 800c1ce:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800c1d6:	79fa      	ldrb	r2, [r7, #7]
 800c1d8:	4613      	mov	r3, r2
 800c1da:	005b      	lsls	r3, r3, #1
 800c1dc:	4413      	add	r3, r2
 800c1de:	00db      	lsls	r3, r3, #3
 800c1e0:	3308      	adds	r3, #8
 800c1e2:	4a08      	ldr	r2, [pc, #32]	@ (800c204 <etharp_output_to_arp_index+0x124>)
 800c1e4:	4413      	add	r3, r2
 800c1e6:	3304      	adds	r3, #4
 800c1e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c1ec:	9200      	str	r2, [sp, #0]
 800c1ee:	460a      	mov	r2, r1
 800c1f0:	68b9      	ldr	r1, [r7, #8]
 800c1f2:	68f8      	ldr	r0, [r7, #12]
 800c1f4:	f001 fe40 	bl	800de78 <ethernet_output>
 800c1f8:	4603      	mov	r3, r0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3710      	adds	r7, #16
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	200082f0 	.word	0x200082f0
 800c208:	08011250 	.word	0x08011250
 800c20c:	080113c0 	.word	0x080113c0
 800c210:	080112c8 	.word	0x080112c8

0800c214 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b08a      	sub	sp, #40	@ 0x28
 800c218:	af02      	add	r7, sp, #8
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d106      	bne.n	800c238 <etharp_output+0x24>
 800c22a:	4b73      	ldr	r3, [pc, #460]	@ (800c3f8 <etharp_output+0x1e4>)
 800c22c:	f240 321e 	movw	r2, #798	@ 0x31e
 800c230:	4972      	ldr	r1, [pc, #456]	@ (800c3fc <etharp_output+0x1e8>)
 800c232:	4873      	ldr	r0, [pc, #460]	@ (800c400 <etharp_output+0x1ec>)
 800c234:	f001 ff68 	bl	800e108 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d106      	bne.n	800c24c <etharp_output+0x38>
 800c23e:	4b6e      	ldr	r3, [pc, #440]	@ (800c3f8 <etharp_output+0x1e4>)
 800c240:	f240 321f 	movw	r2, #799	@ 0x31f
 800c244:	496f      	ldr	r1, [pc, #444]	@ (800c404 <etharp_output+0x1f0>)
 800c246:	486e      	ldr	r0, [pc, #440]	@ (800c400 <etharp_output+0x1ec>)
 800c248:	f001 ff5e 	bl	800e108 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d106      	bne.n	800c260 <etharp_output+0x4c>
 800c252:	4b69      	ldr	r3, [pc, #420]	@ (800c3f8 <etharp_output+0x1e4>)
 800c254:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800c258:	496b      	ldr	r1, [pc, #428]	@ (800c408 <etharp_output+0x1f4>)
 800c25a:	4869      	ldr	r0, [pc, #420]	@ (800c400 <etharp_output+0x1ec>)
 800c25c:	f001 ff54 	bl	800e108 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	68f9      	ldr	r1, [r7, #12]
 800c266:	4618      	mov	r0, r3
 800c268:	f000 fef8 	bl	800d05c <ip4_addr_isbroadcast_u32>
 800c26c:	4603      	mov	r3, r0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d002      	beq.n	800c278 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c272:	4b66      	ldr	r3, [pc, #408]	@ (800c40c <etharp_output+0x1f8>)
 800c274:	61fb      	str	r3, [r7, #28]
 800c276:	e0af      	b.n	800c3d8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c280:	2be0      	cmp	r3, #224	@ 0xe0
 800c282:	d118      	bne.n	800c2b6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c284:	2301      	movs	r3, #1
 800c286:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c288:	2300      	movs	r3, #0
 800c28a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c28c:	235e      	movs	r3, #94	@ 0x5e
 800c28e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	3301      	adds	r3, #1
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	3302      	adds	r3, #2
 800c2a2:	781b      	ldrb	r3, [r3, #0]
 800c2a4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	3303      	adds	r3, #3
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c2ae:	f107 0310 	add.w	r3, r7, #16
 800c2b2:	61fb      	str	r3, [r7, #28]
 800c2b4:	e090      	b.n	800c3d8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	3304      	adds	r3, #4
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	405a      	eors	r2, r3
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	3308      	adds	r3, #8
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4013      	ands	r3, r2
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d012      	beq.n	800c2f4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c2d4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d00b      	beq.n	800c2f4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	330c      	adds	r3, #12
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d003      	beq.n	800c2ee <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	330c      	adds	r3, #12
 800c2ea:	61bb      	str	r3, [r7, #24]
 800c2ec:	e002      	b.n	800c2f4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c2ee:	f06f 0303 	mvn.w	r3, #3
 800c2f2:	e07d      	b.n	800c3f0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c2f4:	4b46      	ldr	r3, [pc, #280]	@ (800c410 <etharp_output+0x1fc>)
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	4a46      	ldr	r2, [pc, #280]	@ (800c414 <etharp_output+0x200>)
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	005b      	lsls	r3, r3, #1
 800c300:	440b      	add	r3, r1
 800c302:	00db      	lsls	r3, r3, #3
 800c304:	4413      	add	r3, r2
 800c306:	3314      	adds	r3, #20
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	d925      	bls.n	800c35a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c30e:	4b40      	ldr	r3, [pc, #256]	@ (800c410 <etharp_output+0x1fc>)
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	4619      	mov	r1, r3
 800c314:	4a3f      	ldr	r2, [pc, #252]	@ (800c414 <etharp_output+0x200>)
 800c316:	460b      	mov	r3, r1
 800c318:	005b      	lsls	r3, r3, #1
 800c31a:	440b      	add	r3, r1
 800c31c:	00db      	lsls	r3, r3, #3
 800c31e:	4413      	add	r3, r2
 800c320:	3308      	adds	r3, #8
 800c322:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c324:	68fa      	ldr	r2, [r7, #12]
 800c326:	429a      	cmp	r2, r3
 800c328:	d117      	bne.n	800c35a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	4b38      	ldr	r3, [pc, #224]	@ (800c410 <etharp_output+0x1fc>)
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	4618      	mov	r0, r3
 800c334:	4937      	ldr	r1, [pc, #220]	@ (800c414 <etharp_output+0x200>)
 800c336:	4603      	mov	r3, r0
 800c338:	005b      	lsls	r3, r3, #1
 800c33a:	4403      	add	r3, r0
 800c33c:	00db      	lsls	r3, r3, #3
 800c33e:	440b      	add	r3, r1
 800c340:	3304      	adds	r3, #4
 800c342:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c344:	429a      	cmp	r2, r3
 800c346:	d108      	bne.n	800c35a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c348:	4b31      	ldr	r3, [pc, #196]	@ (800c410 <etharp_output+0x1fc>)
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	461a      	mov	r2, r3
 800c34e:	68b9      	ldr	r1, [r7, #8]
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	f7ff fec5 	bl	800c0e0 <etharp_output_to_arp_index>
 800c356:	4603      	mov	r3, r0
 800c358:	e04a      	b.n	800c3f0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c35a:	2300      	movs	r3, #0
 800c35c:	75fb      	strb	r3, [r7, #23]
 800c35e:	e031      	b.n	800c3c4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c360:	7dfa      	ldrb	r2, [r7, #23]
 800c362:	492c      	ldr	r1, [pc, #176]	@ (800c414 <etharp_output+0x200>)
 800c364:	4613      	mov	r3, r2
 800c366:	005b      	lsls	r3, r3, #1
 800c368:	4413      	add	r3, r2
 800c36a:	00db      	lsls	r3, r3, #3
 800c36c:	440b      	add	r3, r1
 800c36e:	3314      	adds	r3, #20
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	2b01      	cmp	r3, #1
 800c374:	d923      	bls.n	800c3be <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c376:	7dfa      	ldrb	r2, [r7, #23]
 800c378:	4926      	ldr	r1, [pc, #152]	@ (800c414 <etharp_output+0x200>)
 800c37a:	4613      	mov	r3, r2
 800c37c:	005b      	lsls	r3, r3, #1
 800c37e:	4413      	add	r3, r2
 800c380:	00db      	lsls	r3, r3, #3
 800c382:	440b      	add	r3, r1
 800c384:	3308      	adds	r3, #8
 800c386:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c388:	68fa      	ldr	r2, [r7, #12]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d117      	bne.n	800c3be <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	6819      	ldr	r1, [r3, #0]
 800c392:	7dfa      	ldrb	r2, [r7, #23]
 800c394:	481f      	ldr	r0, [pc, #124]	@ (800c414 <etharp_output+0x200>)
 800c396:	4613      	mov	r3, r2
 800c398:	005b      	lsls	r3, r3, #1
 800c39a:	4413      	add	r3, r2
 800c39c:	00db      	lsls	r3, r3, #3
 800c39e:	4403      	add	r3, r0
 800c3a0:	3304      	adds	r3, #4
 800c3a2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c3a4:	4299      	cmp	r1, r3
 800c3a6:	d10a      	bne.n	800c3be <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c3a8:	4a19      	ldr	r2, [pc, #100]	@ (800c410 <etharp_output+0x1fc>)
 800c3aa:	7dfb      	ldrb	r3, [r7, #23]
 800c3ac:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c3ae:	7dfb      	ldrb	r3, [r7, #23]
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	68b9      	ldr	r1, [r7, #8]
 800c3b4:	68f8      	ldr	r0, [r7, #12]
 800c3b6:	f7ff fe93 	bl	800c0e0 <etharp_output_to_arp_index>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	e018      	b.n	800c3f0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c3be:	7dfb      	ldrb	r3, [r7, #23]
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	75fb      	strb	r3, [r7, #23]
 800c3c4:	7dfb      	ldrb	r3, [r7, #23]
 800c3c6:	2b09      	cmp	r3, #9
 800c3c8:	d9ca      	bls.n	800c360 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c3ca:	68ba      	ldr	r2, [r7, #8]
 800c3cc:	69b9      	ldr	r1, [r7, #24]
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f000 f822 	bl	800c418 <etharp_query>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	e00b      	b.n	800c3f0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800c3de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c3e2:	9300      	str	r3, [sp, #0]
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	68b9      	ldr	r1, [r7, #8]
 800c3e8:	68f8      	ldr	r0, [r7, #12]
 800c3ea:	f001 fd45 	bl	800de78 <ethernet_output>
 800c3ee:	4603      	mov	r3, r0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3720      	adds	r7, #32
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	08011250 	.word	0x08011250
 800c3fc:	080113a0 	.word	0x080113a0
 800c400:	080112c8 	.word	0x080112c8
 800c404:	080113f0 	.word	0x080113f0
 800c408:	08011390 	.word	0x08011390
 800c40c:	08011a04 	.word	0x08011a04
 800c410:	200083e0 	.word	0x200083e0
 800c414:	200082f0 	.word	0x200082f0

0800c418 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b08c      	sub	sp, #48	@ 0x30
 800c41c:	af02      	add	r7, sp, #8
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	3326      	adds	r3, #38	@ 0x26
 800c428:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c42a:	23ff      	movs	r3, #255	@ 0xff
 800c42c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800c430:	2300      	movs	r3, #0
 800c432:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	68f9      	ldr	r1, [r7, #12]
 800c43a:	4618      	mov	r0, r3
 800c43c:	f000 fe0e 	bl	800d05c <ip4_addr_isbroadcast_u32>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d10c      	bne.n	800c460 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c44e:	2be0      	cmp	r3, #224	@ 0xe0
 800c450:	d006      	beq.n	800c460 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d003      	beq.n	800c460 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d102      	bne.n	800c466 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c460:	f06f 030f 	mvn.w	r3, #15
 800c464:	e101      	b.n	800c66a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c466:	68fa      	ldr	r2, [r7, #12]
 800c468:	2101      	movs	r1, #1
 800c46a:	68b8      	ldr	r0, [r7, #8]
 800c46c:	f7ff fb60 	bl	800bb30 <etharp_find_entry>
 800c470:	4603      	mov	r3, r0
 800c472:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c474:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	da02      	bge.n	800c482 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c47c:	8a7b      	ldrh	r3, [r7, #18]
 800c47e:	b25b      	sxtb	r3, r3
 800c480:	e0f3      	b.n	800c66a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c482:	8a7b      	ldrh	r3, [r7, #18]
 800c484:	2b7e      	cmp	r3, #126	@ 0x7e
 800c486:	d906      	bls.n	800c496 <etharp_query+0x7e>
 800c488:	4b7a      	ldr	r3, [pc, #488]	@ (800c674 <etharp_query+0x25c>)
 800c48a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800c48e:	497a      	ldr	r1, [pc, #488]	@ (800c678 <etharp_query+0x260>)
 800c490:	487a      	ldr	r0, [pc, #488]	@ (800c67c <etharp_query+0x264>)
 800c492:	f001 fe39 	bl	800e108 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c496:	8a7b      	ldrh	r3, [r7, #18]
 800c498:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c49a:	7c7a      	ldrb	r2, [r7, #17]
 800c49c:	4978      	ldr	r1, [pc, #480]	@ (800c680 <etharp_query+0x268>)
 800c49e:	4613      	mov	r3, r2
 800c4a0:	005b      	lsls	r3, r3, #1
 800c4a2:	4413      	add	r3, r2
 800c4a4:	00db      	lsls	r3, r3, #3
 800c4a6:	440b      	add	r3, r1
 800c4a8:	3314      	adds	r3, #20
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d115      	bne.n	800c4dc <etharp_query+0xc4>
    is_new_entry = 1;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c4b4:	7c7a      	ldrb	r2, [r7, #17]
 800c4b6:	4972      	ldr	r1, [pc, #456]	@ (800c680 <etharp_query+0x268>)
 800c4b8:	4613      	mov	r3, r2
 800c4ba:	005b      	lsls	r3, r3, #1
 800c4bc:	4413      	add	r3, r2
 800c4be:	00db      	lsls	r3, r3, #3
 800c4c0:	440b      	add	r3, r1
 800c4c2:	3314      	adds	r3, #20
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c4c8:	7c7a      	ldrb	r2, [r7, #17]
 800c4ca:	496d      	ldr	r1, [pc, #436]	@ (800c680 <etharp_query+0x268>)
 800c4cc:	4613      	mov	r3, r2
 800c4ce:	005b      	lsls	r3, r3, #1
 800c4d0:	4413      	add	r3, r2
 800c4d2:	00db      	lsls	r3, r3, #3
 800c4d4:	440b      	add	r3, r1
 800c4d6:	3308      	adds	r3, #8
 800c4d8:	68fa      	ldr	r2, [r7, #12]
 800c4da:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c4dc:	7c7a      	ldrb	r2, [r7, #17]
 800c4de:	4968      	ldr	r1, [pc, #416]	@ (800c680 <etharp_query+0x268>)
 800c4e0:	4613      	mov	r3, r2
 800c4e2:	005b      	lsls	r3, r3, #1
 800c4e4:	4413      	add	r3, r2
 800c4e6:	00db      	lsls	r3, r3, #3
 800c4e8:	440b      	add	r3, r1
 800c4ea:	3314      	adds	r3, #20
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	d011      	beq.n	800c516 <etharp_query+0xfe>
 800c4f2:	7c7a      	ldrb	r2, [r7, #17]
 800c4f4:	4962      	ldr	r1, [pc, #392]	@ (800c680 <etharp_query+0x268>)
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	005b      	lsls	r3, r3, #1
 800c4fa:	4413      	add	r3, r2
 800c4fc:	00db      	lsls	r3, r3, #3
 800c4fe:	440b      	add	r3, r1
 800c500:	3314      	adds	r3, #20
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	2b01      	cmp	r3, #1
 800c506:	d806      	bhi.n	800c516 <etharp_query+0xfe>
 800c508:	4b5a      	ldr	r3, [pc, #360]	@ (800c674 <etharp_query+0x25c>)
 800c50a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800c50e:	495d      	ldr	r1, [pc, #372]	@ (800c684 <etharp_query+0x26c>)
 800c510:	485a      	ldr	r0, [pc, #360]	@ (800c67c <etharp_query+0x264>)
 800c512:	f001 fdf9 	bl	800e108 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c516:	6a3b      	ldr	r3, [r7, #32]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d102      	bne.n	800c522 <etharp_query+0x10a>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d10c      	bne.n	800c53c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c522:	68b9      	ldr	r1, [r7, #8]
 800c524:	68f8      	ldr	r0, [r7, #12]
 800c526:	f000 f963 	bl	800c7f0 <etharp_request>
 800c52a:	4603      	mov	r3, r0
 800c52c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d102      	bne.n	800c53c <etharp_query+0x124>
      return result;
 800c536:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c53a:	e096      	b.n	800c66a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d106      	bne.n	800c550 <etharp_query+0x138>
 800c542:	4b4c      	ldr	r3, [pc, #304]	@ (800c674 <etharp_query+0x25c>)
 800c544:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800c548:	494f      	ldr	r1, [pc, #316]	@ (800c688 <etharp_query+0x270>)
 800c54a:	484c      	ldr	r0, [pc, #304]	@ (800c67c <etharp_query+0x264>)
 800c54c:	f001 fddc 	bl	800e108 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c550:	7c7a      	ldrb	r2, [r7, #17]
 800c552:	494b      	ldr	r1, [pc, #300]	@ (800c680 <etharp_query+0x268>)
 800c554:	4613      	mov	r3, r2
 800c556:	005b      	lsls	r3, r3, #1
 800c558:	4413      	add	r3, r2
 800c55a:	00db      	lsls	r3, r3, #3
 800c55c:	440b      	add	r3, r1
 800c55e:	3314      	adds	r3, #20
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	2b01      	cmp	r3, #1
 800c564:	d917      	bls.n	800c596 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c566:	4a49      	ldr	r2, [pc, #292]	@ (800c68c <etharp_query+0x274>)
 800c568:	7c7b      	ldrb	r3, [r7, #17]
 800c56a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c56c:	7c7a      	ldrb	r2, [r7, #17]
 800c56e:	4613      	mov	r3, r2
 800c570:	005b      	lsls	r3, r3, #1
 800c572:	4413      	add	r3, r2
 800c574:	00db      	lsls	r3, r3, #3
 800c576:	3308      	adds	r3, #8
 800c578:	4a41      	ldr	r2, [pc, #260]	@ (800c680 <etharp_query+0x268>)
 800c57a:	4413      	add	r3, r2
 800c57c:	3304      	adds	r3, #4
 800c57e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c582:	9200      	str	r2, [sp, #0]
 800c584:	697a      	ldr	r2, [r7, #20]
 800c586:	6879      	ldr	r1, [r7, #4]
 800c588:	68f8      	ldr	r0, [r7, #12]
 800c58a:	f001 fc75 	bl	800de78 <ethernet_output>
 800c58e:	4603      	mov	r3, r0
 800c590:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c594:	e067      	b.n	800c666 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c596:	7c7a      	ldrb	r2, [r7, #17]
 800c598:	4939      	ldr	r1, [pc, #228]	@ (800c680 <etharp_query+0x268>)
 800c59a:	4613      	mov	r3, r2
 800c59c:	005b      	lsls	r3, r3, #1
 800c59e:	4413      	add	r3, r2
 800c5a0:	00db      	lsls	r3, r3, #3
 800c5a2:	440b      	add	r3, r1
 800c5a4:	3314      	adds	r3, #20
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d15c      	bne.n	800c666 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c5b4:	e01c      	b.n	800c5f0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	895a      	ldrh	r2, [r3, #10]
 800c5ba:	69fb      	ldr	r3, [r7, #28]
 800c5bc:	891b      	ldrh	r3, [r3, #8]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d10a      	bne.n	800c5d8 <etharp_query+0x1c0>
 800c5c2:	69fb      	ldr	r3, [r7, #28]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d006      	beq.n	800c5d8 <etharp_query+0x1c0>
 800c5ca:	4b2a      	ldr	r3, [pc, #168]	@ (800c674 <etharp_query+0x25c>)
 800c5cc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800c5d0:	492f      	ldr	r1, [pc, #188]	@ (800c690 <etharp_query+0x278>)
 800c5d2:	482a      	ldr	r0, [pc, #168]	@ (800c67c <etharp_query+0x264>)
 800c5d4:	f001 fd98 	bl	800e108 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	7b1b      	ldrb	r3, [r3, #12]
 800c5dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d002      	beq.n	800c5ea <etharp_query+0x1d2>
        copy_needed = 1;
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	61bb      	str	r3, [r7, #24]
        break;
 800c5e8:	e005      	b.n	800c5f6 <etharp_query+0x1de>
      }
      p = p->next;
 800c5ea:	69fb      	ldr	r3, [r7, #28]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d1df      	bne.n	800c5b6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d007      	beq.n	800c60c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800c602:	200e      	movs	r0, #14
 800c604:	f7f9 fac0 	bl	8005b88 <pbuf_clone>
 800c608:	61f8      	str	r0, [r7, #28]
 800c60a:	e004      	b.n	800c616 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c610:	69f8      	ldr	r0, [r7, #28]
 800c612:	f7f9 f85b 	bl	80056cc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d021      	beq.n	800c660 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c61c:	7c7a      	ldrb	r2, [r7, #17]
 800c61e:	4918      	ldr	r1, [pc, #96]	@ (800c680 <etharp_query+0x268>)
 800c620:	4613      	mov	r3, r2
 800c622:	005b      	lsls	r3, r3, #1
 800c624:	4413      	add	r3, r2
 800c626:	00db      	lsls	r3, r3, #3
 800c628:	440b      	add	r3, r1
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d00a      	beq.n	800c646 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800c630:	7c7a      	ldrb	r2, [r7, #17]
 800c632:	4913      	ldr	r1, [pc, #76]	@ (800c680 <etharp_query+0x268>)
 800c634:	4613      	mov	r3, r2
 800c636:	005b      	lsls	r3, r3, #1
 800c638:	4413      	add	r3, r2
 800c63a:	00db      	lsls	r3, r3, #3
 800c63c:	440b      	add	r3, r1
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4618      	mov	r0, r3
 800c642:	f7f8 ffa3 	bl	800558c <pbuf_free>
      }
      arp_table[i].q = p;
 800c646:	7c7a      	ldrb	r2, [r7, #17]
 800c648:	490d      	ldr	r1, [pc, #52]	@ (800c680 <etharp_query+0x268>)
 800c64a:	4613      	mov	r3, r2
 800c64c:	005b      	lsls	r3, r3, #1
 800c64e:	4413      	add	r3, r2
 800c650:	00db      	lsls	r3, r3, #3
 800c652:	440b      	add	r3, r1
 800c654:	69fa      	ldr	r2, [r7, #28]
 800c656:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c658:	2300      	movs	r3, #0
 800c65a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c65e:	e002      	b.n	800c666 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c660:	23ff      	movs	r3, #255	@ 0xff
 800c662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800c666:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3728      	adds	r7, #40	@ 0x28
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	08011250 	.word	0x08011250
 800c678:	080113fc 	.word	0x080113fc
 800c67c:	080112c8 	.word	0x080112c8
 800c680:	200082f0 	.word	0x200082f0
 800c684:	0801140c 	.word	0x0801140c
 800c688:	080113f0 	.word	0x080113f0
 800c68c:	200083e0 	.word	0x200083e0
 800c690:	08011434 	.word	0x08011434

0800c694 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b08a      	sub	sp, #40	@ 0x28
 800c698:	af02      	add	r7, sp, #8
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	60b9      	str	r1, [r7, #8]
 800c69e:	607a      	str	r2, [r7, #4]
 800c6a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d106      	bne.n	800c6ba <etharp_raw+0x26>
 800c6ac:	4b3a      	ldr	r3, [pc, #232]	@ (800c798 <etharp_raw+0x104>)
 800c6ae:	f240 4257 	movw	r2, #1111	@ 0x457
 800c6b2:	493a      	ldr	r1, [pc, #232]	@ (800c79c <etharp_raw+0x108>)
 800c6b4:	483a      	ldr	r0, [pc, #232]	@ (800c7a0 <etharp_raw+0x10c>)
 800c6b6:	f001 fd27 	bl	800e108 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c6ba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c6be:	211c      	movs	r1, #28
 800c6c0:	200e      	movs	r0, #14
 800c6c2:	f7f8 fc7f 	bl	8004fc4 <pbuf_alloc>
 800c6c6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c6c8:	69bb      	ldr	r3, [r7, #24]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d102      	bne.n	800c6d4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c6ce:	f04f 33ff 	mov.w	r3, #4294967295
 800c6d2:	e05d      	b.n	800c790 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c6d4:	69bb      	ldr	r3, [r7, #24]
 800c6d6:	895b      	ldrh	r3, [r3, #10]
 800c6d8:	2b1b      	cmp	r3, #27
 800c6da:	d806      	bhi.n	800c6ea <etharp_raw+0x56>
 800c6dc:	4b2e      	ldr	r3, [pc, #184]	@ (800c798 <etharp_raw+0x104>)
 800c6de:	f240 4262 	movw	r2, #1122	@ 0x462
 800c6e2:	4930      	ldr	r1, [pc, #192]	@ (800c7a4 <etharp_raw+0x110>)
 800c6e4:	482e      	ldr	r0, [pc, #184]	@ (800c7a0 <etharp_raw+0x10c>)
 800c6e6:	f001 fd0f 	bl	800e108 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c6ea:	69bb      	ldr	r3, [r7, #24]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c6f0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7f7 fc0c 	bl	8003f10 <lwip_htons>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c706:	2b06      	cmp	r3, #6
 800c708:	d006      	beq.n	800c718 <etharp_raw+0x84>
 800c70a:	4b23      	ldr	r3, [pc, #140]	@ (800c798 <etharp_raw+0x104>)
 800c70c:	f240 4269 	movw	r2, #1129	@ 0x469
 800c710:	4925      	ldr	r1, [pc, #148]	@ (800c7a8 <etharp_raw+0x114>)
 800c712:	4823      	ldr	r0, [pc, #140]	@ (800c7a0 <etharp_raw+0x10c>)
 800c714:	f001 fcf8 	bl	800e108 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	3308      	adds	r3, #8
 800c71c:	2206      	movs	r2, #6
 800c71e:	6839      	ldr	r1, [r7, #0]
 800c720:	4618      	mov	r0, r3
 800c722:	f001 fdcc 	bl	800e2be <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	3312      	adds	r3, #18
 800c72a:	2206      	movs	r2, #6
 800c72c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c72e:	4618      	mov	r0, r3
 800c730:	f001 fdc5 	bl	800e2be <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	330e      	adds	r3, #14
 800c738:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c73a:	6812      	ldr	r2, [r2, #0]
 800c73c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	3318      	adds	r3, #24
 800c742:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c744:	6812      	ldr	r2, [r2, #0]
 800c746:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	2200      	movs	r2, #0
 800c74c:	701a      	strb	r2, [r3, #0]
 800c74e:	2200      	movs	r2, #0
 800c750:	f042 0201 	orr.w	r2, r2, #1
 800c754:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	2200      	movs	r2, #0
 800c75a:	f042 0208 	orr.w	r2, r2, #8
 800c75e:	709a      	strb	r2, [r3, #2]
 800c760:	2200      	movs	r2, #0
 800c762:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	2206      	movs	r2, #6
 800c768:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	2204      	movs	r2, #4
 800c76e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c770:	f640 0306 	movw	r3, #2054	@ 0x806
 800c774:	9300      	str	r3, [sp, #0]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	68ba      	ldr	r2, [r7, #8]
 800c77a:	69b9      	ldr	r1, [r7, #24]
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f001 fb7b 	bl	800de78 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c782:	69b8      	ldr	r0, [r7, #24]
 800c784:	f7f8 ff02 	bl	800558c <pbuf_free>
  p = NULL;
 800c788:	2300      	movs	r3, #0
 800c78a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c78c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c790:	4618      	mov	r0, r3
 800c792:	3720      	adds	r7, #32
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	08011250 	.word	0x08011250
 800c79c:	080113a0 	.word	0x080113a0
 800c7a0:	080112c8 	.word	0x080112c8
 800c7a4:	08011450 	.word	0x08011450
 800c7a8:	08011484 	.word	0x08011484

0800c7ac <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b088      	sub	sp, #32
 800c7b0:	af04      	add	r7, sp, #16
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	9203      	str	r2, [sp, #12]
 800c7cc:	68ba      	ldr	r2, [r7, #8]
 800c7ce:	9202      	str	r2, [sp, #8]
 800c7d0:	4a06      	ldr	r2, [pc, #24]	@ (800c7ec <etharp_request_dst+0x40>)
 800c7d2:	9201      	str	r2, [sp, #4]
 800c7d4:	9300      	str	r3, [sp, #0]
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	68f8      	ldr	r0, [r7, #12]
 800c7dc:	f7ff ff5a 	bl	800c694 <etharp_raw>
 800c7e0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	08011a0c 	.word	0x08011a0c

0800c7f0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c7fa:	4a05      	ldr	r2, [pc, #20]	@ (800c810 <etharp_request+0x20>)
 800c7fc:	6839      	ldr	r1, [r7, #0]
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f7ff ffd4 	bl	800c7ac <etharp_request_dst>
 800c804:	4603      	mov	r3, r0
}
 800c806:	4618      	mov	r0, r3
 800c808:	3708      	adds	r7, #8
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	08011a04 	.word	0x08011a04

0800c814 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b08e      	sub	sp, #56	@ 0x38
 800c818:	af04      	add	r7, sp, #16
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c81e:	4b79      	ldr	r3, [pc, #484]	@ (800ca04 <icmp_input+0x1f0>)
 800c820:	689b      	ldr	r3, [r3, #8]
 800c822:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800c824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	f003 030f 	and.w	r3, r3, #15
 800c82c:	b2db      	uxtb	r3, r3
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	b2db      	uxtb	r3, r3
 800c832:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800c834:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c836:	2b13      	cmp	r3, #19
 800c838:	f240 80cd 	bls.w	800c9d6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	895b      	ldrh	r3, [r3, #10]
 800c840:	2b03      	cmp	r3, #3
 800c842:	f240 80ca 	bls.w	800c9da <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c850:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c854:	2b00      	cmp	r3, #0
 800c856:	f000 80b7 	beq.w	800c9c8 <icmp_input+0x1b4>
 800c85a:	2b08      	cmp	r3, #8
 800c85c:	f040 80b7 	bne.w	800c9ce <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800c860:	4b69      	ldr	r3, [pc, #420]	@ (800ca08 <icmp_input+0x1f4>)
 800c862:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c864:	4b67      	ldr	r3, [pc, #412]	@ (800ca04 <icmp_input+0x1f0>)
 800c866:	695b      	ldr	r3, [r3, #20]
 800c868:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c86c:	2be0      	cmp	r3, #224	@ 0xe0
 800c86e:	f000 80bb 	beq.w	800c9e8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c872:	4b64      	ldr	r3, [pc, #400]	@ (800ca04 <icmp_input+0x1f0>)
 800c874:	695b      	ldr	r3, [r3, #20]
 800c876:	4a63      	ldr	r2, [pc, #396]	@ (800ca04 <icmp_input+0x1f0>)
 800c878:	6812      	ldr	r2, [r2, #0]
 800c87a:	4611      	mov	r1, r2
 800c87c:	4618      	mov	r0, r3
 800c87e:	f000 fbed 	bl	800d05c <ip4_addr_isbroadcast_u32>
 800c882:	4603      	mov	r3, r0
 800c884:	2b00      	cmp	r3, #0
 800c886:	f040 80b1 	bne.w	800c9ec <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	891b      	ldrh	r3, [r3, #8]
 800c88e:	2b07      	cmp	r3, #7
 800c890:	f240 80a5 	bls.w	800c9de <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c894:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c896:	330e      	adds	r3, #14
 800c898:	4619      	mov	r1, r3
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f7f8 fde0 	bl	8005460 <pbuf_add_header>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d04b      	beq.n	800c93e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	891a      	ldrh	r2, [r3, #8]
 800c8aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c8ac:	4413      	add	r3, r2
 800c8ae:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	891b      	ldrh	r3, [r3, #8]
 800c8b4:	8b7a      	ldrh	r2, [r7, #26]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	f0c0 809a 	bcc.w	800c9f0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800c8bc:	8b7b      	ldrh	r3, [r7, #26]
 800c8be:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	200e      	movs	r0, #14
 800c8c6:	f7f8 fb7d 	bl	8004fc4 <pbuf_alloc>
 800c8ca:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	f000 8090 	beq.w	800c9f4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	895b      	ldrh	r3, [r3, #10]
 800c8d8:	461a      	mov	r2, r3
 800c8da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c8dc:	3308      	adds	r3, #8
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d203      	bcs.n	800c8ea <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800c8e2:	6978      	ldr	r0, [r7, #20]
 800c8e4:	f7f8 fe52 	bl	800558c <pbuf_free>
          goto icmperr;
 800c8e8:	e085      	b.n	800c9f6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c8f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f001 fce3 	bl	800e2be <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800c8f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	6978      	ldr	r0, [r7, #20]
 800c8fe:	f7f8 fdbf 	bl	8005480 <pbuf_remove_header>
 800c902:	4603      	mov	r3, r0
 800c904:	2b00      	cmp	r3, #0
 800c906:	d009      	beq.n	800c91c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c908:	4b40      	ldr	r3, [pc, #256]	@ (800ca0c <icmp_input+0x1f8>)
 800c90a:	22b6      	movs	r2, #182	@ 0xb6
 800c90c:	4940      	ldr	r1, [pc, #256]	@ (800ca10 <icmp_input+0x1fc>)
 800c90e:	4841      	ldr	r0, [pc, #260]	@ (800ca14 <icmp_input+0x200>)
 800c910:	f001 fbfa 	bl	800e108 <iprintf>
          pbuf_free(r);
 800c914:	6978      	ldr	r0, [r7, #20]
 800c916:	f7f8 fe39 	bl	800558c <pbuf_free>
          goto icmperr;
 800c91a:	e06c      	b.n	800c9f6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800c91c:	6879      	ldr	r1, [r7, #4]
 800c91e:	6978      	ldr	r0, [r7, #20]
 800c920:	f7f8 ff5c 	bl	80057dc <pbuf_copy>
 800c924:	4603      	mov	r3, r0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d003      	beq.n	800c932 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800c92a:	6978      	ldr	r0, [r7, #20]
 800c92c:	f7f8 fe2e 	bl	800558c <pbuf_free>
          goto icmperr;
 800c930:	e061      	b.n	800c9f6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f7f8 fe2a 	bl	800558c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	607b      	str	r3, [r7, #4]
 800c93c:	e00f      	b.n	800c95e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c93e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c940:	330e      	adds	r3, #14
 800c942:	4619      	mov	r1, r3
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f7f8 fd9b 	bl	8005480 <pbuf_remove_header>
 800c94a:	4603      	mov	r3, r0
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d006      	beq.n	800c95e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c950:	4b2e      	ldr	r3, [pc, #184]	@ (800ca0c <icmp_input+0x1f8>)
 800c952:	22c7      	movs	r2, #199	@ 0xc7
 800c954:	4930      	ldr	r1, [pc, #192]	@ (800ca18 <icmp_input+0x204>)
 800c956:	482f      	ldr	r0, [pc, #188]	@ (800ca14 <icmp_input+0x200>)
 800c958:	f001 fbd6 	bl	800e108 <iprintf>
          goto icmperr;
 800c95c:	e04b      	b.n	800c9f6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800c964:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c966:	4619      	mov	r1, r3
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f7f8 fd79 	bl	8005460 <pbuf_add_header>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d12b      	bne.n	800c9cc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c982:	4b20      	ldr	r3, [pc, #128]	@ (800ca04 <icmp_input+0x1f0>)
 800c984:	691a      	ldr	r2, [r3, #16]
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	2200      	movs	r2, #0
 800c98e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	2200      	movs	r2, #0
 800c994:	709a      	strb	r2, [r3, #2]
 800c996:	2200      	movs	r2, #0
 800c998:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	22ff      	movs	r2, #255	@ 0xff
 800c99e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	729a      	strb	r2, [r3, #10]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	9302      	str	r3, [sp, #8]
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	9301      	str	r3, [sp, #4]
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	9300      	str	r3, [sp, #0]
 800c9b6:	23ff      	movs	r3, #255	@ 0xff
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	69f9      	ldr	r1, [r7, #28]
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f000 fa75 	bl	800ceac <ip4_output_if>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800c9c6:	e001      	b.n	800c9cc <icmp_input+0x1b8>
      break;
 800c9c8:	bf00      	nop
 800c9ca:	e000      	b.n	800c9ce <icmp_input+0x1ba>
      break;
 800c9cc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f7f8 fddc 	bl	800558c <pbuf_free>
  return;
 800c9d4:	e013      	b.n	800c9fe <icmp_input+0x1ea>
    goto lenerr;
 800c9d6:	bf00      	nop
 800c9d8:	e002      	b.n	800c9e0 <icmp_input+0x1cc>
    goto lenerr;
 800c9da:	bf00      	nop
 800c9dc:	e000      	b.n	800c9e0 <icmp_input+0x1cc>
        goto lenerr;
 800c9de:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f7f8 fdd3 	bl	800558c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c9e6:	e00a      	b.n	800c9fe <icmp_input+0x1ea>
        goto icmperr;
 800c9e8:	bf00      	nop
 800c9ea:	e004      	b.n	800c9f6 <icmp_input+0x1e2>
        goto icmperr;
 800c9ec:	bf00      	nop
 800c9ee:	e002      	b.n	800c9f6 <icmp_input+0x1e2>
          goto icmperr;
 800c9f0:	bf00      	nop
 800c9f2:	e000      	b.n	800c9f6 <icmp_input+0x1e2>
          goto icmperr;
 800c9f4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f7f8 fdc8 	bl	800558c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c9fc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c9fe:	3728      	adds	r7, #40	@ 0x28
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	20004d20 	.word	0x20004d20
 800ca08:	20004d34 	.word	0x20004d34
 800ca0c:	080114c8 	.word	0x080114c8
 800ca10:	08011500 	.word	0x08011500
 800ca14:	08011538 	.word	0x08011538
 800ca18:	08011560 	.word	0x08011560

0800ca1c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	460b      	mov	r3, r1
 800ca26:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ca28:	78fb      	ldrb	r3, [r7, #3]
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	2103      	movs	r1, #3
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 f814 	bl	800ca5c <icmp_send_response>
}
 800ca34:	bf00      	nop
 800ca36:	3708      	adds	r7, #8
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	460b      	mov	r3, r1
 800ca46:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ca48:	78fb      	ldrb	r3, [r7, #3]
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	210b      	movs	r1, #11
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 f804 	bl	800ca5c <icmp_send_response>
}
 800ca54:	bf00      	nop
 800ca56:	3708      	adds	r7, #8
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b08c      	sub	sp, #48	@ 0x30
 800ca60:	af04      	add	r7, sp, #16
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	460b      	mov	r3, r1
 800ca66:	70fb      	strb	r3, [r7, #3]
 800ca68:	4613      	mov	r3, r2
 800ca6a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ca6c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ca70:	2124      	movs	r1, #36	@ 0x24
 800ca72:	2022      	movs	r0, #34	@ 0x22
 800ca74:	f7f8 faa6 	bl	8004fc4 <pbuf_alloc>
 800ca78:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ca7a:	69fb      	ldr	r3, [r7, #28]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d04c      	beq.n	800cb1a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ca80:	69fb      	ldr	r3, [r7, #28]
 800ca82:	895b      	ldrh	r3, [r3, #10]
 800ca84:	2b23      	cmp	r3, #35	@ 0x23
 800ca86:	d806      	bhi.n	800ca96 <icmp_send_response+0x3a>
 800ca88:	4b26      	ldr	r3, [pc, #152]	@ (800cb24 <icmp_send_response+0xc8>)
 800ca8a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800ca8e:	4926      	ldr	r1, [pc, #152]	@ (800cb28 <icmp_send_response+0xcc>)
 800ca90:	4826      	ldr	r0, [pc, #152]	@ (800cb2c <icmp_send_response+0xd0>)
 800ca92:	f001 fb39 	bl	800e108 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ca9c:	69fb      	ldr	r3, [r7, #28]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	78fa      	ldrb	r2, [r7, #3]
 800caa6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	78ba      	ldrb	r2, [r7, #2]
 800caac:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	2200      	movs	r2, #0
 800cab2:	711a      	strb	r2, [r3, #4]
 800cab4:	2200      	movs	r2, #0
 800cab6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	2200      	movs	r2, #0
 800cabc:	719a      	strb	r2, [r3, #6]
 800cabe:	2200      	movs	r2, #0
 800cac0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800cac2:	69fb      	ldr	r3, [r7, #28]
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	f103 0008 	add.w	r0, r3, #8
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	221c      	movs	r2, #28
 800cad0:	4619      	mov	r1, r3
 800cad2:	f001 fbf4 	bl	800e2be <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800cad6:	69bb      	ldr	r3, [r7, #24]
 800cad8:	68db      	ldr	r3, [r3, #12]
 800cada:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800cadc:	f107 030c 	add.w	r3, r7, #12
 800cae0:	4618      	mov	r0, r3
 800cae2:	f000 f825 	bl	800cb30 <ip4_route>
 800cae6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d011      	beq.n	800cb12 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	2200      	movs	r2, #0
 800caf2:	709a      	strb	r2, [r3, #2]
 800caf4:	2200      	movs	r2, #0
 800caf6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800caf8:	f107 020c 	add.w	r2, r7, #12
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	9302      	str	r3, [sp, #8]
 800cb00:	2301      	movs	r3, #1
 800cb02:	9301      	str	r3, [sp, #4]
 800cb04:	2300      	movs	r3, #0
 800cb06:	9300      	str	r3, [sp, #0]
 800cb08:	23ff      	movs	r3, #255	@ 0xff
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	69f8      	ldr	r0, [r7, #28]
 800cb0e:	f000 f9cd 	bl	800ceac <ip4_output_if>
  }
  pbuf_free(q);
 800cb12:	69f8      	ldr	r0, [r7, #28]
 800cb14:	f7f8 fd3a 	bl	800558c <pbuf_free>
 800cb18:	e000      	b.n	800cb1c <icmp_send_response+0xc0>
    return;
 800cb1a:	bf00      	nop
}
 800cb1c:	3720      	adds	r7, #32
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	080114c8 	.word	0x080114c8
 800cb28:	08011594 	.word	0x08011594
 800cb2c:	08011538 	.word	0x08011538

0800cb30 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b085      	sub	sp, #20
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800cb38:	4b33      	ldr	r3, [pc, #204]	@ (800cc08 <ip4_route+0xd8>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	60fb      	str	r3, [r7, #12]
 800cb3e:	e036      	b.n	800cbae <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cb46:	f003 0301 	and.w	r3, r3, #1
 800cb4a:	b2db      	uxtb	r3, r3
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d02b      	beq.n	800cba8 <ip4_route+0x78>
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cb56:	089b      	lsrs	r3, r3, #2
 800cb58:	f003 0301 	and.w	r3, r3, #1
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d022      	beq.n	800cba8 <ip4_route+0x78>
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	3304      	adds	r3, #4
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d01d      	beq.n	800cba8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681a      	ldr	r2, [r3, #0]
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	3304      	adds	r3, #4
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	405a      	eors	r2, r3
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	3308      	adds	r3, #8
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4013      	ands	r3, r2
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d101      	bne.n	800cb88 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	e038      	b.n	800cbfa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cb8e:	f003 0302 	and.w	r3, r3, #2
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d108      	bne.n	800cba8 <ip4_route+0x78>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	330c      	adds	r3, #12
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d101      	bne.n	800cba8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	e028      	b.n	800cbfa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	60fb      	str	r3, [r7, #12]
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d1c5      	bne.n	800cb40 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cbb4:	4b15      	ldr	r3, [pc, #84]	@ (800cc0c <ip4_route+0xdc>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d01a      	beq.n	800cbf2 <ip4_route+0xc2>
 800cbbc:	4b13      	ldr	r3, [pc, #76]	@ (800cc0c <ip4_route+0xdc>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cbc4:	f003 0301 	and.w	r3, r3, #1
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d012      	beq.n	800cbf2 <ip4_route+0xc2>
 800cbcc:	4b0f      	ldr	r3, [pc, #60]	@ (800cc0c <ip4_route+0xdc>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cbd4:	f003 0304 	and.w	r3, r3, #4
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d00a      	beq.n	800cbf2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cbdc:	4b0b      	ldr	r3, [pc, #44]	@ (800cc0c <ip4_route+0xdc>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	3304      	adds	r3, #4
 800cbe2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d004      	beq.n	800cbf2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	2b7f      	cmp	r3, #127	@ 0x7f
 800cbf0:	d101      	bne.n	800cbf6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	e001      	b.n	800cbfa <ip4_route+0xca>
  }

  return netif_default;
 800cbf6:	4b05      	ldr	r3, [pc, #20]	@ (800cc0c <ip4_route+0xdc>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3714      	adds	r7, #20
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr
 800cc06:	bf00      	nop
 800cc08:	20008284 	.word	0x20008284
 800cc0c:	20008288 	.word	0x20008288

0800cc10 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cc1e:	f003 0301 	and.w	r3, r3, #1
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d016      	beq.n	800cc56 <ip4_input_accept+0x46>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	3304      	adds	r3, #4
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d011      	beq.n	800cc56 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cc32:	4b0b      	ldr	r3, [pc, #44]	@ (800cc60 <ip4_input_accept+0x50>)
 800cc34:	695a      	ldr	r2, [r3, #20]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	3304      	adds	r3, #4
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d008      	beq.n	800cc52 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800cc40:	4b07      	ldr	r3, [pc, #28]	@ (800cc60 <ip4_input_accept+0x50>)
 800cc42:	695b      	ldr	r3, [r3, #20]
 800cc44:	6879      	ldr	r1, [r7, #4]
 800cc46:	4618      	mov	r0, r3
 800cc48:	f000 fa08 	bl	800d05c <ip4_addr_isbroadcast_u32>
 800cc4c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d001      	beq.n	800cc56 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800cc52:	2301      	movs	r3, #1
 800cc54:	e000      	b.n	800cc58 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800cc56:	2300      	movs	r3, #0
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3708      	adds	r7, #8
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}
 800cc60:	20004d20 	.word	0x20004d20

0800cc64 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b086      	sub	sp, #24
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	091b      	lsrs	r3, r3, #4
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	2b04      	cmp	r3, #4
 800cc7e:	d004      	beq.n	800cc8a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f7f8 fc83 	bl	800558c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800cc86:	2300      	movs	r3, #0
 800cc88:	e107      	b.n	800ce9a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	f003 030f 	and.w	r3, r3, #15
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	b2db      	uxtb	r3, r3
 800cc98:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	885b      	ldrh	r3, [r3, #2]
 800cc9e:	b29b      	uxth	r3, r3
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7f7 f935 	bl	8003f10 <lwip_htons>
 800cca6:	4603      	mov	r3, r0
 800cca8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	891b      	ldrh	r3, [r3, #8]
 800ccae:	89ba      	ldrh	r2, [r7, #12]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d204      	bcs.n	800ccbe <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800ccb4:	89bb      	ldrh	r3, [r7, #12]
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f7f8 fae1 	bl	8005280 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	895b      	ldrh	r3, [r3, #10]
 800ccc2:	89fa      	ldrh	r2, [r7, #14]
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d807      	bhi.n	800ccd8 <ip4_input+0x74>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	891b      	ldrh	r3, [r3, #8]
 800cccc:	89ba      	ldrh	r2, [r7, #12]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d802      	bhi.n	800ccd8 <ip4_input+0x74>
 800ccd2:	89fb      	ldrh	r3, [r7, #14]
 800ccd4:	2b13      	cmp	r3, #19
 800ccd6:	d804      	bhi.n	800cce2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f7f8 fc57 	bl	800558c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ccde:	2300      	movs	r3, #0
 800cce0:	e0db      	b.n	800ce9a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	691b      	ldr	r3, [r3, #16]
 800cce6:	4a6f      	ldr	r2, [pc, #444]	@ (800cea4 <ip4_input+0x240>)
 800cce8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	68db      	ldr	r3, [r3, #12]
 800ccee:	4a6d      	ldr	r2, [pc, #436]	@ (800cea4 <ip4_input+0x240>)
 800ccf0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ccf2:	4b6c      	ldr	r3, [pc, #432]	@ (800cea4 <ip4_input+0x240>)
 800ccf4:	695b      	ldr	r3, [r3, #20]
 800ccf6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ccfa:	2be0      	cmp	r3, #224	@ 0xe0
 800ccfc:	d112      	bne.n	800cd24 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cd04:	f003 0301 	and.w	r3, r3, #1
 800cd08:	b2db      	uxtb	r3, r3
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d007      	beq.n	800cd1e <ip4_input+0xba>
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	3304      	adds	r3, #4
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d002      	beq.n	800cd1e <ip4_input+0xba>
      netif = inp;
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	613b      	str	r3, [r7, #16]
 800cd1c:	e02a      	b.n	800cd74 <ip4_input+0x110>
    } else {
      netif = NULL;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	613b      	str	r3, [r7, #16]
 800cd22:	e027      	b.n	800cd74 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800cd24:	6838      	ldr	r0, [r7, #0]
 800cd26:	f7ff ff73 	bl	800cc10 <ip4_input_accept>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d002      	beq.n	800cd36 <ip4_input+0xd2>
      netif = inp;
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	613b      	str	r3, [r7, #16]
 800cd34:	e01e      	b.n	800cd74 <ip4_input+0x110>
    } else {
      netif = NULL;
 800cd36:	2300      	movs	r3, #0
 800cd38:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800cd3a:	4b5a      	ldr	r3, [pc, #360]	@ (800cea4 <ip4_input+0x240>)
 800cd3c:	695b      	ldr	r3, [r3, #20]
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	2b7f      	cmp	r3, #127	@ 0x7f
 800cd42:	d017      	beq.n	800cd74 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800cd44:	4b58      	ldr	r3, [pc, #352]	@ (800cea8 <ip4_input+0x244>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	613b      	str	r3, [r7, #16]
 800cd4a:	e00e      	b.n	800cd6a <ip4_input+0x106>
          if (netif == inp) {
 800cd4c:	693a      	ldr	r2, [r7, #16]
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d006      	beq.n	800cd62 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800cd54:	6938      	ldr	r0, [r7, #16]
 800cd56:	f7ff ff5b 	bl	800cc10 <ip4_input_accept>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d108      	bne.n	800cd72 <ip4_input+0x10e>
 800cd60:	e000      	b.n	800cd64 <ip4_input+0x100>
            continue;
 800cd62:	bf00      	nop
        NETIF_FOREACH(netif) {
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	613b      	str	r3, [r7, #16]
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d1ed      	bne.n	800cd4c <ip4_input+0xe8>
 800cd70:	e000      	b.n	800cd74 <ip4_input+0x110>
            break;
 800cd72:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cd74:	4b4b      	ldr	r3, [pc, #300]	@ (800cea4 <ip4_input+0x240>)
 800cd76:	691b      	ldr	r3, [r3, #16]
 800cd78:	6839      	ldr	r1, [r7, #0]
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f000 f96e 	bl	800d05c <ip4_addr_isbroadcast_u32>
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d105      	bne.n	800cd92 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800cd86:	4b47      	ldr	r3, [pc, #284]	@ (800cea4 <ip4_input+0x240>)
 800cd88:	691b      	ldr	r3, [r3, #16]
 800cd8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cd8e:	2be0      	cmp	r3, #224	@ 0xe0
 800cd90:	d104      	bne.n	800cd9c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f7f8 fbfa 	bl	800558c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	e07e      	b.n	800ce9a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d104      	bne.n	800cdac <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f7f8 fbf2 	bl	800558c <pbuf_free>
    return ERR_OK;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	e076      	b.n	800ce9a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	88db      	ldrh	r3, [r3, #6]
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800cdb8:	4013      	ands	r3, r2
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00b      	beq.n	800cdd6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 fc92 	bl	800d6e8 <ip4_reass>
 800cdc4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d101      	bne.n	800cdd0 <ip4_input+0x16c>
      return ERR_OK;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	e064      	b.n	800ce9a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800cdd6:	4a33      	ldr	r2, [pc, #204]	@ (800cea4 <ip4_input+0x240>)
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800cddc:	4a31      	ldr	r2, [pc, #196]	@ (800cea4 <ip4_input+0x240>)
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800cde2:	4a30      	ldr	r2, [pc, #192]	@ (800cea4 <ip4_input+0x240>)
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	f003 030f 	and.w	r3, r3, #15
 800cdf0:	b2db      	uxtb	r3, r3
 800cdf2:	009b      	lsls	r3, r3, #2
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	4b2a      	ldr	r3, [pc, #168]	@ (800cea4 <ip4_input+0x240>)
 800cdfa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800cdfc:	89fb      	ldrh	r3, [r7, #14]
 800cdfe:	4619      	mov	r1, r3
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f7f8 fb3d 	bl	8005480 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	7a5b      	ldrb	r3, [r3, #9]
 800ce0a:	2b11      	cmp	r3, #17
 800ce0c:	d006      	beq.n	800ce1c <ip4_input+0x1b8>
 800ce0e:	2b11      	cmp	r3, #17
 800ce10:	dc13      	bgt.n	800ce3a <ip4_input+0x1d6>
 800ce12:	2b01      	cmp	r3, #1
 800ce14:	d00c      	beq.n	800ce30 <ip4_input+0x1cc>
 800ce16:	2b06      	cmp	r3, #6
 800ce18:	d005      	beq.n	800ce26 <ip4_input+0x1c2>
 800ce1a:	e00e      	b.n	800ce3a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800ce1c:	6839      	ldr	r1, [r7, #0]
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f7fe f9f2 	bl	800b208 <udp_input>
        break;
 800ce24:	e026      	b.n	800ce74 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800ce26:	6839      	ldr	r1, [r7, #0]
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f7fa fa7b 	bl	8007324 <tcp_input>
        break;
 800ce2e:	e021      	b.n	800ce74 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800ce30:	6839      	ldr	r1, [r7, #0]
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f7ff fcee 	bl	800c814 <icmp_input>
        break;
 800ce38:	e01c      	b.n	800ce74 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ce3a:	4b1a      	ldr	r3, [pc, #104]	@ (800cea4 <ip4_input+0x240>)
 800ce3c:	695b      	ldr	r3, [r3, #20]
 800ce3e:	6939      	ldr	r1, [r7, #16]
 800ce40:	4618      	mov	r0, r3
 800ce42:	f000 f90b 	bl	800d05c <ip4_addr_isbroadcast_u32>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d10f      	bne.n	800ce6c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ce4c:	4b15      	ldr	r3, [pc, #84]	@ (800cea4 <ip4_input+0x240>)
 800ce4e:	695b      	ldr	r3, [r3, #20]
 800ce50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ce54:	2be0      	cmp	r3, #224	@ 0xe0
 800ce56:	d009      	beq.n	800ce6c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ce58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f7f8 fb81 	bl	8005566 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ce64:	2102      	movs	r1, #2
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f7ff fdd8 	bl	800ca1c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f7f8 fb8d 	bl	800558c <pbuf_free>
        break;
 800ce72:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ce74:	4b0b      	ldr	r3, [pc, #44]	@ (800cea4 <ip4_input+0x240>)
 800ce76:	2200      	movs	r2, #0
 800ce78:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ce7a:	4b0a      	ldr	r3, [pc, #40]	@ (800cea4 <ip4_input+0x240>)
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ce80:	4b08      	ldr	r3, [pc, #32]	@ (800cea4 <ip4_input+0x240>)
 800ce82:	2200      	movs	r2, #0
 800ce84:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ce86:	4b07      	ldr	r3, [pc, #28]	@ (800cea4 <ip4_input+0x240>)
 800ce88:	2200      	movs	r2, #0
 800ce8a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ce8c:	4b05      	ldr	r3, [pc, #20]	@ (800cea4 <ip4_input+0x240>)
 800ce8e:	2200      	movs	r2, #0
 800ce90:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ce92:	4b04      	ldr	r3, [pc, #16]	@ (800cea4 <ip4_input+0x240>)
 800ce94:	2200      	movs	r2, #0
 800ce96:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ce98:	2300      	movs	r3, #0
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3718      	adds	r7, #24
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	20004d20 	.word	0x20004d20
 800cea8:	20008284 	.word	0x20008284

0800ceac <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b08a      	sub	sp, #40	@ 0x28
 800ceb0:	af04      	add	r7, sp, #16
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	60b9      	str	r1, [r7, #8]
 800ceb6:	607a      	str	r2, [r7, #4]
 800ceb8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d009      	beq.n	800ced8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d003      	beq.n	800ced2 <ip4_output_if+0x26>
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d102      	bne.n	800ced8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800ced2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ced4:	3304      	adds	r3, #4
 800ced6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ced8:	78fa      	ldrb	r2, [r7, #3]
 800ceda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cedc:	9302      	str	r3, [sp, #8]
 800cede:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cee2:	9301      	str	r3, [sp, #4]
 800cee4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cee8:	9300      	str	r3, [sp, #0]
 800ceea:	4613      	mov	r3, r2
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	6979      	ldr	r1, [r7, #20]
 800cef0:	68f8      	ldr	r0, [r7, #12]
 800cef2:	f000 f805 	bl	800cf00 <ip4_output_if_src>
 800cef6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3718      	adds	r7, #24
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b088      	sub	sp, #32
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	60b9      	str	r1, [r7, #8]
 800cf0a:	607a      	str	r2, [r7, #4]
 800cf0c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	7b9b      	ldrb	r3, [r3, #14]
 800cf12:	2b01      	cmp	r3, #1
 800cf14:	d006      	beq.n	800cf24 <ip4_output_if_src+0x24>
 800cf16:	4b4b      	ldr	r3, [pc, #300]	@ (800d044 <ip4_output_if_src+0x144>)
 800cf18:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800cf1c:	494a      	ldr	r1, [pc, #296]	@ (800d048 <ip4_output_if_src+0x148>)
 800cf1e:	484b      	ldr	r0, [pc, #300]	@ (800d04c <ip4_output_if_src+0x14c>)
 800cf20:	f001 f8f2 	bl	800e108 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d060      	beq.n	800cfec <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800cf2a:	2314      	movs	r3, #20
 800cf2c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800cf2e:	2114      	movs	r1, #20
 800cf30:	68f8      	ldr	r0, [r7, #12]
 800cf32:	f7f8 fa95 	bl	8005460 <pbuf_add_header>
 800cf36:	4603      	mov	r3, r0
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d002      	beq.n	800cf42 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800cf3c:	f06f 0301 	mvn.w	r3, #1
 800cf40:	e07c      	b.n	800d03c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	895b      	ldrh	r3, [r3, #10]
 800cf4c:	2b13      	cmp	r3, #19
 800cf4e:	d806      	bhi.n	800cf5e <ip4_output_if_src+0x5e>
 800cf50:	4b3c      	ldr	r3, [pc, #240]	@ (800d044 <ip4_output_if_src+0x144>)
 800cf52:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800cf56:	493e      	ldr	r1, [pc, #248]	@ (800d050 <ip4_output_if_src+0x150>)
 800cf58:	483c      	ldr	r0, [pc, #240]	@ (800d04c <ip4_output_if_src+0x14c>)
 800cf5a:	f001 f8d5 	bl	800e108 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800cf5e:	69fb      	ldr	r3, [r7, #28]
 800cf60:	78fa      	ldrb	r2, [r7, #3]
 800cf62:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800cf64:	69fb      	ldr	r3, [r7, #28]
 800cf66:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800cf6a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	69fb      	ldr	r3, [r7, #28]
 800cf72:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800cf74:	8b7b      	ldrh	r3, [r7, #26]
 800cf76:	089b      	lsrs	r3, r3, #2
 800cf78:	b29b      	uxth	r3, r3
 800cf7a:	b2db      	uxtb	r3, r3
 800cf7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf80:	b2da      	uxtb	r2, r3
 800cf82:	69fb      	ldr	r3, [r7, #28]
 800cf84:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800cf86:	69fb      	ldr	r3, [r7, #28]
 800cf88:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800cf8c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	891b      	ldrh	r3, [r3, #8]
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7f6 ffbc 	bl	8003f10 <lwip_htons>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800cfa0:	69fb      	ldr	r3, [r7, #28]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	719a      	strb	r2, [r3, #6]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800cfaa:	4b2a      	ldr	r3, [pc, #168]	@ (800d054 <ip4_output_if_src+0x154>)
 800cfac:	881b      	ldrh	r3, [r3, #0]
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7f6 ffae 	bl	8003f10 <lwip_htons>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	69fb      	ldr	r3, [r7, #28]
 800cfba:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800cfbc:	4b25      	ldr	r3, [pc, #148]	@ (800d054 <ip4_output_if_src+0x154>)
 800cfbe:	881b      	ldrh	r3, [r3, #0]
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	b29a      	uxth	r2, r3
 800cfc4:	4b23      	ldr	r3, [pc, #140]	@ (800d054 <ip4_output_if_src+0x154>)
 800cfc6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d104      	bne.n	800cfd8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800cfce:	4b22      	ldr	r3, [pc, #136]	@ (800d058 <ip4_output_if_src+0x158>)
 800cfd0:	681a      	ldr	r2, [r3, #0]
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	60da      	str	r2, [r3, #12]
 800cfd6:	e003      	b.n	800cfe0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800cfe0:	69fb      	ldr	r3, [r7, #28]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	729a      	strb	r2, [r3, #10]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	72da      	strb	r2, [r3, #11]
 800cfea:	e00f      	b.n	800d00c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	895b      	ldrh	r3, [r3, #10]
 800cff0:	2b13      	cmp	r3, #19
 800cff2:	d802      	bhi.n	800cffa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800cff4:	f06f 0301 	mvn.w	r3, #1
 800cff8:	e020      	b.n	800d03c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d000:	69fb      	ldr	r3, [r7, #28]
 800d002:	691b      	ldr	r3, [r3, #16]
 800d004:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d006:	f107 0314 	add.w	r3, r7, #20
 800d00a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d00e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d010:	2b00      	cmp	r3, #0
 800d012:	d00c      	beq.n	800d02e <ip4_output_if_src+0x12e>
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	891a      	ldrh	r2, [r3, #8]
 800d018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d01a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d906      	bls.n	800d02e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d024:	68f8      	ldr	r0, [r7, #12]
 800d026:	f000 fd53 	bl	800dad0 <ip4_frag>
 800d02a:	4603      	mov	r3, r0
 800d02c:	e006      	b.n	800d03c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d030:	695b      	ldr	r3, [r3, #20]
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	68f9      	ldr	r1, [r7, #12]
 800d036:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d038:	4798      	blx	r3
 800d03a:	4603      	mov	r3, r0
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3720      	adds	r7, #32
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}
 800d044:	080115c0 	.word	0x080115c0
 800d048:	080115f4 	.word	0x080115f4
 800d04c:	08011600 	.word	0x08011600
 800d050:	08011628 	.word	0x08011628
 800d054:	200083e2 	.word	0x200083e2
 800d058:	08011a00 	.word	0x08011a00

0800d05c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b085      	sub	sp, #20
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d070:	d002      	beq.n	800d078 <ip4_addr_isbroadcast_u32+0x1c>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d101      	bne.n	800d07c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d078:	2301      	movs	r3, #1
 800d07a:	e02a      	b.n	800d0d2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d082:	f003 0302 	and.w	r3, r3, #2
 800d086:	2b00      	cmp	r3, #0
 800d088:	d101      	bne.n	800d08e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d08a:	2300      	movs	r3, #0
 800d08c:	e021      	b.n	800d0d2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	3304      	adds	r3, #4
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	429a      	cmp	r2, r3
 800d098:	d101      	bne.n	800d09e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d09a:	2300      	movs	r3, #0
 800d09c:	e019      	b.n	800d0d2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d09e:	68fa      	ldr	r2, [r7, #12]
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	3304      	adds	r3, #4
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	405a      	eors	r2, r3
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	3308      	adds	r3, #8
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4013      	ands	r3, r2
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d10d      	bne.n	800d0d0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	3308      	adds	r3, #8
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	43da      	mvns	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	3308      	adds	r3, #8
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d101      	bne.n	800d0d0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	e000      	b.n	800d0d2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d0d0:	2300      	movs	r3, #0
  }
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3714      	adds	r7, #20
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0dc:	4770      	bx	lr
	...

0800d0e0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d0ea:	4b12      	ldr	r3, [pc, #72]	@ (800d134 <ip_reass_tmr+0x54>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d0f0:	e018      	b.n	800d124 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	7fdb      	ldrb	r3, [r3, #31]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d00b      	beq.n	800d112 <ip_reass_tmr+0x32>
      r->timer--;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	7fdb      	ldrb	r3, [r3, #31]
 800d0fe:	3b01      	subs	r3, #1
 800d100:	b2da      	uxtb	r2, r3
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	60fb      	str	r3, [r7, #12]
 800d110:	e008      	b.n	800d124 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d11c:	68b9      	ldr	r1, [r7, #8]
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f000 f80a 	bl	800d138 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d1e3      	bne.n	800d0f2 <ip_reass_tmr+0x12>
    }
  }
}
 800d12a:	bf00      	nop
 800d12c:	bf00      	nop
 800d12e:	3710      	adds	r7, #16
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}
 800d134:	200083e4 	.word	0x200083e4

0800d138 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b088      	sub	sp, #32
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d142:	2300      	movs	r3, #0
 800d144:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d146:	683a      	ldr	r2, [r7, #0]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d105      	bne.n	800d15a <ip_reass_free_complete_datagram+0x22>
 800d14e:	4b45      	ldr	r3, [pc, #276]	@ (800d264 <ip_reass_free_complete_datagram+0x12c>)
 800d150:	22ab      	movs	r2, #171	@ 0xab
 800d152:	4945      	ldr	r1, [pc, #276]	@ (800d268 <ip_reass_free_complete_datagram+0x130>)
 800d154:	4845      	ldr	r0, [pc, #276]	@ (800d26c <ip_reass_free_complete_datagram+0x134>)
 800d156:	f000 ffd7 	bl	800e108 <iprintf>
  if (prev != NULL) {
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00a      	beq.n	800d176 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	687a      	ldr	r2, [r7, #4]
 800d166:	429a      	cmp	r2, r3
 800d168:	d005      	beq.n	800d176 <ip_reass_free_complete_datagram+0x3e>
 800d16a:	4b3e      	ldr	r3, [pc, #248]	@ (800d264 <ip_reass_free_complete_datagram+0x12c>)
 800d16c:	22ad      	movs	r2, #173	@ 0xad
 800d16e:	4940      	ldr	r1, [pc, #256]	@ (800d270 <ip_reass_free_complete_datagram+0x138>)
 800d170:	483e      	ldr	r0, [pc, #248]	@ (800d26c <ip_reass_free_complete_datagram+0x134>)
 800d172:	f000 ffc9 	bl	800e108 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	889b      	ldrh	r3, [r3, #4]
 800d182:	b29b      	uxth	r3, r3
 800d184:	2b00      	cmp	r3, #0
 800d186:	d12a      	bne.n	800d1de <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	681a      	ldr	r2, [r3, #0]
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d196:	69bb      	ldr	r3, [r7, #24]
 800d198:	6858      	ldr	r0, [r3, #4]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	3308      	adds	r3, #8
 800d19e:	2214      	movs	r2, #20
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	f001 f88c 	bl	800e2be <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d1a6:	2101      	movs	r1, #1
 800d1a8:	69b8      	ldr	r0, [r7, #24]
 800d1aa:	f7ff fc47 	bl	800ca3c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d1ae:	69b8      	ldr	r0, [r7, #24]
 800d1b0:	f7f8 fa74 	bl	800569c <pbuf_clen>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d1b8:	8bfa      	ldrh	r2, [r7, #30]
 800d1ba:	8a7b      	ldrh	r3, [r7, #18]
 800d1bc:	4413      	add	r3, r2
 800d1be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1c2:	db05      	blt.n	800d1d0 <ip_reass_free_complete_datagram+0x98>
 800d1c4:	4b27      	ldr	r3, [pc, #156]	@ (800d264 <ip_reass_free_complete_datagram+0x12c>)
 800d1c6:	22bc      	movs	r2, #188	@ 0xbc
 800d1c8:	492a      	ldr	r1, [pc, #168]	@ (800d274 <ip_reass_free_complete_datagram+0x13c>)
 800d1ca:	4828      	ldr	r0, [pc, #160]	@ (800d26c <ip_reass_free_complete_datagram+0x134>)
 800d1cc:	f000 ff9c 	bl	800e108 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d1d0:	8bfa      	ldrh	r2, [r7, #30]
 800d1d2:	8a7b      	ldrh	r3, [r7, #18]
 800d1d4:	4413      	add	r3, r2
 800d1d6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d1d8:	69b8      	ldr	r0, [r7, #24]
 800d1da:	f7f8 f9d7 	bl	800558c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	685b      	ldr	r3, [r3, #4]
 800d1e2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d1e4:	e01f      	b.n	800d226 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d1e6:	69bb      	ldr	r3, [r7, #24]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d1f6:	68f8      	ldr	r0, [r7, #12]
 800d1f8:	f7f8 fa50 	bl	800569c <pbuf_clen>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d200:	8bfa      	ldrh	r2, [r7, #30]
 800d202:	8a7b      	ldrh	r3, [r7, #18]
 800d204:	4413      	add	r3, r2
 800d206:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d20a:	db05      	blt.n	800d218 <ip_reass_free_complete_datagram+0xe0>
 800d20c:	4b15      	ldr	r3, [pc, #84]	@ (800d264 <ip_reass_free_complete_datagram+0x12c>)
 800d20e:	22cc      	movs	r2, #204	@ 0xcc
 800d210:	4918      	ldr	r1, [pc, #96]	@ (800d274 <ip_reass_free_complete_datagram+0x13c>)
 800d212:	4816      	ldr	r0, [pc, #88]	@ (800d26c <ip_reass_free_complete_datagram+0x134>)
 800d214:	f000 ff78 	bl	800e108 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d218:	8bfa      	ldrh	r2, [r7, #30]
 800d21a:	8a7b      	ldrh	r3, [r7, #18]
 800d21c:	4413      	add	r3, r2
 800d21e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d220:	68f8      	ldr	r0, [r7, #12]
 800d222:	f7f8 f9b3 	bl	800558c <pbuf_free>
  while (p != NULL) {
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d1dc      	bne.n	800d1e6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d22c:	6839      	ldr	r1, [r7, #0]
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f000 f8c2 	bl	800d3b8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d234:	4b10      	ldr	r3, [pc, #64]	@ (800d278 <ip_reass_free_complete_datagram+0x140>)
 800d236:	881b      	ldrh	r3, [r3, #0]
 800d238:	8bfa      	ldrh	r2, [r7, #30]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d905      	bls.n	800d24a <ip_reass_free_complete_datagram+0x112>
 800d23e:	4b09      	ldr	r3, [pc, #36]	@ (800d264 <ip_reass_free_complete_datagram+0x12c>)
 800d240:	22d2      	movs	r2, #210	@ 0xd2
 800d242:	490e      	ldr	r1, [pc, #56]	@ (800d27c <ip_reass_free_complete_datagram+0x144>)
 800d244:	4809      	ldr	r0, [pc, #36]	@ (800d26c <ip_reass_free_complete_datagram+0x134>)
 800d246:	f000 ff5f 	bl	800e108 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d24a:	4b0b      	ldr	r3, [pc, #44]	@ (800d278 <ip_reass_free_complete_datagram+0x140>)
 800d24c:	881a      	ldrh	r2, [r3, #0]
 800d24e:	8bfb      	ldrh	r3, [r7, #30]
 800d250:	1ad3      	subs	r3, r2, r3
 800d252:	b29a      	uxth	r2, r3
 800d254:	4b08      	ldr	r3, [pc, #32]	@ (800d278 <ip_reass_free_complete_datagram+0x140>)
 800d256:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d258:	8bfb      	ldrh	r3, [r7, #30]
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3720      	adds	r7, #32
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	08011658 	.word	0x08011658
 800d268:	08011694 	.word	0x08011694
 800d26c:	080116a0 	.word	0x080116a0
 800d270:	080116c8 	.word	0x080116c8
 800d274:	080116dc 	.word	0x080116dc
 800d278:	200083e8 	.word	0x200083e8
 800d27c:	080116fc 	.word	0x080116fc

0800d280 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b08a      	sub	sp, #40	@ 0x28
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d28a:	2300      	movs	r3, #0
 800d28c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d28e:	2300      	movs	r3, #0
 800d290:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d292:	2300      	movs	r3, #0
 800d294:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d296:	2300      	movs	r3, #0
 800d298:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d29a:	2300      	movs	r3, #0
 800d29c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d29e:	4b28      	ldr	r3, [pc, #160]	@ (800d340 <ip_reass_remove_oldest_datagram+0xc0>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800d2a4:	e030      	b.n	800d308 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a8:	695a      	ldr	r2, [r3, #20]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	68db      	ldr	r3, [r3, #12]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d10c      	bne.n	800d2cc <ip_reass_remove_oldest_datagram+0x4c>
 800d2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b4:	699a      	ldr	r2, [r3, #24]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	691b      	ldr	r3, [r3, #16]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d106      	bne.n	800d2cc <ip_reass_remove_oldest_datagram+0x4c>
 800d2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c0:	899a      	ldrh	r2, [r3, #12]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	889b      	ldrh	r3, [r3, #4]
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d014      	beq.n	800d2f6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d2d2:	6a3b      	ldr	r3, [r7, #32]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d104      	bne.n	800d2e2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2da:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d2dc:	69fb      	ldr	r3, [r7, #28]
 800d2de:	61bb      	str	r3, [r7, #24]
 800d2e0:	e009      	b.n	800d2f6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e4:	7fda      	ldrb	r2, [r3, #31]
 800d2e6:	6a3b      	ldr	r3, [r7, #32]
 800d2e8:	7fdb      	ldrb	r3, [r3, #31]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d803      	bhi.n	800d2f6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d2f2:	69fb      	ldr	r3, [r7, #28]
 800d2f4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d001      	beq.n	800d302 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d300:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800d308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d1cb      	bne.n	800d2a6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d30e:	6a3b      	ldr	r3, [r7, #32]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d008      	beq.n	800d326 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d314:	69b9      	ldr	r1, [r7, #24]
 800d316:	6a38      	ldr	r0, [r7, #32]
 800d318:	f7ff ff0e 	bl	800d138 <ip_reass_free_complete_datagram>
 800d31c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d31e:	697a      	ldr	r2, [r7, #20]
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	4413      	add	r3, r2
 800d324:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d326:	697a      	ldr	r2, [r7, #20]
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	da02      	bge.n	800d334 <ip_reass_remove_oldest_datagram+0xb4>
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	2b01      	cmp	r3, #1
 800d332:	dcac      	bgt.n	800d28e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d334:	697b      	ldr	r3, [r7, #20]
}
 800d336:	4618      	mov	r0, r3
 800d338:	3728      	adds	r7, #40	@ 0x28
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	200083e4 	.word	0x200083e4

0800d344 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d34e:	2004      	movs	r0, #4
 800d350:	f7f7 fa56 	bl	8004800 <memp_malloc>
 800d354:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d110      	bne.n	800d37e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d35c:	6839      	ldr	r1, [r7, #0]
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f7ff ff8e 	bl	800d280 <ip_reass_remove_oldest_datagram>
 800d364:	4602      	mov	r2, r0
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	4293      	cmp	r3, r2
 800d36a:	dc03      	bgt.n	800d374 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d36c:	2004      	movs	r0, #4
 800d36e:	f7f7 fa47 	bl	8004800 <memp_malloc>
 800d372:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d101      	bne.n	800d37e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d37a:	2300      	movs	r3, #0
 800d37c:	e016      	b.n	800d3ac <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d37e:	2220      	movs	r2, #32
 800d380:	2100      	movs	r1, #0
 800d382:	68f8      	ldr	r0, [r7, #12]
 800d384:	f000 ff25 	bl	800e1d2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	220f      	movs	r2, #15
 800d38c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d38e:	4b09      	ldr	r3, [pc, #36]	@ (800d3b4 <ip_reass_enqueue_new_datagram+0x70>)
 800d390:	681a      	ldr	r2, [r3, #0]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d396:	4a07      	ldr	r2, [pc, #28]	@ (800d3b4 <ip_reass_enqueue_new_datagram+0x70>)
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	3308      	adds	r3, #8
 800d3a0:	2214      	movs	r2, #20
 800d3a2:	6879      	ldr	r1, [r7, #4]
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f000 ff8a 	bl	800e2be <memcpy>
  return ipr;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3710      	adds	r7, #16
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	200083e4 	.word	0x200083e4

0800d3b8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d3c2:	4b10      	ldr	r3, [pc, #64]	@ (800d404 <ip_reass_dequeue_datagram+0x4c>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d104      	bne.n	800d3d6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4a0c      	ldr	r2, [pc, #48]	@ (800d404 <ip_reass_dequeue_datagram+0x4c>)
 800d3d2:	6013      	str	r3, [r2, #0]
 800d3d4:	e00d      	b.n	800d3f2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d106      	bne.n	800d3ea <ip_reass_dequeue_datagram+0x32>
 800d3dc:	4b0a      	ldr	r3, [pc, #40]	@ (800d408 <ip_reass_dequeue_datagram+0x50>)
 800d3de:	f240 1245 	movw	r2, #325	@ 0x145
 800d3e2:	490a      	ldr	r1, [pc, #40]	@ (800d40c <ip_reass_dequeue_datagram+0x54>)
 800d3e4:	480a      	ldr	r0, [pc, #40]	@ (800d410 <ip_reass_dequeue_datagram+0x58>)
 800d3e6:	f000 fe8f 	bl	800e108 <iprintf>
    prev->next = ipr->next;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681a      	ldr	r2, [r3, #0]
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d3f2:	6879      	ldr	r1, [r7, #4]
 800d3f4:	2004      	movs	r0, #4
 800d3f6:	f7f7 fa73 	bl	80048e0 <memp_free>
}
 800d3fa:	bf00      	nop
 800d3fc:	3708      	adds	r7, #8
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	200083e4 	.word	0x200083e4
 800d408:	08011658 	.word	0x08011658
 800d40c:	08011720 	.word	0x08011720
 800d410:	080116a0 	.word	0x080116a0

0800d414 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b08c      	sub	sp, #48	@ 0x30
 800d418:	af00      	add	r7, sp, #0
 800d41a:	60f8      	str	r0, [r7, #12]
 800d41c:	60b9      	str	r1, [r7, #8]
 800d41e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d420:	2300      	movs	r3, #0
 800d422:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d424:	2301      	movs	r3, #1
 800d426:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d42e:	69fb      	ldr	r3, [r7, #28]
 800d430:	885b      	ldrh	r3, [r3, #2]
 800d432:	b29b      	uxth	r3, r3
 800d434:	4618      	mov	r0, r3
 800d436:	f7f6 fd6b 	bl	8003f10 <lwip_htons>
 800d43a:	4603      	mov	r3, r0
 800d43c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d43e:	69fb      	ldr	r3, [r7, #28]
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	f003 030f 	and.w	r3, r3, #15
 800d446:	b2db      	uxtb	r3, r3
 800d448:	009b      	lsls	r3, r3, #2
 800d44a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d44c:	7e7b      	ldrb	r3, [r7, #25]
 800d44e:	b29b      	uxth	r3, r3
 800d450:	8b7a      	ldrh	r2, [r7, #26]
 800d452:	429a      	cmp	r2, r3
 800d454:	d202      	bcs.n	800d45c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d456:	f04f 33ff 	mov.w	r3, #4294967295
 800d45a:	e135      	b.n	800d6c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d45c:	7e7b      	ldrb	r3, [r7, #25]
 800d45e:	b29b      	uxth	r3, r3
 800d460:	8b7a      	ldrh	r2, [r7, #26]
 800d462:	1ad3      	subs	r3, r2, r3
 800d464:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d466:	69fb      	ldr	r3, [r7, #28]
 800d468:	88db      	ldrh	r3, [r3, #6]
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	4618      	mov	r0, r3
 800d46e:	f7f6 fd4f 	bl	8003f10 <lwip_htons>
 800d472:	4603      	mov	r3, r0
 800d474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d478:	b29b      	uxth	r3, r3
 800d47a:	00db      	lsls	r3, r3, #3
 800d47c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800d484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d486:	2200      	movs	r2, #0
 800d488:	701a      	strb	r2, [r3, #0]
 800d48a:	2200      	movs	r2, #0
 800d48c:	705a      	strb	r2, [r3, #1]
 800d48e:	2200      	movs	r2, #0
 800d490:	709a      	strb	r2, [r3, #2]
 800d492:	2200      	movs	r2, #0
 800d494:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d498:	8afa      	ldrh	r2, [r7, #22]
 800d49a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d49c:	8afa      	ldrh	r2, [r7, #22]
 800d49e:	8b7b      	ldrh	r3, [r7, #26]
 800d4a0:	4413      	add	r3, r2
 800d4a2:	b29a      	uxth	r2, r3
 800d4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4a6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4aa:	88db      	ldrh	r3, [r3, #6]
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	8afa      	ldrh	r2, [r7, #22]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d902      	bls.n	800d4ba <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d4b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d4b8:	e106      	b.n	800d6c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	685b      	ldr	r3, [r3, #4]
 800d4be:	627b      	str	r3, [r7, #36]	@ 0x24
 800d4c0:	e068      	b.n	800d594 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ca:	889b      	ldrh	r3, [r3, #4]
 800d4cc:	b29a      	uxth	r2, r3
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	889b      	ldrh	r3, [r3, #4]
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d235      	bcs.n	800d544 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4dc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d4de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d020      	beq.n	800d526 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e6:	889b      	ldrh	r3, [r3, #4]
 800d4e8:	b29a      	uxth	r2, r3
 800d4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ec:	88db      	ldrh	r3, [r3, #6]
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d307      	bcc.n	800d504 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4f6:	88db      	ldrh	r3, [r3, #6]
 800d4f8:	b29a      	uxth	r2, r3
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	889b      	ldrh	r3, [r3, #4]
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	429a      	cmp	r2, r3
 800d502:	d902      	bls.n	800d50a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d504:	f04f 33ff 	mov.w	r3, #4294967295
 800d508:	e0de      	b.n	800d6c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d50c:	68ba      	ldr	r2, [r7, #8]
 800d50e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d512:	88db      	ldrh	r3, [r3, #6]
 800d514:	b29a      	uxth	r2, r3
 800d516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d518:	889b      	ldrh	r3, [r3, #4]
 800d51a:	b29b      	uxth	r3, r3
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d03d      	beq.n	800d59c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d520:	2300      	movs	r3, #0
 800d522:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d524:	e03a      	b.n	800d59c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d528:	88db      	ldrh	r3, [r3, #6]
 800d52a:	b29a      	uxth	r2, r3
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	889b      	ldrh	r3, [r3, #4]
 800d530:	b29b      	uxth	r3, r3
 800d532:	429a      	cmp	r2, r3
 800d534:	d902      	bls.n	800d53c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d536:	f04f 33ff 	mov.w	r3, #4294967295
 800d53a:	e0c5      	b.n	800d6c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	68ba      	ldr	r2, [r7, #8]
 800d540:	605a      	str	r2, [r3, #4]
      break;
 800d542:	e02b      	b.n	800d59c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d546:	889b      	ldrh	r3, [r3, #4]
 800d548:	b29a      	uxth	r2, r3
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	889b      	ldrh	r3, [r3, #4]
 800d54e:	b29b      	uxth	r3, r3
 800d550:	429a      	cmp	r2, r3
 800d552:	d102      	bne.n	800d55a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d554:	f04f 33ff 	mov.w	r3, #4294967295
 800d558:	e0b6      	b.n	800d6c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d55a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d55c:	889b      	ldrh	r3, [r3, #4]
 800d55e:	b29a      	uxth	r2, r3
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	88db      	ldrh	r3, [r3, #6]
 800d564:	b29b      	uxth	r3, r3
 800d566:	429a      	cmp	r2, r3
 800d568:	d202      	bcs.n	800d570 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d56a:	f04f 33ff 	mov.w	r3, #4294967295
 800d56e:	e0ab      	b.n	800d6c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d572:	2b00      	cmp	r3, #0
 800d574:	d009      	beq.n	800d58a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d578:	88db      	ldrh	r3, [r3, #6]
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	889b      	ldrh	r3, [r3, #4]
 800d580:	b29b      	uxth	r3, r3
 800d582:	429a      	cmp	r2, r3
 800d584:	d001      	beq.n	800d58a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d586:	2300      	movs	r3, #0
 800d588:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800d594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d596:	2b00      	cmp	r3, #0
 800d598:	d193      	bne.n	800d4c2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d59a:	e000      	b.n	800d59e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d59c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d12d      	bne.n	800d600 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d5a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d01c      	beq.n	800d5e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d5aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ac:	88db      	ldrh	r3, [r3, #6]
 800d5ae:	b29a      	uxth	r2, r3
 800d5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5b2:	889b      	ldrh	r3, [r3, #4]
 800d5b4:	b29b      	uxth	r3, r3
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d906      	bls.n	800d5c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800d5ba:	4b45      	ldr	r3, [pc, #276]	@ (800d6d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d5bc:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800d5c0:	4944      	ldr	r1, [pc, #272]	@ (800d6d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d5c2:	4845      	ldr	r0, [pc, #276]	@ (800d6d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d5c4:	f000 fda0 	bl	800e108 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ca:	68ba      	ldr	r2, [r7, #8]
 800d5cc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d5ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5d0:	88db      	ldrh	r3, [r3, #6]
 800d5d2:	b29a      	uxth	r2, r3
 800d5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5d6:	889b      	ldrh	r3, [r3, #4]
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d010      	beq.n	800d600 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	623b      	str	r3, [r7, #32]
 800d5e2:	e00d      	b.n	800d600 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	685b      	ldr	r3, [r3, #4]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d006      	beq.n	800d5fa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d5ec:	4b38      	ldr	r3, [pc, #224]	@ (800d6d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d5ee:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800d5f2:	493a      	ldr	r1, [pc, #232]	@ (800d6dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d5f4:	4838      	ldr	r0, [pc, #224]	@ (800d6d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d5f6:	f000 fd87 	bl	800e108 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	68ba      	ldr	r2, [r7, #8]
 800d5fe:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d105      	bne.n	800d612 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	7f9b      	ldrb	r3, [r3, #30]
 800d60a:	f003 0301 	and.w	r3, r3, #1
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d059      	beq.n	800d6c6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800d612:	6a3b      	ldr	r3, [r7, #32]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d04f      	beq.n	800d6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d006      	beq.n	800d62e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	685b      	ldr	r3, [r3, #4]
 800d626:	889b      	ldrh	r3, [r3, #4]
 800d628:	b29b      	uxth	r3, r3
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d002      	beq.n	800d634 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800d62e:	2300      	movs	r3, #0
 800d630:	623b      	str	r3, [r7, #32]
 800d632:	e041      	b.n	800d6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d636:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800d638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800d63e:	e012      	b.n	800d666 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800d640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d642:	685b      	ldr	r3, [r3, #4]
 800d644:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800d646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d648:	88db      	ldrh	r3, [r3, #6]
 800d64a:	b29a      	uxth	r2, r3
 800d64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d64e:	889b      	ldrh	r3, [r3, #4]
 800d650:	b29b      	uxth	r3, r3
 800d652:	429a      	cmp	r2, r3
 800d654:	d002      	beq.n	800d65c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800d656:	2300      	movs	r3, #0
 800d658:	623b      	str	r3, [r7, #32]
            break;
 800d65a:	e007      	b.n	800d66c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800d65c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d65e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800d660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800d666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d1e9      	bne.n	800d640 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d66c:	6a3b      	ldr	r3, [r7, #32]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d022      	beq.n	800d6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d106      	bne.n	800d688 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800d67a:	4b15      	ldr	r3, [pc, #84]	@ (800d6d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d67c:	f240 12df 	movw	r2, #479	@ 0x1df
 800d680:	4917      	ldr	r1, [pc, #92]	@ (800d6e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d682:	4815      	ldr	r0, [pc, #84]	@ (800d6d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d684:	f000 fd40 	bl	800e108 <iprintf>
          LWIP_ASSERT("sanity check",
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	685b      	ldr	r3, [r3, #4]
 800d68e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d690:	429a      	cmp	r2, r3
 800d692:	d106      	bne.n	800d6a2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800d694:	4b0e      	ldr	r3, [pc, #56]	@ (800d6d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d696:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d69a:	4911      	ldr	r1, [pc, #68]	@ (800d6e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d69c:	480e      	ldr	r0, [pc, #56]	@ (800d6d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d69e:	f000 fd33 	bl	800e108 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d6a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d006      	beq.n	800d6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800d6aa:	4b09      	ldr	r3, [pc, #36]	@ (800d6d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d6ac:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800d6b0:	490c      	ldr	r1, [pc, #48]	@ (800d6e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d6b2:	4809      	ldr	r0, [pc, #36]	@ (800d6d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d6b4:	f000 fd28 	bl	800e108 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d6b8:	6a3b      	ldr	r3, [r7, #32]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	bf14      	ite	ne
 800d6be:	2301      	movne	r3, #1
 800d6c0:	2300      	moveq	r3, #0
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	e000      	b.n	800d6c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d6c6:	2300      	movs	r3, #0
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3730      	adds	r7, #48	@ 0x30
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	08011658 	.word	0x08011658
 800d6d4:	0801173c 	.word	0x0801173c
 800d6d8:	080116a0 	.word	0x080116a0
 800d6dc:	0801175c 	.word	0x0801175c
 800d6e0:	08011794 	.word	0x08011794
 800d6e4:	080117a4 	.word	0x080117a4

0800d6e8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b08e      	sub	sp, #56	@ 0x38
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	685b      	ldr	r3, [r3, #4]
 800d6f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	f003 030f 	and.w	r3, r3, #15
 800d6fe:	b2db      	uxtb	r3, r3
 800d700:	009b      	lsls	r3, r3, #2
 800d702:	b2db      	uxtb	r3, r3
 800d704:	2b14      	cmp	r3, #20
 800d706:	f040 8171 	bne.w	800d9ec <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800d70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d70c:	88db      	ldrh	r3, [r3, #6]
 800d70e:	b29b      	uxth	r3, r3
 800d710:	4618      	mov	r0, r3
 800d712:	f7f6 fbfd 	bl	8003f10 <lwip_htons>
 800d716:	4603      	mov	r3, r0
 800d718:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	00db      	lsls	r3, r3, #3
 800d720:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d724:	885b      	ldrh	r3, [r3, #2]
 800d726:	b29b      	uxth	r3, r3
 800d728:	4618      	mov	r0, r3
 800d72a:	f7f6 fbf1 	bl	8003f10 <lwip_htons>
 800d72e:	4603      	mov	r3, r0
 800d730:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800d732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d734:	781b      	ldrb	r3, [r3, #0]
 800d736:	f003 030f 	and.w	r3, r3, #15
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	009b      	lsls	r3, r3, #2
 800d73e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800d742:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d746:	b29b      	uxth	r3, r3
 800d748:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d74a:	429a      	cmp	r2, r3
 800d74c:	f0c0 8150 	bcc.w	800d9f0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800d750:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d754:	b29b      	uxth	r3, r3
 800d756:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d758:	1ad3      	subs	r3, r2, r3
 800d75a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f7f7 ff9d 	bl	800569c <pbuf_clen>
 800d762:	4603      	mov	r3, r0
 800d764:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d766:	4b8c      	ldr	r3, [pc, #560]	@ (800d998 <ip4_reass+0x2b0>)
 800d768:	881b      	ldrh	r3, [r3, #0]
 800d76a:	461a      	mov	r2, r3
 800d76c:	8c3b      	ldrh	r3, [r7, #32]
 800d76e:	4413      	add	r3, r2
 800d770:	2b0a      	cmp	r3, #10
 800d772:	dd10      	ble.n	800d796 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d774:	8c3b      	ldrh	r3, [r7, #32]
 800d776:	4619      	mov	r1, r3
 800d778:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d77a:	f7ff fd81 	bl	800d280 <ip_reass_remove_oldest_datagram>
 800d77e:	4603      	mov	r3, r0
 800d780:	2b00      	cmp	r3, #0
 800d782:	f000 8137 	beq.w	800d9f4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d786:	4b84      	ldr	r3, [pc, #528]	@ (800d998 <ip4_reass+0x2b0>)
 800d788:	881b      	ldrh	r3, [r3, #0]
 800d78a:	461a      	mov	r2, r3
 800d78c:	8c3b      	ldrh	r3, [r7, #32]
 800d78e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d790:	2b0a      	cmp	r3, #10
 800d792:	f300 812f 	bgt.w	800d9f4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d796:	4b81      	ldr	r3, [pc, #516]	@ (800d99c <ip4_reass+0x2b4>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d79c:	e015      	b.n	800d7ca <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7a0:	695a      	ldr	r2, [r3, #20]
 800d7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7a4:	68db      	ldr	r3, [r3, #12]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d10c      	bne.n	800d7c4 <ip4_reass+0xdc>
 800d7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ac:	699a      	ldr	r2, [r3, #24]
 800d7ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7b0:	691b      	ldr	r3, [r3, #16]
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d106      	bne.n	800d7c4 <ip4_reass+0xdc>
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b8:	899a      	ldrh	r2, [r3, #12]
 800d7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7bc:	889b      	ldrh	r3, [r3, #4]
 800d7be:	b29b      	uxth	r3, r3
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	d006      	beq.n	800d7d2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d1e6      	bne.n	800d79e <ip4_reass+0xb6>
 800d7d0:	e000      	b.n	800d7d4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d7d2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d7d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d109      	bne.n	800d7ee <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d7da:	8c3b      	ldrh	r3, [r7, #32]
 800d7dc:	4619      	mov	r1, r3
 800d7de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d7e0:	f7ff fdb0 	bl	800d344 <ip_reass_enqueue_new_datagram>
 800d7e4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d11c      	bne.n	800d826 <ip4_reass+0x13e>
      goto nullreturn;
 800d7ec:	e105      	b.n	800d9fa <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7f0:	88db      	ldrh	r3, [r3, #6]
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7f6 fb8b 	bl	8003f10 <lwip_htons>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d800:	2b00      	cmp	r3, #0
 800d802:	d110      	bne.n	800d826 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d806:	89db      	ldrh	r3, [r3, #14]
 800d808:	4618      	mov	r0, r3
 800d80a:	f7f6 fb81 	bl	8003f10 <lwip_htons>
 800d80e:	4603      	mov	r3, r0
 800d810:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d814:	2b00      	cmp	r3, #0
 800d816:	d006      	beq.n	800d826 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d81a:	3308      	adds	r3, #8
 800d81c:	2214      	movs	r2, #20
 800d81e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d820:	4618      	mov	r0, r3
 800d822:	f000 fd4c 	bl	800e2be <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d828:	88db      	ldrh	r3, [r3, #6]
 800d82a:	b29b      	uxth	r3, r3
 800d82c:	f003 0320 	and.w	r3, r3, #32
 800d830:	2b00      	cmp	r3, #0
 800d832:	bf0c      	ite	eq
 800d834:	2301      	moveq	r3, #1
 800d836:	2300      	movne	r3, #0
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d83c:	69fb      	ldr	r3, [r7, #28]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d00e      	beq.n	800d860 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800d842:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d844:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d846:	4413      	add	r3, r2
 800d848:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d84a:	8b7a      	ldrh	r2, [r7, #26]
 800d84c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d84e:	429a      	cmp	r2, r3
 800d850:	f0c0 80a0 	bcc.w	800d994 <ip4_reass+0x2ac>
 800d854:	8b7b      	ldrh	r3, [r7, #26]
 800d856:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800d85a:	4293      	cmp	r3, r2
 800d85c:	f200 809a 	bhi.w	800d994 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d860:	69fa      	ldr	r2, [r7, #28]
 800d862:	6879      	ldr	r1, [r7, #4]
 800d864:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d866:	f7ff fdd5 	bl	800d414 <ip_reass_chain_frag_into_datagram_and_validate>
 800d86a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d872:	f000 809b 	beq.w	800d9ac <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d876:	4b48      	ldr	r3, [pc, #288]	@ (800d998 <ip4_reass+0x2b0>)
 800d878:	881a      	ldrh	r2, [r3, #0]
 800d87a:	8c3b      	ldrh	r3, [r7, #32]
 800d87c:	4413      	add	r3, r2
 800d87e:	b29a      	uxth	r2, r3
 800d880:	4b45      	ldr	r3, [pc, #276]	@ (800d998 <ip4_reass+0x2b0>)
 800d882:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d00d      	beq.n	800d8a6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800d88a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d88c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d88e:	4413      	add	r3, r2
 800d890:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d894:	8a7a      	ldrh	r2, [r7, #18]
 800d896:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d89a:	7f9b      	ldrb	r3, [r3, #30]
 800d89c:	f043 0301 	orr.w	r3, r3, #1
 800d8a0:	b2da      	uxtb	r2, r3
 800d8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d171      	bne.n	800d990 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800d8ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ae:	8b9b      	ldrh	r3, [r3, #28]
 800d8b0:	3314      	adds	r3, #20
 800d8b2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b6:	685b      	ldr	r3, [r3, #4]
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800d8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c0:	685b      	ldr	r3, [r3, #4]
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c8:	3308      	adds	r3, #8
 800d8ca:	2214      	movs	r2, #20
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d8d0:	f000 fcf5 	bl	800e2be <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d8d4:	8a3b      	ldrh	r3, [r7, #16]
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7f6 fb1a 	bl	8003f10 <lwip_htons>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	461a      	mov	r2, r3
 800d8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8e2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	719a      	strb	r2, [r3, #6]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	729a      	strb	r2, [r3, #10]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8fa:	685b      	ldr	r3, [r3, #4]
 800d8fc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d8fe:	e00d      	b.n	800d91c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800d900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d902:	685b      	ldr	r3, [r3, #4]
 800d904:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800d906:	2114      	movs	r1, #20
 800d908:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d90a:	f7f7 fdb9 	bl	8005480 <pbuf_remove_header>
      pbuf_cat(p, r);
 800d90e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f7f7 fefd 	bl	8005710 <pbuf_cat>
      r = iprh->next_pbuf;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800d91c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d1ee      	bne.n	800d900 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d922:	4b1e      	ldr	r3, [pc, #120]	@ (800d99c <ip4_reass+0x2b4>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d928:	429a      	cmp	r2, r3
 800d92a:	d102      	bne.n	800d932 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800d92c:	2300      	movs	r3, #0
 800d92e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d930:	e010      	b.n	800d954 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d932:	4b1a      	ldr	r3, [pc, #104]	@ (800d99c <ip4_reass+0x2b4>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d938:	e007      	b.n	800d94a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800d93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d940:	429a      	cmp	r2, r3
 800d942:	d006      	beq.n	800d952 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d94a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d1f4      	bne.n	800d93a <ip4_reass+0x252>
 800d950:	e000      	b.n	800d954 <ip4_reass+0x26c>
          break;
 800d952:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d954:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d956:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d958:	f7ff fd2e 	bl	800d3b8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f7f7 fe9d 	bl	800569c <pbuf_clen>
 800d962:	4603      	mov	r3, r0
 800d964:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800d966:	4b0c      	ldr	r3, [pc, #48]	@ (800d998 <ip4_reass+0x2b0>)
 800d968:	881b      	ldrh	r3, [r3, #0]
 800d96a:	8c3a      	ldrh	r2, [r7, #32]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d906      	bls.n	800d97e <ip4_reass+0x296>
 800d970:	4b0b      	ldr	r3, [pc, #44]	@ (800d9a0 <ip4_reass+0x2b8>)
 800d972:	f240 229b 	movw	r2, #667	@ 0x29b
 800d976:	490b      	ldr	r1, [pc, #44]	@ (800d9a4 <ip4_reass+0x2bc>)
 800d978:	480b      	ldr	r0, [pc, #44]	@ (800d9a8 <ip4_reass+0x2c0>)
 800d97a:	f000 fbc5 	bl	800e108 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800d97e:	4b06      	ldr	r3, [pc, #24]	@ (800d998 <ip4_reass+0x2b0>)
 800d980:	881a      	ldrh	r2, [r3, #0]
 800d982:	8c3b      	ldrh	r3, [r7, #32]
 800d984:	1ad3      	subs	r3, r2, r3
 800d986:	b29a      	uxth	r2, r3
 800d988:	4b03      	ldr	r3, [pc, #12]	@ (800d998 <ip4_reass+0x2b0>)
 800d98a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	e038      	b.n	800da02 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d990:	2300      	movs	r3, #0
 800d992:	e036      	b.n	800da02 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800d994:	bf00      	nop
 800d996:	e00a      	b.n	800d9ae <ip4_reass+0x2c6>
 800d998:	200083e8 	.word	0x200083e8
 800d99c:	200083e4 	.word	0x200083e4
 800d9a0:	08011658 	.word	0x08011658
 800d9a4:	080117c8 	.word	0x080117c8
 800d9a8:	080116a0 	.word	0x080116a0
    goto nullreturn_ipr;
 800d9ac:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800d9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d106      	bne.n	800d9c2 <ip4_reass+0x2da>
 800d9b4:	4b15      	ldr	r3, [pc, #84]	@ (800da0c <ip4_reass+0x324>)
 800d9b6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800d9ba:	4915      	ldr	r1, [pc, #84]	@ (800da10 <ip4_reass+0x328>)
 800d9bc:	4815      	ldr	r0, [pc, #84]	@ (800da14 <ip4_reass+0x32c>)
 800d9be:	f000 fba3 	bl	800e108 <iprintf>
  if (ipr->p == NULL) {
 800d9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d116      	bne.n	800d9f8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800d9ca:	4b13      	ldr	r3, [pc, #76]	@ (800da18 <ip4_reass+0x330>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d006      	beq.n	800d9e2 <ip4_reass+0x2fa>
 800d9d4:	4b0d      	ldr	r3, [pc, #52]	@ (800da0c <ip4_reass+0x324>)
 800d9d6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800d9da:	4910      	ldr	r1, [pc, #64]	@ (800da1c <ip4_reass+0x334>)
 800d9dc:	480d      	ldr	r0, [pc, #52]	@ (800da14 <ip4_reass+0x32c>)
 800d9de:	f000 fb93 	bl	800e108 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800d9e2:	2100      	movs	r1, #0
 800d9e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d9e6:	f7ff fce7 	bl	800d3b8 <ip_reass_dequeue_datagram>
 800d9ea:	e006      	b.n	800d9fa <ip4_reass+0x312>
    goto nullreturn;
 800d9ec:	bf00      	nop
 800d9ee:	e004      	b.n	800d9fa <ip4_reass+0x312>
    goto nullreturn;
 800d9f0:	bf00      	nop
 800d9f2:	e002      	b.n	800d9fa <ip4_reass+0x312>
      goto nullreturn;
 800d9f4:	bf00      	nop
 800d9f6:	e000      	b.n	800d9fa <ip4_reass+0x312>
  }

nullreturn:
 800d9f8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f7f7 fdc6 	bl	800558c <pbuf_free>
  return NULL;
 800da00:	2300      	movs	r3, #0
}
 800da02:	4618      	mov	r0, r3
 800da04:	3738      	adds	r7, #56	@ 0x38
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}
 800da0a:	bf00      	nop
 800da0c:	08011658 	.word	0x08011658
 800da10:	080117e4 	.word	0x080117e4
 800da14:	080116a0 	.word	0x080116a0
 800da18:	200083e4 	.word	0x200083e4
 800da1c:	080117f0 	.word	0x080117f0

0800da20 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800da24:	2005      	movs	r0, #5
 800da26:	f7f6 feeb 	bl	8004800 <memp_malloc>
 800da2a:	4603      	mov	r3, r0
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	bd80      	pop	{r7, pc}

0800da30 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d106      	bne.n	800da4c <ip_frag_free_pbuf_custom_ref+0x1c>
 800da3e:	4b07      	ldr	r3, [pc, #28]	@ (800da5c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800da40:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800da44:	4906      	ldr	r1, [pc, #24]	@ (800da60 <ip_frag_free_pbuf_custom_ref+0x30>)
 800da46:	4807      	ldr	r0, [pc, #28]	@ (800da64 <ip_frag_free_pbuf_custom_ref+0x34>)
 800da48:	f000 fb5e 	bl	800e108 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800da4c:	6879      	ldr	r1, [r7, #4]
 800da4e:	2005      	movs	r0, #5
 800da50:	f7f6 ff46 	bl	80048e0 <memp_free>
}
 800da54:	bf00      	nop
 800da56:	3708      	adds	r7, #8
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	08011658 	.word	0x08011658
 800da60:	08011810 	.word	0x08011810
 800da64:	080116a0 	.word	0x080116a0

0800da68 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d106      	bne.n	800da88 <ipfrag_free_pbuf_custom+0x20>
 800da7a:	4b11      	ldr	r3, [pc, #68]	@ (800dac0 <ipfrag_free_pbuf_custom+0x58>)
 800da7c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800da80:	4910      	ldr	r1, [pc, #64]	@ (800dac4 <ipfrag_free_pbuf_custom+0x5c>)
 800da82:	4811      	ldr	r0, [pc, #68]	@ (800dac8 <ipfrag_free_pbuf_custom+0x60>)
 800da84:	f000 fb40 	bl	800e108 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800da88:	68fa      	ldr	r2, [r7, #12]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d006      	beq.n	800da9e <ipfrag_free_pbuf_custom+0x36>
 800da90:	4b0b      	ldr	r3, [pc, #44]	@ (800dac0 <ipfrag_free_pbuf_custom+0x58>)
 800da92:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800da96:	490d      	ldr	r1, [pc, #52]	@ (800dacc <ipfrag_free_pbuf_custom+0x64>)
 800da98:	480b      	ldr	r0, [pc, #44]	@ (800dac8 <ipfrag_free_pbuf_custom+0x60>)
 800da9a:	f000 fb35 	bl	800e108 <iprintf>
  if (pcr->original != NULL) {
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	695b      	ldr	r3, [r3, #20]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d004      	beq.n	800dab0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	695b      	ldr	r3, [r3, #20]
 800daaa:	4618      	mov	r0, r3
 800daac:	f7f7 fd6e 	bl	800558c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800dab0:	68f8      	ldr	r0, [r7, #12]
 800dab2:	f7ff ffbd 	bl	800da30 <ip_frag_free_pbuf_custom_ref>
}
 800dab6:	bf00      	nop
 800dab8:	3710      	adds	r7, #16
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	08011658 	.word	0x08011658
 800dac4:	0801181c 	.word	0x0801181c
 800dac8:	080116a0 	.word	0x080116a0
 800dacc:	08011828 	.word	0x08011828

0800dad0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b094      	sub	sp, #80	@ 0x50
 800dad4:	af02      	add	r7, sp, #8
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	60b9      	str	r1, [r7, #8]
 800dada:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800dadc:	2300      	movs	r3, #0
 800dade:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800dae6:	3b14      	subs	r3, #20
 800dae8:	2b00      	cmp	r3, #0
 800daea:	da00      	bge.n	800daee <ip4_frag+0x1e>
 800daec:	3307      	adds	r3, #7
 800daee:	10db      	asrs	r3, r3, #3
 800daf0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800daf2:	2314      	movs	r3, #20
 800daf4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800dafc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dafe:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800db00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	f003 030f 	and.w	r3, r3, #15
 800db08:	b2db      	uxtb	r3, r3
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	2b14      	cmp	r3, #20
 800db10:	d002      	beq.n	800db18 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800db12:	f06f 0305 	mvn.w	r3, #5
 800db16:	e110      	b.n	800dd3a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	895b      	ldrh	r3, [r3, #10]
 800db1c:	2b13      	cmp	r3, #19
 800db1e:	d809      	bhi.n	800db34 <ip4_frag+0x64>
 800db20:	4b88      	ldr	r3, [pc, #544]	@ (800dd44 <ip4_frag+0x274>)
 800db22:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800db26:	4988      	ldr	r1, [pc, #544]	@ (800dd48 <ip4_frag+0x278>)
 800db28:	4888      	ldr	r0, [pc, #544]	@ (800dd4c <ip4_frag+0x27c>)
 800db2a:	f000 faed 	bl	800e108 <iprintf>
 800db2e:	f06f 0305 	mvn.w	r3, #5
 800db32:	e102      	b.n	800dd3a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800db34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db36:	88db      	ldrh	r3, [r3, #6]
 800db38:	b29b      	uxth	r3, r3
 800db3a:	4618      	mov	r0, r3
 800db3c:	f7f6 f9e8 	bl	8003f10 <lwip_htons>
 800db40:	4603      	mov	r3, r0
 800db42:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800db44:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800db46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800db4a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800db4e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800db50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800db54:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	891b      	ldrh	r3, [r3, #8]
 800db5a:	3b14      	subs	r3, #20
 800db5c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800db60:	e0e1      	b.n	800dd26 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800db62:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800db64:	00db      	lsls	r3, r3, #3
 800db66:	b29b      	uxth	r3, r3
 800db68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800db6c:	4293      	cmp	r3, r2
 800db6e:	bf28      	it	cs
 800db70:	4613      	movcs	r3, r2
 800db72:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800db74:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800db78:	2114      	movs	r1, #20
 800db7a:	200e      	movs	r0, #14
 800db7c:	f7f7 fa22 	bl	8004fc4 <pbuf_alloc>
 800db80:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800db82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db84:	2b00      	cmp	r3, #0
 800db86:	f000 80d5 	beq.w	800dd34 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800db8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db8c:	895b      	ldrh	r3, [r3, #10]
 800db8e:	2b13      	cmp	r3, #19
 800db90:	d806      	bhi.n	800dba0 <ip4_frag+0xd0>
 800db92:	4b6c      	ldr	r3, [pc, #432]	@ (800dd44 <ip4_frag+0x274>)
 800db94:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800db98:	496d      	ldr	r1, [pc, #436]	@ (800dd50 <ip4_frag+0x280>)
 800db9a:	486c      	ldr	r0, [pc, #432]	@ (800dd4c <ip4_frag+0x27c>)
 800db9c:	f000 fab4 	bl	800e108 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800dba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	2214      	movs	r2, #20
 800dba6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f000 fb88 	bl	800e2be <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800dbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800dbb4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800dbb6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800dbba:	e064      	b.n	800dc86 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	895a      	ldrh	r2, [r3, #10]
 800dbc0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800dbc2:	1ad3      	subs	r3, r2, r3
 800dbc4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	895b      	ldrh	r3, [r3, #10]
 800dbca:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d906      	bls.n	800dbde <ip4_frag+0x10e>
 800dbd0:	4b5c      	ldr	r3, [pc, #368]	@ (800dd44 <ip4_frag+0x274>)
 800dbd2:	f240 322d 	movw	r2, #813	@ 0x32d
 800dbd6:	495f      	ldr	r1, [pc, #380]	@ (800dd54 <ip4_frag+0x284>)
 800dbd8:	485c      	ldr	r0, [pc, #368]	@ (800dd4c <ip4_frag+0x27c>)
 800dbda:	f000 fa95 	bl	800e108 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800dbde:	8bfa      	ldrh	r2, [r7, #30]
 800dbe0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	bf28      	it	cs
 800dbe8:	4613      	movcs	r3, r2
 800dbea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800dbee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d105      	bne.n	800dc02 <ip4_frag+0x132>
        poff = 0;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	60fb      	str	r3, [r7, #12]
        continue;
 800dc00:	e041      	b.n	800dc86 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800dc02:	f7ff ff0d 	bl	800da20 <ip_frag_alloc_pbuf_custom_ref>
 800dc06:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800dc08:	69bb      	ldr	r3, [r7, #24]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d103      	bne.n	800dc16 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800dc0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dc10:	f7f7 fcbc 	bl	800558c <pbuf_free>
        goto memerr;
 800dc14:	e08f      	b.n	800dd36 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dc16:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dc1c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800dc1e:	4413      	add	r3, r2
 800dc20:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800dc24:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800dc28:	9201      	str	r2, [sp, #4]
 800dc2a:	9300      	str	r3, [sp, #0]
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2241      	movs	r2, #65	@ 0x41
 800dc30:	2000      	movs	r0, #0
 800dc32:	f7f7 faf1 	bl	8005218 <pbuf_alloced_custom>
 800dc36:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d106      	bne.n	800dc4c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800dc3e:	69b8      	ldr	r0, [r7, #24]
 800dc40:	f7ff fef6 	bl	800da30 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800dc44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dc46:	f7f7 fca1 	bl	800558c <pbuf_free>
        goto memerr;
 800dc4a:	e074      	b.n	800dd36 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800dc4c:	68f8      	ldr	r0, [r7, #12]
 800dc4e:	f7f7 fd3d 	bl	80056cc <pbuf_ref>
      pcr->original = p;
 800dc52:	69bb      	ldr	r3, [r7, #24]
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800dc58:	69bb      	ldr	r3, [r7, #24]
 800dc5a:	4a3f      	ldr	r2, [pc, #252]	@ (800dd58 <ip4_frag+0x288>)
 800dc5c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800dc5e:	6979      	ldr	r1, [r7, #20]
 800dc60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dc62:	f7f7 fd55 	bl	8005710 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800dc66:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800dc6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800dc6e:	1ad3      	subs	r3, r2, r3
 800dc70:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800dc74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d004      	beq.n	800dc86 <ip4_frag+0x1b6>
        poff = 0;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800dc86:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d196      	bne.n	800dbbc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800dc8e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800dc90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800dc94:	4413      	add	r3, r2
 800dc96:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800dc9c:	f1a3 0213 	sub.w	r2, r3, #19
 800dca0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dca4:	429a      	cmp	r2, r3
 800dca6:	bfcc      	ite	gt
 800dca8:	2301      	movgt	r3, #1
 800dcaa:	2300      	movle	r3, #0
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800dcb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800dcb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dcb8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800dcba:	6a3b      	ldr	r3, [r7, #32]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d002      	beq.n	800dcc6 <ip4_frag+0x1f6>
 800dcc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d003      	beq.n	800dcce <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800dcc6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800dcc8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800dccc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800dcce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7f6 f91d 	bl	8003f10 <lwip_htons>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	461a      	mov	r2, r3
 800dcda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcdc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800dcde:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800dce0:	3314      	adds	r3, #20
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7f6 f913 	bl	8003f10 <lwip_htons>
 800dcea:	4603      	mov	r3, r0
 800dcec:	461a      	mov	r2, r3
 800dcee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcf0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800dcf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	729a      	strb	r2, [r3, #10]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	695b      	ldr	r3, [r3, #20]
 800dd00:	687a      	ldr	r2, [r7, #4]
 800dd02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dd04:	68b8      	ldr	r0, [r7, #8]
 800dd06:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800dd08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dd0a:	f7f7 fc3f 	bl	800558c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800dd0e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800dd12:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800dd14:	1ad3      	subs	r3, r2, r3
 800dd16:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800dd1a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800dd1e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800dd20:	4413      	add	r3, r2
 800dd22:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800dd26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	f47f af19 	bne.w	800db62 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800dd30:	2300      	movs	r3, #0
 800dd32:	e002      	b.n	800dd3a <ip4_frag+0x26a>
      goto memerr;
 800dd34:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800dd36:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3748      	adds	r7, #72	@ 0x48
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	bf00      	nop
 800dd44:	08011658 	.word	0x08011658
 800dd48:	08011834 	.word	0x08011834
 800dd4c:	080116a0 	.word	0x080116a0
 800dd50:	08011850 	.word	0x08011850
 800dd54:	08011870 	.word	0x08011870
 800dd58:	0800da69 	.word	0x0800da69

0800dd5c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b086      	sub	sp, #24
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800dd66:	230e      	movs	r3, #14
 800dd68:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	895b      	ldrh	r3, [r3, #10]
 800dd6e:	2b0e      	cmp	r3, #14
 800dd70:	d96e      	bls.n	800de50 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	7bdb      	ldrb	r3, [r3, #15]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d106      	bne.n	800dd88 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dd80:	3301      	adds	r3, #1
 800dd82:	b2da      	uxtb	r2, r3
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	7b1a      	ldrb	r2, [r3, #12]
 800dd92:	7b5b      	ldrb	r3, [r3, #13]
 800dd94:	021b      	lsls	r3, r3, #8
 800dd96:	4313      	orrs	r3, r2
 800dd98:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	f003 0301 	and.w	r3, r3, #1
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d023      	beq.n	800ddee <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	2b01      	cmp	r3, #1
 800ddac:	d10f      	bne.n	800ddce <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	785b      	ldrb	r3, [r3, #1]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d11b      	bne.n	800ddee <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ddba:	2b5e      	cmp	r3, #94	@ 0x5e
 800ddbc:	d117      	bne.n	800ddee <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	7b5b      	ldrb	r3, [r3, #13]
 800ddc2:	f043 0310 	orr.w	r3, r3, #16
 800ddc6:	b2da      	uxtb	r2, r3
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	735a      	strb	r2, [r3, #13]
 800ddcc:	e00f      	b.n	800ddee <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	2206      	movs	r2, #6
 800ddd2:	4928      	ldr	r1, [pc, #160]	@ (800de74 <ethernet_input+0x118>)
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f000 f9ec 	bl	800e1b2 <memcmp>
 800ddda:	4603      	mov	r3, r0
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d106      	bne.n	800ddee <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	7b5b      	ldrb	r3, [r3, #13]
 800dde4:	f043 0308 	orr.w	r3, r3, #8
 800dde8:	b2da      	uxtb	r2, r3
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800ddee:	89fb      	ldrh	r3, [r7, #14]
 800ddf0:	2b08      	cmp	r3, #8
 800ddf2:	d003      	beq.n	800ddfc <ethernet_input+0xa0>
 800ddf4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800ddf8:	d014      	beq.n	800de24 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800ddfa:	e032      	b.n	800de62 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de02:	f003 0308 	and.w	r3, r3, #8
 800de06:	2b00      	cmp	r3, #0
 800de08:	d024      	beq.n	800de54 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800de0a:	8afb      	ldrh	r3, [r7, #22]
 800de0c:	4619      	mov	r1, r3
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f7f7 fb36 	bl	8005480 <pbuf_remove_header>
 800de14:	4603      	mov	r3, r0
 800de16:	2b00      	cmp	r3, #0
 800de18:	d11e      	bne.n	800de58 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800de1a:	6839      	ldr	r1, [r7, #0]
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f7fe ff21 	bl	800cc64 <ip4_input>
      break;
 800de22:	e013      	b.n	800de4c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de2a:	f003 0308 	and.w	r3, r3, #8
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d014      	beq.n	800de5c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800de32:	8afb      	ldrh	r3, [r7, #22]
 800de34:	4619      	mov	r1, r3
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f7f7 fb22 	bl	8005480 <pbuf_remove_header>
 800de3c:	4603      	mov	r3, r0
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d10e      	bne.n	800de60 <ethernet_input+0x104>
        etharp_input(p, netif);
 800de42:	6839      	ldr	r1, [r7, #0]
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f7fe f8c1 	bl	800bfcc <etharp_input>
      break;
 800de4a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800de4c:	2300      	movs	r3, #0
 800de4e:	e00c      	b.n	800de6a <ethernet_input+0x10e>
    goto free_and_return;
 800de50:	bf00      	nop
 800de52:	e006      	b.n	800de62 <ethernet_input+0x106>
        goto free_and_return;
 800de54:	bf00      	nop
 800de56:	e004      	b.n	800de62 <ethernet_input+0x106>
        goto free_and_return;
 800de58:	bf00      	nop
 800de5a:	e002      	b.n	800de62 <ethernet_input+0x106>
        goto free_and_return;
 800de5c:	bf00      	nop
 800de5e:	e000      	b.n	800de62 <ethernet_input+0x106>
        goto free_and_return;
 800de60:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f7f7 fb92 	bl	800558c <pbuf_free>
  return ERR_OK;
 800de68:	2300      	movs	r3, #0
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3718      	adds	r7, #24
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	08011a04 	.word	0x08011a04

0800de78 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800de78:	b580      	push	{r7, lr}
 800de7a:	b086      	sub	sp, #24
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	60b9      	str	r1, [r7, #8]
 800de82:	607a      	str	r2, [r7, #4]
 800de84:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800de86:	8c3b      	ldrh	r3, [r7, #32]
 800de88:	4618      	mov	r0, r3
 800de8a:	f7f6 f841 	bl	8003f10 <lwip_htons>
 800de8e:	4603      	mov	r3, r0
 800de90:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800de92:	210e      	movs	r1, #14
 800de94:	68b8      	ldr	r0, [r7, #8]
 800de96:	f7f7 fae3 	bl	8005460 <pbuf_add_header>
 800de9a:	4603      	mov	r3, r0
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d125      	bne.n	800deec <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	685b      	ldr	r3, [r3, #4]
 800dea4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	8afa      	ldrh	r2, [r7, #22]
 800deaa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	2206      	movs	r2, #6
 800deb0:	6839      	ldr	r1, [r7, #0]
 800deb2:	4618      	mov	r0, r3
 800deb4:	f000 fa03 	bl	800e2be <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	3306      	adds	r3, #6
 800debc:	2206      	movs	r2, #6
 800debe:	6879      	ldr	r1, [r7, #4]
 800dec0:	4618      	mov	r0, r3
 800dec2:	f000 f9fc 	bl	800e2be <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800decc:	2b06      	cmp	r3, #6
 800dece:	d006      	beq.n	800dede <ethernet_output+0x66>
 800ded0:	4b0a      	ldr	r3, [pc, #40]	@ (800defc <ethernet_output+0x84>)
 800ded2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800ded6:	490a      	ldr	r1, [pc, #40]	@ (800df00 <ethernet_output+0x88>)
 800ded8:	480a      	ldr	r0, [pc, #40]	@ (800df04 <ethernet_output+0x8c>)
 800deda:	f000 f915 	bl	800e108 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	699b      	ldr	r3, [r3, #24]
 800dee2:	68b9      	ldr	r1, [r7, #8]
 800dee4:	68f8      	ldr	r0, [r7, #12]
 800dee6:	4798      	blx	r3
 800dee8:	4603      	mov	r3, r0
 800deea:	e002      	b.n	800def2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800deec:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800deee:	f06f 0301 	mvn.w	r3, #1
}
 800def2:	4618      	mov	r0, r3
 800def4:	3718      	adds	r7, #24
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	08011880 	.word	0x08011880
 800df00:	080118b8 	.word	0x080118b8
 800df04:	080118ec 	.word	0x080118ec

0800df08 <rand>:
 800df08:	4b16      	ldr	r3, [pc, #88]	@ (800df64 <rand+0x5c>)
 800df0a:	b510      	push	{r4, lr}
 800df0c:	681c      	ldr	r4, [r3, #0]
 800df0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800df10:	b9b3      	cbnz	r3, 800df40 <rand+0x38>
 800df12:	2018      	movs	r0, #24
 800df14:	f000 fa4a 	bl	800e3ac <malloc>
 800df18:	4602      	mov	r2, r0
 800df1a:	6320      	str	r0, [r4, #48]	@ 0x30
 800df1c:	b920      	cbnz	r0, 800df28 <rand+0x20>
 800df1e:	4b12      	ldr	r3, [pc, #72]	@ (800df68 <rand+0x60>)
 800df20:	4812      	ldr	r0, [pc, #72]	@ (800df6c <rand+0x64>)
 800df22:	2152      	movs	r1, #82	@ 0x52
 800df24:	f000 f9da 	bl	800e2dc <__assert_func>
 800df28:	4911      	ldr	r1, [pc, #68]	@ (800df70 <rand+0x68>)
 800df2a:	4b12      	ldr	r3, [pc, #72]	@ (800df74 <rand+0x6c>)
 800df2c:	e9c0 1300 	strd	r1, r3, [r0]
 800df30:	4b11      	ldr	r3, [pc, #68]	@ (800df78 <rand+0x70>)
 800df32:	6083      	str	r3, [r0, #8]
 800df34:	230b      	movs	r3, #11
 800df36:	8183      	strh	r3, [r0, #12]
 800df38:	2100      	movs	r1, #0
 800df3a:	2001      	movs	r0, #1
 800df3c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800df40:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800df42:	480e      	ldr	r0, [pc, #56]	@ (800df7c <rand+0x74>)
 800df44:	690b      	ldr	r3, [r1, #16]
 800df46:	694c      	ldr	r4, [r1, #20]
 800df48:	4a0d      	ldr	r2, [pc, #52]	@ (800df80 <rand+0x78>)
 800df4a:	4358      	muls	r0, r3
 800df4c:	fb02 0004 	mla	r0, r2, r4, r0
 800df50:	fba3 3202 	umull	r3, r2, r3, r2
 800df54:	3301      	adds	r3, #1
 800df56:	eb40 0002 	adc.w	r0, r0, r2
 800df5a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800df5e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800df62:	bd10      	pop	{r4, pc}
 800df64:	20000038 	.word	0x20000038
 800df68:	08011a12 	.word	0x08011a12
 800df6c:	08011a29 	.word	0x08011a29
 800df70:	abcd330e 	.word	0xabcd330e
 800df74:	e66d1234 	.word	0xe66d1234
 800df78:	0005deec 	.word	0x0005deec
 800df7c:	5851f42d 	.word	0x5851f42d
 800df80:	4c957f2d 	.word	0x4c957f2d

0800df84 <std>:
 800df84:	2300      	movs	r3, #0
 800df86:	b510      	push	{r4, lr}
 800df88:	4604      	mov	r4, r0
 800df8a:	e9c0 3300 	strd	r3, r3, [r0]
 800df8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df92:	6083      	str	r3, [r0, #8]
 800df94:	8181      	strh	r1, [r0, #12]
 800df96:	6643      	str	r3, [r0, #100]	@ 0x64
 800df98:	81c2      	strh	r2, [r0, #14]
 800df9a:	6183      	str	r3, [r0, #24]
 800df9c:	4619      	mov	r1, r3
 800df9e:	2208      	movs	r2, #8
 800dfa0:	305c      	adds	r0, #92	@ 0x5c
 800dfa2:	f000 f916 	bl	800e1d2 <memset>
 800dfa6:	4b0d      	ldr	r3, [pc, #52]	@ (800dfdc <std+0x58>)
 800dfa8:	6263      	str	r3, [r4, #36]	@ 0x24
 800dfaa:	4b0d      	ldr	r3, [pc, #52]	@ (800dfe0 <std+0x5c>)
 800dfac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dfae:	4b0d      	ldr	r3, [pc, #52]	@ (800dfe4 <std+0x60>)
 800dfb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dfb2:	4b0d      	ldr	r3, [pc, #52]	@ (800dfe8 <std+0x64>)
 800dfb4:	6323      	str	r3, [r4, #48]	@ 0x30
 800dfb6:	4b0d      	ldr	r3, [pc, #52]	@ (800dfec <std+0x68>)
 800dfb8:	6224      	str	r4, [r4, #32]
 800dfba:	429c      	cmp	r4, r3
 800dfbc:	d006      	beq.n	800dfcc <std+0x48>
 800dfbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dfc2:	4294      	cmp	r4, r2
 800dfc4:	d002      	beq.n	800dfcc <std+0x48>
 800dfc6:	33d0      	adds	r3, #208	@ 0xd0
 800dfc8:	429c      	cmp	r4, r3
 800dfca:	d105      	bne.n	800dfd8 <std+0x54>
 800dfcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dfd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfd4:	f000 b970 	b.w	800e2b8 <__retarget_lock_init_recursive>
 800dfd8:	bd10      	pop	{r4, pc}
 800dfda:	bf00      	nop
 800dfdc:	0800e12d 	.word	0x0800e12d
 800dfe0:	0800e14f 	.word	0x0800e14f
 800dfe4:	0800e187 	.word	0x0800e187
 800dfe8:	0800e1ab 	.word	0x0800e1ab
 800dfec:	200083ec 	.word	0x200083ec

0800dff0 <stdio_exit_handler>:
 800dff0:	4a02      	ldr	r2, [pc, #8]	@ (800dffc <stdio_exit_handler+0xc>)
 800dff2:	4903      	ldr	r1, [pc, #12]	@ (800e000 <stdio_exit_handler+0x10>)
 800dff4:	4803      	ldr	r0, [pc, #12]	@ (800e004 <stdio_exit_handler+0x14>)
 800dff6:	f000 b869 	b.w	800e0cc <_fwalk_sglue>
 800dffa:	bf00      	nop
 800dffc:	2000002c 	.word	0x2000002c
 800e000:	0800ebc1 	.word	0x0800ebc1
 800e004:	2000003c 	.word	0x2000003c

0800e008 <cleanup_stdio>:
 800e008:	6841      	ldr	r1, [r0, #4]
 800e00a:	4b0c      	ldr	r3, [pc, #48]	@ (800e03c <cleanup_stdio+0x34>)
 800e00c:	4299      	cmp	r1, r3
 800e00e:	b510      	push	{r4, lr}
 800e010:	4604      	mov	r4, r0
 800e012:	d001      	beq.n	800e018 <cleanup_stdio+0x10>
 800e014:	f000 fdd4 	bl	800ebc0 <_fflush_r>
 800e018:	68a1      	ldr	r1, [r4, #8]
 800e01a:	4b09      	ldr	r3, [pc, #36]	@ (800e040 <cleanup_stdio+0x38>)
 800e01c:	4299      	cmp	r1, r3
 800e01e:	d002      	beq.n	800e026 <cleanup_stdio+0x1e>
 800e020:	4620      	mov	r0, r4
 800e022:	f000 fdcd 	bl	800ebc0 <_fflush_r>
 800e026:	68e1      	ldr	r1, [r4, #12]
 800e028:	4b06      	ldr	r3, [pc, #24]	@ (800e044 <cleanup_stdio+0x3c>)
 800e02a:	4299      	cmp	r1, r3
 800e02c:	d004      	beq.n	800e038 <cleanup_stdio+0x30>
 800e02e:	4620      	mov	r0, r4
 800e030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e034:	f000 bdc4 	b.w	800ebc0 <_fflush_r>
 800e038:	bd10      	pop	{r4, pc}
 800e03a:	bf00      	nop
 800e03c:	200083ec 	.word	0x200083ec
 800e040:	20008454 	.word	0x20008454
 800e044:	200084bc 	.word	0x200084bc

0800e048 <global_stdio_init.part.0>:
 800e048:	b510      	push	{r4, lr}
 800e04a:	4b0b      	ldr	r3, [pc, #44]	@ (800e078 <global_stdio_init.part.0+0x30>)
 800e04c:	4c0b      	ldr	r4, [pc, #44]	@ (800e07c <global_stdio_init.part.0+0x34>)
 800e04e:	4a0c      	ldr	r2, [pc, #48]	@ (800e080 <global_stdio_init.part.0+0x38>)
 800e050:	601a      	str	r2, [r3, #0]
 800e052:	4620      	mov	r0, r4
 800e054:	2200      	movs	r2, #0
 800e056:	2104      	movs	r1, #4
 800e058:	f7ff ff94 	bl	800df84 <std>
 800e05c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e060:	2201      	movs	r2, #1
 800e062:	2109      	movs	r1, #9
 800e064:	f7ff ff8e 	bl	800df84 <std>
 800e068:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e06c:	2202      	movs	r2, #2
 800e06e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e072:	2112      	movs	r1, #18
 800e074:	f7ff bf86 	b.w	800df84 <std>
 800e078:	20008524 	.word	0x20008524
 800e07c:	200083ec 	.word	0x200083ec
 800e080:	0800dff1 	.word	0x0800dff1

0800e084 <__sfp_lock_acquire>:
 800e084:	4801      	ldr	r0, [pc, #4]	@ (800e08c <__sfp_lock_acquire+0x8>)
 800e086:	f000 b918 	b.w	800e2ba <__retarget_lock_acquire_recursive>
 800e08a:	bf00      	nop
 800e08c:	2000852d 	.word	0x2000852d

0800e090 <__sfp_lock_release>:
 800e090:	4801      	ldr	r0, [pc, #4]	@ (800e098 <__sfp_lock_release+0x8>)
 800e092:	f000 b913 	b.w	800e2bc <__retarget_lock_release_recursive>
 800e096:	bf00      	nop
 800e098:	2000852d 	.word	0x2000852d

0800e09c <__sinit>:
 800e09c:	b510      	push	{r4, lr}
 800e09e:	4604      	mov	r4, r0
 800e0a0:	f7ff fff0 	bl	800e084 <__sfp_lock_acquire>
 800e0a4:	6a23      	ldr	r3, [r4, #32]
 800e0a6:	b11b      	cbz	r3, 800e0b0 <__sinit+0x14>
 800e0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0ac:	f7ff bff0 	b.w	800e090 <__sfp_lock_release>
 800e0b0:	4b04      	ldr	r3, [pc, #16]	@ (800e0c4 <__sinit+0x28>)
 800e0b2:	6223      	str	r3, [r4, #32]
 800e0b4:	4b04      	ldr	r3, [pc, #16]	@ (800e0c8 <__sinit+0x2c>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d1f5      	bne.n	800e0a8 <__sinit+0xc>
 800e0bc:	f7ff ffc4 	bl	800e048 <global_stdio_init.part.0>
 800e0c0:	e7f2      	b.n	800e0a8 <__sinit+0xc>
 800e0c2:	bf00      	nop
 800e0c4:	0800e009 	.word	0x0800e009
 800e0c8:	20008524 	.word	0x20008524

0800e0cc <_fwalk_sglue>:
 800e0cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0d0:	4607      	mov	r7, r0
 800e0d2:	4688      	mov	r8, r1
 800e0d4:	4614      	mov	r4, r2
 800e0d6:	2600      	movs	r6, #0
 800e0d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e0dc:	f1b9 0901 	subs.w	r9, r9, #1
 800e0e0:	d505      	bpl.n	800e0ee <_fwalk_sglue+0x22>
 800e0e2:	6824      	ldr	r4, [r4, #0]
 800e0e4:	2c00      	cmp	r4, #0
 800e0e6:	d1f7      	bne.n	800e0d8 <_fwalk_sglue+0xc>
 800e0e8:	4630      	mov	r0, r6
 800e0ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0ee:	89ab      	ldrh	r3, [r5, #12]
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d907      	bls.n	800e104 <_fwalk_sglue+0x38>
 800e0f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	d003      	beq.n	800e104 <_fwalk_sglue+0x38>
 800e0fc:	4629      	mov	r1, r5
 800e0fe:	4638      	mov	r0, r7
 800e100:	47c0      	blx	r8
 800e102:	4306      	orrs	r6, r0
 800e104:	3568      	adds	r5, #104	@ 0x68
 800e106:	e7e9      	b.n	800e0dc <_fwalk_sglue+0x10>

0800e108 <iprintf>:
 800e108:	b40f      	push	{r0, r1, r2, r3}
 800e10a:	b507      	push	{r0, r1, r2, lr}
 800e10c:	4906      	ldr	r1, [pc, #24]	@ (800e128 <iprintf+0x20>)
 800e10e:	ab04      	add	r3, sp, #16
 800e110:	6808      	ldr	r0, [r1, #0]
 800e112:	f853 2b04 	ldr.w	r2, [r3], #4
 800e116:	6881      	ldr	r1, [r0, #8]
 800e118:	9301      	str	r3, [sp, #4]
 800e11a:	f000 fa27 	bl	800e56c <_vfiprintf_r>
 800e11e:	b003      	add	sp, #12
 800e120:	f85d eb04 	ldr.w	lr, [sp], #4
 800e124:	b004      	add	sp, #16
 800e126:	4770      	bx	lr
 800e128:	20000038 	.word	0x20000038

0800e12c <__sread>:
 800e12c:	b510      	push	{r4, lr}
 800e12e:	460c      	mov	r4, r1
 800e130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e134:	f000 f878 	bl	800e228 <_read_r>
 800e138:	2800      	cmp	r0, #0
 800e13a:	bfab      	itete	ge
 800e13c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e13e:	89a3      	ldrhlt	r3, [r4, #12]
 800e140:	181b      	addge	r3, r3, r0
 800e142:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e146:	bfac      	ite	ge
 800e148:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e14a:	81a3      	strhlt	r3, [r4, #12]
 800e14c:	bd10      	pop	{r4, pc}

0800e14e <__swrite>:
 800e14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e152:	461f      	mov	r7, r3
 800e154:	898b      	ldrh	r3, [r1, #12]
 800e156:	05db      	lsls	r3, r3, #23
 800e158:	4605      	mov	r5, r0
 800e15a:	460c      	mov	r4, r1
 800e15c:	4616      	mov	r6, r2
 800e15e:	d505      	bpl.n	800e16c <__swrite+0x1e>
 800e160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e164:	2302      	movs	r3, #2
 800e166:	2200      	movs	r2, #0
 800e168:	f000 f84c 	bl	800e204 <_lseek_r>
 800e16c:	89a3      	ldrh	r3, [r4, #12]
 800e16e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e172:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e176:	81a3      	strh	r3, [r4, #12]
 800e178:	4632      	mov	r2, r6
 800e17a:	463b      	mov	r3, r7
 800e17c:	4628      	mov	r0, r5
 800e17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e182:	f000 b863 	b.w	800e24c <_write_r>

0800e186 <__sseek>:
 800e186:	b510      	push	{r4, lr}
 800e188:	460c      	mov	r4, r1
 800e18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e18e:	f000 f839 	bl	800e204 <_lseek_r>
 800e192:	1c43      	adds	r3, r0, #1
 800e194:	89a3      	ldrh	r3, [r4, #12]
 800e196:	bf15      	itete	ne
 800e198:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e19a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e19e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e1a2:	81a3      	strheq	r3, [r4, #12]
 800e1a4:	bf18      	it	ne
 800e1a6:	81a3      	strhne	r3, [r4, #12]
 800e1a8:	bd10      	pop	{r4, pc}

0800e1aa <__sclose>:
 800e1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1ae:	f000 b819 	b.w	800e1e4 <_close_r>

0800e1b2 <memcmp>:
 800e1b2:	b510      	push	{r4, lr}
 800e1b4:	3901      	subs	r1, #1
 800e1b6:	4402      	add	r2, r0
 800e1b8:	4290      	cmp	r0, r2
 800e1ba:	d101      	bne.n	800e1c0 <memcmp+0xe>
 800e1bc:	2000      	movs	r0, #0
 800e1be:	e005      	b.n	800e1cc <memcmp+0x1a>
 800e1c0:	7803      	ldrb	r3, [r0, #0]
 800e1c2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e1c6:	42a3      	cmp	r3, r4
 800e1c8:	d001      	beq.n	800e1ce <memcmp+0x1c>
 800e1ca:	1b18      	subs	r0, r3, r4
 800e1cc:	bd10      	pop	{r4, pc}
 800e1ce:	3001      	adds	r0, #1
 800e1d0:	e7f2      	b.n	800e1b8 <memcmp+0x6>

0800e1d2 <memset>:
 800e1d2:	4402      	add	r2, r0
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d100      	bne.n	800e1dc <memset+0xa>
 800e1da:	4770      	bx	lr
 800e1dc:	f803 1b01 	strb.w	r1, [r3], #1
 800e1e0:	e7f9      	b.n	800e1d6 <memset+0x4>
	...

0800e1e4 <_close_r>:
 800e1e4:	b538      	push	{r3, r4, r5, lr}
 800e1e6:	4d06      	ldr	r5, [pc, #24]	@ (800e200 <_close_r+0x1c>)
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	4604      	mov	r4, r0
 800e1ec:	4608      	mov	r0, r1
 800e1ee:	602b      	str	r3, [r5, #0]
 800e1f0:	f7f2 fcda 	bl	8000ba8 <_close>
 800e1f4:	1c43      	adds	r3, r0, #1
 800e1f6:	d102      	bne.n	800e1fe <_close_r+0x1a>
 800e1f8:	682b      	ldr	r3, [r5, #0]
 800e1fa:	b103      	cbz	r3, 800e1fe <_close_r+0x1a>
 800e1fc:	6023      	str	r3, [r4, #0]
 800e1fe:	bd38      	pop	{r3, r4, r5, pc}
 800e200:	20008528 	.word	0x20008528

0800e204 <_lseek_r>:
 800e204:	b538      	push	{r3, r4, r5, lr}
 800e206:	4d07      	ldr	r5, [pc, #28]	@ (800e224 <_lseek_r+0x20>)
 800e208:	4604      	mov	r4, r0
 800e20a:	4608      	mov	r0, r1
 800e20c:	4611      	mov	r1, r2
 800e20e:	2200      	movs	r2, #0
 800e210:	602a      	str	r2, [r5, #0]
 800e212:	461a      	mov	r2, r3
 800e214:	f7f2 fcef 	bl	8000bf6 <_lseek>
 800e218:	1c43      	adds	r3, r0, #1
 800e21a:	d102      	bne.n	800e222 <_lseek_r+0x1e>
 800e21c:	682b      	ldr	r3, [r5, #0]
 800e21e:	b103      	cbz	r3, 800e222 <_lseek_r+0x1e>
 800e220:	6023      	str	r3, [r4, #0]
 800e222:	bd38      	pop	{r3, r4, r5, pc}
 800e224:	20008528 	.word	0x20008528

0800e228 <_read_r>:
 800e228:	b538      	push	{r3, r4, r5, lr}
 800e22a:	4d07      	ldr	r5, [pc, #28]	@ (800e248 <_read_r+0x20>)
 800e22c:	4604      	mov	r4, r0
 800e22e:	4608      	mov	r0, r1
 800e230:	4611      	mov	r1, r2
 800e232:	2200      	movs	r2, #0
 800e234:	602a      	str	r2, [r5, #0]
 800e236:	461a      	mov	r2, r3
 800e238:	f7f2 fc7d 	bl	8000b36 <_read>
 800e23c:	1c43      	adds	r3, r0, #1
 800e23e:	d102      	bne.n	800e246 <_read_r+0x1e>
 800e240:	682b      	ldr	r3, [r5, #0]
 800e242:	b103      	cbz	r3, 800e246 <_read_r+0x1e>
 800e244:	6023      	str	r3, [r4, #0]
 800e246:	bd38      	pop	{r3, r4, r5, pc}
 800e248:	20008528 	.word	0x20008528

0800e24c <_write_r>:
 800e24c:	b538      	push	{r3, r4, r5, lr}
 800e24e:	4d07      	ldr	r5, [pc, #28]	@ (800e26c <_write_r+0x20>)
 800e250:	4604      	mov	r4, r0
 800e252:	4608      	mov	r0, r1
 800e254:	4611      	mov	r1, r2
 800e256:	2200      	movs	r2, #0
 800e258:	602a      	str	r2, [r5, #0]
 800e25a:	461a      	mov	r2, r3
 800e25c:	f7f2 fc88 	bl	8000b70 <_write>
 800e260:	1c43      	adds	r3, r0, #1
 800e262:	d102      	bne.n	800e26a <_write_r+0x1e>
 800e264:	682b      	ldr	r3, [r5, #0]
 800e266:	b103      	cbz	r3, 800e26a <_write_r+0x1e>
 800e268:	6023      	str	r3, [r4, #0]
 800e26a:	bd38      	pop	{r3, r4, r5, pc}
 800e26c:	20008528 	.word	0x20008528

0800e270 <__libc_init_array>:
 800e270:	b570      	push	{r4, r5, r6, lr}
 800e272:	4d0d      	ldr	r5, [pc, #52]	@ (800e2a8 <__libc_init_array+0x38>)
 800e274:	4c0d      	ldr	r4, [pc, #52]	@ (800e2ac <__libc_init_array+0x3c>)
 800e276:	1b64      	subs	r4, r4, r5
 800e278:	10a4      	asrs	r4, r4, #2
 800e27a:	2600      	movs	r6, #0
 800e27c:	42a6      	cmp	r6, r4
 800e27e:	d109      	bne.n	800e294 <__libc_init_array+0x24>
 800e280:	4d0b      	ldr	r5, [pc, #44]	@ (800e2b0 <__libc_init_array+0x40>)
 800e282:	4c0c      	ldr	r4, [pc, #48]	@ (800e2b4 <__libc_init_array+0x44>)
 800e284:	f000 fe4a 	bl	800ef1c <_init>
 800e288:	1b64      	subs	r4, r4, r5
 800e28a:	10a4      	asrs	r4, r4, #2
 800e28c:	2600      	movs	r6, #0
 800e28e:	42a6      	cmp	r6, r4
 800e290:	d105      	bne.n	800e29e <__libc_init_array+0x2e>
 800e292:	bd70      	pop	{r4, r5, r6, pc}
 800e294:	f855 3b04 	ldr.w	r3, [r5], #4
 800e298:	4798      	blx	r3
 800e29a:	3601      	adds	r6, #1
 800e29c:	e7ee      	b.n	800e27c <__libc_init_array+0xc>
 800e29e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2a2:	4798      	blx	r3
 800e2a4:	3601      	adds	r6, #1
 800e2a6:	e7f2      	b.n	800e28e <__libc_init_array+0x1e>
 800e2a8:	08011af8 	.word	0x08011af8
 800e2ac:	08011af8 	.word	0x08011af8
 800e2b0:	08011af8 	.word	0x08011af8
 800e2b4:	08011afc 	.word	0x08011afc

0800e2b8 <__retarget_lock_init_recursive>:
 800e2b8:	4770      	bx	lr

0800e2ba <__retarget_lock_acquire_recursive>:
 800e2ba:	4770      	bx	lr

0800e2bc <__retarget_lock_release_recursive>:
 800e2bc:	4770      	bx	lr

0800e2be <memcpy>:
 800e2be:	440a      	add	r2, r1
 800e2c0:	4291      	cmp	r1, r2
 800e2c2:	f100 33ff 	add.w	r3, r0, #4294967295
 800e2c6:	d100      	bne.n	800e2ca <memcpy+0xc>
 800e2c8:	4770      	bx	lr
 800e2ca:	b510      	push	{r4, lr}
 800e2cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e2d4:	4291      	cmp	r1, r2
 800e2d6:	d1f9      	bne.n	800e2cc <memcpy+0xe>
 800e2d8:	bd10      	pop	{r4, pc}
	...

0800e2dc <__assert_func>:
 800e2dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e2de:	4614      	mov	r4, r2
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	4b09      	ldr	r3, [pc, #36]	@ (800e308 <__assert_func+0x2c>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	4605      	mov	r5, r0
 800e2e8:	68d8      	ldr	r0, [r3, #12]
 800e2ea:	b954      	cbnz	r4, 800e302 <__assert_func+0x26>
 800e2ec:	4b07      	ldr	r3, [pc, #28]	@ (800e30c <__assert_func+0x30>)
 800e2ee:	461c      	mov	r4, r3
 800e2f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e2f4:	9100      	str	r1, [sp, #0]
 800e2f6:	462b      	mov	r3, r5
 800e2f8:	4905      	ldr	r1, [pc, #20]	@ (800e310 <__assert_func+0x34>)
 800e2fa:	f000 fc89 	bl	800ec10 <fiprintf>
 800e2fe:	f000 fd3d 	bl	800ed7c <abort>
 800e302:	4b04      	ldr	r3, [pc, #16]	@ (800e314 <__assert_func+0x38>)
 800e304:	e7f4      	b.n	800e2f0 <__assert_func+0x14>
 800e306:	bf00      	nop
 800e308:	20000038 	.word	0x20000038
 800e30c:	08011abc 	.word	0x08011abc
 800e310:	08011a8e 	.word	0x08011a8e
 800e314:	08011a81 	.word	0x08011a81

0800e318 <_free_r>:
 800e318:	b538      	push	{r3, r4, r5, lr}
 800e31a:	4605      	mov	r5, r0
 800e31c:	2900      	cmp	r1, #0
 800e31e:	d041      	beq.n	800e3a4 <_free_r+0x8c>
 800e320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e324:	1f0c      	subs	r4, r1, #4
 800e326:	2b00      	cmp	r3, #0
 800e328:	bfb8      	it	lt
 800e32a:	18e4      	addlt	r4, r4, r3
 800e32c:	f000 f8e8 	bl	800e500 <__malloc_lock>
 800e330:	4a1d      	ldr	r2, [pc, #116]	@ (800e3a8 <_free_r+0x90>)
 800e332:	6813      	ldr	r3, [r2, #0]
 800e334:	b933      	cbnz	r3, 800e344 <_free_r+0x2c>
 800e336:	6063      	str	r3, [r4, #4]
 800e338:	6014      	str	r4, [r2, #0]
 800e33a:	4628      	mov	r0, r5
 800e33c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e340:	f000 b8e4 	b.w	800e50c <__malloc_unlock>
 800e344:	42a3      	cmp	r3, r4
 800e346:	d908      	bls.n	800e35a <_free_r+0x42>
 800e348:	6820      	ldr	r0, [r4, #0]
 800e34a:	1821      	adds	r1, r4, r0
 800e34c:	428b      	cmp	r3, r1
 800e34e:	bf01      	itttt	eq
 800e350:	6819      	ldreq	r1, [r3, #0]
 800e352:	685b      	ldreq	r3, [r3, #4]
 800e354:	1809      	addeq	r1, r1, r0
 800e356:	6021      	streq	r1, [r4, #0]
 800e358:	e7ed      	b.n	800e336 <_free_r+0x1e>
 800e35a:	461a      	mov	r2, r3
 800e35c:	685b      	ldr	r3, [r3, #4]
 800e35e:	b10b      	cbz	r3, 800e364 <_free_r+0x4c>
 800e360:	42a3      	cmp	r3, r4
 800e362:	d9fa      	bls.n	800e35a <_free_r+0x42>
 800e364:	6811      	ldr	r1, [r2, #0]
 800e366:	1850      	adds	r0, r2, r1
 800e368:	42a0      	cmp	r0, r4
 800e36a:	d10b      	bne.n	800e384 <_free_r+0x6c>
 800e36c:	6820      	ldr	r0, [r4, #0]
 800e36e:	4401      	add	r1, r0
 800e370:	1850      	adds	r0, r2, r1
 800e372:	4283      	cmp	r3, r0
 800e374:	6011      	str	r1, [r2, #0]
 800e376:	d1e0      	bne.n	800e33a <_free_r+0x22>
 800e378:	6818      	ldr	r0, [r3, #0]
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	6053      	str	r3, [r2, #4]
 800e37e:	4408      	add	r0, r1
 800e380:	6010      	str	r0, [r2, #0]
 800e382:	e7da      	b.n	800e33a <_free_r+0x22>
 800e384:	d902      	bls.n	800e38c <_free_r+0x74>
 800e386:	230c      	movs	r3, #12
 800e388:	602b      	str	r3, [r5, #0]
 800e38a:	e7d6      	b.n	800e33a <_free_r+0x22>
 800e38c:	6820      	ldr	r0, [r4, #0]
 800e38e:	1821      	adds	r1, r4, r0
 800e390:	428b      	cmp	r3, r1
 800e392:	bf04      	itt	eq
 800e394:	6819      	ldreq	r1, [r3, #0]
 800e396:	685b      	ldreq	r3, [r3, #4]
 800e398:	6063      	str	r3, [r4, #4]
 800e39a:	bf04      	itt	eq
 800e39c:	1809      	addeq	r1, r1, r0
 800e39e:	6021      	streq	r1, [r4, #0]
 800e3a0:	6054      	str	r4, [r2, #4]
 800e3a2:	e7ca      	b.n	800e33a <_free_r+0x22>
 800e3a4:	bd38      	pop	{r3, r4, r5, pc}
 800e3a6:	bf00      	nop
 800e3a8:	20008534 	.word	0x20008534

0800e3ac <malloc>:
 800e3ac:	4b02      	ldr	r3, [pc, #8]	@ (800e3b8 <malloc+0xc>)
 800e3ae:	4601      	mov	r1, r0
 800e3b0:	6818      	ldr	r0, [r3, #0]
 800e3b2:	f000 b825 	b.w	800e400 <_malloc_r>
 800e3b6:	bf00      	nop
 800e3b8:	20000038 	.word	0x20000038

0800e3bc <sbrk_aligned>:
 800e3bc:	b570      	push	{r4, r5, r6, lr}
 800e3be:	4e0f      	ldr	r6, [pc, #60]	@ (800e3fc <sbrk_aligned+0x40>)
 800e3c0:	460c      	mov	r4, r1
 800e3c2:	6831      	ldr	r1, [r6, #0]
 800e3c4:	4605      	mov	r5, r0
 800e3c6:	b911      	cbnz	r1, 800e3ce <sbrk_aligned+0x12>
 800e3c8:	f000 fcc8 	bl	800ed5c <_sbrk_r>
 800e3cc:	6030      	str	r0, [r6, #0]
 800e3ce:	4621      	mov	r1, r4
 800e3d0:	4628      	mov	r0, r5
 800e3d2:	f000 fcc3 	bl	800ed5c <_sbrk_r>
 800e3d6:	1c43      	adds	r3, r0, #1
 800e3d8:	d103      	bne.n	800e3e2 <sbrk_aligned+0x26>
 800e3da:	f04f 34ff 	mov.w	r4, #4294967295
 800e3de:	4620      	mov	r0, r4
 800e3e0:	bd70      	pop	{r4, r5, r6, pc}
 800e3e2:	1cc4      	adds	r4, r0, #3
 800e3e4:	f024 0403 	bic.w	r4, r4, #3
 800e3e8:	42a0      	cmp	r0, r4
 800e3ea:	d0f8      	beq.n	800e3de <sbrk_aligned+0x22>
 800e3ec:	1a21      	subs	r1, r4, r0
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	f000 fcb4 	bl	800ed5c <_sbrk_r>
 800e3f4:	3001      	adds	r0, #1
 800e3f6:	d1f2      	bne.n	800e3de <sbrk_aligned+0x22>
 800e3f8:	e7ef      	b.n	800e3da <sbrk_aligned+0x1e>
 800e3fa:	bf00      	nop
 800e3fc:	20008530 	.word	0x20008530

0800e400 <_malloc_r>:
 800e400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e404:	1ccd      	adds	r5, r1, #3
 800e406:	f025 0503 	bic.w	r5, r5, #3
 800e40a:	3508      	adds	r5, #8
 800e40c:	2d0c      	cmp	r5, #12
 800e40e:	bf38      	it	cc
 800e410:	250c      	movcc	r5, #12
 800e412:	2d00      	cmp	r5, #0
 800e414:	4606      	mov	r6, r0
 800e416:	db01      	blt.n	800e41c <_malloc_r+0x1c>
 800e418:	42a9      	cmp	r1, r5
 800e41a:	d904      	bls.n	800e426 <_malloc_r+0x26>
 800e41c:	230c      	movs	r3, #12
 800e41e:	6033      	str	r3, [r6, #0]
 800e420:	2000      	movs	r0, #0
 800e422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e426:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e4fc <_malloc_r+0xfc>
 800e42a:	f000 f869 	bl	800e500 <__malloc_lock>
 800e42e:	f8d8 3000 	ldr.w	r3, [r8]
 800e432:	461c      	mov	r4, r3
 800e434:	bb44      	cbnz	r4, 800e488 <_malloc_r+0x88>
 800e436:	4629      	mov	r1, r5
 800e438:	4630      	mov	r0, r6
 800e43a:	f7ff ffbf 	bl	800e3bc <sbrk_aligned>
 800e43e:	1c43      	adds	r3, r0, #1
 800e440:	4604      	mov	r4, r0
 800e442:	d158      	bne.n	800e4f6 <_malloc_r+0xf6>
 800e444:	f8d8 4000 	ldr.w	r4, [r8]
 800e448:	4627      	mov	r7, r4
 800e44a:	2f00      	cmp	r7, #0
 800e44c:	d143      	bne.n	800e4d6 <_malloc_r+0xd6>
 800e44e:	2c00      	cmp	r4, #0
 800e450:	d04b      	beq.n	800e4ea <_malloc_r+0xea>
 800e452:	6823      	ldr	r3, [r4, #0]
 800e454:	4639      	mov	r1, r7
 800e456:	4630      	mov	r0, r6
 800e458:	eb04 0903 	add.w	r9, r4, r3
 800e45c:	f000 fc7e 	bl	800ed5c <_sbrk_r>
 800e460:	4581      	cmp	r9, r0
 800e462:	d142      	bne.n	800e4ea <_malloc_r+0xea>
 800e464:	6821      	ldr	r1, [r4, #0]
 800e466:	1a6d      	subs	r5, r5, r1
 800e468:	4629      	mov	r1, r5
 800e46a:	4630      	mov	r0, r6
 800e46c:	f7ff ffa6 	bl	800e3bc <sbrk_aligned>
 800e470:	3001      	adds	r0, #1
 800e472:	d03a      	beq.n	800e4ea <_malloc_r+0xea>
 800e474:	6823      	ldr	r3, [r4, #0]
 800e476:	442b      	add	r3, r5
 800e478:	6023      	str	r3, [r4, #0]
 800e47a:	f8d8 3000 	ldr.w	r3, [r8]
 800e47e:	685a      	ldr	r2, [r3, #4]
 800e480:	bb62      	cbnz	r2, 800e4dc <_malloc_r+0xdc>
 800e482:	f8c8 7000 	str.w	r7, [r8]
 800e486:	e00f      	b.n	800e4a8 <_malloc_r+0xa8>
 800e488:	6822      	ldr	r2, [r4, #0]
 800e48a:	1b52      	subs	r2, r2, r5
 800e48c:	d420      	bmi.n	800e4d0 <_malloc_r+0xd0>
 800e48e:	2a0b      	cmp	r2, #11
 800e490:	d917      	bls.n	800e4c2 <_malloc_r+0xc2>
 800e492:	1961      	adds	r1, r4, r5
 800e494:	42a3      	cmp	r3, r4
 800e496:	6025      	str	r5, [r4, #0]
 800e498:	bf18      	it	ne
 800e49a:	6059      	strne	r1, [r3, #4]
 800e49c:	6863      	ldr	r3, [r4, #4]
 800e49e:	bf08      	it	eq
 800e4a0:	f8c8 1000 	streq.w	r1, [r8]
 800e4a4:	5162      	str	r2, [r4, r5]
 800e4a6:	604b      	str	r3, [r1, #4]
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	f000 f82f 	bl	800e50c <__malloc_unlock>
 800e4ae:	f104 000b 	add.w	r0, r4, #11
 800e4b2:	1d23      	adds	r3, r4, #4
 800e4b4:	f020 0007 	bic.w	r0, r0, #7
 800e4b8:	1ac2      	subs	r2, r0, r3
 800e4ba:	bf1c      	itt	ne
 800e4bc:	1a1b      	subne	r3, r3, r0
 800e4be:	50a3      	strne	r3, [r4, r2]
 800e4c0:	e7af      	b.n	800e422 <_malloc_r+0x22>
 800e4c2:	6862      	ldr	r2, [r4, #4]
 800e4c4:	42a3      	cmp	r3, r4
 800e4c6:	bf0c      	ite	eq
 800e4c8:	f8c8 2000 	streq.w	r2, [r8]
 800e4cc:	605a      	strne	r2, [r3, #4]
 800e4ce:	e7eb      	b.n	800e4a8 <_malloc_r+0xa8>
 800e4d0:	4623      	mov	r3, r4
 800e4d2:	6864      	ldr	r4, [r4, #4]
 800e4d4:	e7ae      	b.n	800e434 <_malloc_r+0x34>
 800e4d6:	463c      	mov	r4, r7
 800e4d8:	687f      	ldr	r7, [r7, #4]
 800e4da:	e7b6      	b.n	800e44a <_malloc_r+0x4a>
 800e4dc:	461a      	mov	r2, r3
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	42a3      	cmp	r3, r4
 800e4e2:	d1fb      	bne.n	800e4dc <_malloc_r+0xdc>
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	6053      	str	r3, [r2, #4]
 800e4e8:	e7de      	b.n	800e4a8 <_malloc_r+0xa8>
 800e4ea:	230c      	movs	r3, #12
 800e4ec:	6033      	str	r3, [r6, #0]
 800e4ee:	4630      	mov	r0, r6
 800e4f0:	f000 f80c 	bl	800e50c <__malloc_unlock>
 800e4f4:	e794      	b.n	800e420 <_malloc_r+0x20>
 800e4f6:	6005      	str	r5, [r0, #0]
 800e4f8:	e7d6      	b.n	800e4a8 <_malloc_r+0xa8>
 800e4fa:	bf00      	nop
 800e4fc:	20008534 	.word	0x20008534

0800e500 <__malloc_lock>:
 800e500:	4801      	ldr	r0, [pc, #4]	@ (800e508 <__malloc_lock+0x8>)
 800e502:	f7ff beda 	b.w	800e2ba <__retarget_lock_acquire_recursive>
 800e506:	bf00      	nop
 800e508:	2000852c 	.word	0x2000852c

0800e50c <__malloc_unlock>:
 800e50c:	4801      	ldr	r0, [pc, #4]	@ (800e514 <__malloc_unlock+0x8>)
 800e50e:	f7ff bed5 	b.w	800e2bc <__retarget_lock_release_recursive>
 800e512:	bf00      	nop
 800e514:	2000852c 	.word	0x2000852c

0800e518 <__sfputc_r>:
 800e518:	6893      	ldr	r3, [r2, #8]
 800e51a:	3b01      	subs	r3, #1
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	b410      	push	{r4}
 800e520:	6093      	str	r3, [r2, #8]
 800e522:	da08      	bge.n	800e536 <__sfputc_r+0x1e>
 800e524:	6994      	ldr	r4, [r2, #24]
 800e526:	42a3      	cmp	r3, r4
 800e528:	db01      	blt.n	800e52e <__sfputc_r+0x16>
 800e52a:	290a      	cmp	r1, #10
 800e52c:	d103      	bne.n	800e536 <__sfputc_r+0x1e>
 800e52e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e532:	f000 bb7f 	b.w	800ec34 <__swbuf_r>
 800e536:	6813      	ldr	r3, [r2, #0]
 800e538:	1c58      	adds	r0, r3, #1
 800e53a:	6010      	str	r0, [r2, #0]
 800e53c:	7019      	strb	r1, [r3, #0]
 800e53e:	4608      	mov	r0, r1
 800e540:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e544:	4770      	bx	lr

0800e546 <__sfputs_r>:
 800e546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e548:	4606      	mov	r6, r0
 800e54a:	460f      	mov	r7, r1
 800e54c:	4614      	mov	r4, r2
 800e54e:	18d5      	adds	r5, r2, r3
 800e550:	42ac      	cmp	r4, r5
 800e552:	d101      	bne.n	800e558 <__sfputs_r+0x12>
 800e554:	2000      	movs	r0, #0
 800e556:	e007      	b.n	800e568 <__sfputs_r+0x22>
 800e558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e55c:	463a      	mov	r2, r7
 800e55e:	4630      	mov	r0, r6
 800e560:	f7ff ffda 	bl	800e518 <__sfputc_r>
 800e564:	1c43      	adds	r3, r0, #1
 800e566:	d1f3      	bne.n	800e550 <__sfputs_r+0xa>
 800e568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e56c <_vfiprintf_r>:
 800e56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e570:	460d      	mov	r5, r1
 800e572:	b09d      	sub	sp, #116	@ 0x74
 800e574:	4614      	mov	r4, r2
 800e576:	4698      	mov	r8, r3
 800e578:	4606      	mov	r6, r0
 800e57a:	b118      	cbz	r0, 800e584 <_vfiprintf_r+0x18>
 800e57c:	6a03      	ldr	r3, [r0, #32]
 800e57e:	b90b      	cbnz	r3, 800e584 <_vfiprintf_r+0x18>
 800e580:	f7ff fd8c 	bl	800e09c <__sinit>
 800e584:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e586:	07d9      	lsls	r1, r3, #31
 800e588:	d405      	bmi.n	800e596 <_vfiprintf_r+0x2a>
 800e58a:	89ab      	ldrh	r3, [r5, #12]
 800e58c:	059a      	lsls	r2, r3, #22
 800e58e:	d402      	bmi.n	800e596 <_vfiprintf_r+0x2a>
 800e590:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e592:	f7ff fe92 	bl	800e2ba <__retarget_lock_acquire_recursive>
 800e596:	89ab      	ldrh	r3, [r5, #12]
 800e598:	071b      	lsls	r3, r3, #28
 800e59a:	d501      	bpl.n	800e5a0 <_vfiprintf_r+0x34>
 800e59c:	692b      	ldr	r3, [r5, #16]
 800e59e:	b99b      	cbnz	r3, 800e5c8 <_vfiprintf_r+0x5c>
 800e5a0:	4629      	mov	r1, r5
 800e5a2:	4630      	mov	r0, r6
 800e5a4:	f000 fb84 	bl	800ecb0 <__swsetup_r>
 800e5a8:	b170      	cbz	r0, 800e5c8 <_vfiprintf_r+0x5c>
 800e5aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5ac:	07dc      	lsls	r4, r3, #31
 800e5ae:	d504      	bpl.n	800e5ba <_vfiprintf_r+0x4e>
 800e5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5b4:	b01d      	add	sp, #116	@ 0x74
 800e5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ba:	89ab      	ldrh	r3, [r5, #12]
 800e5bc:	0598      	lsls	r0, r3, #22
 800e5be:	d4f7      	bmi.n	800e5b0 <_vfiprintf_r+0x44>
 800e5c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5c2:	f7ff fe7b 	bl	800e2bc <__retarget_lock_release_recursive>
 800e5c6:	e7f3      	b.n	800e5b0 <_vfiprintf_r+0x44>
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5cc:	2320      	movs	r3, #32
 800e5ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e5d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5d6:	2330      	movs	r3, #48	@ 0x30
 800e5d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e788 <_vfiprintf_r+0x21c>
 800e5dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e5e0:	f04f 0901 	mov.w	r9, #1
 800e5e4:	4623      	mov	r3, r4
 800e5e6:	469a      	mov	sl, r3
 800e5e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5ec:	b10a      	cbz	r2, 800e5f2 <_vfiprintf_r+0x86>
 800e5ee:	2a25      	cmp	r2, #37	@ 0x25
 800e5f0:	d1f9      	bne.n	800e5e6 <_vfiprintf_r+0x7a>
 800e5f2:	ebba 0b04 	subs.w	fp, sl, r4
 800e5f6:	d00b      	beq.n	800e610 <_vfiprintf_r+0xa4>
 800e5f8:	465b      	mov	r3, fp
 800e5fa:	4622      	mov	r2, r4
 800e5fc:	4629      	mov	r1, r5
 800e5fe:	4630      	mov	r0, r6
 800e600:	f7ff ffa1 	bl	800e546 <__sfputs_r>
 800e604:	3001      	adds	r0, #1
 800e606:	f000 80a7 	beq.w	800e758 <_vfiprintf_r+0x1ec>
 800e60a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e60c:	445a      	add	r2, fp
 800e60e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e610:	f89a 3000 	ldrb.w	r3, [sl]
 800e614:	2b00      	cmp	r3, #0
 800e616:	f000 809f 	beq.w	800e758 <_vfiprintf_r+0x1ec>
 800e61a:	2300      	movs	r3, #0
 800e61c:	f04f 32ff 	mov.w	r2, #4294967295
 800e620:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e624:	f10a 0a01 	add.w	sl, sl, #1
 800e628:	9304      	str	r3, [sp, #16]
 800e62a:	9307      	str	r3, [sp, #28]
 800e62c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e630:	931a      	str	r3, [sp, #104]	@ 0x68
 800e632:	4654      	mov	r4, sl
 800e634:	2205      	movs	r2, #5
 800e636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e63a:	4853      	ldr	r0, [pc, #332]	@ (800e788 <_vfiprintf_r+0x21c>)
 800e63c:	f7f1 fde8 	bl	8000210 <memchr>
 800e640:	9a04      	ldr	r2, [sp, #16]
 800e642:	b9d8      	cbnz	r0, 800e67c <_vfiprintf_r+0x110>
 800e644:	06d1      	lsls	r1, r2, #27
 800e646:	bf44      	itt	mi
 800e648:	2320      	movmi	r3, #32
 800e64a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e64e:	0713      	lsls	r3, r2, #28
 800e650:	bf44      	itt	mi
 800e652:	232b      	movmi	r3, #43	@ 0x2b
 800e654:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e658:	f89a 3000 	ldrb.w	r3, [sl]
 800e65c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e65e:	d015      	beq.n	800e68c <_vfiprintf_r+0x120>
 800e660:	9a07      	ldr	r2, [sp, #28]
 800e662:	4654      	mov	r4, sl
 800e664:	2000      	movs	r0, #0
 800e666:	f04f 0c0a 	mov.w	ip, #10
 800e66a:	4621      	mov	r1, r4
 800e66c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e670:	3b30      	subs	r3, #48	@ 0x30
 800e672:	2b09      	cmp	r3, #9
 800e674:	d94b      	bls.n	800e70e <_vfiprintf_r+0x1a2>
 800e676:	b1b0      	cbz	r0, 800e6a6 <_vfiprintf_r+0x13a>
 800e678:	9207      	str	r2, [sp, #28]
 800e67a:	e014      	b.n	800e6a6 <_vfiprintf_r+0x13a>
 800e67c:	eba0 0308 	sub.w	r3, r0, r8
 800e680:	fa09 f303 	lsl.w	r3, r9, r3
 800e684:	4313      	orrs	r3, r2
 800e686:	9304      	str	r3, [sp, #16]
 800e688:	46a2      	mov	sl, r4
 800e68a:	e7d2      	b.n	800e632 <_vfiprintf_r+0xc6>
 800e68c:	9b03      	ldr	r3, [sp, #12]
 800e68e:	1d19      	adds	r1, r3, #4
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	9103      	str	r1, [sp, #12]
 800e694:	2b00      	cmp	r3, #0
 800e696:	bfbb      	ittet	lt
 800e698:	425b      	neglt	r3, r3
 800e69a:	f042 0202 	orrlt.w	r2, r2, #2
 800e69e:	9307      	strge	r3, [sp, #28]
 800e6a0:	9307      	strlt	r3, [sp, #28]
 800e6a2:	bfb8      	it	lt
 800e6a4:	9204      	strlt	r2, [sp, #16]
 800e6a6:	7823      	ldrb	r3, [r4, #0]
 800e6a8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e6aa:	d10a      	bne.n	800e6c2 <_vfiprintf_r+0x156>
 800e6ac:	7863      	ldrb	r3, [r4, #1]
 800e6ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6b0:	d132      	bne.n	800e718 <_vfiprintf_r+0x1ac>
 800e6b2:	9b03      	ldr	r3, [sp, #12]
 800e6b4:	1d1a      	adds	r2, r3, #4
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	9203      	str	r2, [sp, #12]
 800e6ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e6be:	3402      	adds	r4, #2
 800e6c0:	9305      	str	r3, [sp, #20]
 800e6c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e798 <_vfiprintf_r+0x22c>
 800e6c6:	7821      	ldrb	r1, [r4, #0]
 800e6c8:	2203      	movs	r2, #3
 800e6ca:	4650      	mov	r0, sl
 800e6cc:	f7f1 fda0 	bl	8000210 <memchr>
 800e6d0:	b138      	cbz	r0, 800e6e2 <_vfiprintf_r+0x176>
 800e6d2:	9b04      	ldr	r3, [sp, #16]
 800e6d4:	eba0 000a 	sub.w	r0, r0, sl
 800e6d8:	2240      	movs	r2, #64	@ 0x40
 800e6da:	4082      	lsls	r2, r0
 800e6dc:	4313      	orrs	r3, r2
 800e6de:	3401      	adds	r4, #1
 800e6e0:	9304      	str	r3, [sp, #16]
 800e6e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6e6:	4829      	ldr	r0, [pc, #164]	@ (800e78c <_vfiprintf_r+0x220>)
 800e6e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e6ec:	2206      	movs	r2, #6
 800e6ee:	f7f1 fd8f 	bl	8000210 <memchr>
 800e6f2:	2800      	cmp	r0, #0
 800e6f4:	d03f      	beq.n	800e776 <_vfiprintf_r+0x20a>
 800e6f6:	4b26      	ldr	r3, [pc, #152]	@ (800e790 <_vfiprintf_r+0x224>)
 800e6f8:	bb1b      	cbnz	r3, 800e742 <_vfiprintf_r+0x1d6>
 800e6fa:	9b03      	ldr	r3, [sp, #12]
 800e6fc:	3307      	adds	r3, #7
 800e6fe:	f023 0307 	bic.w	r3, r3, #7
 800e702:	3308      	adds	r3, #8
 800e704:	9303      	str	r3, [sp, #12]
 800e706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e708:	443b      	add	r3, r7
 800e70a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e70c:	e76a      	b.n	800e5e4 <_vfiprintf_r+0x78>
 800e70e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e712:	460c      	mov	r4, r1
 800e714:	2001      	movs	r0, #1
 800e716:	e7a8      	b.n	800e66a <_vfiprintf_r+0xfe>
 800e718:	2300      	movs	r3, #0
 800e71a:	3401      	adds	r4, #1
 800e71c:	9305      	str	r3, [sp, #20]
 800e71e:	4619      	mov	r1, r3
 800e720:	f04f 0c0a 	mov.w	ip, #10
 800e724:	4620      	mov	r0, r4
 800e726:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e72a:	3a30      	subs	r2, #48	@ 0x30
 800e72c:	2a09      	cmp	r2, #9
 800e72e:	d903      	bls.n	800e738 <_vfiprintf_r+0x1cc>
 800e730:	2b00      	cmp	r3, #0
 800e732:	d0c6      	beq.n	800e6c2 <_vfiprintf_r+0x156>
 800e734:	9105      	str	r1, [sp, #20]
 800e736:	e7c4      	b.n	800e6c2 <_vfiprintf_r+0x156>
 800e738:	fb0c 2101 	mla	r1, ip, r1, r2
 800e73c:	4604      	mov	r4, r0
 800e73e:	2301      	movs	r3, #1
 800e740:	e7f0      	b.n	800e724 <_vfiprintf_r+0x1b8>
 800e742:	ab03      	add	r3, sp, #12
 800e744:	9300      	str	r3, [sp, #0]
 800e746:	462a      	mov	r2, r5
 800e748:	4b12      	ldr	r3, [pc, #72]	@ (800e794 <_vfiprintf_r+0x228>)
 800e74a:	a904      	add	r1, sp, #16
 800e74c:	4630      	mov	r0, r6
 800e74e:	f3af 8000 	nop.w
 800e752:	4607      	mov	r7, r0
 800e754:	1c78      	adds	r0, r7, #1
 800e756:	d1d6      	bne.n	800e706 <_vfiprintf_r+0x19a>
 800e758:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e75a:	07d9      	lsls	r1, r3, #31
 800e75c:	d405      	bmi.n	800e76a <_vfiprintf_r+0x1fe>
 800e75e:	89ab      	ldrh	r3, [r5, #12]
 800e760:	059a      	lsls	r2, r3, #22
 800e762:	d402      	bmi.n	800e76a <_vfiprintf_r+0x1fe>
 800e764:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e766:	f7ff fda9 	bl	800e2bc <__retarget_lock_release_recursive>
 800e76a:	89ab      	ldrh	r3, [r5, #12]
 800e76c:	065b      	lsls	r3, r3, #25
 800e76e:	f53f af1f 	bmi.w	800e5b0 <_vfiprintf_r+0x44>
 800e772:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e774:	e71e      	b.n	800e5b4 <_vfiprintf_r+0x48>
 800e776:	ab03      	add	r3, sp, #12
 800e778:	9300      	str	r3, [sp, #0]
 800e77a:	462a      	mov	r2, r5
 800e77c:	4b05      	ldr	r3, [pc, #20]	@ (800e794 <_vfiprintf_r+0x228>)
 800e77e:	a904      	add	r1, sp, #16
 800e780:	4630      	mov	r0, r6
 800e782:	f000 f879 	bl	800e878 <_printf_i>
 800e786:	e7e4      	b.n	800e752 <_vfiprintf_r+0x1e6>
 800e788:	08011abd 	.word	0x08011abd
 800e78c:	08011ac7 	.word	0x08011ac7
 800e790:	00000000 	.word	0x00000000
 800e794:	0800e547 	.word	0x0800e547
 800e798:	08011ac3 	.word	0x08011ac3

0800e79c <_printf_common>:
 800e79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7a0:	4616      	mov	r6, r2
 800e7a2:	4698      	mov	r8, r3
 800e7a4:	688a      	ldr	r2, [r1, #8]
 800e7a6:	690b      	ldr	r3, [r1, #16]
 800e7a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	bfb8      	it	lt
 800e7b0:	4613      	movlt	r3, r2
 800e7b2:	6033      	str	r3, [r6, #0]
 800e7b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e7b8:	4607      	mov	r7, r0
 800e7ba:	460c      	mov	r4, r1
 800e7bc:	b10a      	cbz	r2, 800e7c2 <_printf_common+0x26>
 800e7be:	3301      	adds	r3, #1
 800e7c0:	6033      	str	r3, [r6, #0]
 800e7c2:	6823      	ldr	r3, [r4, #0]
 800e7c4:	0699      	lsls	r1, r3, #26
 800e7c6:	bf42      	ittt	mi
 800e7c8:	6833      	ldrmi	r3, [r6, #0]
 800e7ca:	3302      	addmi	r3, #2
 800e7cc:	6033      	strmi	r3, [r6, #0]
 800e7ce:	6825      	ldr	r5, [r4, #0]
 800e7d0:	f015 0506 	ands.w	r5, r5, #6
 800e7d4:	d106      	bne.n	800e7e4 <_printf_common+0x48>
 800e7d6:	f104 0a19 	add.w	sl, r4, #25
 800e7da:	68e3      	ldr	r3, [r4, #12]
 800e7dc:	6832      	ldr	r2, [r6, #0]
 800e7de:	1a9b      	subs	r3, r3, r2
 800e7e0:	42ab      	cmp	r3, r5
 800e7e2:	dc26      	bgt.n	800e832 <_printf_common+0x96>
 800e7e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e7e8:	6822      	ldr	r2, [r4, #0]
 800e7ea:	3b00      	subs	r3, #0
 800e7ec:	bf18      	it	ne
 800e7ee:	2301      	movne	r3, #1
 800e7f0:	0692      	lsls	r2, r2, #26
 800e7f2:	d42b      	bmi.n	800e84c <_printf_common+0xb0>
 800e7f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e7f8:	4641      	mov	r1, r8
 800e7fa:	4638      	mov	r0, r7
 800e7fc:	47c8      	blx	r9
 800e7fe:	3001      	adds	r0, #1
 800e800:	d01e      	beq.n	800e840 <_printf_common+0xa4>
 800e802:	6823      	ldr	r3, [r4, #0]
 800e804:	6922      	ldr	r2, [r4, #16]
 800e806:	f003 0306 	and.w	r3, r3, #6
 800e80a:	2b04      	cmp	r3, #4
 800e80c:	bf02      	ittt	eq
 800e80e:	68e5      	ldreq	r5, [r4, #12]
 800e810:	6833      	ldreq	r3, [r6, #0]
 800e812:	1aed      	subeq	r5, r5, r3
 800e814:	68a3      	ldr	r3, [r4, #8]
 800e816:	bf0c      	ite	eq
 800e818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e81c:	2500      	movne	r5, #0
 800e81e:	4293      	cmp	r3, r2
 800e820:	bfc4      	itt	gt
 800e822:	1a9b      	subgt	r3, r3, r2
 800e824:	18ed      	addgt	r5, r5, r3
 800e826:	2600      	movs	r6, #0
 800e828:	341a      	adds	r4, #26
 800e82a:	42b5      	cmp	r5, r6
 800e82c:	d11a      	bne.n	800e864 <_printf_common+0xc8>
 800e82e:	2000      	movs	r0, #0
 800e830:	e008      	b.n	800e844 <_printf_common+0xa8>
 800e832:	2301      	movs	r3, #1
 800e834:	4652      	mov	r2, sl
 800e836:	4641      	mov	r1, r8
 800e838:	4638      	mov	r0, r7
 800e83a:	47c8      	blx	r9
 800e83c:	3001      	adds	r0, #1
 800e83e:	d103      	bne.n	800e848 <_printf_common+0xac>
 800e840:	f04f 30ff 	mov.w	r0, #4294967295
 800e844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e848:	3501      	adds	r5, #1
 800e84a:	e7c6      	b.n	800e7da <_printf_common+0x3e>
 800e84c:	18e1      	adds	r1, r4, r3
 800e84e:	1c5a      	adds	r2, r3, #1
 800e850:	2030      	movs	r0, #48	@ 0x30
 800e852:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e856:	4422      	add	r2, r4
 800e858:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e85c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e860:	3302      	adds	r3, #2
 800e862:	e7c7      	b.n	800e7f4 <_printf_common+0x58>
 800e864:	2301      	movs	r3, #1
 800e866:	4622      	mov	r2, r4
 800e868:	4641      	mov	r1, r8
 800e86a:	4638      	mov	r0, r7
 800e86c:	47c8      	blx	r9
 800e86e:	3001      	adds	r0, #1
 800e870:	d0e6      	beq.n	800e840 <_printf_common+0xa4>
 800e872:	3601      	adds	r6, #1
 800e874:	e7d9      	b.n	800e82a <_printf_common+0x8e>
	...

0800e878 <_printf_i>:
 800e878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e87c:	7e0f      	ldrb	r7, [r1, #24]
 800e87e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e880:	2f78      	cmp	r7, #120	@ 0x78
 800e882:	4691      	mov	r9, r2
 800e884:	4680      	mov	r8, r0
 800e886:	460c      	mov	r4, r1
 800e888:	469a      	mov	sl, r3
 800e88a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e88e:	d807      	bhi.n	800e8a0 <_printf_i+0x28>
 800e890:	2f62      	cmp	r7, #98	@ 0x62
 800e892:	d80a      	bhi.n	800e8aa <_printf_i+0x32>
 800e894:	2f00      	cmp	r7, #0
 800e896:	f000 80d2 	beq.w	800ea3e <_printf_i+0x1c6>
 800e89a:	2f58      	cmp	r7, #88	@ 0x58
 800e89c:	f000 80b9 	beq.w	800ea12 <_printf_i+0x19a>
 800e8a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e8a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e8a8:	e03a      	b.n	800e920 <_printf_i+0xa8>
 800e8aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e8ae:	2b15      	cmp	r3, #21
 800e8b0:	d8f6      	bhi.n	800e8a0 <_printf_i+0x28>
 800e8b2:	a101      	add	r1, pc, #4	@ (adr r1, 800e8b8 <_printf_i+0x40>)
 800e8b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e8b8:	0800e911 	.word	0x0800e911
 800e8bc:	0800e925 	.word	0x0800e925
 800e8c0:	0800e8a1 	.word	0x0800e8a1
 800e8c4:	0800e8a1 	.word	0x0800e8a1
 800e8c8:	0800e8a1 	.word	0x0800e8a1
 800e8cc:	0800e8a1 	.word	0x0800e8a1
 800e8d0:	0800e925 	.word	0x0800e925
 800e8d4:	0800e8a1 	.word	0x0800e8a1
 800e8d8:	0800e8a1 	.word	0x0800e8a1
 800e8dc:	0800e8a1 	.word	0x0800e8a1
 800e8e0:	0800e8a1 	.word	0x0800e8a1
 800e8e4:	0800ea25 	.word	0x0800ea25
 800e8e8:	0800e94f 	.word	0x0800e94f
 800e8ec:	0800e9df 	.word	0x0800e9df
 800e8f0:	0800e8a1 	.word	0x0800e8a1
 800e8f4:	0800e8a1 	.word	0x0800e8a1
 800e8f8:	0800ea47 	.word	0x0800ea47
 800e8fc:	0800e8a1 	.word	0x0800e8a1
 800e900:	0800e94f 	.word	0x0800e94f
 800e904:	0800e8a1 	.word	0x0800e8a1
 800e908:	0800e8a1 	.word	0x0800e8a1
 800e90c:	0800e9e7 	.word	0x0800e9e7
 800e910:	6833      	ldr	r3, [r6, #0]
 800e912:	1d1a      	adds	r2, r3, #4
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	6032      	str	r2, [r6, #0]
 800e918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e91c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e920:	2301      	movs	r3, #1
 800e922:	e09d      	b.n	800ea60 <_printf_i+0x1e8>
 800e924:	6833      	ldr	r3, [r6, #0]
 800e926:	6820      	ldr	r0, [r4, #0]
 800e928:	1d19      	adds	r1, r3, #4
 800e92a:	6031      	str	r1, [r6, #0]
 800e92c:	0606      	lsls	r6, r0, #24
 800e92e:	d501      	bpl.n	800e934 <_printf_i+0xbc>
 800e930:	681d      	ldr	r5, [r3, #0]
 800e932:	e003      	b.n	800e93c <_printf_i+0xc4>
 800e934:	0645      	lsls	r5, r0, #25
 800e936:	d5fb      	bpl.n	800e930 <_printf_i+0xb8>
 800e938:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e93c:	2d00      	cmp	r5, #0
 800e93e:	da03      	bge.n	800e948 <_printf_i+0xd0>
 800e940:	232d      	movs	r3, #45	@ 0x2d
 800e942:	426d      	negs	r5, r5
 800e944:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e948:	4859      	ldr	r0, [pc, #356]	@ (800eab0 <_printf_i+0x238>)
 800e94a:	230a      	movs	r3, #10
 800e94c:	e011      	b.n	800e972 <_printf_i+0xfa>
 800e94e:	6821      	ldr	r1, [r4, #0]
 800e950:	6833      	ldr	r3, [r6, #0]
 800e952:	0608      	lsls	r0, r1, #24
 800e954:	f853 5b04 	ldr.w	r5, [r3], #4
 800e958:	d402      	bmi.n	800e960 <_printf_i+0xe8>
 800e95a:	0649      	lsls	r1, r1, #25
 800e95c:	bf48      	it	mi
 800e95e:	b2ad      	uxthmi	r5, r5
 800e960:	2f6f      	cmp	r7, #111	@ 0x6f
 800e962:	4853      	ldr	r0, [pc, #332]	@ (800eab0 <_printf_i+0x238>)
 800e964:	6033      	str	r3, [r6, #0]
 800e966:	bf14      	ite	ne
 800e968:	230a      	movne	r3, #10
 800e96a:	2308      	moveq	r3, #8
 800e96c:	2100      	movs	r1, #0
 800e96e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e972:	6866      	ldr	r6, [r4, #4]
 800e974:	60a6      	str	r6, [r4, #8]
 800e976:	2e00      	cmp	r6, #0
 800e978:	bfa2      	ittt	ge
 800e97a:	6821      	ldrge	r1, [r4, #0]
 800e97c:	f021 0104 	bicge.w	r1, r1, #4
 800e980:	6021      	strge	r1, [r4, #0]
 800e982:	b90d      	cbnz	r5, 800e988 <_printf_i+0x110>
 800e984:	2e00      	cmp	r6, #0
 800e986:	d04b      	beq.n	800ea20 <_printf_i+0x1a8>
 800e988:	4616      	mov	r6, r2
 800e98a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e98e:	fb03 5711 	mls	r7, r3, r1, r5
 800e992:	5dc7      	ldrb	r7, [r0, r7]
 800e994:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e998:	462f      	mov	r7, r5
 800e99a:	42bb      	cmp	r3, r7
 800e99c:	460d      	mov	r5, r1
 800e99e:	d9f4      	bls.n	800e98a <_printf_i+0x112>
 800e9a0:	2b08      	cmp	r3, #8
 800e9a2:	d10b      	bne.n	800e9bc <_printf_i+0x144>
 800e9a4:	6823      	ldr	r3, [r4, #0]
 800e9a6:	07df      	lsls	r7, r3, #31
 800e9a8:	d508      	bpl.n	800e9bc <_printf_i+0x144>
 800e9aa:	6923      	ldr	r3, [r4, #16]
 800e9ac:	6861      	ldr	r1, [r4, #4]
 800e9ae:	4299      	cmp	r1, r3
 800e9b0:	bfde      	ittt	le
 800e9b2:	2330      	movle	r3, #48	@ 0x30
 800e9b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e9b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e9bc:	1b92      	subs	r2, r2, r6
 800e9be:	6122      	str	r2, [r4, #16]
 800e9c0:	f8cd a000 	str.w	sl, [sp]
 800e9c4:	464b      	mov	r3, r9
 800e9c6:	aa03      	add	r2, sp, #12
 800e9c8:	4621      	mov	r1, r4
 800e9ca:	4640      	mov	r0, r8
 800e9cc:	f7ff fee6 	bl	800e79c <_printf_common>
 800e9d0:	3001      	adds	r0, #1
 800e9d2:	d14a      	bne.n	800ea6a <_printf_i+0x1f2>
 800e9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9d8:	b004      	add	sp, #16
 800e9da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9de:	6823      	ldr	r3, [r4, #0]
 800e9e0:	f043 0320 	orr.w	r3, r3, #32
 800e9e4:	6023      	str	r3, [r4, #0]
 800e9e6:	4833      	ldr	r0, [pc, #204]	@ (800eab4 <_printf_i+0x23c>)
 800e9e8:	2778      	movs	r7, #120	@ 0x78
 800e9ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e9ee:	6823      	ldr	r3, [r4, #0]
 800e9f0:	6831      	ldr	r1, [r6, #0]
 800e9f2:	061f      	lsls	r7, r3, #24
 800e9f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800e9f8:	d402      	bmi.n	800ea00 <_printf_i+0x188>
 800e9fa:	065f      	lsls	r7, r3, #25
 800e9fc:	bf48      	it	mi
 800e9fe:	b2ad      	uxthmi	r5, r5
 800ea00:	6031      	str	r1, [r6, #0]
 800ea02:	07d9      	lsls	r1, r3, #31
 800ea04:	bf44      	itt	mi
 800ea06:	f043 0320 	orrmi.w	r3, r3, #32
 800ea0a:	6023      	strmi	r3, [r4, #0]
 800ea0c:	b11d      	cbz	r5, 800ea16 <_printf_i+0x19e>
 800ea0e:	2310      	movs	r3, #16
 800ea10:	e7ac      	b.n	800e96c <_printf_i+0xf4>
 800ea12:	4827      	ldr	r0, [pc, #156]	@ (800eab0 <_printf_i+0x238>)
 800ea14:	e7e9      	b.n	800e9ea <_printf_i+0x172>
 800ea16:	6823      	ldr	r3, [r4, #0]
 800ea18:	f023 0320 	bic.w	r3, r3, #32
 800ea1c:	6023      	str	r3, [r4, #0]
 800ea1e:	e7f6      	b.n	800ea0e <_printf_i+0x196>
 800ea20:	4616      	mov	r6, r2
 800ea22:	e7bd      	b.n	800e9a0 <_printf_i+0x128>
 800ea24:	6833      	ldr	r3, [r6, #0]
 800ea26:	6825      	ldr	r5, [r4, #0]
 800ea28:	6961      	ldr	r1, [r4, #20]
 800ea2a:	1d18      	adds	r0, r3, #4
 800ea2c:	6030      	str	r0, [r6, #0]
 800ea2e:	062e      	lsls	r6, r5, #24
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	d501      	bpl.n	800ea38 <_printf_i+0x1c0>
 800ea34:	6019      	str	r1, [r3, #0]
 800ea36:	e002      	b.n	800ea3e <_printf_i+0x1c6>
 800ea38:	0668      	lsls	r0, r5, #25
 800ea3a:	d5fb      	bpl.n	800ea34 <_printf_i+0x1bc>
 800ea3c:	8019      	strh	r1, [r3, #0]
 800ea3e:	2300      	movs	r3, #0
 800ea40:	6123      	str	r3, [r4, #16]
 800ea42:	4616      	mov	r6, r2
 800ea44:	e7bc      	b.n	800e9c0 <_printf_i+0x148>
 800ea46:	6833      	ldr	r3, [r6, #0]
 800ea48:	1d1a      	adds	r2, r3, #4
 800ea4a:	6032      	str	r2, [r6, #0]
 800ea4c:	681e      	ldr	r6, [r3, #0]
 800ea4e:	6862      	ldr	r2, [r4, #4]
 800ea50:	2100      	movs	r1, #0
 800ea52:	4630      	mov	r0, r6
 800ea54:	f7f1 fbdc 	bl	8000210 <memchr>
 800ea58:	b108      	cbz	r0, 800ea5e <_printf_i+0x1e6>
 800ea5a:	1b80      	subs	r0, r0, r6
 800ea5c:	6060      	str	r0, [r4, #4]
 800ea5e:	6863      	ldr	r3, [r4, #4]
 800ea60:	6123      	str	r3, [r4, #16]
 800ea62:	2300      	movs	r3, #0
 800ea64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea68:	e7aa      	b.n	800e9c0 <_printf_i+0x148>
 800ea6a:	6923      	ldr	r3, [r4, #16]
 800ea6c:	4632      	mov	r2, r6
 800ea6e:	4649      	mov	r1, r9
 800ea70:	4640      	mov	r0, r8
 800ea72:	47d0      	blx	sl
 800ea74:	3001      	adds	r0, #1
 800ea76:	d0ad      	beq.n	800e9d4 <_printf_i+0x15c>
 800ea78:	6823      	ldr	r3, [r4, #0]
 800ea7a:	079b      	lsls	r3, r3, #30
 800ea7c:	d413      	bmi.n	800eaa6 <_printf_i+0x22e>
 800ea7e:	68e0      	ldr	r0, [r4, #12]
 800ea80:	9b03      	ldr	r3, [sp, #12]
 800ea82:	4298      	cmp	r0, r3
 800ea84:	bfb8      	it	lt
 800ea86:	4618      	movlt	r0, r3
 800ea88:	e7a6      	b.n	800e9d8 <_printf_i+0x160>
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	4632      	mov	r2, r6
 800ea8e:	4649      	mov	r1, r9
 800ea90:	4640      	mov	r0, r8
 800ea92:	47d0      	blx	sl
 800ea94:	3001      	adds	r0, #1
 800ea96:	d09d      	beq.n	800e9d4 <_printf_i+0x15c>
 800ea98:	3501      	adds	r5, #1
 800ea9a:	68e3      	ldr	r3, [r4, #12]
 800ea9c:	9903      	ldr	r1, [sp, #12]
 800ea9e:	1a5b      	subs	r3, r3, r1
 800eaa0:	42ab      	cmp	r3, r5
 800eaa2:	dcf2      	bgt.n	800ea8a <_printf_i+0x212>
 800eaa4:	e7eb      	b.n	800ea7e <_printf_i+0x206>
 800eaa6:	2500      	movs	r5, #0
 800eaa8:	f104 0619 	add.w	r6, r4, #25
 800eaac:	e7f5      	b.n	800ea9a <_printf_i+0x222>
 800eaae:	bf00      	nop
 800eab0:	08011ace 	.word	0x08011ace
 800eab4:	08011adf 	.word	0x08011adf

0800eab8 <__sflush_r>:
 800eab8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eac0:	0716      	lsls	r6, r2, #28
 800eac2:	4605      	mov	r5, r0
 800eac4:	460c      	mov	r4, r1
 800eac6:	d454      	bmi.n	800eb72 <__sflush_r+0xba>
 800eac8:	684b      	ldr	r3, [r1, #4]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	dc02      	bgt.n	800ead4 <__sflush_r+0x1c>
 800eace:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	dd48      	ble.n	800eb66 <__sflush_r+0xae>
 800ead4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ead6:	2e00      	cmp	r6, #0
 800ead8:	d045      	beq.n	800eb66 <__sflush_r+0xae>
 800eada:	2300      	movs	r3, #0
 800eadc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eae0:	682f      	ldr	r7, [r5, #0]
 800eae2:	6a21      	ldr	r1, [r4, #32]
 800eae4:	602b      	str	r3, [r5, #0]
 800eae6:	d030      	beq.n	800eb4a <__sflush_r+0x92>
 800eae8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eaea:	89a3      	ldrh	r3, [r4, #12]
 800eaec:	0759      	lsls	r1, r3, #29
 800eaee:	d505      	bpl.n	800eafc <__sflush_r+0x44>
 800eaf0:	6863      	ldr	r3, [r4, #4]
 800eaf2:	1ad2      	subs	r2, r2, r3
 800eaf4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eaf6:	b10b      	cbz	r3, 800eafc <__sflush_r+0x44>
 800eaf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eafa:	1ad2      	subs	r2, r2, r3
 800eafc:	2300      	movs	r3, #0
 800eafe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eb00:	6a21      	ldr	r1, [r4, #32]
 800eb02:	4628      	mov	r0, r5
 800eb04:	47b0      	blx	r6
 800eb06:	1c43      	adds	r3, r0, #1
 800eb08:	89a3      	ldrh	r3, [r4, #12]
 800eb0a:	d106      	bne.n	800eb1a <__sflush_r+0x62>
 800eb0c:	6829      	ldr	r1, [r5, #0]
 800eb0e:	291d      	cmp	r1, #29
 800eb10:	d82b      	bhi.n	800eb6a <__sflush_r+0xb2>
 800eb12:	4a2a      	ldr	r2, [pc, #168]	@ (800ebbc <__sflush_r+0x104>)
 800eb14:	410a      	asrs	r2, r1
 800eb16:	07d6      	lsls	r6, r2, #31
 800eb18:	d427      	bmi.n	800eb6a <__sflush_r+0xb2>
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	6062      	str	r2, [r4, #4]
 800eb1e:	04d9      	lsls	r1, r3, #19
 800eb20:	6922      	ldr	r2, [r4, #16]
 800eb22:	6022      	str	r2, [r4, #0]
 800eb24:	d504      	bpl.n	800eb30 <__sflush_r+0x78>
 800eb26:	1c42      	adds	r2, r0, #1
 800eb28:	d101      	bne.n	800eb2e <__sflush_r+0x76>
 800eb2a:	682b      	ldr	r3, [r5, #0]
 800eb2c:	b903      	cbnz	r3, 800eb30 <__sflush_r+0x78>
 800eb2e:	6560      	str	r0, [r4, #84]	@ 0x54
 800eb30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eb32:	602f      	str	r7, [r5, #0]
 800eb34:	b1b9      	cbz	r1, 800eb66 <__sflush_r+0xae>
 800eb36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eb3a:	4299      	cmp	r1, r3
 800eb3c:	d002      	beq.n	800eb44 <__sflush_r+0x8c>
 800eb3e:	4628      	mov	r0, r5
 800eb40:	f7ff fbea 	bl	800e318 <_free_r>
 800eb44:	2300      	movs	r3, #0
 800eb46:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb48:	e00d      	b.n	800eb66 <__sflush_r+0xae>
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	4628      	mov	r0, r5
 800eb4e:	47b0      	blx	r6
 800eb50:	4602      	mov	r2, r0
 800eb52:	1c50      	adds	r0, r2, #1
 800eb54:	d1c9      	bne.n	800eaea <__sflush_r+0x32>
 800eb56:	682b      	ldr	r3, [r5, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d0c6      	beq.n	800eaea <__sflush_r+0x32>
 800eb5c:	2b1d      	cmp	r3, #29
 800eb5e:	d001      	beq.n	800eb64 <__sflush_r+0xac>
 800eb60:	2b16      	cmp	r3, #22
 800eb62:	d11e      	bne.n	800eba2 <__sflush_r+0xea>
 800eb64:	602f      	str	r7, [r5, #0]
 800eb66:	2000      	movs	r0, #0
 800eb68:	e022      	b.n	800ebb0 <__sflush_r+0xf8>
 800eb6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb6e:	b21b      	sxth	r3, r3
 800eb70:	e01b      	b.n	800ebaa <__sflush_r+0xf2>
 800eb72:	690f      	ldr	r7, [r1, #16]
 800eb74:	2f00      	cmp	r7, #0
 800eb76:	d0f6      	beq.n	800eb66 <__sflush_r+0xae>
 800eb78:	0793      	lsls	r3, r2, #30
 800eb7a:	680e      	ldr	r6, [r1, #0]
 800eb7c:	bf08      	it	eq
 800eb7e:	694b      	ldreq	r3, [r1, #20]
 800eb80:	600f      	str	r7, [r1, #0]
 800eb82:	bf18      	it	ne
 800eb84:	2300      	movne	r3, #0
 800eb86:	eba6 0807 	sub.w	r8, r6, r7
 800eb8a:	608b      	str	r3, [r1, #8]
 800eb8c:	f1b8 0f00 	cmp.w	r8, #0
 800eb90:	dde9      	ble.n	800eb66 <__sflush_r+0xae>
 800eb92:	6a21      	ldr	r1, [r4, #32]
 800eb94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eb96:	4643      	mov	r3, r8
 800eb98:	463a      	mov	r2, r7
 800eb9a:	4628      	mov	r0, r5
 800eb9c:	47b0      	blx	r6
 800eb9e:	2800      	cmp	r0, #0
 800eba0:	dc08      	bgt.n	800ebb4 <__sflush_r+0xfc>
 800eba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eba6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebaa:	81a3      	strh	r3, [r4, #12]
 800ebac:	f04f 30ff 	mov.w	r0, #4294967295
 800ebb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebb4:	4407      	add	r7, r0
 800ebb6:	eba8 0800 	sub.w	r8, r8, r0
 800ebba:	e7e7      	b.n	800eb8c <__sflush_r+0xd4>
 800ebbc:	dfbffffe 	.word	0xdfbffffe

0800ebc0 <_fflush_r>:
 800ebc0:	b538      	push	{r3, r4, r5, lr}
 800ebc2:	690b      	ldr	r3, [r1, #16]
 800ebc4:	4605      	mov	r5, r0
 800ebc6:	460c      	mov	r4, r1
 800ebc8:	b913      	cbnz	r3, 800ebd0 <_fflush_r+0x10>
 800ebca:	2500      	movs	r5, #0
 800ebcc:	4628      	mov	r0, r5
 800ebce:	bd38      	pop	{r3, r4, r5, pc}
 800ebd0:	b118      	cbz	r0, 800ebda <_fflush_r+0x1a>
 800ebd2:	6a03      	ldr	r3, [r0, #32]
 800ebd4:	b90b      	cbnz	r3, 800ebda <_fflush_r+0x1a>
 800ebd6:	f7ff fa61 	bl	800e09c <__sinit>
 800ebda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d0f3      	beq.n	800ebca <_fflush_r+0xa>
 800ebe2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ebe4:	07d0      	lsls	r0, r2, #31
 800ebe6:	d404      	bmi.n	800ebf2 <_fflush_r+0x32>
 800ebe8:	0599      	lsls	r1, r3, #22
 800ebea:	d402      	bmi.n	800ebf2 <_fflush_r+0x32>
 800ebec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ebee:	f7ff fb64 	bl	800e2ba <__retarget_lock_acquire_recursive>
 800ebf2:	4628      	mov	r0, r5
 800ebf4:	4621      	mov	r1, r4
 800ebf6:	f7ff ff5f 	bl	800eab8 <__sflush_r>
 800ebfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ebfc:	07da      	lsls	r2, r3, #31
 800ebfe:	4605      	mov	r5, r0
 800ec00:	d4e4      	bmi.n	800ebcc <_fflush_r+0xc>
 800ec02:	89a3      	ldrh	r3, [r4, #12]
 800ec04:	059b      	lsls	r3, r3, #22
 800ec06:	d4e1      	bmi.n	800ebcc <_fflush_r+0xc>
 800ec08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec0a:	f7ff fb57 	bl	800e2bc <__retarget_lock_release_recursive>
 800ec0e:	e7dd      	b.n	800ebcc <_fflush_r+0xc>

0800ec10 <fiprintf>:
 800ec10:	b40e      	push	{r1, r2, r3}
 800ec12:	b503      	push	{r0, r1, lr}
 800ec14:	4601      	mov	r1, r0
 800ec16:	ab03      	add	r3, sp, #12
 800ec18:	4805      	ldr	r0, [pc, #20]	@ (800ec30 <fiprintf+0x20>)
 800ec1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec1e:	6800      	ldr	r0, [r0, #0]
 800ec20:	9301      	str	r3, [sp, #4]
 800ec22:	f7ff fca3 	bl	800e56c <_vfiprintf_r>
 800ec26:	b002      	add	sp, #8
 800ec28:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec2c:	b003      	add	sp, #12
 800ec2e:	4770      	bx	lr
 800ec30:	20000038 	.word	0x20000038

0800ec34 <__swbuf_r>:
 800ec34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec36:	460e      	mov	r6, r1
 800ec38:	4614      	mov	r4, r2
 800ec3a:	4605      	mov	r5, r0
 800ec3c:	b118      	cbz	r0, 800ec46 <__swbuf_r+0x12>
 800ec3e:	6a03      	ldr	r3, [r0, #32]
 800ec40:	b90b      	cbnz	r3, 800ec46 <__swbuf_r+0x12>
 800ec42:	f7ff fa2b 	bl	800e09c <__sinit>
 800ec46:	69a3      	ldr	r3, [r4, #24]
 800ec48:	60a3      	str	r3, [r4, #8]
 800ec4a:	89a3      	ldrh	r3, [r4, #12]
 800ec4c:	071a      	lsls	r2, r3, #28
 800ec4e:	d501      	bpl.n	800ec54 <__swbuf_r+0x20>
 800ec50:	6923      	ldr	r3, [r4, #16]
 800ec52:	b943      	cbnz	r3, 800ec66 <__swbuf_r+0x32>
 800ec54:	4621      	mov	r1, r4
 800ec56:	4628      	mov	r0, r5
 800ec58:	f000 f82a 	bl	800ecb0 <__swsetup_r>
 800ec5c:	b118      	cbz	r0, 800ec66 <__swbuf_r+0x32>
 800ec5e:	f04f 37ff 	mov.w	r7, #4294967295
 800ec62:	4638      	mov	r0, r7
 800ec64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec66:	6823      	ldr	r3, [r4, #0]
 800ec68:	6922      	ldr	r2, [r4, #16]
 800ec6a:	1a98      	subs	r0, r3, r2
 800ec6c:	6963      	ldr	r3, [r4, #20]
 800ec6e:	b2f6      	uxtb	r6, r6
 800ec70:	4283      	cmp	r3, r0
 800ec72:	4637      	mov	r7, r6
 800ec74:	dc05      	bgt.n	800ec82 <__swbuf_r+0x4e>
 800ec76:	4621      	mov	r1, r4
 800ec78:	4628      	mov	r0, r5
 800ec7a:	f7ff ffa1 	bl	800ebc0 <_fflush_r>
 800ec7e:	2800      	cmp	r0, #0
 800ec80:	d1ed      	bne.n	800ec5e <__swbuf_r+0x2a>
 800ec82:	68a3      	ldr	r3, [r4, #8]
 800ec84:	3b01      	subs	r3, #1
 800ec86:	60a3      	str	r3, [r4, #8]
 800ec88:	6823      	ldr	r3, [r4, #0]
 800ec8a:	1c5a      	adds	r2, r3, #1
 800ec8c:	6022      	str	r2, [r4, #0]
 800ec8e:	701e      	strb	r6, [r3, #0]
 800ec90:	6962      	ldr	r2, [r4, #20]
 800ec92:	1c43      	adds	r3, r0, #1
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d004      	beq.n	800eca2 <__swbuf_r+0x6e>
 800ec98:	89a3      	ldrh	r3, [r4, #12]
 800ec9a:	07db      	lsls	r3, r3, #31
 800ec9c:	d5e1      	bpl.n	800ec62 <__swbuf_r+0x2e>
 800ec9e:	2e0a      	cmp	r6, #10
 800eca0:	d1df      	bne.n	800ec62 <__swbuf_r+0x2e>
 800eca2:	4621      	mov	r1, r4
 800eca4:	4628      	mov	r0, r5
 800eca6:	f7ff ff8b 	bl	800ebc0 <_fflush_r>
 800ecaa:	2800      	cmp	r0, #0
 800ecac:	d0d9      	beq.n	800ec62 <__swbuf_r+0x2e>
 800ecae:	e7d6      	b.n	800ec5e <__swbuf_r+0x2a>

0800ecb0 <__swsetup_r>:
 800ecb0:	b538      	push	{r3, r4, r5, lr}
 800ecb2:	4b29      	ldr	r3, [pc, #164]	@ (800ed58 <__swsetup_r+0xa8>)
 800ecb4:	4605      	mov	r5, r0
 800ecb6:	6818      	ldr	r0, [r3, #0]
 800ecb8:	460c      	mov	r4, r1
 800ecba:	b118      	cbz	r0, 800ecc4 <__swsetup_r+0x14>
 800ecbc:	6a03      	ldr	r3, [r0, #32]
 800ecbe:	b90b      	cbnz	r3, 800ecc4 <__swsetup_r+0x14>
 800ecc0:	f7ff f9ec 	bl	800e09c <__sinit>
 800ecc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecc8:	0719      	lsls	r1, r3, #28
 800ecca:	d422      	bmi.n	800ed12 <__swsetup_r+0x62>
 800eccc:	06da      	lsls	r2, r3, #27
 800ecce:	d407      	bmi.n	800ece0 <__swsetup_r+0x30>
 800ecd0:	2209      	movs	r2, #9
 800ecd2:	602a      	str	r2, [r5, #0]
 800ecd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecd8:	81a3      	strh	r3, [r4, #12]
 800ecda:	f04f 30ff 	mov.w	r0, #4294967295
 800ecde:	e033      	b.n	800ed48 <__swsetup_r+0x98>
 800ece0:	0758      	lsls	r0, r3, #29
 800ece2:	d512      	bpl.n	800ed0a <__swsetup_r+0x5a>
 800ece4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ece6:	b141      	cbz	r1, 800ecfa <__swsetup_r+0x4a>
 800ece8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ecec:	4299      	cmp	r1, r3
 800ecee:	d002      	beq.n	800ecf6 <__swsetup_r+0x46>
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	f7ff fb11 	bl	800e318 <_free_r>
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	6363      	str	r3, [r4, #52]	@ 0x34
 800ecfa:	89a3      	ldrh	r3, [r4, #12]
 800ecfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ed00:	81a3      	strh	r3, [r4, #12]
 800ed02:	2300      	movs	r3, #0
 800ed04:	6063      	str	r3, [r4, #4]
 800ed06:	6923      	ldr	r3, [r4, #16]
 800ed08:	6023      	str	r3, [r4, #0]
 800ed0a:	89a3      	ldrh	r3, [r4, #12]
 800ed0c:	f043 0308 	orr.w	r3, r3, #8
 800ed10:	81a3      	strh	r3, [r4, #12]
 800ed12:	6923      	ldr	r3, [r4, #16]
 800ed14:	b94b      	cbnz	r3, 800ed2a <__swsetup_r+0x7a>
 800ed16:	89a3      	ldrh	r3, [r4, #12]
 800ed18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ed1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ed20:	d003      	beq.n	800ed2a <__swsetup_r+0x7a>
 800ed22:	4621      	mov	r1, r4
 800ed24:	4628      	mov	r0, r5
 800ed26:	f000 f856 	bl	800edd6 <__smakebuf_r>
 800ed2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed2e:	f013 0201 	ands.w	r2, r3, #1
 800ed32:	d00a      	beq.n	800ed4a <__swsetup_r+0x9a>
 800ed34:	2200      	movs	r2, #0
 800ed36:	60a2      	str	r2, [r4, #8]
 800ed38:	6962      	ldr	r2, [r4, #20]
 800ed3a:	4252      	negs	r2, r2
 800ed3c:	61a2      	str	r2, [r4, #24]
 800ed3e:	6922      	ldr	r2, [r4, #16]
 800ed40:	b942      	cbnz	r2, 800ed54 <__swsetup_r+0xa4>
 800ed42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ed46:	d1c5      	bne.n	800ecd4 <__swsetup_r+0x24>
 800ed48:	bd38      	pop	{r3, r4, r5, pc}
 800ed4a:	0799      	lsls	r1, r3, #30
 800ed4c:	bf58      	it	pl
 800ed4e:	6962      	ldrpl	r2, [r4, #20]
 800ed50:	60a2      	str	r2, [r4, #8]
 800ed52:	e7f4      	b.n	800ed3e <__swsetup_r+0x8e>
 800ed54:	2000      	movs	r0, #0
 800ed56:	e7f7      	b.n	800ed48 <__swsetup_r+0x98>
 800ed58:	20000038 	.word	0x20000038

0800ed5c <_sbrk_r>:
 800ed5c:	b538      	push	{r3, r4, r5, lr}
 800ed5e:	4d06      	ldr	r5, [pc, #24]	@ (800ed78 <_sbrk_r+0x1c>)
 800ed60:	2300      	movs	r3, #0
 800ed62:	4604      	mov	r4, r0
 800ed64:	4608      	mov	r0, r1
 800ed66:	602b      	str	r3, [r5, #0]
 800ed68:	f7f1 ff52 	bl	8000c10 <_sbrk>
 800ed6c:	1c43      	adds	r3, r0, #1
 800ed6e:	d102      	bne.n	800ed76 <_sbrk_r+0x1a>
 800ed70:	682b      	ldr	r3, [r5, #0]
 800ed72:	b103      	cbz	r3, 800ed76 <_sbrk_r+0x1a>
 800ed74:	6023      	str	r3, [r4, #0]
 800ed76:	bd38      	pop	{r3, r4, r5, pc}
 800ed78:	20008528 	.word	0x20008528

0800ed7c <abort>:
 800ed7c:	b508      	push	{r3, lr}
 800ed7e:	2006      	movs	r0, #6
 800ed80:	f000 f88e 	bl	800eea0 <raise>
 800ed84:	2001      	movs	r0, #1
 800ed86:	f7f1 fecb 	bl	8000b20 <_exit>

0800ed8a <__swhatbuf_r>:
 800ed8a:	b570      	push	{r4, r5, r6, lr}
 800ed8c:	460c      	mov	r4, r1
 800ed8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed92:	2900      	cmp	r1, #0
 800ed94:	b096      	sub	sp, #88	@ 0x58
 800ed96:	4615      	mov	r5, r2
 800ed98:	461e      	mov	r6, r3
 800ed9a:	da0d      	bge.n	800edb8 <__swhatbuf_r+0x2e>
 800ed9c:	89a3      	ldrh	r3, [r4, #12]
 800ed9e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eda2:	f04f 0100 	mov.w	r1, #0
 800eda6:	bf14      	ite	ne
 800eda8:	2340      	movne	r3, #64	@ 0x40
 800edaa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800edae:	2000      	movs	r0, #0
 800edb0:	6031      	str	r1, [r6, #0]
 800edb2:	602b      	str	r3, [r5, #0]
 800edb4:	b016      	add	sp, #88	@ 0x58
 800edb6:	bd70      	pop	{r4, r5, r6, pc}
 800edb8:	466a      	mov	r2, sp
 800edba:	f000 f879 	bl	800eeb0 <_fstat_r>
 800edbe:	2800      	cmp	r0, #0
 800edc0:	dbec      	blt.n	800ed9c <__swhatbuf_r+0x12>
 800edc2:	9901      	ldr	r1, [sp, #4]
 800edc4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800edc8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800edcc:	4259      	negs	r1, r3
 800edce:	4159      	adcs	r1, r3
 800edd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800edd4:	e7eb      	b.n	800edae <__swhatbuf_r+0x24>

0800edd6 <__smakebuf_r>:
 800edd6:	898b      	ldrh	r3, [r1, #12]
 800edd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edda:	079d      	lsls	r5, r3, #30
 800eddc:	4606      	mov	r6, r0
 800edde:	460c      	mov	r4, r1
 800ede0:	d507      	bpl.n	800edf2 <__smakebuf_r+0x1c>
 800ede2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ede6:	6023      	str	r3, [r4, #0]
 800ede8:	6123      	str	r3, [r4, #16]
 800edea:	2301      	movs	r3, #1
 800edec:	6163      	str	r3, [r4, #20]
 800edee:	b003      	add	sp, #12
 800edf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edf2:	ab01      	add	r3, sp, #4
 800edf4:	466a      	mov	r2, sp
 800edf6:	f7ff ffc8 	bl	800ed8a <__swhatbuf_r>
 800edfa:	9f00      	ldr	r7, [sp, #0]
 800edfc:	4605      	mov	r5, r0
 800edfe:	4639      	mov	r1, r7
 800ee00:	4630      	mov	r0, r6
 800ee02:	f7ff fafd 	bl	800e400 <_malloc_r>
 800ee06:	b948      	cbnz	r0, 800ee1c <__smakebuf_r+0x46>
 800ee08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee0c:	059a      	lsls	r2, r3, #22
 800ee0e:	d4ee      	bmi.n	800edee <__smakebuf_r+0x18>
 800ee10:	f023 0303 	bic.w	r3, r3, #3
 800ee14:	f043 0302 	orr.w	r3, r3, #2
 800ee18:	81a3      	strh	r3, [r4, #12]
 800ee1a:	e7e2      	b.n	800ede2 <__smakebuf_r+0xc>
 800ee1c:	89a3      	ldrh	r3, [r4, #12]
 800ee1e:	6020      	str	r0, [r4, #0]
 800ee20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee24:	81a3      	strh	r3, [r4, #12]
 800ee26:	9b01      	ldr	r3, [sp, #4]
 800ee28:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ee2c:	b15b      	cbz	r3, 800ee46 <__smakebuf_r+0x70>
 800ee2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee32:	4630      	mov	r0, r6
 800ee34:	f000 f84e 	bl	800eed4 <_isatty_r>
 800ee38:	b128      	cbz	r0, 800ee46 <__smakebuf_r+0x70>
 800ee3a:	89a3      	ldrh	r3, [r4, #12]
 800ee3c:	f023 0303 	bic.w	r3, r3, #3
 800ee40:	f043 0301 	orr.w	r3, r3, #1
 800ee44:	81a3      	strh	r3, [r4, #12]
 800ee46:	89a3      	ldrh	r3, [r4, #12]
 800ee48:	431d      	orrs	r5, r3
 800ee4a:	81a5      	strh	r5, [r4, #12]
 800ee4c:	e7cf      	b.n	800edee <__smakebuf_r+0x18>

0800ee4e <_raise_r>:
 800ee4e:	291f      	cmp	r1, #31
 800ee50:	b538      	push	{r3, r4, r5, lr}
 800ee52:	4605      	mov	r5, r0
 800ee54:	460c      	mov	r4, r1
 800ee56:	d904      	bls.n	800ee62 <_raise_r+0x14>
 800ee58:	2316      	movs	r3, #22
 800ee5a:	6003      	str	r3, [r0, #0]
 800ee5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee60:	bd38      	pop	{r3, r4, r5, pc}
 800ee62:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ee64:	b112      	cbz	r2, 800ee6c <_raise_r+0x1e>
 800ee66:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee6a:	b94b      	cbnz	r3, 800ee80 <_raise_r+0x32>
 800ee6c:	4628      	mov	r0, r5
 800ee6e:	f000 f853 	bl	800ef18 <_getpid_r>
 800ee72:	4622      	mov	r2, r4
 800ee74:	4601      	mov	r1, r0
 800ee76:	4628      	mov	r0, r5
 800ee78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee7c:	f000 b83a 	b.w	800eef4 <_kill_r>
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	d00a      	beq.n	800ee9a <_raise_r+0x4c>
 800ee84:	1c59      	adds	r1, r3, #1
 800ee86:	d103      	bne.n	800ee90 <_raise_r+0x42>
 800ee88:	2316      	movs	r3, #22
 800ee8a:	6003      	str	r3, [r0, #0]
 800ee8c:	2001      	movs	r0, #1
 800ee8e:	e7e7      	b.n	800ee60 <_raise_r+0x12>
 800ee90:	2100      	movs	r1, #0
 800ee92:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ee96:	4620      	mov	r0, r4
 800ee98:	4798      	blx	r3
 800ee9a:	2000      	movs	r0, #0
 800ee9c:	e7e0      	b.n	800ee60 <_raise_r+0x12>
	...

0800eea0 <raise>:
 800eea0:	4b02      	ldr	r3, [pc, #8]	@ (800eeac <raise+0xc>)
 800eea2:	4601      	mov	r1, r0
 800eea4:	6818      	ldr	r0, [r3, #0]
 800eea6:	f7ff bfd2 	b.w	800ee4e <_raise_r>
 800eeaa:	bf00      	nop
 800eeac:	20000038 	.word	0x20000038

0800eeb0 <_fstat_r>:
 800eeb0:	b538      	push	{r3, r4, r5, lr}
 800eeb2:	4d07      	ldr	r5, [pc, #28]	@ (800eed0 <_fstat_r+0x20>)
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	4604      	mov	r4, r0
 800eeb8:	4608      	mov	r0, r1
 800eeba:	4611      	mov	r1, r2
 800eebc:	602b      	str	r3, [r5, #0]
 800eebe:	f7f1 fe7f 	bl	8000bc0 <_fstat>
 800eec2:	1c43      	adds	r3, r0, #1
 800eec4:	d102      	bne.n	800eecc <_fstat_r+0x1c>
 800eec6:	682b      	ldr	r3, [r5, #0]
 800eec8:	b103      	cbz	r3, 800eecc <_fstat_r+0x1c>
 800eeca:	6023      	str	r3, [r4, #0]
 800eecc:	bd38      	pop	{r3, r4, r5, pc}
 800eece:	bf00      	nop
 800eed0:	20008528 	.word	0x20008528

0800eed4 <_isatty_r>:
 800eed4:	b538      	push	{r3, r4, r5, lr}
 800eed6:	4d06      	ldr	r5, [pc, #24]	@ (800eef0 <_isatty_r+0x1c>)
 800eed8:	2300      	movs	r3, #0
 800eeda:	4604      	mov	r4, r0
 800eedc:	4608      	mov	r0, r1
 800eede:	602b      	str	r3, [r5, #0]
 800eee0:	f7f1 fe7e 	bl	8000be0 <_isatty>
 800eee4:	1c43      	adds	r3, r0, #1
 800eee6:	d102      	bne.n	800eeee <_isatty_r+0x1a>
 800eee8:	682b      	ldr	r3, [r5, #0]
 800eeea:	b103      	cbz	r3, 800eeee <_isatty_r+0x1a>
 800eeec:	6023      	str	r3, [r4, #0]
 800eeee:	bd38      	pop	{r3, r4, r5, pc}
 800eef0:	20008528 	.word	0x20008528

0800eef4 <_kill_r>:
 800eef4:	b538      	push	{r3, r4, r5, lr}
 800eef6:	4d07      	ldr	r5, [pc, #28]	@ (800ef14 <_kill_r+0x20>)
 800eef8:	2300      	movs	r3, #0
 800eefa:	4604      	mov	r4, r0
 800eefc:	4608      	mov	r0, r1
 800eefe:	4611      	mov	r1, r2
 800ef00:	602b      	str	r3, [r5, #0]
 800ef02:	f7f1 fdfb 	bl	8000afc <_kill>
 800ef06:	1c43      	adds	r3, r0, #1
 800ef08:	d102      	bne.n	800ef10 <_kill_r+0x1c>
 800ef0a:	682b      	ldr	r3, [r5, #0]
 800ef0c:	b103      	cbz	r3, 800ef10 <_kill_r+0x1c>
 800ef0e:	6023      	str	r3, [r4, #0]
 800ef10:	bd38      	pop	{r3, r4, r5, pc}
 800ef12:	bf00      	nop
 800ef14:	20008528 	.word	0x20008528

0800ef18 <_getpid_r>:
 800ef18:	f7f1 bde7 	b.w	8000aea <_getpid>

0800ef1c <_init>:
 800ef1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef1e:	bf00      	nop
 800ef20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef22:	bc08      	pop	{r3}
 800ef24:	469e      	mov	lr, r3
 800ef26:	4770      	bx	lr

0800ef28 <_fini>:
 800ef28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef2a:	bf00      	nop
 800ef2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef2e:	bc08      	pop	{r3}
 800ef30:	469e      	mov	lr, r3
 800ef32:	4770      	bx	lr
