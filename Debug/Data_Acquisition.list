
Data_Acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ec0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e64  08015090  08015090  00016090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017ef4  08017ef4  00019820  2**0
                  CONTENTS
  4 .ARM          00000008  08017ef4  08017ef4  00018ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017efc  08017efc  00019820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017efc  08017efc  00018efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017f04  08017f04  00018f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006e0  20000000  08017f08  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200006e0  080185e8  000196e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000780  08018688  00019780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000086ac  20000820  08018728  00019820  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  20008ecc  08018728  00019ecc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00019820  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f068  00000000  00000000  00019850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005728  00000000  00000000  000388b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018a8  00000000  00000000  0003dfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013a0  00000000  00000000  0003f888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003223f  00000000  00000000  00040c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00025537  00000000  00000000  00072e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001037bf  00000000  00000000  0009839e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0019bb5d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000076c8  00000000  00000000  0019bba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000050  00000000  00000000  001a3268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000820 	.word	0x20000820
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015078 	.word	0x08015078

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000824 	.word	0x20000824
 800020c:	08015078 	.word	0x08015078

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ee0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ee4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d013      	beq.n	8000f18 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ef0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ef4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000ef8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d00b      	beq.n	8000f18 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f00:	e000      	b.n	8000f04 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f02:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f04:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0f9      	beq.n	8000f02 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f0e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f18:	687b      	ldr	r3, [r7, #4]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <sendUdpPacket>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void sendUdpPacket(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	Transmit_Pbuf = pbuf_alloc(PBUF_TRANSPORT, sizeof(outPacket.buff), PBUF_RAM);
 8000f2c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000f30:	2120      	movs	r1, #32
 8000f32:	2036      	movs	r0, #54	@ 0x36
 8000f34:	f006 fb62 	bl	80075fc <pbuf_alloc>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a10      	ldr	r2, [pc, #64]	@ (8000f7c <sendUdpPacket+0x54>)
 8000f3c:	6013      	str	r3, [r2, #0]
	pbuf_take(Transmit_Pbuf, outPacket.buff, sizeof(outPacket.buff));
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <sendUdpPacket+0x54>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2220      	movs	r2, #32
 8000f44:	490e      	ldr	r1, [pc, #56]	@ (8000f80 <sendUdpPacket+0x58>)
 8000f46:	4618      	mov	r0, r3
 8000f48:	f007 f8a8 	bl	800809c <pbuf_take>
	UDP_TimeStamp = Tick();
 8000f4c:	f000 ff46 	bl	8001ddc <Tick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	490b      	ldr	r1, [pc, #44]	@ (8000f84 <sendUdpPacket+0x5c>)
 8000f56:	e9c1 2300 	strd	r2, r3, [r1]
	udp_sendto(UDP, Transmit_Pbuf, &Remote_IP, 5500);
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f88 <sendUdpPacket+0x60>)
 8000f5c:	6818      	ldr	r0, [r3, #0]
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <sendUdpPacket+0x54>)
 8000f60:	6819      	ldr	r1, [r3, #0]
 8000f62:	f241 537c 	movw	r3, #5500	@ 0x157c
 8000f66:	4a09      	ldr	r2, [pc, #36]	@ (8000f8c <sendUdpPacket+0x64>)
 8000f68:	f00c fdc0 	bl	800daec <udp_sendto>
	pbuf_free(Transmit_Pbuf);
 8000f6c:	4b03      	ldr	r3, [pc, #12]	@ (8000f7c <sendUdpPacket+0x54>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f006 fe27 	bl	8007bc4 <pbuf_free>
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200009d0 	.word	0x200009d0
 8000f80:	200009d8 	.word	0x200009d8
 8000f84:	200009c8 	.word	0x200009c8
 8000f88:	200009bc 	.word	0x200009bc
 8000f8c:	200009b8 	.word	0x200009b8

08000f90 <NTP_server>:

void NTP_server(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08e      	sub	sp, #56	@ 0x38
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	603b      	str	r3, [r7, #0]
	union NtpClientPacket client_packet;
	union NtpClientResponsePacket client_response;
	struct pbuf *response_buf;
	if(p->len == 8)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	895b      	ldrh	r3, [r3, #10]
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	d12f      	bne.n	8001006 <NTP_server+0x76>
	{
//		printf("OV: %lu\n",overflow-1);
//		printf("Timer: %llu\n", 10*(uint64_t)htim2.Instance->CNT);
//		printf("Stamp: %llu\n", 10*(((uint64_t)(overflow - 1) << 32) | (uint64_t)htim2.Instance->CNT));
		pbuf_copy_partial(p, client_packet.buffer, p->len, 0);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	895a      	ldrh	r2, [r3, #10]
 8000faa:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000fae:	2300      	movs	r3, #0
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f007 f801 	bl	8007fb8 <pbuf_copy_partial>
//		printf("Client: %llu\n", client_packet.t1);
		client_response.data.t1 = client_packet.t1;
 8000fb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000fba:	e9c7 2304 	strd	r2, r3, [r7, #16]
		client_response.data.t2 = Tick();
 8000fbe:	f000 ff0d 	bl	8001ddc <Tick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	e9c7 2306 	strd	r2, r3, [r7, #24]
		response_buf = pbuf_alloc(PBUF_TRANSPORT, 24, PBUF_RAM);
 8000fca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000fce:	2118      	movs	r1, #24
 8000fd0:	2036      	movs	r0, #54	@ 0x36
 8000fd2:	f006 fb13 	bl	80075fc <pbuf_alloc>
 8000fd6:	6378      	str	r0, [r7, #52]	@ 0x34
		client_response.data.t3 = Tick();
 8000fd8:	f000 ff00 	bl	8001ddc <Tick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	e9c7 2308 	strd	r2, r3, [r7, #32]
		pbuf_take(response_buf, client_response.buffer, 24);
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	2218      	movs	r2, #24
 8000fea:	4619      	mov	r1, r3
 8000fec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000fee:	f007 f855 	bl	800809c <pbuf_take>
		udp_sendto(pcb, response_buf, addr, port);
 8000ff2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000ffa:	68b8      	ldr	r0, [r7, #8]
 8000ffc:	f00c fd76 	bl	800daec <udp_sendto>
		pbuf_free(response_buf);
 8001000:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001002:	f006 fddf 	bl	8007bc4 <pbuf_free>
	}
	pbuf_free(p);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f006 fddc 	bl	8007bc4 <pbuf_free>
}
 800100c:	bf00      	nop
 800100e:	3738      	adds	r7, #56	@ 0x38
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <_write>:

int _write(int file, char *ptr, int len)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
	int i = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
	for (i=0; i<len; i++)
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	e009      	b.n	800103e <_write+0x2a>
		ITM_SendChar((*ptr++));
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	60ba      	str	r2, [r7, #8]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ff50 	bl	8000ed8 <ITM_SendChar>
	for (i=0; i<len; i++)
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	3301      	adds	r3, #1
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	429a      	cmp	r2, r3
 8001044:	dbf1      	blt.n	800102a <_write+0x16>
	return len;
 8001046:	687b      	ldr	r3, [r7, #4]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001058:	f001 f82d 	bl	80020b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105c:	f000 f898 	bl	8001190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001060:	f000 fada 	bl	8001618 <MX_GPIO_Init>
  MX_LWIP_Init();
 8001064:	f004 fd1c 	bl	8005aa0 <MX_LWIP_Init>
  MX_TIM2_Init();
 8001068:	f000 f95a 	bl	8001320 <MX_TIM2_Init>
  MX_TIM3_Init();
 800106c:	f000 f9a6 	bl	80013bc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001070:	f000 f9fa 	bl	8001468 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001074:	f000 f8fa 	bl	800126c <MX_TIM1_Init>
  MX_TIM5_Init();
 8001078:	f000 fa4c 	bl	8001514 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 800107c:	213c      	movs	r1, #60	@ 0x3c
 800107e:	4834      	ldr	r0, [pc, #208]	@ (8001150 <main+0x100>)
 8001080:	f003 fcd2 	bl	8004a28 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001084:	213c      	movs	r1, #60	@ 0x3c
 8001086:	4833      	ldr	r0, [pc, #204]	@ (8001154 <main+0x104>)
 8001088:	f003 fcce 	bl	8004a28 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800108c:	213c      	movs	r1, #60	@ 0x3c
 800108e:	4832      	ldr	r0, [pc, #200]	@ (8001158 <main+0x108>)
 8001090:	f003 fcca 	bl	8004a28 <HAL_TIM_Encoder_Start_IT>
  TIM5->CCR1 = 1200;
 8001094:	4b31      	ldr	r3, [pc, #196]	@ (800115c <main+0x10c>)
 8001096:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800109a:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800109c:	2100      	movs	r1, #0
 800109e:	4830      	ldr	r0, [pc, #192]	@ (8001160 <main+0x110>)
 80010a0:	f003 fac8 	bl	8004634 <HAL_TIM_PWM_Start>

  timeManagerInit(&htim2);
 80010a4:	482f      	ldr	r0, [pc, #188]	@ (8001164 <main+0x114>)
 80010a6:	f000 fe79 	bl	8001d9c <timeManagerInit>
  NTP_UDP = udp_new();
 80010aa:	f00c ff7d 	bl	800dfa8 <udp_new>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4a2d      	ldr	r2, [pc, #180]	@ (8001168 <main+0x118>)
 80010b2:	6013      	str	r3, [r2, #0]
  udp_bind(NTP_UDP, IP_ADDR_ANY, 10000);
 80010b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001168 <main+0x118>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80010bc:	492b      	ldr	r1, [pc, #172]	@ (800116c <main+0x11c>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f00c feca 	bl	800de58 <udp_bind>
  udp_recv(NTP_UDP, NTP_server, NULL);
 80010c4:	4b28      	ldr	r3, [pc, #160]	@ (8001168 <main+0x118>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2200      	movs	r2, #0
 80010ca:	4929      	ldr	r1, [pc, #164]	@ (8001170 <main+0x120>)
 80010cc:	4618      	mov	r0, r3
 80010ce:	f00c ff4b 	bl	800df68 <udp_recv>

  IP_ADDR4(&Remote_IP, 192, 168, 1, 2);    // The IP Address for the ROS-based system
 80010d2:	4b28      	ldr	r3, [pc, #160]	@ (8001174 <main+0x124>)
 80010d4:	4a28      	ldr	r2, [pc, #160]	@ (8001178 <main+0x128>)
 80010d6:	601a      	str	r2, [r3, #0]
  UDP = udp_new();
 80010d8:	f00c ff66 	bl	800dfa8 <udp_new>
 80010dc:	4603      	mov	r3, r0
 80010de:	4a27      	ldr	r2, [pc, #156]	@ (800117c <main+0x12c>)
 80010e0:	6013      	str	r3, [r2, #0]
  uint32_t UDP_Interval = 1000000;         // Send UDP packets every 1ms
 80010e2:	4b27      	ldr	r3, [pc, #156]	@ (8001180 <main+0x130>)
 80010e4:	60bb      	str	r3, [r7, #8]
  uint32_t UDP_counter = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  uint8_t IRTracker_period = 40;           // The camera fps is set to 1/40ms = 25
 80010ea:	2328      	movs	r3, #40	@ 0x28
 80010ec:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (Tick() - UDP_TimeStamp >= UDP_Interval)
 80010ee:	f000 fe75 	bl	8001ddc <Tick>
 80010f2:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <main+0x134>)
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	1a84      	subs	r4, r0, r2
 80010fa:	eb61 0503 	sbc.w	r5, r1, r3
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	2200      	movs	r2, #0
 8001102:	4698      	mov	r8, r3
 8001104:	4691      	mov	r9, r2
 8001106:	4544      	cmp	r4, r8
 8001108:	eb75 0309 	sbcs.w	r3, r5, r9
 800110c:	d31c      	bcc.n	8001148 <main+0xf8>
	  {
		  if (UDP_counter % IRTracker_period == 0)
 800110e:	79fa      	ldrb	r2, [r7, #7]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	fbb3 f1f2 	udiv	r1, r3, r2
 8001116:	fb01 f202 	mul.w	r2, r1, r2
 800111a:	1a9b      	subs	r3, r3, r2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10a      	bne.n	8001136 <main+0xe6>
		  {
			  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001120:	2100      	movs	r1, #0
 8001122:	480f      	ldr	r0, [pc, #60]	@ (8001160 <main+0x110>)
 8001124:	f003 fa86 	bl	8004634 <HAL_TIM_PWM_Start>
			  outPacket.Data.IR_TimeStamp = Tick();
 8001128:	f000 fe58 	bl	8001ddc <Tick>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4915      	ldr	r1, [pc, #84]	@ (8001188 <main+0x138>)
 8001132:	e9c1 2306 	strd	r2, r3, [r1, #24]
		  }
		  encoder_read(outPacket.Data.mot_encoders, &outPacket.Data.ENC_TimeStamp);
 8001136:	4915      	ldr	r1, [pc, #84]	@ (800118c <main+0x13c>)
 8001138:	4813      	ldr	r0, [pc, #76]	@ (8001188 <main+0x138>)
 800113a:	f000 fd29 	bl	8001b90 <encoder_read>
		  sendUdpPacket();
 800113e:	f7ff fef3 	bl	8000f28 <sendUdpPacket>
		  UDP_counter++;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3301      	adds	r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
	  }
	  MX_LWIP_Process();
 8001148:	f004 fdea 	bl	8005d20 <MX_LWIP_Process>
	  if (Tick() - UDP_TimeStamp >= UDP_Interval)
 800114c:	e7cf      	b.n	80010ee <main+0x9e>
 800114e:	bf00      	nop
 8001150:	2000083c 	.word	0x2000083c
 8001154:	200008d4 	.word	0x200008d4
 8001158:	20000920 	.word	0x20000920
 800115c:	40000c00 	.word	0x40000c00
 8001160:	2000096c 	.word	0x2000096c
 8001164:	20000888 	.word	0x20000888
 8001168:	200009c0 	.word	0x200009c0
 800116c:	08017b5c 	.word	0x08017b5c
 8001170:	08000f91 	.word	0x08000f91
 8001174:	200009b8 	.word	0x200009b8
 8001178:	0201a8c0 	.word	0x0201a8c0
 800117c:	200009bc 	.word	0x200009bc
 8001180:	000f4240 	.word	0x000f4240
 8001184:	200009c8 	.word	0x200009c8
 8001188:	200009d8 	.word	0x200009d8
 800118c:	200009e8 	.word	0x200009e8

08001190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b094      	sub	sp, #80	@ 0x50
 8001194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001196:	f107 0320 	add.w	r3, r7, #32
 800119a:	2230      	movs	r2, #48	@ 0x30
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f00f fb6d 	bl	801087e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011b4:	f002 fc0a 	bl	80039cc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001264 <SystemClock_Config+0xd4>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011bc:	4a29      	ldr	r2, [pc, #164]	@ (8001264 <SystemClock_Config+0xd4>)
 80011be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c4:	4b27      	ldr	r3, [pc, #156]	@ (8001264 <SystemClock_Config+0xd4>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d0:	4b25      	ldr	r3, [pc, #148]	@ (8001268 <SystemClock_Config+0xd8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a24      	ldr	r2, [pc, #144]	@ (8001268 <SystemClock_Config+0xd8>)
 80011d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4b22      	ldr	r3, [pc, #136]	@ (8001268 <SystemClock_Config+0xd8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011e8:	2301      	movs	r3, #1
 80011ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f2:	2302      	movs	r3, #2
 80011f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011fc:	2304      	movs	r3, #4
 80011fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8001200:	23c8      	movs	r3, #200	@ 0xc8
 8001202:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001204:	2302      	movs	r3, #2
 8001206:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001208:	2309      	movs	r3, #9
 800120a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120c:	f107 0320 	add.w	r3, r7, #32
 8001210:	4618      	mov	r0, r3
 8001212:	f002 fc3b 	bl	8003a8c <HAL_RCC_OscConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800121c:	f000 faaa 	bl	8001774 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001220:	f002 fbe4 	bl	80039ec <HAL_PWREx_EnableOverDrive>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800122a:	f000 faa3 	bl	8001774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122e:	230f      	movs	r3, #15
 8001230:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001232:	2302      	movs	r3, #2
 8001234:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800123a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800123e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001240:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001244:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2106      	movs	r1, #6
 800124c:	4618      	mov	r0, r3
 800124e:	f002 fec1 	bl	8003fd4 <HAL_RCC_ClockConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001258:	f000 fa8c 	bl	8001774 <Error_Handler>
  }
}
 800125c:	bf00      	nop
 800125e:	3750      	adds	r7, #80	@ 0x50
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40023800 	.word	0x40023800
 8001268:	40007000 	.word	0x40007000

0800126c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08c      	sub	sp, #48	@ 0x30
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	2224      	movs	r2, #36	@ 0x24
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f00f faff 	bl	801087e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	463b      	mov	r3, r7
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800128a:	4b23      	ldr	r3, [pc, #140]	@ (8001318 <MX_TIM1_Init+0xac>)
 800128c:	4a23      	ldr	r2, [pc, #140]	@ (800131c <MX_TIM1_Init+0xb0>)
 800128e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001290:	4b21      	ldr	r3, [pc, #132]	@ (8001318 <MX_TIM1_Init+0xac>)
 8001292:	2200      	movs	r2, #0
 8001294:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001296:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <MX_TIM1_Init+0xac>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800129c:	4b1e      	ldr	r3, [pc, #120]	@ (8001318 <MX_TIM1_Init+0xac>)
 800129e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <MX_TIM1_Init+0xac>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <MX_TIM1_Init+0xac>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012b0:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <MX_TIM1_Init+0xac>)
 80012b2:	2280      	movs	r2, #128	@ 0x80
 80012b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012b6:	2303      	movs	r3, #3
 80012b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012be:	2301      	movs	r3, #1
 80012c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012ce:	2301      	movs	r3, #1
 80012d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	4619      	mov	r1, r3
 80012e0:	480d      	ldr	r0, [pc, #52]	@ (8001318 <MX_TIM1_Init+0xac>)
 80012e2:	f003 fafb 	bl	80048dc <HAL_TIM_Encoder_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80012ec:	f000 fa42 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f0:	2300      	movs	r3, #0
 80012f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012fc:	463b      	mov	r3, r7
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	@ (8001318 <MX_TIM1_Init+0xac>)
 8001302:	f004 fb21 	bl	8005948 <HAL_TIMEx_MasterConfigSynchronization>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800130c:	f000 fa32 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	3730      	adds	r7, #48	@ 0x30
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2000083c 	.word	0x2000083c
 800131c:	40010000 	.word	0x40010000

08001320 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001326:	f107 0310 	add.w	r3, r7, #16
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800133e:	4b1e      	ldr	r3, [pc, #120]	@ (80013b8 <MX_TIM2_Init+0x98>)
 8001340:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001344:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001346:	4b1c      	ldr	r3, [pc, #112]	@ (80013b8 <MX_TIM2_Init+0x98>)
 8001348:	2200      	movs	r2, #0
 800134a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134c:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <MX_TIM2_Init+0x98>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001352:	4b19      	ldr	r3, [pc, #100]	@ (80013b8 <MX_TIM2_Init+0x98>)
 8001354:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001358:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135a:	4b17      	ldr	r3, [pc, #92]	@ (80013b8 <MX_TIM2_Init+0x98>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001360:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <MX_TIM2_Init+0x98>)
 8001362:	2280      	movs	r2, #128	@ 0x80
 8001364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001366:	4814      	ldr	r0, [pc, #80]	@ (80013b8 <MX_TIM2_Init+0x98>)
 8001368:	f003 f832 	bl	80043d0 <HAL_TIM_Base_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001372:	f000 f9ff 	bl	8001774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001376:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800137a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4619      	mov	r1, r3
 8001382:	480d      	ldr	r0, [pc, #52]	@ (80013b8 <MX_TIM2_Init+0x98>)
 8001384:	f003 fe1a 	bl	8004fbc <HAL_TIM_ConfigClockSource>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800138e:	f000 f9f1 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	4619      	mov	r1, r3
 800139e:	4806      	ldr	r0, [pc, #24]	@ (80013b8 <MX_TIM2_Init+0x98>)
 80013a0:	f004 fad2 	bl	8005948 <HAL_TIMEx_MasterConfigSynchronization>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013aa:	f000 f9e3 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	3720      	adds	r7, #32
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000888 	.word	0x20000888

080013bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08c      	sub	sp, #48	@ 0x30
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	2224      	movs	r2, #36	@ 0x24
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f00f fa57 	bl	801087e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d0:	463b      	mov	r3, r7
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013da:	4b21      	ldr	r3, [pc, #132]	@ (8001460 <MX_TIM3_Init+0xa4>)
 80013dc:	4a21      	ldr	r2, [pc, #132]	@ (8001464 <MX_TIM3_Init+0xa8>)
 80013de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001460 <MX_TIM3_Init+0xa4>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001460 <MX_TIM3_Init+0xa4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80013ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001460 <MX_TIM3_Init+0xa4>)
 80013ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <MX_TIM3_Init+0xa4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013fa:	4b19      	ldr	r3, [pc, #100]	@ (8001460 <MX_TIM3_Init+0xa4>)
 80013fc:	2280      	movs	r2, #128	@ 0x80
 80013fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001400:	2303      	movs	r3, #3
 8001402:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001408:	2301      	movs	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001418:	2301      	movs	r3, #1
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	4619      	mov	r1, r3
 800142a:	480d      	ldr	r0, [pc, #52]	@ (8001460 <MX_TIM3_Init+0xa4>)
 800142c:	f003 fa56 	bl	80048dc <HAL_TIM_Encoder_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001436:	f000 f99d 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001442:	463b      	mov	r3, r7
 8001444:	4619      	mov	r1, r3
 8001446:	4806      	ldr	r0, [pc, #24]	@ (8001460 <MX_TIM3_Init+0xa4>)
 8001448:	f004 fa7e 	bl	8005948 <HAL_TIMEx_MasterConfigSynchronization>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001452:	f000 f98f 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	3730      	adds	r7, #48	@ 0x30
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200008d4 	.word	0x200008d4
 8001464:	40000400 	.word	0x40000400

08001468 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08c      	sub	sp, #48	@ 0x30
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800146e:	f107 030c 	add.w	r3, r7, #12
 8001472:	2224      	movs	r2, #36	@ 0x24
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f00f fa01 	bl	801087e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147c:	463b      	mov	r3, r7
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001486:	4b21      	ldr	r3, [pc, #132]	@ (800150c <MX_TIM4_Init+0xa4>)
 8001488:	4a21      	ldr	r2, [pc, #132]	@ (8001510 <MX_TIM4_Init+0xa8>)
 800148a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800148c:	4b1f      	ldr	r3, [pc, #124]	@ (800150c <MX_TIM4_Init+0xa4>)
 800148e:	2200      	movs	r2, #0
 8001490:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001492:	4b1e      	ldr	r3, [pc, #120]	@ (800150c <MX_TIM4_Init+0xa4>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001498:	4b1c      	ldr	r3, [pc, #112]	@ (800150c <MX_TIM4_Init+0xa4>)
 800149a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800149e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <MX_TIM4_Init+0xa4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014a6:	4b19      	ldr	r3, [pc, #100]	@ (800150c <MX_TIM4_Init+0xa4>)
 80014a8:	2280      	movs	r2, #128	@ 0x80
 80014aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014ac:	2303      	movs	r3, #3
 80014ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014b4:	2301      	movs	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014c4:	2301      	movs	r3, #1
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	4619      	mov	r1, r3
 80014d6:	480d      	ldr	r0, [pc, #52]	@ (800150c <MX_TIM4_Init+0xa4>)
 80014d8:	f003 fa00 	bl	80048dc <HAL_TIM_Encoder_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80014e2:	f000 f947 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014ee:	463b      	mov	r3, r7
 80014f0:	4619      	mov	r1, r3
 80014f2:	4806      	ldr	r0, [pc, #24]	@ (800150c <MX_TIM4_Init+0xa4>)
 80014f4:	f004 fa28 	bl	8005948 <HAL_TIMEx_MasterConfigSynchronization>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80014fe:	f000 f939 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	3730      	adds	r7, #48	@ 0x30
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000920 	.word	0x20000920
 8001510:	40000800 	.word	0x40000800

08001514 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08e      	sub	sp, #56	@ 0x38
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001534:	463b      	mov	r3, r7
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]
 8001542:	615a      	str	r2, [r3, #20]
 8001544:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001546:	4b32      	ldr	r3, [pc, #200]	@ (8001610 <MX_TIM5_Init+0xfc>)
 8001548:	4a32      	ldr	r2, [pc, #200]	@ (8001614 <MX_TIM5_Init+0x100>)
 800154a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1999;
 800154c:	4b30      	ldr	r3, [pc, #192]	@ (8001610 <MX_TIM5_Init+0xfc>)
 800154e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001552:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001554:	4b2e      	ldr	r3, [pc, #184]	@ (8001610 <MX_TIM5_Init+0xfc>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3999;
 800155a:	4b2d      	ldr	r3, [pc, #180]	@ (8001610 <MX_TIM5_Init+0xfc>)
 800155c:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001560:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001562:	4b2b      	ldr	r3, [pc, #172]	@ (8001610 <MX_TIM5_Init+0xfc>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001568:	4b29      	ldr	r3, [pc, #164]	@ (8001610 <MX_TIM5_Init+0xfc>)
 800156a:	2280      	movs	r2, #128	@ 0x80
 800156c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800156e:	4828      	ldr	r0, [pc, #160]	@ (8001610 <MX_TIM5_Init+0xfc>)
 8001570:	f002 ff2e 	bl	80043d0 <HAL_TIM_Base_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM5_Init+0x6a>
  {
    Error_Handler();
 800157a:	f000 f8fb 	bl	8001774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001582:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001584:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001588:	4619      	mov	r1, r3
 800158a:	4821      	ldr	r0, [pc, #132]	@ (8001610 <MX_TIM5_Init+0xfc>)
 800158c:	f003 fd16 	bl	8004fbc <HAL_TIM_ConfigClockSource>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM5_Init+0x86>
  {
    Error_Handler();
 8001596:	f000 f8ed 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800159a:	481d      	ldr	r0, [pc, #116]	@ (8001610 <MX_TIM5_Init+0xfc>)
 800159c:	f002 ffe8 	bl	8004570 <HAL_TIM_PWM_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 80015a6:	f000 f8e5 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 80015aa:	2108      	movs	r1, #8
 80015ac:	4818      	ldr	r0, [pc, #96]	@ (8001610 <MX_TIM5_Init+0xfc>)
 80015ae:	f003 f93b 	bl	8004828 <HAL_TIM_OnePulse_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM5_Init+0xa8>
  {
    Error_Handler();
 80015b8:	f000 f8dc 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	4811      	ldr	r0, [pc, #68]	@ (8001610 <MX_TIM5_Init+0xfc>)
 80015cc:	f004 f9bc 	bl	8005948 <HAL_TIMEx_MasterConfigSynchronization>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM5_Init+0xc6>
  {
    Error_Handler();
 80015d6:	f000 f8cd 	bl	8001774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015da:	2360      	movs	r3, #96	@ 0x60
 80015dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ea:	463b      	mov	r3, r7
 80015ec:	2200      	movs	r2, #0
 80015ee:	4619      	mov	r1, r3
 80015f0:	4807      	ldr	r0, [pc, #28]	@ (8001610 <MX_TIM5_Init+0xfc>)
 80015f2:	f003 fbcf 	bl	8004d94 <HAL_TIM_PWM_ConfigChannel>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 80015fc:	f000 f8ba 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001600:	4803      	ldr	r0, [pc, #12]	@ (8001610 <MX_TIM5_Init+0xfc>)
 8001602:	f000 f9f9 	bl	80019f8 <HAL_TIM_MspPostInit>

}
 8001606:	bf00      	nop
 8001608:	3738      	adds	r7, #56	@ 0x38
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2000096c 	.word	0x2000096c
 8001614:	40000c00 	.word	0x40000c00

08001618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08c      	sub	sp, #48	@ 0x30
 800161c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
 800162c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800162e:	4b4d      	ldr	r3, [pc, #308]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a4c      	ldr	r2, [pc, #304]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001634:	f043 0304 	orr.w	r3, r3, #4
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b4a      	ldr	r3, [pc, #296]	@ (8001764 <MX_GPIO_Init+0x14c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	61bb      	str	r3, [r7, #24]
 8001644:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001646:	4b47      	ldr	r3, [pc, #284]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a46      	ldr	r2, [pc, #280]	@ (8001764 <MX_GPIO_Init+0x14c>)
 800164c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b44      	ldr	r3, [pc, #272]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	4b41      	ldr	r3, [pc, #260]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a40      	ldr	r2, [pc, #256]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b3e      	ldr	r3, [pc, #248]	@ (8001764 <MX_GPIO_Init+0x14c>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001676:	4b3b      	ldr	r3, [pc, #236]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a3a      	ldr	r2, [pc, #232]	@ (8001764 <MX_GPIO_Init+0x14c>)
 800167c:	f043 0310 	orr.w	r3, r3, #16
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b38      	ldr	r3, [pc, #224]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	4b35      	ldr	r3, [pc, #212]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a34      	ldr	r2, [pc, #208]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b32      	ldr	r3, [pc, #200]	@ (8001764 <MX_GPIO_Init+0x14c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001764 <MX_GPIO_Init+0x14c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a2e      	ldr	r2, [pc, #184]	@ (8001764 <MX_GPIO_Init+0x14c>)
 80016ac:	f043 0308 	orr.w	r3, r3, #8
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001764 <MX_GPIO_Init+0x14c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016be:	4b29      	ldr	r3, [pc, #164]	@ (8001764 <MX_GPIO_Init+0x14c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	4a28      	ldr	r2, [pc, #160]	@ (8001764 <MX_GPIO_Init+0x14c>)
 80016c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ca:	4b26      	ldr	r3, [pc, #152]	@ (8001764 <MX_GPIO_Init+0x14c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80016dc:	4822      	ldr	r0, [pc, #136]	@ (8001768 <MX_GPIO_Init+0x150>)
 80016de:	f002 f95b 	bl	8003998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2140      	movs	r1, #64	@ 0x40
 80016e6:	4821      	ldr	r0, [pc, #132]	@ (800176c <MX_GPIO_Init+0x154>)
 80016e8:	f002 f956 	bl	8003998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80016ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	4619      	mov	r1, r3
 8001702:	481b      	ldr	r0, [pc, #108]	@ (8001770 <MX_GPIO_Init+0x158>)
 8001704:	f001 ff9c 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001708:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800170c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170e:	2301      	movs	r3, #1
 8001710:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171a:	f107 031c 	add.w	r3, r7, #28
 800171e:	4619      	mov	r1, r3
 8001720:	4811      	ldr	r0, [pc, #68]	@ (8001768 <MX_GPIO_Init+0x150>)
 8001722:	f001 ff8d 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001726:	2340      	movs	r3, #64	@ 0x40
 8001728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172a:	2301      	movs	r3, #1
 800172c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	4619      	mov	r1, r3
 800173c:	480b      	ldr	r0, [pc, #44]	@ (800176c <MX_GPIO_Init+0x154>)
 800173e:	f001 ff7f 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001742:	2380      	movs	r3, #128	@ 0x80
 8001744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	@ (800176c <MX_GPIO_Init+0x154>)
 8001756:	f001 ff73 	bl	8003640 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800175a:	bf00      	nop
 800175c:	3730      	adds	r7, #48	@ 0x30
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800
 8001768:	40020400 	.word	0x40020400
 800176c:	40021800 	.word	0x40021800
 8001770:	40020800 	.word	0x40020800

08001774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001778:	b672      	cpsid	i
}
 800177a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <Error_Handler+0x8>

08001780 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <HAL_MspInit+0x44>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	4a0e      	ldr	r2, [pc, #56]	@ (80017c4 <HAL_MspInit+0x44>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	@ 0x40
 8001792:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <HAL_MspInit+0x44>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <HAL_MspInit+0x44>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	4a08      	ldr	r2, [pc, #32]	@ (80017c4 <HAL_MspInit+0x44>)
 80017a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <HAL_MspInit+0x44>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800

080017c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08e      	sub	sp, #56	@ 0x38
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a60      	ldr	r2, [pc, #384]	@ (8001968 <HAL_TIM_Encoder_MspInit+0x1a0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d131      	bne.n	800184e <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017ea:	4b60      	ldr	r3, [pc, #384]	@ (800196c <HAL_TIM_Encoder_MspInit+0x1a4>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	4a5f      	ldr	r2, [pc, #380]	@ (800196c <HAL_TIM_Encoder_MspInit+0x1a4>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017f6:	4b5d      	ldr	r3, [pc, #372]	@ (800196c <HAL_TIM_Encoder_MspInit+0x1a4>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	623b      	str	r3, [r7, #32]
 8001800:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001802:	4b5a      	ldr	r3, [pc, #360]	@ (800196c <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	4a59      	ldr	r2, [pc, #356]	@ (800196c <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001808:	f043 0310 	orr.w	r3, r3, #16
 800180c:	6313      	str	r3, [r2, #48]	@ 0x30
 800180e:	4b57      	ldr	r3, [pc, #348]	@ (800196c <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800181a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800181e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800182c:	2301      	movs	r3, #1
 800182e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001830:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001834:	4619      	mov	r1, r3
 8001836:	484e      	ldr	r0, [pc, #312]	@ (8001970 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001838:	f001 ff02 	bl	8003640 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	2019      	movs	r0, #25
 8001842:	f000 fd94 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001846:	2019      	movs	r0, #25
 8001848:	f000 fdad 	bl	80023a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800184c:	e087      	b.n	800195e <HAL_TIM_Encoder_MspInit+0x196>
  else if(htim_encoder->Instance==TIM3)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a48      	ldr	r2, [pc, #288]	@ (8001974 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d14c      	bne.n	80018f2 <HAL_TIM_Encoder_MspInit+0x12a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001858:	4b44      	ldr	r3, [pc, #272]	@ (800196c <HAL_TIM_Encoder_MspInit+0x1a4>)
 800185a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185c:	4a43      	ldr	r2, [pc, #268]	@ (800196c <HAL_TIM_Encoder_MspInit+0x1a4>)
 800185e:	f043 0302 	orr.w	r3, r3, #2
 8001862:	6413      	str	r3, [r2, #64]	@ 0x40
 8001864:	4b41      	ldr	r3, [pc, #260]	@ (800196c <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	61bb      	str	r3, [r7, #24]
 800186e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001870:	4b3e      	ldr	r3, [pc, #248]	@ (800196c <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001874:	4a3d      	ldr	r2, [pc, #244]	@ (800196c <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6313      	str	r3, [r2, #48]	@ 0x30
 800187c:	4b3b      	ldr	r3, [pc, #236]	@ (800196c <HAL_TIM_Encoder_MspInit+0x1a4>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001888:	4b38      	ldr	r3, [pc, #224]	@ (800196c <HAL_TIM_Encoder_MspInit+0x1a4>)
 800188a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188c:	4a37      	ldr	r2, [pc, #220]	@ (800196c <HAL_TIM_Encoder_MspInit+0x1a4>)
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	6313      	str	r3, [r2, #48]	@ 0x30
 8001894:	4b35      	ldr	r3, [pc, #212]	@ (800196c <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018a0:	2340      	movs	r3, #64	@ 0x40
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018b0:	2302      	movs	r3, #2
 80018b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b8:	4619      	mov	r1, r3
 80018ba:	482f      	ldr	r0, [pc, #188]	@ (8001978 <HAL_TIM_Encoder_MspInit+0x1b0>)
 80018bc:	f001 fec0 	bl	8003640 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018c0:	2380      	movs	r3, #128	@ 0x80
 80018c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018d0:	2302      	movs	r3, #2
 80018d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018d8:	4619      	mov	r1, r3
 80018da:	4828      	ldr	r0, [pc, #160]	@ (800197c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80018dc:	f001 feb0 	bl	8003640 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2100      	movs	r1, #0
 80018e4:	201d      	movs	r0, #29
 80018e6:	f000 fd42 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018ea:	201d      	movs	r0, #29
 80018ec:	f000 fd5b 	bl	80023a6 <HAL_NVIC_EnableIRQ>
}
 80018f0:	e035      	b.n	800195e <HAL_TIM_Encoder_MspInit+0x196>
  else if(htim_encoder->Instance==TIM4)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a22      	ldr	r2, [pc, #136]	@ (8001980 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d130      	bne.n	800195e <HAL_TIM_Encoder_MspInit+0x196>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018fc:	4b1b      	ldr	r3, [pc, #108]	@ (800196c <HAL_TIM_Encoder_MspInit+0x1a4>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001900:	4a1a      	ldr	r2, [pc, #104]	@ (800196c <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001902:	f043 0304 	orr.w	r3, r3, #4
 8001906:	6413      	str	r3, [r2, #64]	@ 0x40
 8001908:	4b18      	ldr	r3, [pc, #96]	@ (800196c <HAL_TIM_Encoder_MspInit+0x1a4>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001914:	4b15      	ldr	r3, [pc, #84]	@ (800196c <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001918:	4a14      	ldr	r2, [pc, #80]	@ (800196c <HAL_TIM_Encoder_MspInit+0x1a4>)
 800191a:	f043 0308 	orr.w	r3, r3, #8
 800191e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001920:	4b12      	ldr	r3, [pc, #72]	@ (800196c <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800192c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001930:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800193e:	2302      	movs	r3, #2
 8001940:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001946:	4619      	mov	r1, r3
 8001948:	480e      	ldr	r0, [pc, #56]	@ (8001984 <HAL_TIM_Encoder_MspInit+0x1bc>)
 800194a:	f001 fe79 	bl	8003640 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	201e      	movs	r0, #30
 8001954:	f000 fd0b 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001958:	201e      	movs	r0, #30
 800195a:	f000 fd24 	bl	80023a6 <HAL_NVIC_EnableIRQ>
}
 800195e:	bf00      	nop
 8001960:	3738      	adds	r7, #56	@ 0x38
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40010000 	.word	0x40010000
 800196c:	40023800 	.word	0x40023800
 8001970:	40021000 	.word	0x40021000
 8001974:	40000400 	.word	0x40000400
 8001978:	40020000 	.word	0x40020000
 800197c:	40020800 	.word	0x40020800
 8001980:	40000800 	.word	0x40000800
 8001984:	40020c00 	.word	0x40020c00

08001988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001998:	d114      	bne.n	80019c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800199a:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <HAL_TIM_Base_MspInit+0x68>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	4a14      	ldr	r2, [pc, #80]	@ (80019f0 <HAL_TIM_Base_MspInit+0x68>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a6:	4b12      	ldr	r3, [pc, #72]	@ (80019f0 <HAL_TIM_Base_MspInit+0x68>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2100      	movs	r1, #0
 80019b6:	201c      	movs	r0, #28
 80019b8:	f000 fcd9 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019bc:	201c      	movs	r0, #28
 80019be:	f000 fcf2 	bl	80023a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80019c2:	e010      	b.n	80019e6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <HAL_TIM_Base_MspInit+0x6c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d10b      	bne.n	80019e6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019ce:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <HAL_TIM_Base_MspInit+0x68>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	4a07      	ldr	r2, [pc, #28]	@ (80019f0 <HAL_TIM_Base_MspInit+0x68>)
 80019d4:	f043 0308 	orr.w	r3, r3, #8
 80019d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019da:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <HAL_TIM_Base_MspInit+0x68>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
}
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40000c00 	.word	0x40000c00

080019f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a11      	ldr	r2, [pc, #68]	@ (8001a5c <HAL_TIM_MspPostInit+0x64>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d11b      	bne.n	8001a52 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <HAL_TIM_MspPostInit+0x68>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	4a10      	ldr	r2, [pc, #64]	@ (8001a60 <HAL_TIM_MspPostInit+0x68>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a26:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <HAL_TIM_MspPostInit+0x68>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0/WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a32:	2301      	movs	r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a42:	2302      	movs	r3, #2
 8001a44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	@ (8001a64 <HAL_TIM_MspPostInit+0x6c>)
 8001a4e:	f001 fdf7 	bl	8003640 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001a52:	bf00      	nop
 8001a54:	3720      	adds	r7, #32
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40000c00 	.word	0x40000c00
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020000 	.word	0x40020000

08001a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <NMI_Handler+0x4>

08001a70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <HardFault_Handler+0x4>

08001a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <MemManage_Handler+0x4>

08001a80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <BusFault_Handler+0x4>

08001a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <UsageFault_Handler+0x4>

08001a90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001abe:	f000 fb37 	bl	8002130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if (htim3.Instance->CNT < 500)
 8001acc:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001ad6:	d205      	bcs.n	8001ae4 <TIM1_UP_TIM10_IRQHandler+0x1c>
		encoder1_index++;
 8001ad8:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <TIM1_UP_TIM10_IRQHandler+0x34>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	4a07      	ldr	r2, [pc, #28]	@ (8001afc <TIM1_UP_TIM10_IRQHandler+0x34>)
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e004      	b.n	8001aee <TIM1_UP_TIM10_IRQHandler+0x26>
	else
		encoder1_index--;
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <TIM1_UP_TIM10_IRQHandler+0x34>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	4a04      	ldr	r2, [pc, #16]	@ (8001afc <TIM1_UP_TIM10_IRQHandler+0x34>)
 8001aec:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001aee:	4804      	ldr	r0, [pc, #16]	@ (8001b00 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8001af0:	f003 f848 	bl	8004b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	200008d4 	.word	0x200008d4
 8001afc:	200009f8 	.word	0x200009f8
 8001b00:	2000083c 	.word	0x2000083c

08001b04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	time_keeper_interrupt_routine();
 8001b08:	f000 f95a 	bl	8001dc0 <time_keeper_interrupt_routine>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b0c:	4802      	ldr	r0, [pc, #8]	@ (8001b18 <TIM2_IRQHandler+0x14>)
 8001b0e:	f003 f839 	bl	8004b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000888 	.word	0x20000888

08001b1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if (htim3.Instance->CNT < 500)
 8001b20:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <TIM3_IRQHandler+0x30>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b26:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b2a:	d205      	bcs.n	8001b38 <TIM3_IRQHandler+0x1c>
		encoder2_index++;
 8001b2c:	4b08      	ldr	r3, [pc, #32]	@ (8001b50 <TIM3_IRQHandler+0x34>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	3301      	adds	r3, #1
 8001b32:	4a07      	ldr	r2, [pc, #28]	@ (8001b50 <TIM3_IRQHandler+0x34>)
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e004      	b.n	8001b42 <TIM3_IRQHandler+0x26>
	else
		encoder2_index--;
 8001b38:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <TIM3_IRQHandler+0x34>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	4a04      	ldr	r2, [pc, #16]	@ (8001b50 <TIM3_IRQHandler+0x34>)
 8001b40:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b42:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <TIM3_IRQHandler+0x30>)
 8001b44:	f003 f81e 	bl	8004b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200008d4 	.word	0x200008d4
 8001b50:	200009fc 	.word	0x200009fc

08001b54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if (htim3.Instance->CNT < 500)
 8001b58:	4b0a      	ldr	r3, [pc, #40]	@ (8001b84 <TIM4_IRQHandler+0x30>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b62:	d205      	bcs.n	8001b70 <TIM4_IRQHandler+0x1c>
		encoder3_index++;
 8001b64:	4b08      	ldr	r3, [pc, #32]	@ (8001b88 <TIM4_IRQHandler+0x34>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	4a07      	ldr	r2, [pc, #28]	@ (8001b88 <TIM4_IRQHandler+0x34>)
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e004      	b.n	8001b7a <TIM4_IRQHandler+0x26>
	else
		encoder3_index--;
 8001b70:	4b05      	ldr	r3, [pc, #20]	@ (8001b88 <TIM4_IRQHandler+0x34>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	4a04      	ldr	r2, [pc, #16]	@ (8001b88 <TIM4_IRQHandler+0x34>)
 8001b78:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b7a:	4804      	ldr	r0, [pc, #16]	@ (8001b8c <TIM4_IRQHandler+0x38>)
 8001b7c:	f003 f802 	bl	8004b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200008d4 	.word	0x200008d4
 8001b88:	20000a00 	.word	0x20000a00
 8001b8c:	20000920 	.word	0x20000920

08001b90 <encoder_read>:

/* USER CODE BEGIN 1 */
void encoder_read (int32_t *mot_encoder, uint64_t *ENC_TimeStamp)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
	mot_encoder[0] = encoder1_index*1000 + htim1.Instance->CNT;
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <encoder_read+0x74>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ba2:	fb02 f303 	mul.w	r3, r2, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b17      	ldr	r3, [pc, #92]	@ (8001c08 <encoder_read+0x78>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bae:	4413      	add	r3, r2
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	601a      	str	r2, [r3, #0]
	mot_encoder[1] = encoder2_index*1000 + htim3.Instance->CNT;
 8001bb6:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <encoder_read+0x7c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bbe:	fb02 f303 	mul.w	r3, r2, r3
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <encoder_read+0x80>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bca:	441a      	add	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3304      	adds	r3, #4
 8001bd0:	601a      	str	r2, [r3, #0]
	mot_encoder[2] = encoder3_index*1000 + htim4.Instance->CNT;
 8001bd2:	4b10      	ldr	r3, [pc, #64]	@ (8001c14 <encoder_read+0x84>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bda:	fb02 f303 	mul.w	r3, r2, r3
 8001bde:	461a      	mov	r2, r3
 8001be0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c18 <encoder_read+0x88>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be6:	441a      	add	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3308      	adds	r3, #8
 8001bec:	601a      	str	r2, [r3, #0]
	ENC_TimeStamp = Tick();
 8001bee:	f000 f8f5 	bl	8001ddc <Tick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	603b      	str	r3, [r7, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200009f8 	.word	0x200009f8
 8001c08:	2000083c 	.word	0x2000083c
 8001c0c:	200009fc 	.word	0x200009fc
 8001c10:	200008d4 	.word	0x200008d4
 8001c14:	20000a00 	.word	0x20000a00
 8001c18:	20000920 	.word	0x20000920

08001c1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return 1;
 8001c20:	2301      	movs	r3, #1
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <_kill>:

int _kill(int pid, int sig)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c36:	4b05      	ldr	r3, [pc, #20]	@ (8001c4c <_kill+0x20>)
 8001c38:	2216      	movs	r2, #22
 8001c3a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	20008cfc 	.word	0x20008cfc

08001c50 <_exit>:

void _exit (int status)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ffe5 	bl	8001c2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c62:	bf00      	nop
 8001c64:	e7fd      	b.n	8001c62 <_exit+0x12>

08001c66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b086      	sub	sp, #24
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	60f8      	str	r0, [r7, #12]
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e00a      	b.n	8001c8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c78:	f3af 8000 	nop.w
 8001c7c:	4601      	mov	r1, r0
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	60ba      	str	r2, [r7, #8]
 8001c84:	b2ca      	uxtb	r2, r1
 8001c86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	dbf0      	blt.n	8001c78 <_read+0x12>
  }

  return len;
 8001c96:	687b      	ldr	r3, [r7, #4]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cc8:	605a      	str	r2, [r3, #4]
  return 0;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <_isatty>:

int _isatty(int file)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ce0:	2301      	movs	r3, #1
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b085      	sub	sp, #20
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d10:	4a14      	ldr	r2, [pc, #80]	@ (8001d64 <_sbrk+0x5c>)
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <_sbrk+0x60>)
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d1c:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <_sbrk+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d24:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <_sbrk+0x64>)
 8001d26:	4a12      	ldr	r2, [pc, #72]	@ (8001d70 <_sbrk+0x68>)
 8001d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2a:	4b10      	ldr	r3, [pc, #64]	@ (8001d6c <_sbrk+0x64>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d205      	bcs.n	8001d44 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001d38:	4b0e      	ldr	r3, [pc, #56]	@ (8001d74 <_sbrk+0x6c>)
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d42:	e009      	b.n	8001d58 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d44:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <_sbrk+0x64>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4a:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	4a06      	ldr	r2, [pc, #24]	@ (8001d6c <_sbrk+0x64>)
 8001d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d56:	68fb      	ldr	r3, [r7, #12]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	371c      	adds	r7, #28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	20050000 	.word	0x20050000
 8001d68:	00000400 	.word	0x00000400
 8001d6c:	20000a04 	.word	0x20000a04
 8001d70:	20008ed0 	.word	0x20008ed0
 8001d74:	20008cfc 	.word	0x20008cfc

08001d78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d7c:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <SystemInit+0x20>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d82:	4a05      	ldr	r2, [pc, #20]	@ (8001d98 <SystemInit+0x20>)
 8001d84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <timeManagerInit>:
volatile uint64_t udp_tick = 0;
uint32_t tick_index = 23283;
TIM_HandleTypeDef *TIM;

void  timeManagerInit(TIM_HandleTypeDef *Timer)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	TIM = Timer;
 8001da4:	4a05      	ldr	r2, [pc, #20]	@ (8001dbc <timeManagerInit+0x20>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(TIM);
 8001daa:	4b04      	ldr	r3, [pc, #16]	@ (8001dbc <timeManagerInit+0x20>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 fb66 	bl	8004480 <HAL_TIM_Base_Start_IT>
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000a08 	.word	0x20000a08

08001dc0 <time_keeper_interrupt_routine>:

void time_keeper_interrupt_routine(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
	tick_index++;
 8001dc4:	4b04      	ldr	r3, [pc, #16]	@ (8001dd8 <time_keeper_interrupt_routine+0x18>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	4a03      	ldr	r2, [pc, #12]	@ (8001dd8 <time_keeper_interrupt_routine+0x18>)
 8001dcc:	6013      	str	r3, [r2, #0]
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	20000004 	.word	0x20000004

08001ddc <Tick>:

uint64_t Tick(void)
{
 8001ddc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
	return 10*(((uint64_t)(tick_index - 1) << 32) | ((uint64_t)TIM->Instance->CNT));
 8001de4:	491a      	ldr	r1, [pc, #104]	@ (8001e50 <Tick+0x74>)
 8001de6:	6809      	ldr	r1, [r1, #0]
 8001de8:	3901      	subs	r1, #1
 8001dea:	2000      	movs	r0, #0
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	f04f 0000 	mov.w	r0, #0
 8001df4:	f04f 0100 	mov.w	r1, #0
 8001df8:	683e      	ldr	r6, [r7, #0]
 8001dfa:	0031      	movs	r1, r6
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	4e15      	ldr	r6, [pc, #84]	@ (8001e54 <Tick+0x78>)
 8001e00:	6836      	ldr	r6, [r6, #0]
 8001e02:	6836      	ldr	r6, [r6, #0]
 8001e04:	6a76      	ldr	r6, [r6, #36]	@ 0x24
 8001e06:	f04f 0c00 	mov.w	ip, #0
 8001e0a:	4634      	mov	r4, r6
 8001e0c:	4665      	mov	r5, ip
 8001e0e:	ea40 0804 	orr.w	r8, r0, r4
 8001e12:	ea41 0905 	orr.w	r9, r1, r5
 8001e16:	4640      	mov	r0, r8
 8001e18:	4649      	mov	r1, r9
 8001e1a:	f04f 0400 	mov.w	r4, #0
 8001e1e:	f04f 0500 	mov.w	r5, #0
 8001e22:	008d      	lsls	r5, r1, #2
 8001e24:	ea45 7590 	orr.w	r5, r5, r0, lsr #30
 8001e28:	0084      	lsls	r4, r0, #2
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	4629      	mov	r1, r5
 8001e2e:	eb10 0208 	adds.w	r2, r0, r8
 8001e32:	eb41 0309 	adc.w	r3, r1, r9
 8001e36:	eb12 0a02 	adds.w	sl, r2, r2
 8001e3a:	eb43 0b03 	adc.w	fp, r3, r3
 8001e3e:	4652      	mov	r2, sl
 8001e40:	465b      	mov	r3, fp
}
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001e4e:	4770      	bx	lr
 8001e50:	20000004 	.word	0x20000004
 8001e54:	20000a08 	.word	0x20000a08

08001e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e5c:	480d      	ldr	r0, [pc, #52]	@ (8001e94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e5e:	490e      	ldr	r1, [pc, #56]	@ (8001e98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e60:	4a0e      	ldr	r2, [pc, #56]	@ (8001e9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e64:	e002      	b.n	8001e6c <LoopCopyDataInit>

08001e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e6a:	3304      	adds	r3, #4

08001e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e70:	d3f9      	bcc.n	8001e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e72:	4a0b      	ldr	r2, [pc, #44]	@ (8001ea0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e74:	4c0b      	ldr	r4, [pc, #44]	@ (8001ea4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e78:	e001      	b.n	8001e7e <LoopFillZerobss>

08001e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e7c:	3204      	adds	r2, #4

08001e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e80:	d3fb      	bcc.n	8001e7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e82:	f7ff ff79 	bl	8001d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e86:	f00e fd4f 	bl	8010928 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e8a:	f7ff f8e1 	bl	8001050 <main>
  bx  lr    
 8001e8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e90:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e98:	200006e0 	.word	0x200006e0
  ldr r2, =_sidata
 8001e9c:	08017f08 	.word	0x08017f08
  ldr r2, =_sbss
 8001ea0:	20000820 	.word	0x20000820
  ldr r4, =_ebss
 8001ea4:	20008ecc 	.word	0x20008ecc

08001ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea8:	e7fe      	b.n	8001ea8 <ADC_IRQHandler>

08001eaa <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00b      	beq.n	8001ed2 <LAN8742_RegisterBusIO+0x28>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d007      	beq.n	8001ed2 <LAN8742_RegisterBusIO+0x28>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <LAN8742_RegisterBusIO+0x28>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d102      	bne.n	8001ed8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ed6:	e014      	b.n	8001f02 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d139      	bne.n	8001f9e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	e01c      	b.n	8001f7e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	f107 020c 	add.w	r2, r7, #12
 8001f4c:	2112      	movs	r1, #18
 8001f4e:	6978      	ldr	r0, [r7, #20]
 8001f50:	4798      	blx	r3
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	da03      	bge.n	8001f60 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001f58:	f06f 0304 	mvn.w	r3, #4
 8001f5c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001f5e:	e00b      	b.n	8001f78 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 031f 	and.w	r3, r3, #31
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d105      	bne.n	8001f78 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
         break;
 8001f76:	e005      	b.n	8001f84 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2b1f      	cmp	r3, #31
 8001f82:	d9df      	bls.n	8001f44 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b1f      	cmp	r3, #31
 8001f8a:	d902      	bls.n	8001f92 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001f8c:	f06f 0302 	mvn.w	r3, #2
 8001f90:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001f9e:	693b      	ldr	r3, [r7, #16]
 }
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6810      	ldr	r0, [r2, #0]
 8001fbc:	f107 020c 	add.w	r2, r7, #12
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	4798      	blx	r3
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	da02      	bge.n	8001fd0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001fca:	f06f 0304 	mvn.w	r3, #4
 8001fce:	e06e      	b.n	80020ae <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6810      	ldr	r0, [r2, #0]
 8001fd8:	f107 020c 	add.w	r2, r7, #12
 8001fdc:	2101      	movs	r1, #1
 8001fde:	4798      	blx	r3
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	da02      	bge.n	8001fec <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001fe6:	f06f 0304 	mvn.w	r3, #4
 8001fea:	e060      	b.n	80020ae <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e059      	b.n	80020ae <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6810      	ldr	r0, [r2, #0]
 8002002:	f107 020c 	add.w	r2, r7, #12
 8002006:	2100      	movs	r1, #0
 8002008:	4798      	blx	r3
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	da02      	bge.n	8002016 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002010:	f06f 0304 	mvn.w	r3, #4
 8002014:	e04b      	b.n	80020ae <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d11b      	bne.n	8002058 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d006      	beq.n	8002038 <LAN8742_GetLinkState+0x90>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002034:	2302      	movs	r3, #2
 8002036:	e03a      	b.n	80020ae <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002042:	2303      	movs	r3, #3
 8002044:	e033      	b.n	80020ae <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002050:	2304      	movs	r3, #4
 8002052:	e02c      	b.n	80020ae <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002054:	2305      	movs	r3, #5
 8002056:	e02a      	b.n	80020ae <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6810      	ldr	r0, [r2, #0]
 8002060:	f107 020c 	add.w	r2, r7, #12
 8002064:	211f      	movs	r1, #31
 8002066:	4798      	blx	r3
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	da02      	bge.n	8002074 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800206e:	f06f 0304 	mvn.w	r3, #4
 8002072:	e01c      	b.n	80020ae <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800207e:	2306      	movs	r3, #6
 8002080:	e015      	b.n	80020ae <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f003 031c 	and.w	r3, r3, #28
 8002088:	2b18      	cmp	r3, #24
 800208a:	d101      	bne.n	8002090 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800208c:	2302      	movs	r3, #2
 800208e:	e00e      	b.n	80020ae <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 031c 	and.w	r3, r3, #28
 8002096:	2b08      	cmp	r3, #8
 8002098:	d101      	bne.n	800209e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800209a:	2303      	movs	r3, #3
 800209c:	e007      	b.n	80020ae <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f003 031c 	and.w	r3, r3, #28
 80020a4:	2b14      	cmp	r3, #20
 80020a6:	d101      	bne.n	80020ac <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80020a8:	2304      	movs	r3, #4
 80020aa:	e000      	b.n	80020ae <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80020ac:	2305      	movs	r3, #5
    }
  }
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ba:	2003      	movs	r0, #3
 80020bc:	f000 f94c 	bl	8002358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020c0:	2000      	movs	r0, #0
 80020c2:	f000 f805 	bl	80020d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c6:	f7ff fb5b 	bl	8001780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d8:	4b12      	ldr	r3, [pc, #72]	@ (8002124 <HAL_InitTick+0x54>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b12      	ldr	r3, [pc, #72]	@ (8002128 <HAL_InitTick+0x58>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	4619      	mov	r1, r3
 80020e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f967 	bl	80023c2 <HAL_SYSTICK_Config>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00e      	b.n	800211c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b0f      	cmp	r3, #15
 8002102:	d80a      	bhi.n	800211a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002104:	2200      	movs	r2, #0
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800210c:	f000 f92f 	bl	800236e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002110:	4a06      	ldr	r2, [pc, #24]	@ (800212c <HAL_InitTick+0x5c>)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	e000      	b.n	800211c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000000 	.word	0x20000000
 8002128:	2000000c 	.word	0x2000000c
 800212c:	20000008 	.word	0x20000008

08002130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002134:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <HAL_IncTick+0x20>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <HAL_IncTick+0x24>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4413      	add	r3, r2
 8002140:	4a04      	ldr	r2, [pc, #16]	@ (8002154 <HAL_IncTick+0x24>)
 8002142:	6013      	str	r3, [r2, #0]
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	2000000c 	.word	0x2000000c
 8002154:	20000a0c 	.word	0x20000a0c

08002158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return uwTick;
 800215c:	4b03      	ldr	r3, [pc, #12]	@ (800216c <HAL_GetTick+0x14>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000a0c 	.word	0x20000a0c

08002170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002178:	f7ff ffee 	bl	8002158 <HAL_GetTick>
 800217c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002188:	d005      	beq.n	8002196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800218a:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <HAL_Delay+0x44>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4413      	add	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002196:	bf00      	nop
 8002198:	f7ff ffde 	bl	8002158 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d8f7      	bhi.n	8002198 <HAL_Delay+0x28>
  {
  }
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	2000000c 	.word	0x2000000c

080021b8 <__NVIC_SetPriorityGrouping>:
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c8:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <__NVIC_SetPriorityGrouping+0x40>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021d4:	4013      	ands	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e6:	4a04      	ldr	r2, [pc, #16]	@ (80021f8 <__NVIC_SetPriorityGrouping+0x40>)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	60d3      	str	r3, [r2, #12]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000ed00 	.word	0xe000ed00
 80021fc:	05fa0000 	.word	0x05fa0000

08002200 <__NVIC_GetPriorityGrouping>:
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002204:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <__NVIC_GetPriorityGrouping+0x18>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	f003 0307 	and.w	r3, r3, #7
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_EnableIRQ>:
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	2b00      	cmp	r3, #0
 800222c:	db0b      	blt.n	8002246 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	4907      	ldr	r1, [pc, #28]	@ (8002254 <__NVIC_EnableIRQ+0x38>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	2001      	movs	r0, #1
 800223e:	fa00 f202 	lsl.w	r2, r0, r2
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000e100 	.word	0xe000e100

08002258 <__NVIC_SetPriority>:
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	db0a      	blt.n	8002282 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	490c      	ldr	r1, [pc, #48]	@ (80022a4 <__NVIC_SetPriority+0x4c>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	0112      	lsls	r2, r2, #4
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	440b      	add	r3, r1
 800227c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002280:	e00a      	b.n	8002298 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4908      	ldr	r1, [pc, #32]	@ (80022a8 <__NVIC_SetPriority+0x50>)
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	3b04      	subs	r3, #4
 8002290:	0112      	lsls	r2, r2, #4
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	440b      	add	r3, r1
 8002296:	761a      	strb	r2, [r3, #24]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000e100 	.word	0xe000e100
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <NVIC_EncodePriority>:
{
 80022ac:	b480      	push	{r7}
 80022ae:	b089      	sub	sp, #36	@ 0x24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f1c3 0307 	rsb	r3, r3, #7
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	bf28      	it	cs
 80022ca:	2304      	movcs	r3, #4
 80022cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3304      	adds	r3, #4
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d902      	bls.n	80022dc <NVIC_EncodePriority+0x30>
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3b03      	subs	r3, #3
 80022da:	e000      	b.n	80022de <NVIC_EncodePriority+0x32>
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43da      	mvns	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	401a      	ands	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	43d9      	mvns	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002304:	4313      	orrs	r3, r2
}
 8002306:	4618      	mov	r0, r3
 8002308:	3724      	adds	r7, #36	@ 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <SysTick_Config>:
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002324:	d301      	bcc.n	800232a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002326:	2301      	movs	r3, #1
 8002328:	e00f      	b.n	800234a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800232a:	4a0a      	ldr	r2, [pc, #40]	@ (8002354 <SysTick_Config+0x40>)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002332:	210f      	movs	r1, #15
 8002334:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002338:	f7ff ff8e 	bl	8002258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800233c:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <SysTick_Config+0x40>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002342:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <SysTick_Config+0x40>)
 8002344:	2207      	movs	r2, #7
 8002346:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	e000e010 	.word	0xe000e010

08002358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ff29 	bl	80021b8 <__NVIC_SetPriorityGrouping>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002380:	f7ff ff3e 	bl	8002200 <__NVIC_GetPriorityGrouping>
 8002384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	6978      	ldr	r0, [r7, #20]
 800238c:	f7ff ff8e 	bl	80022ac <NVIC_EncodePriority>
 8002390:	4602      	mov	r2, r0
 8002392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff5d 	bl	8002258 <__NVIC_SetPriority>
}
 800239e:	bf00      	nop
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4603      	mov	r3, r0
 80023ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff31 	bl	800221c <__NVIC_EnableIRQ>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ffa2 	bl	8002314 <SysTick_Config>
 80023d0:	4603      	mov	r3, r0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e086      	b.n	80024fc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d106      	bne.n	8002406 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2223      	movs	r2, #35	@ 0x23
 80023fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f003 fe7d 	bl	8006100 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002406:	4b3f      	ldr	r3, [pc, #252]	@ (8002504 <HAL_ETH_Init+0x128>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240a:	4a3e      	ldr	r2, [pc, #248]	@ (8002504 <HAL_ETH_Init+0x128>)
 800240c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002410:	6453      	str	r3, [r2, #68]	@ 0x44
 8002412:	4b3c      	ldr	r3, [pc, #240]	@ (8002504 <HAL_ETH_Init+0x128>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800241e:	4b3a      	ldr	r3, [pc, #232]	@ (8002508 <HAL_ETH_Init+0x12c>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4a39      	ldr	r2, [pc, #228]	@ (8002508 <HAL_ETH_Init+0x12c>)
 8002424:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002428:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800242a:	4b37      	ldr	r3, [pc, #220]	@ (8002508 <HAL_ETH_Init+0x12c>)
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	4935      	ldr	r1, [pc, #212]	@ (8002508 <HAL_ETH_Init+0x12c>)
 8002434:	4313      	orrs	r3, r2
 8002436:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002438:	4b33      	ldr	r3, [pc, #204]	@ (8002508 <HAL_ETH_Init+0x12c>)
 800243a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002452:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002454:	f7ff fe80 	bl	8002158 <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800245a:	e011      	b.n	8002480 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800245c:	f7ff fe7c 	bl	8002158 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800246a:	d909      	bls.n	8002480 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2204      	movs	r2, #4
 8002470:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	22e0      	movs	r2, #224	@ 0xe0
 8002478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e03d      	b.n	80024fc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1e4      	bne.n	800245c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 fe18 	bl	80030c8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 fec3 	bl	8003224 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 ff19 	bl	80032d6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	461a      	mov	r2, r3
 80024aa:	2100      	movs	r1, #0
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fe81 	bl	80031b4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80024c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	4b0f      	ldr	r3, [pc, #60]	@ (800250c <HAL_ETH_Init+0x130>)
 80024d0:	430b      	orrs	r3, r1
 80024d2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80024e6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2210      	movs	r2, #16
 80024f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40023800 	.word	0x40023800
 8002508:	40013800 	.word	0x40013800
 800250c:	00020060 	.word	0x00020060

08002510 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800251e:	2b10      	cmp	r3, #16
 8002520:	d150      	bne.n	80025c4 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2223      	movs	r2, #35	@ 0x23
 8002526:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2204      	movs	r2, #4
 800252e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f9f9 	bl	8002928 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0208 	orr.w	r2, r2, #8
 8002544:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800254e:	2001      	movs	r0, #1
 8002550:	f7ff fe0e 	bl	8002170 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0204 	orr.w	r2, r2, #4
 800256a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002574:	2001      	movs	r0, #1
 8002576:	f7ff fdfb 	bl	8002170 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 fc3c 	bl	8002e00 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6812      	ldr	r2, [r2, #0]
 8002596:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800259a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800259e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	f043 0302 	orr.w	r3, r3, #2
 80025b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025b6:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2223      	movs	r2, #35	@ 0x23
 80025bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	e000      	b.n	80025c6 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
  }
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025dc:	2b23      	cmp	r3, #35	@ 0x23
 80025de:	d14a      	bne.n	8002676 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2223      	movs	r2, #35	@ 0x23
 80025e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80025fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025fe:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	f023 0302 	bic.w	r3, r3, #2
 8002612:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002616:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0204 	bic.w	r2, r2, #4
 8002626:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002630:	2001      	movs	r0, #1
 8002632:	f7ff fd9d 	bl	8002170 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fbde 	bl	8002e00 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0208 	bic.w	r2, r2, #8
 8002652:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800265c:	2001      	movs	r0, #1
 800265e:	f7ff fd87 	bl	8002170 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2210      	movs	r2, #16
 800266e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	e000      	b.n	8002678 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
  }
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002698:	f043 0201 	orr.w	r2, r3, #1
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e07c      	b.n	80027a0 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026ac:	2b23      	cmp	r3, #35	@ 0x23
 80026ae:	d176      	bne.n	800279e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80026b0:	2200      	movs	r2, #0
 80026b2:	68b9      	ldr	r1, [r7, #8]
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 fe7d 	bl	80033b4 <ETH_Prepare_Tx_Descriptors>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d009      	beq.n	80026d4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c6:	f043 0202 	orr.w	r2, r3, #2
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e065      	b.n	80027a0 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80026d4:	f3bf 8f4f 	dsb	sy
}
 80026d8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	3206      	adds	r2, #6
 80026e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d904      	bls.n	8002704 <HAL_ETH_Transmit+0x84>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fe:	1f1a      	subs	r2, r3, #4
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	3106      	adds	r1, #6
 8002710:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002714:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002718:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800271a:	f7ff fd1d 	bl	8002158 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002720:	e037      	b.n	8002792 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d011      	beq.n	8002758 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273a:	f043 0208 	orr.w	r2, r3, #8
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e023      	b.n	80027a0 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800275e:	d018      	beq.n	8002792 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002760:	f7ff fcfa 	bl	8002158 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	429a      	cmp	r2, r3
 800276e:	d302      	bcc.n	8002776 <HAL_ETH_Transmit+0xf6>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10d      	bne.n	8002792 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277c:	f043 0204 	orr.w	r2, r3, #4
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800278c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e006      	b.n	80027a0 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	dbc3      	blt.n	8002722 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	e000      	b.n	80027a0 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
  }
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d109      	bne.n	80027d4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c6:	f043 0201 	orr.w	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0a4      	b.n	800291e <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027da:	2b23      	cmp	r3, #35	@ 0x23
 80027dc:	d001      	beq.n	80027e2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e09d      	b.n	800291e <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	3212      	adds	r2, #18
 80027ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027f8:	f1c3 0304 	rsb	r3, r3, #4
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80027fe:	e066      	b.n	80028ce <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	69da      	ldr	r2, [r3, #28]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	699a      	ldr	r2, [r3, #24]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002824:	2b00      	cmp	r3, #0
 8002826:	d103      	bne.n	8002830 <HAL_ETH_ReadData+0x88>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800282c:	2b00      	cmp	r3, #0
 800282e:	d03c      	beq.n	80028aa <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002852:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002868:	2301      	movs	r3, #1
 800286a:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002884:	461a      	mov	r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	b29b      	uxth	r3, r3
 800288a:	f003 fdfb 	bl	8006484 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	441a      	add	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	2200      	movs	r2, #0
 80028a8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3301      	adds	r3, #1
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d902      	bls.n	80028bc <HAL_ETH_ReadData+0x114>
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3b04      	subs	r3, #4
 80028ba:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69fa      	ldr	r2, [r7, #28]
 80028c0:	3212      	adds	r2, #18
 80028c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	3301      	adds	r3, #1
 80028cc:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	db06      	blt.n	80028e4 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d202      	bcs.n	80028e4 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80028de:	7cfb      	ldrb	r3, [r7, #19]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d08d      	beq.n	8002800 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	441a      	add	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f815 	bl	8002928 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69fa      	ldr	r2, [r7, #28]
 8002902:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002904:	7cfb      	ldrb	r3, [r7, #19]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d108      	bne.n	800291c <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	e000      	b.n	800291e <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
}
 800291e:	4618      	mov	r0, r3
 8002920:	3720      	adds	r7, #32
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002930:	2300      	movs	r3, #0
 8002932:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002934:	2301      	movs	r3, #1
 8002936:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800293c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69fa      	ldr	r2, [r7, #28]
 8002942:	3212      	adds	r2, #18
 8002944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002948:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800294e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002950:	e042      	b.n	80029d8 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d112      	bne.n	8002980 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800295a:	f107 0308 	add.w	r3, r7, #8
 800295e:	4618      	mov	r0, r3
 8002960:	f003 fd60 	bl	8006424 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d102      	bne.n	8002970 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	74fb      	strb	r3, [r7, #19]
 800296e:	e007      	b.n	8002980 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	461a      	mov	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	461a      	mov	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002980:	7cfb      	ldrb	r3, [r7, #19]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d028      	beq.n	80029d8 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	4b26      	ldr	r3, [pc, #152]	@ (8002a2c <ETH_UpdateDescriptor+0x104>)
 8002994:	4313      	orrs	r3, r2
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	6053      	str	r3, [r2, #4]
 800299a:	e005      	b.n	80029a8 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	3301      	adds	r3, #1
 80029b8:	61fb      	str	r3, [r7, #28]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d902      	bls.n	80029c6 <ETH_UpdateDescriptor+0x9e>
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	3b04      	subs	r3, #4
 80029c4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69fa      	ldr	r2, [r7, #28]
 80029ca:	3212      	adds	r2, #18
 80029cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d0:	617b      	str	r3, [r7, #20]
      desccount--;
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <ETH_UpdateDescriptor+0xbc>
 80029de:	7cfb      	ldrb	r3, [r7, #19]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1b6      	bne.n	8002952 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d01a      	beq.n	8002a24 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3301      	adds	r3, #1
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80029f8:	f3bf 8f5f 	dmb	sy
}
 80029fc:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6919      	ldr	r1, [r3, #16]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	18ca      	adds	r2, r1, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a16:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002a24:	bf00      	nop
 8002a26:	3720      	adds	r7, #32
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	80004000 	.word	0x80004000

08002a30 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f003 031c 	and.w	r3, r3, #28
 8002a4c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	02db      	lsls	r3, r3, #11
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	019b      	lsls	r3, r3, #6
 8002a5e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f023 0302 	bic.w	r3, r3, #2
 8002a6e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002a80:	f7ff fb6a 	bl	8002158 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a86:	e00d      	b.n	8002aa4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002a88:	f7ff fb66 	bl	8002158 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a96:	d301      	bcc.n	8002a9c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e010      	b.n	8002abe <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1ec      	bne.n	8002a88 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b086      	sub	sp, #24
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f003 031c 	and.w	r3, r3, #28
 8002ae2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	02db      	lsls	r3, r3, #11
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	019b      	lsls	r3, r3, #6
 8002af4:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b20:	f7ff fb1a 	bl	8002158 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b26:	e00d      	b.n	8002b44 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002b28:	f7ff fb16 	bl	8002158 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b36:	d301      	bcc.n	8002b3c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e009      	b.n	8002b50 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1ec      	bne.n	8002b28 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e0e6      	b.n	8002d3a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0310 	and.w	r3, r3, #16
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	bf14      	ite	ne
 8002b7a:	2301      	movne	r3, #1
 8002b7c:	2300      	moveq	r3, #0
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bf0c      	ite	eq
 8002ba4:	2301      	moveq	r3, #1
 8002ba6:	2300      	movne	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	461a      	mov	r2, r3
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf14      	ite	ne
 8002bc0:	2301      	movne	r3, #1
 8002bc2:	2300      	moveq	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	bf0c      	ite	eq
 8002bda:	2301      	moveq	r3, #1
 8002bdc:	2300      	movne	r3, #0
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	bf14      	ite	ne
 8002bf4:	2301      	movne	r3, #1
 8002bf6:	2300      	moveq	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	bf0c      	ite	eq
 8002c2a:	2301      	moveq	r3, #1
 8002c2c:	2300      	movne	r3, #0
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	461a      	mov	r2, r3
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf0c      	ite	eq
 8002c44:	2301      	moveq	r3, #1
 8002c46:	2300      	movne	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bf14      	ite	ne
 8002c5e:	2301      	movne	r3, #1
 8002c60:	2300      	moveq	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	bf14      	ite	ne
 8002c86:	2301      	movne	r3, #1
 8002c88:	2300      	moveq	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf14      	ite	ne
 8002ca0:	2301      	movne	r3, #1
 8002ca2:	2300      	moveq	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	bf14      	ite	ne
 8002cba:	2301      	movne	r3, #1
 8002cbc:	2300      	moveq	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	bf0c      	ite	eq
 8002cd6:	2301      	moveq	r3, #1
 8002cd8:	2300      	movne	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	0c1b      	lsrs	r3, r3, #16
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	bf14      	ite	ne
 8002d0e:	2301      	movne	r3, #1
 8002d10:	2300      	moveq	r3, #0
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bf14      	ite	ne
 8002d2a:	2301      	movne	r3, #1
 8002d2c:	2300      	moveq	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e00b      	b.n	8002d72 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d60:	2b10      	cmp	r3, #16
 8002d62:	d105      	bne.n	8002d70 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002d64:	6839      	ldr	r1, [r7, #0]
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f870 	bl	8002e4c <ETH_SetMACConfig>

    return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	e000      	b.n	8002d72 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
  }
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f023 031c 	bic.w	r3, r3, #28
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002d94:	f001 fb10 	bl	80043b8 <HAL_RCC_GetHCLKFreq>
 8002d98:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	4a14      	ldr	r2, [pc, #80]	@ (8002df0 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d804      	bhi.n	8002dac <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f043 0308 	orr.w	r3, r3, #8
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	e019      	b.n	8002de0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4a11      	ldr	r2, [pc, #68]	@ (8002df4 <HAL_ETH_SetMDIOClockRange+0x78>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d204      	bcs.n	8002dbe <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f043 030c 	orr.w	r3, r3, #12
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	e010      	b.n	8002de0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8002df8 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d90c      	bls.n	8002de0 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8002dfc <HAL_ETH_SetMDIOClockRange+0x80>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d804      	bhi.n	8002dd8 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f043 0304 	orr.w	r3, r3, #4
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	e003      	b.n	8002de0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f043 0310 	orr.w	r3, r3, #16
 8002dde:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	611a      	str	r2, [r3, #16]
}
 8002de8:	bf00      	nop
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	02160ebf 	.word	0x02160ebf
 8002df4:	03938700 	.word	0x03938700
 8002df8:	05f5e0ff 	.word	0x05f5e0ff
 8002dfc:	08f0d17f 	.word	0x08f0d17f

08002e00 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e1e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e22:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e30:	2001      	movs	r0, #1
 8002e32:	f7ff f99d 	bl	8002170 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e40:	6193      	str	r3, [r2, #24]
}
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4b53      	ldr	r3, [pc, #332]	@ (8002fb0 <ETH_SetMACConfig+0x164>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	7b9b      	ldrb	r3, [r3, #14]
 8002e6a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	7c12      	ldrb	r2, [r2, #16]
 8002e70:	2a00      	cmp	r2, #0
 8002e72:	d102      	bne.n	8002e7a <ETH_SetMACConfig+0x2e>
 8002e74:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e78:	e000      	b.n	8002e7c <ETH_SetMACConfig+0x30>
 8002e7a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002e7c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	7c52      	ldrb	r2, [r2, #17]
 8002e82:	2a00      	cmp	r2, #0
 8002e84:	d102      	bne.n	8002e8c <ETH_SetMACConfig+0x40>
 8002e86:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002e8a:	e000      	b.n	8002e8e <ETH_SetMACConfig+0x42>
 8002e8c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e8e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e94:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	7fdb      	ldrb	r3, [r3, #31]
 8002e9a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002e9c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ea2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	7f92      	ldrb	r2, [r2, #30]
 8002ea8:	2a00      	cmp	r2, #0
 8002eaa:	d102      	bne.n	8002eb2 <ETH_SetMACConfig+0x66>
 8002eac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002eb0:	e000      	b.n	8002eb4 <ETH_SetMACConfig+0x68>
 8002eb2:	2200      	movs	r2, #0
                        macconf->Speed |
 8002eb4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	7f1b      	ldrb	r3, [r3, #28]
 8002eba:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ebc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ec2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	791b      	ldrb	r3, [r3, #4]
 8002ec8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002eca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ed2:	2a00      	cmp	r2, #0
 8002ed4:	d102      	bne.n	8002edc <ETH_SetMACConfig+0x90>
 8002ed6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eda:	e000      	b.n	8002ede <ETH_SetMACConfig+0x92>
 8002edc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ede:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	7bdb      	ldrb	r3, [r3, #15]
 8002ee4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ee6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002eec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ef4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f0e:	2001      	movs	r0, #1
 8002f10:	f7ff f92e 	bl	8002170 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f32:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002f3a:	2a00      	cmp	r2, #0
 8002f3c:	d101      	bne.n	8002f42 <ETH_SetMACConfig+0xf6>
 8002f3e:	2280      	movs	r2, #128	@ 0x80
 8002f40:	e000      	b.n	8002f44 <ETH_SetMACConfig+0xf8>
 8002f42:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f44:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002f52:	2a01      	cmp	r2, #1
 8002f54:	d101      	bne.n	8002f5a <ETH_SetMACConfig+0x10e>
 8002f56:	2208      	movs	r2, #8
 8002f58:	e000      	b.n	8002f5c <ETH_SetMACConfig+0x110>
 8002f5a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002f5c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002f64:	2a01      	cmp	r2, #1
 8002f66:	d101      	bne.n	8002f6c <ETH_SetMACConfig+0x120>
 8002f68:	2204      	movs	r2, #4
 8002f6a:	e000      	b.n	8002f6e <ETH_SetMACConfig+0x122>
 8002f6c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002f76:	2a01      	cmp	r2, #1
 8002f78:	d101      	bne.n	8002f7e <ETH_SetMACConfig+0x132>
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	e000      	b.n	8002f80 <ETH_SetMACConfig+0x134>
 8002f7e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f80:	4313      	orrs	r3, r2
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f7ff f8e9 	bl	8002170 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	619a      	str	r2, [r3, #24]
}
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	fd20810f 	.word	0xfd20810f

08002fb4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4b3d      	ldr	r3, [pc, #244]	@ (80030c4 <ETH_SetDMAConfig+0x110>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	7b1b      	ldrb	r3, [r3, #12]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d102      	bne.n	8002fe0 <ETH_SetDMAConfig+0x2c>
 8002fda:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002fde:	e000      	b.n	8002fe2 <ETH_SetDMAConfig+0x2e>
 8002fe0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	7b5b      	ldrb	r3, [r3, #13]
 8002fe6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fe8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	7f52      	ldrb	r2, [r2, #29]
 8002fee:	2a00      	cmp	r2, #0
 8002ff0:	d102      	bne.n	8002ff8 <ETH_SetDMAConfig+0x44>
 8002ff2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ff6:	e000      	b.n	8002ffa <ETH_SetDMAConfig+0x46>
 8002ff8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002ffa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	7b9b      	ldrb	r3, [r3, #14]
 8003000:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003002:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003008:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	7f1b      	ldrb	r3, [r3, #28]
 800300e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003010:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	7f9b      	ldrb	r3, [r3, #30]
 8003016:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003018:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800301e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003026:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003028:	4313      	orrs	r3, r2
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4313      	orrs	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003038:	461a      	mov	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800304a:	2001      	movs	r0, #1
 800304c:	f7ff f890 	bl	8002170 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003058:	461a      	mov	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	791b      	ldrb	r3, [r3, #4]
 8003062:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003068:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800306e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003074:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800307c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800307e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003084:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003086:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800308c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003096:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800309a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030a8:	2001      	movs	r0, #1
 80030aa:	f7ff f861 	bl	8002170 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030b6:	461a      	mov	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6013      	str	r3, [r2, #0]
}
 80030bc:	bf00      	nop
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	f8de3f23 	.word	0xf8de3f23

080030c8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b0a6      	sub	sp, #152	@ 0x98
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80030dc:	2300      	movs	r3, #0
 80030de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80030e0:	2300      	movs	r3, #0
 80030e2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80030e6:	2301      	movs	r3, #1
 80030e8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80030ec:	2300      	movs	r3, #0
 80030ee:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80030f2:	2301      	movs	r3, #1
 80030f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80030f8:	2301      	movs	r3, #1
 80030fa:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80030fe:	2300      	movs	r3, #0
 8003100:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003104:	2300      	movs	r3, #0
 8003106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800310a:	2300      	movs	r3, #0
 800310c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800310e:	2300      	movs	r3, #0
 8003110:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003114:	2300      	movs	r3, #0
 8003116:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003118:	2300      	movs	r3, #0
 800311a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800311e:	2300      	movs	r3, #0
 8003120:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003124:	2300      	movs	r3, #0
 8003126:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800312a:	2300      	movs	r3, #0
 800312c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003130:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003134:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003136:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800313a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800313c:	2300      	movs	r3, #0
 800313e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003142:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003146:	4619      	mov	r1, r3
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff fe7f 	bl	8002e4c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800314e:	2301      	movs	r3, #1
 8003150:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003152:	2301      	movs	r3, #1
 8003154:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003156:	2301      	movs	r3, #1
 8003158:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800315c:	2301      	movs	r3, #1
 800315e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003160:	2300      	movs	r3, #0
 8003162:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003164:	2300      	movs	r3, #0
 8003166:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800316a:	2300      	movs	r3, #0
 800316c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003170:	2300      	movs	r3, #0
 8003172:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003174:	2301      	movs	r3, #1
 8003176:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800317a:	2301      	movs	r3, #1
 800317c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800317e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003182:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003184:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003188:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800318a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800318e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003190:	2301      	movs	r3, #1
 8003192:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003196:	2300      	movs	r3, #0
 8003198:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800319a:	2300      	movs	r3, #0
 800319c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800319e:	f107 0308 	add.w	r3, r7, #8
 80031a2:	4619      	mov	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff ff05 	bl	8002fb4 <ETH_SetDMAConfig>
}
 80031aa:	bf00      	nop
 80031ac:	3798      	adds	r7, #152	@ 0x98
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3305      	adds	r3, #5
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	3204      	adds	r2, #4
 80031cc:	7812      	ldrb	r2, [r2, #0]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	4b11      	ldr	r3, [pc, #68]	@ (800321c <ETH_MACAddressConfig+0x68>)
 80031d6:	4413      	add	r3, r2
 80031d8:	461a      	mov	r2, r3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3303      	adds	r3, #3
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	061a      	lsls	r2, r3, #24
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3302      	adds	r3, #2
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	041b      	lsls	r3, r3, #16
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3301      	adds	r3, #1
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	4313      	orrs	r3, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	7812      	ldrb	r2, [r2, #0]
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	4b06      	ldr	r3, [pc, #24]	@ (8003220 <ETH_MACAddressConfig+0x6c>)
 8003206:	4413      	add	r3, r2
 8003208:	461a      	mov	r2, r3
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	6013      	str	r3, [r2, #0]
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40028040 	.word	0x40028040
 8003220:	40028044 	.word	0x40028044

08003224 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	e03e      	b.n	80032b0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68d9      	ldr	r1, [r3, #12]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	440b      	add	r3, r1
 8003242:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2200      	movs	r2, #0
 800324e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2200      	movs	r2, #0
 8003254:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2200      	movs	r2, #0
 800325a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	3206      	adds	r2, #6
 8003264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d80c      	bhi.n	8003294 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68d9      	ldr	r1, [r3, #12]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	440b      	add	r3, r1
 800328c:	461a      	mov	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	e004      	b.n	800329e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	461a      	mov	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	3301      	adds	r3, #1
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d9bd      	bls.n	8003232 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032c8:	611a      	str	r2, [r3, #16]
}
 80032ca:	bf00      	nop
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b085      	sub	sp, #20
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	e048      	b.n	8003376 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6919      	ldr	r1, [r3, #16]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	440b      	add	r3, r1
 80032f4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2200      	movs	r2, #0
 8003300:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2200      	movs	r2, #0
 8003306:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2200      	movs	r2, #0
 800330c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2200      	movs	r2, #0
 8003312:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2200      	movs	r2, #0
 8003318:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003320:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	3212      	adds	r2, #18
 8003342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d80c      	bhi.n	8003366 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6919      	ldr	r1, [r3, #16]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	440b      	add	r3, r1
 800335e:	461a      	mov	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	60da      	str	r2, [r3, #12]
 8003364:	e004      	b.n	8003370 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	461a      	mov	r2, r3
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	3301      	adds	r3, #1
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2b03      	cmp	r3, #3
 800337a:	d9b3      	bls.n	80032e4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033a6:	60da      	str	r2, [r3, #12]
}
 80033a8:	bf00      	nop
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b091      	sub	sp, #68	@ 0x44
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	3318      	adds	r3, #24
 80033c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033de:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80033e6:	2300      	movs	r3, #0
 80033e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80033ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80033f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033f6:	d007      	beq.n	8003408 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80033f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033fc:	3304      	adds	r3, #4
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003408:	2302      	movs	r3, #2
 800340a:	e111      	b.n	8003630 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 800340c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800340e:	3301      	adds	r3, #1
 8003410:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800341c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	4b86      	ldr	r3, [pc, #536]	@ (800363c <ETH_Prepare_Tx_Descriptors+0x288>)
 8003422:	4013      	ands	r3, r2
 8003424:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003426:	6852      	ldr	r2, [r2, #4]
 8003428:	431a      	orrs	r2, r3
 800342a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800342c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800343a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	431a      	orrs	r2, r3
 8003448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	431a      	orrs	r2, r3
 8003466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003468:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800347e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003480:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800348a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800348e:	e082      	b.n	8003596 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d006      	beq.n	80034b0 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80034a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80034aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	e005      	b.n	80034bc <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80034b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80034b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ba:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80034bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034be:	3301      	adds	r3, #1
 80034c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d902      	bls.n	80034ce <ETH_Prepare_Tx_Descriptors+0x11a>
 80034c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ca:	3b04      	subs	r3, #4
 80034cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80034d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80034e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034e4:	d007      	beq.n	80034f6 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80034e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ea:	3304      	adds	r3, #4
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d029      	beq.n	800354a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003502:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003504:	2300      	movs	r3, #0
 8003506:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003508:	e019      	b.n	800353e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800350a:	f3bf 8f5f 	dmb	sy
}
 800350e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800351c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800351e:	3301      	adds	r3, #1
 8003520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003524:	2b03      	cmp	r3, #3
 8003526:	d902      	bls.n	800352e <ETH_Prepare_Tx_Descriptors+0x17a>
 8003528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800352a:	3b04      	subs	r3, #4
 800352c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003536:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800353a:	3301      	adds	r3, #1
 800353c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800353e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003542:	429a      	cmp	r2, r3
 8003544:	d3e1      	bcc.n	800350a <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8003546:	2302      	movs	r3, #2
 8003548:	e072      	b.n	8003630 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800354a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003554:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003558:	3301      	adds	r3, #1
 800355a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800355c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800356c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	4b32      	ldr	r3, [pc, #200]	@ (800363c <ETH_Prepare_Tx_Descriptors+0x288>)
 8003572:	4013      	ands	r3, r2
 8003574:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003576:	6852      	ldr	r2, [r2, #4]
 8003578:	431a      	orrs	r2, r3
 800357a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800357e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003580:	3301      	adds	r3, #1
 8003582:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003584:	f3bf 8f5f 	dmb	sy
}
 8003588:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800358a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003594:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f47f af78 	bne.w	8003490 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d006      	beq.n	80035b4 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80035a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80035ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	e005      	b.n	80035c0 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80035b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80035bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035be:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80035c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80035c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ca:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80035cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ce:	6a3a      	ldr	r2, [r7, #32]
 80035d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035d4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80035d6:	f3bf 8f5f 	dmb	sy
}
 80035da:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80035dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80035e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e6:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80035e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035f0:	3304      	adds	r3, #4
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80035f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035fc:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003602:	613b      	str	r3, [r7, #16]
  return(result);
 8003604:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003606:	61fb      	str	r3, [r7, #28]
 8003608:	2301      	movs	r3, #1
 800360a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f383 8810 	msr	PRIMASK, r3
}
 8003612:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003616:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361a:	4413      	add	r3, r2
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	629a      	str	r2, [r3, #40]	@ 0x28
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	f383 8810 	msr	PRIMASK, r3
}
 800362c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3744      	adds	r7, #68	@ 0x44
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	ffffe000 	.word	0xffffe000

08003640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003640:	b480      	push	{r7}
 8003642:	b089      	sub	sp, #36	@ 0x24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003652:	2300      	movs	r3, #0
 8003654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003656:	2300      	movs	r3, #0
 8003658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800365a:	2300      	movs	r3, #0
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	e175      	b.n	800394c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003660:	2201      	movs	r2, #1
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4013      	ands	r3, r2
 8003672:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	429a      	cmp	r2, r3
 800367a:	f040 8164 	bne.w	8003946 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	2b01      	cmp	r3, #1
 8003688:	d005      	beq.n	8003696 <HAL_GPIO_Init+0x56>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d130      	bne.n	80036f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	2203      	movs	r2, #3
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4013      	ands	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036cc:	2201      	movs	r2, #1
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4013      	ands	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f003 0201 	and.w	r2, r3, #1
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	2b03      	cmp	r3, #3
 8003702:	d017      	beq.n	8003734 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	2203      	movs	r2, #3
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4313      	orrs	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d123      	bne.n	8003788 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	08da      	lsrs	r2, r3, #3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3208      	adds	r2, #8
 8003748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800374c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	220f      	movs	r2, #15
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4013      	ands	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4313      	orrs	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	08da      	lsrs	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3208      	adds	r2, #8
 8003782:	69b9      	ldr	r1, [r7, #24]
 8003784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	2203      	movs	r2, #3
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4013      	ands	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 0203 	and.w	r2, r3, #3
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80be 	beq.w	8003946 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ca:	4b66      	ldr	r3, [pc, #408]	@ (8003964 <HAL_GPIO_Init+0x324>)
 80037cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ce:	4a65      	ldr	r2, [pc, #404]	@ (8003964 <HAL_GPIO_Init+0x324>)
 80037d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80037d6:	4b63      	ldr	r3, [pc, #396]	@ (8003964 <HAL_GPIO_Init+0x324>)
 80037d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80037e2:	4a61      	ldr	r2, [pc, #388]	@ (8003968 <HAL_GPIO_Init+0x328>)
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	089b      	lsrs	r3, r3, #2
 80037e8:	3302      	adds	r3, #2
 80037ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	220f      	movs	r2, #15
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43db      	mvns	r3, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4013      	ands	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a58      	ldr	r2, [pc, #352]	@ (800396c <HAL_GPIO_Init+0x32c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d037      	beq.n	800387e <HAL_GPIO_Init+0x23e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a57      	ldr	r2, [pc, #348]	@ (8003970 <HAL_GPIO_Init+0x330>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d031      	beq.n	800387a <HAL_GPIO_Init+0x23a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a56      	ldr	r2, [pc, #344]	@ (8003974 <HAL_GPIO_Init+0x334>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d02b      	beq.n	8003876 <HAL_GPIO_Init+0x236>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a55      	ldr	r2, [pc, #340]	@ (8003978 <HAL_GPIO_Init+0x338>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d025      	beq.n	8003872 <HAL_GPIO_Init+0x232>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a54      	ldr	r2, [pc, #336]	@ (800397c <HAL_GPIO_Init+0x33c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01f      	beq.n	800386e <HAL_GPIO_Init+0x22e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a53      	ldr	r2, [pc, #332]	@ (8003980 <HAL_GPIO_Init+0x340>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d019      	beq.n	800386a <HAL_GPIO_Init+0x22a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a52      	ldr	r2, [pc, #328]	@ (8003984 <HAL_GPIO_Init+0x344>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <HAL_GPIO_Init+0x226>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a51      	ldr	r2, [pc, #324]	@ (8003988 <HAL_GPIO_Init+0x348>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00d      	beq.n	8003862 <HAL_GPIO_Init+0x222>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a50      	ldr	r2, [pc, #320]	@ (800398c <HAL_GPIO_Init+0x34c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d007      	beq.n	800385e <HAL_GPIO_Init+0x21e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a4f      	ldr	r2, [pc, #316]	@ (8003990 <HAL_GPIO_Init+0x350>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d101      	bne.n	800385a <HAL_GPIO_Init+0x21a>
 8003856:	2309      	movs	r3, #9
 8003858:	e012      	b.n	8003880 <HAL_GPIO_Init+0x240>
 800385a:	230a      	movs	r3, #10
 800385c:	e010      	b.n	8003880 <HAL_GPIO_Init+0x240>
 800385e:	2308      	movs	r3, #8
 8003860:	e00e      	b.n	8003880 <HAL_GPIO_Init+0x240>
 8003862:	2307      	movs	r3, #7
 8003864:	e00c      	b.n	8003880 <HAL_GPIO_Init+0x240>
 8003866:	2306      	movs	r3, #6
 8003868:	e00a      	b.n	8003880 <HAL_GPIO_Init+0x240>
 800386a:	2305      	movs	r3, #5
 800386c:	e008      	b.n	8003880 <HAL_GPIO_Init+0x240>
 800386e:	2304      	movs	r3, #4
 8003870:	e006      	b.n	8003880 <HAL_GPIO_Init+0x240>
 8003872:	2303      	movs	r3, #3
 8003874:	e004      	b.n	8003880 <HAL_GPIO_Init+0x240>
 8003876:	2302      	movs	r3, #2
 8003878:	e002      	b.n	8003880 <HAL_GPIO_Init+0x240>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <HAL_GPIO_Init+0x240>
 800387e:	2300      	movs	r3, #0
 8003880:	69fa      	ldr	r2, [r7, #28]
 8003882:	f002 0203 	and.w	r2, r2, #3
 8003886:	0092      	lsls	r2, r2, #2
 8003888:	4093      	lsls	r3, r2
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003890:	4935      	ldr	r1, [pc, #212]	@ (8003968 <HAL_GPIO_Init+0x328>)
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	089b      	lsrs	r3, r3, #2
 8003896:	3302      	adds	r3, #2
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800389e:	4b3d      	ldr	r3, [pc, #244]	@ (8003994 <HAL_GPIO_Init+0x354>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	43db      	mvns	r3, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4013      	ands	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038c2:	4a34      	ldr	r2, [pc, #208]	@ (8003994 <HAL_GPIO_Init+0x354>)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038c8:	4b32      	ldr	r3, [pc, #200]	@ (8003994 <HAL_GPIO_Init+0x354>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038ec:	4a29      	ldr	r2, [pc, #164]	@ (8003994 <HAL_GPIO_Init+0x354>)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038f2:	4b28      	ldr	r3, [pc, #160]	@ (8003994 <HAL_GPIO_Init+0x354>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4013      	ands	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003916:	4a1f      	ldr	r2, [pc, #124]	@ (8003994 <HAL_GPIO_Init+0x354>)
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800391c:	4b1d      	ldr	r3, [pc, #116]	@ (8003994 <HAL_GPIO_Init+0x354>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	43db      	mvns	r3, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4013      	ands	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003940:	4a14      	ldr	r2, [pc, #80]	@ (8003994 <HAL_GPIO_Init+0x354>)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3301      	adds	r3, #1
 800394a:	61fb      	str	r3, [r7, #28]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	2b0f      	cmp	r3, #15
 8003950:	f67f ae86 	bls.w	8003660 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003954:	bf00      	nop
 8003956:	bf00      	nop
 8003958:	3724      	adds	r7, #36	@ 0x24
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40023800 	.word	0x40023800
 8003968:	40013800 	.word	0x40013800
 800396c:	40020000 	.word	0x40020000
 8003970:	40020400 	.word	0x40020400
 8003974:	40020800 	.word	0x40020800
 8003978:	40020c00 	.word	0x40020c00
 800397c:	40021000 	.word	0x40021000
 8003980:	40021400 	.word	0x40021400
 8003984:	40021800 	.word	0x40021800
 8003988:	40021c00 	.word	0x40021c00
 800398c:	40022000 	.word	0x40022000
 8003990:	40022400 	.word	0x40022400
 8003994:	40013c00 	.word	0x40013c00

08003998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	807b      	strh	r3, [r7, #2]
 80039a4:	4613      	mov	r3, r2
 80039a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039a8:	787b      	ldrb	r3, [r7, #1]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039ae:	887a      	ldrh	r2, [r7, #2]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80039b4:	e003      	b.n	80039be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80039b6:	887b      	ldrh	r3, [r7, #2]
 80039b8:	041a      	lsls	r2, r3, #16
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	619a      	str	r2, [r3, #24]
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039d0:	4b05      	ldr	r3, [pc, #20]	@ (80039e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a04      	ldr	r2, [pc, #16]	@ (80039e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039da:	6013      	str	r3, [r2, #0]
}
 80039dc:	bf00      	nop
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40007000 	.word	0x40007000

080039ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80039f2:	2300      	movs	r3, #0
 80039f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80039f6:	4b23      	ldr	r3, [pc, #140]	@ (8003a84 <HAL_PWREx_EnableOverDrive+0x98>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	4a22      	ldr	r2, [pc, #136]	@ (8003a84 <HAL_PWREx_EnableOverDrive+0x98>)
 80039fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a02:	4b20      	ldr	r3, [pc, #128]	@ (8003a84 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a1d      	ldr	r2, [pc, #116]	@ (8003a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a18:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a1a:	f7fe fb9d 	bl	8002158 <HAL_GetTick>
 8003a1e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a20:	e009      	b.n	8003a36 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a22:	f7fe fb99 	bl	8002158 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a30:	d901      	bls.n	8003a36 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e022      	b.n	8003a7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a36:	4b14      	ldr	r3, [pc, #80]	@ (8003a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a42:	d1ee      	bne.n	8003a22 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a44:	4b10      	ldr	r3, [pc, #64]	@ (8003a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a0f      	ldr	r2, [pc, #60]	@ (8003a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a50:	f7fe fb82 	bl	8002158 <HAL_GetTick>
 8003a54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a56:	e009      	b.n	8003a6c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a58:	f7fe fb7e 	bl	8002158 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a66:	d901      	bls.n	8003a6c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e007      	b.n	8003a7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a6c:	4b06      	ldr	r3, [pc, #24]	@ (8003a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a78:	d1ee      	bne.n	8003a58 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40023800 	.word	0x40023800
 8003a88:	40007000 	.word	0x40007000

08003a8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a94:	2300      	movs	r3, #0
 8003a96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e291      	b.n	8003fc6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 8087 	beq.w	8003bbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ab0:	4b96      	ldr	r3, [pc, #600]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 030c 	and.w	r3, r3, #12
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d00c      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003abc:	4b93      	ldr	r3, [pc, #588]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d112      	bne.n	8003aee <HAL_RCC_OscConfig+0x62>
 8003ac8:	4b90      	ldr	r3, [pc, #576]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ad0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ad4:	d10b      	bne.n	8003aee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad6:	4b8d      	ldr	r3, [pc, #564]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d06c      	beq.n	8003bbc <HAL_RCC_OscConfig+0x130>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d168      	bne.n	8003bbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e26b      	b.n	8003fc6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af6:	d106      	bne.n	8003b06 <HAL_RCC_OscConfig+0x7a>
 8003af8:	4b84      	ldr	r3, [pc, #528]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a83      	ldr	r2, [pc, #524]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003afe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b02:	6013      	str	r3, [r2, #0]
 8003b04:	e02e      	b.n	8003b64 <HAL_RCC_OscConfig+0xd8>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10c      	bne.n	8003b28 <HAL_RCC_OscConfig+0x9c>
 8003b0e:	4b7f      	ldr	r3, [pc, #508]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a7e      	ldr	r2, [pc, #504]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003b14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	4b7c      	ldr	r3, [pc, #496]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a7b      	ldr	r2, [pc, #492]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003b20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	e01d      	b.n	8003b64 <HAL_RCC_OscConfig+0xd8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCC_OscConfig+0xc0>
 8003b32:	4b76      	ldr	r3, [pc, #472]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a75      	ldr	r2, [pc, #468]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003b38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	4b73      	ldr	r3, [pc, #460]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a72      	ldr	r2, [pc, #456]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	e00b      	b.n	8003b64 <HAL_RCC_OscConfig+0xd8>
 8003b4c:	4b6f      	ldr	r3, [pc, #444]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a6e      	ldr	r2, [pc, #440]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	4b6c      	ldr	r3, [pc, #432]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a6b      	ldr	r2, [pc, #428]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003b5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d013      	beq.n	8003b94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7fe faf4 	bl	8002158 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b74:	f7fe faf0 	bl	8002158 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b64      	cmp	r3, #100	@ 0x64
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e21f      	b.n	8003fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b86:	4b61      	ldr	r3, [pc, #388]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0xe8>
 8003b92:	e014      	b.n	8003bbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fe fae0 	bl	8002158 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b9c:	f7fe fadc 	bl	8002158 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b64      	cmp	r3, #100	@ 0x64
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e20b      	b.n	8003fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bae:	4b57      	ldr	r3, [pc, #348]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0x110>
 8003bba:	e000      	b.n	8003bbe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d069      	beq.n	8003c9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bca:	4b50      	ldr	r3, [pc, #320]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00b      	beq.n	8003bee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bd6:	4b4d      	ldr	r3, [pc, #308]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 030c 	and.w	r3, r3, #12
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d11c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x190>
 8003be2:	4b4a      	ldr	r3, [pc, #296]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d116      	bne.n	8003c1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bee:	4b47      	ldr	r3, [pc, #284]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <HAL_RCC_OscConfig+0x17a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d001      	beq.n	8003c06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e1df      	b.n	8003fc6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c06:	4b41      	ldr	r3, [pc, #260]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	493d      	ldr	r1, [pc, #244]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1a:	e040      	b.n	8003c9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d023      	beq.n	8003c6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c24:	4b39      	ldr	r3, [pc, #228]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a38      	ldr	r2, [pc, #224]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c30:	f7fe fa92 	bl	8002158 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c38:	f7fe fa8e 	bl	8002158 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e1bd      	b.n	8003fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4a:	4b30      	ldr	r3, [pc, #192]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c56:	4b2d      	ldr	r3, [pc, #180]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	4929      	ldr	r1, [pc, #164]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]
 8003c6a:	e018      	b.n	8003c9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c6c:	4b27      	ldr	r3, [pc, #156]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a26      	ldr	r2, [pc, #152]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003c72:	f023 0301 	bic.w	r3, r3, #1
 8003c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fe fa6e 	bl	8002158 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c80:	f7fe fa6a 	bl	8002158 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e199      	b.n	8003fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c92:	4b1e      	ldr	r3, [pc, #120]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d038      	beq.n	8003d1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d019      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cb2:	4b16      	ldr	r3, [pc, #88]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cb6:	4a15      	ldr	r2, [pc, #84]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003cb8:	f043 0301 	orr.w	r3, r3, #1
 8003cbc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbe:	f7fe fa4b 	bl	8002158 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc6:	f7fe fa47 	bl	8002158 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e176      	b.n	8003fc6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0f0      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x23a>
 8003ce4:	e01a      	b.n	8003d1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce6:	4b09      	ldr	r3, [pc, #36]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cea:	4a08      	ldr	r2, [pc, #32]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003cec:	f023 0301 	bic.w	r3, r3, #1
 8003cf0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf2:	f7fe fa31 	bl	8002158 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf8:	e00a      	b.n	8003d10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfa:	f7fe fa2d 	bl	8002158 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d903      	bls.n	8003d10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e15c      	b.n	8003fc6 <HAL_RCC_OscConfig+0x53a>
 8003d0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d10:	4b91      	ldr	r3, [pc, #580]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1ee      	bne.n	8003cfa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80a4 	beq.w	8003e72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d2a:	4b8b      	ldr	r3, [pc, #556]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10d      	bne.n	8003d52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d36:	4b88      	ldr	r3, [pc, #544]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	4a87      	ldr	r2, [pc, #540]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d42:	4b85      	ldr	r3, [pc, #532]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d52:	4b82      	ldr	r3, [pc, #520]	@ (8003f5c <HAL_RCC_OscConfig+0x4d0>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d118      	bne.n	8003d90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d5e:	4b7f      	ldr	r3, [pc, #508]	@ (8003f5c <HAL_RCC_OscConfig+0x4d0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a7e      	ldr	r2, [pc, #504]	@ (8003f5c <HAL_RCC_OscConfig+0x4d0>)
 8003d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d6a:	f7fe f9f5 	bl	8002158 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d72:	f7fe f9f1 	bl	8002158 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b64      	cmp	r3, #100	@ 0x64
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e120      	b.n	8003fc6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d84:	4b75      	ldr	r3, [pc, #468]	@ (8003f5c <HAL_RCC_OscConfig+0x4d0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d106      	bne.n	8003da6 <HAL_RCC_OscConfig+0x31a>
 8003d98:	4b6f      	ldr	r3, [pc, #444]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9c:	4a6e      	ldr	r2, [pc, #440]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003da4:	e02d      	b.n	8003e02 <HAL_RCC_OscConfig+0x376>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x33c>
 8003dae:	4b6a      	ldr	r3, [pc, #424]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db2:	4a69      	ldr	r2, [pc, #420]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dba:	4b67      	ldr	r3, [pc, #412]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dbe:	4a66      	ldr	r2, [pc, #408]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003dc0:	f023 0304 	bic.w	r3, r3, #4
 8003dc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dc6:	e01c      	b.n	8003e02 <HAL_RCC_OscConfig+0x376>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b05      	cmp	r3, #5
 8003dce:	d10c      	bne.n	8003dea <HAL_RCC_OscConfig+0x35e>
 8003dd0:	4b61      	ldr	r3, [pc, #388]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd4:	4a60      	ldr	r2, [pc, #384]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003dd6:	f043 0304 	orr.w	r3, r3, #4
 8003dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ddc:	4b5e      	ldr	r3, [pc, #376]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de0:	4a5d      	ldr	r2, [pc, #372]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de8:	e00b      	b.n	8003e02 <HAL_RCC_OscConfig+0x376>
 8003dea:	4b5b      	ldr	r3, [pc, #364]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dee:	4a5a      	ldr	r2, [pc, #360]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003df0:	f023 0301 	bic.w	r3, r3, #1
 8003df4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003df6:	4b58      	ldr	r3, [pc, #352]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfa:	4a57      	ldr	r2, [pc, #348]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d015      	beq.n	8003e36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0a:	f7fe f9a5 	bl	8002158 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e10:	e00a      	b.n	8003e28 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e12:	f7fe f9a1 	bl	8002158 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e0ce      	b.n	8003fc6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e28:	4b4b      	ldr	r3, [pc, #300]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0ee      	beq.n	8003e12 <HAL_RCC_OscConfig+0x386>
 8003e34:	e014      	b.n	8003e60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e36:	f7fe f98f 	bl	8002158 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e3c:	e00a      	b.n	8003e54 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3e:	f7fe f98b 	bl	8002158 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e0b8      	b.n	8003fc6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e54:	4b40      	ldr	r3, [pc, #256]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1ee      	bne.n	8003e3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d105      	bne.n	8003e72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e66:	4b3c      	ldr	r3, [pc, #240]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6a:	4a3b      	ldr	r2, [pc, #236]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003e6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e70:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 80a4 	beq.w	8003fc4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e7c:	4b36      	ldr	r3, [pc, #216]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 030c 	and.w	r3, r3, #12
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d06b      	beq.n	8003f60 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d149      	bne.n	8003f24 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e90:	4b31      	ldr	r3, [pc, #196]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a30      	ldr	r2, [pc, #192]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003e96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9c:	f7fe f95c 	bl	8002158 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea4:	f7fe f958 	bl	8002158 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e087      	b.n	8003fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb6:	4b28      	ldr	r3, [pc, #160]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f0      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69da      	ldr	r2, [r3, #28]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed0:	019b      	lsls	r3, r3, #6
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed8:	085b      	lsrs	r3, r3, #1
 8003eda:	3b01      	subs	r3, #1
 8003edc:	041b      	lsls	r3, r3, #16
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee4:	061b      	lsls	r3, r3, #24
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003eea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003eee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ef0:	4b19      	ldr	r3, [pc, #100]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a18      	ldr	r2, [pc, #96]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fe f92c 	bl	8002158 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f04:	f7fe f928 	bl	8002158 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e057      	b.n	8003fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f16:	4b10      	ldr	r3, [pc, #64]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x478>
 8003f22:	e04f      	b.n	8003fc4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f24:	4b0c      	ldr	r3, [pc, #48]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a0b      	ldr	r2, [pc, #44]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003f2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fe f912 	bl	8002158 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f38:	f7fe f90e 	bl	8002158 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e03d      	b.n	8003fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4a:	4b03      	ldr	r3, [pc, #12]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0x4ac>
 8003f56:	e035      	b.n	8003fc4 <HAL_RCC_OscConfig+0x538>
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f60:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd0 <HAL_RCC_OscConfig+0x544>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d028      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d121      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d11a      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f90:	4013      	ands	r3, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d111      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d107      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40023800 	.word	0x40023800

08003fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0d0      	b.n	800418e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fec:	4b6a      	ldr	r3, [pc, #424]	@ (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 030f 	and.w	r3, r3, #15
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d910      	bls.n	800401c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffa:	4b67      	ldr	r3, [pc, #412]	@ (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 020f 	bic.w	r2, r3, #15
 8004002:	4965      	ldr	r1, [pc, #404]	@ (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	4313      	orrs	r3, r2
 8004008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b63      	ldr	r3, [pc, #396]	@ (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0b8      	b.n	800418e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d020      	beq.n	800406a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004034:	4b59      	ldr	r3, [pc, #356]	@ (800419c <HAL_RCC_ClockConfig+0x1c8>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	4a58      	ldr	r2, [pc, #352]	@ (800419c <HAL_RCC_ClockConfig+0x1c8>)
 800403a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800403e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800404c:	4b53      	ldr	r3, [pc, #332]	@ (800419c <HAL_RCC_ClockConfig+0x1c8>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	4a52      	ldr	r2, [pc, #328]	@ (800419c <HAL_RCC_ClockConfig+0x1c8>)
 8004052:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004056:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004058:	4b50      	ldr	r3, [pc, #320]	@ (800419c <HAL_RCC_ClockConfig+0x1c8>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	494d      	ldr	r1, [pc, #308]	@ (800419c <HAL_RCC_ClockConfig+0x1c8>)
 8004066:	4313      	orrs	r3, r2
 8004068:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d040      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d107      	bne.n	800408e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407e:	4b47      	ldr	r3, [pc, #284]	@ (800419c <HAL_RCC_ClockConfig+0x1c8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d115      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e07f      	b.n	800418e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d107      	bne.n	80040a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004096:	4b41      	ldr	r3, [pc, #260]	@ (800419c <HAL_RCC_ClockConfig+0x1c8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d109      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e073      	b.n	800418e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a6:	4b3d      	ldr	r3, [pc, #244]	@ (800419c <HAL_RCC_ClockConfig+0x1c8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e06b      	b.n	800418e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040b6:	4b39      	ldr	r3, [pc, #228]	@ (800419c <HAL_RCC_ClockConfig+0x1c8>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f023 0203 	bic.w	r2, r3, #3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	4936      	ldr	r1, [pc, #216]	@ (800419c <HAL_RCC_ClockConfig+0x1c8>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c8:	f7fe f846 	bl	8002158 <HAL_GetTick>
 80040cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ce:	e00a      	b.n	80040e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d0:	f7fe f842 	bl	8002158 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040de:	4293      	cmp	r3, r2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e053      	b.n	800418e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e6:	4b2d      	ldr	r3, [pc, #180]	@ (800419c <HAL_RCC_ClockConfig+0x1c8>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 020c 	and.w	r2, r3, #12
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d1eb      	bne.n	80040d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040f8:	4b27      	ldr	r3, [pc, #156]	@ (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d210      	bcs.n	8004128 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b24      	ldr	r3, [pc, #144]	@ (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 020f 	bic.w	r2, r3, #15
 800410e:	4922      	ldr	r1, [pc, #136]	@ (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004116:	4b20      	ldr	r3, [pc, #128]	@ (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d001      	beq.n	8004128 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e032      	b.n	800418e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	d008      	beq.n	8004146 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004134:	4b19      	ldr	r3, [pc, #100]	@ (800419c <HAL_RCC_ClockConfig+0x1c8>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	4916      	ldr	r1, [pc, #88]	@ (800419c <HAL_RCC_ClockConfig+0x1c8>)
 8004142:	4313      	orrs	r3, r2
 8004144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d009      	beq.n	8004166 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004152:	4b12      	ldr	r3, [pc, #72]	@ (800419c <HAL_RCC_ClockConfig+0x1c8>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	490e      	ldr	r1, [pc, #56]	@ (800419c <HAL_RCC_ClockConfig+0x1c8>)
 8004162:	4313      	orrs	r3, r2
 8004164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004166:	f000 f821 	bl	80041ac <HAL_RCC_GetSysClockFreq>
 800416a:	4602      	mov	r2, r0
 800416c:	4b0b      	ldr	r3, [pc, #44]	@ (800419c <HAL_RCC_ClockConfig+0x1c8>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	091b      	lsrs	r3, r3, #4
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	490a      	ldr	r1, [pc, #40]	@ (80041a0 <HAL_RCC_ClockConfig+0x1cc>)
 8004178:	5ccb      	ldrb	r3, [r1, r3]
 800417a:	fa22 f303 	lsr.w	r3, r2, r3
 800417e:	4a09      	ldr	r2, [pc, #36]	@ (80041a4 <HAL_RCC_ClockConfig+0x1d0>)
 8004180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004182:	4b09      	ldr	r3, [pc, #36]	@ (80041a8 <HAL_RCC_ClockConfig+0x1d4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7fd ffa2 	bl	80020d0 <HAL_InitTick>

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40023c00 	.word	0x40023c00
 800419c:	40023800 	.word	0x40023800
 80041a0:	08017a70 	.word	0x08017a70
 80041a4:	20000000 	.word	0x20000000
 80041a8:	20000008 	.word	0x20000008

080041ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041b0:	b094      	sub	sp, #80	@ 0x50
 80041b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80041b8:	2300      	movs	r3, #0
 80041ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041bc:	2300      	movs	r3, #0
 80041be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041c4:	4b79      	ldr	r3, [pc, #484]	@ (80043ac <HAL_RCC_GetSysClockFreq+0x200>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 030c 	and.w	r3, r3, #12
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d00d      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0x40>
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	f200 80e1 	bhi.w	8004398 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <HAL_RCC_GetSysClockFreq+0x34>
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d003      	beq.n	80041e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80041de:	e0db      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041e0:	4b73      	ldr	r3, [pc, #460]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80041e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041e4:	e0db      	b.n	800439e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041e6:	4b73      	ldr	r3, [pc, #460]	@ (80043b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80041e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041ea:	e0d8      	b.n	800439e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041ec:	4b6f      	ldr	r3, [pc, #444]	@ (80043ac <HAL_RCC_GetSysClockFreq+0x200>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80041f6:	4b6d      	ldr	r3, [pc, #436]	@ (80043ac <HAL_RCC_GetSysClockFreq+0x200>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d063      	beq.n	80042ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004202:	4b6a      	ldr	r3, [pc, #424]	@ (80043ac <HAL_RCC_GetSysClockFreq+0x200>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	099b      	lsrs	r3, r3, #6
 8004208:	2200      	movs	r2, #0
 800420a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800420c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800420e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004214:	633b      	str	r3, [r7, #48]	@ 0x30
 8004216:	2300      	movs	r3, #0
 8004218:	637b      	str	r3, [r7, #52]	@ 0x34
 800421a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800421e:	4622      	mov	r2, r4
 8004220:	462b      	mov	r3, r5
 8004222:	f04f 0000 	mov.w	r0, #0
 8004226:	f04f 0100 	mov.w	r1, #0
 800422a:	0159      	lsls	r1, r3, #5
 800422c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004230:	0150      	lsls	r0, r2, #5
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	4621      	mov	r1, r4
 8004238:	1a51      	subs	r1, r2, r1
 800423a:	6139      	str	r1, [r7, #16]
 800423c:	4629      	mov	r1, r5
 800423e:	eb63 0301 	sbc.w	r3, r3, r1
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004250:	4659      	mov	r1, fp
 8004252:	018b      	lsls	r3, r1, #6
 8004254:	4651      	mov	r1, sl
 8004256:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800425a:	4651      	mov	r1, sl
 800425c:	018a      	lsls	r2, r1, #6
 800425e:	4651      	mov	r1, sl
 8004260:	ebb2 0801 	subs.w	r8, r2, r1
 8004264:	4659      	mov	r1, fp
 8004266:	eb63 0901 	sbc.w	r9, r3, r1
 800426a:	f04f 0200 	mov.w	r2, #0
 800426e:	f04f 0300 	mov.w	r3, #0
 8004272:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004276:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800427a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800427e:	4690      	mov	r8, r2
 8004280:	4699      	mov	r9, r3
 8004282:	4623      	mov	r3, r4
 8004284:	eb18 0303 	adds.w	r3, r8, r3
 8004288:	60bb      	str	r3, [r7, #8]
 800428a:	462b      	mov	r3, r5
 800428c:	eb49 0303 	adc.w	r3, r9, r3
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800429e:	4629      	mov	r1, r5
 80042a0:	024b      	lsls	r3, r1, #9
 80042a2:	4621      	mov	r1, r4
 80042a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042a8:	4621      	mov	r1, r4
 80042aa:	024a      	lsls	r2, r1, #9
 80042ac:	4610      	mov	r0, r2
 80042ae:	4619      	mov	r1, r3
 80042b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042b2:	2200      	movs	r2, #0
 80042b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042bc:	f7fc fc94 	bl	8000be8 <__aeabi_uldivmod>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4613      	mov	r3, r2
 80042c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042c8:	e058      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ca:	4b38      	ldr	r3, [pc, #224]	@ (80043ac <HAL_RCC_GetSysClockFreq+0x200>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	099b      	lsrs	r3, r3, #6
 80042d0:	2200      	movs	r2, #0
 80042d2:	4618      	mov	r0, r3
 80042d4:	4611      	mov	r1, r2
 80042d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042da:	623b      	str	r3, [r7, #32]
 80042dc:	2300      	movs	r3, #0
 80042de:	627b      	str	r3, [r7, #36]	@ 0x24
 80042e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042e4:	4642      	mov	r2, r8
 80042e6:	464b      	mov	r3, r9
 80042e8:	f04f 0000 	mov.w	r0, #0
 80042ec:	f04f 0100 	mov.w	r1, #0
 80042f0:	0159      	lsls	r1, r3, #5
 80042f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042f6:	0150      	lsls	r0, r2, #5
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4641      	mov	r1, r8
 80042fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004302:	4649      	mov	r1, r9
 8004304:	eb63 0b01 	sbc.w	fp, r3, r1
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004314:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004318:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800431c:	ebb2 040a 	subs.w	r4, r2, sl
 8004320:	eb63 050b 	sbc.w	r5, r3, fp
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	00eb      	lsls	r3, r5, #3
 800432e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004332:	00e2      	lsls	r2, r4, #3
 8004334:	4614      	mov	r4, r2
 8004336:	461d      	mov	r5, r3
 8004338:	4643      	mov	r3, r8
 800433a:	18e3      	adds	r3, r4, r3
 800433c:	603b      	str	r3, [r7, #0]
 800433e:	464b      	mov	r3, r9
 8004340:	eb45 0303 	adc.w	r3, r5, r3
 8004344:	607b      	str	r3, [r7, #4]
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004352:	4629      	mov	r1, r5
 8004354:	028b      	lsls	r3, r1, #10
 8004356:	4621      	mov	r1, r4
 8004358:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800435c:	4621      	mov	r1, r4
 800435e:	028a      	lsls	r2, r1, #10
 8004360:	4610      	mov	r0, r2
 8004362:	4619      	mov	r1, r3
 8004364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004366:	2200      	movs	r2, #0
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	61fa      	str	r2, [r7, #28]
 800436c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004370:	f7fc fc3a 	bl	8000be8 <__aeabi_uldivmod>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4613      	mov	r3, r2
 800437a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800437c:	4b0b      	ldr	r3, [pc, #44]	@ (80043ac <HAL_RCC_GetSysClockFreq+0x200>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	0c1b      	lsrs	r3, r3, #16
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	3301      	adds	r3, #1
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800438c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800438e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004390:	fbb2 f3f3 	udiv	r3, r2, r3
 8004394:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004396:	e002      	b.n	800439e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004398:	4b05      	ldr	r3, [pc, #20]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800439a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800439c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800439e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3750      	adds	r7, #80	@ 0x50
 80043a4:	46bd      	mov	sp, r7
 80043a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043aa:	bf00      	nop
 80043ac:	40023800 	.word	0x40023800
 80043b0:	00f42400 	.word	0x00f42400
 80043b4:	007a1200 	.word	0x007a1200

080043b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043bc:	4b03      	ldr	r3, [pc, #12]	@ (80043cc <HAL_RCC_GetHCLKFreq+0x14>)
 80043be:	681b      	ldr	r3, [r3, #0]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	20000000 	.word	0x20000000

080043d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e049      	b.n	8004476 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fd fac6 	bl	8001988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3304      	adds	r3, #4
 800440c:	4619      	mov	r1, r3
 800440e:	4610      	mov	r0, r2
 8004410:	f000 fed0 	bl	80051b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b01      	cmp	r3, #1
 8004492:	d001      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e054      	b.n	8004542 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0201 	orr.w	r2, r2, #1
 80044ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a26      	ldr	r2, [pc, #152]	@ (8004550 <HAL_TIM_Base_Start_IT+0xd0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d022      	beq.n	8004500 <HAL_TIM_Base_Start_IT+0x80>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044c2:	d01d      	beq.n	8004500 <HAL_TIM_Base_Start_IT+0x80>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a22      	ldr	r2, [pc, #136]	@ (8004554 <HAL_TIM_Base_Start_IT+0xd4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d018      	beq.n	8004500 <HAL_TIM_Base_Start_IT+0x80>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a21      	ldr	r2, [pc, #132]	@ (8004558 <HAL_TIM_Base_Start_IT+0xd8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d013      	beq.n	8004500 <HAL_TIM_Base_Start_IT+0x80>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1f      	ldr	r2, [pc, #124]	@ (800455c <HAL_TIM_Base_Start_IT+0xdc>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00e      	beq.n	8004500 <HAL_TIM_Base_Start_IT+0x80>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004560 <HAL_TIM_Base_Start_IT+0xe0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d009      	beq.n	8004500 <HAL_TIM_Base_Start_IT+0x80>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004564 <HAL_TIM_Base_Start_IT+0xe4>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d004      	beq.n	8004500 <HAL_TIM_Base_Start_IT+0x80>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004568 <HAL_TIM_Base_Start_IT+0xe8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d115      	bne.n	800452c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	4b19      	ldr	r3, [pc, #100]	@ (800456c <HAL_TIM_Base_Start_IT+0xec>)
 8004508:	4013      	ands	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b06      	cmp	r3, #6
 8004510:	d015      	beq.n	800453e <HAL_TIM_Base_Start_IT+0xbe>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004518:	d011      	beq.n	800453e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0201 	orr.w	r2, r2, #1
 8004528:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800452a:	e008      	b.n	800453e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0201 	orr.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	e000      	b.n	8004540 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800453e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40010000 	.word	0x40010000
 8004554:	40000400 	.word	0x40000400
 8004558:	40000800 	.word	0x40000800
 800455c:	40000c00 	.word	0x40000c00
 8004560:	40010400 	.word	0x40010400
 8004564:	40014000 	.word	0x40014000
 8004568:	40001800 	.word	0x40001800
 800456c:	00010007 	.word	0x00010007

08004570 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e049      	b.n	8004616 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f841 	bl	800461e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3304      	adds	r3, #4
 80045ac:	4619      	mov	r1, r3
 80045ae:	4610      	mov	r0, r2
 80045b0:	f000 fe00 	bl	80051b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d109      	bne.n	8004658 <HAL_TIM_PWM_Start+0x24>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b01      	cmp	r3, #1
 800464e:	bf14      	ite	ne
 8004650:	2301      	movne	r3, #1
 8004652:	2300      	moveq	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	e03c      	b.n	80046d2 <HAL_TIM_PWM_Start+0x9e>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2b04      	cmp	r3, #4
 800465c:	d109      	bne.n	8004672 <HAL_TIM_PWM_Start+0x3e>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b01      	cmp	r3, #1
 8004668:	bf14      	ite	ne
 800466a:	2301      	movne	r3, #1
 800466c:	2300      	moveq	r3, #0
 800466e:	b2db      	uxtb	r3, r3
 8004670:	e02f      	b.n	80046d2 <HAL_TIM_PWM_Start+0x9e>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b08      	cmp	r3, #8
 8004676:	d109      	bne.n	800468c <HAL_TIM_PWM_Start+0x58>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	bf14      	ite	ne
 8004684:	2301      	movne	r3, #1
 8004686:	2300      	moveq	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	e022      	b.n	80046d2 <HAL_TIM_PWM_Start+0x9e>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2b0c      	cmp	r3, #12
 8004690:	d109      	bne.n	80046a6 <HAL_TIM_PWM_Start+0x72>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b01      	cmp	r3, #1
 800469c:	bf14      	ite	ne
 800469e:	2301      	movne	r3, #1
 80046a0:	2300      	moveq	r3, #0
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	e015      	b.n	80046d2 <HAL_TIM_PWM_Start+0x9e>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b10      	cmp	r3, #16
 80046aa:	d109      	bne.n	80046c0 <HAL_TIM_PWM_Start+0x8c>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	bf14      	ite	ne
 80046b8:	2301      	movne	r3, #1
 80046ba:	2300      	moveq	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	e008      	b.n	80046d2 <HAL_TIM_PWM_Start+0x9e>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	bf14      	ite	ne
 80046cc:	2301      	movne	r3, #1
 80046ce:	2300      	moveq	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e092      	b.n	8004800 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <HAL_TIM_PWM_Start+0xb6>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046e8:	e023      	b.n	8004732 <HAL_TIM_PWM_Start+0xfe>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d104      	bne.n	80046fa <HAL_TIM_PWM_Start+0xc6>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046f8:	e01b      	b.n	8004732 <HAL_TIM_PWM_Start+0xfe>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d104      	bne.n	800470a <HAL_TIM_PWM_Start+0xd6>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004708:	e013      	b.n	8004732 <HAL_TIM_PWM_Start+0xfe>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b0c      	cmp	r3, #12
 800470e:	d104      	bne.n	800471a <HAL_TIM_PWM_Start+0xe6>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004718:	e00b      	b.n	8004732 <HAL_TIM_PWM_Start+0xfe>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b10      	cmp	r3, #16
 800471e:	d104      	bne.n	800472a <HAL_TIM_PWM_Start+0xf6>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004728:	e003      	b.n	8004732 <HAL_TIM_PWM_Start+0xfe>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2202      	movs	r2, #2
 800472e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2201      	movs	r2, #1
 8004738:	6839      	ldr	r1, [r7, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f001 f8de 	bl	80058fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a30      	ldr	r2, [pc, #192]	@ (8004808 <HAL_TIM_PWM_Start+0x1d4>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d004      	beq.n	8004754 <HAL_TIM_PWM_Start+0x120>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a2f      	ldr	r2, [pc, #188]	@ (800480c <HAL_TIM_PWM_Start+0x1d8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d101      	bne.n	8004758 <HAL_TIM_PWM_Start+0x124>
 8004754:	2301      	movs	r3, #1
 8004756:	e000      	b.n	800475a <HAL_TIM_PWM_Start+0x126>
 8004758:	2300      	movs	r3, #0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d007      	beq.n	800476e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800476c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a25      	ldr	r2, [pc, #148]	@ (8004808 <HAL_TIM_PWM_Start+0x1d4>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d022      	beq.n	80047be <HAL_TIM_PWM_Start+0x18a>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004780:	d01d      	beq.n	80047be <HAL_TIM_PWM_Start+0x18a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a22      	ldr	r2, [pc, #136]	@ (8004810 <HAL_TIM_PWM_Start+0x1dc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d018      	beq.n	80047be <HAL_TIM_PWM_Start+0x18a>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a20      	ldr	r2, [pc, #128]	@ (8004814 <HAL_TIM_PWM_Start+0x1e0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d013      	beq.n	80047be <HAL_TIM_PWM_Start+0x18a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1f      	ldr	r2, [pc, #124]	@ (8004818 <HAL_TIM_PWM_Start+0x1e4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00e      	beq.n	80047be <HAL_TIM_PWM_Start+0x18a>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a19      	ldr	r2, [pc, #100]	@ (800480c <HAL_TIM_PWM_Start+0x1d8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d009      	beq.n	80047be <HAL_TIM_PWM_Start+0x18a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a1b      	ldr	r2, [pc, #108]	@ (800481c <HAL_TIM_PWM_Start+0x1e8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d004      	beq.n	80047be <HAL_TIM_PWM_Start+0x18a>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a19      	ldr	r2, [pc, #100]	@ (8004820 <HAL_TIM_PWM_Start+0x1ec>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d115      	bne.n	80047ea <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	4b17      	ldr	r3, [pc, #92]	@ (8004824 <HAL_TIM_PWM_Start+0x1f0>)
 80047c6:	4013      	ands	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b06      	cmp	r3, #6
 80047ce:	d015      	beq.n	80047fc <HAL_TIM_PWM_Start+0x1c8>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047d6:	d011      	beq.n	80047fc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0201 	orr.w	r2, r2, #1
 80047e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e8:	e008      	b.n	80047fc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0201 	orr.w	r2, r2, #1
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	e000      	b.n	80047fe <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40010000 	.word	0x40010000
 800480c:	40010400 	.word	0x40010400
 8004810:	40000400 	.word	0x40000400
 8004814:	40000800 	.word	0x40000800
 8004818:	40000c00 	.word	0x40000c00
 800481c:	40014000 	.word	0x40014000
 8004820:	40001800 	.word	0x40001800
 8004824:	00010007 	.word	0x00010007

08004828 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e041      	b.n	80048c0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d106      	bne.n	8004856 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f839 	bl	80048c8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3304      	adds	r3, #4
 8004866:	4619      	mov	r1, r3
 8004868:	4610      	mov	r0, r2
 800486a:	f000 fca3 	bl	80051b4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0208 	bic.w	r2, r2, #8
 800487c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6819      	ldr	r1, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e08f      	b.n	8004a10 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d106      	bne.n	800490a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7fc ff5f 	bl	80017c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2202      	movs	r2, #2
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6899      	ldr	r1, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	4b3e      	ldr	r3, [pc, #248]	@ (8004a18 <HAL_TIM_Encoder_Init+0x13c>)
 800491e:	400b      	ands	r3, r1
 8004920:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	3304      	adds	r3, #4
 800492a:	4619      	mov	r1, r3
 800492c:	4610      	mov	r0, r2
 800492e:	f000 fc41 	bl	80051b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	4313      	orrs	r3, r2
 8004952:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	4b31      	ldr	r3, [pc, #196]	@ (8004a1c <HAL_TIM_Encoder_Init+0x140>)
 8004958:	4013      	ands	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	4313      	orrs	r3, r2
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4b2b      	ldr	r3, [pc, #172]	@ (8004a20 <HAL_TIM_Encoder_Init+0x144>)
 8004972:	4013      	ands	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	4b2a      	ldr	r3, [pc, #168]	@ (8004a24 <HAL_TIM_Encoder_Init+0x148>)
 800497a:	4013      	ands	r3, r2
 800497c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	021b      	lsls	r3, r3, #8
 8004988:	4313      	orrs	r3, r2
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	011a      	lsls	r2, r3, #4
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	031b      	lsls	r3, r3, #12
 800499c:	4313      	orrs	r3, r2
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80049aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80049b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	4313      	orrs	r3, r2
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	fffebff8 	.word	0xfffebff8
 8004a1c:	fffffcfc 	.word	0xfffffcfc
 8004a20:	fffff3f3 	.word	0xfffff3f3
 8004a24:	ffff0f0f 	.word	0xffff0f0f

08004a28 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a38:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a40:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a48:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a50:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d110      	bne.n	8004a7a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d102      	bne.n	8004a64 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a5e:	7b7b      	ldrb	r3, [r7, #13]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d001      	beq.n	8004a68 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e089      	b.n	8004b7c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a78:	e031      	b.n	8004ade <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d110      	bne.n	8004aa2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a80:	7bbb      	ldrb	r3, [r7, #14]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d102      	bne.n	8004a8c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a86:	7b3b      	ldrb	r3, [r7, #12]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d001      	beq.n	8004a90 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e075      	b.n	8004b7c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004aa0:	e01d      	b.n	8004ade <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d108      	bne.n	8004aba <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004aa8:	7bbb      	ldrb	r3, [r7, #14]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d105      	bne.n	8004aba <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004aae:	7b7b      	ldrb	r3, [r7, #13]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d102      	bne.n	8004aba <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ab4:	7b3b      	ldrb	r3, [r7, #12]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d001      	beq.n	8004abe <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e05e      	b.n	8004b7c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_TIM_Encoder_Start_IT+0xc4>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d010      	beq.n	8004b0c <HAL_TIM_Encoder_Start_IT+0xe4>
 8004aea:	e01f      	b.n	8004b2c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2201      	movs	r2, #1
 8004af2:	2100      	movs	r1, #0
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 ff01 	bl	80058fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0202 	orr.w	r2, r2, #2
 8004b08:	60da      	str	r2, [r3, #12]
      break;
 8004b0a:	e02e      	b.n	8004b6a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2201      	movs	r2, #1
 8004b12:	2104      	movs	r1, #4
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fef1 	bl	80058fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0204 	orr.w	r2, r2, #4
 8004b28:	60da      	str	r2, [r3, #12]
      break;
 8004b2a:	e01e      	b.n	8004b6a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2201      	movs	r2, #1
 8004b32:	2100      	movs	r1, #0
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 fee1 	bl	80058fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	2104      	movs	r1, #4
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 feda 	bl	80058fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0202 	orr.w	r2, r2, #2
 8004b56:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0204 	orr.w	r2, r2, #4
 8004b66:	60da      	str	r2, [r3, #12]
      break;
 8004b68:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f042 0201 	orr.w	r2, r2, #1
 8004b78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d020      	beq.n	8004be8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01b      	beq.n	8004be8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0202 	mvn.w	r2, #2
 8004bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fad2 	bl	8005178 <HAL_TIM_IC_CaptureCallback>
 8004bd4:	e005      	b.n	8004be2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fac4 	bl	8005164 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fad5 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f003 0304 	and.w	r3, r3, #4
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d020      	beq.n	8004c34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01b      	beq.n	8004c34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f06f 0204 	mvn.w	r2, #4
 8004c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2202      	movs	r2, #2
 8004c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 faac 	bl	8005178 <HAL_TIM_IC_CaptureCallback>
 8004c20:	e005      	b.n	8004c2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fa9e 	bl	8005164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 faaf 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d020      	beq.n	8004c80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01b      	beq.n	8004c80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f06f 0208 	mvn.w	r2, #8
 8004c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2204      	movs	r2, #4
 8004c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fa86 	bl	8005178 <HAL_TIM_IC_CaptureCallback>
 8004c6c:	e005      	b.n	8004c7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fa78 	bl	8005164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fa89 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f003 0310 	and.w	r3, r3, #16
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d020      	beq.n	8004ccc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d01b      	beq.n	8004ccc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0210 	mvn.w	r2, #16
 8004c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fa60 	bl	8005178 <HAL_TIM_IC_CaptureCallback>
 8004cb8:	e005      	b.n	8004cc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fa52 	bl	8005164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 fa63 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00c      	beq.n	8004cf0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d007      	beq.n	8004cf0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0201 	mvn.w	r2, #1
 8004ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fa30 	bl	8005150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d104      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00c      	beq.n	8004d1e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d007      	beq.n	8004d1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fead 	bl	8005a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00c      	beq.n	8004d42 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d007      	beq.n	8004d42 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fea5 	bl	8005a8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00c      	beq.n	8004d66 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d007      	beq.n	8004d66 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fa1d 	bl	80051a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00c      	beq.n	8004d8a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d007      	beq.n	8004d8a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f06f 0220 	mvn.w	r2, #32
 8004d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 fe6d 	bl	8005a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d8a:	bf00      	nop
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
	...

08004d94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dae:	2302      	movs	r3, #2
 8004db0:	e0ff      	b.n	8004fb2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b14      	cmp	r3, #20
 8004dbe:	f200 80f0 	bhi.w	8004fa2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc8:	08004e1d 	.word	0x08004e1d
 8004dcc:	08004fa3 	.word	0x08004fa3
 8004dd0:	08004fa3 	.word	0x08004fa3
 8004dd4:	08004fa3 	.word	0x08004fa3
 8004dd8:	08004e5d 	.word	0x08004e5d
 8004ddc:	08004fa3 	.word	0x08004fa3
 8004de0:	08004fa3 	.word	0x08004fa3
 8004de4:	08004fa3 	.word	0x08004fa3
 8004de8:	08004e9f 	.word	0x08004e9f
 8004dec:	08004fa3 	.word	0x08004fa3
 8004df0:	08004fa3 	.word	0x08004fa3
 8004df4:	08004fa3 	.word	0x08004fa3
 8004df8:	08004edf 	.word	0x08004edf
 8004dfc:	08004fa3 	.word	0x08004fa3
 8004e00:	08004fa3 	.word	0x08004fa3
 8004e04:	08004fa3 	.word	0x08004fa3
 8004e08:	08004f21 	.word	0x08004f21
 8004e0c:	08004fa3 	.word	0x08004fa3
 8004e10:	08004fa3 	.word	0x08004fa3
 8004e14:	08004fa3 	.word	0x08004fa3
 8004e18:	08004f61 	.word	0x08004f61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68b9      	ldr	r1, [r7, #8]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fa72 	bl	800530c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699a      	ldr	r2, [r3, #24]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0208 	orr.w	r2, r2, #8
 8004e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699a      	ldr	r2, [r3, #24]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0204 	bic.w	r2, r2, #4
 8004e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6999      	ldr	r1, [r3, #24]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	691a      	ldr	r2, [r3, #16]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	619a      	str	r2, [r3, #24]
      break;
 8004e5a:	e0a5      	b.n	8004fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68b9      	ldr	r1, [r7, #8]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 fac4 	bl	80053f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	699a      	ldr	r2, [r3, #24]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699a      	ldr	r2, [r3, #24]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6999      	ldr	r1, [r3, #24]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	021a      	lsls	r2, r3, #8
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	619a      	str	r2, [r3, #24]
      break;
 8004e9c:	e084      	b.n	8004fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 fb1b 	bl	80054e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69da      	ldr	r2, [r3, #28]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0208 	orr.w	r2, r2, #8
 8004eb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0204 	bic.w	r2, r2, #4
 8004ec8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69d9      	ldr	r1, [r3, #28]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	61da      	str	r2, [r3, #28]
      break;
 8004edc:	e064      	b.n	8004fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 fb71 	bl	80055cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69da      	ldr	r2, [r3, #28]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ef8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69da      	ldr	r2, [r3, #28]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69d9      	ldr	r1, [r3, #28]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	021a      	lsls	r2, r3, #8
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	61da      	str	r2, [r3, #28]
      break;
 8004f1e:	e043      	b.n	8004fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 fba8 	bl	800567c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0208 	orr.w	r2, r2, #8
 8004f3a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0204 	bic.w	r2, r2, #4
 8004f4a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	691a      	ldr	r2, [r3, #16]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004f5e:	e023      	b.n	8004fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68b9      	ldr	r1, [r7, #8]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fbda 	bl	8005720 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f7a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f8a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	021a      	lsls	r2, r3, #8
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004fa0:	e002      	b.n	8004fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	75fb      	strb	r3, [r7, #23]
      break;
 8004fa6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop

08004fbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d101      	bne.n	8004fd8 <HAL_TIM_ConfigClockSource+0x1c>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	e0b4      	b.n	8005142 <HAL_TIM_ConfigClockSource+0x186>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	4b56      	ldr	r3, [pc, #344]	@ (800514c <HAL_TIM_ConfigClockSource+0x190>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ffe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005010:	d03e      	beq.n	8005090 <HAL_TIM_ConfigClockSource+0xd4>
 8005012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005016:	f200 8087 	bhi.w	8005128 <HAL_TIM_ConfigClockSource+0x16c>
 800501a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800501e:	f000 8086 	beq.w	800512e <HAL_TIM_ConfigClockSource+0x172>
 8005022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005026:	d87f      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x16c>
 8005028:	2b70      	cmp	r3, #112	@ 0x70
 800502a:	d01a      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0xa6>
 800502c:	2b70      	cmp	r3, #112	@ 0x70
 800502e:	d87b      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x16c>
 8005030:	2b60      	cmp	r3, #96	@ 0x60
 8005032:	d050      	beq.n	80050d6 <HAL_TIM_ConfigClockSource+0x11a>
 8005034:	2b60      	cmp	r3, #96	@ 0x60
 8005036:	d877      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x16c>
 8005038:	2b50      	cmp	r3, #80	@ 0x50
 800503a:	d03c      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0xfa>
 800503c:	2b50      	cmp	r3, #80	@ 0x50
 800503e:	d873      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x16c>
 8005040:	2b40      	cmp	r3, #64	@ 0x40
 8005042:	d058      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x13a>
 8005044:	2b40      	cmp	r3, #64	@ 0x40
 8005046:	d86f      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x16c>
 8005048:	2b30      	cmp	r3, #48	@ 0x30
 800504a:	d064      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x15a>
 800504c:	2b30      	cmp	r3, #48	@ 0x30
 800504e:	d86b      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x16c>
 8005050:	2b20      	cmp	r3, #32
 8005052:	d060      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x15a>
 8005054:	2b20      	cmp	r3, #32
 8005056:	d867      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x16c>
 8005058:	2b00      	cmp	r3, #0
 800505a:	d05c      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x15a>
 800505c:	2b10      	cmp	r3, #16
 800505e:	d05a      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x15a>
 8005060:	e062      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005072:	f000 fc23 	bl	80058bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005084:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	609a      	str	r2, [r3, #8]
      break;
 800508e:	e04f      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050a0:	f000 fc0c 	bl	80058bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050b2:	609a      	str	r2, [r3, #8]
      break;
 80050b4:	e03c      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050c2:	461a      	mov	r2, r3
 80050c4:	f000 fb80 	bl	80057c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2150      	movs	r1, #80	@ 0x50
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fbd9 	bl	8005886 <TIM_ITRx_SetConfig>
      break;
 80050d4:	e02c      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050e2:	461a      	mov	r2, r3
 80050e4:	f000 fb9f 	bl	8005826 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2160      	movs	r1, #96	@ 0x60
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fbc9 	bl	8005886 <TIM_ITRx_SetConfig>
      break;
 80050f4:	e01c      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005102:	461a      	mov	r2, r3
 8005104:	f000 fb60 	bl	80057c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2140      	movs	r1, #64	@ 0x40
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fbb9 	bl	8005886 <TIM_ITRx_SetConfig>
      break;
 8005114:	e00c      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4619      	mov	r1, r3
 8005120:	4610      	mov	r0, r2
 8005122:	f000 fbb0 	bl	8005886 <TIM_ITRx_SetConfig>
      break;
 8005126:	e003      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	73fb      	strb	r3, [r7, #15]
      break;
 800512c:	e000      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800512e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005140:	7bfb      	ldrb	r3, [r7, #15]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	fffeff88 	.word	0xfffeff88

08005150 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a46      	ldr	r2, [pc, #280]	@ (80052e0 <TIM_Base_SetConfig+0x12c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d013      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d2:	d00f      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a43      	ldr	r2, [pc, #268]	@ (80052e4 <TIM_Base_SetConfig+0x130>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00b      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a42      	ldr	r2, [pc, #264]	@ (80052e8 <TIM_Base_SetConfig+0x134>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d007      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a41      	ldr	r2, [pc, #260]	@ (80052ec <TIM_Base_SetConfig+0x138>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d003      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a40      	ldr	r2, [pc, #256]	@ (80052f0 <TIM_Base_SetConfig+0x13c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d108      	bne.n	8005206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a35      	ldr	r2, [pc, #212]	@ (80052e0 <TIM_Base_SetConfig+0x12c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d02b      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005214:	d027      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a32      	ldr	r2, [pc, #200]	@ (80052e4 <TIM_Base_SetConfig+0x130>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d023      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a31      	ldr	r2, [pc, #196]	@ (80052e8 <TIM_Base_SetConfig+0x134>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d01f      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a30      	ldr	r2, [pc, #192]	@ (80052ec <TIM_Base_SetConfig+0x138>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d01b      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a2f      	ldr	r2, [pc, #188]	@ (80052f0 <TIM_Base_SetConfig+0x13c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d017      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a2e      	ldr	r2, [pc, #184]	@ (80052f4 <TIM_Base_SetConfig+0x140>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d013      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a2d      	ldr	r2, [pc, #180]	@ (80052f8 <TIM_Base_SetConfig+0x144>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00f      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a2c      	ldr	r2, [pc, #176]	@ (80052fc <TIM_Base_SetConfig+0x148>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00b      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a2b      	ldr	r2, [pc, #172]	@ (8005300 <TIM_Base_SetConfig+0x14c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d007      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a2a      	ldr	r2, [pc, #168]	@ (8005304 <TIM_Base_SetConfig+0x150>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d003      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a29      	ldr	r2, [pc, #164]	@ (8005308 <TIM_Base_SetConfig+0x154>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d108      	bne.n	8005278 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800526c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a10      	ldr	r2, [pc, #64]	@ (80052e0 <TIM_Base_SetConfig+0x12c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d003      	beq.n	80052ac <TIM_Base_SetConfig+0xf8>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a12      	ldr	r2, [pc, #72]	@ (80052f0 <TIM_Base_SetConfig+0x13c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d103      	bne.n	80052b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d105      	bne.n	80052d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f023 0201 	bic.w	r2, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	611a      	str	r2, [r3, #16]
  }
}
 80052d2:	bf00      	nop
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40010000 	.word	0x40010000
 80052e4:	40000400 	.word	0x40000400
 80052e8:	40000800 	.word	0x40000800
 80052ec:	40000c00 	.word	0x40000c00
 80052f0:	40010400 	.word	0x40010400
 80052f4:	40014000 	.word	0x40014000
 80052f8:	40014400 	.word	0x40014400
 80052fc:	40014800 	.word	0x40014800
 8005300:	40001800 	.word	0x40001800
 8005304:	40001c00 	.word	0x40001c00
 8005308:	40002000 	.word	0x40002000

0800530c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	f023 0201 	bic.w	r2, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4b2b      	ldr	r3, [pc, #172]	@ (80053e4 <TIM_OC1_SetConfig+0xd8>)
 8005338:	4013      	ands	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0303 	bic.w	r3, r3, #3
 8005342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f023 0302 	bic.w	r3, r3, #2
 8005354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a21      	ldr	r2, [pc, #132]	@ (80053e8 <TIM_OC1_SetConfig+0xdc>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d003      	beq.n	8005370 <TIM_OC1_SetConfig+0x64>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a20      	ldr	r2, [pc, #128]	@ (80053ec <TIM_OC1_SetConfig+0xe0>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d10c      	bne.n	800538a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f023 0308 	bic.w	r3, r3, #8
 8005376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	4313      	orrs	r3, r2
 8005380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f023 0304 	bic.w	r3, r3, #4
 8005388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a16      	ldr	r2, [pc, #88]	@ (80053e8 <TIM_OC1_SetConfig+0xdc>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d003      	beq.n	800539a <TIM_OC1_SetConfig+0x8e>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a15      	ldr	r2, [pc, #84]	@ (80053ec <TIM_OC1_SetConfig+0xe0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d111      	bne.n	80053be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	621a      	str	r2, [r3, #32]
}
 80053d8:	bf00      	nop
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	fffeff8f 	.word	0xfffeff8f
 80053e8:	40010000 	.word	0x40010000
 80053ec:	40010400 	.word	0x40010400

080053f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	f023 0210 	bic.w	r2, r3, #16
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4b2e      	ldr	r3, [pc, #184]	@ (80054d4 <TIM_OC2_SetConfig+0xe4>)
 800541c:	4013      	ands	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	021b      	lsls	r3, r3, #8
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4313      	orrs	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f023 0320 	bic.w	r3, r3, #32
 800543a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a23      	ldr	r2, [pc, #140]	@ (80054d8 <TIM_OC2_SetConfig+0xe8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d003      	beq.n	8005458 <TIM_OC2_SetConfig+0x68>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a22      	ldr	r2, [pc, #136]	@ (80054dc <TIM_OC2_SetConfig+0xec>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d10d      	bne.n	8005474 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800545e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	011b      	lsls	r3, r3, #4
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005472:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a18      	ldr	r2, [pc, #96]	@ (80054d8 <TIM_OC2_SetConfig+0xe8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <TIM_OC2_SetConfig+0x94>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a17      	ldr	r2, [pc, #92]	@ (80054dc <TIM_OC2_SetConfig+0xec>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d113      	bne.n	80054ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800548a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005492:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	621a      	str	r2, [r3, #32]
}
 80054c6:	bf00      	nop
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	feff8fff 	.word	0xfeff8fff
 80054d8:	40010000 	.word	0x40010000
 80054dc:	40010400 	.word	0x40010400

080054e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	4b2d      	ldr	r3, [pc, #180]	@ (80055c0 <TIM_OC3_SetConfig+0xe0>)
 800550c:	4013      	ands	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0303 	bic.w	r3, r3, #3
 8005516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	021b      	lsls	r3, r3, #8
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a22      	ldr	r2, [pc, #136]	@ (80055c4 <TIM_OC3_SetConfig+0xe4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d003      	beq.n	8005546 <TIM_OC3_SetConfig+0x66>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a21      	ldr	r2, [pc, #132]	@ (80055c8 <TIM_OC3_SetConfig+0xe8>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d10d      	bne.n	8005562 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800554c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	021b      	lsls	r3, r3, #8
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a17      	ldr	r2, [pc, #92]	@ (80055c4 <TIM_OC3_SetConfig+0xe4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d003      	beq.n	8005572 <TIM_OC3_SetConfig+0x92>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a16      	ldr	r2, [pc, #88]	@ (80055c8 <TIM_OC3_SetConfig+0xe8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d113      	bne.n	800559a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	621a      	str	r2, [r3, #32]
}
 80055b4:	bf00      	nop
 80055b6:	371c      	adds	r7, #28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	fffeff8f 	.word	0xfffeff8f
 80055c4:	40010000 	.word	0x40010000
 80055c8:	40010400 	.word	0x40010400

080055cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b087      	sub	sp, #28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005670 <TIM_OC4_SetConfig+0xa4>)
 80055f8:	4013      	ands	r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	021b      	lsls	r3, r3, #8
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4313      	orrs	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005616:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	031b      	lsls	r3, r3, #12
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	4313      	orrs	r3, r2
 8005622:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a13      	ldr	r2, [pc, #76]	@ (8005674 <TIM_OC4_SetConfig+0xa8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d003      	beq.n	8005634 <TIM_OC4_SetConfig+0x68>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a12      	ldr	r2, [pc, #72]	@ (8005678 <TIM_OC4_SetConfig+0xac>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d109      	bne.n	8005648 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800563a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	019b      	lsls	r3, r3, #6
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	621a      	str	r2, [r3, #32]
}
 8005662:	bf00      	nop
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	feff8fff 	.word	0xfeff8fff
 8005674:	40010000 	.word	0x40010000
 8005678:	40010400 	.word	0x40010400

0800567c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005714 <TIM_OC5_SetConfig+0x98>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80056bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	041b      	lsls	r3, r3, #16
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a12      	ldr	r2, [pc, #72]	@ (8005718 <TIM_OC5_SetConfig+0x9c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d003      	beq.n	80056da <TIM_OC5_SetConfig+0x5e>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a11      	ldr	r2, [pc, #68]	@ (800571c <TIM_OC5_SetConfig+0xa0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d109      	bne.n	80056ee <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	621a      	str	r2, [r3, #32]
}
 8005708:	bf00      	nop
 800570a:	371c      	adds	r7, #28
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	fffeff8f 	.word	0xfffeff8f
 8005718:	40010000 	.word	0x40010000
 800571c:	40010400 	.word	0x40010400

08005720 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	4b1c      	ldr	r3, [pc, #112]	@ (80057bc <TIM_OC6_SetConfig+0x9c>)
 800574c:	4013      	ands	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	021b      	lsls	r3, r3, #8
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005762:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	051b      	lsls	r3, r3, #20
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	4313      	orrs	r3, r2
 800576e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a13      	ldr	r2, [pc, #76]	@ (80057c0 <TIM_OC6_SetConfig+0xa0>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d003      	beq.n	8005780 <TIM_OC6_SetConfig+0x60>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a12      	ldr	r2, [pc, #72]	@ (80057c4 <TIM_OC6_SetConfig+0xa4>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d109      	bne.n	8005794 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005786:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	029b      	lsls	r3, r3, #10
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	4313      	orrs	r3, r2
 8005792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	621a      	str	r2, [r3, #32]
}
 80057ae:	bf00      	nop
 80057b0:	371c      	adds	r7, #28
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	feff8fff 	.word	0xfeff8fff
 80057c0:	40010000 	.word	0x40010000
 80057c4:	40010400 	.word	0x40010400

080057c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	f023 0201 	bic.w	r2, r3, #1
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f023 030a 	bic.w	r3, r3, #10
 8005804:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	621a      	str	r2, [r3, #32]
}
 800581a:	bf00      	nop
 800581c:	371c      	adds	r7, #28
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005826:	b480      	push	{r7}
 8005828:	b087      	sub	sp, #28
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	f023 0210 	bic.w	r2, r3, #16
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005850:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	031b      	lsls	r3, r3, #12
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005862:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	621a      	str	r2, [r3, #32]
}
 800587a:	bf00      	nop
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005886:	b480      	push	{r7}
 8005888:	b085      	sub	sp, #20
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800589c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	f043 0307 	orr.w	r3, r3, #7
 80058a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	609a      	str	r2, [r3, #8]
}
 80058b0:	bf00      	nop
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	021a      	lsls	r2, r3, #8
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	431a      	orrs	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	609a      	str	r2, [r3, #8]
}
 80058f0:	bf00      	nop
 80058f2:	371c      	adds	r7, #28
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f003 031f 	and.w	r3, r3, #31
 800590e:	2201      	movs	r2, #1
 8005910:	fa02 f303 	lsl.w	r3, r2, r3
 8005914:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a1a      	ldr	r2, [r3, #32]
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	43db      	mvns	r3, r3
 800591e:	401a      	ands	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6a1a      	ldr	r2, [r3, #32]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	f003 031f 	and.w	r3, r3, #31
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	fa01 f303 	lsl.w	r3, r1, r3
 8005934:	431a      	orrs	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	621a      	str	r2, [r3, #32]
}
 800593a:	bf00      	nop
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
	...

08005948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800595c:	2302      	movs	r3, #2
 800595e:	e06d      	b.n	8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2202      	movs	r2, #2
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a30      	ldr	r2, [pc, #192]	@ (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d004      	beq.n	8005994 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a2f      	ldr	r2, [pc, #188]	@ (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d108      	bne.n	80059a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800599a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a20      	ldr	r2, [pc, #128]	@ (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d022      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059d2:	d01d      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d018      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d013      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a1a      	ldr	r2, [pc, #104]	@ (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00e      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a15      	ldr	r2, [pc, #84]	@ (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d009      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a16      	ldr	r2, [pc, #88]	@ (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d004      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a15      	ldr	r2, [pc, #84]	@ (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d10c      	bne.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	40010000 	.word	0x40010000
 8005a4c:	40010400 	.word	0x40010400
 8005a50:	40000400 	.word	0x40000400
 8005a54:	40000800 	.word	0x40000800
 8005a58:	40000c00 	.word	0x40000c00
 8005a5c:	40014000 	.word	0x40014000
 8005a60:	40001800 	.word	0x40001800

08005a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005aa6:	4b87      	ldr	r3, [pc, #540]	@ (8005cc4 <MX_LWIP_Init+0x224>)
 8005aa8:	22c0      	movs	r2, #192	@ 0xc0
 8005aaa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005aac:	4b85      	ldr	r3, [pc, #532]	@ (8005cc4 <MX_LWIP_Init+0x224>)
 8005aae:	22a8      	movs	r2, #168	@ 0xa8
 8005ab0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8005ab2:	4b84      	ldr	r3, [pc, #528]	@ (8005cc4 <MX_LWIP_Init+0x224>)
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 9;
 8005ab8:	4b82      	ldr	r3, [pc, #520]	@ (8005cc4 <MX_LWIP_Init+0x224>)
 8005aba:	2209      	movs	r2, #9
 8005abc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005abe:	4b82      	ldr	r3, [pc, #520]	@ (8005cc8 <MX_LWIP_Init+0x228>)
 8005ac0:	22ff      	movs	r2, #255	@ 0xff
 8005ac2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005ac4:	4b80      	ldr	r3, [pc, #512]	@ (8005cc8 <MX_LWIP_Init+0x228>)
 8005ac6:	22ff      	movs	r2, #255	@ 0xff
 8005ac8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005aca:	4b7f      	ldr	r3, [pc, #508]	@ (8005cc8 <MX_LWIP_Init+0x228>)
 8005acc:	22ff      	movs	r2, #255	@ 0xff
 8005ace:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005ad0:	4b7d      	ldr	r3, [pc, #500]	@ (8005cc8 <MX_LWIP_Init+0x228>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005ad6:	4b7d      	ldr	r3, [pc, #500]	@ (8005ccc <MX_LWIP_Init+0x22c>)
 8005ad8:	22c0      	movs	r2, #192	@ 0xc0
 8005ada:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005adc:	4b7b      	ldr	r3, [pc, #492]	@ (8005ccc <MX_LWIP_Init+0x22c>)
 8005ade:	22a8      	movs	r2, #168	@ 0xa8
 8005ae0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8005ae2:	4b7a      	ldr	r3, [pc, #488]	@ (8005ccc <MX_LWIP_Init+0x22c>)
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005ae8:	4b78      	ldr	r3, [pc, #480]	@ (8005ccc <MX_LWIP_Init+0x22c>)
 8005aea:	2201      	movs	r2, #1
 8005aec:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8005aee:	f000 fd39 	bl	8006564 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005af2:	4b74      	ldr	r3, [pc, #464]	@ (8005cc4 <MX_LWIP_Init+0x224>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	061a      	lsls	r2, r3, #24
 8005af8:	4b72      	ldr	r3, [pc, #456]	@ (8005cc4 <MX_LWIP_Init+0x224>)
 8005afa:	785b      	ldrb	r3, [r3, #1]
 8005afc:	041b      	lsls	r3, r3, #16
 8005afe:	431a      	orrs	r2, r3
 8005b00:	4b70      	ldr	r3, [pc, #448]	@ (8005cc4 <MX_LWIP_Init+0x224>)
 8005b02:	789b      	ldrb	r3, [r3, #2]
 8005b04:	021b      	lsls	r3, r3, #8
 8005b06:	4313      	orrs	r3, r2
 8005b08:	4a6e      	ldr	r2, [pc, #440]	@ (8005cc4 <MX_LWIP_Init+0x224>)
 8005b0a:	78d2      	ldrb	r2, [r2, #3]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	061a      	lsls	r2, r3, #24
 8005b10:	4b6c      	ldr	r3, [pc, #432]	@ (8005cc4 <MX_LWIP_Init+0x224>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	0619      	lsls	r1, r3, #24
 8005b16:	4b6b      	ldr	r3, [pc, #428]	@ (8005cc4 <MX_LWIP_Init+0x224>)
 8005b18:	785b      	ldrb	r3, [r3, #1]
 8005b1a:	041b      	lsls	r3, r3, #16
 8005b1c:	4319      	orrs	r1, r3
 8005b1e:	4b69      	ldr	r3, [pc, #420]	@ (8005cc4 <MX_LWIP_Init+0x224>)
 8005b20:	789b      	ldrb	r3, [r3, #2]
 8005b22:	021b      	lsls	r3, r3, #8
 8005b24:	430b      	orrs	r3, r1
 8005b26:	4967      	ldr	r1, [pc, #412]	@ (8005cc4 <MX_LWIP_Init+0x224>)
 8005b28:	78c9      	ldrb	r1, [r1, #3]
 8005b2a:	430b      	orrs	r3, r1
 8005b2c:	021b      	lsls	r3, r3, #8
 8005b2e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005b32:	431a      	orrs	r2, r3
 8005b34:	4b63      	ldr	r3, [pc, #396]	@ (8005cc4 <MX_LWIP_Init+0x224>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	0619      	lsls	r1, r3, #24
 8005b3a:	4b62      	ldr	r3, [pc, #392]	@ (8005cc4 <MX_LWIP_Init+0x224>)
 8005b3c:	785b      	ldrb	r3, [r3, #1]
 8005b3e:	041b      	lsls	r3, r3, #16
 8005b40:	4319      	orrs	r1, r3
 8005b42:	4b60      	ldr	r3, [pc, #384]	@ (8005cc4 <MX_LWIP_Init+0x224>)
 8005b44:	789b      	ldrb	r3, [r3, #2]
 8005b46:	021b      	lsls	r3, r3, #8
 8005b48:	430b      	orrs	r3, r1
 8005b4a:	495e      	ldr	r1, [pc, #376]	@ (8005cc4 <MX_LWIP_Init+0x224>)
 8005b4c:	78c9      	ldrb	r1, [r1, #3]
 8005b4e:	430b      	orrs	r3, r1
 8005b50:	0a1b      	lsrs	r3, r3, #8
 8005b52:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005b56:	431a      	orrs	r2, r3
 8005b58:	4b5a      	ldr	r3, [pc, #360]	@ (8005cc4 <MX_LWIP_Init+0x224>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	0619      	lsls	r1, r3, #24
 8005b5e:	4b59      	ldr	r3, [pc, #356]	@ (8005cc4 <MX_LWIP_Init+0x224>)
 8005b60:	785b      	ldrb	r3, [r3, #1]
 8005b62:	041b      	lsls	r3, r3, #16
 8005b64:	4319      	orrs	r1, r3
 8005b66:	4b57      	ldr	r3, [pc, #348]	@ (8005cc4 <MX_LWIP_Init+0x224>)
 8005b68:	789b      	ldrb	r3, [r3, #2]
 8005b6a:	021b      	lsls	r3, r3, #8
 8005b6c:	430b      	orrs	r3, r1
 8005b6e:	4955      	ldr	r1, [pc, #340]	@ (8005cc4 <MX_LWIP_Init+0x224>)
 8005b70:	78c9      	ldrb	r1, [r1, #3]
 8005b72:	430b      	orrs	r3, r1
 8005b74:	0e1b      	lsrs	r3, r3, #24
 8005b76:	4313      	orrs	r3, r2
 8005b78:	4a55      	ldr	r2, [pc, #340]	@ (8005cd0 <MX_LWIP_Init+0x230>)
 8005b7a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005b7c:	4b52      	ldr	r3, [pc, #328]	@ (8005cc8 <MX_LWIP_Init+0x228>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	061a      	lsls	r2, r3, #24
 8005b82:	4b51      	ldr	r3, [pc, #324]	@ (8005cc8 <MX_LWIP_Init+0x228>)
 8005b84:	785b      	ldrb	r3, [r3, #1]
 8005b86:	041b      	lsls	r3, r3, #16
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	4b4f      	ldr	r3, [pc, #316]	@ (8005cc8 <MX_LWIP_Init+0x228>)
 8005b8c:	789b      	ldrb	r3, [r3, #2]
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	4313      	orrs	r3, r2
 8005b92:	4a4d      	ldr	r2, [pc, #308]	@ (8005cc8 <MX_LWIP_Init+0x228>)
 8005b94:	78d2      	ldrb	r2, [r2, #3]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	061a      	lsls	r2, r3, #24
 8005b9a:	4b4b      	ldr	r3, [pc, #300]	@ (8005cc8 <MX_LWIP_Init+0x228>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	0619      	lsls	r1, r3, #24
 8005ba0:	4b49      	ldr	r3, [pc, #292]	@ (8005cc8 <MX_LWIP_Init+0x228>)
 8005ba2:	785b      	ldrb	r3, [r3, #1]
 8005ba4:	041b      	lsls	r3, r3, #16
 8005ba6:	4319      	orrs	r1, r3
 8005ba8:	4b47      	ldr	r3, [pc, #284]	@ (8005cc8 <MX_LWIP_Init+0x228>)
 8005baa:	789b      	ldrb	r3, [r3, #2]
 8005bac:	021b      	lsls	r3, r3, #8
 8005bae:	430b      	orrs	r3, r1
 8005bb0:	4945      	ldr	r1, [pc, #276]	@ (8005cc8 <MX_LWIP_Init+0x228>)
 8005bb2:	78c9      	ldrb	r1, [r1, #3]
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	021b      	lsls	r3, r3, #8
 8005bb8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	4b42      	ldr	r3, [pc, #264]	@ (8005cc8 <MX_LWIP_Init+0x228>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	0619      	lsls	r1, r3, #24
 8005bc4:	4b40      	ldr	r3, [pc, #256]	@ (8005cc8 <MX_LWIP_Init+0x228>)
 8005bc6:	785b      	ldrb	r3, [r3, #1]
 8005bc8:	041b      	lsls	r3, r3, #16
 8005bca:	4319      	orrs	r1, r3
 8005bcc:	4b3e      	ldr	r3, [pc, #248]	@ (8005cc8 <MX_LWIP_Init+0x228>)
 8005bce:	789b      	ldrb	r3, [r3, #2]
 8005bd0:	021b      	lsls	r3, r3, #8
 8005bd2:	430b      	orrs	r3, r1
 8005bd4:	493c      	ldr	r1, [pc, #240]	@ (8005cc8 <MX_LWIP_Init+0x228>)
 8005bd6:	78c9      	ldrb	r1, [r1, #3]
 8005bd8:	430b      	orrs	r3, r1
 8005bda:	0a1b      	lsrs	r3, r3, #8
 8005bdc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005be0:	431a      	orrs	r2, r3
 8005be2:	4b39      	ldr	r3, [pc, #228]	@ (8005cc8 <MX_LWIP_Init+0x228>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	0619      	lsls	r1, r3, #24
 8005be8:	4b37      	ldr	r3, [pc, #220]	@ (8005cc8 <MX_LWIP_Init+0x228>)
 8005bea:	785b      	ldrb	r3, [r3, #1]
 8005bec:	041b      	lsls	r3, r3, #16
 8005bee:	4319      	orrs	r1, r3
 8005bf0:	4b35      	ldr	r3, [pc, #212]	@ (8005cc8 <MX_LWIP_Init+0x228>)
 8005bf2:	789b      	ldrb	r3, [r3, #2]
 8005bf4:	021b      	lsls	r3, r3, #8
 8005bf6:	430b      	orrs	r3, r1
 8005bf8:	4933      	ldr	r1, [pc, #204]	@ (8005cc8 <MX_LWIP_Init+0x228>)
 8005bfa:	78c9      	ldrb	r1, [r1, #3]
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	0e1b      	lsrs	r3, r3, #24
 8005c00:	4313      	orrs	r3, r2
 8005c02:	4a34      	ldr	r2, [pc, #208]	@ (8005cd4 <MX_LWIP_Init+0x234>)
 8005c04:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005c06:	4b31      	ldr	r3, [pc, #196]	@ (8005ccc <MX_LWIP_Init+0x22c>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	061a      	lsls	r2, r3, #24
 8005c0c:	4b2f      	ldr	r3, [pc, #188]	@ (8005ccc <MX_LWIP_Init+0x22c>)
 8005c0e:	785b      	ldrb	r3, [r3, #1]
 8005c10:	041b      	lsls	r3, r3, #16
 8005c12:	431a      	orrs	r2, r3
 8005c14:	4b2d      	ldr	r3, [pc, #180]	@ (8005ccc <MX_LWIP_Init+0x22c>)
 8005c16:	789b      	ldrb	r3, [r3, #2]
 8005c18:	021b      	lsls	r3, r3, #8
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8005ccc <MX_LWIP_Init+0x22c>)
 8005c1e:	78d2      	ldrb	r2, [r2, #3]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	061a      	lsls	r2, r3, #24
 8005c24:	4b29      	ldr	r3, [pc, #164]	@ (8005ccc <MX_LWIP_Init+0x22c>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	0619      	lsls	r1, r3, #24
 8005c2a:	4b28      	ldr	r3, [pc, #160]	@ (8005ccc <MX_LWIP_Init+0x22c>)
 8005c2c:	785b      	ldrb	r3, [r3, #1]
 8005c2e:	041b      	lsls	r3, r3, #16
 8005c30:	4319      	orrs	r1, r3
 8005c32:	4b26      	ldr	r3, [pc, #152]	@ (8005ccc <MX_LWIP_Init+0x22c>)
 8005c34:	789b      	ldrb	r3, [r3, #2]
 8005c36:	021b      	lsls	r3, r3, #8
 8005c38:	430b      	orrs	r3, r1
 8005c3a:	4924      	ldr	r1, [pc, #144]	@ (8005ccc <MX_LWIP_Init+0x22c>)
 8005c3c:	78c9      	ldrb	r1, [r1, #3]
 8005c3e:	430b      	orrs	r3, r1
 8005c40:	021b      	lsls	r3, r3, #8
 8005c42:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005c46:	431a      	orrs	r2, r3
 8005c48:	4b20      	ldr	r3, [pc, #128]	@ (8005ccc <MX_LWIP_Init+0x22c>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	0619      	lsls	r1, r3, #24
 8005c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8005ccc <MX_LWIP_Init+0x22c>)
 8005c50:	785b      	ldrb	r3, [r3, #1]
 8005c52:	041b      	lsls	r3, r3, #16
 8005c54:	4319      	orrs	r1, r3
 8005c56:	4b1d      	ldr	r3, [pc, #116]	@ (8005ccc <MX_LWIP_Init+0x22c>)
 8005c58:	789b      	ldrb	r3, [r3, #2]
 8005c5a:	021b      	lsls	r3, r3, #8
 8005c5c:	430b      	orrs	r3, r1
 8005c5e:	491b      	ldr	r1, [pc, #108]	@ (8005ccc <MX_LWIP_Init+0x22c>)
 8005c60:	78c9      	ldrb	r1, [r1, #3]
 8005c62:	430b      	orrs	r3, r1
 8005c64:	0a1b      	lsrs	r3, r3, #8
 8005c66:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	4b17      	ldr	r3, [pc, #92]	@ (8005ccc <MX_LWIP_Init+0x22c>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	0619      	lsls	r1, r3, #24
 8005c72:	4b16      	ldr	r3, [pc, #88]	@ (8005ccc <MX_LWIP_Init+0x22c>)
 8005c74:	785b      	ldrb	r3, [r3, #1]
 8005c76:	041b      	lsls	r3, r3, #16
 8005c78:	4319      	orrs	r1, r3
 8005c7a:	4b14      	ldr	r3, [pc, #80]	@ (8005ccc <MX_LWIP_Init+0x22c>)
 8005c7c:	789b      	ldrb	r3, [r3, #2]
 8005c7e:	021b      	lsls	r3, r3, #8
 8005c80:	430b      	orrs	r3, r1
 8005c82:	4912      	ldr	r1, [pc, #72]	@ (8005ccc <MX_LWIP_Init+0x22c>)
 8005c84:	78c9      	ldrb	r1, [r1, #3]
 8005c86:	430b      	orrs	r3, r1
 8005c88:	0e1b      	lsrs	r3, r3, #24
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	4a12      	ldr	r2, [pc, #72]	@ (8005cd8 <MX_LWIP_Init+0x238>)
 8005c8e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005c90:	4b12      	ldr	r3, [pc, #72]	@ (8005cdc <MX_LWIP_Init+0x23c>)
 8005c92:	9302      	str	r3, [sp, #8]
 8005c94:	4b12      	ldr	r3, [pc, #72]	@ (8005ce0 <MX_LWIP_Init+0x240>)
 8005c96:	9301      	str	r3, [sp, #4]
 8005c98:	2300      	movs	r3, #0
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8005cd8 <MX_LWIP_Init+0x238>)
 8005c9e:	4a0d      	ldr	r2, [pc, #52]	@ (8005cd4 <MX_LWIP_Init+0x234>)
 8005ca0:	490b      	ldr	r1, [pc, #44]	@ (8005cd0 <MX_LWIP_Init+0x230>)
 8005ca2:	4810      	ldr	r0, [pc, #64]	@ (8005ce4 <MX_LWIP_Init+0x244>)
 8005ca4:	f001 f94a 	bl	8006f3c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005ca8:	480e      	ldr	r0, [pc, #56]	@ (8005ce4 <MX_LWIP_Init+0x244>)
 8005caa:	f001 faf9 	bl	80072a0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8005cae:	480d      	ldr	r0, [pc, #52]	@ (8005ce4 <MX_LWIP_Init+0x244>)
 8005cb0:	f001 fb06 	bl	80072c0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005cb4:	490c      	ldr	r1, [pc, #48]	@ (8005ce8 <MX_LWIP_Init+0x248>)
 8005cb6:	480b      	ldr	r0, [pc, #44]	@ (8005ce4 <MX_LWIP_Init+0x244>)
 8005cb8:	f001 fc04 	bl	80074c4 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005cbc:	bf00      	nop
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20000a54 	.word	0x20000a54
 8005cc8:	20000a58 	.word	0x20000a58
 8005ccc:	20000a5c 	.word	0x20000a5c
 8005cd0:	20000a48 	.word	0x20000a48
 8005cd4:	20000a4c 	.word	0x20000a4c
 8005cd8:	20000a50 	.word	0x20000a50
 8005cdc:	08010419 	.word	0x08010419
 8005ce0:	08006061 	.word	0x08006061
 8005ce4:	20000a14 	.word	0x20000a14
 8005ce8:	08005d3d 	.word	0x08005d3d

08005cec <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8005cf4:	f7fc fa30 	bl	8002158 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	4b08      	ldr	r3, [pc, #32]	@ (8005d1c <Ethernet_Link_Periodic_Handle+0x30>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	2b63      	cmp	r3, #99	@ 0x63
 8005d02:	d907      	bls.n	8005d14 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8005d04:	f7fc fa28 	bl	8002158 <HAL_GetTick>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	4a04      	ldr	r2, [pc, #16]	@ (8005d1c <Ethernet_Link_Periodic_Handle+0x30>)
 8005d0c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fafc 	bl	800630c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8005d14:	bf00      	nop
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	20000a10 	.word	0x20000a10

08005d20 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005d24:	4804      	ldr	r0, [pc, #16]	@ (8005d38 <MX_LWIP_Process+0x18>)
 8005d26:	f000 f97b 	bl	8006020 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005d2a:	f007 fcdb 	bl	800d6e4 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8005d2e:	4802      	ldr	r0, [pc, #8]	@ (8005d38 <MX_LWIP_Process+0x18>)
 8005d30:	f7ff ffdc 	bl	8005cec <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005d34:	bf00      	nop
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	20000a14 	.word	0x20000a14

08005d3c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <SCB_InvalidateDCache_by_Addr>:
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005d62:	2320      	movs	r3, #32
 8005d64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d66:	f3bf 8f4f 	dsb	sy
}
 8005d6a:	bf00      	nop
    while (op_size > 0) {
 8005d6c:	e00b      	b.n	8005d86 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005d6e:	4a0d      	ldr	r2, [pc, #52]	@ (8005da4 <SCB_InvalidateDCache_by_Addr+0x54>)
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	dcf0      	bgt.n	8005d6e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005d8c:	f3bf 8f4f 	dsb	sy
}
 8005d90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005d92:	f3bf 8f6f 	isb	sy
}
 8005d96:	bf00      	nop
}
 8005d98:	bf00      	nop
 8005d9a:	371c      	adds	r7, #28
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	e000ed00 	.word	0xe000ed00

08005da8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005db4:	4b44      	ldr	r3, [pc, #272]	@ (8005ec8 <low_level_init+0x120>)
 8005db6:	4a45      	ldr	r2, [pc, #276]	@ (8005ecc <low_level_init+0x124>)
 8005db8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005dbe:	2380      	movs	r3, #128	@ 0x80
 8005dc0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005dc2:	23e1      	movs	r3, #225	@ 0xe1
 8005dc4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005dd2:	4a3d      	ldr	r2, [pc, #244]	@ (8005ec8 <low_level_init+0x120>)
 8005dd4:	f107 0308 	add.w	r3, r7, #8
 8005dd8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005dda:	4b3b      	ldr	r3, [pc, #236]	@ (8005ec8 <low_level_init+0x120>)
 8005ddc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005de0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005de2:	4b39      	ldr	r3, [pc, #228]	@ (8005ec8 <low_level_init+0x120>)
 8005de4:	4a3a      	ldr	r2, [pc, #232]	@ (8005ed0 <low_level_init+0x128>)
 8005de6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005de8:	4b37      	ldr	r3, [pc, #220]	@ (8005ec8 <low_level_init+0x120>)
 8005dea:	4a3a      	ldr	r2, [pc, #232]	@ (8005ed4 <low_level_init+0x12c>)
 8005dec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005dee:	4b36      	ldr	r3, [pc, #216]	@ (8005ec8 <low_level_init+0x120>)
 8005df0:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005df4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005df6:	4834      	ldr	r0, [pc, #208]	@ (8005ec8 <low_level_init+0x120>)
 8005df8:	f7fc faf0 	bl	80023dc <HAL_ETH_Init>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005e00:	2238      	movs	r2, #56	@ 0x38
 8005e02:	2100      	movs	r1, #0
 8005e04:	4834      	ldr	r0, [pc, #208]	@ (8005ed8 <low_level_init+0x130>)
 8005e06:	f00a fd3a 	bl	801087e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005e0a:	4b33      	ldr	r3, [pc, #204]	@ (8005ed8 <low_level_init+0x130>)
 8005e0c:	2221      	movs	r2, #33	@ 0x21
 8005e0e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005e10:	4b31      	ldr	r3, [pc, #196]	@ (8005ed8 <low_level_init+0x130>)
 8005e12:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8005e16:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005e18:	4b2f      	ldr	r3, [pc, #188]	@ (8005ed8 <low_level_init+0x130>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005e1e:	482f      	ldr	r0, [pc, #188]	@ (8005edc <low_level_init+0x134>)
 8005e20:	f000 ff54 	bl	8006ccc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2206      	movs	r2, #6
 8005e28:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005e2c:	4b26      	ldr	r3, [pc, #152]	@ (8005ec8 <low_level_init+0x120>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	781a      	ldrb	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005e38:	4b23      	ldr	r3, [pc, #140]	@ (8005ec8 <low_level_init+0x120>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	785a      	ldrb	r2, [r3, #1]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005e44:	4b20      	ldr	r3, [pc, #128]	@ (8005ec8 <low_level_init+0x120>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	789a      	ldrb	r2, [r3, #2]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005e50:	4b1d      	ldr	r3, [pc, #116]	@ (8005ec8 <low_level_init+0x120>)
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	78da      	ldrb	r2, [r3, #3]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ec8 <low_level_init+0x120>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	791a      	ldrb	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005e68:	4b17      	ldr	r3, [pc, #92]	@ (8005ec8 <low_level_init+0x120>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	795a      	ldrb	r2, [r3, #5]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005e7a:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005e82:	f043 030a 	orr.w	r3, r3, #10
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005e8e:	4914      	ldr	r1, [pc, #80]	@ (8005ee0 <low_level_init+0x138>)
 8005e90:	4814      	ldr	r0, [pc, #80]	@ (8005ee4 <low_level_init+0x13c>)
 8005e92:	f7fc f80a 	bl	8001eaa <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8005e96:	4813      	ldr	r0, [pc, #76]	@ (8005ee4 <low_level_init+0x13c>)
 8005e98:	f7fc f839 	bl	8001f0e <LAN8742_Init>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d006      	beq.n	8005eb0 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f001 fade 	bl	8007464 <netif_set_link_down>
    netif_set_down(netif);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f001 fa75 	bl	8007398 <netif_set_down>
 8005eae:	e008      	b.n	8005ec2 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d103      	bne.n	8005ebe <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fa28 	bl	800630c <ethernet_link_check_state>
 8005ebc:	e001      	b.n	8005ec2 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8005ebe:	f7fb fc59 	bl	8001774 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	200053ec 	.word	0x200053ec
 8005ecc:	40028000 	.word	0x40028000
 8005ed0:	20000780 	.word	0x20000780
 8005ed4:	200006e0 	.word	0x200006e0
 8005ed8:	2000549c 	.word	0x2000549c
 8005edc:	08017a80 	.word	0x08017a80
 8005ee0:	20000010 	.word	0x20000010
 8005ee4:	200054d4 	.word	0x200054d4

08005ee8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b092      	sub	sp, #72	@ 0x48
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005f00:	f107 030c 	add.w	r3, r7, #12
 8005f04:	2230      	movs	r2, #48	@ 0x30
 8005f06:	2100      	movs	r1, #0
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f00a fcb8 	bl	801087e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005f0e:	f107 030c 	add.w	r3, r7, #12
 8005f12:	2230      	movs	r2, #48	@ 0x30
 8005f14:	2100      	movs	r1, #0
 8005f16:	4618      	mov	r0, r3
 8005f18:	f00a fcb1 	bl	801087e <memset>

  for(q = p; q != NULL; q = q->next)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f20:	e045      	b.n	8005fae <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005f22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f24:	2b03      	cmp	r3, #3
 8005f26:	d902      	bls.n	8005f2e <low_level_output+0x46>
      return ERR_IF;
 8005f28:	f06f 030b 	mvn.w	r3, #11
 8005f2c:	e055      	b.n	8005fda <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005f2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f30:	6859      	ldr	r1, [r3, #4]
 8005f32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f34:	4613      	mov	r3, r2
 8005f36:	005b      	lsls	r3, r3, #1
 8005f38:	4413      	add	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	3348      	adds	r3, #72	@ 0x48
 8005f3e:	443b      	add	r3, r7
 8005f40:	3b3c      	subs	r3, #60	@ 0x3c
 8005f42:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f46:	895b      	ldrh	r3, [r3, #10]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	4413      	add	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	3348      	adds	r3, #72	@ 0x48
 8005f56:	443b      	add	r3, r7
 8005f58:	3b38      	subs	r3, #56	@ 0x38
 8005f5a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005f5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d011      	beq.n	8005f86 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005f62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f64:	1e5a      	subs	r2, r3, #1
 8005f66:	f107 000c 	add.w	r0, r7, #12
 8005f6a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	440b      	add	r3, r1
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	18c1      	adds	r1, r0, r3
 8005f76:	4613      	mov	r3, r2
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	4413      	add	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	3348      	adds	r3, #72	@ 0x48
 8005f80:	443b      	add	r3, r7
 8005f82:	3b34      	subs	r3, #52	@ 0x34
 8005f84:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d109      	bne.n	8005fa2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005f8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f90:	4613      	mov	r3, r2
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	4413      	add	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	3348      	adds	r3, #72	@ 0x48
 8005f9a:	443b      	add	r3, r7
 8005f9c:	3b34      	subs	r3, #52	@ 0x34
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005fa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1b6      	bne.n	8005f22 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	891b      	ldrh	r3, [r3, #8]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe4 <low_level_output+0xfc>)
 8005fbc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005fbe:	4a09      	ldr	r2, [pc, #36]	@ (8005fe4 <low_level_output+0xfc>)
 8005fc0:	f107 030c 	add.w	r3, r7, #12
 8005fc4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005fc6:	4a07      	ldr	r2, [pc, #28]	@ (8005fe4 <low_level_output+0xfc>)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005fcc:	2214      	movs	r2, #20
 8005fce:	4905      	ldr	r1, [pc, #20]	@ (8005fe4 <low_level_output+0xfc>)
 8005fd0:	4805      	ldr	r0, [pc, #20]	@ (8005fe8 <low_level_output+0x100>)
 8005fd2:	f7fc fb55 	bl	8002680 <HAL_ETH_Transmit>

  return errval;
 8005fd6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3748      	adds	r7, #72	@ 0x48
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	2000549c 	.word	0x2000549c
 8005fe8:	200053ec 	.word	0x200053ec

08005fec <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005ff8:	4b07      	ldr	r3, [pc, #28]	@ (8006018 <low_level_input+0x2c>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d105      	bne.n	800600c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006000:	f107 030c 	add.w	r3, r7, #12
 8006004:	4619      	mov	r1, r3
 8006006:	4805      	ldr	r0, [pc, #20]	@ (800601c <low_level_input+0x30>)
 8006008:	f7fc fbce 	bl	80027a8 <HAL_ETH_ReadData>
  }

  return p;
 800600c:	68fb      	ldr	r3, [r7, #12]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	200053e8 	.word	0x200053e8
 800601c:	200053ec 	.word	0x200053ec

08006020 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006028:	2300      	movs	r3, #0
 800602a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7ff ffdd 	bl	8005fec <low_level_input>
 8006032:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00a      	beq.n	8006050 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	4798      	blx	r3
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f001 fdba 	bl	8007bc4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1ea      	bne.n	800602c <ethernetif_input+0xc>
}
 8006056:	bf00      	nop
 8006058:	bf00      	nop
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d106      	bne.n	800607c <ethernetif_init+0x1c>
 800606e:	4b0e      	ldr	r3, [pc, #56]	@ (80060a8 <ethernetif_init+0x48>)
 8006070:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8006074:	490d      	ldr	r1, [pc, #52]	@ (80060ac <ethernetif_init+0x4c>)
 8006076:	480e      	ldr	r0, [pc, #56]	@ (80060b0 <ethernetif_init+0x50>)
 8006078:	f00a fb82 	bl	8010780 <printf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2273      	movs	r2, #115	@ 0x73
 8006080:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2274      	movs	r2, #116	@ 0x74
 8006088:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a09      	ldr	r2, [pc, #36]	@ (80060b4 <ethernetif_init+0x54>)
 8006090:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a08      	ldr	r2, [pc, #32]	@ (80060b8 <ethernetif_init+0x58>)
 8006096:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff fe85 	bl	8005da8 <low_level_init>

  return ERR_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	08015090 	.word	0x08015090
 80060ac:	080150ac 	.word	0x080150ac
 80060b0:	080150bc 	.word	0x080150bc
 80060b4:	0800e8d1 	.word	0x0800e8d1
 80060b8:	08005ee9 	.word	0x08005ee9

080060bc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80060c8:	68f9      	ldr	r1, [r7, #12]
 80060ca:	4807      	ldr	r0, [pc, #28]	@ (80060e8 <pbuf_free_custom+0x2c>)
 80060cc:	f000 fee0 	bl	8006e90 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80060d0:	4b06      	ldr	r3, [pc, #24]	@ (80060ec <pbuf_free_custom+0x30>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d102      	bne.n	80060de <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80060d8:	4b04      	ldr	r3, [pc, #16]	@ (80060ec <pbuf_free_custom+0x30>)
 80060da:	2200      	movs	r2, #0
 80060dc:	701a      	strb	r2, [r3, #0]
  }
}
 80060de:	bf00      	nop
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	08017a80 	.word	0x08017a80
 80060ec:	200053e8 	.word	0x200053e8

080060f0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80060f4:	f7fc f830 	bl	8002158 <HAL_GetTick>
 80060f8:	4603      	mov	r3, r0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	bd80      	pop	{r7, pc}
	...

08006100 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08e      	sub	sp, #56	@ 0x38
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006108:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	605a      	str	r2, [r3, #4]
 8006112:	609a      	str	r2, [r3, #8]
 8006114:	60da      	str	r2, [r3, #12]
 8006116:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a4e      	ldr	r2, [pc, #312]	@ (8006258 <HAL_ETH_MspInit+0x158>)
 800611e:	4293      	cmp	r3, r2
 8006120:	f040 8096 	bne.w	8006250 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006124:	4b4d      	ldr	r3, [pc, #308]	@ (800625c <HAL_ETH_MspInit+0x15c>)
 8006126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006128:	4a4c      	ldr	r2, [pc, #304]	@ (800625c <HAL_ETH_MspInit+0x15c>)
 800612a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800612e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006130:	4b4a      	ldr	r3, [pc, #296]	@ (800625c <HAL_ETH_MspInit+0x15c>)
 8006132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006138:	623b      	str	r3, [r7, #32]
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	4b47      	ldr	r3, [pc, #284]	@ (800625c <HAL_ETH_MspInit+0x15c>)
 800613e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006140:	4a46      	ldr	r2, [pc, #280]	@ (800625c <HAL_ETH_MspInit+0x15c>)
 8006142:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006146:	6313      	str	r3, [r2, #48]	@ 0x30
 8006148:	4b44      	ldr	r3, [pc, #272]	@ (800625c <HAL_ETH_MspInit+0x15c>)
 800614a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006150:	61fb      	str	r3, [r7, #28]
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	4b41      	ldr	r3, [pc, #260]	@ (800625c <HAL_ETH_MspInit+0x15c>)
 8006156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006158:	4a40      	ldr	r2, [pc, #256]	@ (800625c <HAL_ETH_MspInit+0x15c>)
 800615a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800615e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006160:	4b3e      	ldr	r3, [pc, #248]	@ (800625c <HAL_ETH_MspInit+0x15c>)
 8006162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006164:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006168:	61bb      	str	r3, [r7, #24]
 800616a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800616c:	4b3b      	ldr	r3, [pc, #236]	@ (800625c <HAL_ETH_MspInit+0x15c>)
 800616e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006170:	4a3a      	ldr	r2, [pc, #232]	@ (800625c <HAL_ETH_MspInit+0x15c>)
 8006172:	f043 0304 	orr.w	r3, r3, #4
 8006176:	6313      	str	r3, [r2, #48]	@ 0x30
 8006178:	4b38      	ldr	r3, [pc, #224]	@ (800625c <HAL_ETH_MspInit+0x15c>)
 800617a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	617b      	str	r3, [r7, #20]
 8006182:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006184:	4b35      	ldr	r3, [pc, #212]	@ (800625c <HAL_ETH_MspInit+0x15c>)
 8006186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006188:	4a34      	ldr	r2, [pc, #208]	@ (800625c <HAL_ETH_MspInit+0x15c>)
 800618a:	f043 0301 	orr.w	r3, r3, #1
 800618e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006190:	4b32      	ldr	r3, [pc, #200]	@ (800625c <HAL_ETH_MspInit+0x15c>)
 8006192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	613b      	str	r3, [r7, #16]
 800619a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800619c:	4b2f      	ldr	r3, [pc, #188]	@ (800625c <HAL_ETH_MspInit+0x15c>)
 800619e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a0:	4a2e      	ldr	r2, [pc, #184]	@ (800625c <HAL_ETH_MspInit+0x15c>)
 80061a2:	f043 0302 	orr.w	r3, r3, #2
 80061a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80061a8:	4b2c      	ldr	r3, [pc, #176]	@ (800625c <HAL_ETH_MspInit+0x15c>)
 80061aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ac:	f003 0302 	and.w	r3, r3, #2
 80061b0:	60fb      	str	r3, [r7, #12]
 80061b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80061b4:	4b29      	ldr	r3, [pc, #164]	@ (800625c <HAL_ETH_MspInit+0x15c>)
 80061b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b8:	4a28      	ldr	r2, [pc, #160]	@ (800625c <HAL_ETH_MspInit+0x15c>)
 80061ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061be:	6313      	str	r3, [r2, #48]	@ 0x30
 80061c0:	4b26      	ldr	r3, [pc, #152]	@ (800625c <HAL_ETH_MspInit+0x15c>)
 80061c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c8:	60bb      	str	r3, [r7, #8]
 80061ca:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80061cc:	2332      	movs	r3, #50	@ 0x32
 80061ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061d0:	2302      	movs	r3, #2
 80061d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061d4:	2300      	movs	r3, #0
 80061d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061d8:	2303      	movs	r3, #3
 80061da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80061dc:	230b      	movs	r3, #11
 80061de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061e4:	4619      	mov	r1, r3
 80061e6:	481e      	ldr	r0, [pc, #120]	@ (8006260 <HAL_ETH_MspInit+0x160>)
 80061e8:	f7fd fa2a 	bl	8003640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80061ec:	2386      	movs	r3, #134	@ 0x86
 80061ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061f0:	2302      	movs	r3, #2
 80061f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061f4:	2300      	movs	r3, #0
 80061f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061f8:	2303      	movs	r3, #3
 80061fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80061fc:	230b      	movs	r3, #11
 80061fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006200:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006204:	4619      	mov	r1, r3
 8006206:	4817      	ldr	r0, [pc, #92]	@ (8006264 <HAL_ETH_MspInit+0x164>)
 8006208:	f7fd fa1a 	bl	8003640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800620c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006210:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006212:	2302      	movs	r3, #2
 8006214:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006216:	2300      	movs	r3, #0
 8006218:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800621a:	2303      	movs	r3, #3
 800621c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800621e:	230b      	movs	r3, #11
 8006220:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006222:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006226:	4619      	mov	r1, r3
 8006228:	480f      	ldr	r0, [pc, #60]	@ (8006268 <HAL_ETH_MspInit+0x168>)
 800622a:	f7fd fa09 	bl	8003640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800622e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006232:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006234:	2302      	movs	r3, #2
 8006236:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006238:	2300      	movs	r3, #0
 800623a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800623c:	2303      	movs	r3, #3
 800623e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006240:	230b      	movs	r3, #11
 8006242:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006244:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006248:	4619      	mov	r1, r3
 800624a:	4808      	ldr	r0, [pc, #32]	@ (800626c <HAL_ETH_MspInit+0x16c>)
 800624c:	f7fd f9f8 	bl	8003640 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006250:	bf00      	nop
 8006252:	3738      	adds	r7, #56	@ 0x38
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	40028000 	.word	0x40028000
 800625c:	40023800 	.word	0x40023800
 8006260:	40020800 	.word	0x40020800
 8006264:	40020000 	.word	0x40020000
 8006268:	40020400 	.word	0x40020400
 800626c:	40021800 	.word	0x40021800

08006270 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006274:	4802      	ldr	r0, [pc, #8]	@ (8006280 <ETH_PHY_IO_Init+0x10>)
 8006276:	f7fc fd81 	bl	8002d7c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	bd80      	pop	{r7, pc}
 8006280:	200053ec 	.word	0x200053ec

08006284 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
  return 0;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	68f9      	ldr	r1, [r7, #12]
 80062a6:	4807      	ldr	r0, [pc, #28]	@ (80062c4 <ETH_PHY_IO_ReadReg+0x30>)
 80062a8:	f7fc fbc2 	bl	8002a30 <HAL_ETH_ReadPHYRegister>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80062b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80062b6:	e000      	b.n	80062ba <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	200053ec 	.word	0x200053ec

080062c8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	68f9      	ldr	r1, [r7, #12]
 80062da:	4807      	ldr	r0, [pc, #28]	@ (80062f8 <ETH_PHY_IO_WriteReg+0x30>)
 80062dc:	f7fc fbf3 	bl	8002ac6 <HAL_ETH_WritePHYRegister>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80062e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80062ea:	e000      	b.n	80062ee <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	200053ec 	.word	0x200053ec

080062fc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006300:	f7fb ff2a 	bl	8002158 <HAL_GetTick>
 8006304:	4603      	mov	r3, r0
}
 8006306:	4618      	mov	r0, r3
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b0a0      	sub	sp, #128	@ 0x80
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006314:	f107 030c 	add.w	r3, r7, #12
 8006318:	2264      	movs	r2, #100	@ 0x64
 800631a:	2100      	movs	r1, #0
 800631c:	4618      	mov	r0, r3
 800631e:	f00a faae 	bl	801087e <memset>
  int32_t PHYLinkState = 0;
 8006322:	2300      	movs	r3, #0
 8006324:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800632a:	2300      	movs	r3, #0
 800632c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800632e:	2300      	movs	r3, #0
 8006330:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006332:	483a      	ldr	r0, [pc, #232]	@ (800641c <ethernet_link_check_state+0x110>)
 8006334:	f7fb fe38 	bl	8001fa8 <LAN8742_GetLinkState>
 8006338:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006340:	089b      	lsrs	r3, r3, #2
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00c      	beq.n	8006366 <ethernet_link_check_state+0x5a>
 800634c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800634e:	2b01      	cmp	r3, #1
 8006350:	dc09      	bgt.n	8006366 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8006352:	4833      	ldr	r0, [pc, #204]	@ (8006420 <ethernet_link_check_state+0x114>)
 8006354:	f7fc f93b 	bl	80025ce <HAL_ETH_Stop>
    netif_set_down(netif);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f001 f81d 	bl	8007398 <netif_set_down>
    netif_set_link_down(netif);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f001 f880 	bl	8007464 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8006364:	e055      	b.n	8006412 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b00      	cmp	r3, #0
 8006372:	d14e      	bne.n	8006412 <ethernet_link_check_state+0x106>
 8006374:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006376:	2b01      	cmp	r3, #1
 8006378:	dd4b      	ble.n	8006412 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800637a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800637c:	3b02      	subs	r3, #2
 800637e:	2b03      	cmp	r3, #3
 8006380:	d82a      	bhi.n	80063d8 <ethernet_link_check_state+0xcc>
 8006382:	a201      	add	r2, pc, #4	@ (adr r2, 8006388 <ethernet_link_check_state+0x7c>)
 8006384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006388:	08006399 	.word	0x08006399
 800638c:	080063ab 	.word	0x080063ab
 8006390:	080063bb 	.word	0x080063bb
 8006394:	080063cb 	.word	0x080063cb
      duplex = ETH_FULLDUPLEX_MODE;
 8006398:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800639c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800639e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80063a2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80063a4:	2301      	movs	r3, #1
 80063a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80063a8:	e017      	b.n	80063da <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80063aa:	2300      	movs	r3, #0
 80063ac:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80063ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80063b2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80063b4:	2301      	movs	r3, #1
 80063b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80063b8:	e00f      	b.n	80063da <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80063ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80063be:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80063c0:	2300      	movs	r3, #0
 80063c2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80063c4:	2301      	movs	r3, #1
 80063c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80063c8:	e007      	b.n	80063da <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80063ca:	2300      	movs	r3, #0
 80063cc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80063ce:	2300      	movs	r3, #0
 80063d0:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80063d2:	2301      	movs	r3, #1
 80063d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80063d6:	e000      	b.n	80063da <ethernet_link_check_state+0xce>
      break;
 80063d8:	bf00      	nop
    if(linkchanged)
 80063da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d018      	beq.n	8006412 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80063e0:	f107 030c 	add.w	r3, r7, #12
 80063e4:	4619      	mov	r1, r3
 80063e6:	480e      	ldr	r0, [pc, #56]	@ (8006420 <ethernet_link_check_state+0x114>)
 80063e8:	f7fc fbb6 	bl	8002b58 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80063ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063ee:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 80063f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063f2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80063f4:	f107 030c 	add.w	r3, r7, #12
 80063f8:	4619      	mov	r1, r3
 80063fa:	4809      	ldr	r0, [pc, #36]	@ (8006420 <ethernet_link_check_state+0x114>)
 80063fc:	f7fc fca3 	bl	8002d46 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8006400:	4807      	ldr	r0, [pc, #28]	@ (8006420 <ethernet_link_check_state+0x114>)
 8006402:	f7fc f885 	bl	8002510 <HAL_ETH_Start>
      netif_set_up(netif);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 ff5a 	bl	80072c0 <netif_set_up>
      netif_set_link_up(netif);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fff5 	bl	80073fc <netif_set_link_up>
}
 8006412:	bf00      	nop
 8006414:	3780      	adds	r7, #128	@ 0x80
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	200054d4 	.word	0x200054d4
 8006420:	200053ec 	.word	0x200053ec

08006424 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af02      	add	r7, sp, #8
 800642a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800642c:	4812      	ldr	r0, [pc, #72]	@ (8006478 <HAL_ETH_RxAllocateCallback+0x54>)
 800642e:	f000 fcc1 	bl	8006db4 <memp_malloc_pool>
 8006432:	60f8      	str	r0, [r7, #12]
  if (p)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d014      	beq.n	8006464 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f103 0220 	add.w	r2, r3, #32
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4a0d      	ldr	r2, [pc, #52]	@ (800647c <HAL_ETH_RxAllocateCallback+0x58>)
 8006448:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006452:	9201      	str	r2, [sp, #4]
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2241      	movs	r2, #65	@ 0x41
 800645a:	2100      	movs	r1, #0
 800645c:	2000      	movs	r0, #0
 800645e:	f001 f9f7 	bl	8007850 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006462:	e005      	b.n	8006470 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006464:	4b06      	ldr	r3, [pc, #24]	@ (8006480 <HAL_ETH_RxAllocateCallback+0x5c>)
 8006466:	2201      	movs	r2, #1
 8006468:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]
}
 8006470:	bf00      	nop
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	08017a80 	.word	0x08017a80
 800647c:	080060bd 	.word	0x080060bd
 8006480:	200053e8 	.word	0x200053e8

08006484 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
 8006490:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800649a:	2300      	movs	r3, #0
 800649c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	3b20      	subs	r3, #32
 80064a2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	2200      	movs	r2, #0
 80064a8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	2200      	movs	r2, #0
 80064ae:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	887a      	ldrh	r2, [r7, #2]
 80064b4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d103      	bne.n	80064c6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	e003      	b.n	80064ce <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69fa      	ldr	r2, [r7, #28]
 80064cc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	69fa      	ldr	r2, [r7, #28]
 80064d2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	61fb      	str	r3, [r7, #28]
 80064da:	e009      	b.n	80064f0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	891a      	ldrh	r2, [r3, #8]
 80064e0:	887b      	ldrh	r3, [r7, #2]
 80064e2:	4413      	add	r3, r2
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	61fb      	str	r3, [r7, #28]
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1f2      	bne.n	80064dc <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80064f6:	887b      	ldrh	r3, [r7, #2]
 80064f8:	4619      	mov	r1, r3
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7ff fc28 	bl	8005d50 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006500:	bf00      	nop
 8006502:	3720      	adds	r7, #32
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	4603      	mov	r3, r0
 8006510:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006512:	88fb      	ldrh	r3, [r7, #6]
 8006514:	021b      	lsls	r3, r3, #8
 8006516:	b21a      	sxth	r2, r3
 8006518:	88fb      	ldrh	r3, [r7, #6]
 800651a:	0a1b      	lsrs	r3, r3, #8
 800651c:	b29b      	uxth	r3, r3
 800651e:	b21b      	sxth	r3, r3
 8006520:	4313      	orrs	r3, r2
 8006522:	b21b      	sxth	r3, r3
 8006524:	b29b      	uxth	r3, r3
}
 8006526:	4618      	mov	r0, r3
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006532:	b480      	push	{r7}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	061a      	lsls	r2, r3, #24
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	021b      	lsls	r3, r3, #8
 8006542:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	0a1b      	lsrs	r3, r3, #8
 800654c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006550:	431a      	orrs	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	0e1b      	lsrs	r3, r3, #24
 8006556:	4313      	orrs	r3, r2
}
 8006558:	4618      	mov	r0, r3
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800656e:	f000 f8d5 	bl	800671c <mem_init>
  memp_init();
 8006572:	f000 fbdb 	bl	8006d2c <memp_init>
  pbuf_init();
  netif_init();
 8006576:	f000 fcd9 	bl	8006f2c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800657a:	f007 f8f5 	bl	800d768 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800657e:	f001 fe51 	bl	8008224 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006582:	f007 f867 	bl	800d654 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006586:	bf00      	nop
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	4603      	mov	r3, r0
 8006598:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800659a:	4b05      	ldr	r3, [pc, #20]	@ (80065b0 <ptr_to_mem+0x20>)
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	88fb      	ldrh	r3, [r7, #6]
 80065a0:	4413      	add	r3, r2
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	20005b60 	.word	0x20005b60

080065b4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80065bc:	4b05      	ldr	r3, [pc, #20]	@ (80065d4 <mem_to_ptr+0x20>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	b29b      	uxth	r3, r3
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	20005b60 	.word	0x20005b60

080065d8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80065d8:	b590      	push	{r4, r7, lr}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80065e0:	4b45      	ldr	r3, [pc, #276]	@ (80066f8 <plug_holes+0x120>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d206      	bcs.n	80065f8 <plug_holes+0x20>
 80065ea:	4b44      	ldr	r3, [pc, #272]	@ (80066fc <plug_holes+0x124>)
 80065ec:	f240 12df 	movw	r2, #479	@ 0x1df
 80065f0:	4943      	ldr	r1, [pc, #268]	@ (8006700 <plug_holes+0x128>)
 80065f2:	4844      	ldr	r0, [pc, #272]	@ (8006704 <plug_holes+0x12c>)
 80065f4:	f00a f8c4 	bl	8010780 <printf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80065f8:	4b43      	ldr	r3, [pc, #268]	@ (8006708 <plug_holes+0x130>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d306      	bcc.n	8006610 <plug_holes+0x38>
 8006602:	4b3e      	ldr	r3, [pc, #248]	@ (80066fc <plug_holes+0x124>)
 8006604:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006608:	4940      	ldr	r1, [pc, #256]	@ (800670c <plug_holes+0x134>)
 800660a:	483e      	ldr	r0, [pc, #248]	@ (8006704 <plug_holes+0x12c>)
 800660c:	f00a f8b8 	bl	8010780 <printf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	791b      	ldrb	r3, [r3, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d006      	beq.n	8006626 <plug_holes+0x4e>
 8006618:	4b38      	ldr	r3, [pc, #224]	@ (80066fc <plug_holes+0x124>)
 800661a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800661e:	493c      	ldr	r1, [pc, #240]	@ (8006710 <plug_holes+0x138>)
 8006620:	4838      	ldr	r0, [pc, #224]	@ (8006704 <plug_holes+0x12c>)
 8006622:	f00a f8ad 	bl	8010780 <printf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800662e:	d906      	bls.n	800663e <plug_holes+0x66>
 8006630:	4b32      	ldr	r3, [pc, #200]	@ (80066fc <plug_holes+0x124>)
 8006632:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8006636:	4937      	ldr	r1, [pc, #220]	@ (8006714 <plug_holes+0x13c>)
 8006638:	4832      	ldr	r0, [pc, #200]	@ (8006704 <plug_holes+0x12c>)
 800663a:	f00a f8a1 	bl	8010780 <printf>

  nmem = ptr_to_mem(mem->next);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	4618      	mov	r0, r3
 8006644:	f7ff ffa4 	bl	8006590 <ptr_to_mem>
 8006648:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	429a      	cmp	r2, r3
 8006650:	d024      	beq.n	800669c <plug_holes+0xc4>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	791b      	ldrb	r3, [r3, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d120      	bne.n	800669c <plug_holes+0xc4>
 800665a:	4b2b      	ldr	r3, [pc, #172]	@ (8006708 <plug_holes+0x130>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	429a      	cmp	r2, r3
 8006662:	d01b      	beq.n	800669c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006664:	4b2c      	ldr	r3, [pc, #176]	@ (8006718 <plug_holes+0x140>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	429a      	cmp	r2, r3
 800666c:	d102      	bne.n	8006674 <plug_holes+0x9c>
      lfree = mem;
 800666e:	4a2a      	ldr	r2, [pc, #168]	@ (8006718 <plug_holes+0x140>)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	881a      	ldrh	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006684:	d00a      	beq.n	800669c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	4618      	mov	r0, r3
 800668c:	f7ff ff80 	bl	8006590 <ptr_to_mem>
 8006690:	4604      	mov	r4, r0
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7ff ff8e 	bl	80065b4 <mem_to_ptr>
 8006698:	4603      	mov	r3, r0
 800669a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	885b      	ldrh	r3, [r3, #2]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff ff75 	bl	8006590 <ptr_to_mem>
 80066a6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d01f      	beq.n	80066f0 <plug_holes+0x118>
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	791b      	ldrb	r3, [r3, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d11b      	bne.n	80066f0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80066b8:	4b17      	ldr	r3, [pc, #92]	@ (8006718 <plug_holes+0x140>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d102      	bne.n	80066c8 <plug_holes+0xf0>
      lfree = pmem;
 80066c2:	4a15      	ldr	r2, [pc, #84]	@ (8006718 <plug_holes+0x140>)
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	881a      	ldrh	r2, [r3, #0]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80066d8:	d00a      	beq.n	80066f0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	4618      	mov	r0, r3
 80066e0:	f7ff ff56 	bl	8006590 <ptr_to_mem>
 80066e4:	4604      	mov	r4, r0
 80066e6:	68b8      	ldr	r0, [r7, #8]
 80066e8:	f7ff ff64 	bl	80065b4 <mem_to_ptr>
 80066ec:	4603      	mov	r3, r0
 80066ee:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80066f0:	bf00      	nop
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd90      	pop	{r4, r7, pc}
 80066f8:	20005b60 	.word	0x20005b60
 80066fc:	080150e4 	.word	0x080150e4
 8006700:	08015114 	.word	0x08015114
 8006704:	0801512c 	.word	0x0801512c
 8006708:	20005b64 	.word	0x20005b64
 800670c:	08015154 	.word	0x08015154
 8006710:	08015170 	.word	0x08015170
 8006714:	0801518c 	.word	0x0801518c
 8006718:	20005b68 	.word	0x20005b68

0800671c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006722:	4b18      	ldr	r3, [pc, #96]	@ (8006784 <mem_init+0x68>)
 8006724:	3303      	adds	r3, #3
 8006726:	f023 0303 	bic.w	r3, r3, #3
 800672a:	461a      	mov	r2, r3
 800672c:	4b16      	ldr	r3, [pc, #88]	@ (8006788 <mem_init+0x6c>)
 800672e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006730:	4b15      	ldr	r3, [pc, #84]	@ (8006788 <mem_init+0x6c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800673c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800674a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800674e:	f7ff ff1f 	bl	8006590 <ptr_to_mem>
 8006752:	4603      	mov	r3, r0
 8006754:	4a0d      	ldr	r2, [pc, #52]	@ (800678c <mem_init+0x70>)
 8006756:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006758:	4b0c      	ldr	r3, [pc, #48]	@ (800678c <mem_init+0x70>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2201      	movs	r2, #1
 800675e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006760:	4b0a      	ldr	r3, [pc, #40]	@ (800678c <mem_init+0x70>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8006768:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800676a:	4b08      	ldr	r3, [pc, #32]	@ (800678c <mem_init+0x70>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8006772:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006774:	4b04      	ldr	r3, [pc, #16]	@ (8006788 <mem_init+0x6c>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a05      	ldr	r2, [pc, #20]	@ (8006790 <mem_init+0x74>)
 800677a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800677c:	bf00      	nop
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	2000550c 	.word	0x2000550c
 8006788:	20005b60 	.word	0x20005b60
 800678c:	20005b64 	.word	0x20005b64
 8006790:	20005b68 	.word	0x20005b68

08006794 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f7ff ff09 	bl	80065b4 <mem_to_ptr>
 80067a2:	4603      	mov	r3, r0
 80067a4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff fef0 	bl	8006590 <ptr_to_mem>
 80067b0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	885b      	ldrh	r3, [r3, #2]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7ff feea 	bl	8006590 <ptr_to_mem>
 80067bc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80067c6:	d818      	bhi.n	80067fa <mem_link_valid+0x66>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	885b      	ldrh	r3, [r3, #2]
 80067cc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80067d0:	d813      	bhi.n	80067fa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80067d6:	8afa      	ldrh	r2, [r7, #22]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d004      	beq.n	80067e6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	8afa      	ldrh	r2, [r7, #22]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d109      	bne.n	80067fa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80067e6:	4b08      	ldr	r3, [pc, #32]	@ (8006808 <mem_link_valid+0x74>)
 80067e8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d006      	beq.n	80067fe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	885b      	ldrh	r3, [r3, #2]
 80067f4:	8afa      	ldrh	r2, [r7, #22]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d001      	beq.n	80067fe <mem_link_valid+0x6a>
    return 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	e000      	b.n	8006800 <mem_link_valid+0x6c>
  }
  return 1;
 80067fe:	2301      	movs	r3, #1
}
 8006800:	4618      	mov	r0, r3
 8006802:	3718      	adds	r7, #24
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	20005b64 	.word	0x20005b64

0800680c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d04c      	beq.n	80068b4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f003 0303 	and.w	r3, r3, #3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d007      	beq.n	8006834 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006824:	4b25      	ldr	r3, [pc, #148]	@ (80068bc <mem_free+0xb0>)
 8006826:	f240 2273 	movw	r2, #627	@ 0x273
 800682a:	4925      	ldr	r1, [pc, #148]	@ (80068c0 <mem_free+0xb4>)
 800682c:	4825      	ldr	r0, [pc, #148]	@ (80068c4 <mem_free+0xb8>)
 800682e:	f009 ffa7 	bl	8010780 <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006832:	e040      	b.n	80068b6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3b08      	subs	r3, #8
 8006838:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800683a:	4b23      	ldr	r3, [pc, #140]	@ (80068c8 <mem_free+0xbc>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	429a      	cmp	r2, r3
 8006842:	d306      	bcc.n	8006852 <mem_free+0x46>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f103 020c 	add.w	r2, r3, #12
 800684a:	4b20      	ldr	r3, [pc, #128]	@ (80068cc <mem_free+0xc0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	429a      	cmp	r2, r3
 8006850:	d907      	bls.n	8006862 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006852:	4b1a      	ldr	r3, [pc, #104]	@ (80068bc <mem_free+0xb0>)
 8006854:	f240 227f 	movw	r2, #639	@ 0x27f
 8006858:	491d      	ldr	r1, [pc, #116]	@ (80068d0 <mem_free+0xc4>)
 800685a:	481a      	ldr	r0, [pc, #104]	@ (80068c4 <mem_free+0xb8>)
 800685c:	f009 ff90 	bl	8010780 <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006860:	e029      	b.n	80068b6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	791b      	ldrb	r3, [r3, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d107      	bne.n	800687a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800686a:	4b14      	ldr	r3, [pc, #80]	@ (80068bc <mem_free+0xb0>)
 800686c:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8006870:	4918      	ldr	r1, [pc, #96]	@ (80068d4 <mem_free+0xc8>)
 8006872:	4814      	ldr	r0, [pc, #80]	@ (80068c4 <mem_free+0xb8>)
 8006874:	f009 ff84 	bl	8010780 <printf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006878:	e01d      	b.n	80068b6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f7ff ff8a 	bl	8006794 <mem_link_valid>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d107      	bne.n	8006896 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006886:	4b0d      	ldr	r3, [pc, #52]	@ (80068bc <mem_free+0xb0>)
 8006888:	f240 2295 	movw	r2, #661	@ 0x295
 800688c:	4912      	ldr	r1, [pc, #72]	@ (80068d8 <mem_free+0xcc>)
 800688e:	480d      	ldr	r0, [pc, #52]	@ (80068c4 <mem_free+0xb8>)
 8006890:	f009 ff76 	bl	8010780 <printf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006894:	e00f      	b.n	80068b6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800689c:	4b0f      	ldr	r3, [pc, #60]	@ (80068dc <mem_free+0xd0>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d202      	bcs.n	80068ac <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80068a6:	4a0d      	ldr	r2, [pc, #52]	@ (80068dc <mem_free+0xd0>)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f7ff fe93 	bl	80065d8 <plug_holes>
 80068b2:	e000      	b.n	80068b6 <mem_free+0xaa>
    return;
 80068b4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	080150e4 	.word	0x080150e4
 80068c0:	080151b8 	.word	0x080151b8
 80068c4:	0801512c 	.word	0x0801512c
 80068c8:	20005b60 	.word	0x20005b60
 80068cc:	20005b64 	.word	0x20005b64
 80068d0:	080151dc 	.word	0x080151dc
 80068d4:	080151f8 	.word	0x080151f8
 80068d8:	08015220 	.word	0x08015220
 80068dc:	20005b68 	.word	0x20005b68

080068e0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b088      	sub	sp, #32
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	460b      	mov	r3, r1
 80068ea:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80068ec:	887b      	ldrh	r3, [r7, #2]
 80068ee:	3303      	adds	r3, #3
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	f023 0303 	bic.w	r3, r3, #3
 80068f6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80068f8:	8bfb      	ldrh	r3, [r7, #30]
 80068fa:	2b0b      	cmp	r3, #11
 80068fc:	d801      	bhi.n	8006902 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80068fe:	230c      	movs	r3, #12
 8006900:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006902:	8bfb      	ldrh	r3, [r7, #30]
 8006904:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006908:	d803      	bhi.n	8006912 <mem_trim+0x32>
 800690a:	8bfa      	ldrh	r2, [r7, #30]
 800690c:	887b      	ldrh	r3, [r7, #2]
 800690e:	429a      	cmp	r2, r3
 8006910:	d201      	bcs.n	8006916 <mem_trim+0x36>
    return NULL;
 8006912:	2300      	movs	r3, #0
 8006914:	e0cc      	b.n	8006ab0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006916:	4b68      	ldr	r3, [pc, #416]	@ (8006ab8 <mem_trim+0x1d8>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	429a      	cmp	r2, r3
 800691e:	d304      	bcc.n	800692a <mem_trim+0x4a>
 8006920:	4b66      	ldr	r3, [pc, #408]	@ (8006abc <mem_trim+0x1dc>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	429a      	cmp	r2, r3
 8006928:	d306      	bcc.n	8006938 <mem_trim+0x58>
 800692a:	4b65      	ldr	r3, [pc, #404]	@ (8006ac0 <mem_trim+0x1e0>)
 800692c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8006930:	4964      	ldr	r1, [pc, #400]	@ (8006ac4 <mem_trim+0x1e4>)
 8006932:	4865      	ldr	r0, [pc, #404]	@ (8006ac8 <mem_trim+0x1e8>)
 8006934:	f009 ff24 	bl	8010780 <printf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006938:	4b5f      	ldr	r3, [pc, #380]	@ (8006ab8 <mem_trim+0x1d8>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	429a      	cmp	r2, r3
 8006940:	d304      	bcc.n	800694c <mem_trim+0x6c>
 8006942:	4b5e      	ldr	r3, [pc, #376]	@ (8006abc <mem_trim+0x1dc>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	429a      	cmp	r2, r3
 800694a:	d301      	bcc.n	8006950 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	e0af      	b.n	8006ab0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3b08      	subs	r3, #8
 8006954:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006956:	69b8      	ldr	r0, [r7, #24]
 8006958:	f7ff fe2c 	bl	80065b4 <mem_to_ptr>
 800695c:	4603      	mov	r3, r0
 800695e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	881a      	ldrh	r2, [r3, #0]
 8006964:	8afb      	ldrh	r3, [r7, #22]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	b29b      	uxth	r3, r3
 800696a:	3b08      	subs	r3, #8
 800696c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800696e:	8bfa      	ldrh	r2, [r7, #30]
 8006970:	8abb      	ldrh	r3, [r7, #20]
 8006972:	429a      	cmp	r2, r3
 8006974:	d906      	bls.n	8006984 <mem_trim+0xa4>
 8006976:	4b52      	ldr	r3, [pc, #328]	@ (8006ac0 <mem_trim+0x1e0>)
 8006978:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800697c:	4953      	ldr	r1, [pc, #332]	@ (8006acc <mem_trim+0x1ec>)
 800697e:	4852      	ldr	r0, [pc, #328]	@ (8006ac8 <mem_trim+0x1e8>)
 8006980:	f009 fefe 	bl	8010780 <printf>
  if (newsize > size) {
 8006984:	8bfa      	ldrh	r2, [r7, #30]
 8006986:	8abb      	ldrh	r3, [r7, #20]
 8006988:	429a      	cmp	r2, r3
 800698a:	d901      	bls.n	8006990 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800698c:	2300      	movs	r3, #0
 800698e:	e08f      	b.n	8006ab0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006990:	8bfa      	ldrh	r2, [r7, #30]
 8006992:	8abb      	ldrh	r3, [r7, #20]
 8006994:	429a      	cmp	r2, r3
 8006996:	d101      	bne.n	800699c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	e089      	b.n	8006ab0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff fdf5 	bl	8006590 <ptr_to_mem>
 80069a6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	791b      	ldrb	r3, [r3, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d13f      	bne.n	8006a30 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80069b8:	d106      	bne.n	80069c8 <mem_trim+0xe8>
 80069ba:	4b41      	ldr	r3, [pc, #260]	@ (8006ac0 <mem_trim+0x1e0>)
 80069bc:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80069c0:	4943      	ldr	r1, [pc, #268]	@ (8006ad0 <mem_trim+0x1f0>)
 80069c2:	4841      	ldr	r0, [pc, #260]	@ (8006ac8 <mem_trim+0x1e8>)
 80069c4:	f009 fedc 	bl	8010780 <printf>
    /* remember the old next pointer */
    next = mem2->next;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80069ce:	8afa      	ldrh	r2, [r7, #22]
 80069d0:	8bfb      	ldrh	r3, [r7, #30]
 80069d2:	4413      	add	r3, r2
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	3308      	adds	r3, #8
 80069d8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80069da:	4b3e      	ldr	r3, [pc, #248]	@ (8006ad4 <mem_trim+0x1f4>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d106      	bne.n	80069f2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80069e4:	89fb      	ldrh	r3, [r7, #14]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff fdd2 	bl	8006590 <ptr_to_mem>
 80069ec:	4603      	mov	r3, r0
 80069ee:	4a39      	ldr	r2, [pc, #228]	@ (8006ad4 <mem_trim+0x1f4>)
 80069f0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80069f2:	89fb      	ldrh	r3, [r7, #14]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7ff fdcb 	bl	8006590 <ptr_to_mem>
 80069fa:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	2200      	movs	r2, #0
 8006a00:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	89ba      	ldrh	r2, [r7, #12]
 8006a06:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	8afa      	ldrh	r2, [r7, #22]
 8006a0c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	89fa      	ldrh	r2, [r7, #14]
 8006a12:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006a1c:	d047      	beq.n	8006aae <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7ff fdb4 	bl	8006590 <ptr_to_mem>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	89fb      	ldrh	r3, [r7, #14]
 8006a2c:	8053      	strh	r3, [r2, #2]
 8006a2e:	e03e      	b.n	8006aae <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006a30:	8bfb      	ldrh	r3, [r7, #30]
 8006a32:	f103 0214 	add.w	r2, r3, #20
 8006a36:	8abb      	ldrh	r3, [r7, #20]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d838      	bhi.n	8006aae <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006a3c:	8afa      	ldrh	r2, [r7, #22]
 8006a3e:	8bfb      	ldrh	r3, [r7, #30]
 8006a40:	4413      	add	r3, r2
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	3308      	adds	r3, #8
 8006a46:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006a50:	d106      	bne.n	8006a60 <mem_trim+0x180>
 8006a52:	4b1b      	ldr	r3, [pc, #108]	@ (8006ac0 <mem_trim+0x1e0>)
 8006a54:	f240 3216 	movw	r2, #790	@ 0x316
 8006a58:	491d      	ldr	r1, [pc, #116]	@ (8006ad0 <mem_trim+0x1f0>)
 8006a5a:	481b      	ldr	r0, [pc, #108]	@ (8006ac8 <mem_trim+0x1e8>)
 8006a5c:	f009 fe90 	bl	8010780 <printf>
    mem2 = ptr_to_mem(ptr2);
 8006a60:	89fb      	ldrh	r3, [r7, #14]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7ff fd94 	bl	8006590 <ptr_to_mem>
 8006a68:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ad4 <mem_trim+0x1f4>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d202      	bcs.n	8006a7a <mem_trim+0x19a>
      lfree = mem2;
 8006a74:	4a17      	ldr	r2, [pc, #92]	@ (8006ad4 <mem_trim+0x1f4>)
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	881a      	ldrh	r2, [r3, #0]
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	8afa      	ldrh	r2, [r7, #22]
 8006a8c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	89fa      	ldrh	r2, [r7, #14]
 8006a92:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006a9c:	d007      	beq.n	8006aae <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7ff fd74 	bl	8006590 <ptr_to_mem>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	89fb      	ldrh	r3, [r7, #14]
 8006aac:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006aae:	687b      	ldr	r3, [r7, #4]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3720      	adds	r7, #32
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	20005b60 	.word	0x20005b60
 8006abc:	20005b64 	.word	0x20005b64
 8006ac0:	080150e4 	.word	0x080150e4
 8006ac4:	08015254 	.word	0x08015254
 8006ac8:	0801512c 	.word	0x0801512c
 8006acc:	0801526c 	.word	0x0801526c
 8006ad0:	0801528c 	.word	0x0801528c
 8006ad4:	20005b68 	.word	0x20005b68

08006ad8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b088      	sub	sp, #32
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	4603      	mov	r3, r0
 8006ae0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006ae2:	88fb      	ldrh	r3, [r7, #6]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <mem_malloc+0x14>
    return NULL;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	e0d9      	b.n	8006ca0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006aec:	88fb      	ldrh	r3, [r7, #6]
 8006aee:	3303      	adds	r3, #3
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	f023 0303 	bic.w	r3, r3, #3
 8006af6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006af8:	8bbb      	ldrh	r3, [r7, #28]
 8006afa:	2b0b      	cmp	r3, #11
 8006afc:	d801      	bhi.n	8006b02 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006afe:	230c      	movs	r3, #12
 8006b00:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006b02:	8bbb      	ldrh	r3, [r7, #28]
 8006b04:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006b08:	d803      	bhi.n	8006b12 <mem_malloc+0x3a>
 8006b0a:	8bba      	ldrh	r2, [r7, #28]
 8006b0c:	88fb      	ldrh	r3, [r7, #6]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d201      	bcs.n	8006b16 <mem_malloc+0x3e>
    return NULL;
 8006b12:	2300      	movs	r3, #0
 8006b14:	e0c4      	b.n	8006ca0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006b16:	4b64      	ldr	r3, [pc, #400]	@ (8006ca8 <mem_malloc+0x1d0>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff fd4a 	bl	80065b4 <mem_to_ptr>
 8006b20:	4603      	mov	r3, r0
 8006b22:	83fb      	strh	r3, [r7, #30]
 8006b24:	e0b4      	b.n	8006c90 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006b26:	8bfb      	ldrh	r3, [r7, #30]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7ff fd31 	bl	8006590 <ptr_to_mem>
 8006b2e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	791b      	ldrb	r3, [r3, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f040 80a4 	bne.w	8006c82 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	8bfb      	ldrh	r3, [r7, #30]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	f1a3 0208 	sub.w	r2, r3, #8
 8006b48:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	f0c0 8099 	bcc.w	8006c82 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	461a      	mov	r2, r3
 8006b56:	8bfb      	ldrh	r3, [r7, #30]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	f1a3 0208 	sub.w	r2, r3, #8
 8006b5e:	8bbb      	ldrh	r3, [r7, #28]
 8006b60:	3314      	adds	r3, #20
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d333      	bcc.n	8006bce <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006b66:	8bfa      	ldrh	r2, [r7, #30]
 8006b68:	8bbb      	ldrh	r3, [r7, #28]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	3308      	adds	r3, #8
 8006b70:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006b72:	8a7b      	ldrh	r3, [r7, #18]
 8006b74:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006b78:	d106      	bne.n	8006b88 <mem_malloc+0xb0>
 8006b7a:	4b4c      	ldr	r3, [pc, #304]	@ (8006cac <mem_malloc+0x1d4>)
 8006b7c:	f240 3287 	movw	r2, #903	@ 0x387
 8006b80:	494b      	ldr	r1, [pc, #300]	@ (8006cb0 <mem_malloc+0x1d8>)
 8006b82:	484c      	ldr	r0, [pc, #304]	@ (8006cb4 <mem_malloc+0x1dc>)
 8006b84:	f009 fdfc 	bl	8010780 <printf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006b88:	8a7b      	ldrh	r3, [r7, #18]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7ff fd00 	bl	8006590 <ptr_to_mem>
 8006b90:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	881a      	ldrh	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8bfa      	ldrh	r2, [r7, #30]
 8006ba4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	8a7a      	ldrh	r2, [r7, #18]
 8006baa:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006bba:	d00b      	beq.n	8006bd4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7ff fce5 	bl	8006590 <ptr_to_mem>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	8a7b      	ldrh	r3, [r7, #18]
 8006bca:	8053      	strh	r3, [r2, #2]
 8006bcc:	e002      	b.n	8006bd4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006bd4:	4b34      	ldr	r3, [pc, #208]	@ (8006ca8 <mem_malloc+0x1d0>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d127      	bne.n	8006c2e <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006bde:	4b32      	ldr	r3, [pc, #200]	@ (8006ca8 <mem_malloc+0x1d0>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006be4:	e005      	b.n	8006bf2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7ff fcd0 	bl	8006590 <ptr_to_mem>
 8006bf0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	791b      	ldrb	r3, [r3, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d004      	beq.n	8006c04 <mem_malloc+0x12c>
 8006bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8006cb8 <mem_malloc+0x1e0>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d1f0      	bne.n	8006be6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006c04:	4a28      	ldr	r2, [pc, #160]	@ (8006ca8 <mem_malloc+0x1d0>)
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006c0a:	4b27      	ldr	r3, [pc, #156]	@ (8006ca8 <mem_malloc+0x1d0>)
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8006cb8 <mem_malloc+0x1e0>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d00b      	beq.n	8006c2e <mem_malloc+0x156>
 8006c16:	4b24      	ldr	r3, [pc, #144]	@ (8006ca8 <mem_malloc+0x1d0>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	791b      	ldrb	r3, [r3, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d006      	beq.n	8006c2e <mem_malloc+0x156>
 8006c20:	4b22      	ldr	r3, [pc, #136]	@ (8006cac <mem_malloc+0x1d4>)
 8006c22:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8006c26:	4925      	ldr	r1, [pc, #148]	@ (8006cbc <mem_malloc+0x1e4>)
 8006c28:	4822      	ldr	r0, [pc, #136]	@ (8006cb4 <mem_malloc+0x1dc>)
 8006c2a:	f009 fda9 	bl	8010780 <printf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006c2e:	8bba      	ldrh	r2, [r7, #28]
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	4413      	add	r3, r2
 8006c34:	3308      	adds	r3, #8
 8006c36:	4a20      	ldr	r2, [pc, #128]	@ (8006cb8 <mem_malloc+0x1e0>)
 8006c38:	6812      	ldr	r2, [r2, #0]
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d906      	bls.n	8006c4c <mem_malloc+0x174>
 8006c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8006cac <mem_malloc+0x1d4>)
 8006c40:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8006c44:	491e      	ldr	r1, [pc, #120]	@ (8006cc0 <mem_malloc+0x1e8>)
 8006c46:	481b      	ldr	r0, [pc, #108]	@ (8006cb4 <mem_malloc+0x1dc>)
 8006c48:	f009 fd9a 	bl	8010780 <printf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f003 0303 	and.w	r3, r3, #3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d006      	beq.n	8006c64 <mem_malloc+0x18c>
 8006c56:	4b15      	ldr	r3, [pc, #84]	@ (8006cac <mem_malloc+0x1d4>)
 8006c58:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8006c5c:	4919      	ldr	r1, [pc, #100]	@ (8006cc4 <mem_malloc+0x1ec>)
 8006c5e:	4815      	ldr	r0, [pc, #84]	@ (8006cb4 <mem_malloc+0x1dc>)
 8006c60:	f009 fd8e 	bl	8010780 <printf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f003 0303 	and.w	r3, r3, #3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d006      	beq.n	8006c7c <mem_malloc+0x1a4>
 8006c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8006cac <mem_malloc+0x1d4>)
 8006c70:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8006c74:	4914      	ldr	r1, [pc, #80]	@ (8006cc8 <mem_malloc+0x1f0>)
 8006c76:	480f      	ldr	r0, [pc, #60]	@ (8006cb4 <mem_malloc+0x1dc>)
 8006c78:	f009 fd82 	bl	8010780 <printf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	3308      	adds	r3, #8
 8006c80:	e00e      	b.n	8006ca0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006c82:	8bfb      	ldrh	r3, [r7, #30]
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7ff fc83 	bl	8006590 <ptr_to_mem>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006c90:	8bfa      	ldrh	r2, [r7, #30]
 8006c92:	8bbb      	ldrh	r3, [r7, #28]
 8006c94:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	f4ff af44 	bcc.w	8006b26 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3720      	adds	r7, #32
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	20005b68 	.word	0x20005b68
 8006cac:	080150e4 	.word	0x080150e4
 8006cb0:	0801528c 	.word	0x0801528c
 8006cb4:	0801512c 	.word	0x0801512c
 8006cb8:	20005b64 	.word	0x20005b64
 8006cbc:	080152a0 	.word	0x080152a0
 8006cc0:	080152bc 	.word	0x080152bc
 8006cc4:	080152ec 	.word	0x080152ec
 8006cc8:	0801531c 	.word	0x0801531c

08006ccc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	3303      	adds	r3, #3
 8006ce2:	f023 0303 	bic.w	r3, r3, #3
 8006ce6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006ce8:	2300      	movs	r3, #0
 8006cea:	60fb      	str	r3, [r7, #12]
 8006cec:	e011      	b.n	8006d12 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	461a      	mov	r2, r3
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	4413      	add	r3, r2
 8006d0a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	885b      	ldrh	r3, [r3, #2]
 8006d16:	461a      	mov	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	dbe7      	blt.n	8006cee <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006d1e:	bf00      	nop
 8006d20:	bf00      	nop
 8006d22:	3714      	adds	r7, #20
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006d32:	2300      	movs	r3, #0
 8006d34:	80fb      	strh	r3, [r7, #6]
 8006d36:	e009      	b.n	8006d4c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006d38:	88fb      	ldrh	r3, [r7, #6]
 8006d3a:	4a08      	ldr	r2, [pc, #32]	@ (8006d5c <memp_init+0x30>)
 8006d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff ffc3 	bl	8006ccc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	80fb      	strh	r3, [r7, #6]
 8006d4c:	88fb      	ldrh	r3, [r7, #6]
 8006d4e:	2b08      	cmp	r3, #8
 8006d50:	d9f2      	bls.n	8006d38 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006d52:	bf00      	nop
 8006d54:	bf00      	nop
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	08017af8 	.word	0x08017af8

08006d60 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d012      	beq.n	8006d9c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	6812      	ldr	r2, [r2, #0]
 8006d7e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f003 0303 	and.w	r3, r3, #3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d006      	beq.n	8006d98 <do_memp_malloc_pool+0x38>
 8006d8a:	4b07      	ldr	r3, [pc, #28]	@ (8006da8 <do_memp_malloc_pool+0x48>)
 8006d8c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8006d90:	4906      	ldr	r1, [pc, #24]	@ (8006dac <do_memp_malloc_pool+0x4c>)
 8006d92:	4807      	ldr	r0, [pc, #28]	@ (8006db0 <do_memp_malloc_pool+0x50>)
 8006d94:	f009 fcf4 	bl	8010780 <printf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	e000      	b.n	8006d9e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	08015340 	.word	0x08015340
 8006dac:	08015370 	.word	0x08015370
 8006db0:	08015394 	.word	0x08015394

08006db4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d106      	bne.n	8006dd0 <memp_malloc_pool+0x1c>
 8006dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8006dec <memp_malloc_pool+0x38>)
 8006dc4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8006dc8:	4909      	ldr	r1, [pc, #36]	@ (8006df0 <memp_malloc_pool+0x3c>)
 8006dca:	480a      	ldr	r0, [pc, #40]	@ (8006df4 <memp_malloc_pool+0x40>)
 8006dcc:	f009 fcd8 	bl	8010780 <printf>
  if (desc == NULL) {
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <memp_malloc_pool+0x26>
    return NULL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e003      	b.n	8006de2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7ff ffc0 	bl	8006d60 <do_memp_malloc_pool>
 8006de0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	08015340 	.word	0x08015340
 8006df0:	080153bc 	.word	0x080153bc
 8006df4:	08015394 	.word	0x08015394

08006df8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	4603      	mov	r3, r0
 8006e00:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006e02:	79fb      	ldrb	r3, [r7, #7]
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	d908      	bls.n	8006e1a <memp_malloc+0x22>
 8006e08:	4b0a      	ldr	r3, [pc, #40]	@ (8006e34 <memp_malloc+0x3c>)
 8006e0a:	f240 1257 	movw	r2, #343	@ 0x157
 8006e0e:	490a      	ldr	r1, [pc, #40]	@ (8006e38 <memp_malloc+0x40>)
 8006e10:	480a      	ldr	r0, [pc, #40]	@ (8006e3c <memp_malloc+0x44>)
 8006e12:	f009 fcb5 	bl	8010780 <printf>
 8006e16:	2300      	movs	r3, #0
 8006e18:	e008      	b.n	8006e2c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006e1a:	79fb      	ldrb	r3, [r7, #7]
 8006e1c:	4a08      	ldr	r2, [pc, #32]	@ (8006e40 <memp_malloc+0x48>)
 8006e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7ff ff9c 	bl	8006d60 <do_memp_malloc_pool>
 8006e28:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	08015340 	.word	0x08015340
 8006e38:	080153d0 	.word	0x080153d0
 8006e3c:	08015394 	.word	0x08015394
 8006e40:	08017af8 	.word	0x08017af8

08006e44 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	f003 0303 	and.w	r3, r3, #3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d006      	beq.n	8006e66 <do_memp_free_pool+0x22>
 8006e58:	4b0a      	ldr	r3, [pc, #40]	@ (8006e84 <do_memp_free_pool+0x40>)
 8006e5a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8006e5e:	490a      	ldr	r1, [pc, #40]	@ (8006e88 <do_memp_free_pool+0x44>)
 8006e60:	480a      	ldr	r0, [pc, #40]	@ (8006e8c <do_memp_free_pool+0x48>)
 8006e62:	f009 fc8d 	bl	8010780 <printf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006e7c:	bf00      	nop
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	08015340 	.word	0x08015340
 8006e88:	080153f0 	.word	0x080153f0
 8006e8c:	08015394 	.word	0x08015394

08006e90 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d106      	bne.n	8006eae <memp_free_pool+0x1e>
 8006ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8006ecc <memp_free_pool+0x3c>)
 8006ea2:	f240 1295 	movw	r2, #405	@ 0x195
 8006ea6:	490a      	ldr	r1, [pc, #40]	@ (8006ed0 <memp_free_pool+0x40>)
 8006ea8:	480a      	ldr	r0, [pc, #40]	@ (8006ed4 <memp_free_pool+0x44>)
 8006eaa:	f009 fc69 	bl	8010780 <printf>
  if ((desc == NULL) || (mem == NULL)) {
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d007      	beq.n	8006ec4 <memp_free_pool+0x34>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d004      	beq.n	8006ec4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7ff ffc1 	bl	8006e44 <do_memp_free_pool>
 8006ec2:	e000      	b.n	8006ec6 <memp_free_pool+0x36>
    return;
 8006ec4:	bf00      	nop
}
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	08015340 	.word	0x08015340
 8006ed0:	080153bc 	.word	0x080153bc
 8006ed4:	08015394 	.word	0x08015394

08006ed8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	4603      	mov	r3, r0
 8006ee0:	6039      	str	r1, [r7, #0]
 8006ee2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006ee4:	79fb      	ldrb	r3, [r7, #7]
 8006ee6:	2b08      	cmp	r3, #8
 8006ee8:	d907      	bls.n	8006efa <memp_free+0x22>
 8006eea:	4b0c      	ldr	r3, [pc, #48]	@ (8006f1c <memp_free+0x44>)
 8006eec:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8006ef0:	490b      	ldr	r1, [pc, #44]	@ (8006f20 <memp_free+0x48>)
 8006ef2:	480c      	ldr	r0, [pc, #48]	@ (8006f24 <memp_free+0x4c>)
 8006ef4:	f009 fc44 	bl	8010780 <printf>
 8006ef8:	e00c      	b.n	8006f14 <memp_free+0x3c>

  if (mem == NULL) {
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d008      	beq.n	8006f12 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	4a09      	ldr	r2, [pc, #36]	@ (8006f28 <memp_free+0x50>)
 8006f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f08:	6839      	ldr	r1, [r7, #0]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7ff ff9a 	bl	8006e44 <do_memp_free_pool>
 8006f10:	e000      	b.n	8006f14 <memp_free+0x3c>
    return;
 8006f12:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	08015340 	.word	0x08015340
 8006f20:	08015410 	.word	0x08015410
 8006f24:	08015394 	.word	0x08015394
 8006f28:	08017af8 	.word	0x08017af8

08006f2c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006f30:	bf00      	nop
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
	...

08006f3c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d108      	bne.n	8006f62 <netif_add+0x26>
 8006f50:	4b57      	ldr	r3, [pc, #348]	@ (80070b0 <netif_add+0x174>)
 8006f52:	f240 1227 	movw	r2, #295	@ 0x127
 8006f56:	4957      	ldr	r1, [pc, #348]	@ (80070b4 <netif_add+0x178>)
 8006f58:	4857      	ldr	r0, [pc, #348]	@ (80070b8 <netif_add+0x17c>)
 8006f5a:	f009 fc11 	bl	8010780 <printf>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	e0a2      	b.n	80070a8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d108      	bne.n	8006f7a <netif_add+0x3e>
 8006f68:	4b51      	ldr	r3, [pc, #324]	@ (80070b0 <netif_add+0x174>)
 8006f6a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006f6e:	4953      	ldr	r1, [pc, #332]	@ (80070bc <netif_add+0x180>)
 8006f70:	4851      	ldr	r0, [pc, #324]	@ (80070b8 <netif_add+0x17c>)
 8006f72:	f009 fc05 	bl	8010780 <printf>
 8006f76:	2300      	movs	r3, #0
 8006f78:	e096      	b.n	80070a8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006f80:	4b4f      	ldr	r3, [pc, #316]	@ (80070c0 <netif_add+0x184>)
 8006f82:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006f8a:	4b4d      	ldr	r3, [pc, #308]	@ (80070c0 <netif_add+0x184>)
 8006f8c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006f94:	4b4a      	ldr	r3, [pc, #296]	@ (80070c0 <netif_add+0x184>)
 8006f96:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4a45      	ldr	r2, [pc, #276]	@ (80070c4 <netif_add+0x188>)
 8006fae:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a3a      	ldr	r2, [r7, #32]
 8006fc8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006fca:	4b3f      	ldr	r3, [pc, #252]	@ (80070c8 <netif_add+0x18c>)
 8006fcc:	781a      	ldrb	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fd8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	68b9      	ldr	r1, [r7, #8]
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 f913 	bl	800720c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	4798      	blx	r3
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <netif_add+0xba>
    return NULL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e058      	b.n	80070a8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006ffc:	2bff      	cmp	r3, #255	@ 0xff
 8006ffe:	d103      	bne.n	8007008 <netif_add+0xcc>
        netif->num = 0;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8007008:	2300      	movs	r3, #0
 800700a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800700c:	4b2f      	ldr	r3, [pc, #188]	@ (80070cc <netif_add+0x190>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	e02b      	b.n	800706c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	429a      	cmp	r2, r3
 800701a:	d106      	bne.n	800702a <netif_add+0xee>
 800701c:	4b24      	ldr	r3, [pc, #144]	@ (80070b0 <netif_add+0x174>)
 800701e:	f240 128b 	movw	r2, #395	@ 0x18b
 8007022:	492b      	ldr	r1, [pc, #172]	@ (80070d0 <netif_add+0x194>)
 8007024:	4824      	ldr	r0, [pc, #144]	@ (80070b8 <netif_add+0x17c>)
 8007026:	f009 fbab 	bl	8010780 <printf>
        num_netifs++;
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	3301      	adds	r3, #1
 800702e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	2bff      	cmp	r3, #255	@ 0xff
 8007034:	dd06      	ble.n	8007044 <netif_add+0x108>
 8007036:	4b1e      	ldr	r3, [pc, #120]	@ (80070b0 <netif_add+0x174>)
 8007038:	f240 128d 	movw	r2, #397	@ 0x18d
 800703c:	4925      	ldr	r1, [pc, #148]	@ (80070d4 <netif_add+0x198>)
 800703e:	481e      	ldr	r0, [pc, #120]	@ (80070b8 <netif_add+0x17c>)
 8007040:	f009 fb9e 	bl	8010780 <printf>
        if (netif2->num == netif->num) {
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007050:	429a      	cmp	r2, r3
 8007052:	d108      	bne.n	8007066 <netif_add+0x12a>
          netif->num++;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800705a:	3301      	adds	r3, #1
 800705c:	b2da      	uxtb	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8007064:	e005      	b.n	8007072 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	617b      	str	r3, [r7, #20]
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1d0      	bne.n	8007014 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1be      	bne.n	8006ff6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800707e:	2bfe      	cmp	r3, #254	@ 0xfe
 8007080:	d103      	bne.n	800708a <netif_add+0x14e>
    netif_num = 0;
 8007082:	4b11      	ldr	r3, [pc, #68]	@ (80070c8 <netif_add+0x18c>)
 8007084:	2200      	movs	r2, #0
 8007086:	701a      	strb	r2, [r3, #0]
 8007088:	e006      	b.n	8007098 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007090:	3301      	adds	r3, #1
 8007092:	b2da      	uxtb	r2, r3
 8007094:	4b0c      	ldr	r3, [pc, #48]	@ (80070c8 <netif_add+0x18c>)
 8007096:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007098:	4b0c      	ldr	r3, [pc, #48]	@ (80070cc <netif_add+0x190>)
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80070a0:	4a0a      	ldr	r2, [pc, #40]	@ (80070cc <netif_add+0x190>)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80070a6:	68fb      	ldr	r3, [r7, #12]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3718      	adds	r7, #24
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	0801542c 	.word	0x0801542c
 80070b4:	080154c0 	.word	0x080154c0
 80070b8:	0801547c 	.word	0x0801547c
 80070bc:	080154dc 	.word	0x080154dc
 80070c0:	08017b5c 	.word	0x08017b5c
 80070c4:	080074e7 	.word	0x080074e7
 80070c8:	20008a60 	.word	0x20008a60
 80070cc:	20008a58 	.word	0x20008a58
 80070d0:	08015500 	.word	0x08015500
 80070d4:	08015514 	.word	0x08015514

080070d8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f002 fbe7 	bl	80098b8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f006 ff73 	bl	800dfd8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80070f2:	bf00      	nop
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d106      	bne.n	800711c <netif_do_set_ipaddr+0x20>
 800710e:	4b1d      	ldr	r3, [pc, #116]	@ (8007184 <netif_do_set_ipaddr+0x88>)
 8007110:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8007114:	491c      	ldr	r1, [pc, #112]	@ (8007188 <netif_do_set_ipaddr+0x8c>)
 8007116:	481d      	ldr	r0, [pc, #116]	@ (800718c <netif_do_set_ipaddr+0x90>)
 8007118:	f009 fb32 	bl	8010780 <printf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d106      	bne.n	8007130 <netif_do_set_ipaddr+0x34>
 8007122:	4b18      	ldr	r3, [pc, #96]	@ (8007184 <netif_do_set_ipaddr+0x88>)
 8007124:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8007128:	4917      	ldr	r1, [pc, #92]	@ (8007188 <netif_do_set_ipaddr+0x8c>)
 800712a:	4818      	ldr	r0, [pc, #96]	@ (800718c <netif_do_set_ipaddr+0x90>)
 800712c:	f009 fb28 	bl	8010780 <printf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	3304      	adds	r3, #4
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	429a      	cmp	r2, r3
 800713c:	d01c      	beq.n	8007178 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3304      	adds	r3, #4
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800714e:	f107 0314 	add.w	r3, r7, #20
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f7ff ffbf 	bl	80070d8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <netif_do_set_ipaddr+0x6a>
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	e000      	b.n	8007168 <netif_do_set_ipaddr+0x6c>
 8007166:	2300      	movs	r3, #0
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800716c:	2101      	movs	r1, #1
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 f8d2 	bl	8007318 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007174:	2301      	movs	r3, #1
 8007176:	e000      	b.n	800717a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	0801542c 	.word	0x0801542c
 8007188:	08015544 	.word	0x08015544
 800718c:	0801547c 	.word	0x0801547c

08007190 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	3308      	adds	r3, #8
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d00a      	beq.n	80071c0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <netif_do_set_netmask+0x26>
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	e000      	b.n	80071b8 <netif_do_set_netmask+0x28>
 80071b6:	2300      	movs	r3, #0
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80071bc:	2301      	movs	r3, #1
 80071be:	e000      	b.n	80071c2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b085      	sub	sp, #20
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	60f8      	str	r0, [r7, #12]
 80071d6:	60b9      	str	r1, [r7, #8]
 80071d8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	330c      	adds	r3, #12
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d00a      	beq.n	80071fe <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d002      	beq.n	80071f4 <netif_do_set_gw+0x26>
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	e000      	b.n	80071f6 <netif_do_set_gw+0x28>
 80071f4:	2300      	movs	r3, #0
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80071fa:	2301      	movs	r3, #1
 80071fc:	e000      	b.n	8007200 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b088      	sub	sp, #32
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800721a:	2300      	movs	r3, #0
 800721c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800721e:	2300      	movs	r3, #0
 8007220:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007228:	4b1c      	ldr	r3, [pc, #112]	@ (800729c <netif_set_addr+0x90>)
 800722a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007232:	4b1a      	ldr	r3, [pc, #104]	@ (800729c <netif_set_addr+0x90>)
 8007234:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d101      	bne.n	8007240 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800723c:	4b17      	ldr	r3, [pc, #92]	@ (800729c <netif_set_addr+0x90>)
 800723e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <netif_set_addr+0x42>
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <netif_set_addr+0x46>
 800724e:	2301      	movs	r3, #1
 8007250:	e000      	b.n	8007254 <netif_set_addr+0x48>
 8007252:	2300      	movs	r3, #0
 8007254:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d006      	beq.n	800726a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800725c:	f107 0310 	add.w	r3, r7, #16
 8007260:	461a      	mov	r2, r3
 8007262:	68b9      	ldr	r1, [r7, #8]
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f7ff ff49 	bl	80070fc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800726a:	69fa      	ldr	r2, [r7, #28]
 800726c:	6879      	ldr	r1, [r7, #4]
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f7ff ff8e 	bl	8007190 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f7ff ffa8 	bl	80071ce <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d106      	bne.n	8007292 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007284:	f107 0310 	add.w	r3, r7, #16
 8007288:	461a      	mov	r2, r3
 800728a:	68b9      	ldr	r1, [r7, #8]
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f7ff ff35 	bl	80070fc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007292:	bf00      	nop
 8007294:	3720      	adds	r7, #32
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	08017b5c 	.word	0x08017b5c

080072a0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80072a8:	4a04      	ldr	r2, [pc, #16]	@ (80072bc <netif_set_default+0x1c>)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80072ae:	bf00      	nop
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	20008a5c 	.word	0x20008a5c

080072c0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d107      	bne.n	80072de <netif_set_up+0x1e>
 80072ce:	4b0f      	ldr	r3, [pc, #60]	@ (800730c <netif_set_up+0x4c>)
 80072d0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80072d4:	490e      	ldr	r1, [pc, #56]	@ (8007310 <netif_set_up+0x50>)
 80072d6:	480f      	ldr	r0, [pc, #60]	@ (8007314 <netif_set_up+0x54>)
 80072d8:	f009 fa52 	bl	8010780 <printf>
 80072dc:	e013      	b.n	8007306 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10c      	bne.n	8007306 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80072f2:	f043 0301 	orr.w	r3, r3, #1
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80072fe:	2103      	movs	r1, #3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f809 	bl	8007318 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	0801542c 	.word	0x0801542c
 8007310:	080155b4 	.word	0x080155b4
 8007314:	0801547c 	.word	0x0801547c

08007318 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d106      	bne.n	8007338 <netif_issue_reports+0x20>
 800732a:	4b18      	ldr	r3, [pc, #96]	@ (800738c <netif_issue_reports+0x74>)
 800732c:	f240 326d 	movw	r2, #877	@ 0x36d
 8007330:	4917      	ldr	r1, [pc, #92]	@ (8007390 <netif_issue_reports+0x78>)
 8007332:	4818      	ldr	r0, [pc, #96]	@ (8007394 <netif_issue_reports+0x7c>)
 8007334:	f009 fa24 	bl	8010780 <printf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800733e:	f003 0304 	and.w	r3, r3, #4
 8007342:	2b00      	cmp	r3, #0
 8007344:	d01e      	beq.n	8007384 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800734c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007350:	2b00      	cmp	r3, #0
 8007352:	d017      	beq.n	8007384 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007354:	78fb      	ldrb	r3, [r7, #3]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d013      	beq.n	8007386 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	3304      	adds	r3, #4
 8007362:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00e      	beq.n	8007386 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800736e:	f003 0308 	and.w	r3, r3, #8
 8007372:	2b00      	cmp	r3, #0
 8007374:	d007      	beq.n	8007386 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	3304      	adds	r3, #4
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f007 fd95 	bl	800eeac <etharp_request>
 8007382:	e000      	b.n	8007386 <netif_issue_reports+0x6e>
    return;
 8007384:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007386:	3708      	adds	r7, #8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	0801542c 	.word	0x0801542c
 8007390:	080155d0 	.word	0x080155d0
 8007394:	0801547c 	.word	0x0801547c

08007398 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d107      	bne.n	80073b6 <netif_set_down+0x1e>
 80073a6:	4b12      	ldr	r3, [pc, #72]	@ (80073f0 <netif_set_down+0x58>)
 80073a8:	f240 329b 	movw	r2, #923	@ 0x39b
 80073ac:	4911      	ldr	r1, [pc, #68]	@ (80073f4 <netif_set_down+0x5c>)
 80073ae:	4812      	ldr	r0, [pc, #72]	@ (80073f8 <netif_set_down+0x60>)
 80073b0:	f009 f9e6 	bl	8010780 <printf>
 80073b4:	e019      	b.n	80073ea <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d012      	beq.n	80073ea <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80073ca:	f023 0301 	bic.w	r3, r3, #1
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80073dc:	f003 0308 	and.w	r3, r3, #8
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f007 f91f 	bl	800e628 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	0801542c 	.word	0x0801542c
 80073f4:	080155f4 	.word	0x080155f4
 80073f8:	0801547c 	.word	0x0801547c

080073fc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d107      	bne.n	800741a <netif_set_link_up+0x1e>
 800740a:	4b13      	ldr	r3, [pc, #76]	@ (8007458 <netif_set_link_up+0x5c>)
 800740c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8007410:	4912      	ldr	r1, [pc, #72]	@ (800745c <netif_set_link_up+0x60>)
 8007412:	4813      	ldr	r0, [pc, #76]	@ (8007460 <netif_set_link_up+0x64>)
 8007414:	f009 f9b4 	bl	8010780 <printf>
 8007418:	e01b      	b.n	8007452 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007420:	f003 0304 	and.w	r3, r3, #4
 8007424:	2b00      	cmp	r3, #0
 8007426:	d114      	bne.n	8007452 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800742e:	f043 0304 	orr.w	r3, r3, #4
 8007432:	b2da      	uxtb	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800743a:	2103      	movs	r1, #3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7ff ff6b 	bl	8007318 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <netif_set_link_up+0x56>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	0801542c 	.word	0x0801542c
 800745c:	08015614 	.word	0x08015614
 8007460:	0801547c 	.word	0x0801547c

08007464 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d107      	bne.n	8007482 <netif_set_link_down+0x1e>
 8007472:	4b11      	ldr	r3, [pc, #68]	@ (80074b8 <netif_set_link_down+0x54>)
 8007474:	f240 4206 	movw	r2, #1030	@ 0x406
 8007478:	4910      	ldr	r1, [pc, #64]	@ (80074bc <netif_set_link_down+0x58>)
 800747a:	4811      	ldr	r0, [pc, #68]	@ (80074c0 <netif_set_link_down+0x5c>)
 800747c:	f009 f980 	bl	8010780 <printf>
 8007480:	e017      	b.n	80074b2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	2b00      	cmp	r3, #0
 800748e:	d010      	beq.n	80074b2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007496:	f023 0304 	bic.w	r3, r3, #4
 800749a:	b2da      	uxtb	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <netif_set_link_down+0x4e>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	0801542c 	.word	0x0801542c
 80074bc:	08015638 	.word	0x08015638
 80074c0:	0801547c 	.word	0x0801547c

080074c4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	61da      	str	r2, [r3, #28]
  }
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b085      	sub	sp, #20
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80074f2:	f06f 030b 	mvn.w	r3, #11
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
	...

08007504 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	4603      	mov	r3, r0
 800750c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800750e:	79fb      	ldrb	r3, [r7, #7]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d013      	beq.n	800753c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007514:	4b0d      	ldr	r3, [pc, #52]	@ (800754c <netif_get_by_index+0x48>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	60fb      	str	r3, [r7, #12]
 800751a:	e00c      	b.n	8007536 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007522:	3301      	adds	r3, #1
 8007524:	b2db      	uxtb	r3, r3
 8007526:	79fa      	ldrb	r2, [r7, #7]
 8007528:	429a      	cmp	r2, r3
 800752a:	d101      	bne.n	8007530 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	e006      	b.n	800753e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	60fb      	str	r3, [r7, #12]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1ef      	bne.n	800751c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	20008a58 	.word	0x20008a58

08007550 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007556:	4b0c      	ldr	r3, [pc, #48]	@ (8007588 <pbuf_free_ooseq+0x38>)
 8007558:	2200      	movs	r2, #0
 800755a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800755c:	4b0b      	ldr	r3, [pc, #44]	@ (800758c <pbuf_free_ooseq+0x3c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	607b      	str	r3, [r7, #4]
 8007562:	e00a      	b.n	800757a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f002 f9e1 	bl	8009934 <tcp_free_ooseq>
      return;
 8007572:	e005      	b.n	8007580 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	607b      	str	r3, [r7, #4]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1f1      	bne.n	8007564 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	20008a61 	.word	0x20008a61
 800758c:	20008a70 	.word	0x20008a70

08007590 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007590:	b480      	push	{r7}
 8007592:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007594:	4b03      	ldr	r3, [pc, #12]	@ (80075a4 <pbuf_pool_is_empty+0x14>)
 8007596:	2201      	movs	r2, #1
 8007598:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800759a:	bf00      	nop
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	20008a61 	.word	0x20008a61

080075a8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	4611      	mov	r1, r2
 80075b4:	461a      	mov	r2, r3
 80075b6:	460b      	mov	r3, r1
 80075b8:	80fb      	strh	r3, [r7, #6]
 80075ba:	4613      	mov	r3, r2
 80075bc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	88fa      	ldrh	r2, [r7, #6]
 80075ce:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	88ba      	ldrh	r2, [r7, #4]
 80075d4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80075d6:	8b3b      	ldrh	r3, [r7, #24]
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	7f3a      	ldrb	r2, [r7, #28]
 80075e2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2201      	movs	r2, #1
 80075e8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	73da      	strb	r2, [r3, #15]
}
 80075f0:	bf00      	nop
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b08c      	sub	sp, #48	@ 0x30
 8007600:	af02      	add	r7, sp, #8
 8007602:	4603      	mov	r3, r0
 8007604:	71fb      	strb	r3, [r7, #7]
 8007606:	460b      	mov	r3, r1
 8007608:	80bb      	strh	r3, [r7, #4]
 800760a:	4613      	mov	r3, r2
 800760c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800760e:	79fb      	ldrb	r3, [r7, #7]
 8007610:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007612:	887b      	ldrh	r3, [r7, #2]
 8007614:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007618:	d07f      	beq.n	800771a <pbuf_alloc+0x11e>
 800761a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800761e:	f300 80c8 	bgt.w	80077b2 <pbuf_alloc+0x1b6>
 8007622:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007626:	d010      	beq.n	800764a <pbuf_alloc+0x4e>
 8007628:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800762c:	f300 80c1 	bgt.w	80077b2 <pbuf_alloc+0x1b6>
 8007630:	2b01      	cmp	r3, #1
 8007632:	d002      	beq.n	800763a <pbuf_alloc+0x3e>
 8007634:	2b41      	cmp	r3, #65	@ 0x41
 8007636:	f040 80bc 	bne.w	80077b2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800763a:	887a      	ldrh	r2, [r7, #2]
 800763c:	88bb      	ldrh	r3, [r7, #4]
 800763e:	4619      	mov	r1, r3
 8007640:	2000      	movs	r0, #0
 8007642:	f000 f8d1 	bl	80077e8 <pbuf_alloc_reference>
 8007646:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8007648:	e0bd      	b.n	80077c6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800764a:	2300      	movs	r3, #0
 800764c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800764e:	2300      	movs	r3, #0
 8007650:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007652:	88bb      	ldrh	r3, [r7, #4]
 8007654:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007656:	2008      	movs	r0, #8
 8007658:	f7ff fbce 	bl	8006df8 <memp_malloc>
 800765c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d109      	bne.n	8007678 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007664:	f7ff ff94 	bl	8007590 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766a:	2b00      	cmp	r3, #0
 800766c:	d002      	beq.n	8007674 <pbuf_alloc+0x78>
            pbuf_free(p);
 800766e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007670:	f000 faa8 	bl	8007bc4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007674:	2300      	movs	r3, #0
 8007676:	e0a7      	b.n	80077c8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007678:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800767a:	3303      	adds	r3, #3
 800767c:	b29b      	uxth	r3, r3
 800767e:	f023 0303 	bic.w	r3, r3, #3
 8007682:	b29b      	uxth	r3, r3
 8007684:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8007688:	b29b      	uxth	r3, r3
 800768a:	8b7a      	ldrh	r2, [r7, #26]
 800768c:	4293      	cmp	r3, r2
 800768e:	bf28      	it	cs
 8007690:	4613      	movcs	r3, r2
 8007692:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007694:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007696:	3310      	adds	r3, #16
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	4413      	add	r3, r2
 800769c:	3303      	adds	r3, #3
 800769e:	f023 0303 	bic.w	r3, r3, #3
 80076a2:	4618      	mov	r0, r3
 80076a4:	89f9      	ldrh	r1, [r7, #14]
 80076a6:	8b7a      	ldrh	r2, [r7, #26]
 80076a8:	2300      	movs	r3, #0
 80076aa:	9301      	str	r3, [sp, #4]
 80076ac:	887b      	ldrh	r3, [r7, #2]
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	460b      	mov	r3, r1
 80076b2:	4601      	mov	r1, r0
 80076b4:	6938      	ldr	r0, [r7, #16]
 80076b6:	f7ff ff77 	bl	80075a8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f003 0303 	and.w	r3, r3, #3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d006      	beq.n	80076d4 <pbuf_alloc+0xd8>
 80076c6:	4b42      	ldr	r3, [pc, #264]	@ (80077d0 <pbuf_alloc+0x1d4>)
 80076c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076cc:	4941      	ldr	r1, [pc, #260]	@ (80077d4 <pbuf_alloc+0x1d8>)
 80076ce:	4842      	ldr	r0, [pc, #264]	@ (80077d8 <pbuf_alloc+0x1dc>)
 80076d0:	f009 f856 	bl	8010780 <printf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80076d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80076d6:	3303      	adds	r3, #3
 80076d8:	f023 0303 	bic.w	r3, r3, #3
 80076dc:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80076e0:	d106      	bne.n	80076f0 <pbuf_alloc+0xf4>
 80076e2:	4b3b      	ldr	r3, [pc, #236]	@ (80077d0 <pbuf_alloc+0x1d4>)
 80076e4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80076e8:	493c      	ldr	r1, [pc, #240]	@ (80077dc <pbuf_alloc+0x1e0>)
 80076ea:	483b      	ldr	r0, [pc, #236]	@ (80077d8 <pbuf_alloc+0x1dc>)
 80076ec:	f009 f848 	bl	8010780 <printf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80076f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d102      	bne.n	80076fc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80076fa:	e002      	b.n	8007702 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007706:	8b7a      	ldrh	r2, [r7, #26]
 8007708:	89fb      	ldrh	r3, [r7, #14]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8007712:	8b7b      	ldrh	r3, [r7, #26]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d19e      	bne.n	8007656 <pbuf_alloc+0x5a>
      break;
 8007718:	e055      	b.n	80077c6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800771a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800771c:	3303      	adds	r3, #3
 800771e:	b29b      	uxth	r3, r3
 8007720:	f023 0303 	bic.w	r3, r3, #3
 8007724:	b29a      	uxth	r2, r3
 8007726:	88bb      	ldrh	r3, [r7, #4]
 8007728:	3303      	adds	r3, #3
 800772a:	b29b      	uxth	r3, r3
 800772c:	f023 0303 	bic.w	r3, r3, #3
 8007730:	b29b      	uxth	r3, r3
 8007732:	4413      	add	r3, r2
 8007734:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007736:	8b3b      	ldrh	r3, [r7, #24]
 8007738:	3310      	adds	r3, #16
 800773a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800773c:	8b3a      	ldrh	r2, [r7, #24]
 800773e:	88bb      	ldrh	r3, [r7, #4]
 8007740:	3303      	adds	r3, #3
 8007742:	f023 0303 	bic.w	r3, r3, #3
 8007746:	429a      	cmp	r2, r3
 8007748:	d306      	bcc.n	8007758 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800774a:	8afa      	ldrh	r2, [r7, #22]
 800774c:	88bb      	ldrh	r3, [r7, #4]
 800774e:	3303      	adds	r3, #3
 8007750:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007754:	429a      	cmp	r2, r3
 8007756:	d201      	bcs.n	800775c <pbuf_alloc+0x160>
        return NULL;
 8007758:	2300      	movs	r3, #0
 800775a:	e035      	b.n	80077c8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800775c:	8afb      	ldrh	r3, [r7, #22]
 800775e:	4618      	mov	r0, r3
 8007760:	f7ff f9ba 	bl	8006ad8 <mem_malloc>
 8007764:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8007766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <pbuf_alloc+0x174>
        return NULL;
 800776c:	2300      	movs	r3, #0
 800776e:	e02b      	b.n	80077c8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007770:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007772:	3310      	adds	r3, #16
 8007774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007776:	4413      	add	r3, r2
 8007778:	3303      	adds	r3, #3
 800777a:	f023 0303 	bic.w	r3, r3, #3
 800777e:	4618      	mov	r0, r3
 8007780:	88b9      	ldrh	r1, [r7, #4]
 8007782:	88ba      	ldrh	r2, [r7, #4]
 8007784:	2300      	movs	r3, #0
 8007786:	9301      	str	r3, [sp, #4]
 8007788:	887b      	ldrh	r3, [r7, #2]
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	460b      	mov	r3, r1
 800778e:	4601      	mov	r1, r0
 8007790:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007792:	f7ff ff09 	bl	80075a8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f003 0303 	and.w	r3, r3, #3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d010      	beq.n	80077c4 <pbuf_alloc+0x1c8>
 80077a2:	4b0b      	ldr	r3, [pc, #44]	@ (80077d0 <pbuf_alloc+0x1d4>)
 80077a4:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80077a8:	490d      	ldr	r1, [pc, #52]	@ (80077e0 <pbuf_alloc+0x1e4>)
 80077aa:	480b      	ldr	r0, [pc, #44]	@ (80077d8 <pbuf_alloc+0x1dc>)
 80077ac:	f008 ffe8 	bl	8010780 <printf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80077b0:	e008      	b.n	80077c4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80077b2:	4b07      	ldr	r3, [pc, #28]	@ (80077d0 <pbuf_alloc+0x1d4>)
 80077b4:	f240 1227 	movw	r2, #295	@ 0x127
 80077b8:	490a      	ldr	r1, [pc, #40]	@ (80077e4 <pbuf_alloc+0x1e8>)
 80077ba:	4807      	ldr	r0, [pc, #28]	@ (80077d8 <pbuf_alloc+0x1dc>)
 80077bc:	f008 ffe0 	bl	8010780 <printf>
      return NULL;
 80077c0:	2300      	movs	r3, #0
 80077c2:	e001      	b.n	80077c8 <pbuf_alloc+0x1cc>
      break;
 80077c4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80077c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3728      	adds	r7, #40	@ 0x28
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	0801565c 	.word	0x0801565c
 80077d4:	0801568c 	.word	0x0801568c
 80077d8:	080156bc 	.word	0x080156bc
 80077dc:	080156e4 	.word	0x080156e4
 80077e0:	08015718 	.word	0x08015718
 80077e4:	08015744 	.word	0x08015744

080077e8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af02      	add	r7, sp, #8
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	807b      	strh	r3, [r7, #2]
 80077f4:	4613      	mov	r3, r2
 80077f6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80077f8:	883b      	ldrh	r3, [r7, #0]
 80077fa:	2b41      	cmp	r3, #65	@ 0x41
 80077fc:	d009      	beq.n	8007812 <pbuf_alloc_reference+0x2a>
 80077fe:	883b      	ldrh	r3, [r7, #0]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d006      	beq.n	8007812 <pbuf_alloc_reference+0x2a>
 8007804:	4b0f      	ldr	r3, [pc, #60]	@ (8007844 <pbuf_alloc_reference+0x5c>)
 8007806:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800780a:	490f      	ldr	r1, [pc, #60]	@ (8007848 <pbuf_alloc_reference+0x60>)
 800780c:	480f      	ldr	r0, [pc, #60]	@ (800784c <pbuf_alloc_reference+0x64>)
 800780e:	f008 ffb7 	bl	8010780 <printf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007812:	2007      	movs	r0, #7
 8007814:	f7ff faf0 	bl	8006df8 <memp_malloc>
 8007818:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d101      	bne.n	8007824 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8007820:	2300      	movs	r3, #0
 8007822:	e00b      	b.n	800783c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007824:	8879      	ldrh	r1, [r7, #2]
 8007826:	887a      	ldrh	r2, [r7, #2]
 8007828:	2300      	movs	r3, #0
 800782a:	9301      	str	r3, [sp, #4]
 800782c:	883b      	ldrh	r3, [r7, #0]
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	460b      	mov	r3, r1
 8007832:	6879      	ldr	r1, [r7, #4]
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f7ff feb7 	bl	80075a8 <pbuf_init_alloced_pbuf>
  return p;
 800783a:	68fb      	ldr	r3, [r7, #12]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	0801565c 	.word	0x0801565c
 8007848:	08015760 	.word	0x08015760
 800784c:	080156bc 	.word	0x080156bc

08007850 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b088      	sub	sp, #32
 8007854:	af02      	add	r7, sp, #8
 8007856:	607b      	str	r3, [r7, #4]
 8007858:	4603      	mov	r3, r0
 800785a:	73fb      	strb	r3, [r7, #15]
 800785c:	460b      	mov	r3, r1
 800785e:	81bb      	strh	r3, [r7, #12]
 8007860:	4613      	mov	r3, r2
 8007862:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007864:	7bfb      	ldrb	r3, [r7, #15]
 8007866:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007868:	8a7b      	ldrh	r3, [r7, #18]
 800786a:	3303      	adds	r3, #3
 800786c:	f023 0203 	bic.w	r2, r3, #3
 8007870:	89bb      	ldrh	r3, [r7, #12]
 8007872:	441a      	add	r2, r3
 8007874:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007876:	429a      	cmp	r2, r3
 8007878:	d901      	bls.n	800787e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800787a:	2300      	movs	r3, #0
 800787c:	e018      	b.n	80078b0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800787e:	6a3b      	ldr	r3, [r7, #32]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d007      	beq.n	8007894 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007884:	8a7b      	ldrh	r3, [r7, #18]
 8007886:	3303      	adds	r3, #3
 8007888:	f023 0303 	bic.w	r3, r3, #3
 800788c:	6a3a      	ldr	r2, [r7, #32]
 800788e:	4413      	add	r3, r2
 8007890:	617b      	str	r3, [r7, #20]
 8007892:	e001      	b.n	8007898 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007894:	2300      	movs	r3, #0
 8007896:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	89b9      	ldrh	r1, [r7, #12]
 800789c:	89ba      	ldrh	r2, [r7, #12]
 800789e:	2302      	movs	r3, #2
 80078a0:	9301      	str	r3, [sp, #4]
 80078a2:	897b      	ldrh	r3, [r7, #10]
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	460b      	mov	r3, r1
 80078a8:	6979      	ldr	r1, [r7, #20]
 80078aa:	f7ff fe7d 	bl	80075a8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80078ae:	687b      	ldr	r3, [r7, #4]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3718      	adds	r7, #24
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	460b      	mov	r3, r1
 80078c2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d106      	bne.n	80078d8 <pbuf_realloc+0x20>
 80078ca:	4b3a      	ldr	r3, [pc, #232]	@ (80079b4 <pbuf_realloc+0xfc>)
 80078cc:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80078d0:	4939      	ldr	r1, [pc, #228]	@ (80079b8 <pbuf_realloc+0x100>)
 80078d2:	483a      	ldr	r0, [pc, #232]	@ (80079bc <pbuf_realloc+0x104>)
 80078d4:	f008 ff54 	bl	8010780 <printf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	891b      	ldrh	r3, [r3, #8]
 80078dc:	887a      	ldrh	r2, [r7, #2]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d263      	bcs.n	80079aa <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	891a      	ldrh	r2, [r3, #8]
 80078e6:	887b      	ldrh	r3, [r7, #2]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80078ec:	887b      	ldrh	r3, [r7, #2]
 80078ee:	817b      	strh	r3, [r7, #10]
  q = p;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80078f4:	e018      	b.n	8007928 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	895b      	ldrh	r3, [r3, #10]
 80078fa:	897a      	ldrh	r2, [r7, #10]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	891a      	ldrh	r2, [r3, #8]
 8007904:	893b      	ldrh	r3, [r7, #8]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	b29a      	uxth	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d106      	bne.n	8007928 <pbuf_realloc+0x70>
 800791a:	4b26      	ldr	r3, [pc, #152]	@ (80079b4 <pbuf_realloc+0xfc>)
 800791c:	f240 12af 	movw	r2, #431	@ 0x1af
 8007920:	4927      	ldr	r1, [pc, #156]	@ (80079c0 <pbuf_realloc+0x108>)
 8007922:	4826      	ldr	r0, [pc, #152]	@ (80079bc <pbuf_realloc+0x104>)
 8007924:	f008 ff2c 	bl	8010780 <printf>
  while (rem_len > q->len) {
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	895b      	ldrh	r3, [r3, #10]
 800792c:	897a      	ldrh	r2, [r7, #10]
 800792e:	429a      	cmp	r2, r3
 8007930:	d8e1      	bhi.n	80078f6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	7b1b      	ldrb	r3, [r3, #12]
 8007936:	f003 030f 	and.w	r3, r3, #15
 800793a:	2b00      	cmp	r3, #0
 800793c:	d121      	bne.n	8007982 <pbuf_realloc+0xca>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	895b      	ldrh	r3, [r3, #10]
 8007942:	897a      	ldrh	r2, [r7, #10]
 8007944:	429a      	cmp	r2, r3
 8007946:	d01c      	beq.n	8007982 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	7b5b      	ldrb	r3, [r3, #13]
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d116      	bne.n	8007982 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	685a      	ldr	r2, [r3, #4]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	b29a      	uxth	r2, r3
 800795e:	897b      	ldrh	r3, [r7, #10]
 8007960:	4413      	add	r3, r2
 8007962:	b29b      	uxth	r3, r3
 8007964:	4619      	mov	r1, r3
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f7fe ffba 	bl	80068e0 <mem_trim>
 800796c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d106      	bne.n	8007982 <pbuf_realloc+0xca>
 8007974:	4b0f      	ldr	r3, [pc, #60]	@ (80079b4 <pbuf_realloc+0xfc>)
 8007976:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800797a:	4912      	ldr	r1, [pc, #72]	@ (80079c4 <pbuf_realloc+0x10c>)
 800797c:	480f      	ldr	r0, [pc, #60]	@ (80079bc <pbuf_realloc+0x104>)
 800797e:	f008 feff 	bl	8010780 <printf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	897a      	ldrh	r2, [r7, #10]
 8007986:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	895a      	ldrh	r2, [r3, #10]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d004      	beq.n	80079a2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4618      	mov	r0, r3
 800799e:	f000 f911 	bl	8007bc4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	601a      	str	r2, [r3, #0]
 80079a8:	e000      	b.n	80079ac <pbuf_realloc+0xf4>
    return;
 80079aa:	bf00      	nop

}
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	0801565c 	.word	0x0801565c
 80079b8:	08015774 	.word	0x08015774
 80079bc:	080156bc 	.word	0x080156bc
 80079c0:	0801578c 	.word	0x0801578c
 80079c4:	080157a4 	.word	0x080157a4

080079c8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	4613      	mov	r3, r2
 80079d4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d106      	bne.n	80079ea <pbuf_add_header_impl+0x22>
 80079dc:	4b2b      	ldr	r3, [pc, #172]	@ (8007a8c <pbuf_add_header_impl+0xc4>)
 80079de:	f240 12df 	movw	r2, #479	@ 0x1df
 80079e2:	492b      	ldr	r1, [pc, #172]	@ (8007a90 <pbuf_add_header_impl+0xc8>)
 80079e4:	482b      	ldr	r0, [pc, #172]	@ (8007a94 <pbuf_add_header_impl+0xcc>)
 80079e6:	f008 fecb 	bl	8010780 <printf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <pbuf_add_header_impl+0x30>
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079f6:	d301      	bcc.n	80079fc <pbuf_add_header_impl+0x34>
    return 1;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e043      	b.n	8007a84 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <pbuf_add_header_impl+0x3e>
    return 0;
 8007a02:	2300      	movs	r3, #0
 8007a04:	e03e      	b.n	8007a84 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	891a      	ldrh	r2, [r3, #8]
 8007a0e:	8a7b      	ldrh	r3, [r7, #18]
 8007a10:	4413      	add	r3, r2
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	8a7a      	ldrh	r2, [r7, #18]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d901      	bls.n	8007a1e <pbuf_add_header_impl+0x56>
    return 1;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e032      	b.n	8007a84 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	7b1b      	ldrb	r3, [r3, #12]
 8007a22:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007a24:	8a3b      	ldrh	r3, [r7, #16]
 8007a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00c      	beq.n	8007a48 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	425b      	negs	r3, r3
 8007a36:	4413      	add	r3, r2
 8007a38:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	3310      	adds	r3, #16
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d20d      	bcs.n	8007a60 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e01d      	b.n	8007a84 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007a48:	79fb      	ldrb	r3, [r7, #7]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d006      	beq.n	8007a5c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	425b      	negs	r3, r3
 8007a56:	4413      	add	r3, r2
 8007a58:	617b      	str	r3, [r7, #20]
 8007a5a:	e001      	b.n	8007a60 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e011      	b.n	8007a84 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	895a      	ldrh	r2, [r3, #10]
 8007a6a:	8a7b      	ldrh	r3, [r7, #18]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	891a      	ldrh	r2, [r3, #8]
 8007a78:	8a7b      	ldrh	r3, [r7, #18]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	811a      	strh	r2, [r3, #8]


  return 0;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	0801565c 	.word	0x0801565c
 8007a90:	080157c0 	.word	0x080157c0
 8007a94:	080156bc 	.word	0x080156bc

08007a98 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7ff ff8e 	bl	80079c8 <pbuf_add_header_impl>
 8007aac:	4603      	mov	r3, r0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
	...

08007ab8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d106      	bne.n	8007ad6 <pbuf_remove_header+0x1e>
 8007ac8:	4b20      	ldr	r3, [pc, #128]	@ (8007b4c <pbuf_remove_header+0x94>)
 8007aca:	f240 224b 	movw	r2, #587	@ 0x24b
 8007ace:	4920      	ldr	r1, [pc, #128]	@ (8007b50 <pbuf_remove_header+0x98>)
 8007ad0:	4820      	ldr	r0, [pc, #128]	@ (8007b54 <pbuf_remove_header+0x9c>)
 8007ad2:	f008 fe55 	bl	8010780 <printf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d003      	beq.n	8007ae4 <pbuf_remove_header+0x2c>
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ae2:	d301      	bcc.n	8007ae8 <pbuf_remove_header+0x30>
    return 1;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e02c      	b.n	8007b42 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d101      	bne.n	8007af2 <pbuf_remove_header+0x3a>
    return 0;
 8007aee:	2300      	movs	r3, #0
 8007af0:	e027      	b.n	8007b42 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	895b      	ldrh	r3, [r3, #10]
 8007afa:	89fa      	ldrh	r2, [r7, #14]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d908      	bls.n	8007b12 <pbuf_remove_header+0x5a>
 8007b00:	4b12      	ldr	r3, [pc, #72]	@ (8007b4c <pbuf_remove_header+0x94>)
 8007b02:	f240 2255 	movw	r2, #597	@ 0x255
 8007b06:	4914      	ldr	r1, [pc, #80]	@ (8007b58 <pbuf_remove_header+0xa0>)
 8007b08:	4812      	ldr	r0, [pc, #72]	@ (8007b54 <pbuf_remove_header+0x9c>)
 8007b0a:	f008 fe39 	bl	8010780 <printf>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e017      	b.n	8007b42 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	441a      	add	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	895a      	ldrh	r2, [r3, #10]
 8007b28:	89fb      	ldrh	r3, [r7, #14]
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	891a      	ldrh	r2, [r3, #8]
 8007b36:	89fb      	ldrh	r3, [r7, #14]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	0801565c 	.word	0x0801565c
 8007b50:	080157c0 	.word	0x080157c0
 8007b54:	080156bc 	.word	0x080156bc
 8007b58:	080157cc 	.word	0x080157cc

08007b5c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	460b      	mov	r3, r1
 8007b66:	807b      	strh	r3, [r7, #2]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007b6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	da08      	bge.n	8007b86 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007b74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b78:	425b      	negs	r3, r3
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7ff ff9b 	bl	8007ab8 <pbuf_remove_header>
 8007b82:	4603      	mov	r3, r0
 8007b84:	e007      	b.n	8007b96 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007b86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b8a:	787a      	ldrb	r2, [r7, #1]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7ff ff1a 	bl	80079c8 <pbuf_add_header_impl>
 8007b94:	4603      	mov	r3, r0
  }
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b082      	sub	sp, #8
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007baa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7ff ffd2 	bl	8007b5c <pbuf_header_impl>
 8007bb8:	4603      	mov	r3, r0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
	...

08007bc4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10b      	bne.n	8007bea <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d106      	bne.n	8007be6 <pbuf_free+0x22>
 8007bd8:	4b38      	ldr	r3, [pc, #224]	@ (8007cbc <pbuf_free+0xf8>)
 8007bda:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8007bde:	4938      	ldr	r1, [pc, #224]	@ (8007cc0 <pbuf_free+0xfc>)
 8007be0:	4838      	ldr	r0, [pc, #224]	@ (8007cc4 <pbuf_free+0x100>)
 8007be2:	f008 fdcd 	bl	8010780 <printf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	e063      	b.n	8007cb2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007bea:	2300      	movs	r3, #0
 8007bec:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007bee:	e05c      	b.n	8007caa <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	7b9b      	ldrb	r3, [r3, #14]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d106      	bne.n	8007c06 <pbuf_free+0x42>
 8007bf8:	4b30      	ldr	r3, [pc, #192]	@ (8007cbc <pbuf_free+0xf8>)
 8007bfa:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8007bfe:	4932      	ldr	r1, [pc, #200]	@ (8007cc8 <pbuf_free+0x104>)
 8007c00:	4830      	ldr	r0, [pc, #192]	@ (8007cc4 <pbuf_free+0x100>)
 8007c02:	f008 fdbd 	bl	8010780 <printf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	7b9b      	ldrb	r3, [r3, #14]
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	b2da      	uxtb	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	739a      	strb	r2, [r3, #14]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	7b9b      	ldrb	r3, [r3, #14]
 8007c16:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007c18:	7dbb      	ldrb	r3, [r7, #22]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d143      	bne.n	8007ca6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	7b1b      	ldrb	r3, [r3, #12]
 8007c28:	f003 030f 	and.w	r3, r3, #15
 8007c2c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	7b5b      	ldrb	r3, [r3, #13]
 8007c32:	f003 0302 	and.w	r3, r3, #2
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d011      	beq.n	8007c5e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d106      	bne.n	8007c54 <pbuf_free+0x90>
 8007c46:	4b1d      	ldr	r3, [pc, #116]	@ (8007cbc <pbuf_free+0xf8>)
 8007c48:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8007c4c:	491f      	ldr	r1, [pc, #124]	@ (8007ccc <pbuf_free+0x108>)
 8007c4e:	481d      	ldr	r0, [pc, #116]	@ (8007cc4 <pbuf_free+0x100>)
 8007c50:	f008 fd96 	bl	8010780 <printf>
        pc->custom_free_function(p);
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	4798      	blx	r3
 8007c5c:	e01d      	b.n	8007c9a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d104      	bne.n	8007c6e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007c64:	6879      	ldr	r1, [r7, #4]
 8007c66:	2008      	movs	r0, #8
 8007c68:	f7ff f936 	bl	8006ed8 <memp_free>
 8007c6c:	e015      	b.n	8007c9a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d104      	bne.n	8007c7e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007c74:	6879      	ldr	r1, [r7, #4]
 8007c76:	2007      	movs	r0, #7
 8007c78:	f7ff f92e 	bl	8006ed8 <memp_free>
 8007c7c:	e00d      	b.n	8007c9a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007c7e:	7bfb      	ldrb	r3, [r7, #15]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d103      	bne.n	8007c8c <pbuf_free+0xc8>
          mem_free(p);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7fe fdc1 	bl	800680c <mem_free>
 8007c8a:	e006      	b.n	8007c9a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8007cbc <pbuf_free+0xf8>)
 8007c8e:	f240 320f 	movw	r2, #783	@ 0x30f
 8007c92:	490f      	ldr	r1, [pc, #60]	@ (8007cd0 <pbuf_free+0x10c>)
 8007c94:	480b      	ldr	r0, [pc, #44]	@ (8007cc4 <pbuf_free+0x100>)
 8007c96:	f008 fd73 	bl	8010780 <printf>
        }
      }
      count++;
 8007c9a:	7dfb      	ldrb	r3, [r7, #23]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	607b      	str	r3, [r7, #4]
 8007ca4:	e001      	b.n	8007caa <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d19f      	bne.n	8007bf0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	0801565c 	.word	0x0801565c
 8007cc0:	080157c0 	.word	0x080157c0
 8007cc4:	080156bc 	.word	0x080156bc
 8007cc8:	080157ec 	.word	0x080157ec
 8007ccc:	08015804 	.word	0x08015804
 8007cd0:	08015828 	.word	0x08015828

08007cd4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007ce0:	e005      	b.n	8007cee <pbuf_clen+0x1a>
    ++len;
 8007ce2:	89fb      	ldrh	r3, [r7, #14]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1f6      	bne.n	8007ce2 <pbuf_clen+0xe>
  }
  return len;
 8007cf4:	89fb      	ldrh	r3, [r7, #14]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
	...

08007d04 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d010      	beq.n	8007d34 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	7b9b      	ldrb	r3, [r3, #14]
 8007d16:	3301      	adds	r3, #1
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	7b9b      	ldrb	r3, [r3, #14]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d106      	bne.n	8007d34 <pbuf_ref+0x30>
 8007d26:	4b05      	ldr	r3, [pc, #20]	@ (8007d3c <pbuf_ref+0x38>)
 8007d28:	f240 3242 	movw	r2, #834	@ 0x342
 8007d2c:	4904      	ldr	r1, [pc, #16]	@ (8007d40 <pbuf_ref+0x3c>)
 8007d2e:	4805      	ldr	r0, [pc, #20]	@ (8007d44 <pbuf_ref+0x40>)
 8007d30:	f008 fd26 	bl	8010780 <printf>
  }
}
 8007d34:	bf00      	nop
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	0801565c 	.word	0x0801565c
 8007d40:	0801583c 	.word	0x0801583c
 8007d44:	080156bc 	.word	0x080156bc

08007d48 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <pbuf_cat+0x16>
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d107      	bne.n	8007d6e <pbuf_cat+0x26>
 8007d5e:	4b20      	ldr	r3, [pc, #128]	@ (8007de0 <pbuf_cat+0x98>)
 8007d60:	f240 3259 	movw	r2, #857	@ 0x359
 8007d64:	491f      	ldr	r1, [pc, #124]	@ (8007de4 <pbuf_cat+0x9c>)
 8007d66:	4820      	ldr	r0, [pc, #128]	@ (8007de8 <pbuf_cat+0xa0>)
 8007d68:	f008 fd0a 	bl	8010780 <printf>
 8007d6c:	e034      	b.n	8007dd8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	60fb      	str	r3, [r7, #12]
 8007d72:	e00a      	b.n	8007d8a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	891a      	ldrh	r2, [r3, #8]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	891b      	ldrh	r3, [r3, #8]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	60fb      	str	r3, [r7, #12]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1f0      	bne.n	8007d74 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	891a      	ldrh	r2, [r3, #8]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	895b      	ldrh	r3, [r3, #10]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d006      	beq.n	8007dac <pbuf_cat+0x64>
 8007d9e:	4b10      	ldr	r3, [pc, #64]	@ (8007de0 <pbuf_cat+0x98>)
 8007da0:	f240 3262 	movw	r2, #866	@ 0x362
 8007da4:	4911      	ldr	r1, [pc, #68]	@ (8007dec <pbuf_cat+0xa4>)
 8007da6:	4810      	ldr	r0, [pc, #64]	@ (8007de8 <pbuf_cat+0xa0>)
 8007da8:	f008 fcea 	bl	8010780 <printf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d006      	beq.n	8007dc2 <pbuf_cat+0x7a>
 8007db4:	4b0a      	ldr	r3, [pc, #40]	@ (8007de0 <pbuf_cat+0x98>)
 8007db6:	f240 3263 	movw	r2, #867	@ 0x363
 8007dba:	490d      	ldr	r1, [pc, #52]	@ (8007df0 <pbuf_cat+0xa8>)
 8007dbc:	480a      	ldr	r0, [pc, #40]	@ (8007de8 <pbuf_cat+0xa0>)
 8007dbe:	f008 fcdf 	bl	8010780 <printf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	891a      	ldrh	r2, [r3, #8]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	891b      	ldrh	r3, [r3, #8]
 8007dca:	4413      	add	r3, r2
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	683a      	ldr	r2, [r7, #0]
 8007dd6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	0801565c 	.word	0x0801565c
 8007de4:	08015850 	.word	0x08015850
 8007de8:	080156bc 	.word	0x080156bc
 8007dec:	08015888 	.word	0x08015888
 8007df0:	080158b8 	.word	0x080158b8

08007df4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7ff ffa1 	bl	8007d48 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007e06:	6838      	ldr	r0, [r7, #0]
 8007e08:	f7ff ff7c 	bl	8007d04 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007e0c:	bf00      	nop
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	617b      	str	r3, [r7, #20]
 8007e22:	2300      	movs	r3, #0
 8007e24:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d008      	beq.n	8007e3e <pbuf_copy+0x2a>
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d005      	beq.n	8007e3e <pbuf_copy+0x2a>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	891a      	ldrh	r2, [r3, #8]
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	891b      	ldrh	r3, [r3, #8]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d209      	bcs.n	8007e52 <pbuf_copy+0x3e>
 8007e3e:	4b57      	ldr	r3, [pc, #348]	@ (8007f9c <pbuf_copy+0x188>)
 8007e40:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8007e44:	4956      	ldr	r1, [pc, #344]	@ (8007fa0 <pbuf_copy+0x18c>)
 8007e46:	4857      	ldr	r0, [pc, #348]	@ (8007fa4 <pbuf_copy+0x190>)
 8007e48:	f008 fc9a 	bl	8010780 <printf>
 8007e4c:	f06f 030f 	mvn.w	r3, #15
 8007e50:	e09f      	b.n	8007f92 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	895b      	ldrh	r3, [r3, #10]
 8007e56:	461a      	mov	r2, r3
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	1ad2      	subs	r2, r2, r3
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	895b      	ldrh	r3, [r3, #10]
 8007e60:	4619      	mov	r1, r3
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	1acb      	subs	r3, r1, r3
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d306      	bcc.n	8007e78 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	895b      	ldrh	r3, [r3, #10]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	60fb      	str	r3, [r7, #12]
 8007e76:	e005      	b.n	8007e84 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	895b      	ldrh	r3, [r3, #10]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	18d0      	adds	r0, r2, r3
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	4413      	add	r3, r2
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	4619      	mov	r1, r3
 8007e98:	f008 fd6e 	bl	8010978 <memcpy>
    offset_to += len;
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	895b      	ldrh	r3, [r3, #10]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d906      	bls.n	8007ec6 <pbuf_copy+0xb2>
 8007eb8:	4b38      	ldr	r3, [pc, #224]	@ (8007f9c <pbuf_copy+0x188>)
 8007eba:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8007ebe:	493a      	ldr	r1, [pc, #232]	@ (8007fa8 <pbuf_copy+0x194>)
 8007ec0:	4838      	ldr	r0, [pc, #224]	@ (8007fa4 <pbuf_copy+0x190>)
 8007ec2:	f008 fc5d 	bl	8010780 <printf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	895b      	ldrh	r3, [r3, #10]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d906      	bls.n	8007ee0 <pbuf_copy+0xcc>
 8007ed2:	4b32      	ldr	r3, [pc, #200]	@ (8007f9c <pbuf_copy+0x188>)
 8007ed4:	f240 32da 	movw	r2, #986	@ 0x3da
 8007ed8:	4934      	ldr	r1, [pc, #208]	@ (8007fac <pbuf_copy+0x198>)
 8007eda:	4832      	ldr	r0, [pc, #200]	@ (8007fa4 <pbuf_copy+0x190>)
 8007edc:	f008 fc50 	bl	8010780 <printf>
    if (offset_from >= p_from->len) {
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	895b      	ldrh	r3, [r3, #10]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d304      	bcc.n	8007ef6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	895b      	ldrh	r3, [r3, #10]
 8007efa:	461a      	mov	r2, r3
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d114      	bne.n	8007f2c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007f02:	2300      	movs	r3, #0
 8007f04:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10c      	bne.n	8007f2c <pbuf_copy+0x118>
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d009      	beq.n	8007f2c <pbuf_copy+0x118>
 8007f18:	4b20      	ldr	r3, [pc, #128]	@ (8007f9c <pbuf_copy+0x188>)
 8007f1a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8007f1e:	4924      	ldr	r1, [pc, #144]	@ (8007fb0 <pbuf_copy+0x19c>)
 8007f20:	4820      	ldr	r0, [pc, #128]	@ (8007fa4 <pbuf_copy+0x190>)
 8007f22:	f008 fc2d 	bl	8010780 <printf>
 8007f26:	f06f 030f 	mvn.w	r3, #15
 8007f2a:	e032      	b.n	8007f92 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d013      	beq.n	8007f5a <pbuf_copy+0x146>
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	895a      	ldrh	r2, [r3, #10]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	891b      	ldrh	r3, [r3, #8]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d10d      	bne.n	8007f5a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d009      	beq.n	8007f5a <pbuf_copy+0x146>
 8007f46:	4b15      	ldr	r3, [pc, #84]	@ (8007f9c <pbuf_copy+0x188>)
 8007f48:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8007f4c:	4919      	ldr	r1, [pc, #100]	@ (8007fb4 <pbuf_copy+0x1a0>)
 8007f4e:	4815      	ldr	r0, [pc, #84]	@ (8007fa4 <pbuf_copy+0x190>)
 8007f50:	f008 fc16 	bl	8010780 <printf>
 8007f54:	f06f 0305 	mvn.w	r3, #5
 8007f58:	e01b      	b.n	8007f92 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d013      	beq.n	8007f88 <pbuf_copy+0x174>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	895a      	ldrh	r2, [r3, #10]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	891b      	ldrh	r3, [r3, #8]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d10d      	bne.n	8007f88 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d009      	beq.n	8007f88 <pbuf_copy+0x174>
 8007f74:	4b09      	ldr	r3, [pc, #36]	@ (8007f9c <pbuf_copy+0x188>)
 8007f76:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8007f7a:	490e      	ldr	r1, [pc, #56]	@ (8007fb4 <pbuf_copy+0x1a0>)
 8007f7c:	4809      	ldr	r0, [pc, #36]	@ (8007fa4 <pbuf_copy+0x190>)
 8007f7e:	f008 fbff 	bl	8010780 <printf>
 8007f82:	f06f 0305 	mvn.w	r3, #5
 8007f86:	e004      	b.n	8007f92 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f47f af61 	bne.w	8007e52 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	0801565c 	.word	0x0801565c
 8007fa0:	08015904 	.word	0x08015904
 8007fa4:	080156bc 	.word	0x080156bc
 8007fa8:	08015934 	.word	0x08015934
 8007fac:	0801594c 	.word	0x0801594c
 8007fb0:	08015968 	.word	0x08015968
 8007fb4:	08015978 	.word	0x08015978

08007fb8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	4611      	mov	r1, r2
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	80fb      	strh	r3, [r7, #6]
 8007fca:	4613      	mov	r3, r2
 8007fcc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d108      	bne.n	8007fee <pbuf_copy_partial+0x36>
 8007fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800808c <pbuf_copy_partial+0xd4>)
 8007fde:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007fe2:	492b      	ldr	r1, [pc, #172]	@ (8008090 <pbuf_copy_partial+0xd8>)
 8007fe4:	482b      	ldr	r0, [pc, #172]	@ (8008094 <pbuf_copy_partial+0xdc>)
 8007fe6:	f008 fbcb 	bl	8010780 <printf>
 8007fea:	2300      	movs	r3, #0
 8007fec:	e04a      	b.n	8008084 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d108      	bne.n	8008006 <pbuf_copy_partial+0x4e>
 8007ff4:	4b25      	ldr	r3, [pc, #148]	@ (800808c <pbuf_copy_partial+0xd4>)
 8007ff6:	f240 420b 	movw	r2, #1035	@ 0x40b
 8007ffa:	4927      	ldr	r1, [pc, #156]	@ (8008098 <pbuf_copy_partial+0xe0>)
 8007ffc:	4825      	ldr	r0, [pc, #148]	@ (8008094 <pbuf_copy_partial+0xdc>)
 8007ffe:	f008 fbbf 	bl	8010780 <printf>
 8008002:	2300      	movs	r3, #0
 8008004:	e03e      	b.n	8008084 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	61fb      	str	r3, [r7, #28]
 800800a:	e034      	b.n	8008076 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800800c:	88bb      	ldrh	r3, [r7, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00a      	beq.n	8008028 <pbuf_copy_partial+0x70>
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	895b      	ldrh	r3, [r3, #10]
 8008016:	88ba      	ldrh	r2, [r7, #4]
 8008018:	429a      	cmp	r2, r3
 800801a:	d305      	bcc.n	8008028 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	895b      	ldrh	r3, [r3, #10]
 8008020:	88ba      	ldrh	r2, [r7, #4]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	80bb      	strh	r3, [r7, #4]
 8008026:	e023      	b.n	8008070 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	895a      	ldrh	r2, [r3, #10]
 800802c:	88bb      	ldrh	r3, [r7, #4]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008032:	8b3a      	ldrh	r2, [r7, #24]
 8008034:	88fb      	ldrh	r3, [r7, #6]
 8008036:	429a      	cmp	r2, r3
 8008038:	d901      	bls.n	800803e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800803a:	88fb      	ldrh	r3, [r7, #6]
 800803c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800803e:	8b7b      	ldrh	r3, [r7, #26]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	18d0      	adds	r0, r2, r3
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	685a      	ldr	r2, [r3, #4]
 8008048:	88bb      	ldrh	r3, [r7, #4]
 800804a:	4413      	add	r3, r2
 800804c:	8b3a      	ldrh	r2, [r7, #24]
 800804e:	4619      	mov	r1, r3
 8008050:	f008 fc92 	bl	8010978 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008054:	8afa      	ldrh	r2, [r7, #22]
 8008056:	8b3b      	ldrh	r3, [r7, #24]
 8008058:	4413      	add	r3, r2
 800805a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800805c:	8b7a      	ldrh	r2, [r7, #26]
 800805e:	8b3b      	ldrh	r3, [r7, #24]
 8008060:	4413      	add	r3, r2
 8008062:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008064:	88fa      	ldrh	r2, [r7, #6]
 8008066:	8b3b      	ldrh	r3, [r7, #24]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	61fb      	str	r3, [r7, #28]
 8008076:	88fb      	ldrh	r3, [r7, #6]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d002      	beq.n	8008082 <pbuf_copy_partial+0xca>
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1c4      	bne.n	800800c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008082:	8afb      	ldrh	r3, [r7, #22]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3720      	adds	r7, #32
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	0801565c 	.word	0x0801565c
 8008090:	080159a4 	.word	0x080159a4
 8008094:	080156bc 	.word	0x080156bc
 8008098:	080159c4 	.word	0x080159c4

0800809c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b088      	sub	sp, #32
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	4613      	mov	r3, r2
 80080a8:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80080aa:	88fb      	ldrh	r3, [r7, #6]
 80080ac:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d109      	bne.n	80080cc <pbuf_take+0x30>
 80080b8:	4b3a      	ldr	r3, [pc, #232]	@ (80081a4 <pbuf_take+0x108>)
 80080ba:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 80080be:	493a      	ldr	r1, [pc, #232]	@ (80081a8 <pbuf_take+0x10c>)
 80080c0:	483a      	ldr	r0, [pc, #232]	@ (80081ac <pbuf_take+0x110>)
 80080c2:	f008 fb5d 	bl	8010780 <printf>
 80080c6:	f06f 030f 	mvn.w	r3, #15
 80080ca:	e067      	b.n	800819c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d109      	bne.n	80080e6 <pbuf_take+0x4a>
 80080d2:	4b34      	ldr	r3, [pc, #208]	@ (80081a4 <pbuf_take+0x108>)
 80080d4:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 80080d8:	4935      	ldr	r1, [pc, #212]	@ (80081b0 <pbuf_take+0x114>)
 80080da:	4834      	ldr	r0, [pc, #208]	@ (80081ac <pbuf_take+0x110>)
 80080dc:	f008 fb50 	bl	8010780 <printf>
 80080e0:	f06f 030f 	mvn.w	r3, #15
 80080e4:	e05a      	b.n	800819c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	891b      	ldrh	r3, [r3, #8]
 80080ea:	88fa      	ldrh	r2, [r7, #6]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d909      	bls.n	8008104 <pbuf_take+0x68>
 80080f0:	4b2c      	ldr	r3, [pc, #176]	@ (80081a4 <pbuf_take+0x108>)
 80080f2:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 80080f6:	492f      	ldr	r1, [pc, #188]	@ (80081b4 <pbuf_take+0x118>)
 80080f8:	482c      	ldr	r0, [pc, #176]	@ (80081ac <pbuf_take+0x110>)
 80080fa:	f008 fb41 	bl	8010780 <printf>
 80080fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008102:	e04b      	b.n	800819c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d007      	beq.n	800811a <pbuf_take+0x7e>
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d004      	beq.n	800811a <pbuf_take+0x7e>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	891b      	ldrh	r3, [r3, #8]
 8008114:	88fa      	ldrh	r2, [r7, #6]
 8008116:	429a      	cmp	r2, r3
 8008118:	d902      	bls.n	8008120 <pbuf_take+0x84>
    return ERR_ARG;
 800811a:	f06f 030f 	mvn.w	r3, #15
 800811e:	e03d      	b.n	800819c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	61fb      	str	r3, [r7, #28]
 8008124:	e028      	b.n	8008178 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d106      	bne.n	800813a <pbuf_take+0x9e>
 800812c:	4b1d      	ldr	r3, [pc, #116]	@ (80081a4 <pbuf_take+0x108>)
 800812e:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8008132:	4921      	ldr	r1, [pc, #132]	@ (80081b8 <pbuf_take+0x11c>)
 8008134:	481d      	ldr	r0, [pc, #116]	@ (80081ac <pbuf_take+0x110>)
 8008136:	f008 fb23 	bl	8010780 <printf>
    buf_copy_len = total_copy_len;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	895b      	ldrh	r3, [r3, #10]
 8008142:	461a      	mov	r2, r3
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	4293      	cmp	r3, r2
 8008148:	d902      	bls.n	8008150 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	895b      	ldrh	r3, [r3, #10]
 800814e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	6858      	ldr	r0, [r3, #4]
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	4413      	add	r3, r2
 800815a:	69ba      	ldr	r2, [r7, #24]
 800815c:	4619      	mov	r1, r3
 800815e:	f008 fc0b 	bl	8010978 <memcpy>
    total_copy_len -= buf_copy_len;
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	1ad3      	subs	r3, r2, r3
 8008168:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	4413      	add	r3, r2
 8008170:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	61fb      	str	r3, [r7, #28]
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1d3      	bne.n	8008126 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d103      	bne.n	800818c <pbuf_take+0xf0>
 8008184:	88fb      	ldrh	r3, [r7, #6]
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	429a      	cmp	r2, r3
 800818a:	d006      	beq.n	800819a <pbuf_take+0xfe>
 800818c:	4b05      	ldr	r3, [pc, #20]	@ (80081a4 <pbuf_take+0x108>)
 800818e:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8008192:	490a      	ldr	r1, [pc, #40]	@ (80081bc <pbuf_take+0x120>)
 8008194:	4805      	ldr	r0, [pc, #20]	@ (80081ac <pbuf_take+0x110>)
 8008196:	f008 faf3 	bl	8010780 <printf>
  return ERR_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3720      	adds	r7, #32
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	0801565c 	.word	0x0801565c
 80081a8:	08015a34 	.word	0x08015a34
 80081ac:	080156bc 	.word	0x080156bc
 80081b0:	08015a4c 	.word	0x08015a4c
 80081b4:	08015a68 	.word	0x08015a68
 80081b8:	08015a88 	.word	0x08015a88
 80081bc:	08015aa0 	.word	0x08015aa0

080081c0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	4603      	mov	r3, r0
 80081c8:	603a      	str	r2, [r7, #0]
 80081ca:	71fb      	strb	r3, [r7, #7]
 80081cc:	460b      	mov	r3, r1
 80081ce:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	8919      	ldrh	r1, [r3, #8]
 80081d4:	88ba      	ldrh	r2, [r7, #4]
 80081d6:	79fb      	ldrb	r3, [r7, #7]
 80081d8:	4618      	mov	r0, r3
 80081da:	f7ff fa0f 	bl	80075fc <pbuf_alloc>
 80081de:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d101      	bne.n	80081ea <pbuf_clone+0x2a>
    return NULL;
 80081e6:	2300      	movs	r3, #0
 80081e8:	e011      	b.n	800820e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f7ff fe11 	bl	8007e14 <pbuf_copy>
 80081f2:	4603      	mov	r3, r0
 80081f4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80081f6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d006      	beq.n	800820c <pbuf_clone+0x4c>
 80081fe:	4b06      	ldr	r3, [pc, #24]	@ (8008218 <pbuf_clone+0x58>)
 8008200:	f240 5224 	movw	r2, #1316	@ 0x524
 8008204:	4905      	ldr	r1, [pc, #20]	@ (800821c <pbuf_clone+0x5c>)
 8008206:	4806      	ldr	r0, [pc, #24]	@ (8008220 <pbuf_clone+0x60>)
 8008208:	f008 faba 	bl	8010780 <printf>
  return q;
 800820c:	68fb      	ldr	r3, [r7, #12]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	0801565c 	.word	0x0801565c
 800821c:	08015ad0 	.word	0x08015ad0
 8008220:	080156bc 	.word	0x080156bc

08008224 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008228:	f008 f9cc 	bl	80105c4 <rand>
 800822c:	4603      	mov	r3, r0
 800822e:	b29b      	uxth	r3, r3
 8008230:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008234:	b29b      	uxth	r3, r3
 8008236:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800823a:	b29a      	uxth	r2, r3
 800823c:	4b01      	ldr	r3, [pc, #4]	@ (8008244 <tcp_init+0x20>)
 800823e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008240:	bf00      	nop
 8008242:	bd80      	pop	{r7, pc}
 8008244:	20000024 	.word	0x20000024

08008248 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	7d1b      	ldrb	r3, [r3, #20]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d105      	bne.n	8008264 <tcp_free+0x1c>
 8008258:	4b06      	ldr	r3, [pc, #24]	@ (8008274 <tcp_free+0x2c>)
 800825a:	22d4      	movs	r2, #212	@ 0xd4
 800825c:	4906      	ldr	r1, [pc, #24]	@ (8008278 <tcp_free+0x30>)
 800825e:	4807      	ldr	r0, [pc, #28]	@ (800827c <tcp_free+0x34>)
 8008260:	f008 fa8e 	bl	8010780 <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008264:	6879      	ldr	r1, [r7, #4]
 8008266:	2001      	movs	r0, #1
 8008268:	f7fe fe36 	bl	8006ed8 <memp_free>
}
 800826c:	bf00      	nop
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	08015b5c 	.word	0x08015b5c
 8008278:	08015b8c 	.word	0x08015b8c
 800827c:	08015ba0 	.word	0x08015ba0

08008280 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	7d1b      	ldrb	r3, [r3, #20]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d105      	bne.n	800829c <tcp_free_listen+0x1c>
 8008290:	4b06      	ldr	r3, [pc, #24]	@ (80082ac <tcp_free_listen+0x2c>)
 8008292:	22df      	movs	r2, #223	@ 0xdf
 8008294:	4906      	ldr	r1, [pc, #24]	@ (80082b0 <tcp_free_listen+0x30>)
 8008296:	4807      	ldr	r0, [pc, #28]	@ (80082b4 <tcp_free_listen+0x34>)
 8008298:	f008 fa72 	bl	8010780 <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800829c:	6879      	ldr	r1, [r7, #4]
 800829e:	2002      	movs	r0, #2
 80082a0:	f7fe fe1a 	bl	8006ed8 <memp_free>
}
 80082a4:	bf00      	nop
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	08015b5c 	.word	0x08015b5c
 80082b0:	08015bc8 	.word	0x08015bc8
 80082b4:	08015ba0 	.word	0x08015ba0

080082b8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80082bc:	f000 fea4 	bl	8009008 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80082c0:	4b07      	ldr	r3, [pc, #28]	@ (80082e0 <tcp_tmr+0x28>)
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	3301      	adds	r3, #1
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	4b05      	ldr	r3, [pc, #20]	@ (80082e0 <tcp_tmr+0x28>)
 80082ca:	701a      	strb	r2, [r3, #0]
 80082cc:	4b04      	ldr	r3, [pc, #16]	@ (80082e0 <tcp_tmr+0x28>)
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	f003 0301 	and.w	r3, r3, #1
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80082d8:	f000 fb54 	bl	8008984 <tcp_slowtmr>
  }
}
 80082dc:	bf00      	nop
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	20008a79 	.word	0x20008a79

080082e4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d105      	bne.n	8008300 <tcp_remove_listener+0x1c>
 80082f4:	4b0d      	ldr	r3, [pc, #52]	@ (800832c <tcp_remove_listener+0x48>)
 80082f6:	22ff      	movs	r2, #255	@ 0xff
 80082f8:	490d      	ldr	r1, [pc, #52]	@ (8008330 <tcp_remove_listener+0x4c>)
 80082fa:	480e      	ldr	r0, [pc, #56]	@ (8008334 <tcp_remove_listener+0x50>)
 80082fc:	f008 fa40 	bl	8010780 <printf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	e00a      	b.n	800831c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	429a      	cmp	r2, r3
 800830e:	d102      	bne.n	8008316 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	60fb      	str	r3, [r7, #12]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1f1      	bne.n	8008306 <tcp_remove_listener+0x22>
    }
  }
}
 8008322:	bf00      	nop
 8008324:	bf00      	nop
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	08015b5c 	.word	0x08015b5c
 8008330:	08015be4 	.word	0x08015be4
 8008334:	08015ba0 	.word	0x08015ba0

08008338 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d106      	bne.n	8008354 <tcp_listen_closed+0x1c>
 8008346:	4b14      	ldr	r3, [pc, #80]	@ (8008398 <tcp_listen_closed+0x60>)
 8008348:	f240 1211 	movw	r2, #273	@ 0x111
 800834c:	4913      	ldr	r1, [pc, #76]	@ (800839c <tcp_listen_closed+0x64>)
 800834e:	4814      	ldr	r0, [pc, #80]	@ (80083a0 <tcp_listen_closed+0x68>)
 8008350:	f008 fa16 	bl	8010780 <printf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	7d1b      	ldrb	r3, [r3, #20]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d006      	beq.n	800836a <tcp_listen_closed+0x32>
 800835c:	4b0e      	ldr	r3, [pc, #56]	@ (8008398 <tcp_listen_closed+0x60>)
 800835e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008362:	4910      	ldr	r1, [pc, #64]	@ (80083a4 <tcp_listen_closed+0x6c>)
 8008364:	480e      	ldr	r0, [pc, #56]	@ (80083a0 <tcp_listen_closed+0x68>)
 8008366:	f008 fa0b 	bl	8010780 <printf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800836a:	2301      	movs	r3, #1
 800836c:	60fb      	str	r3, [r7, #12]
 800836e:	e00b      	b.n	8008388 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008370:	4a0d      	ldr	r2, [pc, #52]	@ (80083a8 <tcp_listen_closed+0x70>)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6879      	ldr	r1, [r7, #4]
 800837c:	4618      	mov	r0, r3
 800837e:	f7ff ffb1 	bl	80082e4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	3301      	adds	r3, #1
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2b03      	cmp	r3, #3
 800838c:	d9f0      	bls.n	8008370 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800838e:	bf00      	nop
 8008390:	bf00      	nop
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	08015b5c 	.word	0x08015b5c
 800839c:	08015c0c 	.word	0x08015c0c
 80083a0:	08015ba0 	.word	0x08015ba0
 80083a4:	08015c18 	.word	0x08015c18
 80083a8:	08017b34 	.word	0x08017b34

080083ac <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80083ac:	b5b0      	push	{r4, r5, r7, lr}
 80083ae:	b088      	sub	sp, #32
 80083b0:	af04      	add	r7, sp, #16
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	460b      	mov	r3, r1
 80083b6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d106      	bne.n	80083cc <tcp_close_shutdown+0x20>
 80083be:	4b63      	ldr	r3, [pc, #396]	@ (800854c <tcp_close_shutdown+0x1a0>)
 80083c0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80083c4:	4962      	ldr	r1, [pc, #392]	@ (8008550 <tcp_close_shutdown+0x1a4>)
 80083c6:	4863      	ldr	r0, [pc, #396]	@ (8008554 <tcp_close_shutdown+0x1a8>)
 80083c8:	f008 f9da 	bl	8010780 <printf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80083cc:	78fb      	ldrb	r3, [r7, #3]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d066      	beq.n	80084a0 <tcp_close_shutdown+0xf4>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	7d1b      	ldrb	r3, [r3, #20]
 80083d6:	2b04      	cmp	r3, #4
 80083d8:	d003      	beq.n	80083e2 <tcp_close_shutdown+0x36>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	7d1b      	ldrb	r3, [r3, #20]
 80083de:	2b07      	cmp	r3, #7
 80083e0:	d15e      	bne.n	80084a0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d104      	bne.n	80083f4 <tcp_close_shutdown+0x48>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083ee:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80083f2:	d055      	beq.n	80084a0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	8b5b      	ldrh	r3, [r3, #26]
 80083f8:	f003 0310 	and.w	r3, r3, #16
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d106      	bne.n	800840e <tcp_close_shutdown+0x62>
 8008400:	4b52      	ldr	r3, [pc, #328]	@ (800854c <tcp_close_shutdown+0x1a0>)
 8008402:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8008406:	4954      	ldr	r1, [pc, #336]	@ (8008558 <tcp_close_shutdown+0x1ac>)
 8008408:	4852      	ldr	r0, [pc, #328]	@ (8008554 <tcp_close_shutdown+0x1a8>)
 800840a:	f008 f9b9 	bl	8010780 <printf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008416:	687d      	ldr	r5, [r7, #4]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	3304      	adds	r3, #4
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	8ad2      	ldrh	r2, [r2, #22]
 8008420:	6879      	ldr	r1, [r7, #4]
 8008422:	8b09      	ldrh	r1, [r1, #24]
 8008424:	9102      	str	r1, [sp, #8]
 8008426:	9201      	str	r2, [sp, #4]
 8008428:	9300      	str	r3, [sp, #0]
 800842a:	462b      	mov	r3, r5
 800842c:	4622      	mov	r2, r4
 800842e:	4601      	mov	r1, r0
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f004 fe8d 	bl	800d150 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f001 f8c8 	bl	80095cc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800843c:	4b47      	ldr	r3, [pc, #284]	@ (800855c <tcp_close_shutdown+0x1b0>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	429a      	cmp	r2, r3
 8008444:	d105      	bne.n	8008452 <tcp_close_shutdown+0xa6>
 8008446:	4b45      	ldr	r3, [pc, #276]	@ (800855c <tcp_close_shutdown+0x1b0>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	4a43      	ldr	r2, [pc, #268]	@ (800855c <tcp_close_shutdown+0x1b0>)
 800844e:	6013      	str	r3, [r2, #0]
 8008450:	e013      	b.n	800847a <tcp_close_shutdown+0xce>
 8008452:	4b42      	ldr	r3, [pc, #264]	@ (800855c <tcp_close_shutdown+0x1b0>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	60fb      	str	r3, [r7, #12]
 8008458:	e00c      	b.n	8008474 <tcp_close_shutdown+0xc8>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	429a      	cmp	r2, r3
 8008462:	d104      	bne.n	800846e <tcp_close_shutdown+0xc2>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	68da      	ldr	r2, [r3, #12]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	60da      	str	r2, [r3, #12]
 800846c:	e005      	b.n	800847a <tcp_close_shutdown+0xce>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1ef      	bne.n	800845a <tcp_close_shutdown+0xae>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	60da      	str	r2, [r3, #12]
 8008480:	4b37      	ldr	r3, [pc, #220]	@ (8008560 <tcp_close_shutdown+0x1b4>)
 8008482:	2201      	movs	r2, #1
 8008484:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008486:	4b37      	ldr	r3, [pc, #220]	@ (8008564 <tcp_close_shutdown+0x1b8>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	429a      	cmp	r2, r3
 800848e:	d102      	bne.n	8008496 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008490:	f003 fd5c 	bl	800bf4c <tcp_trigger_input_pcb_close>
 8008494:	e002      	b.n	800849c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7ff fed6 	bl	8008248 <tcp_free>
      }
      return ERR_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	e050      	b.n	8008542 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	7d1b      	ldrb	r3, [r3, #20]
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d03b      	beq.n	8008520 <tcp_close_shutdown+0x174>
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	dc44      	bgt.n	8008536 <tcp_close_shutdown+0x18a>
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d002      	beq.n	80084b6 <tcp_close_shutdown+0x10a>
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d02a      	beq.n	800850a <tcp_close_shutdown+0x15e>
 80084b4:	e03f      	b.n	8008536 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	8adb      	ldrh	r3, [r3, #22]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d021      	beq.n	8008502 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80084be:	4b2a      	ldr	r3, [pc, #168]	@ (8008568 <tcp_close_shutdown+0x1bc>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d105      	bne.n	80084d4 <tcp_close_shutdown+0x128>
 80084c8:	4b27      	ldr	r3, [pc, #156]	@ (8008568 <tcp_close_shutdown+0x1bc>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	4a26      	ldr	r2, [pc, #152]	@ (8008568 <tcp_close_shutdown+0x1bc>)
 80084d0:	6013      	str	r3, [r2, #0]
 80084d2:	e013      	b.n	80084fc <tcp_close_shutdown+0x150>
 80084d4:	4b24      	ldr	r3, [pc, #144]	@ (8008568 <tcp_close_shutdown+0x1bc>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	60bb      	str	r3, [r7, #8]
 80084da:	e00c      	b.n	80084f6 <tcp_close_shutdown+0x14a>
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d104      	bne.n	80084f0 <tcp_close_shutdown+0x144>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68da      	ldr	r2, [r3, #12]
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	60da      	str	r2, [r3, #12]
 80084ee:	e005      	b.n	80084fc <tcp_close_shutdown+0x150>
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	60bb      	str	r3, [r7, #8]
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1ef      	bne.n	80084dc <tcp_close_shutdown+0x130>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7ff fea0 	bl	8008248 <tcp_free>
      break;
 8008508:	e01a      	b.n	8008540 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7ff ff14 	bl	8008338 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008510:	6879      	ldr	r1, [r7, #4]
 8008512:	4816      	ldr	r0, [pc, #88]	@ (800856c <tcp_close_shutdown+0x1c0>)
 8008514:	f001 f8aa 	bl	800966c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f7ff feb1 	bl	8008280 <tcp_free_listen>
      break;
 800851e:	e00f      	b.n	8008540 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008520:	6879      	ldr	r1, [r7, #4]
 8008522:	480e      	ldr	r0, [pc, #56]	@ (800855c <tcp_close_shutdown+0x1b0>)
 8008524:	f001 f8a2 	bl	800966c <tcp_pcb_remove>
 8008528:	4b0d      	ldr	r3, [pc, #52]	@ (8008560 <tcp_close_shutdown+0x1b4>)
 800852a:	2201      	movs	r2, #1
 800852c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7ff fe8a 	bl	8008248 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008534:	e004      	b.n	8008540 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f81a 	bl	8008570 <tcp_close_shutdown_fin>
 800853c:	4603      	mov	r3, r0
 800853e:	e000      	b.n	8008542 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bdb0      	pop	{r4, r5, r7, pc}
 800854a:	bf00      	nop
 800854c:	08015b5c 	.word	0x08015b5c
 8008550:	08015c30 	.word	0x08015c30
 8008554:	08015ba0 	.word	0x08015ba0
 8008558:	08015c50 	.word	0x08015c50
 800855c:	20008a70 	.word	0x20008a70
 8008560:	20008a78 	.word	0x20008a78
 8008564:	20008ab0 	.word	0x20008ab0
 8008568:	20008a68 	.word	0x20008a68
 800856c:	20008a6c 	.word	0x20008a6c

08008570 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d106      	bne.n	800858c <tcp_close_shutdown_fin+0x1c>
 800857e:	4b2e      	ldr	r3, [pc, #184]	@ (8008638 <tcp_close_shutdown_fin+0xc8>)
 8008580:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8008584:	492d      	ldr	r1, [pc, #180]	@ (800863c <tcp_close_shutdown_fin+0xcc>)
 8008586:	482e      	ldr	r0, [pc, #184]	@ (8008640 <tcp_close_shutdown_fin+0xd0>)
 8008588:	f008 f8fa 	bl	8010780 <printf>

  switch (pcb->state) {
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	7d1b      	ldrb	r3, [r3, #20]
 8008590:	2b07      	cmp	r3, #7
 8008592:	d020      	beq.n	80085d6 <tcp_close_shutdown_fin+0x66>
 8008594:	2b07      	cmp	r3, #7
 8008596:	dc2b      	bgt.n	80085f0 <tcp_close_shutdown_fin+0x80>
 8008598:	2b03      	cmp	r3, #3
 800859a:	d002      	beq.n	80085a2 <tcp_close_shutdown_fin+0x32>
 800859c:	2b04      	cmp	r3, #4
 800859e:	d00d      	beq.n	80085bc <tcp_close_shutdown_fin+0x4c>
 80085a0:	e026      	b.n	80085f0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f003 fee2 	bl	800c36c <tcp_send_fin>
 80085a8:	4603      	mov	r3, r0
 80085aa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80085ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d11f      	bne.n	80085f4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2205      	movs	r2, #5
 80085b8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80085ba:	e01b      	b.n	80085f4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f003 fed5 	bl	800c36c <tcp_send_fin>
 80085c2:	4603      	mov	r3, r0
 80085c4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80085c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d114      	bne.n	80085f8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2205      	movs	r2, #5
 80085d2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80085d4:	e010      	b.n	80085f8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f003 fec8 	bl	800c36c <tcp_send_fin>
 80085dc:	4603      	mov	r3, r0
 80085de:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80085e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d109      	bne.n	80085fc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2209      	movs	r2, #9
 80085ec:	751a      	strb	r2, [r3, #20]
      }
      break;
 80085ee:	e005      	b.n	80085fc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80085f0:	2300      	movs	r3, #0
 80085f2:	e01c      	b.n	800862e <tcp_close_shutdown_fin+0xbe>
      break;
 80085f4:	bf00      	nop
 80085f6:	e002      	b.n	80085fe <tcp_close_shutdown_fin+0x8e>
      break;
 80085f8:	bf00      	nop
 80085fa:	e000      	b.n	80085fe <tcp_close_shutdown_fin+0x8e>
      break;
 80085fc:	bf00      	nop
  }

  if (err == ERR_OK) {
 80085fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d103      	bne.n	800860e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f003 ffee 	bl	800c5e8 <tcp_output>
 800860c:	e00d      	b.n	800862a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800860e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008612:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008616:	d108      	bne.n	800862a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	8b5b      	ldrh	r3, [r3, #26]
 800861c:	f043 0308 	orr.w	r3, r3, #8
 8008620:	b29a      	uxth	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	e001      	b.n	800862e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800862a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	08015b5c 	.word	0x08015b5c
 800863c:	08015c0c 	.word	0x08015c0c
 8008640:	08015ba0 	.word	0x08015ba0

08008644 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d109      	bne.n	8008666 <tcp_close+0x22>
 8008652:	4b0f      	ldr	r3, [pc, #60]	@ (8008690 <tcp_close+0x4c>)
 8008654:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8008658:	490e      	ldr	r1, [pc, #56]	@ (8008694 <tcp_close+0x50>)
 800865a:	480f      	ldr	r0, [pc, #60]	@ (8008698 <tcp_close+0x54>)
 800865c:	f008 f890 	bl	8010780 <printf>
 8008660:	f06f 030f 	mvn.w	r3, #15
 8008664:	e00f      	b.n	8008686 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	7d1b      	ldrb	r3, [r3, #20]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d006      	beq.n	800867c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	8b5b      	ldrh	r3, [r3, #26]
 8008672:	f043 0310 	orr.w	r3, r3, #16
 8008676:	b29a      	uxth	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800867c:	2101      	movs	r1, #1
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7ff fe94 	bl	80083ac <tcp_close_shutdown>
 8008684:	4603      	mov	r3, r0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	08015b5c 	.word	0x08015b5c
 8008694:	08015c6c 	.word	0x08015c6c
 8008698:	08015ba0 	.word	0x08015ba0

0800869c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b08e      	sub	sp, #56	@ 0x38
 80086a0:	af04      	add	r7, sp, #16
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d107      	bne.n	80086bc <tcp_abandon+0x20>
 80086ac:	4b52      	ldr	r3, [pc, #328]	@ (80087f8 <tcp_abandon+0x15c>)
 80086ae:	f240 223d 	movw	r2, #573	@ 0x23d
 80086b2:	4952      	ldr	r1, [pc, #328]	@ (80087fc <tcp_abandon+0x160>)
 80086b4:	4852      	ldr	r0, [pc, #328]	@ (8008800 <tcp_abandon+0x164>)
 80086b6:	f008 f863 	bl	8010780 <printf>
 80086ba:	e099      	b.n	80087f0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	7d1b      	ldrb	r3, [r3, #20]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d106      	bne.n	80086d2 <tcp_abandon+0x36>
 80086c4:	4b4c      	ldr	r3, [pc, #304]	@ (80087f8 <tcp_abandon+0x15c>)
 80086c6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80086ca:	494e      	ldr	r1, [pc, #312]	@ (8008804 <tcp_abandon+0x168>)
 80086cc:	484c      	ldr	r0, [pc, #304]	@ (8008800 <tcp_abandon+0x164>)
 80086ce:	f008 f857 	bl	8010780 <printf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	7d1b      	ldrb	r3, [r3, #20]
 80086d6:	2b0a      	cmp	r3, #10
 80086d8:	d107      	bne.n	80086ea <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80086da:	6879      	ldr	r1, [r7, #4]
 80086dc:	484a      	ldr	r0, [pc, #296]	@ (8008808 <tcp_abandon+0x16c>)
 80086de:	f000 ffc5 	bl	800966c <tcp_pcb_remove>
    tcp_free(pcb);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7ff fdb0 	bl	8008248 <tcp_free>
 80086e8:	e082      	b.n	80087f0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80086ea:	2300      	movs	r3, #0
 80086ec:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80086ee:	2300      	movs	r3, #0
 80086f0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086f6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086fc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008704:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	7d1b      	ldrb	r3, [r3, #20]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d126      	bne.n	8008762 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	8adb      	ldrh	r3, [r3, #22]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d02e      	beq.n	800877a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800871c:	4b3b      	ldr	r3, [pc, #236]	@ (800880c <tcp_abandon+0x170>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	429a      	cmp	r2, r3
 8008724:	d105      	bne.n	8008732 <tcp_abandon+0x96>
 8008726:	4b39      	ldr	r3, [pc, #228]	@ (800880c <tcp_abandon+0x170>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	4a37      	ldr	r2, [pc, #220]	@ (800880c <tcp_abandon+0x170>)
 800872e:	6013      	str	r3, [r2, #0]
 8008730:	e013      	b.n	800875a <tcp_abandon+0xbe>
 8008732:	4b36      	ldr	r3, [pc, #216]	@ (800880c <tcp_abandon+0x170>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	61fb      	str	r3, [r7, #28]
 8008738:	e00c      	b.n	8008754 <tcp_abandon+0xb8>
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	429a      	cmp	r2, r3
 8008742:	d104      	bne.n	800874e <tcp_abandon+0xb2>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	68da      	ldr	r2, [r3, #12]
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	60da      	str	r2, [r3, #12]
 800874c:	e005      	b.n	800875a <tcp_abandon+0xbe>
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	61fb      	str	r3, [r7, #28]
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1ef      	bne.n	800873a <tcp_abandon+0x9e>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	60da      	str	r2, [r3, #12]
 8008760:	e00b      	b.n	800877a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	8adb      	ldrh	r3, [r3, #22]
 800876a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800876c:	6879      	ldr	r1, [r7, #4]
 800876e:	4828      	ldr	r0, [pc, #160]	@ (8008810 <tcp_abandon+0x174>)
 8008770:	f000 ff7c 	bl	800966c <tcp_pcb_remove>
 8008774:	4b27      	ldr	r3, [pc, #156]	@ (8008814 <tcp_abandon+0x178>)
 8008776:	2201      	movs	r2, #1
 8008778:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800877e:	2b00      	cmp	r3, #0
 8008780:	d004      	beq.n	800878c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008786:	4618      	mov	r0, r3
 8008788:	f000 fd1e 	bl	80091c8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008790:	2b00      	cmp	r3, #0
 8008792:	d004      	beq.n	800879e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008798:	4618      	mov	r0, r3
 800879a:	f000 fd15 	bl	80091c8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d004      	beq.n	80087b0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fd0c 	bl	80091c8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80087b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00e      	beq.n	80087d4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80087b6:	6879      	ldr	r1, [r7, #4]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	3304      	adds	r3, #4
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	8b12      	ldrh	r2, [r2, #24]
 80087c0:	9202      	str	r2, [sp, #8]
 80087c2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80087c4:	9201      	str	r2, [sp, #4]
 80087c6:	9300      	str	r3, [sp, #0]
 80087c8:	460b      	mov	r3, r1
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	69b9      	ldr	r1, [r7, #24]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f004 fcbe 	bl	800d150 <tcp_rst>
    }
    last_state = pcb->state;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	7d1b      	ldrb	r3, [r3, #20]
 80087d8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7ff fd34 	bl	8008248 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d004      	beq.n	80087f0 <tcp_abandon+0x154>
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f06f 010c 	mvn.w	r1, #12
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	4798      	blx	r3
  }
}
 80087f0:	3728      	adds	r7, #40	@ 0x28
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	08015b5c 	.word	0x08015b5c
 80087fc:	08015ca0 	.word	0x08015ca0
 8008800:	08015ba0 	.word	0x08015ba0
 8008804:	08015cbc 	.word	0x08015cbc
 8008808:	20008a74 	.word	0x20008a74
 800880c:	20008a68 	.word	0x20008a68
 8008810:	20008a70 	.word	0x20008a70
 8008814:	20008a78 	.word	0x20008a78

08008818 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008820:	2101      	movs	r1, #1
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f7ff ff3a 	bl	800869c <tcp_abandon>
}
 8008828:	bf00      	nop
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d106      	bne.n	800884c <tcp_update_rcv_ann_wnd+0x1c>
 800883e:	4b25      	ldr	r3, [pc, #148]	@ (80088d4 <tcp_update_rcv_ann_wnd+0xa4>)
 8008840:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8008844:	4924      	ldr	r1, [pc, #144]	@ (80088d8 <tcp_update_rcv_ann_wnd+0xa8>)
 8008846:	4825      	ldr	r0, [pc, #148]	@ (80088dc <tcp_update_rcv_ann_wnd+0xac>)
 8008848:	f007 ff9a 	bl	8010780 <printf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8008854:	4413      	add	r3, r2
 8008856:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8008860:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8008864:	bf28      	it	cs
 8008866:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800886a:	b292      	uxth	r2, r2
 800886c:	4413      	add	r3, r2
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	db08      	blt.n	8008888 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	e020      	b.n	80088ca <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	2b00      	cmp	r3, #0
 8008894:	dd03      	ble.n	800889e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800889c:	e014      	b.n	80088c8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088b0:	d306      	bcc.n	80088c0 <tcp_update_rcv_ann_wnd+0x90>
 80088b2:	4b08      	ldr	r3, [pc, #32]	@ (80088d4 <tcp_update_rcv_ann_wnd+0xa4>)
 80088b4:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80088b8:	4909      	ldr	r1, [pc, #36]	@ (80088e0 <tcp_update_rcv_ann_wnd+0xb0>)
 80088ba:	4808      	ldr	r0, [pc, #32]	@ (80088dc <tcp_update_rcv_ann_wnd+0xac>)
 80088bc:	f007 ff60 	bl	8010780 <printf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80088c8:	2300      	movs	r3, #0
  }
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	08015b5c 	.word	0x08015b5c
 80088d8:	08015db8 	.word	0x08015db8
 80088dc:	08015ba0 	.word	0x08015ba0
 80088e0:	08015ddc 	.word	0x08015ddc

080088e4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d107      	bne.n	8008906 <tcp_recved+0x22>
 80088f6:	4b1f      	ldr	r3, [pc, #124]	@ (8008974 <tcp_recved+0x90>)
 80088f8:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80088fc:	491e      	ldr	r1, [pc, #120]	@ (8008978 <tcp_recved+0x94>)
 80088fe:	481f      	ldr	r0, [pc, #124]	@ (800897c <tcp_recved+0x98>)
 8008900:	f007 ff3e 	bl	8010780 <printf>
 8008904:	e032      	b.n	800896c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	7d1b      	ldrb	r3, [r3, #20]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d106      	bne.n	800891c <tcp_recved+0x38>
 800890e:	4b19      	ldr	r3, [pc, #100]	@ (8008974 <tcp_recved+0x90>)
 8008910:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8008914:	491a      	ldr	r1, [pc, #104]	@ (8008980 <tcp_recved+0x9c>)
 8008916:	4819      	ldr	r0, [pc, #100]	@ (800897c <tcp_recved+0x98>)
 8008918:	f007 ff32 	bl	8010780 <printf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008920:	887b      	ldrh	r3, [r7, #2]
 8008922:	4413      	add	r3, r2
 8008924:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008926:	89fb      	ldrh	r3, [r7, #14]
 8008928:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800892c:	d804      	bhi.n	8008938 <tcp_recved+0x54>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008932:	89fa      	ldrh	r2, [r7, #14]
 8008934:	429a      	cmp	r2, r3
 8008936:	d204      	bcs.n	8008942 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800893e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008940:	e002      	b.n	8008948 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	89fa      	ldrh	r2, [r7, #14]
 8008946:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f7ff ff71 	bl	8008830 <tcp_update_rcv_ann_wnd>
 800894e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8008956:	d309      	bcc.n	800896c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	8b5b      	ldrh	r3, [r3, #26]
 800895c:	f043 0302 	orr.w	r3, r3, #2
 8008960:	b29a      	uxth	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f003 fe3e 	bl	800c5e8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	08015b5c 	.word	0x08015b5c
 8008978:	08015df8 	.word	0x08015df8
 800897c:	08015ba0 	.word	0x08015ba0
 8008980:	08015e10 	.word	0x08015e10

08008984 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008984:	b5b0      	push	{r4, r5, r7, lr}
 8008986:	b090      	sub	sp, #64	@ 0x40
 8008988:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800898a:	2300      	movs	r3, #0
 800898c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8008990:	4b95      	ldr	r3, [pc, #596]	@ (8008be8 <tcp_slowtmr+0x264>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3301      	adds	r3, #1
 8008996:	4a94      	ldr	r2, [pc, #592]	@ (8008be8 <tcp_slowtmr+0x264>)
 8008998:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800899a:	4b94      	ldr	r3, [pc, #592]	@ (8008bec <tcp_slowtmr+0x268>)
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	3301      	adds	r3, #1
 80089a0:	b2da      	uxtb	r2, r3
 80089a2:	4b92      	ldr	r3, [pc, #584]	@ (8008bec <tcp_slowtmr+0x268>)
 80089a4:	701a      	strb	r2, [r3, #0]
 80089a6:	e000      	b.n	80089aa <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80089a8:	bf00      	nop
  prev = NULL;
 80089aa:	2300      	movs	r3, #0
 80089ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80089ae:	4b90      	ldr	r3, [pc, #576]	@ (8008bf0 <tcp_slowtmr+0x26c>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80089b4:	e29d      	b.n	8008ef2 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80089b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b8:	7d1b      	ldrb	r3, [r3, #20]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d106      	bne.n	80089cc <tcp_slowtmr+0x48>
 80089be:	4b8d      	ldr	r3, [pc, #564]	@ (8008bf4 <tcp_slowtmr+0x270>)
 80089c0:	f240 42be 	movw	r2, #1214	@ 0x4be
 80089c4:	498c      	ldr	r1, [pc, #560]	@ (8008bf8 <tcp_slowtmr+0x274>)
 80089c6:	488d      	ldr	r0, [pc, #564]	@ (8008bfc <tcp_slowtmr+0x278>)
 80089c8:	f007 feda 	bl	8010780 <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80089cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ce:	7d1b      	ldrb	r3, [r3, #20]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d106      	bne.n	80089e2 <tcp_slowtmr+0x5e>
 80089d4:	4b87      	ldr	r3, [pc, #540]	@ (8008bf4 <tcp_slowtmr+0x270>)
 80089d6:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80089da:	4989      	ldr	r1, [pc, #548]	@ (8008c00 <tcp_slowtmr+0x27c>)
 80089dc:	4887      	ldr	r0, [pc, #540]	@ (8008bfc <tcp_slowtmr+0x278>)
 80089de:	f007 fecf 	bl	8010780 <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80089e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e4:	7d1b      	ldrb	r3, [r3, #20]
 80089e6:	2b0a      	cmp	r3, #10
 80089e8:	d106      	bne.n	80089f8 <tcp_slowtmr+0x74>
 80089ea:	4b82      	ldr	r3, [pc, #520]	@ (8008bf4 <tcp_slowtmr+0x270>)
 80089ec:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80089f0:	4984      	ldr	r1, [pc, #528]	@ (8008c04 <tcp_slowtmr+0x280>)
 80089f2:	4882      	ldr	r0, [pc, #520]	@ (8008bfc <tcp_slowtmr+0x278>)
 80089f4:	f007 fec4 	bl	8010780 <printf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80089f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089fa:	7f9a      	ldrb	r2, [r3, #30]
 80089fc:	4b7b      	ldr	r3, [pc, #492]	@ (8008bec <tcp_slowtmr+0x268>)
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d105      	bne.n	8008a10 <tcp_slowtmr+0x8c>
      prev = pcb;
 8008a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a06:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8008a0e:	e270      	b.n	8008ef2 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8008a10:	4b76      	ldr	r3, [pc, #472]	@ (8008bec <tcp_slowtmr+0x268>)
 8008a12:	781a      	ldrb	r2, [r3, #0]
 8008a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a16:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a26:	7d1b      	ldrb	r3, [r3, #20]
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d10a      	bne.n	8008a42 <tcp_slowtmr+0xbe>
 8008a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a32:	2b05      	cmp	r3, #5
 8008a34:	d905      	bls.n	8008a42 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8008a36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008a40:	e11e      	b.n	8008c80 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a48:	2b0b      	cmp	r3, #11
 8008a4a:	d905      	bls.n	8008a58 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8008a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a50:	3301      	adds	r3, #1
 8008a52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008a56:	e113      	b.n	8008c80 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8008a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a5a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d075      	beq.n	8008b4e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d006      	beq.n	8008a78 <tcp_slowtmr+0xf4>
 8008a6a:	4b62      	ldr	r3, [pc, #392]	@ (8008bf4 <tcp_slowtmr+0x270>)
 8008a6c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8008a70:	4965      	ldr	r1, [pc, #404]	@ (8008c08 <tcp_slowtmr+0x284>)
 8008a72:	4862      	ldr	r0, [pc, #392]	@ (8008bfc <tcp_slowtmr+0x278>)
 8008a74:	f007 fe84 	bl	8010780 <printf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d106      	bne.n	8008a8e <tcp_slowtmr+0x10a>
 8008a80:	4b5c      	ldr	r3, [pc, #368]	@ (8008bf4 <tcp_slowtmr+0x270>)
 8008a82:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8008a86:	4961      	ldr	r1, [pc, #388]	@ (8008c0c <tcp_slowtmr+0x288>)
 8008a88:	485c      	ldr	r0, [pc, #368]	@ (8008bfc <tcp_slowtmr+0x278>)
 8008a8a:	f007 fe79 	bl	8010780 <printf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a90:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8008a94:	2b0b      	cmp	r3, #11
 8008a96:	d905      	bls.n	8008aa4 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8008a98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008aa2:	e0ed      	b.n	8008c80 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	4a58      	ldr	r2, [pc, #352]	@ (8008c10 <tcp_slowtmr+0x28c>)
 8008aae:	5cd3      	ldrb	r3, [r2, r3]
 8008ab0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8008ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008ab8:	7c7a      	ldrb	r2, [r7, #17]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d907      	bls.n	8008ace <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8008abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	b2da      	uxtb	r2, r3
 8008ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aca:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8008ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008ad4:	7c7a      	ldrb	r2, [r7, #17]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	f200 80d2 	bhi.w	8008c80 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8008adc:	2301      	movs	r3, #1
 8008ade:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8008ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d108      	bne.n	8008afc <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008aea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008aec:	f004 fc24 	bl	800d338 <tcp_zero_window_probe>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d014      	beq.n	8008b20 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8008af6:	2300      	movs	r3, #0
 8008af8:	623b      	str	r3, [r7, #32]
 8008afa:	e011      	b.n	8008b20 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008afe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008b02:	4619      	mov	r1, r3
 8008b04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b06:	f003 fae9 	bl	800c0dc <tcp_split_unsent_seg>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d107      	bne.n	8008b20 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8008b10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b12:	f003 fd69 	bl	800c5e8 <tcp_output>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d101      	bne.n	8008b20 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8008b20:	6a3b      	ldr	r3, [r7, #32]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f000 80ac 	beq.w	8008c80 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8008b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b32:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008b36:	2b06      	cmp	r3, #6
 8008b38:	f200 80a2 	bhi.w	8008c80 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8008b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b3e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008b42:	3301      	adds	r3, #1
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b48:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8008b4c:	e098      	b.n	8008c80 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b50:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	db0f      	blt.n	8008b78 <tcp_slowtmr+0x1f4>
 8008b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b5a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008b5e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d008      	beq.n	8008b78 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8008b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b68:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	3301      	adds	r3, #1
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	b21a      	sxth	r2, r3
 8008b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b76:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8008b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b7a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8008b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b80:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8008b84:	429a      	cmp	r2, r3
 8008b86:	db7b      	blt.n	8008c80 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008b88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b8a:	f004 f821 	bl	800cbd0 <tcp_rexmit_rto_prepare>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d007      	beq.n	8008ba4 <tcp_slowtmr+0x220>
 8008b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d171      	bne.n	8008c80 <tcp_slowtmr+0x2fc>
 8008b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d06d      	beq.n	8008c80 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8008ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba6:	7d1b      	ldrb	r3, [r3, #20]
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d03a      	beq.n	8008c22 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008bb2:	2b0c      	cmp	r3, #12
 8008bb4:	bf28      	it	cs
 8008bb6:	230c      	movcs	r3, #12
 8008bb8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bbc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008bc0:	10db      	asrs	r3, r3, #3
 8008bc2:	b21b      	sxth	r3, r3
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008bcc:	4413      	add	r3, r2
 8008bce:	7efa      	ldrb	r2, [r7, #27]
 8008bd0:	4910      	ldr	r1, [pc, #64]	@ (8008c14 <tcp_slowtmr+0x290>)
 8008bd2:	5c8a      	ldrb	r2, [r1, r2]
 8008bd4:	4093      	lsls	r3, r2
 8008bd6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8008bde:	4293      	cmp	r3, r2
 8008be0:	dc1a      	bgt.n	8008c18 <tcp_slowtmr+0x294>
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	b21a      	sxth	r2, r3
 8008be6:	e019      	b.n	8008c1c <tcp_slowtmr+0x298>
 8008be8:	20008a64 	.word	0x20008a64
 8008bec:	20008a7a 	.word	0x20008a7a
 8008bf0:	20008a70 	.word	0x20008a70
 8008bf4:	08015b5c 	.word	0x08015b5c
 8008bf8:	08015ea0 	.word	0x08015ea0
 8008bfc:	08015ba0 	.word	0x08015ba0
 8008c00:	08015ecc 	.word	0x08015ecc
 8008c04:	08015ef8 	.word	0x08015ef8
 8008c08:	08015f28 	.word	0x08015f28
 8008c0c:	08015f5c 	.word	0x08015f5c
 8008c10:	08017b2c 	.word	0x08017b2c
 8008c14:	08017b1c 	.word	0x08017b1c
 8008c18:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c1e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8008c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c24:	2200      	movs	r2, #0
 8008c26:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008c34:	4293      	cmp	r3, r2
 8008c36:	bf28      	it	cs
 8008c38:	4613      	movcs	r3, r2
 8008c3a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008c3c:	8a7b      	ldrh	r3, [r7, #18]
 8008c3e:	085b      	lsrs	r3, r3, #1
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c44:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c4a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8008c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008c52:	005b      	lsls	r3, r3, #1
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d206      	bcs.n	8008c68 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008c5e:	005b      	lsls	r3, r3, #1
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c64:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8008c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c6a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8008c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c6e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8008c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c74:	2200      	movs	r2, #0
 8008c76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8008c7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c7c:	f004 f818 	bl	800ccb0 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8008c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c82:	7d1b      	ldrb	r3, [r3, #20]
 8008c84:	2b06      	cmp	r3, #6
 8008c86:	d111      	bne.n	8008cac <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8008c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c8a:	8b5b      	ldrh	r3, [r3, #26]
 8008c8c:	f003 0310 	and.w	r3, r3, #16
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00b      	beq.n	8008cac <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008c94:	4b9c      	ldr	r3, [pc, #624]	@ (8008f08 <tcp_slowtmr+0x584>)
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c9a:	6a1b      	ldr	r3, [r3, #32]
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	2b28      	cmp	r3, #40	@ 0x28
 8008ca0:	d904      	bls.n	8008cac <tcp_slowtmr+0x328>
          ++pcb_remove;
 8008ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cae:	7a5b      	ldrb	r3, [r3, #9]
 8008cb0:	f003 0308 	and.w	r3, r3, #8
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d04a      	beq.n	8008d4e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8008cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cba:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	d003      	beq.n	8008cc8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8008cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008cc4:	2b07      	cmp	r3, #7
 8008cc6:	d142      	bne.n	8008d4e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008cc8:	4b8f      	ldr	r3, [pc, #572]	@ (8008f08 <tcp_slowtmr+0x584>)
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cce:	6a1b      	ldr	r3, [r3, #32]
 8008cd0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd4:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8008cd8:	4b8c      	ldr	r3, [pc, #560]	@ (8008f0c <tcp_slowtmr+0x588>)
 8008cda:	440b      	add	r3, r1
 8008cdc:	498c      	ldr	r1, [pc, #560]	@ (8008f10 <tcp_slowtmr+0x58c>)
 8008cde:	fba1 1303 	umull	r1, r3, r1, r3
 8008ce2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d90a      	bls.n	8008cfe <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8008ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cec:	3301      	adds	r3, #1
 8008cee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8008cf2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008cfc:	e027      	b.n	8008d4e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008cfe:	4b82      	ldr	r3, [pc, #520]	@ (8008f08 <tcp_slowtmr+0x584>)
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8008d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d10:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008d14:	4618      	mov	r0, r3
 8008d16:	4b7f      	ldr	r3, [pc, #508]	@ (8008f14 <tcp_slowtmr+0x590>)
 8008d18:	fb00 f303 	mul.w	r3, r0, r3
 8008d1c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008d1e:	497c      	ldr	r1, [pc, #496]	@ (8008f10 <tcp_slowtmr+0x58c>)
 8008d20:	fba1 1303 	umull	r1, r3, r1, r3
 8008d24:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d911      	bls.n	8008d4e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8008d2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d2c:	f004 fac4 	bl	800d2b8 <tcp_keepalive>
 8008d30:	4603      	mov	r3, r0
 8008d32:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8008d36:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d107      	bne.n	8008d4e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8008d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d40:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008d44:	3301      	adds	r3, #1
 8008d46:	b2da      	uxtb	r2, r3
 8008d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d4a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8008d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d011      	beq.n	8008d7a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008d56:	4b6c      	ldr	r3, [pc, #432]	@ (8008f08 <tcp_slowtmr+0x584>)
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d5c:	6a1b      	ldr	r3, [r3, #32]
 8008d5e:	1ad2      	subs	r2, r2, r3
 8008d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d62:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8008d66:	4619      	mov	r1, r3
 8008d68:	460b      	mov	r3, r1
 8008d6a:	005b      	lsls	r3, r3, #1
 8008d6c:	440b      	add	r3, r1
 8008d6e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d302      	bcc.n	8008d7a <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8008d74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d76:	f000 fddd 	bl	8009934 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8008d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d7c:	7d1b      	ldrb	r3, [r3, #20]
 8008d7e:	2b03      	cmp	r3, #3
 8008d80:	d10b      	bne.n	8008d9a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008d82:	4b61      	ldr	r3, [pc, #388]	@ (8008f08 <tcp_slowtmr+0x584>)
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	2b28      	cmp	r3, #40	@ 0x28
 8008d8e:	d904      	bls.n	8008d9a <tcp_slowtmr+0x416>
        ++pcb_remove;
 8008d90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d94:	3301      	adds	r3, #1
 8008d96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8008d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d9c:	7d1b      	ldrb	r3, [r3, #20]
 8008d9e:	2b09      	cmp	r3, #9
 8008da0:	d10b      	bne.n	8008dba <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008da2:	4b59      	ldr	r3, [pc, #356]	@ (8008f08 <tcp_slowtmr+0x584>)
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da8:	6a1b      	ldr	r3, [r3, #32]
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	2bf0      	cmp	r3, #240	@ 0xf0
 8008dae:	d904      	bls.n	8008dba <tcp_slowtmr+0x436>
        ++pcb_remove;
 8008db0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008db4:	3301      	adds	r3, #1
 8008db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8008dba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d060      	beq.n	8008e84 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8008dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dc8:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8008dca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008dcc:	f000 fbfe 	bl	80095cc <tcp_pcb_purge>
      if (prev != NULL) {
 8008dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d010      	beq.n	8008df8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008dd6:	4b50      	ldr	r3, [pc, #320]	@ (8008f18 <tcp_slowtmr+0x594>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d106      	bne.n	8008dee <tcp_slowtmr+0x46a>
 8008de0:	4b4e      	ldr	r3, [pc, #312]	@ (8008f1c <tcp_slowtmr+0x598>)
 8008de2:	f240 526d 	movw	r2, #1389	@ 0x56d
 8008de6:	494e      	ldr	r1, [pc, #312]	@ (8008f20 <tcp_slowtmr+0x59c>)
 8008de8:	484e      	ldr	r0, [pc, #312]	@ (8008f24 <tcp_slowtmr+0x5a0>)
 8008dea:	f007 fcc9 	bl	8010780 <printf>
        prev->next = pcb->next;
 8008dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df0:	68da      	ldr	r2, [r3, #12]
 8008df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df4:	60da      	str	r2, [r3, #12]
 8008df6:	e00f      	b.n	8008e18 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008df8:	4b47      	ldr	r3, [pc, #284]	@ (8008f18 <tcp_slowtmr+0x594>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d006      	beq.n	8008e10 <tcp_slowtmr+0x48c>
 8008e02:	4b46      	ldr	r3, [pc, #280]	@ (8008f1c <tcp_slowtmr+0x598>)
 8008e04:	f240 5271 	movw	r2, #1393	@ 0x571
 8008e08:	4947      	ldr	r1, [pc, #284]	@ (8008f28 <tcp_slowtmr+0x5a4>)
 8008e0a:	4846      	ldr	r0, [pc, #280]	@ (8008f24 <tcp_slowtmr+0x5a0>)
 8008e0c:	f007 fcb8 	bl	8010780 <printf>
        tcp_active_pcbs = pcb->next;
 8008e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	4a40      	ldr	r2, [pc, #256]	@ (8008f18 <tcp_slowtmr+0x594>)
 8008e16:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8008e18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d013      	beq.n	8008e48 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e22:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e26:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008e28:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8008e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e30:	8ad2      	ldrh	r2, [r2, #22]
 8008e32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e34:	8b09      	ldrh	r1, [r1, #24]
 8008e36:	9102      	str	r1, [sp, #8]
 8008e38:	9201      	str	r2, [sp, #4]
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	462b      	mov	r3, r5
 8008e3e:	4622      	mov	r2, r4
 8008e40:	4601      	mov	r1, r0
 8008e42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e44:	f004 f984 	bl	800d150 <tcp_rst>
      err_arg = pcb->callback_arg;
 8008e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e50:	7d1b      	ldrb	r3, [r3, #20]
 8008e52:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e56:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008e5e:	6838      	ldr	r0, [r7, #0]
 8008e60:	f7ff f9f2 	bl	8008248 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8008e64:	4b31      	ldr	r3, [pc, #196]	@ (8008f2c <tcp_slowtmr+0x5a8>)
 8008e66:	2200      	movs	r2, #0
 8008e68:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d004      	beq.n	8008e7a <tcp_slowtmr+0x4f6>
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f06f 010c 	mvn.w	r1, #12
 8008e76:	68b8      	ldr	r0, [r7, #8]
 8008e78:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8008f2c <tcp_slowtmr+0x5a8>)
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d037      	beq.n	8008ef2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8008e82:	e592      	b.n	80089aa <tcp_slowtmr+0x26>
      prev = pcb;
 8008e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e86:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8008e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e90:	7f1b      	ldrb	r3, [r3, #28]
 8008e92:	3301      	adds	r3, #1
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e98:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e9c:	7f1a      	ldrb	r2, [r3, #28]
 8008e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea0:	7f5b      	ldrb	r3, [r3, #29]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d325      	bcc.n	8008ef2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8008ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8008eac:	4b1f      	ldr	r3, [pc, #124]	@ (8008f2c <tcp_slowtmr+0x5a8>)
 8008eae:	2200      	movs	r2, #0
 8008eb0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00b      	beq.n	8008ed4 <tcp_slowtmr+0x550>
 8008ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ec2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ec4:	6912      	ldr	r2, [r2, #16]
 8008ec6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ec8:	4610      	mov	r0, r2
 8008eca:	4798      	blx	r3
 8008ecc:	4603      	mov	r3, r0
 8008ece:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8008ed2:	e002      	b.n	8008eda <tcp_slowtmr+0x556>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8008eda:	4b14      	ldr	r3, [pc, #80]	@ (8008f2c <tcp_slowtmr+0x5a8>)
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f47f ad62 	bne.w	80089a8 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008ee4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d102      	bne.n	8008ef2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8008eec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008eee:	f003 fb7b 	bl	800c5e8 <tcp_output>
  while (pcb != NULL) {
 8008ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f47f ad5e 	bne.w	80089b6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8008efe:	4b0c      	ldr	r3, [pc, #48]	@ (8008f30 <tcp_slowtmr+0x5ac>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008f04:	e069      	b.n	8008fda <tcp_slowtmr+0x656>
 8008f06:	bf00      	nop
 8008f08:	20008a64 	.word	0x20008a64
 8008f0c:	000a4cb8 	.word	0x000a4cb8
 8008f10:	10624dd3 	.word	0x10624dd3
 8008f14:	000124f8 	.word	0x000124f8
 8008f18:	20008a70 	.word	0x20008a70
 8008f1c:	08015b5c 	.word	0x08015b5c
 8008f20:	08015f94 	.word	0x08015f94
 8008f24:	08015ba0 	.word	0x08015ba0
 8008f28:	08015fc0 	.word	0x08015fc0
 8008f2c:	20008a78 	.word	0x20008a78
 8008f30:	20008a74 	.word	0x20008a74
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f36:	7d1b      	ldrb	r3, [r3, #20]
 8008f38:	2b0a      	cmp	r3, #10
 8008f3a:	d006      	beq.n	8008f4a <tcp_slowtmr+0x5c6>
 8008f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8008fec <tcp_slowtmr+0x668>)
 8008f3e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8008f42:	492b      	ldr	r1, [pc, #172]	@ (8008ff0 <tcp_slowtmr+0x66c>)
 8008f44:	482b      	ldr	r0, [pc, #172]	@ (8008ff4 <tcp_slowtmr+0x670>)
 8008f46:	f007 fc1b 	bl	8010780 <printf>
    pcb_remove = 0;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008f50:	4b29      	ldr	r3, [pc, #164]	@ (8008ff8 <tcp_slowtmr+0x674>)
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f56:	6a1b      	ldr	r3, [r3, #32]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	2bf0      	cmp	r3, #240	@ 0xf0
 8008f5c:	d904      	bls.n	8008f68 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8008f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f62:	3301      	adds	r3, #1
 8008f64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008f68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d02f      	beq.n	8008fd0 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008f70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008f72:	f000 fb2b 	bl	80095cc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d010      	beq.n	8008f9e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8008ffc <tcp_slowtmr+0x678>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d106      	bne.n	8008f94 <tcp_slowtmr+0x610>
 8008f86:	4b19      	ldr	r3, [pc, #100]	@ (8008fec <tcp_slowtmr+0x668>)
 8008f88:	f240 52af 	movw	r2, #1455	@ 0x5af
 8008f8c:	491c      	ldr	r1, [pc, #112]	@ (8009000 <tcp_slowtmr+0x67c>)
 8008f8e:	4819      	ldr	r0, [pc, #100]	@ (8008ff4 <tcp_slowtmr+0x670>)
 8008f90:	f007 fbf6 	bl	8010780 <printf>
        prev->next = pcb->next;
 8008f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f96:	68da      	ldr	r2, [r3, #12]
 8008f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f9a:	60da      	str	r2, [r3, #12]
 8008f9c:	e00f      	b.n	8008fbe <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008f9e:	4b17      	ldr	r3, [pc, #92]	@ (8008ffc <tcp_slowtmr+0x678>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d006      	beq.n	8008fb6 <tcp_slowtmr+0x632>
 8008fa8:	4b10      	ldr	r3, [pc, #64]	@ (8008fec <tcp_slowtmr+0x668>)
 8008faa:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8008fae:	4915      	ldr	r1, [pc, #84]	@ (8009004 <tcp_slowtmr+0x680>)
 8008fb0:	4810      	ldr	r0, [pc, #64]	@ (8008ff4 <tcp_slowtmr+0x670>)
 8008fb2:	f007 fbe5 	bl	8010780 <printf>
        tcp_tw_pcbs = pcb->next;
 8008fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	4a10      	ldr	r2, [pc, #64]	@ (8008ffc <tcp_slowtmr+0x678>)
 8008fbc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008fc8:	69f8      	ldr	r0, [r7, #28]
 8008fca:	f7ff f93d 	bl	8008248 <tcp_free>
 8008fce:	e004      	b.n	8008fda <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8008fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1a9      	bne.n	8008f34 <tcp_slowtmr+0x5b0>
    }
  }
}
 8008fe0:	bf00      	nop
 8008fe2:	bf00      	nop
 8008fe4:	3730      	adds	r7, #48	@ 0x30
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8008fea:	bf00      	nop
 8008fec:	08015b5c 	.word	0x08015b5c
 8008ff0:	08015fec 	.word	0x08015fec
 8008ff4:	08015ba0 	.word	0x08015ba0
 8008ff8:	20008a64 	.word	0x20008a64
 8008ffc:	20008a74 	.word	0x20008a74
 8009000:	0801601c 	.word	0x0801601c
 8009004:	08016044 	.word	0x08016044

08009008 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800900e:	4b2d      	ldr	r3, [pc, #180]	@ (80090c4 <tcp_fasttmr+0xbc>)
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	3301      	adds	r3, #1
 8009014:	b2da      	uxtb	r2, r3
 8009016:	4b2b      	ldr	r3, [pc, #172]	@ (80090c4 <tcp_fasttmr+0xbc>)
 8009018:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800901a:	4b2b      	ldr	r3, [pc, #172]	@ (80090c8 <tcp_fasttmr+0xc0>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009020:	e048      	b.n	80090b4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	7f9a      	ldrb	r2, [r3, #30]
 8009026:	4b27      	ldr	r3, [pc, #156]	@ (80090c4 <tcp_fasttmr+0xbc>)
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	429a      	cmp	r2, r3
 800902c:	d03f      	beq.n	80090ae <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800902e:	4b25      	ldr	r3, [pc, #148]	@ (80090c4 <tcp_fasttmr+0xbc>)
 8009030:	781a      	ldrb	r2, [r3, #0]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	8b5b      	ldrh	r3, [r3, #26]
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	2b00      	cmp	r3, #0
 8009040:	d010      	beq.n	8009064 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	8b5b      	ldrh	r3, [r3, #26]
 8009046:	f043 0302 	orr.w	r3, r3, #2
 800904a:	b29a      	uxth	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f003 fac9 	bl	800c5e8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	8b5b      	ldrh	r3, [r3, #26]
 800905a:	f023 0303 	bic.w	r3, r3, #3
 800905e:	b29a      	uxth	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	8b5b      	ldrh	r3, [r3, #26]
 8009068:	f003 0308 	and.w	r3, r3, #8
 800906c:	2b00      	cmp	r3, #0
 800906e:	d009      	beq.n	8009084 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	8b5b      	ldrh	r3, [r3, #26]
 8009074:	f023 0308 	bic.w	r3, r3, #8
 8009078:	b29a      	uxth	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f7ff fa76 	bl	8008570 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00a      	beq.n	80090a8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009092:	4b0e      	ldr	r3, [pc, #56]	@ (80090cc <tcp_fasttmr+0xc4>)
 8009094:	2200      	movs	r2, #0
 8009096:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 f819 	bl	80090d0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800909e:	4b0b      	ldr	r3, [pc, #44]	@ (80090cc <tcp_fasttmr+0xc4>)
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d000      	beq.n	80090a8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80090a6:	e7b8      	b.n	800901a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	607b      	str	r3, [r7, #4]
 80090ac:	e002      	b.n	80090b4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1b3      	bne.n	8009022 <tcp_fasttmr+0x1a>
    }
  }
}
 80090ba:	bf00      	nop
 80090bc:	bf00      	nop
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	20008a7a 	.word	0x20008a7a
 80090c8:	20008a70 	.word	0x20008a70
 80090cc:	20008a78 	.word	0x20008a78

080090d0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80090d0:	b590      	push	{r4, r7, lr}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d109      	bne.n	80090f2 <tcp_process_refused_data+0x22>
 80090de:	4b37      	ldr	r3, [pc, #220]	@ (80091bc <tcp_process_refused_data+0xec>)
 80090e0:	f240 6209 	movw	r2, #1545	@ 0x609
 80090e4:	4936      	ldr	r1, [pc, #216]	@ (80091c0 <tcp_process_refused_data+0xf0>)
 80090e6:	4837      	ldr	r0, [pc, #220]	@ (80091c4 <tcp_process_refused_data+0xf4>)
 80090e8:	f007 fb4a 	bl	8010780 <printf>
 80090ec:	f06f 030f 	mvn.w	r3, #15
 80090f0:	e060      	b.n	80091b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090f6:	7b5b      	ldrb	r3, [r3, #13]
 80090f8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090fe:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00b      	beq.n	8009128 <tcp_process_refused_data+0x58>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6918      	ldr	r0, [r3, #16]
 800911a:	2300      	movs	r3, #0
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	6879      	ldr	r1, [r7, #4]
 8009120:	47a0      	blx	r4
 8009122:	4603      	mov	r3, r0
 8009124:	73fb      	strb	r3, [r7, #15]
 8009126:	e007      	b.n	8009138 <tcp_process_refused_data+0x68>
 8009128:	2300      	movs	r3, #0
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	6879      	ldr	r1, [r7, #4]
 800912e:	2000      	movs	r0, #0
 8009130:	f000 f8a4 	bl	800927c <tcp_recv_null>
 8009134:	4603      	mov	r3, r0
 8009136:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d12a      	bne.n	8009196 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009140:	7bbb      	ldrb	r3, [r7, #14]
 8009142:	f003 0320 	and.w	r3, r3, #32
 8009146:	2b00      	cmp	r3, #0
 8009148:	d033      	beq.n	80091b2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800914e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009152:	d005      	beq.n	8009160 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009158:	3301      	adds	r3, #1
 800915a:	b29a      	uxth	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00b      	beq.n	8009182 <tcp_process_refused_data+0xb2>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6918      	ldr	r0, [r3, #16]
 8009174:	2300      	movs	r3, #0
 8009176:	2200      	movs	r2, #0
 8009178:	6879      	ldr	r1, [r7, #4]
 800917a:	47a0      	blx	r4
 800917c:	4603      	mov	r3, r0
 800917e:	73fb      	strb	r3, [r7, #15]
 8009180:	e001      	b.n	8009186 <tcp_process_refused_data+0xb6>
 8009182:	2300      	movs	r3, #0
 8009184:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800918a:	f113 0f0d 	cmn.w	r3, #13
 800918e:	d110      	bne.n	80091b2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009190:	f06f 030c 	mvn.w	r3, #12
 8009194:	e00e      	b.n	80091b4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800919a:	f113 0f0d 	cmn.w	r3, #13
 800919e:	d102      	bne.n	80091a6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80091a0:	f06f 030c 	mvn.w	r3, #12
 80091a4:	e006      	b.n	80091b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80091ac:	f06f 0304 	mvn.w	r3, #4
 80091b0:	e000      	b.n	80091b4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3714      	adds	r7, #20
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd90      	pop	{r4, r7, pc}
 80091bc:	08015b5c 	.word	0x08015b5c
 80091c0:	0801606c 	.word	0x0801606c
 80091c4:	08015ba0 	.word	0x08015ba0

080091c8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80091d0:	e007      	b.n	80091e2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f80a 	bl	80091f2 <tcp_seg_free>
    seg = next;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d1f4      	bne.n	80091d2 <tcp_segs_free+0xa>
  }
}
 80091e8:	bf00      	nop
 80091ea:	bf00      	nop
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80091f2:	b580      	push	{r7, lr}
 80091f4:	b082      	sub	sp, #8
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00c      	beq.n	800921a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d004      	beq.n	8009212 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	4618      	mov	r0, r3
 800920e:	f7fe fcd9 	bl	8007bc4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009212:	6879      	ldr	r1, [r7, #4]
 8009214:	2003      	movs	r0, #3
 8009216:	f7fd fe5f 	bl	8006ed8 <memp_free>
  }
}
 800921a:	bf00      	nop
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
	...

08009224 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d106      	bne.n	8009240 <tcp_seg_copy+0x1c>
 8009232:	4b0f      	ldr	r3, [pc, #60]	@ (8009270 <tcp_seg_copy+0x4c>)
 8009234:	f240 6282 	movw	r2, #1666	@ 0x682
 8009238:	490e      	ldr	r1, [pc, #56]	@ (8009274 <tcp_seg_copy+0x50>)
 800923a:	480f      	ldr	r0, [pc, #60]	@ (8009278 <tcp_seg_copy+0x54>)
 800923c:	f007 faa0 	bl	8010780 <printf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009240:	2003      	movs	r0, #3
 8009242:	f7fd fdd9 	bl	8006df8 <memp_malloc>
 8009246:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d101      	bne.n	8009252 <tcp_seg_copy+0x2e>
    return NULL;
 800924e:	2300      	movs	r3, #0
 8009250:	e00a      	b.n	8009268 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009252:	2210      	movs	r2, #16
 8009254:	6879      	ldr	r1, [r7, #4]
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f007 fb8e 	bl	8010978 <memcpy>
  pbuf_ref(cseg->p);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	4618      	mov	r0, r3
 8009262:	f7fe fd4f 	bl	8007d04 <pbuf_ref>
  return cseg;
 8009266:	68fb      	ldr	r3, [r7, #12]
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	08015b5c 	.word	0x08015b5c
 8009274:	080160b0 	.word	0x080160b0
 8009278:	08015ba0 	.word	0x08015ba0

0800927c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
 8009288:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d109      	bne.n	80092a4 <tcp_recv_null+0x28>
 8009290:	4b12      	ldr	r3, [pc, #72]	@ (80092dc <tcp_recv_null+0x60>)
 8009292:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8009296:	4912      	ldr	r1, [pc, #72]	@ (80092e0 <tcp_recv_null+0x64>)
 8009298:	4812      	ldr	r0, [pc, #72]	@ (80092e4 <tcp_recv_null+0x68>)
 800929a:	f007 fa71 	bl	8010780 <printf>
 800929e:	f06f 030f 	mvn.w	r3, #15
 80092a2:	e016      	b.n	80092d2 <tcp_recv_null+0x56>

  if (p != NULL) {
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d009      	beq.n	80092be <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	891b      	ldrh	r3, [r3, #8]
 80092ae:	4619      	mov	r1, r3
 80092b0:	68b8      	ldr	r0, [r7, #8]
 80092b2:	f7ff fb17 	bl	80088e4 <tcp_recved>
    pbuf_free(p);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7fe fc84 	bl	8007bc4 <pbuf_free>
 80092bc:	e008      	b.n	80092d0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80092be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d104      	bne.n	80092d0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80092c6:	68b8      	ldr	r0, [r7, #8]
 80092c8:	f7ff f9bc 	bl	8008644 <tcp_close>
 80092cc:	4603      	mov	r3, r0
 80092ce:	e000      	b.n	80092d2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	08015b5c 	.word	0x08015b5c
 80092e0:	080160cc 	.word	0x080160cc
 80092e4:	08015ba0 	.word	0x08015ba0

080092e8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	4603      	mov	r3, r0
 80092f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80092f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	db01      	blt.n	80092fe <tcp_kill_prio+0x16>
 80092fa:	79fb      	ldrb	r3, [r7, #7]
 80092fc:	e000      	b.n	8009300 <tcp_kill_prio+0x18>
 80092fe:	237f      	movs	r3, #127	@ 0x7f
 8009300:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009302:	7afb      	ldrb	r3, [r7, #11]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d034      	beq.n	8009372 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009308:	7afb      	ldrb	r3, [r7, #11]
 800930a:	3b01      	subs	r3, #1
 800930c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800930e:	2300      	movs	r3, #0
 8009310:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009312:	2300      	movs	r3, #0
 8009314:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009316:	4b19      	ldr	r3, [pc, #100]	@ (800937c <tcp_kill_prio+0x94>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	617b      	str	r3, [r7, #20]
 800931c:	e01f      	b.n	800935e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	7d5b      	ldrb	r3, [r3, #21]
 8009322:	7afa      	ldrb	r2, [r7, #11]
 8009324:	429a      	cmp	r2, r3
 8009326:	d80c      	bhi.n	8009342 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800932c:	7afa      	ldrb	r2, [r7, #11]
 800932e:	429a      	cmp	r2, r3
 8009330:	d112      	bne.n	8009358 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009332:	4b13      	ldr	r3, [pc, #76]	@ (8009380 <tcp_kill_prio+0x98>)
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	6a1b      	ldr	r3, [r3, #32]
 800933a:	1ad3      	subs	r3, r2, r3
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	429a      	cmp	r2, r3
 8009340:	d80a      	bhi.n	8009358 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009342:	4b0f      	ldr	r3, [pc, #60]	@ (8009380 <tcp_kill_prio+0x98>)
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	6a1b      	ldr	r3, [r3, #32]
 800934a:	1ad3      	subs	r3, r2, r3
 800934c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	7d5b      	ldrb	r3, [r3, #21]
 8009356:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	617b      	str	r3, [r7, #20]
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1dc      	bne.n	800931e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d004      	beq.n	8009374 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800936a:	6938      	ldr	r0, [r7, #16]
 800936c:	f7ff fa54 	bl	8008818 <tcp_abort>
 8009370:	e000      	b.n	8009374 <tcp_kill_prio+0x8c>
    return;
 8009372:	bf00      	nop
  }
}
 8009374:	3718      	adds	r7, #24
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	20008a70 	.word	0x20008a70
 8009380:	20008a64 	.word	0x20008a64

08009384 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	4603      	mov	r3, r0
 800938c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800938e:	79fb      	ldrb	r3, [r7, #7]
 8009390:	2b08      	cmp	r3, #8
 8009392:	d009      	beq.n	80093a8 <tcp_kill_state+0x24>
 8009394:	79fb      	ldrb	r3, [r7, #7]
 8009396:	2b09      	cmp	r3, #9
 8009398:	d006      	beq.n	80093a8 <tcp_kill_state+0x24>
 800939a:	4b1a      	ldr	r3, [pc, #104]	@ (8009404 <tcp_kill_state+0x80>)
 800939c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80093a0:	4919      	ldr	r1, [pc, #100]	@ (8009408 <tcp_kill_state+0x84>)
 80093a2:	481a      	ldr	r0, [pc, #104]	@ (800940c <tcp_kill_state+0x88>)
 80093a4:	f007 f9ec 	bl	8010780 <printf>

  inactivity = 0;
 80093a8:	2300      	movs	r3, #0
 80093aa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80093ac:	2300      	movs	r3, #0
 80093ae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80093b0:	4b17      	ldr	r3, [pc, #92]	@ (8009410 <tcp_kill_state+0x8c>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	617b      	str	r3, [r7, #20]
 80093b6:	e017      	b.n	80093e8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	7d1b      	ldrb	r3, [r3, #20]
 80093bc:	79fa      	ldrb	r2, [r7, #7]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d10f      	bne.n	80093e2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80093c2:	4b14      	ldr	r3, [pc, #80]	@ (8009414 <tcp_kill_state+0x90>)
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	6a1b      	ldr	r3, [r3, #32]
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d807      	bhi.n	80093e2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80093d2:	4b10      	ldr	r3, [pc, #64]	@ (8009414 <tcp_kill_state+0x90>)
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	6a1b      	ldr	r3, [r3, #32]
 80093da:	1ad3      	subs	r3, r2, r3
 80093dc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	617b      	str	r3, [r7, #20]
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1e4      	bne.n	80093b8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d003      	beq.n	80093fc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80093f4:	2100      	movs	r1, #0
 80093f6:	6938      	ldr	r0, [r7, #16]
 80093f8:	f7ff f950 	bl	800869c <tcp_abandon>
  }
}
 80093fc:	bf00      	nop
 80093fe:	3718      	adds	r7, #24
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	08015b5c 	.word	0x08015b5c
 8009408:	080160e8 	.word	0x080160e8
 800940c:	08015ba0 	.word	0x08015ba0
 8009410:	20008a70 	.word	0x20008a70
 8009414:	20008a64 	.word	0x20008a64

08009418 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009422:	2300      	movs	r3, #0
 8009424:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009426:	4b12      	ldr	r3, [pc, #72]	@ (8009470 <tcp_kill_timewait+0x58>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	60fb      	str	r3, [r7, #12]
 800942c:	e012      	b.n	8009454 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800942e:	4b11      	ldr	r3, [pc, #68]	@ (8009474 <tcp_kill_timewait+0x5c>)
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	429a      	cmp	r2, r3
 800943c:	d807      	bhi.n	800944e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800943e:	4b0d      	ldr	r3, [pc, #52]	@ (8009474 <tcp_kill_timewait+0x5c>)
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6a1b      	ldr	r3, [r3, #32]
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	60fb      	str	r3, [r7, #12]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1e9      	bne.n	800942e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d002      	beq.n	8009466 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009460:	68b8      	ldr	r0, [r7, #8]
 8009462:	f7ff f9d9 	bl	8008818 <tcp_abort>
  }
}
 8009466:	bf00      	nop
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	20008a74 	.word	0x20008a74
 8009474:	20008a64 	.word	0x20008a64

08009478 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800947e:	4b10      	ldr	r3, [pc, #64]	@ (80094c0 <tcp_handle_closepend+0x48>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009484:	e014      	b.n	80094b0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	8b5b      	ldrh	r3, [r3, #26]
 8009490:	f003 0308 	and.w	r3, r3, #8
 8009494:	2b00      	cmp	r3, #0
 8009496:	d009      	beq.n	80094ac <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	8b5b      	ldrh	r3, [r3, #26]
 800949c:	f023 0308 	bic.w	r3, r3, #8
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7ff f862 	bl	8008570 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1e7      	bne.n	8009486 <tcp_handle_closepend+0xe>
  }
}
 80094b6:	bf00      	nop
 80094b8:	bf00      	nop
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	20008a70 	.word	0x20008a70

080094c4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	4603      	mov	r3, r0
 80094cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80094ce:	2001      	movs	r0, #1
 80094d0:	f7fd fc92 	bl	8006df8 <memp_malloc>
 80094d4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d126      	bne.n	800952a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80094dc:	f7ff ffcc 	bl	8009478 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80094e0:	f7ff ff9a 	bl	8009418 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80094e4:	2001      	movs	r0, #1
 80094e6:	f7fd fc87 	bl	8006df8 <memp_malloc>
 80094ea:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d11b      	bne.n	800952a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80094f2:	2009      	movs	r0, #9
 80094f4:	f7ff ff46 	bl	8009384 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80094f8:	2001      	movs	r0, #1
 80094fa:	f7fd fc7d 	bl	8006df8 <memp_malloc>
 80094fe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d111      	bne.n	800952a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009506:	2008      	movs	r0, #8
 8009508:	f7ff ff3c 	bl	8009384 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800950c:	2001      	movs	r0, #1
 800950e:	f7fd fc73 	bl	8006df8 <memp_malloc>
 8009512:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d107      	bne.n	800952a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800951a:	79fb      	ldrb	r3, [r7, #7]
 800951c:	4618      	mov	r0, r3
 800951e:	f7ff fee3 	bl	80092e8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009522:	2001      	movs	r0, #1
 8009524:	f7fd fc68 	bl	8006df8 <memp_malloc>
 8009528:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d03f      	beq.n	80095b0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009530:	229c      	movs	r2, #156	@ 0x9c
 8009532:	2100      	movs	r1, #0
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f007 f9a2 	bl	801087e <memset>
    pcb->prio = prio;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	79fa      	ldrb	r2, [r7, #7]
 800953e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009546:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8009550:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	22ff      	movs	r2, #255	@ 0xff
 800955e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009566:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2206      	movs	r2, #6
 800956c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2206      	movs	r2, #6
 8009574:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800957c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2201      	movs	r2, #1
 8009582:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8009586:	4b0d      	ldr	r3, [pc, #52]	@ (80095bc <tcp_alloc+0xf8>)
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800958e:	4b0c      	ldr	r3, [pc, #48]	@ (80095c0 <tcp_alloc+0xfc>)
 8009590:	781a      	ldrb	r2, [r3, #0]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800959c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	4a08      	ldr	r2, [pc, #32]	@ (80095c4 <tcp_alloc+0x100>)
 80095a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	4a07      	ldr	r2, [pc, #28]	@ (80095c8 <tcp_alloc+0x104>)
 80095ac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80095b0:	68fb      	ldr	r3, [r7, #12]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	20008a64 	.word	0x20008a64
 80095c0:	20008a7a 	.word	0x20008a7a
 80095c4:	0800927d 	.word	0x0800927d
 80095c8:	006ddd00 	.word	0x006ddd00

080095cc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d107      	bne.n	80095ea <tcp_pcb_purge+0x1e>
 80095da:	4b21      	ldr	r3, [pc, #132]	@ (8009660 <tcp_pcb_purge+0x94>)
 80095dc:	f640 0251 	movw	r2, #2129	@ 0x851
 80095e0:	4920      	ldr	r1, [pc, #128]	@ (8009664 <tcp_pcb_purge+0x98>)
 80095e2:	4821      	ldr	r0, [pc, #132]	@ (8009668 <tcp_pcb_purge+0x9c>)
 80095e4:	f007 f8cc 	bl	8010780 <printf>
 80095e8:	e037      	b.n	800965a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	7d1b      	ldrb	r3, [r3, #20]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d033      	beq.n	800965a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80095f6:	2b0a      	cmp	r3, #10
 80095f8:	d02f      	beq.n	800965a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d02b      	beq.n	800965a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009606:	2b00      	cmp	r3, #0
 8009608:	d007      	beq.n	800961a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800960e:	4618      	mov	r0, r3
 8009610:	f7fe fad8 	bl	8007bc4 <pbuf_free>
      pcb->refused_data = NULL;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800961e:	2b00      	cmp	r3, #0
 8009620:	d002      	beq.n	8009628 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f986 	bl	8009934 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800962e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009634:	4618      	mov	r0, r3
 8009636:	f7ff fdc7 	bl	80091c8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800963e:	4618      	mov	r0, r3
 8009640:	f7ff fdc2 	bl	80091c8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	66da      	str	r2, [r3, #108]	@ 0x6c
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	08015b5c 	.word	0x08015b5c
 8009664:	080161a8 	.word	0x080161a8
 8009668:	08015ba0 	.word	0x08015ba0

0800966c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d106      	bne.n	800968a <tcp_pcb_remove+0x1e>
 800967c:	4b3e      	ldr	r3, [pc, #248]	@ (8009778 <tcp_pcb_remove+0x10c>)
 800967e:	f640 0283 	movw	r2, #2179	@ 0x883
 8009682:	493e      	ldr	r1, [pc, #248]	@ (800977c <tcp_pcb_remove+0x110>)
 8009684:	483e      	ldr	r0, [pc, #248]	@ (8009780 <tcp_pcb_remove+0x114>)
 8009686:	f007 f87b 	bl	8010780 <printf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d106      	bne.n	800969e <tcp_pcb_remove+0x32>
 8009690:	4b39      	ldr	r3, [pc, #228]	@ (8009778 <tcp_pcb_remove+0x10c>)
 8009692:	f640 0284 	movw	r2, #2180	@ 0x884
 8009696:	493b      	ldr	r1, [pc, #236]	@ (8009784 <tcp_pcb_remove+0x118>)
 8009698:	4839      	ldr	r0, [pc, #228]	@ (8009780 <tcp_pcb_remove+0x114>)
 800969a:	f007 f871 	bl	8010780 <printf>

  TCP_RMV(pcblist, pcb);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	683a      	ldr	r2, [r7, #0]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d105      	bne.n	80096b4 <tcp_pcb_remove+0x48>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	68da      	ldr	r2, [r3, #12]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	601a      	str	r2, [r3, #0]
 80096b2:	e013      	b.n	80096dc <tcp_pcb_remove+0x70>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	60fb      	str	r3, [r7, #12]
 80096ba:	e00c      	b.n	80096d6 <tcp_pcb_remove+0x6a>
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	683a      	ldr	r2, [r7, #0]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d104      	bne.n	80096d0 <tcp_pcb_remove+0x64>
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	68da      	ldr	r2, [r3, #12]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	60da      	str	r2, [r3, #12]
 80096ce:	e005      	b.n	80096dc <tcp_pcb_remove+0x70>
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	60fb      	str	r3, [r7, #12]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1ef      	bne.n	80096bc <tcp_pcb_remove+0x50>
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	2200      	movs	r2, #0
 80096e0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80096e2:	6838      	ldr	r0, [r7, #0]
 80096e4:	f7ff ff72 	bl	80095cc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	7d1b      	ldrb	r3, [r3, #20]
 80096ec:	2b0a      	cmp	r3, #10
 80096ee:	d013      	beq.n	8009718 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d00f      	beq.n	8009718 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	8b5b      	ldrh	r3, [r3, #26]
 80096fc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009700:	2b00      	cmp	r3, #0
 8009702:	d009      	beq.n	8009718 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	8b5b      	ldrh	r3, [r3, #26]
 8009708:	f043 0302 	orr.w	r3, r3, #2
 800970c:	b29a      	uxth	r2, r3
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009712:	6838      	ldr	r0, [r7, #0]
 8009714:	f002 ff68 	bl	800c5e8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	7d1b      	ldrb	r3, [r3, #20]
 800971c:	2b01      	cmp	r3, #1
 800971e:	d020      	beq.n	8009762 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009724:	2b00      	cmp	r3, #0
 8009726:	d006      	beq.n	8009736 <tcp_pcb_remove+0xca>
 8009728:	4b13      	ldr	r3, [pc, #76]	@ (8009778 <tcp_pcb_remove+0x10c>)
 800972a:	f640 0293 	movw	r2, #2195	@ 0x893
 800972e:	4916      	ldr	r1, [pc, #88]	@ (8009788 <tcp_pcb_remove+0x11c>)
 8009730:	4813      	ldr	r0, [pc, #76]	@ (8009780 <tcp_pcb_remove+0x114>)
 8009732:	f007 f825 	bl	8010780 <printf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800973a:	2b00      	cmp	r3, #0
 800973c:	d006      	beq.n	800974c <tcp_pcb_remove+0xe0>
 800973e:	4b0e      	ldr	r3, [pc, #56]	@ (8009778 <tcp_pcb_remove+0x10c>)
 8009740:	f640 0294 	movw	r2, #2196	@ 0x894
 8009744:	4911      	ldr	r1, [pc, #68]	@ (800978c <tcp_pcb_remove+0x120>)
 8009746:	480e      	ldr	r0, [pc, #56]	@ (8009780 <tcp_pcb_remove+0x114>)
 8009748:	f007 f81a 	bl	8010780 <printf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009750:	2b00      	cmp	r3, #0
 8009752:	d006      	beq.n	8009762 <tcp_pcb_remove+0xf6>
 8009754:	4b08      	ldr	r3, [pc, #32]	@ (8009778 <tcp_pcb_remove+0x10c>)
 8009756:	f640 0296 	movw	r2, #2198	@ 0x896
 800975a:	490d      	ldr	r1, [pc, #52]	@ (8009790 <tcp_pcb_remove+0x124>)
 800975c:	4808      	ldr	r0, [pc, #32]	@ (8009780 <tcp_pcb_remove+0x114>)
 800975e:	f007 f80f 	bl	8010780 <printf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2200      	movs	r2, #0
 8009766:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	2200      	movs	r2, #0
 800976c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800976e:	bf00      	nop
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	08015b5c 	.word	0x08015b5c
 800977c:	080161c4 	.word	0x080161c4
 8009780:	08015ba0 	.word	0x08015ba0
 8009784:	080161e0 	.word	0x080161e0
 8009788:	08016200 	.word	0x08016200
 800978c:	08016218 	.word	0x08016218
 8009790:	08016234 	.word	0x08016234

08009794 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d106      	bne.n	80097b0 <tcp_next_iss+0x1c>
 80097a2:	4b0a      	ldr	r3, [pc, #40]	@ (80097cc <tcp_next_iss+0x38>)
 80097a4:	f640 02af 	movw	r2, #2223	@ 0x8af
 80097a8:	4909      	ldr	r1, [pc, #36]	@ (80097d0 <tcp_next_iss+0x3c>)
 80097aa:	480a      	ldr	r0, [pc, #40]	@ (80097d4 <tcp_next_iss+0x40>)
 80097ac:	f006 ffe8 	bl	8010780 <printf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80097b0:	4b09      	ldr	r3, [pc, #36]	@ (80097d8 <tcp_next_iss+0x44>)
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	4b09      	ldr	r3, [pc, #36]	@ (80097dc <tcp_next_iss+0x48>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4413      	add	r3, r2
 80097ba:	4a07      	ldr	r2, [pc, #28]	@ (80097d8 <tcp_next_iss+0x44>)
 80097bc:	6013      	str	r3, [r2, #0]
  return iss;
 80097be:	4b06      	ldr	r3, [pc, #24]	@ (80097d8 <tcp_next_iss+0x44>)
 80097c0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	08015b5c 	.word	0x08015b5c
 80097d0:	0801624c 	.word	0x0801624c
 80097d4:	08015ba0 	.word	0x08015ba0
 80097d8:	20000028 	.word	0x20000028
 80097dc:	20008a64 	.word	0x20008a64

080097e0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	4603      	mov	r3, r0
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
 80097ec:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d106      	bne.n	8009802 <tcp_eff_send_mss_netif+0x22>
 80097f4:	4b14      	ldr	r3, [pc, #80]	@ (8009848 <tcp_eff_send_mss_netif+0x68>)
 80097f6:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80097fa:	4914      	ldr	r1, [pc, #80]	@ (800984c <tcp_eff_send_mss_netif+0x6c>)
 80097fc:	4814      	ldr	r0, [pc, #80]	@ (8009850 <tcp_eff_send_mss_netif+0x70>)
 80097fe:	f006 ffbf 	bl	8010780 <printf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009808:	89fb      	ldrh	r3, [r7, #14]
 800980a:	e019      	b.n	8009840 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009810:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009812:	8afb      	ldrh	r3, [r7, #22]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d012      	beq.n	800983e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009818:	2328      	movs	r3, #40	@ 0x28
 800981a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800981c:	8afa      	ldrh	r2, [r7, #22]
 800981e:	8abb      	ldrh	r3, [r7, #20]
 8009820:	429a      	cmp	r2, r3
 8009822:	d904      	bls.n	800982e <tcp_eff_send_mss_netif+0x4e>
 8009824:	8afa      	ldrh	r2, [r7, #22]
 8009826:	8abb      	ldrh	r3, [r7, #20]
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	b29b      	uxth	r3, r3
 800982c:	e000      	b.n	8009830 <tcp_eff_send_mss_netif+0x50>
 800982e:	2300      	movs	r3, #0
 8009830:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009832:	8a7a      	ldrh	r2, [r7, #18]
 8009834:	89fb      	ldrh	r3, [r7, #14]
 8009836:	4293      	cmp	r3, r2
 8009838:	bf28      	it	cs
 800983a:	4613      	movcs	r3, r2
 800983c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800983e:	89fb      	ldrh	r3, [r7, #14]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3718      	adds	r7, #24
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	08015b5c 	.word	0x08015b5c
 800984c:	08016268 	.word	0x08016268
 8009850:	08015ba0 	.word	0x08015ba0

08009854 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d119      	bne.n	800989c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009868:	4b10      	ldr	r3, [pc, #64]	@ (80098ac <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800986a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800986e:	4910      	ldr	r1, [pc, #64]	@ (80098b0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009870:	4810      	ldr	r0, [pc, #64]	@ (80098b4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009872:	f006 ff85 	bl	8010780 <printf>

  while (pcb != NULL) {
 8009876:	e011      	b.n	800989c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	429a      	cmp	r2, r3
 8009882:	d108      	bne.n	8009896 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800988a:	68f8      	ldr	r0, [r7, #12]
 800988c:	f7fe ffc4 	bl	8008818 <tcp_abort>
      pcb = next;
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	60fb      	str	r3, [r7, #12]
 8009894:	e002      	b.n	800989c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1ea      	bne.n	8009878 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80098a2:	bf00      	nop
 80098a4:	bf00      	nop
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	08015b5c 	.word	0x08015b5c
 80098b0:	08016290 	.word	0x08016290
 80098b4:	08015ba0 	.word	0x08015ba0

080098b8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d02a      	beq.n	800991e <tcp_netif_ip_addr_changed+0x66>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d026      	beq.n	800991e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80098d0:	4b15      	ldr	r3, [pc, #84]	@ (8009928 <tcp_netif_ip_addr_changed+0x70>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4619      	mov	r1, r3
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f7ff ffbc 	bl	8009854 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80098dc:	4b13      	ldr	r3, [pc, #76]	@ (800992c <tcp_netif_ip_addr_changed+0x74>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4619      	mov	r1, r3
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f7ff ffb6 	bl	8009854 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d017      	beq.n	800991e <tcp_netif_ip_addr_changed+0x66>
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d013      	beq.n	800991e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80098f6:	4b0e      	ldr	r3, [pc, #56]	@ (8009930 <tcp_netif_ip_addr_changed+0x78>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	60fb      	str	r3, [r7, #12]
 80098fc:	e00c      	b.n	8009918 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	429a      	cmp	r2, r3
 8009908:	d103      	bne.n	8009912 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	60fb      	str	r3, [r7, #12]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1ef      	bne.n	80098fe <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800991e:	bf00      	nop
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	20008a70 	.word	0x20008a70
 800992c:	20008a68 	.word	0x20008a68
 8009930:	20008a6c 	.word	0x20008a6c

08009934 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009940:	2b00      	cmp	r3, #0
 8009942:	d007      	beq.n	8009954 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff fc3d 	bl	80091c8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009954:	bf00      	nop
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800995c:	b590      	push	{r4, r7, lr}
 800995e:	b08d      	sub	sp, #52	@ 0x34
 8009960:	af04      	add	r7, sp, #16
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d105      	bne.n	8009978 <tcp_input+0x1c>
 800996c:	4b9b      	ldr	r3, [pc, #620]	@ (8009bdc <tcp_input+0x280>)
 800996e:	2283      	movs	r2, #131	@ 0x83
 8009970:	499b      	ldr	r1, [pc, #620]	@ (8009be0 <tcp_input+0x284>)
 8009972:	489c      	ldr	r0, [pc, #624]	@ (8009be4 <tcp_input+0x288>)
 8009974:	f006 ff04 	bl	8010780 <printf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	4a9a      	ldr	r2, [pc, #616]	@ (8009be8 <tcp_input+0x28c>)
 800997e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	895b      	ldrh	r3, [r3, #10]
 8009984:	2b13      	cmp	r3, #19
 8009986:	f240 83d1 	bls.w	800a12c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800998a:	4b98      	ldr	r3, [pc, #608]	@ (8009bec <tcp_input+0x290>)
 800998c:	695b      	ldr	r3, [r3, #20]
 800998e:	4a97      	ldr	r2, [pc, #604]	@ (8009bec <tcp_input+0x290>)
 8009990:	6812      	ldr	r2, [r2, #0]
 8009992:	4611      	mov	r1, r2
 8009994:	4618      	mov	r0, r3
 8009996:	f005 febf 	bl	800f718 <ip4_addr_isbroadcast_u32>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	f040 83c7 	bne.w	800a130 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80099a2:	4b92      	ldr	r3, [pc, #584]	@ (8009bec <tcp_input+0x290>)
 80099a4:	695b      	ldr	r3, [r3, #20]
 80099a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80099aa:	2be0      	cmp	r3, #224	@ 0xe0
 80099ac:	f000 83c0 	beq.w	800a130 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80099b0:	4b8d      	ldr	r3, [pc, #564]	@ (8009be8 <tcp_input+0x28c>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	899b      	ldrh	r3, [r3, #12]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fc fda5 	bl	8006508 <lwip_htons>
 80099be:	4603      	mov	r3, r0
 80099c0:	0b1b      	lsrs	r3, r3, #12
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80099ca:	7cbb      	ldrb	r3, [r7, #18]
 80099cc:	2b13      	cmp	r3, #19
 80099ce:	f240 83b1 	bls.w	800a134 <tcp_input+0x7d8>
 80099d2:	7cbb      	ldrb	r3, [r7, #18]
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	891b      	ldrh	r3, [r3, #8]
 80099da:	429a      	cmp	r2, r3
 80099dc:	f200 83aa 	bhi.w	800a134 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80099e0:	7cbb      	ldrb	r3, [r7, #18]
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	3b14      	subs	r3, #20
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	4b81      	ldr	r3, [pc, #516]	@ (8009bf0 <tcp_input+0x294>)
 80099ea:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80099ec:	4b81      	ldr	r3, [pc, #516]	@ (8009bf4 <tcp_input+0x298>)
 80099ee:	2200      	movs	r2, #0
 80099f0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	895a      	ldrh	r2, [r3, #10]
 80099f6:	7cbb      	ldrb	r3, [r7, #18]
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d309      	bcc.n	8009a12 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80099fe:	4b7c      	ldr	r3, [pc, #496]	@ (8009bf0 <tcp_input+0x294>)
 8009a00:	881a      	ldrh	r2, [r3, #0]
 8009a02:	4b7d      	ldr	r3, [pc, #500]	@ (8009bf8 <tcp_input+0x29c>)
 8009a04:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009a06:	7cbb      	ldrb	r3, [r7, #18]
 8009a08:	4619      	mov	r1, r3
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f7fe f854 	bl	8007ab8 <pbuf_remove_header>
 8009a10:	e04e      	b.n	8009ab0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d105      	bne.n	8009a26 <tcp_input+0xca>
 8009a1a:	4b70      	ldr	r3, [pc, #448]	@ (8009bdc <tcp_input+0x280>)
 8009a1c:	22c2      	movs	r2, #194	@ 0xc2
 8009a1e:	4977      	ldr	r1, [pc, #476]	@ (8009bfc <tcp_input+0x2a0>)
 8009a20:	4870      	ldr	r0, [pc, #448]	@ (8009be4 <tcp_input+0x288>)
 8009a22:	f006 fead 	bl	8010780 <printf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009a26:	2114      	movs	r1, #20
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7fe f845 	bl	8007ab8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	895a      	ldrh	r2, [r3, #10]
 8009a32:	4b71      	ldr	r3, [pc, #452]	@ (8009bf8 <tcp_input+0x29c>)
 8009a34:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009a36:	4b6e      	ldr	r3, [pc, #440]	@ (8009bf0 <tcp_input+0x294>)
 8009a38:	881a      	ldrh	r2, [r3, #0]
 8009a3a:	4b6f      	ldr	r3, [pc, #444]	@ (8009bf8 <tcp_input+0x29c>)
 8009a3c:	881b      	ldrh	r3, [r3, #0]
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009a42:	4b6d      	ldr	r3, [pc, #436]	@ (8009bf8 <tcp_input+0x29c>)
 8009a44:	881b      	ldrh	r3, [r3, #0]
 8009a46:	4619      	mov	r1, r3
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f7fe f835 	bl	8007ab8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	895b      	ldrh	r3, [r3, #10]
 8009a54:	8a3a      	ldrh	r2, [r7, #16]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	f200 836e 	bhi.w	800a138 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	4a64      	ldr	r2, [pc, #400]	@ (8009bf4 <tcp_input+0x298>)
 8009a64:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	8a3a      	ldrh	r2, [r7, #16]
 8009a6c:	4611      	mov	r1, r2
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7fe f822 	bl	8007ab8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	891a      	ldrh	r2, [r3, #8]
 8009a78:	8a3b      	ldrh	r3, [r7, #16]
 8009a7a:	1ad3      	subs	r3, r2, r3
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	895b      	ldrh	r3, [r3, #10]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d005      	beq.n	8009a96 <tcp_input+0x13a>
 8009a8a:	4b54      	ldr	r3, [pc, #336]	@ (8009bdc <tcp_input+0x280>)
 8009a8c:	22df      	movs	r2, #223	@ 0xdf
 8009a8e:	495c      	ldr	r1, [pc, #368]	@ (8009c00 <tcp_input+0x2a4>)
 8009a90:	4854      	ldr	r0, [pc, #336]	@ (8009be4 <tcp_input+0x288>)
 8009a92:	f006 fe75 	bl	8010780 <printf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	891a      	ldrh	r2, [r3, #8]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	891b      	ldrh	r3, [r3, #8]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d005      	beq.n	8009ab0 <tcp_input+0x154>
 8009aa4:	4b4d      	ldr	r3, [pc, #308]	@ (8009bdc <tcp_input+0x280>)
 8009aa6:	22e0      	movs	r2, #224	@ 0xe0
 8009aa8:	4956      	ldr	r1, [pc, #344]	@ (8009c04 <tcp_input+0x2a8>)
 8009aaa:	484e      	ldr	r0, [pc, #312]	@ (8009be4 <tcp_input+0x288>)
 8009aac:	f006 fe68 	bl	8010780 <printf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009ab0:	4b4d      	ldr	r3, [pc, #308]	@ (8009be8 <tcp_input+0x28c>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	881b      	ldrh	r3, [r3, #0]
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	4a4b      	ldr	r2, [pc, #300]	@ (8009be8 <tcp_input+0x28c>)
 8009aba:	6814      	ldr	r4, [r2, #0]
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7fc fd23 	bl	8006508 <lwip_htons>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009ac6:	4b48      	ldr	r3, [pc, #288]	@ (8009be8 <tcp_input+0x28c>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	885b      	ldrh	r3, [r3, #2]
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	4a46      	ldr	r2, [pc, #280]	@ (8009be8 <tcp_input+0x28c>)
 8009ad0:	6814      	ldr	r4, [r2, #0]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7fc fd18 	bl	8006508 <lwip_htons>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009adc:	4b42      	ldr	r3, [pc, #264]	@ (8009be8 <tcp_input+0x28c>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	4a41      	ldr	r2, [pc, #260]	@ (8009be8 <tcp_input+0x28c>)
 8009ae4:	6814      	ldr	r4, [r2, #0]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fc fd23 	bl	8006532 <lwip_htonl>
 8009aec:	4603      	mov	r3, r0
 8009aee:	6063      	str	r3, [r4, #4]
 8009af0:	6863      	ldr	r3, [r4, #4]
 8009af2:	4a45      	ldr	r2, [pc, #276]	@ (8009c08 <tcp_input+0x2ac>)
 8009af4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009af6:	4b3c      	ldr	r3, [pc, #240]	@ (8009be8 <tcp_input+0x28c>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	4a3a      	ldr	r2, [pc, #232]	@ (8009be8 <tcp_input+0x28c>)
 8009afe:	6814      	ldr	r4, [r2, #0]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7fc fd16 	bl	8006532 <lwip_htonl>
 8009b06:	4603      	mov	r3, r0
 8009b08:	60a3      	str	r3, [r4, #8]
 8009b0a:	68a3      	ldr	r3, [r4, #8]
 8009b0c:	4a3f      	ldr	r2, [pc, #252]	@ (8009c0c <tcp_input+0x2b0>)
 8009b0e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009b10:	4b35      	ldr	r3, [pc, #212]	@ (8009be8 <tcp_input+0x28c>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	89db      	ldrh	r3, [r3, #14]
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	4a33      	ldr	r2, [pc, #204]	@ (8009be8 <tcp_input+0x28c>)
 8009b1a:	6814      	ldr	r4, [r2, #0]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fc fcf3 	bl	8006508 <lwip_htons>
 8009b22:	4603      	mov	r3, r0
 8009b24:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009b26:	4b30      	ldr	r3, [pc, #192]	@ (8009be8 <tcp_input+0x28c>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	899b      	ldrh	r3, [r3, #12]
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7fc fcea 	bl	8006508 <lwip_htons>
 8009b34:	4603      	mov	r3, r0
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b3c:	b2da      	uxtb	r2, r3
 8009b3e:	4b34      	ldr	r3, [pc, #208]	@ (8009c10 <tcp_input+0x2b4>)
 8009b40:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	891a      	ldrh	r2, [r3, #8]
 8009b46:	4b33      	ldr	r3, [pc, #204]	@ (8009c14 <tcp_input+0x2b8>)
 8009b48:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009b4a:	4b31      	ldr	r3, [pc, #196]	@ (8009c10 <tcp_input+0x2b4>)
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	f003 0303 	and.w	r3, r3, #3
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00c      	beq.n	8009b70 <tcp_input+0x214>
    tcplen++;
 8009b56:	4b2f      	ldr	r3, [pc, #188]	@ (8009c14 <tcp_input+0x2b8>)
 8009b58:	881b      	ldrh	r3, [r3, #0]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8009c14 <tcp_input+0x2b8>)
 8009b60:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	891a      	ldrh	r2, [r3, #8]
 8009b66:	4b2b      	ldr	r3, [pc, #172]	@ (8009c14 <tcp_input+0x2b8>)
 8009b68:	881b      	ldrh	r3, [r3, #0]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	f200 82e6 	bhi.w	800a13c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009b70:	2300      	movs	r3, #0
 8009b72:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b74:	4b28      	ldr	r3, [pc, #160]	@ (8009c18 <tcp_input+0x2bc>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	61fb      	str	r3, [r7, #28]
 8009b7a:	e09d      	b.n	8009cb8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	7d1b      	ldrb	r3, [r3, #20]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d105      	bne.n	8009b90 <tcp_input+0x234>
 8009b84:	4b15      	ldr	r3, [pc, #84]	@ (8009bdc <tcp_input+0x280>)
 8009b86:	22fb      	movs	r2, #251	@ 0xfb
 8009b88:	4924      	ldr	r1, [pc, #144]	@ (8009c1c <tcp_input+0x2c0>)
 8009b8a:	4816      	ldr	r0, [pc, #88]	@ (8009be4 <tcp_input+0x288>)
 8009b8c:	f006 fdf8 	bl	8010780 <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	7d1b      	ldrb	r3, [r3, #20]
 8009b94:	2b0a      	cmp	r3, #10
 8009b96:	d105      	bne.n	8009ba4 <tcp_input+0x248>
 8009b98:	4b10      	ldr	r3, [pc, #64]	@ (8009bdc <tcp_input+0x280>)
 8009b9a:	22fc      	movs	r2, #252	@ 0xfc
 8009b9c:	4920      	ldr	r1, [pc, #128]	@ (8009c20 <tcp_input+0x2c4>)
 8009b9e:	4811      	ldr	r0, [pc, #68]	@ (8009be4 <tcp_input+0x288>)
 8009ba0:	f006 fdee 	bl	8010780 <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	7d1b      	ldrb	r3, [r3, #20]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d105      	bne.n	8009bb8 <tcp_input+0x25c>
 8009bac:	4b0b      	ldr	r3, [pc, #44]	@ (8009bdc <tcp_input+0x280>)
 8009bae:	22fd      	movs	r2, #253	@ 0xfd
 8009bb0:	491c      	ldr	r1, [pc, #112]	@ (8009c24 <tcp_input+0x2c8>)
 8009bb2:	480c      	ldr	r0, [pc, #48]	@ (8009be4 <tcp_input+0x288>)
 8009bb4:	f006 fde4 	bl	8010780 <printf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	7a1b      	ldrb	r3, [r3, #8]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d033      	beq.n	8009c28 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	7a1a      	ldrb	r2, [r3, #8]
 8009bc4:	4b09      	ldr	r3, [pc, #36]	@ (8009bec <tcp_input+0x290>)
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009bcc:	3301      	adds	r3, #1
 8009bce:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d029      	beq.n	8009c28 <tcp_input+0x2cc>
      prev = pcb;
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	61bb      	str	r3, [r7, #24]
      continue;
 8009bd8:	e06b      	b.n	8009cb2 <tcp_input+0x356>
 8009bda:	bf00      	nop
 8009bdc:	080162c4 	.word	0x080162c4
 8009be0:	080162f8 	.word	0x080162f8
 8009be4:	08016310 	.word	0x08016310
 8009be8:	20008a8c 	.word	0x20008a8c
 8009bec:	200054f4 	.word	0x200054f4
 8009bf0:	20008a90 	.word	0x20008a90
 8009bf4:	20008a94 	.word	0x20008a94
 8009bf8:	20008a92 	.word	0x20008a92
 8009bfc:	08016338 	.word	0x08016338
 8009c00:	08016348 	.word	0x08016348
 8009c04:	08016354 	.word	0x08016354
 8009c08:	20008a9c 	.word	0x20008a9c
 8009c0c:	20008aa0 	.word	0x20008aa0
 8009c10:	20008aa8 	.word	0x20008aa8
 8009c14:	20008aa6 	.word	0x20008aa6
 8009c18:	20008a70 	.word	0x20008a70
 8009c1c:	08016374 	.word	0x08016374
 8009c20:	0801639c 	.word	0x0801639c
 8009c24:	080163c8 	.word	0x080163c8
    }

    if (pcb->remote_port == tcphdr->src &&
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	8b1a      	ldrh	r2, [r3, #24]
 8009c2c:	4b72      	ldr	r3, [pc, #456]	@ (8009df8 <tcp_input+0x49c>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d13a      	bne.n	8009cae <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	8ada      	ldrh	r2, [r3, #22]
 8009c3c:	4b6e      	ldr	r3, [pc, #440]	@ (8009df8 <tcp_input+0x49c>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	885b      	ldrh	r3, [r3, #2]
 8009c42:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d132      	bne.n	8009cae <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	685a      	ldr	r2, [r3, #4]
 8009c4c:	4b6b      	ldr	r3, [pc, #428]	@ (8009dfc <tcp_input+0x4a0>)
 8009c4e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d12c      	bne.n	8009cae <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	4b68      	ldr	r3, [pc, #416]	@ (8009dfc <tcp_input+0x4a0>)
 8009c5a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d126      	bne.n	8009cae <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	69fa      	ldr	r2, [r7, #28]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d106      	bne.n	8009c78 <tcp_input+0x31c>
 8009c6a:	4b65      	ldr	r3, [pc, #404]	@ (8009e00 <tcp_input+0x4a4>)
 8009c6c:	f240 120d 	movw	r2, #269	@ 0x10d
 8009c70:	4964      	ldr	r1, [pc, #400]	@ (8009e04 <tcp_input+0x4a8>)
 8009c72:	4865      	ldr	r0, [pc, #404]	@ (8009e08 <tcp_input+0x4ac>)
 8009c74:	f006 fd84 	bl	8010780 <printf>
      if (prev != NULL) {
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00a      	beq.n	8009c94 <tcp_input+0x338>
        prev->next = pcb->next;
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	68da      	ldr	r2, [r3, #12]
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009c86:	4b61      	ldr	r3, [pc, #388]	@ (8009e0c <tcp_input+0x4b0>)
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009c8e:	4a5f      	ldr	r2, [pc, #380]	@ (8009e0c <tcp_input+0x4b0>)
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	69fa      	ldr	r2, [r7, #28]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d111      	bne.n	8009cc2 <tcp_input+0x366>
 8009c9e:	4b58      	ldr	r3, [pc, #352]	@ (8009e00 <tcp_input+0x4a4>)
 8009ca0:	f240 1215 	movw	r2, #277	@ 0x115
 8009ca4:	495a      	ldr	r1, [pc, #360]	@ (8009e10 <tcp_input+0x4b4>)
 8009ca6:	4858      	ldr	r0, [pc, #352]	@ (8009e08 <tcp_input+0x4ac>)
 8009ca8:	f006 fd6a 	bl	8010780 <printf>
      break;
 8009cac:	e009      	b.n	8009cc2 <tcp_input+0x366>
    }
    prev = pcb;
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	61fb      	str	r3, [r7, #28]
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	f47f af5e 	bne.w	8009b7c <tcp_input+0x220>
 8009cc0:	e000      	b.n	8009cc4 <tcp_input+0x368>
      break;
 8009cc2:	bf00      	nop
  }

  if (pcb == NULL) {
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f040 80aa 	bne.w	8009e20 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ccc:	4b51      	ldr	r3, [pc, #324]	@ (8009e14 <tcp_input+0x4b8>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	61fb      	str	r3, [r7, #28]
 8009cd2:	e03f      	b.n	8009d54 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	7d1b      	ldrb	r3, [r3, #20]
 8009cd8:	2b0a      	cmp	r3, #10
 8009cda:	d006      	beq.n	8009cea <tcp_input+0x38e>
 8009cdc:	4b48      	ldr	r3, [pc, #288]	@ (8009e00 <tcp_input+0x4a4>)
 8009cde:	f240 121f 	movw	r2, #287	@ 0x11f
 8009ce2:	494d      	ldr	r1, [pc, #308]	@ (8009e18 <tcp_input+0x4bc>)
 8009ce4:	4848      	ldr	r0, [pc, #288]	@ (8009e08 <tcp_input+0x4ac>)
 8009ce6:	f006 fd4b 	bl	8010780 <printf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	7a1b      	ldrb	r3, [r3, #8]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d009      	beq.n	8009d06 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	7a1a      	ldrb	r2, [r3, #8]
 8009cf6:	4b41      	ldr	r3, [pc, #260]	@ (8009dfc <tcp_input+0x4a0>)
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009cfe:	3301      	adds	r3, #1
 8009d00:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d122      	bne.n	8009d4c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	8b1a      	ldrh	r2, [r3, #24]
 8009d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8009df8 <tcp_input+0x49c>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	881b      	ldrh	r3, [r3, #0]
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d11b      	bne.n	8009d4e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	8ada      	ldrh	r2, [r3, #22]
 8009d1a:	4b37      	ldr	r3, [pc, #220]	@ (8009df8 <tcp_input+0x49c>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	885b      	ldrh	r3, [r3, #2]
 8009d20:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d113      	bne.n	8009d4e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	685a      	ldr	r2, [r3, #4]
 8009d2a:	4b34      	ldr	r3, [pc, #208]	@ (8009dfc <tcp_input+0x4a0>)
 8009d2c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d10d      	bne.n	8009d4e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	4b31      	ldr	r3, [pc, #196]	@ (8009dfc <tcp_input+0x4a0>)
 8009d38:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d107      	bne.n	8009d4e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009d3e:	69f8      	ldr	r0, [r7, #28]
 8009d40:	f000 fb56 	bl	800a3f0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f7fd ff3d 	bl	8007bc4 <pbuf_free>
        return;
 8009d4a:	e1fd      	b.n	800a148 <tcp_input+0x7ec>
        continue;
 8009d4c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	61fb      	str	r3, [r7, #28]
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d1bc      	bne.n	8009cd4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8009e1c <tcp_input+0x4c0>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	617b      	str	r3, [r7, #20]
 8009d64:	e02a      	b.n	8009dbc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	7a1b      	ldrb	r3, [r3, #8]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00c      	beq.n	8009d88 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	7a1a      	ldrb	r2, [r3, #8]
 8009d72:	4b22      	ldr	r3, [pc, #136]	@ (8009dfc <tcp_input+0x4a0>)
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d002      	beq.n	8009d88 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	61bb      	str	r3, [r7, #24]
        continue;
 8009d86:	e016      	b.n	8009db6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	8ada      	ldrh	r2, [r3, #22]
 8009d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8009df8 <tcp_input+0x49c>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	885b      	ldrh	r3, [r3, #2]
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d10c      	bne.n	8009db2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	4b17      	ldr	r3, [pc, #92]	@ (8009dfc <tcp_input+0x4a0>)
 8009d9e:	695b      	ldr	r3, [r3, #20]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d00f      	beq.n	8009dc4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00d      	beq.n	8009dc6 <tcp_input+0x46a>
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d009      	beq.n	8009dc6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	617b      	str	r3, [r7, #20]
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1d1      	bne.n	8009d66 <tcp_input+0x40a>
 8009dc2:	e000      	b.n	8009dc6 <tcp_input+0x46a>
            break;
 8009dc4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d029      	beq.n	8009e20 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00a      	beq.n	8009de8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	68da      	ldr	r2, [r3, #12]
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009dda:	4b10      	ldr	r3, [pc, #64]	@ (8009e1c <tcp_input+0x4c0>)
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009de2:	4a0e      	ldr	r2, [pc, #56]	@ (8009e1c <tcp_input+0x4c0>)
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009de8:	6978      	ldr	r0, [r7, #20]
 8009dea:	f000 fa03 	bl	800a1f4 <tcp_listen_input>
      }
      pbuf_free(p);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7fd fee8 	bl	8007bc4 <pbuf_free>
      return;
 8009df4:	e1a8      	b.n	800a148 <tcp_input+0x7ec>
 8009df6:	bf00      	nop
 8009df8:	20008a8c 	.word	0x20008a8c
 8009dfc:	200054f4 	.word	0x200054f4
 8009e00:	080162c4 	.word	0x080162c4
 8009e04:	080163f0 	.word	0x080163f0
 8009e08:	08016310 	.word	0x08016310
 8009e0c:	20008a70 	.word	0x20008a70
 8009e10:	0801641c 	.word	0x0801641c
 8009e14:	20008a74 	.word	0x20008a74
 8009e18:	08016448 	.word	0x08016448
 8009e1c:	20008a6c 	.word	0x20008a6c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f000 8158 	beq.w	800a0d8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009e28:	4b95      	ldr	r3, [pc, #596]	@ (800a080 <tcp_input+0x724>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	891a      	ldrh	r2, [r3, #8]
 8009e32:	4b93      	ldr	r3, [pc, #588]	@ (800a080 <tcp_input+0x724>)
 8009e34:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009e36:	4a92      	ldr	r2, [pc, #584]	@ (800a080 <tcp_input+0x724>)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009e3c:	4b91      	ldr	r3, [pc, #580]	@ (800a084 <tcp_input+0x728>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a8f      	ldr	r2, [pc, #572]	@ (800a080 <tcp_input+0x724>)
 8009e42:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009e44:	4b90      	ldr	r3, [pc, #576]	@ (800a088 <tcp_input+0x72c>)
 8009e46:	2200      	movs	r2, #0
 8009e48:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009e4a:	4b90      	ldr	r3, [pc, #576]	@ (800a08c <tcp_input+0x730>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009e50:	4b8f      	ldr	r3, [pc, #572]	@ (800a090 <tcp_input+0x734>)
 8009e52:	2200      	movs	r2, #0
 8009e54:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009e56:	4b8f      	ldr	r3, [pc, #572]	@ (800a094 <tcp_input+0x738>)
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	f003 0308 	and.w	r3, r3, #8
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d006      	beq.n	8009e70 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	7b5b      	ldrb	r3, [r3, #13]
 8009e66:	f043 0301 	orr.w	r3, r3, #1
 8009e6a:	b2da      	uxtb	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d017      	beq.n	8009ea8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009e78:	69f8      	ldr	r0, [r7, #28]
 8009e7a:	f7ff f929 	bl	80090d0 <tcp_process_refused_data>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	f113 0f0d 	cmn.w	r3, #13
 8009e84:	d007      	beq.n	8009e96 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00c      	beq.n	8009ea8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009e8e:	4b82      	ldr	r3, [pc, #520]	@ (800a098 <tcp_input+0x73c>)
 8009e90:	881b      	ldrh	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d008      	beq.n	8009ea8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f040 80e3 	bne.w	800a066 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009ea0:	69f8      	ldr	r0, [r7, #28]
 8009ea2:	f003 f9a7 	bl	800d1f4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009ea6:	e0de      	b.n	800a066 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8009ea8:	4a7c      	ldr	r2, [pc, #496]	@ (800a09c <tcp_input+0x740>)
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009eae:	69f8      	ldr	r0, [r7, #28]
 8009eb0:	f000 fb18 	bl	800a4e4 <tcp_process>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009eb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ebc:	f113 0f0d 	cmn.w	r3, #13
 8009ec0:	f000 80d3 	beq.w	800a06a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8009ec4:	4b71      	ldr	r3, [pc, #452]	@ (800a08c <tcp_input+0x730>)
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	f003 0308 	and.w	r3, r3, #8
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d015      	beq.n	8009efc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d008      	beq.n	8009eec <tcp_input+0x590>
 8009eda:	69fb      	ldr	r3, [r7, #28]
 8009edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ee0:	69fa      	ldr	r2, [r7, #28]
 8009ee2:	6912      	ldr	r2, [r2, #16]
 8009ee4:	f06f 010d 	mvn.w	r1, #13
 8009ee8:	4610      	mov	r0, r2
 8009eea:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009eec:	69f9      	ldr	r1, [r7, #28]
 8009eee:	486c      	ldr	r0, [pc, #432]	@ (800a0a0 <tcp_input+0x744>)
 8009ef0:	f7ff fbbc 	bl	800966c <tcp_pcb_remove>
        tcp_free(pcb);
 8009ef4:	69f8      	ldr	r0, [r7, #28]
 8009ef6:	f7fe f9a7 	bl	8008248 <tcp_free>
 8009efa:	e0da      	b.n	800a0b2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009efc:	2300      	movs	r3, #0
 8009efe:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009f00:	4b63      	ldr	r3, [pc, #396]	@ (800a090 <tcp_input+0x734>)
 8009f02:	881b      	ldrh	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d01d      	beq.n	8009f44 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009f08:	4b61      	ldr	r3, [pc, #388]	@ (800a090 <tcp_input+0x734>)
 8009f0a:	881b      	ldrh	r3, [r3, #0]
 8009f0c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009f0e:	69fb      	ldr	r3, [r7, #28]
 8009f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00a      	beq.n	8009f2e <tcp_input+0x5d2>
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f1e:	69fa      	ldr	r2, [r7, #28]
 8009f20:	6910      	ldr	r0, [r2, #16]
 8009f22:	89fa      	ldrh	r2, [r7, #14]
 8009f24:	69f9      	ldr	r1, [r7, #28]
 8009f26:	4798      	blx	r3
 8009f28:	4603      	mov	r3, r0
 8009f2a:	74fb      	strb	r3, [r7, #19]
 8009f2c:	e001      	b.n	8009f32 <tcp_input+0x5d6>
 8009f2e:	2300      	movs	r3, #0
 8009f30:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009f32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f36:	f113 0f0d 	cmn.w	r3, #13
 8009f3a:	f000 8098 	beq.w	800a06e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009f3e:	4b54      	ldr	r3, [pc, #336]	@ (800a090 <tcp_input+0x734>)
 8009f40:	2200      	movs	r2, #0
 8009f42:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009f44:	69f8      	ldr	r0, [r7, #28]
 8009f46:	f000 f915 	bl	800a174 <tcp_input_delayed_close>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f040 8090 	bne.w	800a072 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009f52:	4b4d      	ldr	r3, [pc, #308]	@ (800a088 <tcp_input+0x72c>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d041      	beq.n	8009fde <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d006      	beq.n	8009f70 <tcp_input+0x614>
 8009f62:	4b50      	ldr	r3, [pc, #320]	@ (800a0a4 <tcp_input+0x748>)
 8009f64:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8009f68:	494f      	ldr	r1, [pc, #316]	@ (800a0a8 <tcp_input+0x74c>)
 8009f6a:	4850      	ldr	r0, [pc, #320]	@ (800a0ac <tcp_input+0x750>)
 8009f6c:	f006 fc08 	bl	8010780 <printf>
          if (pcb->flags & TF_RXCLOSED) {
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	8b5b      	ldrh	r3, [r3, #26]
 8009f74:	f003 0310 	and.w	r3, r3, #16
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d008      	beq.n	8009f8e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009f7c:	4b42      	ldr	r3, [pc, #264]	@ (800a088 <tcp_input+0x72c>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7fd fe1f 	bl	8007bc4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009f86:	69f8      	ldr	r0, [r7, #28]
 8009f88:	f7fe fc46 	bl	8008818 <tcp_abort>
            goto aborted;
 8009f8c:	e091      	b.n	800a0b2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00c      	beq.n	8009fb2 <tcp_input+0x656>
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	6918      	ldr	r0, [r3, #16]
 8009fa2:	4b39      	ldr	r3, [pc, #228]	@ (800a088 <tcp_input+0x72c>)
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	69f9      	ldr	r1, [r7, #28]
 8009faa:	47a0      	blx	r4
 8009fac:	4603      	mov	r3, r0
 8009fae:	74fb      	strb	r3, [r7, #19]
 8009fb0:	e008      	b.n	8009fc4 <tcp_input+0x668>
 8009fb2:	4b35      	ldr	r3, [pc, #212]	@ (800a088 <tcp_input+0x72c>)
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	69f9      	ldr	r1, [r7, #28]
 8009fba:	2000      	movs	r0, #0
 8009fbc:	f7ff f95e 	bl	800927c <tcp_recv_null>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009fc4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009fc8:	f113 0f0d 	cmn.w	r3, #13
 8009fcc:	d053      	beq.n	800a076 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009fce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d003      	beq.n	8009fde <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009fd6:	4b2c      	ldr	r3, [pc, #176]	@ (800a088 <tcp_input+0x72c>)
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009fde:	4b2b      	ldr	r3, [pc, #172]	@ (800a08c <tcp_input+0x730>)
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	f003 0320 	and.w	r3, r3, #32
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d030      	beq.n	800a04c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d009      	beq.n	800a006 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ff6:	7b5a      	ldrb	r2, [r3, #13]
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ffc:	f042 0220 	orr.w	r2, r2, #32
 800a000:	b2d2      	uxtb	r2, r2
 800a002:	735a      	strb	r2, [r3, #13]
 800a004:	e022      	b.n	800a04c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a00a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800a00e:	d005      	beq.n	800a01c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a014:	3301      	adds	r3, #1
 800a016:	b29a      	uxth	r2, r3
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00b      	beq.n	800a03e <tcp_input+0x6e2>
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	6918      	ldr	r0, [r3, #16]
 800a030:	2300      	movs	r3, #0
 800a032:	2200      	movs	r2, #0
 800a034:	69f9      	ldr	r1, [r7, #28]
 800a036:	47a0      	blx	r4
 800a038:	4603      	mov	r3, r0
 800a03a:	74fb      	strb	r3, [r7, #19]
 800a03c:	e001      	b.n	800a042 <tcp_input+0x6e6>
 800a03e:	2300      	movs	r3, #0
 800a040:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a042:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a046:	f113 0f0d 	cmn.w	r3, #13
 800a04a:	d016      	beq.n	800a07a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a04c:	4b13      	ldr	r3, [pc, #76]	@ (800a09c <tcp_input+0x740>)
 800a04e:	2200      	movs	r2, #0
 800a050:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a052:	69f8      	ldr	r0, [r7, #28]
 800a054:	f000 f88e 	bl	800a174 <tcp_input_delayed_close>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d128      	bne.n	800a0b0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a05e:	69f8      	ldr	r0, [r7, #28]
 800a060:	f002 fac2 	bl	800c5e8 <tcp_output>
 800a064:	e025      	b.n	800a0b2 <tcp_input+0x756>
        goto aborted;
 800a066:	bf00      	nop
 800a068:	e023      	b.n	800a0b2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a06a:	bf00      	nop
 800a06c:	e021      	b.n	800a0b2 <tcp_input+0x756>
              goto aborted;
 800a06e:	bf00      	nop
 800a070:	e01f      	b.n	800a0b2 <tcp_input+0x756>
          goto aborted;
 800a072:	bf00      	nop
 800a074:	e01d      	b.n	800a0b2 <tcp_input+0x756>
            goto aborted;
 800a076:	bf00      	nop
 800a078:	e01b      	b.n	800a0b2 <tcp_input+0x756>
              goto aborted;
 800a07a:	bf00      	nop
 800a07c:	e019      	b.n	800a0b2 <tcp_input+0x756>
 800a07e:	bf00      	nop
 800a080:	20008a7c 	.word	0x20008a7c
 800a084:	20008a8c 	.word	0x20008a8c
 800a088:	20008aac 	.word	0x20008aac
 800a08c:	20008aa9 	.word	0x20008aa9
 800a090:	20008aa4 	.word	0x20008aa4
 800a094:	20008aa8 	.word	0x20008aa8
 800a098:	20008aa6 	.word	0x20008aa6
 800a09c:	20008ab0 	.word	0x20008ab0
 800a0a0:	20008a70 	.word	0x20008a70
 800a0a4:	080162c4 	.word	0x080162c4
 800a0a8:	08016478 	.word	0x08016478
 800a0ac:	08016310 	.word	0x08016310
          goto aborted;
 800a0b0:	bf00      	nop
    tcp_input_pcb = NULL;
 800a0b2:	4b27      	ldr	r3, [pc, #156]	@ (800a150 <tcp_input+0x7f4>)
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a0b8:	4b26      	ldr	r3, [pc, #152]	@ (800a154 <tcp_input+0x7f8>)
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a0be:	4b26      	ldr	r3, [pc, #152]	@ (800a158 <tcp_input+0x7fc>)
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d03f      	beq.n	800a146 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800a0c6:	4b24      	ldr	r3, [pc, #144]	@ (800a158 <tcp_input+0x7fc>)
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fd fd7a 	bl	8007bc4 <pbuf_free>
      inseg.p = NULL;
 800a0d0:	4b21      	ldr	r3, [pc, #132]	@ (800a158 <tcp_input+0x7fc>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a0d6:	e036      	b.n	800a146 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a0d8:	4b20      	ldr	r3, [pc, #128]	@ (800a15c <tcp_input+0x800>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	899b      	ldrh	r3, [r3, #12]
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f7fc fa11 	bl	8006508 <lwip_htons>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	f003 0304 	and.w	r3, r3, #4
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d118      	bne.n	800a124 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0f2:	4b1b      	ldr	r3, [pc, #108]	@ (800a160 <tcp_input+0x804>)
 800a0f4:	6819      	ldr	r1, [r3, #0]
 800a0f6:	4b1b      	ldr	r3, [pc, #108]	@ (800a164 <tcp_input+0x808>)
 800a0f8:	881b      	ldrh	r3, [r3, #0]
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	4b1a      	ldr	r3, [pc, #104]	@ (800a168 <tcp_input+0x80c>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a102:	4b16      	ldr	r3, [pc, #88]	@ (800a15c <tcp_input+0x800>)
 800a104:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a106:	885b      	ldrh	r3, [r3, #2]
 800a108:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a10a:	4a14      	ldr	r2, [pc, #80]	@ (800a15c <tcp_input+0x800>)
 800a10c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a10e:	8812      	ldrh	r2, [r2, #0]
 800a110:	b292      	uxth	r2, r2
 800a112:	9202      	str	r2, [sp, #8]
 800a114:	9301      	str	r3, [sp, #4]
 800a116:	4b15      	ldr	r3, [pc, #84]	@ (800a16c <tcp_input+0x810>)
 800a118:	9300      	str	r3, [sp, #0]
 800a11a:	4b15      	ldr	r3, [pc, #84]	@ (800a170 <tcp_input+0x814>)
 800a11c:	4602      	mov	r2, r0
 800a11e:	2000      	movs	r0, #0
 800a120:	f003 f816 	bl	800d150 <tcp_rst>
    pbuf_free(p);
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f7fd fd4d 	bl	8007bc4 <pbuf_free>
  return;
 800a12a:	e00c      	b.n	800a146 <tcp_input+0x7ea>
    goto dropped;
 800a12c:	bf00      	nop
 800a12e:	e006      	b.n	800a13e <tcp_input+0x7e2>
    goto dropped;
 800a130:	bf00      	nop
 800a132:	e004      	b.n	800a13e <tcp_input+0x7e2>
    goto dropped;
 800a134:	bf00      	nop
 800a136:	e002      	b.n	800a13e <tcp_input+0x7e2>
      goto dropped;
 800a138:	bf00      	nop
 800a13a:	e000      	b.n	800a13e <tcp_input+0x7e2>
      goto dropped;
 800a13c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7fd fd40 	bl	8007bc4 <pbuf_free>
 800a144:	e000      	b.n	800a148 <tcp_input+0x7ec>
  return;
 800a146:	bf00      	nop
}
 800a148:	3724      	adds	r7, #36	@ 0x24
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd90      	pop	{r4, r7, pc}
 800a14e:	bf00      	nop
 800a150:	20008ab0 	.word	0x20008ab0
 800a154:	20008aac 	.word	0x20008aac
 800a158:	20008a7c 	.word	0x20008a7c
 800a15c:	20008a8c 	.word	0x20008a8c
 800a160:	20008aa0 	.word	0x20008aa0
 800a164:	20008aa6 	.word	0x20008aa6
 800a168:	20008a9c 	.word	0x20008a9c
 800a16c:	20005504 	.word	0x20005504
 800a170:	20005508 	.word	0x20005508

0800a174 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d106      	bne.n	800a190 <tcp_input_delayed_close+0x1c>
 800a182:	4b17      	ldr	r3, [pc, #92]	@ (800a1e0 <tcp_input_delayed_close+0x6c>)
 800a184:	f240 225a 	movw	r2, #602	@ 0x25a
 800a188:	4916      	ldr	r1, [pc, #88]	@ (800a1e4 <tcp_input_delayed_close+0x70>)
 800a18a:	4817      	ldr	r0, [pc, #92]	@ (800a1e8 <tcp_input_delayed_close+0x74>)
 800a18c:	f006 faf8 	bl	8010780 <printf>

  if (recv_flags & TF_CLOSED) {
 800a190:	4b16      	ldr	r3, [pc, #88]	@ (800a1ec <tcp_input_delayed_close+0x78>)
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	f003 0310 	and.w	r3, r3, #16
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d01c      	beq.n	800a1d6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	8b5b      	ldrh	r3, [r3, #26]
 800a1a0:	f003 0310 	and.w	r3, r3, #16
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d10d      	bne.n	800a1c4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d008      	beq.n	800a1c4 <tcp_input_delayed_close+0x50>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	6912      	ldr	r2, [r2, #16]
 800a1bc:	f06f 010e 	mvn.w	r1, #14
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a1c4:	6879      	ldr	r1, [r7, #4]
 800a1c6:	480a      	ldr	r0, [pc, #40]	@ (800a1f0 <tcp_input_delayed_close+0x7c>)
 800a1c8:	f7ff fa50 	bl	800966c <tcp_pcb_remove>
    tcp_free(pcb);
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f7fe f83b 	bl	8008248 <tcp_free>
    return 1;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e000      	b.n	800a1d8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	080162c4 	.word	0x080162c4
 800a1e4:	08016494 	.word	0x08016494
 800a1e8:	08016310 	.word	0x08016310
 800a1ec:	20008aa9 	.word	0x20008aa9
 800a1f0:	20008a70 	.word	0x20008a70

0800a1f4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a1f4:	b590      	push	{r4, r7, lr}
 800a1f6:	b08b      	sub	sp, #44	@ 0x2c
 800a1f8:	af04      	add	r7, sp, #16
 800a1fa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a1fc:	4b6f      	ldr	r3, [pc, #444]	@ (800a3bc <tcp_listen_input+0x1c8>)
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	f003 0304 	and.w	r3, r3, #4
 800a204:	2b00      	cmp	r3, #0
 800a206:	f040 80d2 	bne.w	800a3ae <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d106      	bne.n	800a21e <tcp_listen_input+0x2a>
 800a210:	4b6b      	ldr	r3, [pc, #428]	@ (800a3c0 <tcp_listen_input+0x1cc>)
 800a212:	f240 2281 	movw	r2, #641	@ 0x281
 800a216:	496b      	ldr	r1, [pc, #428]	@ (800a3c4 <tcp_listen_input+0x1d0>)
 800a218:	486b      	ldr	r0, [pc, #428]	@ (800a3c8 <tcp_listen_input+0x1d4>)
 800a21a:	f006 fab1 	bl	8010780 <printf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a21e:	4b67      	ldr	r3, [pc, #412]	@ (800a3bc <tcp_listen_input+0x1c8>)
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	f003 0310 	and.w	r3, r3, #16
 800a226:	2b00      	cmp	r3, #0
 800a228:	d019      	beq.n	800a25e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a22a:	4b68      	ldr	r3, [pc, #416]	@ (800a3cc <tcp_listen_input+0x1d8>)
 800a22c:	6819      	ldr	r1, [r3, #0]
 800a22e:	4b68      	ldr	r3, [pc, #416]	@ (800a3d0 <tcp_listen_input+0x1dc>)
 800a230:	881b      	ldrh	r3, [r3, #0]
 800a232:	461a      	mov	r2, r3
 800a234:	4b67      	ldr	r3, [pc, #412]	@ (800a3d4 <tcp_listen_input+0x1e0>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a23a:	4b67      	ldr	r3, [pc, #412]	@ (800a3d8 <tcp_listen_input+0x1e4>)
 800a23c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a23e:	885b      	ldrh	r3, [r3, #2]
 800a240:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a242:	4a65      	ldr	r2, [pc, #404]	@ (800a3d8 <tcp_listen_input+0x1e4>)
 800a244:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a246:	8812      	ldrh	r2, [r2, #0]
 800a248:	b292      	uxth	r2, r2
 800a24a:	9202      	str	r2, [sp, #8]
 800a24c:	9301      	str	r3, [sp, #4]
 800a24e:	4b63      	ldr	r3, [pc, #396]	@ (800a3dc <tcp_listen_input+0x1e8>)
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	4b63      	ldr	r3, [pc, #396]	@ (800a3e0 <tcp_listen_input+0x1ec>)
 800a254:	4602      	mov	r2, r0
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f002 ff7a 	bl	800d150 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a25c:	e0a9      	b.n	800a3b2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a25e:	4b57      	ldr	r3, [pc, #348]	@ (800a3bc <tcp_listen_input+0x1c8>)
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	f003 0302 	and.w	r3, r3, #2
 800a266:	2b00      	cmp	r3, #0
 800a268:	f000 80a3 	beq.w	800a3b2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	7d5b      	ldrb	r3, [r3, #21]
 800a270:	4618      	mov	r0, r3
 800a272:	f7ff f927 	bl	80094c4 <tcp_alloc>
 800a276:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d111      	bne.n	800a2a2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	699b      	ldr	r3, [r3, #24]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00a      	beq.n	800a29c <tcp_listen_input+0xa8>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	699b      	ldr	r3, [r3, #24]
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	6910      	ldr	r0, [r2, #16]
 800a28e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a292:	2100      	movs	r1, #0
 800a294:	4798      	blx	r3
 800a296:	4603      	mov	r3, r0
 800a298:	73bb      	strb	r3, [r7, #14]
      return;
 800a29a:	e08b      	b.n	800a3b4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a29c:	23f0      	movs	r3, #240	@ 0xf0
 800a29e:	73bb      	strb	r3, [r7, #14]
      return;
 800a2a0:	e088      	b.n	800a3b4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a2a2:	4b50      	ldr	r3, [pc, #320]	@ (800a3e4 <tcp_listen_input+0x1f0>)
 800a2a4:	695a      	ldr	r2, [r3, #20]
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a2aa:	4b4e      	ldr	r3, [pc, #312]	@ (800a3e4 <tcp_listen_input+0x1f0>)
 800a2ac:	691a      	ldr	r2, [r3, #16]
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	8ada      	ldrh	r2, [r3, #22]
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a2ba:	4b47      	ldr	r3, [pc, #284]	@ (800a3d8 <tcp_listen_input+0x1e4>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	881b      	ldrh	r3, [r3, #0]
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	2203      	movs	r2, #3
 800a2ca:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a2cc:	4b41      	ldr	r3, [pc, #260]	@ (800a3d4 <tcp_listen_input+0x1e0>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	1c5a      	adds	r2, r3, #1
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800a2de:	6978      	ldr	r0, [r7, #20]
 800a2e0:	f7ff fa58 	bl	8009794 <tcp_next_iss>
 800a2e4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	693a      	ldr	r2, [r7, #16]
 800a2f0:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	693a      	ldr	r2, [r7, #16]
 800a2fc:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a2fe:	4b35      	ldr	r3, [pc, #212]	@ (800a3d4 <tcp_listen_input+0x1e0>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	1e5a      	subs	r2, r3, #1
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	691a      	ldr	r2, [r3, #16]
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	7a5b      	ldrb	r3, [r3, #9]
 800a31a:	f003 030c 	and.w	r3, r3, #12
 800a31e:	b2da      	uxtb	r2, r3
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	7a1a      	ldrb	r2, [r3, #8]
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a32c:	4b2e      	ldr	r3, [pc, #184]	@ (800a3e8 <tcp_listen_input+0x1f4>)
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	60da      	str	r2, [r3, #12]
 800a334:	4a2c      	ldr	r2, [pc, #176]	@ (800a3e8 <tcp_listen_input+0x1f4>)
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	6013      	str	r3, [r2, #0]
 800a33a:	f003 f8cb 	bl	800d4d4 <tcp_timer_needed>
 800a33e:	4b2b      	ldr	r3, [pc, #172]	@ (800a3ec <tcp_listen_input+0x1f8>)
 800a340:	2201      	movs	r2, #1
 800a342:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a344:	6978      	ldr	r0, [r7, #20]
 800a346:	f001 fd8b 	bl	800be60 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a34a:	4b23      	ldr	r3, [pc, #140]	@ (800a3d8 <tcp_listen_input+0x1e4>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	89db      	ldrh	r3, [r3, #14]
 800a350:	b29a      	uxth	r2, r3
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	3304      	adds	r3, #4
 800a36c:	4618      	mov	r0, r3
 800a36e:	f004 ff3d 	bl	800f1ec <ip4_route>
 800a372:	4601      	mov	r1, r0
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	3304      	adds	r3, #4
 800a378:	461a      	mov	r2, r3
 800a37a:	4620      	mov	r0, r4
 800a37c:	f7ff fa30 	bl	80097e0 <tcp_eff_send_mss_netif>
 800a380:	4603      	mov	r3, r0
 800a382:	461a      	mov	r2, r3
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a388:	2112      	movs	r1, #18
 800a38a:	6978      	ldr	r0, [r7, #20]
 800a38c:	f002 f83e 	bl	800c40c <tcp_enqueue_flags>
 800a390:	4603      	mov	r3, r0
 800a392:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d004      	beq.n	800a3a6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a39c:	2100      	movs	r1, #0
 800a39e:	6978      	ldr	r0, [r7, #20]
 800a3a0:	f7fe f97c 	bl	800869c <tcp_abandon>
      return;
 800a3a4:	e006      	b.n	800a3b4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a3a6:	6978      	ldr	r0, [r7, #20]
 800a3a8:	f002 f91e 	bl	800c5e8 <tcp_output>
  return;
 800a3ac:	e001      	b.n	800a3b2 <tcp_listen_input+0x1be>
    return;
 800a3ae:	bf00      	nop
 800a3b0:	e000      	b.n	800a3b4 <tcp_listen_input+0x1c0>
  return;
 800a3b2:	bf00      	nop
}
 800a3b4:	371c      	adds	r7, #28
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd90      	pop	{r4, r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	20008aa8 	.word	0x20008aa8
 800a3c0:	080162c4 	.word	0x080162c4
 800a3c4:	080164bc 	.word	0x080164bc
 800a3c8:	08016310 	.word	0x08016310
 800a3cc:	20008aa0 	.word	0x20008aa0
 800a3d0:	20008aa6 	.word	0x20008aa6
 800a3d4:	20008a9c 	.word	0x20008a9c
 800a3d8:	20008a8c 	.word	0x20008a8c
 800a3dc:	20005504 	.word	0x20005504
 800a3e0:	20005508 	.word	0x20005508
 800a3e4:	200054f4 	.word	0x200054f4
 800a3e8:	20008a70 	.word	0x20008a70
 800a3ec:	20008a78 	.word	0x20008a78

0800a3f0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b086      	sub	sp, #24
 800a3f4:	af04      	add	r7, sp, #16
 800a3f6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a3f8:	4b2f      	ldr	r3, [pc, #188]	@ (800a4b8 <tcp_timewait_input+0xc8>)
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	f003 0304 	and.w	r3, r3, #4
 800a400:	2b00      	cmp	r3, #0
 800a402:	d153      	bne.n	800a4ac <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d106      	bne.n	800a418 <tcp_timewait_input+0x28>
 800a40a:	4b2c      	ldr	r3, [pc, #176]	@ (800a4bc <tcp_timewait_input+0xcc>)
 800a40c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800a410:	492b      	ldr	r1, [pc, #172]	@ (800a4c0 <tcp_timewait_input+0xd0>)
 800a412:	482c      	ldr	r0, [pc, #176]	@ (800a4c4 <tcp_timewait_input+0xd4>)
 800a414:	f006 f9b4 	bl	8010780 <printf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a418:	4b27      	ldr	r3, [pc, #156]	@ (800a4b8 <tcp_timewait_input+0xc8>)
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	f003 0302 	and.w	r3, r3, #2
 800a420:	2b00      	cmp	r3, #0
 800a422:	d02a      	beq.n	800a47a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a424:	4b28      	ldr	r3, [pc, #160]	@ (800a4c8 <tcp_timewait_input+0xd8>)
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	2b00      	cmp	r3, #0
 800a430:	db2d      	blt.n	800a48e <tcp_timewait_input+0x9e>
 800a432:	4b25      	ldr	r3, [pc, #148]	@ (800a4c8 <tcp_timewait_input+0xd8>)
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a43a:	6879      	ldr	r1, [r7, #4]
 800a43c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a43e:	440b      	add	r3, r1
 800a440:	1ad3      	subs	r3, r2, r3
 800a442:	2b00      	cmp	r3, #0
 800a444:	dc23      	bgt.n	800a48e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a446:	4b21      	ldr	r3, [pc, #132]	@ (800a4cc <tcp_timewait_input+0xdc>)
 800a448:	6819      	ldr	r1, [r3, #0]
 800a44a:	4b21      	ldr	r3, [pc, #132]	@ (800a4d0 <tcp_timewait_input+0xe0>)
 800a44c:	881b      	ldrh	r3, [r3, #0]
 800a44e:	461a      	mov	r2, r3
 800a450:	4b1d      	ldr	r3, [pc, #116]	@ (800a4c8 <tcp_timewait_input+0xd8>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a456:	4b1f      	ldr	r3, [pc, #124]	@ (800a4d4 <tcp_timewait_input+0xe4>)
 800a458:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a45a:	885b      	ldrh	r3, [r3, #2]
 800a45c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a45e:	4a1d      	ldr	r2, [pc, #116]	@ (800a4d4 <tcp_timewait_input+0xe4>)
 800a460:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a462:	8812      	ldrh	r2, [r2, #0]
 800a464:	b292      	uxth	r2, r2
 800a466:	9202      	str	r2, [sp, #8]
 800a468:	9301      	str	r3, [sp, #4]
 800a46a:	4b1b      	ldr	r3, [pc, #108]	@ (800a4d8 <tcp_timewait_input+0xe8>)
 800a46c:	9300      	str	r3, [sp, #0]
 800a46e:	4b1b      	ldr	r3, [pc, #108]	@ (800a4dc <tcp_timewait_input+0xec>)
 800a470:	4602      	mov	r2, r0
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f002 fe6c 	bl	800d150 <tcp_rst>
      return;
 800a478:	e01b      	b.n	800a4b2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a47a:	4b0f      	ldr	r3, [pc, #60]	@ (800a4b8 <tcp_timewait_input+0xc8>)
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	f003 0301 	and.w	r3, r3, #1
 800a482:	2b00      	cmp	r3, #0
 800a484:	d003      	beq.n	800a48e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a486:	4b16      	ldr	r3, [pc, #88]	@ (800a4e0 <tcp_timewait_input+0xf0>)
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a48e:	4b10      	ldr	r3, [pc, #64]	@ (800a4d0 <tcp_timewait_input+0xe0>)
 800a490:	881b      	ldrh	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00c      	beq.n	800a4b0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	8b5b      	ldrh	r3, [r3, #26]
 800a49a:	f043 0302 	orr.w	r3, r3, #2
 800a49e:	b29a      	uxth	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f002 f89f 	bl	800c5e8 <tcp_output>
  }
  return;
 800a4aa:	e001      	b.n	800a4b0 <tcp_timewait_input+0xc0>
    return;
 800a4ac:	bf00      	nop
 800a4ae:	e000      	b.n	800a4b2 <tcp_timewait_input+0xc2>
  return;
 800a4b0:	bf00      	nop
}
 800a4b2:	3708      	adds	r7, #8
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	20008aa8 	.word	0x20008aa8
 800a4bc:	080162c4 	.word	0x080162c4
 800a4c0:	080164dc 	.word	0x080164dc
 800a4c4:	08016310 	.word	0x08016310
 800a4c8:	20008a9c 	.word	0x20008a9c
 800a4cc:	20008aa0 	.word	0x20008aa0
 800a4d0:	20008aa6 	.word	0x20008aa6
 800a4d4:	20008a8c 	.word	0x20008a8c
 800a4d8:	20005504 	.word	0x20005504
 800a4dc:	20005508 	.word	0x20005508
 800a4e0:	20008a64 	.word	0x20008a64

0800a4e4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a4e4:	b590      	push	{r4, r7, lr}
 800a4e6:	b08d      	sub	sp, #52	@ 0x34
 800a4e8:	af04      	add	r7, sp, #16
 800a4ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d106      	bne.n	800a508 <tcp_process+0x24>
 800a4fa:	4b9d      	ldr	r3, [pc, #628]	@ (800a770 <tcp_process+0x28c>)
 800a4fc:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a500:	499c      	ldr	r1, [pc, #624]	@ (800a774 <tcp_process+0x290>)
 800a502:	489d      	ldr	r0, [pc, #628]	@ (800a778 <tcp_process+0x294>)
 800a504:	f006 f93c 	bl	8010780 <printf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a508:	4b9c      	ldr	r3, [pc, #624]	@ (800a77c <tcp_process+0x298>)
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	f003 0304 	and.w	r3, r3, #4
 800a510:	2b00      	cmp	r3, #0
 800a512:	d04e      	beq.n	800a5b2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	7d1b      	ldrb	r3, [r3, #20]
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d108      	bne.n	800a52e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a520:	4b97      	ldr	r3, [pc, #604]	@ (800a780 <tcp_process+0x29c>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	429a      	cmp	r2, r3
 800a526:	d123      	bne.n	800a570 <tcp_process+0x8c>
        acceptable = 1;
 800a528:	2301      	movs	r3, #1
 800a52a:	76fb      	strb	r3, [r7, #27]
 800a52c:	e020      	b.n	800a570 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a532:	4b94      	ldr	r3, [pc, #592]	@ (800a784 <tcp_process+0x2a0>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	429a      	cmp	r2, r3
 800a538:	d102      	bne.n	800a540 <tcp_process+0x5c>
        acceptable = 1;
 800a53a:	2301      	movs	r3, #1
 800a53c:	76fb      	strb	r3, [r7, #27]
 800a53e:	e017      	b.n	800a570 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a540:	4b90      	ldr	r3, [pc, #576]	@ (800a784 <tcp_process+0x2a0>)
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a548:	1ad3      	subs	r3, r2, r3
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	db10      	blt.n	800a570 <tcp_process+0x8c>
 800a54e:	4b8d      	ldr	r3, [pc, #564]	@ (800a784 <tcp_process+0x2a0>)
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a556:	6879      	ldr	r1, [r7, #4]
 800a558:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a55a:	440b      	add	r3, r1
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	2b00      	cmp	r3, #0
 800a560:	dc06      	bgt.n	800a570 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	8b5b      	ldrh	r3, [r3, #26]
 800a566:	f043 0302 	orr.w	r3, r3, #2
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a570:	7efb      	ldrb	r3, [r7, #27]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d01b      	beq.n	800a5ae <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	7d1b      	ldrb	r3, [r3, #20]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d106      	bne.n	800a58c <tcp_process+0xa8>
 800a57e:	4b7c      	ldr	r3, [pc, #496]	@ (800a770 <tcp_process+0x28c>)
 800a580:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800a584:	4980      	ldr	r1, [pc, #512]	@ (800a788 <tcp_process+0x2a4>)
 800a586:	487c      	ldr	r0, [pc, #496]	@ (800a778 <tcp_process+0x294>)
 800a588:	f006 f8fa 	bl	8010780 <printf>
      recv_flags |= TF_RESET;
 800a58c:	4b7f      	ldr	r3, [pc, #508]	@ (800a78c <tcp_process+0x2a8>)
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	f043 0308 	orr.w	r3, r3, #8
 800a594:	b2da      	uxtb	r2, r3
 800a596:	4b7d      	ldr	r3, [pc, #500]	@ (800a78c <tcp_process+0x2a8>)
 800a598:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	8b5b      	ldrh	r3, [r3, #26]
 800a59e:	f023 0301 	bic.w	r3, r3, #1
 800a5a2:	b29a      	uxth	r2, r3
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a5a8:	f06f 030d 	mvn.w	r3, #13
 800a5ac:	e37a      	b.n	800aca4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	e378      	b.n	800aca4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a5b2:	4b72      	ldr	r3, [pc, #456]	@ (800a77c <tcp_process+0x298>)
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	f003 0302 	and.w	r3, r3, #2
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d010      	beq.n	800a5e0 <tcp_process+0xfc>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	7d1b      	ldrb	r3, [r3, #20]
 800a5c2:	2b02      	cmp	r3, #2
 800a5c4:	d00c      	beq.n	800a5e0 <tcp_process+0xfc>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	7d1b      	ldrb	r3, [r3, #20]
 800a5ca:	2b03      	cmp	r3, #3
 800a5cc:	d008      	beq.n	800a5e0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	8b5b      	ldrh	r3, [r3, #26]
 800a5d2:	f043 0302 	orr.w	r3, r3, #2
 800a5d6:	b29a      	uxth	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	e361      	b.n	800aca4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	8b5b      	ldrh	r3, [r3, #26]
 800a5e4:	f003 0310 	and.w	r3, r3, #16
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d103      	bne.n	800a5f4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a5ec:	4b68      	ldr	r3, [pc, #416]	@ (800a790 <tcp_process+0x2ac>)
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f001 fc2b 	bl	800be60 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	7d1b      	ldrb	r3, [r3, #20]
 800a60e:	3b02      	subs	r3, #2
 800a610:	2b07      	cmp	r3, #7
 800a612:	f200 8337 	bhi.w	800ac84 <tcp_process+0x7a0>
 800a616:	a201      	add	r2, pc, #4	@ (adr r2, 800a61c <tcp_process+0x138>)
 800a618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61c:	0800a63d 	.word	0x0800a63d
 800a620:	0800a86d 	.word	0x0800a86d
 800a624:	0800a9e5 	.word	0x0800a9e5
 800a628:	0800aa0f 	.word	0x0800aa0f
 800a62c:	0800ab33 	.word	0x0800ab33
 800a630:	0800a9e5 	.word	0x0800a9e5
 800a634:	0800abbf 	.word	0x0800abbf
 800a638:	0800ac4f 	.word	0x0800ac4f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a63c:	4b4f      	ldr	r3, [pc, #316]	@ (800a77c <tcp_process+0x298>)
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	f003 0310 	and.w	r3, r3, #16
 800a644:	2b00      	cmp	r3, #0
 800a646:	f000 80e4 	beq.w	800a812 <tcp_process+0x32e>
 800a64a:	4b4c      	ldr	r3, [pc, #304]	@ (800a77c <tcp_process+0x298>)
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	f003 0302 	and.w	r3, r3, #2
 800a652:	2b00      	cmp	r3, #0
 800a654:	f000 80dd 	beq.w	800a812 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a65c:	1c5a      	adds	r2, r3, #1
 800a65e:	4b48      	ldr	r3, [pc, #288]	@ (800a780 <tcp_process+0x29c>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	429a      	cmp	r2, r3
 800a664:	f040 80d5 	bne.w	800a812 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a668:	4b46      	ldr	r3, [pc, #280]	@ (800a784 <tcp_process+0x2a0>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	1c5a      	adds	r2, r3, #1
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800a67a:	4b41      	ldr	r3, [pc, #260]	@ (800a780 <tcp_process+0x29c>)
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a682:	4b44      	ldr	r3, [pc, #272]	@ (800a794 <tcp_process+0x2b0>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	89db      	ldrh	r3, [r3, #14]
 800a688:	b29a      	uxth	r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a69c:	4b39      	ldr	r3, [pc, #228]	@ (800a784 <tcp_process+0x2a0>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	1e5a      	subs	r2, r3, #1
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2204      	movs	r2, #4
 800a6aa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	3304      	adds	r3, #4
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f004 fd99 	bl	800f1ec <ip4_route>
 800a6ba:	4601      	mov	r1, r0
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	3304      	adds	r3, #4
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	f7ff f88c 	bl	80097e0 <tcp_eff_send_mss_netif>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a6d4:	009a      	lsls	r2, r3, #2
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a6da:	005b      	lsls	r3, r3, #1
 800a6dc:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a6e0:	428b      	cmp	r3, r1
 800a6e2:	bf38      	it	cc
 800a6e4:	460b      	movcc	r3, r1
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d204      	bcs.n	800a6f4 <tcp_process+0x210>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	e00d      	b.n	800a710 <tcp_process+0x22c>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a6f8:	005b      	lsls	r3, r3, #1
 800a6fa:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d904      	bls.n	800a70c <tcp_process+0x228>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a706:	005b      	lsls	r3, r3, #1
 800a708:	b29b      	uxth	r3, r3
 800a70a:	e001      	b.n	800a710 <tcp_process+0x22c>
 800a70c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d106      	bne.n	800a72e <tcp_process+0x24a>
 800a720:	4b13      	ldr	r3, [pc, #76]	@ (800a770 <tcp_process+0x28c>)
 800a722:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800a726:	491c      	ldr	r1, [pc, #112]	@ (800a798 <tcp_process+0x2b4>)
 800a728:	4813      	ldr	r0, [pc, #76]	@ (800a778 <tcp_process+0x294>)
 800a72a:	f006 f829 	bl	8010780 <printf>
        --pcb->snd_queuelen;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a734:	3b01      	subs	r3, #1
 800a736:	b29a      	uxth	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a742:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d12a      	bne.n	800a7a0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a74e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d106      	bne.n	800a764 <tcp_process+0x280>
 800a756:	4b06      	ldr	r3, [pc, #24]	@ (800a770 <tcp_process+0x28c>)
 800a758:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800a75c:	490f      	ldr	r1, [pc, #60]	@ (800a79c <tcp_process+0x2b8>)
 800a75e:	4806      	ldr	r0, [pc, #24]	@ (800a778 <tcp_process+0x294>)
 800a760:	f006 f80e 	bl	8010780 <printf>
          pcb->unsent = rseg->next;
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a76c:	e01c      	b.n	800a7a8 <tcp_process+0x2c4>
 800a76e:	bf00      	nop
 800a770:	080162c4 	.word	0x080162c4
 800a774:	080164fc 	.word	0x080164fc
 800a778:	08016310 	.word	0x08016310
 800a77c:	20008aa8 	.word	0x20008aa8
 800a780:	20008aa0 	.word	0x20008aa0
 800a784:	20008a9c 	.word	0x20008a9c
 800a788:	08016518 	.word	0x08016518
 800a78c:	20008aa9 	.word	0x20008aa9
 800a790:	20008a64 	.word	0x20008a64
 800a794:	20008a8c 	.word	0x20008a8c
 800a798:	08016538 	.word	0x08016538
 800a79c:	08016550 	.word	0x08016550
        } else {
          pcb->unacked = rseg->next;
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800a7a8:	69f8      	ldr	r0, [r7, #28]
 800a7aa:	f7fe fd22 	bl	80091f2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d104      	bne.n	800a7c0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a7bc:	861a      	strh	r2, [r3, #48]	@ 0x30
 800a7be:	e006      	b.n	800a7ce <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00a      	beq.n	800a7ee <tcp_process+0x30a>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	6910      	ldr	r0, [r2, #16]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	6879      	ldr	r1, [r7, #4]
 800a7e6:	4798      	blx	r3
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	76bb      	strb	r3, [r7, #26]
 800a7ec:	e001      	b.n	800a7f2 <tcp_process+0x30e>
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a7f2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a7f6:	f113 0f0d 	cmn.w	r3, #13
 800a7fa:	d102      	bne.n	800a802 <tcp_process+0x31e>
          return ERR_ABRT;
 800a7fc:	f06f 030c 	mvn.w	r3, #12
 800a800:	e250      	b.n	800aca4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	8b5b      	ldrh	r3, [r3, #26]
 800a806:	f043 0302 	orr.w	r3, r3, #2
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a810:	e23a      	b.n	800ac88 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a812:	4b98      	ldr	r3, [pc, #608]	@ (800aa74 <tcp_process+0x590>)
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	f003 0310 	and.w	r3, r3, #16
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	f000 8234 	beq.w	800ac88 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a820:	4b95      	ldr	r3, [pc, #596]	@ (800aa78 <tcp_process+0x594>)
 800a822:	6819      	ldr	r1, [r3, #0]
 800a824:	4b95      	ldr	r3, [pc, #596]	@ (800aa7c <tcp_process+0x598>)
 800a826:	881b      	ldrh	r3, [r3, #0]
 800a828:	461a      	mov	r2, r3
 800a82a:	4b95      	ldr	r3, [pc, #596]	@ (800aa80 <tcp_process+0x59c>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a830:	4b94      	ldr	r3, [pc, #592]	@ (800aa84 <tcp_process+0x5a0>)
 800a832:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a834:	885b      	ldrh	r3, [r3, #2]
 800a836:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a838:	4a92      	ldr	r2, [pc, #584]	@ (800aa84 <tcp_process+0x5a0>)
 800a83a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a83c:	8812      	ldrh	r2, [r2, #0]
 800a83e:	b292      	uxth	r2, r2
 800a840:	9202      	str	r2, [sp, #8]
 800a842:	9301      	str	r3, [sp, #4]
 800a844:	4b90      	ldr	r3, [pc, #576]	@ (800aa88 <tcp_process+0x5a4>)
 800a846:	9300      	str	r3, [sp, #0]
 800a848:	4b90      	ldr	r3, [pc, #576]	@ (800aa8c <tcp_process+0x5a8>)
 800a84a:	4602      	mov	r2, r0
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f002 fc7f 	bl	800d150 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a858:	2b05      	cmp	r3, #5
 800a85a:	f200 8215 	bhi.w	800ac88 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f002 fa4b 	bl	800cd00 <tcp_rexmit_rto>
      break;
 800a86a:	e20d      	b.n	800ac88 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a86c:	4b81      	ldr	r3, [pc, #516]	@ (800aa74 <tcp_process+0x590>)
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	f003 0310 	and.w	r3, r3, #16
 800a874:	2b00      	cmp	r3, #0
 800a876:	f000 80a1 	beq.w	800a9bc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a87a:	4b7f      	ldr	r3, [pc, #508]	@ (800aa78 <tcp_process+0x594>)
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a882:	1ad3      	subs	r3, r2, r3
 800a884:	3b01      	subs	r3, #1
 800a886:	2b00      	cmp	r3, #0
 800a888:	db7e      	blt.n	800a988 <tcp_process+0x4a4>
 800a88a:	4b7b      	ldr	r3, [pc, #492]	@ (800aa78 <tcp_process+0x594>)
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a892:	1ad3      	subs	r3, r2, r3
 800a894:	2b00      	cmp	r3, #0
 800a896:	dc77      	bgt.n	800a988 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2204      	movs	r2, #4
 800a89c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d102      	bne.n	800a8ac <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a8a6:	23fa      	movs	r3, #250	@ 0xfa
 800a8a8:	76bb      	strb	r3, [r7, #26]
 800a8aa:	e01d      	b.n	800a8e8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d106      	bne.n	800a8c4 <tcp_process+0x3e0>
 800a8b6:	4b76      	ldr	r3, [pc, #472]	@ (800aa90 <tcp_process+0x5ac>)
 800a8b8:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800a8bc:	4975      	ldr	r1, [pc, #468]	@ (800aa94 <tcp_process+0x5b0>)
 800a8be:	4876      	ldr	r0, [pc, #472]	@ (800aa98 <tcp_process+0x5b4>)
 800a8c0:	f005 ff5e 	bl	8010780 <printf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8c8:	699b      	ldr	r3, [r3, #24]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00a      	beq.n	800a8e4 <tcp_process+0x400>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8d2:	699b      	ldr	r3, [r3, #24]
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	6910      	ldr	r0, [r2, #16]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	6879      	ldr	r1, [r7, #4]
 800a8dc:	4798      	blx	r3
 800a8de:	4603      	mov	r3, r0
 800a8e0:	76bb      	strb	r3, [r7, #26]
 800a8e2:	e001      	b.n	800a8e8 <tcp_process+0x404>
 800a8e4:	23f0      	movs	r3, #240	@ 0xf0
 800a8e6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a8e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00a      	beq.n	800a906 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a8f0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a8f4:	f113 0f0d 	cmn.w	r3, #13
 800a8f8:	d002      	beq.n	800a900 <tcp_process+0x41c>
              tcp_abort(pcb);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f7fd ff8c 	bl	8008818 <tcp_abort>
            }
            return ERR_ABRT;
 800a900:	f06f 030c 	mvn.w	r3, #12
 800a904:	e1ce      	b.n	800aca4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 fae0 	bl	800aecc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a90c:	4b63      	ldr	r3, [pc, #396]	@ (800aa9c <tcp_process+0x5b8>)
 800a90e:	881b      	ldrh	r3, [r3, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d005      	beq.n	800a920 <tcp_process+0x43c>
            recv_acked--;
 800a914:	4b61      	ldr	r3, [pc, #388]	@ (800aa9c <tcp_process+0x5b8>)
 800a916:	881b      	ldrh	r3, [r3, #0]
 800a918:	3b01      	subs	r3, #1
 800a91a:	b29a      	uxth	r2, r3
 800a91c:	4b5f      	ldr	r3, [pc, #380]	@ (800aa9c <tcp_process+0x5b8>)
 800a91e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a924:	009a      	lsls	r2, r3, #2
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a92a:	005b      	lsls	r3, r3, #1
 800a92c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a930:	428b      	cmp	r3, r1
 800a932:	bf38      	it	cc
 800a934:	460b      	movcc	r3, r1
 800a936:	429a      	cmp	r2, r3
 800a938:	d204      	bcs.n	800a944 <tcp_process+0x460>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	b29b      	uxth	r3, r3
 800a942:	e00d      	b.n	800a960 <tcp_process+0x47c>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a948:	005b      	lsls	r3, r3, #1
 800a94a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a94e:	4293      	cmp	r3, r2
 800a950:	d904      	bls.n	800a95c <tcp_process+0x478>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a956:	005b      	lsls	r3, r3, #1
 800a958:	b29b      	uxth	r3, r3
 800a95a:	e001      	b.n	800a960 <tcp_process+0x47c>
 800a95c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a966:	4b4e      	ldr	r3, [pc, #312]	@ (800aaa0 <tcp_process+0x5bc>)
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	f003 0320 	and.w	r3, r3, #32
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d037      	beq.n	800a9e2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	8b5b      	ldrh	r3, [r3, #26]
 800a976:	f043 0302 	orr.w	r3, r3, #2
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2207      	movs	r2, #7
 800a984:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a986:	e02c      	b.n	800a9e2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a988:	4b3b      	ldr	r3, [pc, #236]	@ (800aa78 <tcp_process+0x594>)
 800a98a:	6819      	ldr	r1, [r3, #0]
 800a98c:	4b3b      	ldr	r3, [pc, #236]	@ (800aa7c <tcp_process+0x598>)
 800a98e:	881b      	ldrh	r3, [r3, #0]
 800a990:	461a      	mov	r2, r3
 800a992:	4b3b      	ldr	r3, [pc, #236]	@ (800aa80 <tcp_process+0x59c>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a998:	4b3a      	ldr	r3, [pc, #232]	@ (800aa84 <tcp_process+0x5a0>)
 800a99a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a99c:	885b      	ldrh	r3, [r3, #2]
 800a99e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9a0:	4a38      	ldr	r2, [pc, #224]	@ (800aa84 <tcp_process+0x5a0>)
 800a9a2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9a4:	8812      	ldrh	r2, [r2, #0]
 800a9a6:	b292      	uxth	r2, r2
 800a9a8:	9202      	str	r2, [sp, #8]
 800a9aa:	9301      	str	r3, [sp, #4]
 800a9ac:	4b36      	ldr	r3, [pc, #216]	@ (800aa88 <tcp_process+0x5a4>)
 800a9ae:	9300      	str	r3, [sp, #0]
 800a9b0:	4b36      	ldr	r3, [pc, #216]	@ (800aa8c <tcp_process+0x5a8>)
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f002 fbcb 	bl	800d150 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a9ba:	e167      	b.n	800ac8c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a9bc:	4b2d      	ldr	r3, [pc, #180]	@ (800aa74 <tcp_process+0x590>)
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	f003 0302 	and.w	r3, r3, #2
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f000 8161 	beq.w	800ac8c <tcp_process+0x7a8>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ce:	1e5a      	subs	r2, r3, #1
 800a9d0:	4b2b      	ldr	r3, [pc, #172]	@ (800aa80 <tcp_process+0x59c>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	f040 8159 	bne.w	800ac8c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f002 f9b2 	bl	800cd44 <tcp_rexmit>
      break;
 800a9e0:	e154      	b.n	800ac8c <tcp_process+0x7a8>
 800a9e2:	e153      	b.n	800ac8c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fa71 	bl	800aecc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a9ea:	4b2d      	ldr	r3, [pc, #180]	@ (800aaa0 <tcp_process+0x5bc>)
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	f003 0320 	and.w	r3, r3, #32
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	f000 814c 	beq.w	800ac90 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	8b5b      	ldrh	r3, [r3, #26]
 800a9fc:	f043 0302 	orr.w	r3, r3, #2
 800aa00:	b29a      	uxth	r2, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2207      	movs	r2, #7
 800aa0a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800aa0c:	e140      	b.n	800ac90 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 fa5c 	bl	800aecc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800aa14:	4b22      	ldr	r3, [pc, #136]	@ (800aaa0 <tcp_process+0x5bc>)
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	f003 0320 	and.w	r3, r3, #32
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d071      	beq.n	800ab04 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aa20:	4b14      	ldr	r3, [pc, #80]	@ (800aa74 <tcp_process+0x590>)
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	f003 0310 	and.w	r3, r3, #16
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d060      	beq.n	800aaee <tcp_process+0x60a>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa30:	4b11      	ldr	r3, [pc, #68]	@ (800aa78 <tcp_process+0x594>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d15a      	bne.n	800aaee <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d156      	bne.n	800aaee <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	8b5b      	ldrh	r3, [r3, #26]
 800aa44:	f043 0302 	orr.w	r3, r3, #2
 800aa48:	b29a      	uxth	r2, r3
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f7fe fdbc 	bl	80095cc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800aa54:	4b13      	ldr	r3, [pc, #76]	@ (800aaa4 <tcp_process+0x5c0>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d105      	bne.n	800aa6a <tcp_process+0x586>
 800aa5e:	4b11      	ldr	r3, [pc, #68]	@ (800aaa4 <tcp_process+0x5c0>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	4a0f      	ldr	r2, [pc, #60]	@ (800aaa4 <tcp_process+0x5c0>)
 800aa66:	6013      	str	r3, [r2, #0]
 800aa68:	e02e      	b.n	800aac8 <tcp_process+0x5e4>
 800aa6a:	4b0e      	ldr	r3, [pc, #56]	@ (800aaa4 <tcp_process+0x5c0>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	617b      	str	r3, [r7, #20]
 800aa70:	e027      	b.n	800aac2 <tcp_process+0x5de>
 800aa72:	bf00      	nop
 800aa74:	20008aa8 	.word	0x20008aa8
 800aa78:	20008aa0 	.word	0x20008aa0
 800aa7c:	20008aa6 	.word	0x20008aa6
 800aa80:	20008a9c 	.word	0x20008a9c
 800aa84:	20008a8c 	.word	0x20008a8c
 800aa88:	20005504 	.word	0x20005504
 800aa8c:	20005508 	.word	0x20005508
 800aa90:	080162c4 	.word	0x080162c4
 800aa94:	08016564 	.word	0x08016564
 800aa98:	08016310 	.word	0x08016310
 800aa9c:	20008aa4 	.word	0x20008aa4
 800aaa0:	20008aa9 	.word	0x20008aa9
 800aaa4:	20008a70 	.word	0x20008a70
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d104      	bne.n	800aabc <tcp_process+0x5d8>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	68da      	ldr	r2, [r3, #12]
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	60da      	str	r2, [r3, #12]
 800aaba:	e005      	b.n	800aac8 <tcp_process+0x5e4>
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	617b      	str	r3, [r7, #20]
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d1ef      	bne.n	800aaa8 <tcp_process+0x5c4>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	60da      	str	r2, [r3, #12]
 800aace:	4b77      	ldr	r3, [pc, #476]	@ (800acac <tcp_process+0x7c8>)
 800aad0:	2201      	movs	r2, #1
 800aad2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	220a      	movs	r2, #10
 800aad8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800aada:	4b75      	ldr	r3, [pc, #468]	@ (800acb0 <tcp_process+0x7cc>)
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	60da      	str	r2, [r3, #12]
 800aae2:	4a73      	ldr	r2, [pc, #460]	@ (800acb0 <tcp_process+0x7cc>)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6013      	str	r3, [r2, #0]
 800aae8:	f002 fcf4 	bl	800d4d4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800aaec:	e0d2      	b.n	800ac94 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	8b5b      	ldrh	r3, [r3, #26]
 800aaf2:	f043 0302 	orr.w	r3, r3, #2
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2208      	movs	r2, #8
 800ab00:	751a      	strb	r2, [r3, #20]
      break;
 800ab02:	e0c7      	b.n	800ac94 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ab04:	4b6b      	ldr	r3, [pc, #428]	@ (800acb4 <tcp_process+0x7d0>)
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	f003 0310 	and.w	r3, r3, #16
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f000 80c1 	beq.w	800ac94 <tcp_process+0x7b0>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ab16:	4b68      	ldr	r3, [pc, #416]	@ (800acb8 <tcp_process+0x7d4>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	f040 80ba 	bne.w	800ac94 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f040 80b5 	bne.w	800ac94 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2206      	movs	r2, #6
 800ab2e:	751a      	strb	r2, [r3, #20]
      break;
 800ab30:	e0b0      	b.n	800ac94 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f9ca 	bl	800aecc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ab38:	4b60      	ldr	r3, [pc, #384]	@ (800acbc <tcp_process+0x7d8>)
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	f003 0320 	and.w	r3, r3, #32
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f000 80a9 	beq.w	800ac98 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	8b5b      	ldrh	r3, [r3, #26]
 800ab4a:	f043 0302 	orr.w	r3, r3, #2
 800ab4e:	b29a      	uxth	r2, r3
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f7fe fd39 	bl	80095cc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ab5a:	4b59      	ldr	r3, [pc, #356]	@ (800acc0 <tcp_process+0x7dc>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d105      	bne.n	800ab70 <tcp_process+0x68c>
 800ab64:	4b56      	ldr	r3, [pc, #344]	@ (800acc0 <tcp_process+0x7dc>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	4a55      	ldr	r2, [pc, #340]	@ (800acc0 <tcp_process+0x7dc>)
 800ab6c:	6013      	str	r3, [r2, #0]
 800ab6e:	e013      	b.n	800ab98 <tcp_process+0x6b4>
 800ab70:	4b53      	ldr	r3, [pc, #332]	@ (800acc0 <tcp_process+0x7dc>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	613b      	str	r3, [r7, #16]
 800ab76:	e00c      	b.n	800ab92 <tcp_process+0x6ae>
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d104      	bne.n	800ab8c <tcp_process+0x6a8>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	68da      	ldr	r2, [r3, #12]
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	60da      	str	r2, [r3, #12]
 800ab8a:	e005      	b.n	800ab98 <tcp_process+0x6b4>
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	613b      	str	r3, [r7, #16]
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1ef      	bne.n	800ab78 <tcp_process+0x694>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	60da      	str	r2, [r3, #12]
 800ab9e:	4b43      	ldr	r3, [pc, #268]	@ (800acac <tcp_process+0x7c8>)
 800aba0:	2201      	movs	r2, #1
 800aba2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	220a      	movs	r2, #10
 800aba8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800abaa:	4b41      	ldr	r3, [pc, #260]	@ (800acb0 <tcp_process+0x7cc>)
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	60da      	str	r2, [r3, #12]
 800abb2:	4a3f      	ldr	r2, [pc, #252]	@ (800acb0 <tcp_process+0x7cc>)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6013      	str	r3, [r2, #0]
 800abb8:	f002 fc8c 	bl	800d4d4 <tcp_timer_needed>
      }
      break;
 800abbc:	e06c      	b.n	800ac98 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 f984 	bl	800aecc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800abc4:	4b3b      	ldr	r3, [pc, #236]	@ (800acb4 <tcp_process+0x7d0>)
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	f003 0310 	and.w	r3, r3, #16
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d065      	beq.n	800ac9c <tcp_process+0x7b8>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800abd4:	4b38      	ldr	r3, [pc, #224]	@ (800acb8 <tcp_process+0x7d4>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d15f      	bne.n	800ac9c <tcp_process+0x7b8>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d15b      	bne.n	800ac9c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f7fe fcf1 	bl	80095cc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800abea:	4b35      	ldr	r3, [pc, #212]	@ (800acc0 <tcp_process+0x7dc>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d105      	bne.n	800ac00 <tcp_process+0x71c>
 800abf4:	4b32      	ldr	r3, [pc, #200]	@ (800acc0 <tcp_process+0x7dc>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	4a31      	ldr	r2, [pc, #196]	@ (800acc0 <tcp_process+0x7dc>)
 800abfc:	6013      	str	r3, [r2, #0]
 800abfe:	e013      	b.n	800ac28 <tcp_process+0x744>
 800ac00:	4b2f      	ldr	r3, [pc, #188]	@ (800acc0 <tcp_process+0x7dc>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	60fb      	str	r3, [r7, #12]
 800ac06:	e00c      	b.n	800ac22 <tcp_process+0x73e>
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	68db      	ldr	r3, [r3, #12]
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d104      	bne.n	800ac1c <tcp_process+0x738>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	68da      	ldr	r2, [r3, #12]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	60da      	str	r2, [r3, #12]
 800ac1a:	e005      	b.n	800ac28 <tcp_process+0x744>
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	60fb      	str	r3, [r7, #12]
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d1ef      	bne.n	800ac08 <tcp_process+0x724>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	60da      	str	r2, [r3, #12]
 800ac2e:	4b1f      	ldr	r3, [pc, #124]	@ (800acac <tcp_process+0x7c8>)
 800ac30:	2201      	movs	r2, #1
 800ac32:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	220a      	movs	r2, #10
 800ac38:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ac3a:	4b1d      	ldr	r3, [pc, #116]	@ (800acb0 <tcp_process+0x7cc>)
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	60da      	str	r2, [r3, #12]
 800ac42:	4a1b      	ldr	r2, [pc, #108]	@ (800acb0 <tcp_process+0x7cc>)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6013      	str	r3, [r2, #0]
 800ac48:	f002 fc44 	bl	800d4d4 <tcp_timer_needed>
      }
      break;
 800ac4c:	e026      	b.n	800ac9c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 f93c 	bl	800aecc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ac54:	4b17      	ldr	r3, [pc, #92]	@ (800acb4 <tcp_process+0x7d0>)
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	f003 0310 	and.w	r3, r3, #16
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d01f      	beq.n	800aca0 <tcp_process+0x7bc>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ac64:	4b14      	ldr	r3, [pc, #80]	@ (800acb8 <tcp_process+0x7d4>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d119      	bne.n	800aca0 <tcp_process+0x7bc>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d115      	bne.n	800aca0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ac74:	4b11      	ldr	r3, [pc, #68]	@ (800acbc <tcp_process+0x7d8>)
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	f043 0310 	orr.w	r3, r3, #16
 800ac7c:	b2da      	uxtb	r2, r3
 800ac7e:	4b0f      	ldr	r3, [pc, #60]	@ (800acbc <tcp_process+0x7d8>)
 800ac80:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ac82:	e00d      	b.n	800aca0 <tcp_process+0x7bc>
    default:
      break;
 800ac84:	bf00      	nop
 800ac86:	e00c      	b.n	800aca2 <tcp_process+0x7be>
      break;
 800ac88:	bf00      	nop
 800ac8a:	e00a      	b.n	800aca2 <tcp_process+0x7be>
      break;
 800ac8c:	bf00      	nop
 800ac8e:	e008      	b.n	800aca2 <tcp_process+0x7be>
      break;
 800ac90:	bf00      	nop
 800ac92:	e006      	b.n	800aca2 <tcp_process+0x7be>
      break;
 800ac94:	bf00      	nop
 800ac96:	e004      	b.n	800aca2 <tcp_process+0x7be>
      break;
 800ac98:	bf00      	nop
 800ac9a:	e002      	b.n	800aca2 <tcp_process+0x7be>
      break;
 800ac9c:	bf00      	nop
 800ac9e:	e000      	b.n	800aca2 <tcp_process+0x7be>
      break;
 800aca0:	bf00      	nop
  }
  return ERR_OK;
 800aca2:	2300      	movs	r3, #0
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3724      	adds	r7, #36	@ 0x24
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd90      	pop	{r4, r7, pc}
 800acac:	20008a78 	.word	0x20008a78
 800acb0:	20008a74 	.word	0x20008a74
 800acb4:	20008aa8 	.word	0x20008aa8
 800acb8:	20008aa0 	.word	0x20008aa0
 800acbc:	20008aa9 	.word	0x20008aa9
 800acc0:	20008a70 	.word	0x20008a70

0800acc4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800acc4:	b590      	push	{r4, r7, lr}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d106      	bne.n	800ace2 <tcp_oos_insert_segment+0x1e>
 800acd4:	4b3b      	ldr	r3, [pc, #236]	@ (800adc4 <tcp_oos_insert_segment+0x100>)
 800acd6:	f240 421f 	movw	r2, #1055	@ 0x41f
 800acda:	493b      	ldr	r1, [pc, #236]	@ (800adc8 <tcp_oos_insert_segment+0x104>)
 800acdc:	483b      	ldr	r0, [pc, #236]	@ (800adcc <tcp_oos_insert_segment+0x108>)
 800acde:	f005 fd4f 	bl	8010780 <printf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	899b      	ldrh	r3, [r3, #12]
 800ace8:	b29b      	uxth	r3, r3
 800acea:	4618      	mov	r0, r3
 800acec:	f7fb fc0c 	bl	8006508 <lwip_htons>
 800acf0:	4603      	mov	r3, r0
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	f003 0301 	and.w	r3, r3, #1
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d028      	beq.n	800ad4e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800acfc:	6838      	ldr	r0, [r7, #0]
 800acfe:	f7fe fa63 	bl	80091c8 <tcp_segs_free>
    next = NULL;
 800ad02:	2300      	movs	r3, #0
 800ad04:	603b      	str	r3, [r7, #0]
 800ad06:	e056      	b.n	800adb6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	899b      	ldrh	r3, [r3, #12]
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7fb fbf9 	bl	8006508 <lwip_htons>
 800ad16:	4603      	mov	r3, r0
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	f003 0301 	and.w	r3, r3, #1
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00d      	beq.n	800ad3e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	899b      	ldrh	r3, [r3, #12]
 800ad28:	b29c      	uxth	r4, r3
 800ad2a:	2001      	movs	r0, #1
 800ad2c:	f7fb fbec 	bl	8006508 <lwip_htons>
 800ad30:	4603      	mov	r3, r0
 800ad32:	461a      	mov	r2, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	4322      	orrs	r2, r4
 800ad3a:	b292      	uxth	r2, r2
 800ad3c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ad48:	68f8      	ldr	r0, [r7, #12]
 800ad4a:	f7fe fa52 	bl	80091f2 <tcp_seg_free>
    while (next &&
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d00e      	beq.n	800ad72 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	891b      	ldrh	r3, [r3, #8]
 800ad58:	461a      	mov	r2, r3
 800ad5a:	4b1d      	ldr	r3, [pc, #116]	@ (800add0 <tcp_oos_insert_segment+0x10c>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	441a      	add	r2, r3
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	6839      	ldr	r1, [r7, #0]
 800ad68:	8909      	ldrh	r1, [r1, #8]
 800ad6a:	440b      	add	r3, r1
 800ad6c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	daca      	bge.n	800ad08 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d01e      	beq.n	800adb6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	891b      	ldrh	r3, [r3, #8]
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	4b14      	ldr	r3, [pc, #80]	@ (800add0 <tcp_oos_insert_segment+0x10c>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	441a      	add	r2, r3
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	dd12      	ble.n	800adb6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	4b0d      	ldr	r3, [pc, #52]	@ (800add0 <tcp_oos_insert_segment+0x10c>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	1ad3      	subs	r3, r2, r3
 800ada0:	b29a      	uxth	r2, r3
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	685a      	ldr	r2, [r3, #4]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	891b      	ldrh	r3, [r3, #8]
 800adae:	4619      	mov	r1, r3
 800adb0:	4610      	mov	r0, r2
 800adb2:	f7fc fd81 	bl	80078b8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	683a      	ldr	r2, [r7, #0]
 800adba:	601a      	str	r2, [r3, #0]
}
 800adbc:	bf00      	nop
 800adbe:	3714      	adds	r7, #20
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd90      	pop	{r4, r7, pc}
 800adc4:	080162c4 	.word	0x080162c4
 800adc8:	08016584 	.word	0x08016584
 800adcc:	08016310 	.word	0x08016310
 800add0:	20008a9c 	.word	0x20008a9c

0800add4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800add4:	b5b0      	push	{r4, r5, r7, lr}
 800add6:	b086      	sub	sp, #24
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	60b9      	str	r1, [r7, #8]
 800adde:	607a      	str	r2, [r7, #4]
 800ade0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ade2:	e03e      	b.n	800ae62 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fc ff6e 	bl	8007cd4 <pbuf_clen>
 800adf8:	4603      	mov	r3, r0
 800adfa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ae02:	8a7a      	ldrh	r2, [r7, #18]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d906      	bls.n	800ae16 <tcp_free_acked_segments+0x42>
 800ae08:	4b2a      	ldr	r3, [pc, #168]	@ (800aeb4 <tcp_free_acked_segments+0xe0>)
 800ae0a:	f240 4257 	movw	r2, #1111	@ 0x457
 800ae0e:	492a      	ldr	r1, [pc, #168]	@ (800aeb8 <tcp_free_acked_segments+0xe4>)
 800ae10:	482a      	ldr	r0, [pc, #168]	@ (800aebc <tcp_free_acked_segments+0xe8>)
 800ae12:	f005 fcb5 	bl	8010780 <printf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800ae1c:	8a7b      	ldrh	r3, [r7, #18]
 800ae1e:	1ad3      	subs	r3, r2, r3
 800ae20:	b29a      	uxth	r2, r3
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	891a      	ldrh	r2, [r3, #8]
 800ae2c:	4b24      	ldr	r3, [pc, #144]	@ (800aec0 <tcp_free_acked_segments+0xec>)
 800ae2e:	881b      	ldrh	r3, [r3, #0]
 800ae30:	4413      	add	r3, r2
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	4b22      	ldr	r3, [pc, #136]	@ (800aec0 <tcp_free_acked_segments+0xec>)
 800ae36:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ae38:	6978      	ldr	r0, [r7, #20]
 800ae3a:	f7fe f9da 	bl	80091f2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00c      	beq.n	800ae62 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d109      	bne.n	800ae62 <tcp_free_acked_segments+0x8e>
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d106      	bne.n	800ae62 <tcp_free_acked_segments+0x8e>
 800ae54:	4b17      	ldr	r3, [pc, #92]	@ (800aeb4 <tcp_free_acked_segments+0xe0>)
 800ae56:	f240 4261 	movw	r2, #1121	@ 0x461
 800ae5a:	491a      	ldr	r1, [pc, #104]	@ (800aec4 <tcp_free_acked_segments+0xf0>)
 800ae5c:	4817      	ldr	r0, [pc, #92]	@ (800aebc <tcp_free_acked_segments+0xe8>)
 800ae5e:	f005 fc8f 	bl	8010780 <printf>
  while (seg_list != NULL &&
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d020      	beq.n	800aeaa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fb fb5f 	bl	8006532 <lwip_htonl>
 800ae74:	4604      	mov	r4, r0
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	891b      	ldrh	r3, [r3, #8]
 800ae7a:	461d      	mov	r5, r3
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	899b      	ldrh	r3, [r3, #12]
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7fb fb3f 	bl	8006508 <lwip_htons>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	f003 0303 	and.w	r3, r3, #3
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d001      	beq.n	800ae9a <tcp_free_acked_segments+0xc6>
 800ae96:	2301      	movs	r3, #1
 800ae98:	e000      	b.n	800ae9c <tcp_free_acked_segments+0xc8>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	442b      	add	r3, r5
 800ae9e:	18e2      	adds	r2, r4, r3
 800aea0:	4b09      	ldr	r3, [pc, #36]	@ (800aec8 <tcp_free_acked_segments+0xf4>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	dd9c      	ble.n	800ade4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800aeaa:	68bb      	ldr	r3, [r7, #8]
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3718      	adds	r7, #24
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bdb0      	pop	{r4, r5, r7, pc}
 800aeb4:	080162c4 	.word	0x080162c4
 800aeb8:	080165ac 	.word	0x080165ac
 800aebc:	08016310 	.word	0x08016310
 800aec0:	20008aa4 	.word	0x20008aa4
 800aec4:	080165d4 	.word	0x080165d4
 800aec8:	20008aa0 	.word	0x20008aa0

0800aecc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800aecc:	b5b0      	push	{r4, r5, r7, lr}
 800aece:	b094      	sub	sp, #80	@ 0x50
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800aed4:	2300      	movs	r3, #0
 800aed6:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d106      	bne.n	800aeec <tcp_receive+0x20>
 800aede:	4b91      	ldr	r3, [pc, #580]	@ (800b124 <tcp_receive+0x258>)
 800aee0:	f240 427b 	movw	r2, #1147	@ 0x47b
 800aee4:	4990      	ldr	r1, [pc, #576]	@ (800b128 <tcp_receive+0x25c>)
 800aee6:	4891      	ldr	r0, [pc, #580]	@ (800b12c <tcp_receive+0x260>)
 800aee8:	f005 fc4a 	bl	8010780 <printf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	7d1b      	ldrb	r3, [r3, #20]
 800aef0:	2b03      	cmp	r3, #3
 800aef2:	d806      	bhi.n	800af02 <tcp_receive+0x36>
 800aef4:	4b8b      	ldr	r3, [pc, #556]	@ (800b124 <tcp_receive+0x258>)
 800aef6:	f240 427c 	movw	r2, #1148	@ 0x47c
 800aefa:	498d      	ldr	r1, [pc, #564]	@ (800b130 <tcp_receive+0x264>)
 800aefc:	488b      	ldr	r0, [pc, #556]	@ (800b12c <tcp_receive+0x260>)
 800aefe:	f005 fc3f 	bl	8010780 <printf>

  if (flags & TCP_ACK) {
 800af02:	4b8c      	ldr	r3, [pc, #560]	@ (800b134 <tcp_receive+0x268>)
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	f003 0310 	and.w	r3, r3, #16
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	f000 8264 	beq.w	800b3d8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800af16:	461a      	mov	r2, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af1c:	4413      	add	r3, r2
 800af1e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800af24:	4b84      	ldr	r3, [pc, #528]	@ (800b138 <tcp_receive+0x26c>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	1ad3      	subs	r3, r2, r3
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	db1b      	blt.n	800af66 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800af32:	4b81      	ldr	r3, [pc, #516]	@ (800b138 <tcp_receive+0x26c>)
 800af34:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800af36:	429a      	cmp	r2, r3
 800af38:	d106      	bne.n	800af48 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800af3e:	4b7f      	ldr	r3, [pc, #508]	@ (800b13c <tcp_receive+0x270>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	1ad3      	subs	r3, r2, r3
 800af44:	2b00      	cmp	r3, #0
 800af46:	db0e      	blt.n	800af66 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800af4c:	4b7b      	ldr	r3, [pc, #492]	@ (800b13c <tcp_receive+0x270>)
 800af4e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800af50:	429a      	cmp	r2, r3
 800af52:	d125      	bne.n	800afa0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800af54:	4b7a      	ldr	r3, [pc, #488]	@ (800b140 <tcp_receive+0x274>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	89db      	ldrh	r3, [r3, #14]
 800af5a:	b29a      	uxth	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800af62:	429a      	cmp	r2, r3
 800af64:	d91c      	bls.n	800afa0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800af66:	4b76      	ldr	r3, [pc, #472]	@ (800b140 <tcp_receive+0x274>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	89db      	ldrh	r3, [r3, #14]
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800af80:	429a      	cmp	r2, r3
 800af82:	d205      	bcs.n	800af90 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800af90:	4b69      	ldr	r3, [pc, #420]	@ (800b138 <tcp_receive+0x26c>)
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800af98:	4b68      	ldr	r3, [pc, #416]	@ (800b13c <tcp_receive+0x270>)
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800afa0:	4b66      	ldr	r3, [pc, #408]	@ (800b13c <tcp_receive+0x270>)
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afa8:	1ad3      	subs	r3, r2, r3
 800afaa:	2b00      	cmp	r3, #0
 800afac:	dc58      	bgt.n	800b060 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800afae:	4b65      	ldr	r3, [pc, #404]	@ (800b144 <tcp_receive+0x278>)
 800afb0:	881b      	ldrh	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d14b      	bne.n	800b04e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800afc0:	4413      	add	r3, r2
 800afc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d142      	bne.n	800b04e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800afce:	2b00      	cmp	r3, #0
 800afd0:	db3d      	blt.n	800b04e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800afd6:	4b59      	ldr	r3, [pc, #356]	@ (800b13c <tcp_receive+0x270>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d137      	bne.n	800b04e <tcp_receive+0x182>
              found_dupack = 1;
 800afde:	2301      	movs	r3, #1
 800afe0:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800afe8:	2bff      	cmp	r3, #255	@ 0xff
 800afea:	d007      	beq.n	800affc <tcp_receive+0x130>
                ++pcb->dupacks;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800aff2:	3301      	adds	r3, #1
 800aff4:	b2da      	uxtb	r2, r3
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b002:	2b03      	cmp	r3, #3
 800b004:	d91b      	bls.n	800b03e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b010:	4413      	add	r3, r2
 800b012:	b29a      	uxth	r2, r3
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d30a      	bcc.n	800b034 <tcp_receive+0x168>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b028:	4413      	add	r3, r2
 800b02a:	b29a      	uxth	r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b032:	e004      	b.n	800b03e <tcp_receive+0x172>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b03a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b044:	2b02      	cmp	r3, #2
 800b046:	d902      	bls.n	800b04e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f001 fee7 	bl	800ce1c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b04e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b050:	2b00      	cmp	r3, #0
 800b052:	f040 8161 	bne.w	800b318 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b05e:	e15b      	b.n	800b318 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b060:	4b36      	ldr	r3, [pc, #216]	@ (800b13c <tcp_receive+0x270>)
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	3b01      	subs	r3, #1
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	f2c0 814e 	blt.w	800b30e <tcp_receive+0x442>
 800b072:	4b32      	ldr	r3, [pc, #200]	@ (800b13c <tcp_receive+0x270>)
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b07a:	1ad3      	subs	r3, r2, r3
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f300 8146 	bgt.w	800b30e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	8b5b      	ldrh	r3, [r3, #26]
 800b086:	f003 0304 	and.w	r3, r3, #4
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d010      	beq.n	800b0b0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	8b5b      	ldrh	r3, [r3, #26]
 800b092:	f023 0304 	bic.w	r3, r3, #4
 800b096:	b29a      	uxth	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b0be:	10db      	asrs	r3, r3, #3
 800b0c0:	b21b      	sxth	r3, r3
 800b0c2:	b29a      	uxth	r2, r3
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	4413      	add	r3, r2
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	b21a      	sxth	r2, r3
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b0d8:	4b18      	ldr	r3, [pc, #96]	@ (800b13c <tcp_receive+0x270>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	1ad3      	subs	r3, r2, r3
 800b0e6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800b0f0:	4b12      	ldr	r3, [pc, #72]	@ (800b13c <tcp_receive+0x270>)
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	7d1b      	ldrb	r3, [r3, #20]
 800b0fc:	2b03      	cmp	r3, #3
 800b0fe:	f240 8097 	bls.w	800b230 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800b10e:	429a      	cmp	r2, r3
 800b110:	d245      	bcs.n	800b19e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	8b5b      	ldrh	r3, [r3, #26]
 800b116:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d014      	beq.n	800b148 <tcp_receive+0x27c>
 800b11e:	2301      	movs	r3, #1
 800b120:	e013      	b.n	800b14a <tcp_receive+0x27e>
 800b122:	bf00      	nop
 800b124:	080162c4 	.word	0x080162c4
 800b128:	080165f4 	.word	0x080165f4
 800b12c:	08016310 	.word	0x08016310
 800b130:	08016610 	.word	0x08016610
 800b134:	20008aa8 	.word	0x20008aa8
 800b138:	20008a9c 	.word	0x20008a9c
 800b13c:	20008aa0 	.word	0x20008aa0
 800b140:	20008a8c 	.word	0x20008a8c
 800b144:	20008aa6 	.word	0x20008aa6
 800b148:	2302      	movs	r3, #2
 800b14a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b14e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800b152:	b29a      	uxth	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b158:	fb12 f303 	smulbb	r3, r2, r3
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b160:	4293      	cmp	r3, r2
 800b162:	bf28      	it	cs
 800b164:	4613      	movcs	r3, r2
 800b166:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b16e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b170:	4413      	add	r3, r2
 800b172:	b29a      	uxth	r2, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d309      	bcc.n	800b192 <tcp_receive+0x2c6>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b184:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b186:	4413      	add	r3, r2
 800b188:	b29a      	uxth	r2, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b190:	e04e      	b.n	800b230 <tcp_receive+0x364>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b198:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b19c:	e048      	b.n	800b230 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b1a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b1a6:	4413      	add	r3, r2
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d309      	bcc.n	800b1c8 <tcp_receive+0x2fc>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b1ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b1bc:	4413      	add	r3, r2
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b1c6:	e004      	b.n	800b1d2 <tcp_receive+0x306>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b1ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d326      	bcc.n	800b230 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b1ee:	1ad3      	subs	r3, r2, r3
 800b1f0:	b29a      	uxth	r2, r3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b202:	4413      	add	r3, r2
 800b204:	b29a      	uxth	r2, r3
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d30a      	bcc.n	800b226 <tcp_receive+0x35a>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b21a:	4413      	add	r3, r2
 800b21c:	b29a      	uxth	r2, r3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b224:	e004      	b.n	800b230 <tcp_receive+0x364>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b22c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b238:	4a98      	ldr	r2, [pc, #608]	@ (800b49c <tcp_receive+0x5d0>)
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f7ff fdca 	bl	800add4 <tcp_free_acked_segments>
 800b240:	4602      	mov	r2, r0
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b24e:	4a94      	ldr	r2, [pc, #592]	@ (800b4a0 <tcp_receive+0x5d4>)
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f7ff fdbf 	bl	800add4 <tcp_free_acked_segments>
 800b256:	4602      	mov	r2, r0
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b260:	2b00      	cmp	r3, #0
 800b262:	d104      	bne.n	800b26e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b26a:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b26c:	e002      	b.n	800b274 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d103      	bne.n	800b28a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800b290:	4b84      	ldr	r3, [pc, #528]	@ (800b4a4 <tcp_receive+0x5d8>)
 800b292:	881b      	ldrh	r3, [r3, #0]
 800b294:	4413      	add	r3, r2
 800b296:	b29a      	uxth	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	8b5b      	ldrh	r3, [r3, #26]
 800b2a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d035      	beq.n	800b316 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d118      	bne.n	800b2e4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00c      	beq.n	800b2d4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7fb f933 	bl	8006532 <lwip_htonl>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	dc20      	bgt.n	800b316 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	8b5b      	ldrh	r3, [r3, #26]
 800b2d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b2e2:	e018      	b.n	800b316 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2ec:	68db      	ldr	r3, [r3, #12]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7fb f91e 	bl	8006532 <lwip_htonl>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	1ae3      	subs	r3, r4, r3
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	dc0b      	bgt.n	800b316 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	8b5b      	ldrh	r3, [r3, #26]
 800b302:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b306:	b29a      	uxth	r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b30c:	e003      	b.n	800b316 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f001 ff70 	bl	800d1f4 <tcp_send_empty_ack>
 800b314:	e000      	b.n	800b318 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b316:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d05b      	beq.n	800b3d8 <tcp_receive+0x50c>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b324:	4b60      	ldr	r3, [pc, #384]	@ (800b4a8 <tcp_receive+0x5dc>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	1ad3      	subs	r3, r2, r3
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	da54      	bge.n	800b3d8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b32e:	4b5f      	ldr	r3, [pc, #380]	@ (800b4ac <tcp_receive+0x5e0>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	b29a      	uxth	r2, r3
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b338:	b29b      	uxth	r3, r3
 800b33a:	1ad3      	subs	r3, r2, r3
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b342:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b34c:	10db      	asrs	r3, r3, #3
 800b34e:	b21b      	sxth	r3, r3
 800b350:	b29b      	uxth	r3, r3
 800b352:	1ad3      	subs	r3, r2, r3
 800b354:	b29b      	uxth	r3, r3
 800b356:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b360:	b29a      	uxth	r2, r3
 800b362:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b366:	4413      	add	r3, r2
 800b368:	b29b      	uxth	r3, r3
 800b36a:	b21a      	sxth	r2, r3
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800b370:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800b374:	2b00      	cmp	r3, #0
 800b376:	da05      	bge.n	800b384 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800b378:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b37c:	425b      	negs	r3, r3
 800b37e:	b29b      	uxth	r3, r3
 800b380:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b384:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b38e:	109b      	asrs	r3, r3, #2
 800b390:	b21b      	sxth	r3, r3
 800b392:	b29b      	uxth	r3, r3
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	b29b      	uxth	r3, r3
 800b398:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b3a2:	b29a      	uxth	r2, r3
 800b3a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b3a8:	4413      	add	r3, r2
 800b3aa:	b29b      	uxth	r3, r3
 800b3ac:	b21a      	sxth	r2, r3
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b3b8:	10db      	asrs	r3, r3, #3
 800b3ba:	b21b      	sxth	r3, r3
 800b3bc:	b29a      	uxth	r2, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	4413      	add	r3, r2
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	b21a      	sxth	r2, r3
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b3d8:	4b35      	ldr	r3, [pc, #212]	@ (800b4b0 <tcp_receive+0x5e4>)
 800b3da:	881b      	ldrh	r3, [r3, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	f000 84df 	beq.w	800bda0 <tcp_receive+0xed4>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	7d1b      	ldrb	r3, [r3, #20]
 800b3e6:	2b06      	cmp	r3, #6
 800b3e8:	f200 84da 	bhi.w	800bda0 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b3f0:	4b30      	ldr	r3, [pc, #192]	@ (800b4b4 <tcp_receive+0x5e8>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	1ad3      	subs	r3, r2, r3
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f2c0 808f 	blt.w	800b51c <tcp_receive+0x650>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b402:	4b2b      	ldr	r3, [pc, #172]	@ (800b4b0 <tcp_receive+0x5e4>)
 800b404:	881b      	ldrh	r3, [r3, #0]
 800b406:	4619      	mov	r1, r3
 800b408:	4b2a      	ldr	r3, [pc, #168]	@ (800b4b4 <tcp_receive+0x5e8>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	440b      	add	r3, r1
 800b40e:	1ad3      	subs	r3, r2, r3
 800b410:	3301      	adds	r3, #1
 800b412:	2b00      	cmp	r3, #0
 800b414:	f300 8082 	bgt.w	800b51c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b418:	4b27      	ldr	r3, [pc, #156]	@ (800b4b8 <tcp_receive+0x5ec>)
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b422:	4b24      	ldr	r3, [pc, #144]	@ (800b4b4 <tcp_receive+0x5e8>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	1ad3      	subs	r3, r2, r3
 800b428:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b42a:	4b23      	ldr	r3, [pc, #140]	@ (800b4b8 <tcp_receive+0x5ec>)
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d106      	bne.n	800b440 <tcp_receive+0x574>
 800b432:	4b22      	ldr	r3, [pc, #136]	@ (800b4bc <tcp_receive+0x5f0>)
 800b434:	f240 5294 	movw	r2, #1428	@ 0x594
 800b438:	4921      	ldr	r1, [pc, #132]	@ (800b4c0 <tcp_receive+0x5f4>)
 800b43a:	4822      	ldr	r0, [pc, #136]	@ (800b4c4 <tcp_receive+0x5f8>)
 800b43c:	f005 f9a0 	bl	8010780 <printf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b442:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b446:	4293      	cmp	r3, r2
 800b448:	d906      	bls.n	800b458 <tcp_receive+0x58c>
 800b44a:	4b1c      	ldr	r3, [pc, #112]	@ (800b4bc <tcp_receive+0x5f0>)
 800b44c:	f240 5295 	movw	r2, #1429	@ 0x595
 800b450:	491d      	ldr	r1, [pc, #116]	@ (800b4c8 <tcp_receive+0x5fc>)
 800b452:	481c      	ldr	r0, [pc, #112]	@ (800b4c4 <tcp_receive+0x5f8>)
 800b454:	f005 f994 	bl	8010780 <printf>
      off = (u16_t)off32;
 800b458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b45a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b45e:	4b16      	ldr	r3, [pc, #88]	@ (800b4b8 <tcp_receive+0x5ec>)
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	891b      	ldrh	r3, [r3, #8]
 800b464:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b468:	429a      	cmp	r2, r3
 800b46a:	d906      	bls.n	800b47a <tcp_receive+0x5ae>
 800b46c:	4b13      	ldr	r3, [pc, #76]	@ (800b4bc <tcp_receive+0x5f0>)
 800b46e:	f240 5297 	movw	r2, #1431	@ 0x597
 800b472:	4916      	ldr	r1, [pc, #88]	@ (800b4cc <tcp_receive+0x600>)
 800b474:	4813      	ldr	r0, [pc, #76]	@ (800b4c4 <tcp_receive+0x5f8>)
 800b476:	f005 f983 	bl	8010780 <printf>
      inseg.len -= off;
 800b47a:	4b0f      	ldr	r3, [pc, #60]	@ (800b4b8 <tcp_receive+0x5ec>)
 800b47c:	891a      	ldrh	r2, [r3, #8]
 800b47e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b482:	1ad3      	subs	r3, r2, r3
 800b484:	b29a      	uxth	r2, r3
 800b486:	4b0c      	ldr	r3, [pc, #48]	@ (800b4b8 <tcp_receive+0x5ec>)
 800b488:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b48a:	4b0b      	ldr	r3, [pc, #44]	@ (800b4b8 <tcp_receive+0x5ec>)
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	891a      	ldrh	r2, [r3, #8]
 800b490:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b494:	1ad3      	subs	r3, r2, r3
 800b496:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800b498:	e02a      	b.n	800b4f0 <tcp_receive+0x624>
 800b49a:	bf00      	nop
 800b49c:	0801662c 	.word	0x0801662c
 800b4a0:	08016634 	.word	0x08016634
 800b4a4:	20008aa4 	.word	0x20008aa4
 800b4a8:	20008aa0 	.word	0x20008aa0
 800b4ac:	20008a64 	.word	0x20008a64
 800b4b0:	20008aa6 	.word	0x20008aa6
 800b4b4:	20008a9c 	.word	0x20008a9c
 800b4b8:	20008a7c 	.word	0x20008a7c
 800b4bc:	080162c4 	.word	0x080162c4
 800b4c0:	0801663c 	.word	0x0801663c
 800b4c4:	08016310 	.word	0x08016310
 800b4c8:	0801664c 	.word	0x0801664c
 800b4cc:	0801665c 	.word	0x0801665c
        off -= p->len;
 800b4d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4d2:	895b      	ldrh	r3, [r3, #10]
 800b4d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b4d8:	1ad3      	subs	r3, r2, r3
 800b4da:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b4de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4e0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b4e2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b4e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b4ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800b4f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4f2:	895b      	ldrh	r3, [r3, #10]
 800b4f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d8e9      	bhi.n	800b4d0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b4fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b500:	4619      	mov	r1, r3
 800b502:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b504:	f7fc fad8 	bl	8007ab8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b50c:	4a90      	ldr	r2, [pc, #576]	@ (800b750 <tcp_receive+0x884>)
 800b50e:	6013      	str	r3, [r2, #0]
 800b510:	4b90      	ldr	r3, [pc, #576]	@ (800b754 <tcp_receive+0x888>)
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	4a8e      	ldr	r2, [pc, #568]	@ (800b750 <tcp_receive+0x884>)
 800b516:	6812      	ldr	r2, [r2, #0]
 800b518:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b51a:	e00d      	b.n	800b538 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b51c:	4b8c      	ldr	r3, [pc, #560]	@ (800b750 <tcp_receive+0x884>)
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b524:	1ad3      	subs	r3, r2, r3
 800b526:	2b00      	cmp	r3, #0
 800b528:	da06      	bge.n	800b538 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	8b5b      	ldrh	r3, [r3, #26]
 800b52e:	f043 0302 	orr.w	r3, r3, #2
 800b532:	b29a      	uxth	r2, r3
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b538:	4b85      	ldr	r3, [pc, #532]	@ (800b750 <tcp_receive+0x884>)
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b540:	1ad3      	subs	r3, r2, r3
 800b542:	2b00      	cmp	r3, #0
 800b544:	f2c0 8427 	blt.w	800bd96 <tcp_receive+0xeca>
 800b548:	4b81      	ldr	r3, [pc, #516]	@ (800b750 <tcp_receive+0x884>)
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b550:	6879      	ldr	r1, [r7, #4]
 800b552:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b554:	440b      	add	r3, r1
 800b556:	1ad3      	subs	r3, r2, r3
 800b558:	3301      	adds	r3, #1
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	f300 841b 	bgt.w	800bd96 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b564:	4b7a      	ldr	r3, [pc, #488]	@ (800b750 <tcp_receive+0x884>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	429a      	cmp	r2, r3
 800b56a:	f040 8298 	bne.w	800ba9e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b56e:	4b79      	ldr	r3, [pc, #484]	@ (800b754 <tcp_receive+0x888>)
 800b570:	891c      	ldrh	r4, [r3, #8]
 800b572:	4b78      	ldr	r3, [pc, #480]	@ (800b754 <tcp_receive+0x888>)
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	899b      	ldrh	r3, [r3, #12]
 800b578:	b29b      	uxth	r3, r3
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7fa ffc4 	bl	8006508 <lwip_htons>
 800b580:	4603      	mov	r3, r0
 800b582:	b2db      	uxtb	r3, r3
 800b584:	f003 0303 	and.w	r3, r3, #3
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d001      	beq.n	800b590 <tcp_receive+0x6c4>
 800b58c:	2301      	movs	r3, #1
 800b58e:	e000      	b.n	800b592 <tcp_receive+0x6c6>
 800b590:	2300      	movs	r3, #0
 800b592:	4423      	add	r3, r4
 800b594:	b29a      	uxth	r2, r3
 800b596:	4b70      	ldr	r3, [pc, #448]	@ (800b758 <tcp_receive+0x88c>)
 800b598:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b59e:	4b6e      	ldr	r3, [pc, #440]	@ (800b758 <tcp_receive+0x88c>)
 800b5a0:	881b      	ldrh	r3, [r3, #0]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d274      	bcs.n	800b690 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b5a6:	4b6b      	ldr	r3, [pc, #428]	@ (800b754 <tcp_receive+0x888>)
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	899b      	ldrh	r3, [r3, #12]
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fa ffaa 	bl	8006508 <lwip_htons>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	f003 0301 	and.w	r3, r3, #1
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d01e      	beq.n	800b5fe <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b5c0:	4b64      	ldr	r3, [pc, #400]	@ (800b754 <tcp_receive+0x888>)
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	899b      	ldrh	r3, [r3, #12]
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	b21b      	sxth	r3, r3
 800b5ca:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b5ce:	b21c      	sxth	r4, r3
 800b5d0:	4b60      	ldr	r3, [pc, #384]	@ (800b754 <tcp_receive+0x888>)
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	899b      	ldrh	r3, [r3, #12]
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7fa ff95 	bl	8006508 <lwip_htons>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7fa ff8d 	bl	8006508 <lwip_htons>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	b21b      	sxth	r3, r3
 800b5f2:	4323      	orrs	r3, r4
 800b5f4:	b21a      	sxth	r2, r3
 800b5f6:	4b57      	ldr	r3, [pc, #348]	@ (800b754 <tcp_receive+0x888>)
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	b292      	uxth	r2, r2
 800b5fc:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b602:	4b54      	ldr	r3, [pc, #336]	@ (800b754 <tcp_receive+0x888>)
 800b604:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b606:	4b53      	ldr	r3, [pc, #332]	@ (800b754 <tcp_receive+0x888>)
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	899b      	ldrh	r3, [r3, #12]
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	4618      	mov	r0, r3
 800b610:	f7fa ff7a 	bl	8006508 <lwip_htons>
 800b614:	4603      	mov	r3, r0
 800b616:	b2db      	uxtb	r3, r3
 800b618:	f003 0302 	and.w	r3, r3, #2
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d005      	beq.n	800b62c <tcp_receive+0x760>
            inseg.len -= 1;
 800b620:	4b4c      	ldr	r3, [pc, #304]	@ (800b754 <tcp_receive+0x888>)
 800b622:	891b      	ldrh	r3, [r3, #8]
 800b624:	3b01      	subs	r3, #1
 800b626:	b29a      	uxth	r2, r3
 800b628:	4b4a      	ldr	r3, [pc, #296]	@ (800b754 <tcp_receive+0x888>)
 800b62a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b62c:	4b49      	ldr	r3, [pc, #292]	@ (800b754 <tcp_receive+0x888>)
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	4a48      	ldr	r2, [pc, #288]	@ (800b754 <tcp_receive+0x888>)
 800b632:	8912      	ldrh	r2, [r2, #8]
 800b634:	4611      	mov	r1, r2
 800b636:	4618      	mov	r0, r3
 800b638:	f7fc f93e 	bl	80078b8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b63c:	4b45      	ldr	r3, [pc, #276]	@ (800b754 <tcp_receive+0x888>)
 800b63e:	891c      	ldrh	r4, [r3, #8]
 800b640:	4b44      	ldr	r3, [pc, #272]	@ (800b754 <tcp_receive+0x888>)
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	899b      	ldrh	r3, [r3, #12]
 800b646:	b29b      	uxth	r3, r3
 800b648:	4618      	mov	r0, r3
 800b64a:	f7fa ff5d 	bl	8006508 <lwip_htons>
 800b64e:	4603      	mov	r3, r0
 800b650:	b2db      	uxtb	r3, r3
 800b652:	f003 0303 	and.w	r3, r3, #3
 800b656:	2b00      	cmp	r3, #0
 800b658:	d001      	beq.n	800b65e <tcp_receive+0x792>
 800b65a:	2301      	movs	r3, #1
 800b65c:	e000      	b.n	800b660 <tcp_receive+0x794>
 800b65e:	2300      	movs	r3, #0
 800b660:	4423      	add	r3, r4
 800b662:	b29a      	uxth	r2, r3
 800b664:	4b3c      	ldr	r3, [pc, #240]	@ (800b758 <tcp_receive+0x88c>)
 800b666:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b668:	4b3b      	ldr	r3, [pc, #236]	@ (800b758 <tcp_receive+0x88c>)
 800b66a:	881b      	ldrh	r3, [r3, #0]
 800b66c:	461a      	mov	r2, r3
 800b66e:	4b38      	ldr	r3, [pc, #224]	@ (800b750 <tcp_receive+0x884>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	441a      	add	r2, r3
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b678:	6879      	ldr	r1, [r7, #4]
 800b67a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b67c:	440b      	add	r3, r1
 800b67e:	429a      	cmp	r2, r3
 800b680:	d006      	beq.n	800b690 <tcp_receive+0x7c4>
 800b682:	4b36      	ldr	r3, [pc, #216]	@ (800b75c <tcp_receive+0x890>)
 800b684:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800b688:	4935      	ldr	r1, [pc, #212]	@ (800b760 <tcp_receive+0x894>)
 800b68a:	4836      	ldr	r0, [pc, #216]	@ (800b764 <tcp_receive+0x898>)
 800b68c:	f005 f878 	bl	8010780 <printf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b694:	2b00      	cmp	r3, #0
 800b696:	f000 80e6 	beq.w	800b866 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b69a:	4b2e      	ldr	r3, [pc, #184]	@ (800b754 <tcp_receive+0x888>)
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	899b      	ldrh	r3, [r3, #12]
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7fa ff30 	bl	8006508 <lwip_htons>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	f003 0301 	and.w	r3, r3, #1
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d010      	beq.n	800b6d6 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b6b4:	e00a      	b.n	800b6cc <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b6ba:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	f7fd fd93 	bl	80091f2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d1f0      	bne.n	800b6b6 <tcp_receive+0x7ea>
 800b6d4:	e0c7      	b.n	800b866 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b6da:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b6dc:	e051      	b.n	800b782 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b6de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6e0:	68db      	ldr	r3, [r3, #12]
 800b6e2:	899b      	ldrh	r3, [r3, #12]
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7fa ff0e 	bl	8006508 <lwip_htons>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	f003 0301 	and.w	r3, r3, #1
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d03c      	beq.n	800b772 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b6f8:	4b16      	ldr	r3, [pc, #88]	@ (800b754 <tcp_receive+0x888>)
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	899b      	ldrh	r3, [r3, #12]
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	4618      	mov	r0, r3
 800b702:	f7fa ff01 	bl	8006508 <lwip_htons>
 800b706:	4603      	mov	r3, r0
 800b708:	b2db      	uxtb	r3, r3
 800b70a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d12f      	bne.n	800b772 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b712:	4b10      	ldr	r3, [pc, #64]	@ (800b754 <tcp_receive+0x888>)
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	899b      	ldrh	r3, [r3, #12]
 800b718:	b29c      	uxth	r4, r3
 800b71a:	2001      	movs	r0, #1
 800b71c:	f7fa fef4 	bl	8006508 <lwip_htons>
 800b720:	4603      	mov	r3, r0
 800b722:	461a      	mov	r2, r3
 800b724:	4b0b      	ldr	r3, [pc, #44]	@ (800b754 <tcp_receive+0x888>)
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	4322      	orrs	r2, r4
 800b72a:	b292      	uxth	r2, r2
 800b72c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b72e:	4b09      	ldr	r3, [pc, #36]	@ (800b754 <tcp_receive+0x888>)
 800b730:	891c      	ldrh	r4, [r3, #8]
 800b732:	4b08      	ldr	r3, [pc, #32]	@ (800b754 <tcp_receive+0x888>)
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	899b      	ldrh	r3, [r3, #12]
 800b738:	b29b      	uxth	r3, r3
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7fa fee4 	bl	8006508 <lwip_htons>
 800b740:	4603      	mov	r3, r0
 800b742:	b2db      	uxtb	r3, r3
 800b744:	f003 0303 	and.w	r3, r3, #3
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00d      	beq.n	800b768 <tcp_receive+0x89c>
 800b74c:	2301      	movs	r3, #1
 800b74e:	e00c      	b.n	800b76a <tcp_receive+0x89e>
 800b750:	20008a9c 	.word	0x20008a9c
 800b754:	20008a7c 	.word	0x20008a7c
 800b758:	20008aa6 	.word	0x20008aa6
 800b75c:	080162c4 	.word	0x080162c4
 800b760:	0801666c 	.word	0x0801666c
 800b764:	08016310 	.word	0x08016310
 800b768:	2300      	movs	r3, #0
 800b76a:	4423      	add	r3, r4
 800b76c:	b29a      	uxth	r2, r3
 800b76e:	4b98      	ldr	r3, [pc, #608]	@ (800b9d0 <tcp_receive+0xb04>)
 800b770:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b774:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800b77c:	6938      	ldr	r0, [r7, #16]
 800b77e:	f7fd fd38 	bl	80091f2 <tcp_seg_free>
            while (next &&
 800b782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b784:	2b00      	cmp	r3, #0
 800b786:	d00e      	beq.n	800b7a6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b788:	4b91      	ldr	r3, [pc, #580]	@ (800b9d0 <tcp_receive+0xb04>)
 800b78a:	881b      	ldrh	r3, [r3, #0]
 800b78c:	461a      	mov	r2, r3
 800b78e:	4b91      	ldr	r3, [pc, #580]	@ (800b9d4 <tcp_receive+0xb08>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	441a      	add	r2, r3
 800b794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b79c:	8909      	ldrh	r1, [r1, #8]
 800b79e:	440b      	add	r3, r1
 800b7a0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	da9b      	bge.n	800b6de <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b7a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d059      	beq.n	800b860 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800b7ac:	4b88      	ldr	r3, [pc, #544]	@ (800b9d0 <tcp_receive+0xb04>)
 800b7ae:	881b      	ldrh	r3, [r3, #0]
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	4b88      	ldr	r3, [pc, #544]	@ (800b9d4 <tcp_receive+0xb08>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	441a      	add	r2, r3
 800b7b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7ba:	68db      	ldr	r3, [r3, #12]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	dd4d      	ble.n	800b860 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b7c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7c6:	68db      	ldr	r3, [r3, #12]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	b29a      	uxth	r2, r3
 800b7cc:	4b81      	ldr	r3, [pc, #516]	@ (800b9d4 <tcp_receive+0xb08>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	1ad3      	subs	r3, r2, r3
 800b7d4:	b29a      	uxth	r2, r3
 800b7d6:	4b80      	ldr	r3, [pc, #512]	@ (800b9d8 <tcp_receive+0xb0c>)
 800b7d8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b7da:	4b7f      	ldr	r3, [pc, #508]	@ (800b9d8 <tcp_receive+0xb0c>)
 800b7dc:	68db      	ldr	r3, [r3, #12]
 800b7de:	899b      	ldrh	r3, [r3, #12]
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7fa fe90 	bl	8006508 <lwip_htons>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	f003 0302 	and.w	r3, r3, #2
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d005      	beq.n	800b800 <tcp_receive+0x934>
                inseg.len -= 1;
 800b7f4:	4b78      	ldr	r3, [pc, #480]	@ (800b9d8 <tcp_receive+0xb0c>)
 800b7f6:	891b      	ldrh	r3, [r3, #8]
 800b7f8:	3b01      	subs	r3, #1
 800b7fa:	b29a      	uxth	r2, r3
 800b7fc:	4b76      	ldr	r3, [pc, #472]	@ (800b9d8 <tcp_receive+0xb0c>)
 800b7fe:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b800:	4b75      	ldr	r3, [pc, #468]	@ (800b9d8 <tcp_receive+0xb0c>)
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	4a74      	ldr	r2, [pc, #464]	@ (800b9d8 <tcp_receive+0xb0c>)
 800b806:	8912      	ldrh	r2, [r2, #8]
 800b808:	4611      	mov	r1, r2
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7fc f854 	bl	80078b8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b810:	4b71      	ldr	r3, [pc, #452]	@ (800b9d8 <tcp_receive+0xb0c>)
 800b812:	891c      	ldrh	r4, [r3, #8]
 800b814:	4b70      	ldr	r3, [pc, #448]	@ (800b9d8 <tcp_receive+0xb0c>)
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	899b      	ldrh	r3, [r3, #12]
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7fa fe73 	bl	8006508 <lwip_htons>
 800b822:	4603      	mov	r3, r0
 800b824:	b2db      	uxtb	r3, r3
 800b826:	f003 0303 	and.w	r3, r3, #3
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d001      	beq.n	800b832 <tcp_receive+0x966>
 800b82e:	2301      	movs	r3, #1
 800b830:	e000      	b.n	800b834 <tcp_receive+0x968>
 800b832:	2300      	movs	r3, #0
 800b834:	4423      	add	r3, r4
 800b836:	b29a      	uxth	r2, r3
 800b838:	4b65      	ldr	r3, [pc, #404]	@ (800b9d0 <tcp_receive+0xb04>)
 800b83a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b83c:	4b64      	ldr	r3, [pc, #400]	@ (800b9d0 <tcp_receive+0xb04>)
 800b83e:	881b      	ldrh	r3, [r3, #0]
 800b840:	461a      	mov	r2, r3
 800b842:	4b64      	ldr	r3, [pc, #400]	@ (800b9d4 <tcp_receive+0xb08>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	441a      	add	r2, r3
 800b848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b84a:	68db      	ldr	r3, [r3, #12]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d006      	beq.n	800b860 <tcp_receive+0x994>
 800b852:	4b62      	ldr	r3, [pc, #392]	@ (800b9dc <tcp_receive+0xb10>)
 800b854:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800b858:	4961      	ldr	r1, [pc, #388]	@ (800b9e0 <tcp_receive+0xb14>)
 800b85a:	4862      	ldr	r0, [pc, #392]	@ (800b9e4 <tcp_receive+0xb18>)
 800b85c:	f004 ff90 	bl	8010780 <printf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b864:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b866:	4b5a      	ldr	r3, [pc, #360]	@ (800b9d0 <tcp_receive+0xb04>)
 800b868:	881b      	ldrh	r3, [r3, #0]
 800b86a:	461a      	mov	r2, r3
 800b86c:	4b59      	ldr	r3, [pc, #356]	@ (800b9d4 <tcp_receive+0xb08>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	441a      	add	r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b87a:	4b55      	ldr	r3, [pc, #340]	@ (800b9d0 <tcp_receive+0xb04>)
 800b87c:	881b      	ldrh	r3, [r3, #0]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d206      	bcs.n	800b890 <tcp_receive+0x9c4>
 800b882:	4b56      	ldr	r3, [pc, #344]	@ (800b9dc <tcp_receive+0xb10>)
 800b884:	f240 6207 	movw	r2, #1543	@ 0x607
 800b888:	4957      	ldr	r1, [pc, #348]	@ (800b9e8 <tcp_receive+0xb1c>)
 800b88a:	4856      	ldr	r0, [pc, #344]	@ (800b9e4 <tcp_receive+0xb18>)
 800b88c:	f004 ff78 	bl	8010780 <printf>
        pcb->rcv_wnd -= tcplen;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b894:	4b4e      	ldr	r3, [pc, #312]	@ (800b9d0 <tcp_receive+0xb04>)
 800b896:	881b      	ldrh	r3, [r3, #0]
 800b898:	1ad3      	subs	r3, r2, r3
 800b89a:	b29a      	uxth	r2, r3
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f7fc ffc5 	bl	8008830 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b8a6:	4b4c      	ldr	r3, [pc, #304]	@ (800b9d8 <tcp_receive+0xb0c>)
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	891b      	ldrh	r3, [r3, #8]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d006      	beq.n	800b8be <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800b8b0:	4b49      	ldr	r3, [pc, #292]	@ (800b9d8 <tcp_receive+0xb0c>)
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	4a4d      	ldr	r2, [pc, #308]	@ (800b9ec <tcp_receive+0xb20>)
 800b8b6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b8b8:	4b47      	ldr	r3, [pc, #284]	@ (800b9d8 <tcp_receive+0xb0c>)
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b8be:	4b46      	ldr	r3, [pc, #280]	@ (800b9d8 <tcp_receive+0xb0c>)
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	899b      	ldrh	r3, [r3, #12]
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7fa fe1e 	bl	8006508 <lwip_htons>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	f003 0301 	and.w	r3, r3, #1
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f000 80b8 	beq.w	800ba4a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b8da:	4b45      	ldr	r3, [pc, #276]	@ (800b9f0 <tcp_receive+0xb24>)
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	f043 0320 	orr.w	r3, r3, #32
 800b8e2:	b2da      	uxtb	r2, r3
 800b8e4:	4b42      	ldr	r3, [pc, #264]	@ (800b9f0 <tcp_receive+0xb24>)
 800b8e6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b8e8:	e0af      	b.n	800ba4a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8ee:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	4a36      	ldr	r2, [pc, #216]	@ (800b9d4 <tcp_receive+0xb08>)
 800b8fa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	891b      	ldrh	r3, [r3, #8]
 800b900:	461c      	mov	r4, r3
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	899b      	ldrh	r3, [r3, #12]
 800b908:	b29b      	uxth	r3, r3
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7fa fdfc 	bl	8006508 <lwip_htons>
 800b910:	4603      	mov	r3, r0
 800b912:	b2db      	uxtb	r3, r3
 800b914:	f003 0303 	and.w	r3, r3, #3
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d001      	beq.n	800b920 <tcp_receive+0xa54>
 800b91c:	2301      	movs	r3, #1
 800b91e:	e000      	b.n	800b922 <tcp_receive+0xa56>
 800b920:	2300      	movs	r3, #0
 800b922:	191a      	adds	r2, r3, r4
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b928:	441a      	add	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b932:	461c      	mov	r4, r3
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	891b      	ldrh	r3, [r3, #8]
 800b938:	461d      	mov	r5, r3
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	899b      	ldrh	r3, [r3, #12]
 800b940:	b29b      	uxth	r3, r3
 800b942:	4618      	mov	r0, r3
 800b944:	f7fa fde0 	bl	8006508 <lwip_htons>
 800b948:	4603      	mov	r3, r0
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	f003 0303 	and.w	r3, r3, #3
 800b950:	2b00      	cmp	r3, #0
 800b952:	d001      	beq.n	800b958 <tcp_receive+0xa8c>
 800b954:	2301      	movs	r3, #1
 800b956:	e000      	b.n	800b95a <tcp_receive+0xa8e>
 800b958:	2300      	movs	r3, #0
 800b95a:	442b      	add	r3, r5
 800b95c:	429c      	cmp	r4, r3
 800b95e:	d206      	bcs.n	800b96e <tcp_receive+0xaa2>
 800b960:	4b1e      	ldr	r3, [pc, #120]	@ (800b9dc <tcp_receive+0xb10>)
 800b962:	f240 622b 	movw	r2, #1579	@ 0x62b
 800b966:	4923      	ldr	r1, [pc, #140]	@ (800b9f4 <tcp_receive+0xb28>)
 800b968:	481e      	ldr	r0, [pc, #120]	@ (800b9e4 <tcp_receive+0xb18>)
 800b96a:	f004 ff09 	bl	8010780 <printf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	891b      	ldrh	r3, [r3, #8]
 800b972:	461c      	mov	r4, r3
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	899b      	ldrh	r3, [r3, #12]
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7fa fdc3 	bl	8006508 <lwip_htons>
 800b982:	4603      	mov	r3, r0
 800b984:	b2db      	uxtb	r3, r3
 800b986:	f003 0303 	and.w	r3, r3, #3
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d001      	beq.n	800b992 <tcp_receive+0xac6>
 800b98e:	2301      	movs	r3, #1
 800b990:	e000      	b.n	800b994 <tcp_receive+0xac8>
 800b992:	2300      	movs	r3, #0
 800b994:	1919      	adds	r1, r3, r4
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b99a:	b28b      	uxth	r3, r1
 800b99c:	1ad3      	subs	r3, r2, r3
 800b99e:	b29a      	uxth	r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f7fc ff43 	bl	8008830 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	891b      	ldrh	r3, [r3, #8]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d028      	beq.n	800ba06 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b9b4:	4b0d      	ldr	r3, [pc, #52]	@ (800b9ec <tcp_receive+0xb20>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d01d      	beq.n	800b9f8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800b9bc:	4b0b      	ldr	r3, [pc, #44]	@ (800b9ec <tcp_receive+0xb20>)
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	4610      	mov	r0, r2
 800b9c8:	f7fc f9be 	bl	8007d48 <pbuf_cat>
 800b9cc:	e018      	b.n	800ba00 <tcp_receive+0xb34>
 800b9ce:	bf00      	nop
 800b9d0:	20008aa6 	.word	0x20008aa6
 800b9d4:	20008a9c 	.word	0x20008a9c
 800b9d8:	20008a7c 	.word	0x20008a7c
 800b9dc:	080162c4 	.word	0x080162c4
 800b9e0:	080166a4 	.word	0x080166a4
 800b9e4:	08016310 	.word	0x08016310
 800b9e8:	080166e0 	.word	0x080166e0
 800b9ec:	20008aac 	.word	0x20008aac
 800b9f0:	20008aa9 	.word	0x20008aa9
 800b9f4:	08016700 	.word	0x08016700
            } else {
              recv_data = cseg->p;
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	4a70      	ldr	r2, [pc, #448]	@ (800bbc0 <tcp_receive+0xcf4>)
 800b9fe:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	2200      	movs	r2, #0
 800ba04:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	899b      	ldrh	r3, [r3, #12]
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7fa fd7a 	bl	8006508 <lwip_htons>
 800ba14:	4603      	mov	r3, r0
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	f003 0301 	and.w	r3, r3, #1
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d00d      	beq.n	800ba3c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ba20:	4b68      	ldr	r3, [pc, #416]	@ (800bbc4 <tcp_receive+0xcf8>)
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	f043 0320 	orr.w	r3, r3, #32
 800ba28:	b2da      	uxtb	r2, r3
 800ba2a:	4b66      	ldr	r3, [pc, #408]	@ (800bbc4 <tcp_receive+0xcf8>)
 800ba2c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	7d1b      	ldrb	r3, [r3, #20]
 800ba32:	2b04      	cmp	r3, #4
 800ba34:	d102      	bne.n	800ba3c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2207      	movs	r2, #7
 800ba3a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800ba44:	68b8      	ldr	r0, [r7, #8]
 800ba46:	f7fd fbd4 	bl	80091f2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d008      	beq.n	800ba64 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba56:	68db      	ldr	r3, [r3, #12]
 800ba58:	685a      	ldr	r2, [r3, #4]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	f43f af43 	beq.w	800b8ea <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	8b5b      	ldrh	r3, [r3, #26]
 800ba68:	f003 0301 	and.w	r3, r3, #1
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d00e      	beq.n	800ba8e <tcp_receive+0xbc2>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	8b5b      	ldrh	r3, [r3, #26]
 800ba74:	f023 0301 	bic.w	r3, r3, #1
 800ba78:	b29a      	uxth	r2, r3
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	835a      	strh	r2, [r3, #26]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	8b5b      	ldrh	r3, [r3, #26]
 800ba82:	f043 0302 	orr.w	r3, r3, #2
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ba8c:	e187      	b.n	800bd9e <tcp_receive+0xed2>
        tcp_ack(pcb);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	8b5b      	ldrh	r3, [r3, #26]
 800ba92:	f043 0301 	orr.w	r3, r3, #1
 800ba96:	b29a      	uxth	r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ba9c:	e17f      	b.n	800bd9e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d106      	bne.n	800bab4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800baa6:	4848      	ldr	r0, [pc, #288]	@ (800bbc8 <tcp_receive+0xcfc>)
 800baa8:	f7fd fbbc 	bl	8009224 <tcp_seg_copy>
 800baac:	4602      	mov	r2, r0
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	675a      	str	r2, [r3, #116]	@ 0x74
 800bab2:	e16c      	b.n	800bd8e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800bab4:	2300      	movs	r3, #0
 800bab6:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800babc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800babe:	e156      	b.n	800bd6e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800bac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	685a      	ldr	r2, [r3, #4]
 800bac6:	4b41      	ldr	r3, [pc, #260]	@ (800bbcc <tcp_receive+0xd00>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d11d      	bne.n	800bb0a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800bace:	4b3e      	ldr	r3, [pc, #248]	@ (800bbc8 <tcp_receive+0xcfc>)
 800bad0:	891a      	ldrh	r2, [r3, #8]
 800bad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad4:	891b      	ldrh	r3, [r3, #8]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	f240 814e 	bls.w	800bd78 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800badc:	483a      	ldr	r0, [pc, #232]	@ (800bbc8 <tcp_receive+0xcfc>)
 800bade:	f7fd fba1 	bl	8009224 <tcp_seg_copy>
 800bae2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	f000 8148 	beq.w	800bd7c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800baec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d003      	beq.n	800bafa <tcp_receive+0xc2e>
                    prev->next = cseg;
 800baf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baf4:	697a      	ldr	r2, [r7, #20]
 800baf6:	601a      	str	r2, [r3, #0]
 800baf8:	e002      	b.n	800bb00 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	697a      	ldr	r2, [r7, #20]
 800bafe:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800bb00:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bb02:	6978      	ldr	r0, [r7, #20]
 800bb04:	f7ff f8de 	bl	800acc4 <tcp_oos_insert_segment>
                }
                break;
 800bb08:	e138      	b.n	800bd7c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800bb0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d117      	bne.n	800bb40 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800bb10:	4b2e      	ldr	r3, [pc, #184]	@ (800bbcc <tcp_receive+0xd00>)
 800bb12:	681a      	ldr	r2, [r3, #0]
 800bb14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	1ad3      	subs	r3, r2, r3
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	da57      	bge.n	800bbd0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bb20:	4829      	ldr	r0, [pc, #164]	@ (800bbc8 <tcp_receive+0xcfc>)
 800bb22:	f7fd fb7f 	bl	8009224 <tcp_seg_copy>
 800bb26:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800bb28:	69bb      	ldr	r3, [r7, #24]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	f000 8128 	beq.w	800bd80 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	69ba      	ldr	r2, [r7, #24]
 800bb34:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800bb36:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bb38:	69b8      	ldr	r0, [r7, #24]
 800bb3a:	f7ff f8c3 	bl	800acc4 <tcp_oos_insert_segment>
                  }
                  break;
 800bb3e:	e11f      	b.n	800bd80 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800bb40:	4b22      	ldr	r3, [pc, #136]	@ (800bbcc <tcp_receive+0xd00>)
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	685b      	ldr	r3, [r3, #4]
 800bb4a:	1ad3      	subs	r3, r2, r3
 800bb4c:	3b01      	subs	r3, #1
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	db3e      	blt.n	800bbd0 <tcp_receive+0xd04>
 800bb52:	4b1e      	ldr	r3, [pc, #120]	@ (800bbcc <tcp_receive+0xd00>)
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	1ad3      	subs	r3, r2, r3
 800bb5e:	3301      	adds	r3, #1
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	dc35      	bgt.n	800bbd0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bb64:	4818      	ldr	r0, [pc, #96]	@ (800bbc8 <tcp_receive+0xcfc>)
 800bb66:	f7fd fb5d 	bl	8009224 <tcp_seg_copy>
 800bb6a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800bb6c:	69fb      	ldr	r3, [r7, #28]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	f000 8108 	beq.w	800bd84 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800bb74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb7c:	8912      	ldrh	r2, [r2, #8]
 800bb7e:	441a      	add	r2, r3
 800bb80:	4b12      	ldr	r3, [pc, #72]	@ (800bbcc <tcp_receive+0xd00>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	1ad3      	subs	r3, r2, r3
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	dd12      	ble.n	800bbb0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800bb8a:	4b10      	ldr	r3, [pc, #64]	@ (800bbcc <tcp_receive+0xd00>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	b29a      	uxth	r2, r3
 800bb90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	b29a      	uxth	r2, r3
 800bb9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb9e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800bba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bba2:	685a      	ldr	r2, [r3, #4]
 800bba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bba6:	891b      	ldrh	r3, [r3, #8]
 800bba8:	4619      	mov	r1, r3
 800bbaa:	4610      	mov	r0, r2
 800bbac:	f7fb fe84 	bl	80078b8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800bbb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbb2:	69fa      	ldr	r2, [r7, #28]
 800bbb4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800bbb6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bbb8:	69f8      	ldr	r0, [r7, #28]
 800bbba:	f7ff f883 	bl	800acc4 <tcp_oos_insert_segment>
                  }
                  break;
 800bbbe:	e0e1      	b.n	800bd84 <tcp_receive+0xeb8>
 800bbc0:	20008aac 	.word	0x20008aac
 800bbc4:	20008aa9 	.word	0x20008aa9
 800bbc8:	20008a7c 	.word	0x20008a7c
 800bbcc:	20008a9c 	.word	0x20008a9c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800bbd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbd2:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800bbd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f040 80c5 	bne.w	800bd68 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800bbde:	4b7f      	ldr	r3, [pc, #508]	@ (800bddc <tcp_receive+0xf10>)
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f340 80bc 	ble.w	800bd68 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bbf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	899b      	ldrh	r3, [r3, #12]
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7fa fc85 	bl	8006508 <lwip_htons>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	f003 0301 	and.w	r3, r3, #1
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	f040 80be 	bne.w	800bd88 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800bc0c:	4874      	ldr	r0, [pc, #464]	@ (800bde0 <tcp_receive+0xf14>)
 800bc0e:	f7fd fb09 	bl	8009224 <tcp_seg_copy>
 800bc12:	4602      	mov	r2, r0
 800bc14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc16:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800bc18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f000 80b5 	beq.w	800bd8c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800bc22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc24:	68db      	ldr	r3, [r3, #12]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bc2a:	8912      	ldrh	r2, [r2, #8]
 800bc2c:	441a      	add	r2, r3
 800bc2e:	4b6b      	ldr	r3, [pc, #428]	@ (800bddc <tcp_receive+0xf10>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	1ad3      	subs	r3, r2, r3
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	dd12      	ble.n	800bc5e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800bc38:	4b68      	ldr	r3, [pc, #416]	@ (800bddc <tcp_receive+0xf10>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	b29a      	uxth	r2, r3
 800bc3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	1ad3      	subs	r3, r2, r3
 800bc48:	b29a      	uxth	r2, r3
 800bc4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc4c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800bc4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc50:	685a      	ldr	r2, [r3, #4]
 800bc52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc54:	891b      	ldrh	r3, [r3, #8]
 800bc56:	4619      	mov	r1, r3
 800bc58:	4610      	mov	r0, r2
 800bc5a:	f7fb fe2d 	bl	80078b8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800bc5e:	4b61      	ldr	r3, [pc, #388]	@ (800bde4 <tcp_receive+0xf18>)
 800bc60:	881b      	ldrh	r3, [r3, #0]
 800bc62:	461a      	mov	r2, r3
 800bc64:	4b5d      	ldr	r3, [pc, #372]	@ (800bddc <tcp_receive+0xf10>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	441a      	add	r2, r3
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc6e:	6879      	ldr	r1, [r7, #4]
 800bc70:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bc72:	440b      	add	r3, r1
 800bc74:	1ad3      	subs	r3, r2, r3
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f340 8088 	ble.w	800bd8c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800bc7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	899b      	ldrh	r3, [r3, #12]
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7fa fc3e 	bl	8006508 <lwip_htons>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	f003 0301 	and.w	r3, r3, #1
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d021      	beq.n	800bcdc <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800bc98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	899b      	ldrh	r3, [r3, #12]
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	b21b      	sxth	r3, r3
 800bca4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bca8:	b21c      	sxth	r4, r3
 800bcaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	899b      	ldrh	r3, [r3, #12]
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7fa fc27 	bl	8006508 <lwip_htons>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f7fa fc1f 	bl	8006508 <lwip_htons>
 800bcca:	4603      	mov	r3, r0
 800bccc:	b21b      	sxth	r3, r3
 800bcce:	4323      	orrs	r3, r4
 800bcd0:	b21a      	sxth	r2, r3
 800bcd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	b292      	uxth	r2, r2
 800bcda:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bce0:	b29a      	uxth	r2, r3
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bce6:	4413      	add	r3, r2
 800bce8:	b299      	uxth	r1, r3
 800bcea:	4b3c      	ldr	r3, [pc, #240]	@ (800bddc <tcp_receive+0xf10>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	b29a      	uxth	r2, r3
 800bcf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	1a8a      	subs	r2, r1, r2
 800bcf6:	b292      	uxth	r2, r2
 800bcf8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bcfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	685a      	ldr	r2, [r3, #4]
 800bd00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	891b      	ldrh	r3, [r3, #8]
 800bd06:	4619      	mov	r1, r3
 800bd08:	4610      	mov	r0, r2
 800bd0a:	f7fb fdd5 	bl	80078b8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bd0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	891c      	ldrh	r4, [r3, #8]
 800bd14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	899b      	ldrh	r3, [r3, #12]
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7fa fbf2 	bl	8006508 <lwip_htons>
 800bd24:	4603      	mov	r3, r0
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	f003 0303 	and.w	r3, r3, #3
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d001      	beq.n	800bd34 <tcp_receive+0xe68>
 800bd30:	2301      	movs	r3, #1
 800bd32:	e000      	b.n	800bd36 <tcp_receive+0xe6a>
 800bd34:	2300      	movs	r3, #0
 800bd36:	4423      	add	r3, r4
 800bd38:	b29a      	uxth	r2, r3
 800bd3a:	4b2a      	ldr	r3, [pc, #168]	@ (800bde4 <tcp_receive+0xf18>)
 800bd3c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bd3e:	4b29      	ldr	r3, [pc, #164]	@ (800bde4 <tcp_receive+0xf18>)
 800bd40:	881b      	ldrh	r3, [r3, #0]
 800bd42:	461a      	mov	r2, r3
 800bd44:	4b25      	ldr	r3, [pc, #148]	@ (800bddc <tcp_receive+0xf10>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	441a      	add	r2, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd4e:	6879      	ldr	r1, [r7, #4]
 800bd50:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bd52:	440b      	add	r3, r1
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d019      	beq.n	800bd8c <tcp_receive+0xec0>
 800bd58:	4b23      	ldr	r3, [pc, #140]	@ (800bde8 <tcp_receive+0xf1c>)
 800bd5a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800bd5e:	4923      	ldr	r1, [pc, #140]	@ (800bdec <tcp_receive+0xf20>)
 800bd60:	4823      	ldr	r0, [pc, #140]	@ (800bdf0 <tcp_receive+0xf24>)
 800bd62:	f004 fd0d 	bl	8010780 <printf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800bd66:	e011      	b.n	800bd8c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bd68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bd6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f47f aea5 	bne.w	800bac0 <tcp_receive+0xbf4>
 800bd76:	e00a      	b.n	800bd8e <tcp_receive+0xec2>
                break;
 800bd78:	bf00      	nop
 800bd7a:	e008      	b.n	800bd8e <tcp_receive+0xec2>
                break;
 800bd7c:	bf00      	nop
 800bd7e:	e006      	b.n	800bd8e <tcp_receive+0xec2>
                  break;
 800bd80:	bf00      	nop
 800bd82:	e004      	b.n	800bd8e <tcp_receive+0xec2>
                  break;
 800bd84:	bf00      	nop
 800bd86:	e002      	b.n	800bd8e <tcp_receive+0xec2>
                  break;
 800bd88:	bf00      	nop
 800bd8a:	e000      	b.n	800bd8e <tcp_receive+0xec2>
                break;
 800bd8c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f001 fa30 	bl	800d1f4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800bd94:	e003      	b.n	800bd9e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f001 fa2c 	bl	800d1f4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bd9c:	e01a      	b.n	800bdd4 <tcp_receive+0xf08>
 800bd9e:	e019      	b.n	800bdd4 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bda0:	4b0e      	ldr	r3, [pc, #56]	@ (800bddc <tcp_receive+0xf10>)
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bda8:	1ad3      	subs	r3, r2, r3
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	db0a      	blt.n	800bdc4 <tcp_receive+0xef8>
 800bdae:	4b0b      	ldr	r3, [pc, #44]	@ (800bddc <tcp_receive+0xf10>)
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdb6:	6879      	ldr	r1, [r7, #4]
 800bdb8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bdba:	440b      	add	r3, r1
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	dd07      	ble.n	800bdd4 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	8b5b      	ldrh	r3, [r3, #26]
 800bdc8:	f043 0302 	orr.w	r3, r3, #2
 800bdcc:	b29a      	uxth	r2, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800bdd2:	e7ff      	b.n	800bdd4 <tcp_receive+0xf08>
 800bdd4:	bf00      	nop
 800bdd6:	3750      	adds	r7, #80	@ 0x50
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bdb0      	pop	{r4, r5, r7, pc}
 800bddc:	20008a9c 	.word	0x20008a9c
 800bde0:	20008a7c 	.word	0x20008a7c
 800bde4:	20008aa6 	.word	0x20008aa6
 800bde8:	080162c4 	.word	0x080162c4
 800bdec:	0801666c 	.word	0x0801666c
 800bdf0:	08016310 	.word	0x08016310

0800bdf4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b083      	sub	sp, #12
 800bdf8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800bdfa:	4b15      	ldr	r3, [pc, #84]	@ (800be50 <tcp_get_next_optbyte+0x5c>)
 800bdfc:	881b      	ldrh	r3, [r3, #0]
 800bdfe:	1c5a      	adds	r2, r3, #1
 800be00:	b291      	uxth	r1, r2
 800be02:	4a13      	ldr	r2, [pc, #76]	@ (800be50 <tcp_get_next_optbyte+0x5c>)
 800be04:	8011      	strh	r1, [r2, #0]
 800be06:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800be08:	4b12      	ldr	r3, [pc, #72]	@ (800be54 <tcp_get_next_optbyte+0x60>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d004      	beq.n	800be1a <tcp_get_next_optbyte+0x26>
 800be10:	4b11      	ldr	r3, [pc, #68]	@ (800be58 <tcp_get_next_optbyte+0x64>)
 800be12:	881b      	ldrh	r3, [r3, #0]
 800be14:	88fa      	ldrh	r2, [r7, #6]
 800be16:	429a      	cmp	r2, r3
 800be18:	d208      	bcs.n	800be2c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800be1a:	4b10      	ldr	r3, [pc, #64]	@ (800be5c <tcp_get_next_optbyte+0x68>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	3314      	adds	r3, #20
 800be20:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800be22:	88fb      	ldrh	r3, [r7, #6]
 800be24:	683a      	ldr	r2, [r7, #0]
 800be26:	4413      	add	r3, r2
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	e00b      	b.n	800be44 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800be2c:	88fb      	ldrh	r3, [r7, #6]
 800be2e:	b2da      	uxtb	r2, r3
 800be30:	4b09      	ldr	r3, [pc, #36]	@ (800be58 <tcp_get_next_optbyte+0x64>)
 800be32:	881b      	ldrh	r3, [r3, #0]
 800be34:	b2db      	uxtb	r3, r3
 800be36:	1ad3      	subs	r3, r2, r3
 800be38:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800be3a:	4b06      	ldr	r3, [pc, #24]	@ (800be54 <tcp_get_next_optbyte+0x60>)
 800be3c:	681a      	ldr	r2, [r3, #0]
 800be3e:	797b      	ldrb	r3, [r7, #5]
 800be40:	4413      	add	r3, r2
 800be42:	781b      	ldrb	r3, [r3, #0]
  }
}
 800be44:	4618      	mov	r0, r3
 800be46:	370c      	adds	r7, #12
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr
 800be50:	20008a98 	.word	0x20008a98
 800be54:	20008a94 	.word	0x20008a94
 800be58:	20008a92 	.word	0x20008a92
 800be5c:	20008a8c 	.word	0x20008a8c

0800be60 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d106      	bne.n	800be7c <tcp_parseopt+0x1c>
 800be6e:	4b32      	ldr	r3, [pc, #200]	@ (800bf38 <tcp_parseopt+0xd8>)
 800be70:	f240 727d 	movw	r2, #1917	@ 0x77d
 800be74:	4931      	ldr	r1, [pc, #196]	@ (800bf3c <tcp_parseopt+0xdc>)
 800be76:	4832      	ldr	r0, [pc, #200]	@ (800bf40 <tcp_parseopt+0xe0>)
 800be78:	f004 fc82 	bl	8010780 <printf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800be7c:	4b31      	ldr	r3, [pc, #196]	@ (800bf44 <tcp_parseopt+0xe4>)
 800be7e:	881b      	ldrh	r3, [r3, #0]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d056      	beq.n	800bf32 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800be84:	4b30      	ldr	r3, [pc, #192]	@ (800bf48 <tcp_parseopt+0xe8>)
 800be86:	2200      	movs	r2, #0
 800be88:	801a      	strh	r2, [r3, #0]
 800be8a:	e046      	b.n	800bf1a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800be8c:	f7ff ffb2 	bl	800bdf4 <tcp_get_next_optbyte>
 800be90:	4603      	mov	r3, r0
 800be92:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800be94:	7bfb      	ldrb	r3, [r7, #15]
 800be96:	2b02      	cmp	r3, #2
 800be98:	d006      	beq.n	800bea8 <tcp_parseopt+0x48>
 800be9a:	2b02      	cmp	r3, #2
 800be9c:	dc2a      	bgt.n	800bef4 <tcp_parseopt+0x94>
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d042      	beq.n	800bf28 <tcp_parseopt+0xc8>
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d038      	beq.n	800bf18 <tcp_parseopt+0xb8>
 800bea6:	e025      	b.n	800bef4 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800bea8:	f7ff ffa4 	bl	800bdf4 <tcp_get_next_optbyte>
 800beac:	4603      	mov	r3, r0
 800beae:	2b04      	cmp	r3, #4
 800beb0:	d13c      	bne.n	800bf2c <tcp_parseopt+0xcc>
 800beb2:	4b25      	ldr	r3, [pc, #148]	@ (800bf48 <tcp_parseopt+0xe8>)
 800beb4:	881b      	ldrh	r3, [r3, #0]
 800beb6:	3301      	adds	r3, #1
 800beb8:	4a22      	ldr	r2, [pc, #136]	@ (800bf44 <tcp_parseopt+0xe4>)
 800beba:	8812      	ldrh	r2, [r2, #0]
 800bebc:	4293      	cmp	r3, r2
 800bebe:	da35      	bge.n	800bf2c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800bec0:	f7ff ff98 	bl	800bdf4 <tcp_get_next_optbyte>
 800bec4:	4603      	mov	r3, r0
 800bec6:	021b      	lsls	r3, r3, #8
 800bec8:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800beca:	f7ff ff93 	bl	800bdf4 <tcp_get_next_optbyte>
 800bece:	4603      	mov	r3, r0
 800bed0:	461a      	mov	r2, r3
 800bed2:	89bb      	ldrh	r3, [r7, #12]
 800bed4:	4313      	orrs	r3, r2
 800bed6:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800bed8:	89bb      	ldrh	r3, [r7, #12]
 800beda:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800bede:	d804      	bhi.n	800beea <tcp_parseopt+0x8a>
 800bee0:	89bb      	ldrh	r3, [r7, #12]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d001      	beq.n	800beea <tcp_parseopt+0x8a>
 800bee6:	89ba      	ldrh	r2, [r7, #12]
 800bee8:	e001      	b.n	800beee <tcp_parseopt+0x8e>
 800beea:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800bef2:	e012      	b.n	800bf1a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800bef4:	f7ff ff7e 	bl	800bdf4 <tcp_get_next_optbyte>
 800bef8:	4603      	mov	r3, r0
 800befa:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800befc:	7afb      	ldrb	r3, [r7, #11]
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d916      	bls.n	800bf30 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800bf02:	7afb      	ldrb	r3, [r7, #11]
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	4b10      	ldr	r3, [pc, #64]	@ (800bf48 <tcp_parseopt+0xe8>)
 800bf08:	881b      	ldrh	r3, [r3, #0]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	3b02      	subs	r3, #2
 800bf10:	b29a      	uxth	r2, r3
 800bf12:	4b0d      	ldr	r3, [pc, #52]	@ (800bf48 <tcp_parseopt+0xe8>)
 800bf14:	801a      	strh	r2, [r3, #0]
 800bf16:	e000      	b.n	800bf1a <tcp_parseopt+0xba>
          break;
 800bf18:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bf1a:	4b0b      	ldr	r3, [pc, #44]	@ (800bf48 <tcp_parseopt+0xe8>)
 800bf1c:	881a      	ldrh	r2, [r3, #0]
 800bf1e:	4b09      	ldr	r3, [pc, #36]	@ (800bf44 <tcp_parseopt+0xe4>)
 800bf20:	881b      	ldrh	r3, [r3, #0]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d3b2      	bcc.n	800be8c <tcp_parseopt+0x2c>
 800bf26:	e004      	b.n	800bf32 <tcp_parseopt+0xd2>
          return;
 800bf28:	bf00      	nop
 800bf2a:	e002      	b.n	800bf32 <tcp_parseopt+0xd2>
            return;
 800bf2c:	bf00      	nop
 800bf2e:	e000      	b.n	800bf32 <tcp_parseopt+0xd2>
            return;
 800bf30:	bf00      	nop
      }
    }
  }
}
 800bf32:	3710      	adds	r7, #16
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	080162c4 	.word	0x080162c4
 800bf3c:	08016728 	.word	0x08016728
 800bf40:	08016310 	.word	0x08016310
 800bf44:	20008a90 	.word	0x20008a90
 800bf48:	20008a98 	.word	0x20008a98

0800bf4c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800bf50:	4b05      	ldr	r3, [pc, #20]	@ (800bf68 <tcp_trigger_input_pcb_close+0x1c>)
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	f043 0310 	orr.w	r3, r3, #16
 800bf58:	b2da      	uxtb	r2, r3
 800bf5a:	4b03      	ldr	r3, [pc, #12]	@ (800bf68 <tcp_trigger_input_pcb_close+0x1c>)
 800bf5c:	701a      	strb	r2, [r3, #0]
}
 800bf5e:	bf00      	nop
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr
 800bf68:	20008aa9 	.word	0x20008aa9

0800bf6c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d00a      	beq.n	800bf94 <tcp_route+0x28>
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	7a1b      	ldrb	r3, [r3, #8]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d006      	beq.n	800bf94 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	7a1b      	ldrb	r3, [r3, #8]
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7fb faba 	bl	8007504 <netif_get_by_index>
 800bf90:	4603      	mov	r3, r0
 800bf92:	e003      	b.n	800bf9c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f003 f929 	bl	800f1ec <ip4_route>
 800bf9a:	4603      	mov	r3, r0
  }
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800bfa4:	b590      	push	{r4, r7, lr}
 800bfa6:	b087      	sub	sp, #28
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	603b      	str	r3, [r7, #0]
 800bfb0:	4613      	mov	r3, r2
 800bfb2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d105      	bne.n	800bfc6 <tcp_create_segment+0x22>
 800bfba:	4b43      	ldr	r3, [pc, #268]	@ (800c0c8 <tcp_create_segment+0x124>)
 800bfbc:	22a3      	movs	r2, #163	@ 0xa3
 800bfbe:	4943      	ldr	r1, [pc, #268]	@ (800c0cc <tcp_create_segment+0x128>)
 800bfc0:	4843      	ldr	r0, [pc, #268]	@ (800c0d0 <tcp_create_segment+0x12c>)
 800bfc2:	f004 fbdd 	bl	8010780 <printf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d105      	bne.n	800bfd8 <tcp_create_segment+0x34>
 800bfcc:	4b3e      	ldr	r3, [pc, #248]	@ (800c0c8 <tcp_create_segment+0x124>)
 800bfce:	22a4      	movs	r2, #164	@ 0xa4
 800bfd0:	4940      	ldr	r1, [pc, #256]	@ (800c0d4 <tcp_create_segment+0x130>)
 800bfd2:	483f      	ldr	r0, [pc, #252]	@ (800c0d0 <tcp_create_segment+0x12c>)
 800bfd4:	f004 fbd4 	bl	8010780 <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bfd8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	f003 0304 	and.w	r3, r3, #4
 800bfe4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800bfe6:	2003      	movs	r0, #3
 800bfe8:	f7fa ff06 	bl	8006df8 <memp_malloc>
 800bfec:	6138      	str	r0, [r7, #16]
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d104      	bne.n	800bffe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800bff4:	68b8      	ldr	r0, [r7, #8]
 800bff6:	f7fb fde5 	bl	8007bc4 <pbuf_free>
    return NULL;
 800bffa:	2300      	movs	r3, #0
 800bffc:	e060      	b.n	800c0c0 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800c004:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	2200      	movs	r2, #0
 800c00a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	68ba      	ldr	r2, [r7, #8]
 800c010:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	891a      	ldrh	r2, [r3, #8]
 800c016:	7dfb      	ldrb	r3, [r7, #23]
 800c018:	b29b      	uxth	r3, r3
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d205      	bcs.n	800c02a <tcp_create_segment+0x86>
 800c01e:	4b2a      	ldr	r3, [pc, #168]	@ (800c0c8 <tcp_create_segment+0x124>)
 800c020:	22b0      	movs	r2, #176	@ 0xb0
 800c022:	492d      	ldr	r1, [pc, #180]	@ (800c0d8 <tcp_create_segment+0x134>)
 800c024:	482a      	ldr	r0, [pc, #168]	@ (800c0d0 <tcp_create_segment+0x12c>)
 800c026:	f004 fbab 	bl	8010780 <printf>
  seg->len = p->tot_len - optlen;
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	891a      	ldrh	r2, [r3, #8]
 800c02e:	7dfb      	ldrb	r3, [r7, #23]
 800c030:	b29b      	uxth	r3, r3
 800c032:	1ad3      	subs	r3, r2, r3
 800c034:	b29a      	uxth	r2, r3
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c03a:	2114      	movs	r1, #20
 800c03c:	68b8      	ldr	r0, [r7, #8]
 800c03e:	f7fb fd2b 	bl	8007a98 <pbuf_add_header>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d004      	beq.n	800c052 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c048:	6938      	ldr	r0, [r7, #16]
 800c04a:	f7fd f8d2 	bl	80091f2 <tcp_seg_free>
    return NULL;
 800c04e:	2300      	movs	r3, #0
 800c050:	e036      	b.n	800c0c0 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	685a      	ldr	r2, [r3, #4]
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	8ada      	ldrh	r2, [r3, #22]
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	68dc      	ldr	r4, [r3, #12]
 800c064:	4610      	mov	r0, r2
 800c066:	f7fa fa4f 	bl	8006508 <lwip_htons>
 800c06a:	4603      	mov	r3, r0
 800c06c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	8b1a      	ldrh	r2, [r3, #24]
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	68dc      	ldr	r4, [r3, #12]
 800c076:	4610      	mov	r0, r2
 800c078:	f7fa fa46 	bl	8006508 <lwip_htons>
 800c07c:	4603      	mov	r3, r0
 800c07e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	68dc      	ldr	r4, [r3, #12]
 800c084:	6838      	ldr	r0, [r7, #0]
 800c086:	f7fa fa54 	bl	8006532 <lwip_htonl>
 800c08a:	4603      	mov	r3, r0
 800c08c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c08e:	7dfb      	ldrb	r3, [r7, #23]
 800c090:	089b      	lsrs	r3, r3, #2
 800c092:	b2db      	uxtb	r3, r3
 800c094:	3305      	adds	r3, #5
 800c096:	b29b      	uxth	r3, r3
 800c098:	031b      	lsls	r3, r3, #12
 800c09a:	b29a      	uxth	r2, r3
 800c09c:	79fb      	ldrb	r3, [r7, #7]
 800c09e:	b29b      	uxth	r3, r3
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	b29a      	uxth	r2, r3
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	68dc      	ldr	r4, [r3, #12]
 800c0a8:	4610      	mov	r0, r2
 800c0aa:	f7fa fa2d 	bl	8006508 <lwip_htons>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	68db      	ldr	r3, [r3, #12]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	749a      	strb	r2, [r3, #18]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	74da      	strb	r2, [r3, #19]
  return seg;
 800c0be:	693b      	ldr	r3, [r7, #16]
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	371c      	adds	r7, #28
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd90      	pop	{r4, r7, pc}
 800c0c8:	08016744 	.word	0x08016744
 800c0cc:	08016778 	.word	0x08016778
 800c0d0:	08016798 	.word	0x08016798
 800c0d4:	080167c0 	.word	0x080167c0
 800c0d8:	080167e4 	.word	0x080167e4

0800c0dc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c0dc:	b590      	push	{r4, r7, lr}
 800c0de:	b08b      	sub	sp, #44	@ 0x2c
 800c0e0:	af02      	add	r7, sp, #8
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	61fb      	str	r3, [r7, #28]
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d106      	bne.n	800c108 <tcp_split_unsent_seg+0x2c>
 800c0fa:	4b95      	ldr	r3, [pc, #596]	@ (800c350 <tcp_split_unsent_seg+0x274>)
 800c0fc:	f240 324b 	movw	r2, #843	@ 0x34b
 800c100:	4994      	ldr	r1, [pc, #592]	@ (800c354 <tcp_split_unsent_seg+0x278>)
 800c102:	4895      	ldr	r0, [pc, #596]	@ (800c358 <tcp_split_unsent_seg+0x27c>)
 800c104:	f004 fb3c 	bl	8010780 <printf>

  useg = pcb->unsent;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c10c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d102      	bne.n	800c11a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c114:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c118:	e116      	b.n	800c348 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c11a:	887b      	ldrh	r3, [r7, #2]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d109      	bne.n	800c134 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c120:	4b8b      	ldr	r3, [pc, #556]	@ (800c350 <tcp_split_unsent_seg+0x274>)
 800c122:	f240 3253 	movw	r2, #851	@ 0x353
 800c126:	498d      	ldr	r1, [pc, #564]	@ (800c35c <tcp_split_unsent_seg+0x280>)
 800c128:	488b      	ldr	r0, [pc, #556]	@ (800c358 <tcp_split_unsent_seg+0x27c>)
 800c12a:	f004 fb29 	bl	8010780 <printf>
    return ERR_VAL;
 800c12e:	f06f 0305 	mvn.w	r3, #5
 800c132:	e109      	b.n	800c348 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	891b      	ldrh	r3, [r3, #8]
 800c138:	887a      	ldrh	r2, [r7, #2]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d301      	bcc.n	800c142 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c13e:	2300      	movs	r3, #0
 800c140:	e102      	b.n	800c348 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c146:	887a      	ldrh	r2, [r7, #2]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d906      	bls.n	800c15a <tcp_split_unsent_seg+0x7e>
 800c14c:	4b80      	ldr	r3, [pc, #512]	@ (800c350 <tcp_split_unsent_seg+0x274>)
 800c14e:	f240 325b 	movw	r2, #859	@ 0x35b
 800c152:	4983      	ldr	r1, [pc, #524]	@ (800c360 <tcp_split_unsent_seg+0x284>)
 800c154:	4880      	ldr	r0, [pc, #512]	@ (800c358 <tcp_split_unsent_seg+0x27c>)
 800c156:	f004 fb13 	bl	8010780 <printf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	891b      	ldrh	r3, [r3, #8]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d106      	bne.n	800c170 <tcp_split_unsent_seg+0x94>
 800c162:	4b7b      	ldr	r3, [pc, #492]	@ (800c350 <tcp_split_unsent_seg+0x274>)
 800c164:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800c168:	497e      	ldr	r1, [pc, #504]	@ (800c364 <tcp_split_unsent_seg+0x288>)
 800c16a:	487b      	ldr	r0, [pc, #492]	@ (800c358 <tcp_split_unsent_seg+0x27c>)
 800c16c:	f004 fb08 	bl	8010780 <printf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	7a9b      	ldrb	r3, [r3, #10]
 800c174:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c176:	7bfb      	ldrb	r3, [r7, #15]
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	f003 0304 	and.w	r3, r3, #4
 800c180:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	891a      	ldrh	r2, [r3, #8]
 800c186:	887b      	ldrh	r3, [r7, #2]
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c18c:	7bbb      	ldrb	r3, [r7, #14]
 800c18e:	b29a      	uxth	r2, r3
 800c190:	89bb      	ldrh	r3, [r7, #12]
 800c192:	4413      	add	r3, r2
 800c194:	b29b      	uxth	r3, r3
 800c196:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c19a:	4619      	mov	r1, r3
 800c19c:	2036      	movs	r0, #54	@ 0x36
 800c19e:	f7fb fa2d 	bl	80075fc <pbuf_alloc>
 800c1a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	f000 80b7 	beq.w	800c31a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	891a      	ldrh	r2, [r3, #8]
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	891b      	ldrh	r3, [r3, #8]
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	b29a      	uxth	r2, r3
 800c1ba:	887b      	ldrh	r3, [r7, #2]
 800c1bc:	4413      	add	r3, r2
 800c1be:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	6858      	ldr	r0, [r3, #4]
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	685a      	ldr	r2, [r3, #4]
 800c1c8:	7bbb      	ldrb	r3, [r7, #14]
 800c1ca:	18d1      	adds	r1, r2, r3
 800c1cc:	897b      	ldrh	r3, [r7, #10]
 800c1ce:	89ba      	ldrh	r2, [r7, #12]
 800c1d0:	f7fb fef2 	bl	8007fb8 <pbuf_copy_partial>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	89bb      	ldrh	r3, [r7, #12]
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	f040 809f 	bne.w	800c31e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	899b      	ldrh	r3, [r3, #12]
 800c1e6:	b29b      	uxth	r3, r3
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7fa f98d 	bl	8006508 <lwip_htons>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c1f6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c1fc:	7efb      	ldrb	r3, [r7, #27]
 800c1fe:	f003 0308 	and.w	r3, r3, #8
 800c202:	2b00      	cmp	r3, #0
 800c204:	d007      	beq.n	800c216 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c206:	7efb      	ldrb	r3, [r7, #27]
 800c208:	f023 0308 	bic.w	r3, r3, #8
 800c20c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c20e:	7ebb      	ldrb	r3, [r7, #26]
 800c210:	f043 0308 	orr.w	r3, r3, #8
 800c214:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c216:	7efb      	ldrb	r3, [r7, #27]
 800c218:	f003 0301 	and.w	r3, r3, #1
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d007      	beq.n	800c230 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c220:	7efb      	ldrb	r3, [r7, #27]
 800c222:	f023 0301 	bic.w	r3, r3, #1
 800c226:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c228:	7ebb      	ldrb	r3, [r7, #26]
 800c22a:	f043 0301 	orr.w	r3, r3, #1
 800c22e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	4618      	mov	r0, r3
 800c238:	f7fa f97b 	bl	8006532 <lwip_htonl>
 800c23c:	4602      	mov	r2, r0
 800c23e:	887b      	ldrh	r3, [r7, #2]
 800c240:	18d1      	adds	r1, r2, r3
 800c242:	7eba      	ldrb	r2, [r7, #26]
 800c244:	7bfb      	ldrb	r3, [r7, #15]
 800c246:	9300      	str	r3, [sp, #0]
 800c248:	460b      	mov	r3, r1
 800c24a:	6939      	ldr	r1, [r7, #16]
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f7ff fea9 	bl	800bfa4 <tcp_create_segment>
 800c252:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c254:	69fb      	ldr	r3, [r7, #28]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d063      	beq.n	800c322 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fb fd38 	bl	8007cd4 <pbuf_clen>
 800c264:	4603      	mov	r3, r0
 800c266:	461a      	mov	r2, r3
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c26e:	1a9b      	subs	r3, r3, r2
 800c270:	b29a      	uxth	r2, r3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	6858      	ldr	r0, [r3, #4]
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	891a      	ldrh	r2, [r3, #8]
 800c282:	89bb      	ldrh	r3, [r7, #12]
 800c284:	1ad3      	subs	r3, r2, r3
 800c286:	b29b      	uxth	r3, r3
 800c288:	4619      	mov	r1, r3
 800c28a:	f7fb fb15 	bl	80078b8 <pbuf_realloc>
  useg->len -= remainder;
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	891a      	ldrh	r2, [r3, #8]
 800c292:	89bb      	ldrh	r3, [r7, #12]
 800c294:	1ad3      	subs	r3, r2, r3
 800c296:	b29a      	uxth	r2, r3
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	68db      	ldr	r3, [r3, #12]
 800c2a0:	899b      	ldrh	r3, [r3, #12]
 800c2a2:	b29c      	uxth	r4, r3
 800c2a4:	7efb      	ldrb	r3, [r7, #27]
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7fa f92d 	bl	8006508 <lwip_htons>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	68db      	ldr	r3, [r3, #12]
 800c2b6:	4322      	orrs	r2, r4
 800c2b8:	b292      	uxth	r2, r2
 800c2ba:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7fb fd07 	bl	8007cd4 <pbuf_clen>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c2d0:	4413      	add	r3, r2
 800c2d2:	b29a      	uxth	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7fb fcf8 	bl	8007cd4 <pbuf_clen>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c2ee:	4413      	add	r3, r2
 800c2f0:	b29a      	uxth	r2, r3
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	681a      	ldr	r2, [r3, #0]
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	69fa      	ldr	r2, [r7, #28]
 800c304:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d103      	bne.n	800c316 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2200      	movs	r2, #0
 800c312:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c316:	2300      	movs	r3, #0
 800c318:	e016      	b.n	800c348 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c31a:	bf00      	nop
 800c31c:	e002      	b.n	800c324 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c31e:	bf00      	nop
 800c320:	e000      	b.n	800c324 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c322:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d006      	beq.n	800c338 <tcp_split_unsent_seg+0x25c>
 800c32a:	4b09      	ldr	r3, [pc, #36]	@ (800c350 <tcp_split_unsent_seg+0x274>)
 800c32c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800c330:	490d      	ldr	r1, [pc, #52]	@ (800c368 <tcp_split_unsent_seg+0x28c>)
 800c332:	4809      	ldr	r0, [pc, #36]	@ (800c358 <tcp_split_unsent_seg+0x27c>)
 800c334:	f004 fa24 	bl	8010780 <printf>
  if (p != NULL) {
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d002      	beq.n	800c344 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c33e:	6938      	ldr	r0, [r7, #16]
 800c340:	f7fb fc40 	bl	8007bc4 <pbuf_free>
  }

  return ERR_MEM;
 800c344:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3724      	adds	r7, #36	@ 0x24
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd90      	pop	{r4, r7, pc}
 800c350:	08016744 	.word	0x08016744
 800c354:	08016ad8 	.word	0x08016ad8
 800c358:	08016798 	.word	0x08016798
 800c35c:	08016afc 	.word	0x08016afc
 800c360:	08016b20 	.word	0x08016b20
 800c364:	08016b30 	.word	0x08016b30
 800c368:	08016b40 	.word	0x08016b40

0800c36c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c36c:	b590      	push	{r4, r7, lr}
 800c36e:	b085      	sub	sp, #20
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d106      	bne.n	800c388 <tcp_send_fin+0x1c>
 800c37a:	4b21      	ldr	r3, [pc, #132]	@ (800c400 <tcp_send_fin+0x94>)
 800c37c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800c380:	4920      	ldr	r1, [pc, #128]	@ (800c404 <tcp_send_fin+0x98>)
 800c382:	4821      	ldr	r0, [pc, #132]	@ (800c408 <tcp_send_fin+0x9c>)
 800c384:	f004 f9fc 	bl	8010780 <printf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d02e      	beq.n	800c3ee <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c394:	60fb      	str	r3, [r7, #12]
 800c396:	e002      	b.n	800c39e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d1f8      	bne.n	800c398 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	899b      	ldrh	r3, [r3, #12]
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fa f8aa 	bl	8006508 <lwip_htons>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	f003 0307 	and.w	r3, r3, #7
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d116      	bne.n	800c3ee <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	899b      	ldrh	r3, [r3, #12]
 800c3c6:	b29c      	uxth	r4, r3
 800c3c8:	2001      	movs	r0, #1
 800c3ca:	f7fa f89d 	bl	8006508 <lwip_htons>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	68db      	ldr	r3, [r3, #12]
 800c3d6:	4322      	orrs	r2, r4
 800c3d8:	b292      	uxth	r2, r2
 800c3da:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	8b5b      	ldrh	r3, [r3, #26]
 800c3e0:	f043 0320 	orr.w	r3, r3, #32
 800c3e4:	b29a      	uxth	r2, r3
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	e004      	b.n	800c3f8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c3ee:	2101      	movs	r1, #1
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 f80b 	bl	800c40c <tcp_enqueue_flags>
 800c3f6:	4603      	mov	r3, r0
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3714      	adds	r7, #20
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd90      	pop	{r4, r7, pc}
 800c400:	08016744 	.word	0x08016744
 800c404:	08016b4c 	.word	0x08016b4c
 800c408:	08016798 	.word	0x08016798

0800c40c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b08a      	sub	sp, #40	@ 0x28
 800c410:	af02      	add	r7, sp, #8
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	460b      	mov	r3, r1
 800c416:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c418:	2300      	movs	r3, #0
 800c41a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c41c:	2300      	movs	r3, #0
 800c41e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c420:	78fb      	ldrb	r3, [r7, #3]
 800c422:	f003 0303 	and.w	r3, r3, #3
 800c426:	2b00      	cmp	r3, #0
 800c428:	d106      	bne.n	800c438 <tcp_enqueue_flags+0x2c>
 800c42a:	4b67      	ldr	r3, [pc, #412]	@ (800c5c8 <tcp_enqueue_flags+0x1bc>)
 800c42c:	f240 4211 	movw	r2, #1041	@ 0x411
 800c430:	4966      	ldr	r1, [pc, #408]	@ (800c5cc <tcp_enqueue_flags+0x1c0>)
 800c432:	4867      	ldr	r0, [pc, #412]	@ (800c5d0 <tcp_enqueue_flags+0x1c4>)
 800c434:	f004 f9a4 	bl	8010780 <printf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d106      	bne.n	800c44c <tcp_enqueue_flags+0x40>
 800c43e:	4b62      	ldr	r3, [pc, #392]	@ (800c5c8 <tcp_enqueue_flags+0x1bc>)
 800c440:	f240 4213 	movw	r2, #1043	@ 0x413
 800c444:	4963      	ldr	r1, [pc, #396]	@ (800c5d4 <tcp_enqueue_flags+0x1c8>)
 800c446:	4862      	ldr	r0, [pc, #392]	@ (800c5d0 <tcp_enqueue_flags+0x1c4>)
 800c448:	f004 f99a 	bl	8010780 <printf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c44c:	78fb      	ldrb	r3, [r7, #3]
 800c44e:	f003 0302 	and.w	r3, r3, #2
 800c452:	2b00      	cmp	r3, #0
 800c454:	d001      	beq.n	800c45a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c456:	2301      	movs	r3, #1
 800c458:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c45a:	7ffb      	ldrb	r3, [r7, #31]
 800c45c:	009b      	lsls	r3, r3, #2
 800c45e:	b2db      	uxtb	r3, r3
 800c460:	f003 0304 	and.w	r3, r3, #4
 800c464:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c466:	7dfb      	ldrb	r3, [r7, #23]
 800c468:	b29b      	uxth	r3, r3
 800c46a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c46e:	4619      	mov	r1, r3
 800c470:	2036      	movs	r0, #54	@ 0x36
 800c472:	f7fb f8c3 	bl	80075fc <pbuf_alloc>
 800c476:	6138      	str	r0, [r7, #16]
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d109      	bne.n	800c492 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	8b5b      	ldrh	r3, [r3, #26]
 800c482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c486:	b29a      	uxth	r2, r3
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c48c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c490:	e095      	b.n	800c5be <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	895a      	ldrh	r2, [r3, #10]
 800c496:	7dfb      	ldrb	r3, [r7, #23]
 800c498:	b29b      	uxth	r3, r3
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d206      	bcs.n	800c4ac <tcp_enqueue_flags+0xa0>
 800c49e:	4b4a      	ldr	r3, [pc, #296]	@ (800c5c8 <tcp_enqueue_flags+0x1bc>)
 800c4a0:	f240 4239 	movw	r2, #1081	@ 0x439
 800c4a4:	494c      	ldr	r1, [pc, #304]	@ (800c5d8 <tcp_enqueue_flags+0x1cc>)
 800c4a6:	484a      	ldr	r0, [pc, #296]	@ (800c5d0 <tcp_enqueue_flags+0x1c4>)
 800c4a8:	f004 f96a 	bl	8010780 <printf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800c4b0:	78fa      	ldrb	r2, [r7, #3]
 800c4b2:	7ffb      	ldrb	r3, [r7, #31]
 800c4b4:	9300      	str	r3, [sp, #0]
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	6939      	ldr	r1, [r7, #16]
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f7ff fd72 	bl	800bfa4 <tcp_create_segment>
 800c4c0:	60f8      	str	r0, [r7, #12]
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d109      	bne.n	800c4dc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	8b5b      	ldrh	r3, [r3, #26]
 800c4cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4d0:	b29a      	uxth	r2, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c4d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c4da:	e070      	b.n	800c5be <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	68db      	ldr	r3, [r3, #12]
 800c4e0:	f003 0303 	and.w	r3, r3, #3
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d006      	beq.n	800c4f6 <tcp_enqueue_flags+0xea>
 800c4e8:	4b37      	ldr	r3, [pc, #220]	@ (800c5c8 <tcp_enqueue_flags+0x1bc>)
 800c4ea:	f240 4242 	movw	r2, #1090	@ 0x442
 800c4ee:	493b      	ldr	r1, [pc, #236]	@ (800c5dc <tcp_enqueue_flags+0x1d0>)
 800c4f0:	4837      	ldr	r0, [pc, #220]	@ (800c5d0 <tcp_enqueue_flags+0x1c4>)
 800c4f2:	f004 f945 	bl	8010780 <printf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	891b      	ldrh	r3, [r3, #8]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d006      	beq.n	800c50c <tcp_enqueue_flags+0x100>
 800c4fe:	4b32      	ldr	r3, [pc, #200]	@ (800c5c8 <tcp_enqueue_flags+0x1bc>)
 800c500:	f240 4243 	movw	r2, #1091	@ 0x443
 800c504:	4936      	ldr	r1, [pc, #216]	@ (800c5e0 <tcp_enqueue_flags+0x1d4>)
 800c506:	4832      	ldr	r0, [pc, #200]	@ (800c5d0 <tcp_enqueue_flags+0x1c4>)
 800c508:	f004 f93a 	bl	8010780 <printf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c510:	2b00      	cmp	r3, #0
 800c512:	d103      	bne.n	800c51c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c51a:	e00d      	b.n	800c538 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c520:	61bb      	str	r3, [r7, #24]
 800c522:	e002      	b.n	800c52a <tcp_enqueue_flags+0x11e>
 800c524:	69bb      	ldr	r3, [r7, #24]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	61bb      	str	r3, [r7, #24]
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1f8      	bne.n	800c524 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c532:	69bb      	ldr	r3, [r7, #24]
 800c534:	68fa      	ldr	r2, [r7, #12]
 800c536:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c540:	78fb      	ldrb	r3, [r7, #3]
 800c542:	f003 0302 	and.w	r3, r3, #2
 800c546:	2b00      	cmp	r3, #0
 800c548:	d104      	bne.n	800c554 <tcp_enqueue_flags+0x148>
 800c54a:	78fb      	ldrb	r3, [r7, #3]
 800c54c:	f003 0301 	and.w	r3, r3, #1
 800c550:	2b00      	cmp	r3, #0
 800c552:	d004      	beq.n	800c55e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c558:	1c5a      	adds	r2, r3, #1
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c55e:	78fb      	ldrb	r3, [r7, #3]
 800c560:	f003 0301 	and.w	r3, r3, #1
 800c564:	2b00      	cmp	r3, #0
 800c566:	d006      	beq.n	800c576 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	8b5b      	ldrh	r3, [r3, #26]
 800c56c:	f043 0320 	orr.w	r3, r3, #32
 800c570:	b29a      	uxth	r2, r3
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7fb fbaa 	bl	8007cd4 <pbuf_clen>
 800c580:	4603      	mov	r3, r0
 800c582:	461a      	mov	r2, r3
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c58a:	4413      	add	r3, r2
 800c58c:	b29a      	uxth	r2, r3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00e      	beq.n	800c5bc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d10a      	bne.n	800c5bc <tcp_enqueue_flags+0x1b0>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d106      	bne.n	800c5bc <tcp_enqueue_flags+0x1b0>
 800c5ae:	4b06      	ldr	r3, [pc, #24]	@ (800c5c8 <tcp_enqueue_flags+0x1bc>)
 800c5b0:	f240 4265 	movw	r2, #1125	@ 0x465
 800c5b4:	490b      	ldr	r1, [pc, #44]	@ (800c5e4 <tcp_enqueue_flags+0x1d8>)
 800c5b6:	4806      	ldr	r0, [pc, #24]	@ (800c5d0 <tcp_enqueue_flags+0x1c4>)
 800c5b8:	f004 f8e2 	bl	8010780 <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c5bc:	2300      	movs	r3, #0
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3720      	adds	r7, #32
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	08016744 	.word	0x08016744
 800c5cc:	08016b68 	.word	0x08016b68
 800c5d0:	08016798 	.word	0x08016798
 800c5d4:	08016bc0 	.word	0x08016bc0
 800c5d8:	08016be0 	.word	0x08016be0
 800c5dc:	08016c1c 	.word	0x08016c1c
 800c5e0:	08016c34 	.word	0x08016c34
 800c5e4:	08016c60 	.word	0x08016c60

0800c5e8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c5e8:	b5b0      	push	{r4, r5, r7, lr}
 800c5ea:	b08a      	sub	sp, #40	@ 0x28
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d106      	bne.n	800c604 <tcp_output+0x1c>
 800c5f6:	4b8a      	ldr	r3, [pc, #552]	@ (800c820 <tcp_output+0x238>)
 800c5f8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800c5fc:	4989      	ldr	r1, [pc, #548]	@ (800c824 <tcp_output+0x23c>)
 800c5fe:	488a      	ldr	r0, [pc, #552]	@ (800c828 <tcp_output+0x240>)
 800c600:	f004 f8be 	bl	8010780 <printf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	7d1b      	ldrb	r3, [r3, #20]
 800c608:	2b01      	cmp	r3, #1
 800c60a:	d106      	bne.n	800c61a <tcp_output+0x32>
 800c60c:	4b84      	ldr	r3, [pc, #528]	@ (800c820 <tcp_output+0x238>)
 800c60e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800c612:	4986      	ldr	r1, [pc, #536]	@ (800c82c <tcp_output+0x244>)
 800c614:	4884      	ldr	r0, [pc, #528]	@ (800c828 <tcp_output+0x240>)
 800c616:	f004 f8b3 	bl	8010780 <printf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c61a:	4b85      	ldr	r3, [pc, #532]	@ (800c830 <tcp_output+0x248>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	429a      	cmp	r2, r3
 800c622:	d101      	bne.n	800c628 <tcp_output+0x40>
    return ERR_OK;
 800c624:	2300      	movs	r3, #0
 800c626:	e1ce      	b.n	800c9c6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c634:	4293      	cmp	r3, r2
 800c636:	bf28      	it	cs
 800c638:	4613      	movcs	r3, r2
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c642:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800c644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c646:	2b00      	cmp	r3, #0
 800c648:	d10b      	bne.n	800c662 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	8b5b      	ldrh	r3, [r3, #26]
 800c64e:	f003 0302 	and.w	r3, r3, #2
 800c652:	2b00      	cmp	r3, #0
 800c654:	f000 81aa 	beq.w	800c9ac <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 fdcb 	bl	800d1f4 <tcp_send_empty_ack>
 800c65e:	4603      	mov	r3, r0
 800c660:	e1b1      	b.n	800c9c6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c662:	6879      	ldr	r1, [r7, #4]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	3304      	adds	r3, #4
 800c668:	461a      	mov	r2, r3
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f7ff fc7e 	bl	800bf6c <tcp_route>
 800c670:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d102      	bne.n	800c67e <tcp_output+0x96>
    return ERR_RTE;
 800c678:	f06f 0303 	mvn.w	r3, #3
 800c67c:	e1a3      	b.n	800c9c6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d003      	beq.n	800c68c <tcp_output+0xa4>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d111      	bne.n	800c6b0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d002      	beq.n	800c698 <tcp_output+0xb0>
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	3304      	adds	r3, #4
 800c696:	e000      	b.n	800c69a <tcp_output+0xb2>
 800c698:	2300      	movs	r3, #0
 800c69a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d102      	bne.n	800c6a8 <tcp_output+0xc0>
      return ERR_RTE;
 800c6a2:	f06f 0303 	mvn.w	r3, #3
 800c6a6:	e18e      	b.n	800c9c6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	681a      	ldr	r2, [r3, #0]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b2:	68db      	ldr	r3, [r3, #12]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7f9 ff3b 	bl	8006532 <lwip_htonl>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6c2:	1ad3      	subs	r3, r2, r3
 800c6c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6c6:	8912      	ldrh	r2, [r2, #8]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	69ba      	ldr	r2, [r7, #24]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d227      	bcs.n	800c720 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	69bb      	ldr	r3, [r7, #24]
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d114      	bne.n	800c708 <tcp_output+0x120>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d110      	bne.n	800c708 <tcp_output+0x120>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d10b      	bne.n	800c708 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	8b5b      	ldrh	r3, [r3, #26]
 800c70c:	f003 0302 	and.w	r3, r3, #2
 800c710:	2b00      	cmp	r3, #0
 800c712:	f000 814d 	beq.w	800c9b0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 fd6c 	bl	800d1f4 <tcp_send_empty_ack>
 800c71c:	4603      	mov	r3, r0
 800c71e:	e152      	b.n	800c9c6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c72c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c72e:	6a3b      	ldr	r3, [r7, #32]
 800c730:	2b00      	cmp	r3, #0
 800c732:	f000 811c 	beq.w	800c96e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c736:	e002      	b.n	800c73e <tcp_output+0x156>
 800c738:	6a3b      	ldr	r3, [r7, #32]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	623b      	str	r3, [r7, #32]
 800c73e:	6a3b      	ldr	r3, [r7, #32]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d1f8      	bne.n	800c738 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c746:	e112      	b.n	800c96e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	899b      	ldrh	r3, [r3, #12]
 800c74e:	b29b      	uxth	r3, r3
 800c750:	4618      	mov	r0, r3
 800c752:	f7f9 fed9 	bl	8006508 <lwip_htons>
 800c756:	4603      	mov	r3, r0
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	f003 0304 	and.w	r3, r3, #4
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d006      	beq.n	800c770 <tcp_output+0x188>
 800c762:	4b2f      	ldr	r3, [pc, #188]	@ (800c820 <tcp_output+0x238>)
 800c764:	f240 5236 	movw	r2, #1334	@ 0x536
 800c768:	4932      	ldr	r1, [pc, #200]	@ (800c834 <tcp_output+0x24c>)
 800c76a:	482f      	ldr	r0, [pc, #188]	@ (800c828 <tcp_output+0x240>)
 800c76c:	f004 f808 	bl	8010780 <printf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c774:	2b00      	cmp	r3, #0
 800c776:	d01f      	beq.n	800c7b8 <tcp_output+0x1d0>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	8b5b      	ldrh	r3, [r3, #26]
 800c77c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800c780:	2b00      	cmp	r3, #0
 800c782:	d119      	bne.n	800c7b8 <tcp_output+0x1d0>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d00b      	beq.n	800c7a4 <tcp_output+0x1bc>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d110      	bne.n	800c7b8 <tcp_output+0x1d0>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c79a:	891a      	ldrh	r2, [r3, #8]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d209      	bcs.n	800c7b8 <tcp_output+0x1d0>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d004      	beq.n	800c7b8 <tcp_output+0x1d0>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c7b4:	2b08      	cmp	r3, #8
 800c7b6:	d901      	bls.n	800c7bc <tcp_output+0x1d4>
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	e000      	b.n	800c7be <tcp_output+0x1d6>
 800c7bc:	2300      	movs	r3, #0
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d106      	bne.n	800c7d0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	8b5b      	ldrh	r3, [r3, #26]
 800c7c6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	f000 80e4 	beq.w	800c998 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	7d1b      	ldrb	r3, [r3, #20]
 800c7d4:	2b02      	cmp	r3, #2
 800c7d6:	d00d      	beq.n	800c7f4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7da:	68db      	ldr	r3, [r3, #12]
 800c7dc:	899b      	ldrh	r3, [r3, #12]
 800c7de:	b29c      	uxth	r4, r3
 800c7e0:	2010      	movs	r0, #16
 800c7e2:	f7f9 fe91 	bl	8006508 <lwip_htons>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ec:	68db      	ldr	r3, [r3, #12]
 800c7ee:	4322      	orrs	r2, r4
 800c7f0:	b292      	uxth	r2, r2
 800c7f2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c7f4:	697a      	ldr	r2, [r7, #20]
 800c7f6:	6879      	ldr	r1, [r7, #4]
 800c7f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c7fa:	f000 f909 	bl	800ca10 <tcp_output_segment>
 800c7fe:	4603      	mov	r3, r0
 800c800:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d016      	beq.n	800c838 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	8b5b      	ldrh	r3, [r3, #26]
 800c80e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c812:	b29a      	uxth	r2, r3
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	835a      	strh	r2, [r3, #26]
      return err;
 800c818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c81c:	e0d3      	b.n	800c9c6 <tcp_output+0x3de>
 800c81e:	bf00      	nop
 800c820:	08016744 	.word	0x08016744
 800c824:	08016c88 	.word	0x08016c88
 800c828:	08016798 	.word	0x08016798
 800c82c:	08016ca0 	.word	0x08016ca0
 800c830:	20008ab0 	.word	0x20008ab0
 800c834:	08016cc8 	.word	0x08016cc8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c83a:	681a      	ldr	r2, [r3, #0]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	7d1b      	ldrb	r3, [r3, #20]
 800c844:	2b02      	cmp	r3, #2
 800c846:	d006      	beq.n	800c856 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	8b5b      	ldrh	r3, [r3, #26]
 800c84c:	f023 0303 	bic.w	r3, r3, #3
 800c850:	b29a      	uxth	r2, r3
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c858:	68db      	ldr	r3, [r3, #12]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7f9 fe68 	bl	8006532 <lwip_htonl>
 800c862:	4604      	mov	r4, r0
 800c864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c866:	891b      	ldrh	r3, [r3, #8]
 800c868:	461d      	mov	r5, r3
 800c86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86c:	68db      	ldr	r3, [r3, #12]
 800c86e:	899b      	ldrh	r3, [r3, #12]
 800c870:	b29b      	uxth	r3, r3
 800c872:	4618      	mov	r0, r3
 800c874:	f7f9 fe48 	bl	8006508 <lwip_htons>
 800c878:	4603      	mov	r3, r0
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	f003 0303 	and.w	r3, r3, #3
 800c880:	2b00      	cmp	r3, #0
 800c882:	d001      	beq.n	800c888 <tcp_output+0x2a0>
 800c884:	2301      	movs	r3, #1
 800c886:	e000      	b.n	800c88a <tcp_output+0x2a2>
 800c888:	2300      	movs	r3, #0
 800c88a:	442b      	add	r3, r5
 800c88c:	4423      	add	r3, r4
 800c88e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	1ad3      	subs	r3, r2, r3
 800c898:	2b00      	cmp	r3, #0
 800c89a:	da02      	bge.n	800c8a2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	68ba      	ldr	r2, [r7, #8]
 800c8a0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a4:	891b      	ldrh	r3, [r3, #8]
 800c8a6:	461c      	mov	r4, r3
 800c8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8aa:	68db      	ldr	r3, [r3, #12]
 800c8ac:	899b      	ldrh	r3, [r3, #12]
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7f9 fe29 	bl	8006508 <lwip_htons>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	f003 0303 	and.w	r3, r3, #3
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d001      	beq.n	800c8c6 <tcp_output+0x2de>
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	e000      	b.n	800c8c8 <tcp_output+0x2e0>
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	4423      	add	r3, r4
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d049      	beq.n	800c962 <tcp_output+0x37a>
      seg->next = NULL;
 800c8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d105      	bne.n	800c8e8 <tcp_output+0x300>
        pcb->unacked = seg;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8e0:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800c8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e4:	623b      	str	r3, [r7, #32]
 800c8e6:	e03f      	b.n	800c968 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f7f9 fe1f 	bl	8006532 <lwip_htonl>
 800c8f4:	4604      	mov	r4, r0
 800c8f6:	6a3b      	ldr	r3, [r7, #32]
 800c8f8:	68db      	ldr	r3, [r3, #12]
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7f9 fe18 	bl	8006532 <lwip_htonl>
 800c902:	4603      	mov	r3, r0
 800c904:	1ae3      	subs	r3, r4, r3
 800c906:	2b00      	cmp	r3, #0
 800c908:	da24      	bge.n	800c954 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	3370      	adds	r3, #112	@ 0x70
 800c90e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c910:	e002      	b.n	800c918 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d011      	beq.n	800c944 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	4618      	mov	r0, r3
 800c92a:	f7f9 fe02 	bl	8006532 <lwip_htonl>
 800c92e:	4604      	mov	r4, r0
 800c930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c932:	68db      	ldr	r3, [r3, #12]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	4618      	mov	r0, r3
 800c938:	f7f9 fdfb 	bl	8006532 <lwip_htonl>
 800c93c:	4603      	mov	r3, r0
 800c93e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c940:	2b00      	cmp	r3, #0
 800c942:	dbe6      	blt.n	800c912 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800c944:	69fb      	ldr	r3, [r7, #28]
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c94a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c950:	601a      	str	r2, [r3, #0]
 800c952:	e009      	b.n	800c968 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c954:	6a3b      	ldr	r3, [r7, #32]
 800c956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c958:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c95a:	6a3b      	ldr	r3, [r7, #32]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	623b      	str	r3, [r7, #32]
 800c960:	e002      	b.n	800c968 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c962:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c964:	f7fc fc45 	bl	80091f2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c96c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800c96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c970:	2b00      	cmp	r3, #0
 800c972:	d012      	beq.n	800c99a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c976:	68db      	ldr	r3, [r3, #12]
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7f9 fdd9 	bl	8006532 <lwip_htonl>
 800c980:	4602      	mov	r2, r0
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c986:	1ad3      	subs	r3, r2, r3
 800c988:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c98a:	8912      	ldrh	r2, [r2, #8]
 800c98c:	4413      	add	r3, r2
  while (seg != NULL &&
 800c98e:	69ba      	ldr	r2, [r7, #24]
 800c990:	429a      	cmp	r2, r3
 800c992:	f4bf aed9 	bcs.w	800c748 <tcp_output+0x160>
 800c996:	e000      	b.n	800c99a <tcp_output+0x3b2>
      break;
 800c998:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d108      	bne.n	800c9b4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800c9aa:	e004      	b.n	800c9b6 <tcp_output+0x3ce>
    goto output_done;
 800c9ac:	bf00      	nop
 800c9ae:	e002      	b.n	800c9b6 <tcp_output+0x3ce>
    goto output_done;
 800c9b0:	bf00      	nop
 800c9b2:	e000      	b.n	800c9b6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c9b4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	8b5b      	ldrh	r3, [r3, #26]
 800c9ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c9be:	b29a      	uxth	r2, r3
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3728      	adds	r7, #40	@ 0x28
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bdb0      	pop	{r4, r5, r7, pc}
 800c9ce:	bf00      	nop

0800c9d0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d106      	bne.n	800c9ec <tcp_output_segment_busy+0x1c>
 800c9de:	4b09      	ldr	r3, [pc, #36]	@ (800ca04 <tcp_output_segment_busy+0x34>)
 800c9e0:	f240 529a 	movw	r2, #1434	@ 0x59a
 800c9e4:	4908      	ldr	r1, [pc, #32]	@ (800ca08 <tcp_output_segment_busy+0x38>)
 800c9e6:	4809      	ldr	r0, [pc, #36]	@ (800ca0c <tcp_output_segment_busy+0x3c>)
 800c9e8:	f003 feca 	bl	8010780 <printf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	7b9b      	ldrb	r3, [r3, #14]
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d001      	beq.n	800c9fa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	e000      	b.n	800c9fc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3708      	adds	r7, #8
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	08016744 	.word	0x08016744
 800ca08:	08016ce0 	.word	0x08016ce0
 800ca0c:	08016798 	.word	0x08016798

0800ca10 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ca10:	b5b0      	push	{r4, r5, r7, lr}
 800ca12:	b08c      	sub	sp, #48	@ 0x30
 800ca14:	af04      	add	r7, sp, #16
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d106      	bne.n	800ca30 <tcp_output_segment+0x20>
 800ca22:	4b64      	ldr	r3, [pc, #400]	@ (800cbb4 <tcp_output_segment+0x1a4>)
 800ca24:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800ca28:	4963      	ldr	r1, [pc, #396]	@ (800cbb8 <tcp_output_segment+0x1a8>)
 800ca2a:	4864      	ldr	r0, [pc, #400]	@ (800cbbc <tcp_output_segment+0x1ac>)
 800ca2c:	f003 fea8 	bl	8010780 <printf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d106      	bne.n	800ca44 <tcp_output_segment+0x34>
 800ca36:	4b5f      	ldr	r3, [pc, #380]	@ (800cbb4 <tcp_output_segment+0x1a4>)
 800ca38:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800ca3c:	4960      	ldr	r1, [pc, #384]	@ (800cbc0 <tcp_output_segment+0x1b0>)
 800ca3e:	485f      	ldr	r0, [pc, #380]	@ (800cbbc <tcp_output_segment+0x1ac>)
 800ca40:	f003 fe9e 	bl	8010780 <printf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d106      	bne.n	800ca58 <tcp_output_segment+0x48>
 800ca4a:	4b5a      	ldr	r3, [pc, #360]	@ (800cbb4 <tcp_output_segment+0x1a4>)
 800ca4c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800ca50:	495c      	ldr	r1, [pc, #368]	@ (800cbc4 <tcp_output_segment+0x1b4>)
 800ca52:	485a      	ldr	r0, [pc, #360]	@ (800cbbc <tcp_output_segment+0x1ac>)
 800ca54:	f003 fe94 	bl	8010780 <printf>

  if (tcp_output_segment_busy(seg)) {
 800ca58:	68f8      	ldr	r0, [r7, #12]
 800ca5a:	f7ff ffb9 	bl	800c9d0 <tcp_output_segment_busy>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d001      	beq.n	800ca68 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ca64:	2300      	movs	r3, #0
 800ca66:	e0a1      	b.n	800cbac <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	68dc      	ldr	r4, [r3, #12]
 800ca70:	4610      	mov	r0, r2
 800ca72:	f7f9 fd5e 	bl	8006532 <lwip_htonl>
 800ca76:	4603      	mov	r3, r0
 800ca78:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	68dc      	ldr	r4, [r3, #12]
 800ca82:	4610      	mov	r0, r2
 800ca84:	f7f9 fd40 	bl	8006508 <lwip_htons>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca90:	68ba      	ldr	r2, [r7, #8]
 800ca92:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800ca94:	441a      	add	r2, r3
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	68db      	ldr	r3, [r3, #12]
 800ca9e:	3314      	adds	r3, #20
 800caa0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	7a9b      	ldrb	r3, [r3, #10]
 800caa6:	f003 0301 	and.w	r3, r3, #1
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d015      	beq.n	800cada <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	3304      	adds	r3, #4
 800cab2:	461a      	mov	r2, r3
 800cab4:	6879      	ldr	r1, [r7, #4]
 800cab6:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800caba:	f7fc fe91 	bl	80097e0 <tcp_eff_send_mss_netif>
 800cabe:	4603      	mov	r3, r0
 800cac0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800cac2:	8b7b      	ldrh	r3, [r7, #26]
 800cac4:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800cac8:	4618      	mov	r0, r3
 800caca:	f7f9 fd32 	bl	8006532 <lwip_htonl>
 800cace:	4602      	mov	r2, r0
 800cad0:	69fb      	ldr	r3, [r7, #28]
 800cad2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	3304      	adds	r3, #4
 800cad8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	da02      	bge.n	800caea <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	2200      	movs	r2, #0
 800cae8:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d10c      	bne.n	800cb0c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800caf2:	4b35      	ldr	r3, [pc, #212]	@ (800cbc8 <tcp_output_segment+0x1b8>)
 800caf4:	681a      	ldr	r2, [r3, #0]
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7f9 fd16 	bl	8006532 <lwip_htonl>
 800cb06:	4602      	mov	r2, r0
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	68da      	ldr	r2, [r3, #12]
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	1ad3      	subs	r3, r2, r3
 800cb18:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	8959      	ldrh	r1, [r3, #10]
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	8b3a      	ldrh	r2, [r7, #24]
 800cb26:	1a8a      	subs	r2, r1, r2
 800cb28:	b292      	uxth	r2, r2
 800cb2a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	8919      	ldrh	r1, [r3, #8]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	8b3a      	ldrh	r2, [r7, #24]
 800cb38:	1a8a      	subs	r2, r1, r2
 800cb3a:	b292      	uxth	r2, r2
 800cb3c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	68fa      	ldr	r2, [r7, #12]
 800cb44:	68d2      	ldr	r2, [r2, #12]
 800cb46:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	741a      	strb	r2, [r3, #16]
 800cb50:	2200      	movs	r2, #0
 800cb52:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	68da      	ldr	r2, [r3, #12]
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	7a9b      	ldrb	r3, [r3, #10]
 800cb5c:	f003 0301 	and.w	r3, r3, #1
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d001      	beq.n	800cb68 <tcp_output_segment+0x158>
 800cb64:	2318      	movs	r3, #24
 800cb66:	e000      	b.n	800cb6a <tcp_output_segment+0x15a>
 800cb68:	2314      	movs	r3, #20
 800cb6a:	4413      	add	r3, r2
 800cb6c:	69fa      	ldr	r2, [r7, #28]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d006      	beq.n	800cb80 <tcp_output_segment+0x170>
 800cb72:	4b10      	ldr	r3, [pc, #64]	@ (800cbb4 <tcp_output_segment+0x1a4>)
 800cb74:	f240 621c 	movw	r2, #1564	@ 0x61c
 800cb78:	4914      	ldr	r1, [pc, #80]	@ (800cbcc <tcp_output_segment+0x1bc>)
 800cb7a:	4810      	ldr	r0, [pc, #64]	@ (800cbbc <tcp_output_segment+0x1ac>)
 800cb7c:	f003 fe00 	bl	8010780 <printf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	6858      	ldr	r0, [r3, #4]
 800cb84:	68b9      	ldr	r1, [r7, #8]
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	1d1c      	adds	r4, r3, #4
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	7add      	ldrb	r5, [r3, #11]
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	7a9b      	ldrb	r3, [r3, #10]
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	9202      	str	r2, [sp, #8]
 800cb96:	2206      	movs	r2, #6
 800cb98:	9201      	str	r2, [sp, #4]
 800cb9a:	9300      	str	r3, [sp, #0]
 800cb9c:	462b      	mov	r3, r5
 800cb9e:	4622      	mov	r2, r4
 800cba0:	f002 fce2 	bl	800f568 <ip4_output_if>
 800cba4:	4603      	mov	r3, r0
 800cba6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800cba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3720      	adds	r7, #32
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bdb0      	pop	{r4, r5, r7, pc}
 800cbb4:	08016744 	.word	0x08016744
 800cbb8:	08016d08 	.word	0x08016d08
 800cbbc:	08016798 	.word	0x08016798
 800cbc0:	08016d28 	.word	0x08016d28
 800cbc4:	08016d48 	.word	0x08016d48
 800cbc8:	20008a64 	.word	0x20008a64
 800cbcc:	08016d6c 	.word	0x08016d6c

0800cbd0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800cbd0:	b5b0      	push	{r4, r5, r7, lr}
 800cbd2:	b084      	sub	sp, #16
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d106      	bne.n	800cbec <tcp_rexmit_rto_prepare+0x1c>
 800cbde:	4b31      	ldr	r3, [pc, #196]	@ (800cca4 <tcp_rexmit_rto_prepare+0xd4>)
 800cbe0:	f240 6263 	movw	r2, #1635	@ 0x663
 800cbe4:	4930      	ldr	r1, [pc, #192]	@ (800cca8 <tcp_rexmit_rto_prepare+0xd8>)
 800cbe6:	4831      	ldr	r0, [pc, #196]	@ (800ccac <tcp_rexmit_rto_prepare+0xdc>)
 800cbe8:	f003 fdca 	bl	8010780 <printf>

  if (pcb->unacked == NULL) {
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d102      	bne.n	800cbfa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800cbf4:	f06f 0305 	mvn.w	r3, #5
 800cbf8:	e050      	b.n	800cc9c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cbfe:	60fb      	str	r3, [r7, #12]
 800cc00:	e00b      	b.n	800cc1a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800cc02:	68f8      	ldr	r0, [r7, #12]
 800cc04:	f7ff fee4 	bl	800c9d0 <tcp_output_segment_busy>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d002      	beq.n	800cc14 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800cc0e:	f06f 0305 	mvn.w	r3, #5
 800cc12:	e043      	b.n	800cc9c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	60fb      	str	r3, [r7, #12]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d1ef      	bne.n	800cc02 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800cc22:	68f8      	ldr	r0, [r7, #12]
 800cc24:	f7ff fed4 	bl	800c9d0 <tcp_output_segment_busy>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d002      	beq.n	800cc34 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800cc2e:	f06f 0305 	mvn.w	r3, #5
 800cc32:	e033      	b.n	800cc9c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	8b5b      	ldrh	r3, [r3, #26]
 800cc4e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7f9 fc67 	bl	8006532 <lwip_htonl>
 800cc64:	4604      	mov	r4, r0
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	891b      	ldrh	r3, [r3, #8]
 800cc6a:	461d      	mov	r5, r3
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	68db      	ldr	r3, [r3, #12]
 800cc70:	899b      	ldrh	r3, [r3, #12]
 800cc72:	b29b      	uxth	r3, r3
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7f9 fc47 	bl	8006508 <lwip_htons>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	f003 0303 	and.w	r3, r3, #3
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d001      	beq.n	800cc8a <tcp_rexmit_rto_prepare+0xba>
 800cc86:	2301      	movs	r3, #1
 800cc88:	e000      	b.n	800cc8c <tcp_rexmit_rto_prepare+0xbc>
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	442b      	add	r3, r5
 800cc8e:	18e2      	adds	r2, r4, r3
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2200      	movs	r2, #0
 800cc98:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bdb0      	pop	{r4, r5, r7, pc}
 800cca4:	08016744 	.word	0x08016744
 800cca8:	08016d80 	.word	0x08016d80
 800ccac:	08016798 	.word	0x08016798

0800ccb0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d106      	bne.n	800cccc <tcp_rexmit_rto_commit+0x1c>
 800ccbe:	4b0d      	ldr	r3, [pc, #52]	@ (800ccf4 <tcp_rexmit_rto_commit+0x44>)
 800ccc0:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ccc4:	490c      	ldr	r1, [pc, #48]	@ (800ccf8 <tcp_rexmit_rto_commit+0x48>)
 800ccc6:	480d      	ldr	r0, [pc, #52]	@ (800ccfc <tcp_rexmit_rto_commit+0x4c>)
 800ccc8:	f003 fd5a 	bl	8010780 <printf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ccd2:	2bff      	cmp	r3, #255	@ 0xff
 800ccd4:	d007      	beq.n	800cce6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ccdc:	3301      	adds	r3, #1
 800ccde:	b2da      	uxtb	r2, r3
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f7ff fc7e 	bl	800c5e8 <tcp_output>
}
 800ccec:	bf00      	nop
 800ccee:	3708      	adds	r7, #8
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	08016744 	.word	0x08016744
 800ccf8:	08016da4 	.word	0x08016da4
 800ccfc:	08016798 	.word	0x08016798

0800cd00 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d106      	bne.n	800cd1c <tcp_rexmit_rto+0x1c>
 800cd0e:	4b0a      	ldr	r3, [pc, #40]	@ (800cd38 <tcp_rexmit_rto+0x38>)
 800cd10:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800cd14:	4909      	ldr	r1, [pc, #36]	@ (800cd3c <tcp_rexmit_rto+0x3c>)
 800cd16:	480a      	ldr	r0, [pc, #40]	@ (800cd40 <tcp_rexmit_rto+0x40>)
 800cd18:	f003 fd32 	bl	8010780 <printf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f7ff ff57 	bl	800cbd0 <tcp_rexmit_rto_prepare>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d102      	bne.n	800cd2e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f7ff ffc1 	bl	800ccb0 <tcp_rexmit_rto_commit>
  }
}
 800cd2e:	bf00      	nop
 800cd30:	3708      	adds	r7, #8
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	08016744 	.word	0x08016744
 800cd3c:	08016dc8 	.word	0x08016dc8
 800cd40:	08016798 	.word	0x08016798

0800cd44 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800cd44:	b590      	push	{r4, r7, lr}
 800cd46:	b085      	sub	sp, #20
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d106      	bne.n	800cd60 <tcp_rexmit+0x1c>
 800cd52:	4b2f      	ldr	r3, [pc, #188]	@ (800ce10 <tcp_rexmit+0xcc>)
 800cd54:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800cd58:	492e      	ldr	r1, [pc, #184]	@ (800ce14 <tcp_rexmit+0xd0>)
 800cd5a:	482f      	ldr	r0, [pc, #188]	@ (800ce18 <tcp_rexmit+0xd4>)
 800cd5c:	f003 fd10 	bl	8010780 <printf>

  if (pcb->unacked == NULL) {
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d102      	bne.n	800cd6e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800cd68:	f06f 0305 	mvn.w	r3, #5
 800cd6c:	e04c      	b.n	800ce08 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd72:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800cd74:	68b8      	ldr	r0, [r7, #8]
 800cd76:	f7ff fe2b 	bl	800c9d0 <tcp_output_segment_busy>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d002      	beq.n	800cd86 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800cd80:	f06f 0305 	mvn.w	r3, #5
 800cd84:	e040      	b.n	800ce08 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	681a      	ldr	r2, [r3, #0]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	336c      	adds	r3, #108	@ 0x6c
 800cd92:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cd94:	e002      	b.n	800cd9c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d011      	beq.n	800cdc8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	68db      	ldr	r3, [r3, #12]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	4618      	mov	r0, r3
 800cdae:	f7f9 fbc0 	bl	8006532 <lwip_htonl>
 800cdb2:	4604      	mov	r4, r0
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	68db      	ldr	r3, [r3, #12]
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7f9 fbb9 	bl	8006532 <lwip_htonl>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	dbe6      	blt.n	800cd96 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681a      	ldr	r2, [r3, #0]
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	68ba      	ldr	r2, [r7, #8]
 800cdd4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d103      	bne.n	800cde6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2200      	movs	r2, #0
 800cde2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cdec:	2bff      	cmp	r3, #255	@ 0xff
 800cdee:	d007      	beq.n	800ce00 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	b2da      	uxtb	r2, r3
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2200      	movs	r2, #0
 800ce04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ce06:	2300      	movs	r3, #0
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3714      	adds	r7, #20
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd90      	pop	{r4, r7, pc}
 800ce10:	08016744 	.word	0x08016744
 800ce14:	08016de4 	.word	0x08016de4
 800ce18:	08016798 	.word	0x08016798

0800ce1c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d106      	bne.n	800ce38 <tcp_rexmit_fast+0x1c>
 800ce2a:	4b2a      	ldr	r3, [pc, #168]	@ (800ced4 <tcp_rexmit_fast+0xb8>)
 800ce2c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800ce30:	4929      	ldr	r1, [pc, #164]	@ (800ced8 <tcp_rexmit_fast+0xbc>)
 800ce32:	482a      	ldr	r0, [pc, #168]	@ (800cedc <tcp_rexmit_fast+0xc0>)
 800ce34:	f003 fca4 	bl	8010780 <printf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d045      	beq.n	800cecc <tcp_rexmit_fast+0xb0>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	8b5b      	ldrh	r3, [r3, #26]
 800ce44:	f003 0304 	and.w	r3, r3, #4
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d13f      	bne.n	800cecc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f7ff ff79 	bl	800cd44 <tcp_rexmit>
 800ce52:	4603      	mov	r3, r0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d139      	bne.n	800cecc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ce64:	4293      	cmp	r3, r2
 800ce66:	bf28      	it	cs
 800ce68:	4613      	movcs	r3, r2
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	da00      	bge.n	800ce72 <tcp_rexmit_fast+0x56>
 800ce70:	3301      	adds	r3, #1
 800ce72:	105b      	asrs	r3, r3, #1
 800ce74:	b29a      	uxth	r2, r3
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ce82:	461a      	mov	r2, r3
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce88:	005b      	lsls	r3, r3, #1
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d206      	bcs.n	800ce9c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce92:	005b      	lsls	r3, r3, #1
 800ce94:	b29a      	uxth	r2, r3
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cea6:	4619      	mov	r1, r3
 800cea8:	0049      	lsls	r1, r1, #1
 800ceaa:	440b      	add	r3, r1
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	4413      	add	r3, r2
 800ceb0:	b29a      	uxth	r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	8b5b      	ldrh	r3, [r3, #26]
 800cebc:	f043 0304 	orr.w	r3, r3, #4
 800cec0:	b29a      	uxth	r2, r3
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2200      	movs	r2, #0
 800ceca:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800cecc:	bf00      	nop
 800cece:	3708      	adds	r7, #8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	08016744 	.word	0x08016744
 800ced8:	08016dfc 	.word	0x08016dfc
 800cedc:	08016798 	.word	0x08016798

0800cee0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b086      	sub	sp, #24
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	60f8      	str	r0, [r7, #12]
 800cee8:	607b      	str	r3, [r7, #4]
 800ceea:	460b      	mov	r3, r1
 800ceec:	817b      	strh	r3, [r7, #10]
 800ceee:	4613      	mov	r3, r2
 800cef0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cef2:	897a      	ldrh	r2, [r7, #10]
 800cef4:	893b      	ldrh	r3, [r7, #8]
 800cef6:	4413      	add	r3, r2
 800cef8:	b29b      	uxth	r3, r3
 800cefa:	3314      	adds	r3, #20
 800cefc:	b29b      	uxth	r3, r3
 800cefe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cf02:	4619      	mov	r1, r3
 800cf04:	2022      	movs	r0, #34	@ 0x22
 800cf06:	f7fa fb79 	bl	80075fc <pbuf_alloc>
 800cf0a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d04d      	beq.n	800cfae <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cf12:	897b      	ldrh	r3, [r7, #10]
 800cf14:	3313      	adds	r3, #19
 800cf16:	697a      	ldr	r2, [r7, #20]
 800cf18:	8952      	ldrh	r2, [r2, #10]
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	db06      	blt.n	800cf2c <tcp_output_alloc_header_common+0x4c>
 800cf1e:	4b26      	ldr	r3, [pc, #152]	@ (800cfb8 <tcp_output_alloc_header_common+0xd8>)
 800cf20:	f240 7223 	movw	r2, #1827	@ 0x723
 800cf24:	4925      	ldr	r1, [pc, #148]	@ (800cfbc <tcp_output_alloc_header_common+0xdc>)
 800cf26:	4826      	ldr	r0, [pc, #152]	@ (800cfc0 <tcp_output_alloc_header_common+0xe0>)
 800cf28:	f003 fc2a 	bl	8010780 <printf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	685b      	ldr	r3, [r3, #4]
 800cf30:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800cf32:	8c3b      	ldrh	r3, [r7, #32]
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7f9 fae7 	bl	8006508 <lwip_htons>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800cf42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7f9 fadf 	bl	8006508 <lwip_htons>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	461a      	mov	r2, r3
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800cf58:	68f8      	ldr	r0, [r7, #12]
 800cf5a:	f7f9 faea 	bl	8006532 <lwip_htonl>
 800cf5e:	4602      	mov	r2, r0
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800cf64:	897b      	ldrh	r3, [r7, #10]
 800cf66:	089b      	lsrs	r3, r3, #2
 800cf68:	b29b      	uxth	r3, r3
 800cf6a:	3305      	adds	r3, #5
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	031b      	lsls	r3, r3, #12
 800cf70:	b29a      	uxth	r2, r3
 800cf72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	b29b      	uxth	r3, r3
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7f9 fac3 	bl	8006508 <lwip_htons>
 800cf82:	4603      	mov	r3, r0
 800cf84:	461a      	mov	r2, r3
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800cf8a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7f9 fabb 	bl	8006508 <lwip_htons>
 800cf92:	4603      	mov	r3, r0
 800cf94:	461a      	mov	r2, r3
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	741a      	strb	r2, [r3, #16]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	749a      	strb	r2, [r3, #18]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800cfae:	697b      	ldr	r3, [r7, #20]
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3718      	adds	r7, #24
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	08016744 	.word	0x08016744
 800cfbc:	08016e1c 	.word	0x08016e1c
 800cfc0:	08016798 	.word	0x08016798

0800cfc4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800cfc4:	b5b0      	push	{r4, r5, r7, lr}
 800cfc6:	b08a      	sub	sp, #40	@ 0x28
 800cfc8:	af04      	add	r7, sp, #16
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	607b      	str	r3, [r7, #4]
 800cfce:	460b      	mov	r3, r1
 800cfd0:	817b      	strh	r3, [r7, #10]
 800cfd2:	4613      	mov	r3, r2
 800cfd4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d106      	bne.n	800cfea <tcp_output_alloc_header+0x26>
 800cfdc:	4b15      	ldr	r3, [pc, #84]	@ (800d034 <tcp_output_alloc_header+0x70>)
 800cfde:	f240 7242 	movw	r2, #1858	@ 0x742
 800cfe2:	4915      	ldr	r1, [pc, #84]	@ (800d038 <tcp_output_alloc_header+0x74>)
 800cfe4:	4815      	ldr	r0, [pc, #84]	@ (800d03c <tcp_output_alloc_header+0x78>)
 800cfe6:	f003 fbcb 	bl	8010780 <printf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	8adb      	ldrh	r3, [r3, #22]
 800cff2:	68fa      	ldr	r2, [r7, #12]
 800cff4:	8b12      	ldrh	r2, [r2, #24]
 800cff6:	68f9      	ldr	r1, [r7, #12]
 800cff8:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800cffa:	893d      	ldrh	r5, [r7, #8]
 800cffc:	897c      	ldrh	r4, [r7, #10]
 800cffe:	9103      	str	r1, [sp, #12]
 800d000:	2110      	movs	r1, #16
 800d002:	9102      	str	r1, [sp, #8]
 800d004:	9201      	str	r2, [sp, #4]
 800d006:	9300      	str	r3, [sp, #0]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	462a      	mov	r2, r5
 800d00c:	4621      	mov	r1, r4
 800d00e:	f7ff ff67 	bl	800cee0 <tcp_output_alloc_header_common>
 800d012:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d006      	beq.n	800d028 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d022:	441a      	add	r2, r3
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800d028:	697b      	ldr	r3, [r7, #20]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3718      	adds	r7, #24
 800d02e:	46bd      	mov	sp, r7
 800d030:	bdb0      	pop	{r4, r5, r7, pc}
 800d032:	bf00      	nop
 800d034:	08016744 	.word	0x08016744
 800d038:	08016e4c 	.word	0x08016e4c
 800d03c:	08016798 	.word	0x08016798

0800d040 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b088      	sub	sp, #32
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	4611      	mov	r1, r2
 800d04c:	461a      	mov	r2, r3
 800d04e:	460b      	mov	r3, r1
 800d050:	71fb      	strb	r3, [r7, #7]
 800d052:	4613      	mov	r3, r2
 800d054:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d056:	2300      	movs	r3, #0
 800d058:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d106      	bne.n	800d06e <tcp_output_fill_options+0x2e>
 800d060:	4b12      	ldr	r3, [pc, #72]	@ (800d0ac <tcp_output_fill_options+0x6c>)
 800d062:	f240 7256 	movw	r2, #1878	@ 0x756
 800d066:	4912      	ldr	r1, [pc, #72]	@ (800d0b0 <tcp_output_fill_options+0x70>)
 800d068:	4812      	ldr	r0, [pc, #72]	@ (800d0b4 <tcp_output_fill_options+0x74>)
 800d06a:	f003 fb89 	bl	8010780 <printf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	3314      	adds	r3, #20
 800d078:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d07a:	8bfb      	ldrh	r3, [r7, #30]
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	461a      	mov	r2, r3
 800d080:	79fb      	ldrb	r3, [r7, #7]
 800d082:	009b      	lsls	r3, r3, #2
 800d084:	f003 0304 	and.w	r3, r3, #4
 800d088:	4413      	add	r3, r2
 800d08a:	3314      	adds	r3, #20
 800d08c:	69ba      	ldr	r2, [r7, #24]
 800d08e:	4413      	add	r3, r2
 800d090:	697a      	ldr	r2, [r7, #20]
 800d092:	429a      	cmp	r2, r3
 800d094:	d006      	beq.n	800d0a4 <tcp_output_fill_options+0x64>
 800d096:	4b05      	ldr	r3, [pc, #20]	@ (800d0ac <tcp_output_fill_options+0x6c>)
 800d098:	f240 7275 	movw	r2, #1909	@ 0x775
 800d09c:	4906      	ldr	r1, [pc, #24]	@ (800d0b8 <tcp_output_fill_options+0x78>)
 800d09e:	4805      	ldr	r0, [pc, #20]	@ (800d0b4 <tcp_output_fill_options+0x74>)
 800d0a0:	f003 fb6e 	bl	8010780 <printf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d0a4:	bf00      	nop
 800d0a6:	3720      	adds	r7, #32
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}
 800d0ac:	08016744 	.word	0x08016744
 800d0b0:	08016e74 	.word	0x08016e74
 800d0b4:	08016798 	.word	0x08016798
 800d0b8:	08016d6c 	.word	0x08016d6c

0800d0bc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b08a      	sub	sp, #40	@ 0x28
 800d0c0:	af04      	add	r7, sp, #16
 800d0c2:	60f8      	str	r0, [r7, #12]
 800d0c4:	60b9      	str	r1, [r7, #8]
 800d0c6:	607a      	str	r2, [r7, #4]
 800d0c8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d106      	bne.n	800d0de <tcp_output_control_segment+0x22>
 800d0d0:	4b1c      	ldr	r3, [pc, #112]	@ (800d144 <tcp_output_control_segment+0x88>)
 800d0d2:	f240 7287 	movw	r2, #1927	@ 0x787
 800d0d6:	491c      	ldr	r1, [pc, #112]	@ (800d148 <tcp_output_control_segment+0x8c>)
 800d0d8:	481c      	ldr	r0, [pc, #112]	@ (800d14c <tcp_output_control_segment+0x90>)
 800d0da:	f003 fb51 	bl	8010780 <printf>

  netif = tcp_route(pcb, src, dst);
 800d0de:	683a      	ldr	r2, [r7, #0]
 800d0e0:	6879      	ldr	r1, [r7, #4]
 800d0e2:	68f8      	ldr	r0, [r7, #12]
 800d0e4:	f7fe ff42 	bl	800bf6c <tcp_route>
 800d0e8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d102      	bne.n	800d0f6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d0f0:	23fc      	movs	r3, #252	@ 0xfc
 800d0f2:	75fb      	strb	r3, [r7, #23]
 800d0f4:	e01c      	b.n	800d130 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d006      	beq.n	800d10a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	7adb      	ldrb	r3, [r3, #11]
 800d100:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	7a9b      	ldrb	r3, [r3, #10]
 800d106:	757b      	strb	r3, [r7, #21]
 800d108:	e003      	b.n	800d112 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d10a:	23ff      	movs	r3, #255	@ 0xff
 800d10c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d10e:	2300      	movs	r3, #0
 800d110:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d112:	7dba      	ldrb	r2, [r7, #22]
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	9302      	str	r3, [sp, #8]
 800d118:	2306      	movs	r3, #6
 800d11a:	9301      	str	r3, [sp, #4]
 800d11c:	7d7b      	ldrb	r3, [r7, #21]
 800d11e:	9300      	str	r3, [sp, #0]
 800d120:	4613      	mov	r3, r2
 800d122:	683a      	ldr	r2, [r7, #0]
 800d124:	6879      	ldr	r1, [r7, #4]
 800d126:	68b8      	ldr	r0, [r7, #8]
 800d128:	f002 fa1e 	bl	800f568 <ip4_output_if>
 800d12c:	4603      	mov	r3, r0
 800d12e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d130:	68b8      	ldr	r0, [r7, #8]
 800d132:	f7fa fd47 	bl	8007bc4 <pbuf_free>
  return err;
 800d136:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3718      	adds	r7, #24
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	08016744 	.word	0x08016744
 800d148:	08016e9c 	.word	0x08016e9c
 800d14c:	08016798 	.word	0x08016798

0800d150 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d150:	b590      	push	{r4, r7, lr}
 800d152:	b08b      	sub	sp, #44	@ 0x2c
 800d154:	af04      	add	r7, sp, #16
 800d156:	60f8      	str	r0, [r7, #12]
 800d158:	60b9      	str	r1, [r7, #8]
 800d15a:	607a      	str	r2, [r7, #4]
 800d15c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d106      	bne.n	800d172 <tcp_rst+0x22>
 800d164:	4b1f      	ldr	r3, [pc, #124]	@ (800d1e4 <tcp_rst+0x94>)
 800d166:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800d16a:	491f      	ldr	r1, [pc, #124]	@ (800d1e8 <tcp_rst+0x98>)
 800d16c:	481f      	ldr	r0, [pc, #124]	@ (800d1ec <tcp_rst+0x9c>)
 800d16e:	f003 fb07 	bl	8010780 <printf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d174:	2b00      	cmp	r3, #0
 800d176:	d106      	bne.n	800d186 <tcp_rst+0x36>
 800d178:	4b1a      	ldr	r3, [pc, #104]	@ (800d1e4 <tcp_rst+0x94>)
 800d17a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800d17e:	491c      	ldr	r1, [pc, #112]	@ (800d1f0 <tcp_rst+0xa0>)
 800d180:	481a      	ldr	r0, [pc, #104]	@ (800d1ec <tcp_rst+0x9c>)
 800d182:	f003 fafd 	bl	8010780 <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d186:	2300      	movs	r3, #0
 800d188:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d18a:	f246 0308 	movw	r3, #24584	@ 0x6008
 800d18e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d190:	7dfb      	ldrb	r3, [r7, #23]
 800d192:	b29c      	uxth	r4, r3
 800d194:	68b8      	ldr	r0, [r7, #8]
 800d196:	f7f9 f9cc 	bl	8006532 <lwip_htonl>
 800d19a:	4602      	mov	r2, r0
 800d19c:	8abb      	ldrh	r3, [r7, #20]
 800d19e:	9303      	str	r3, [sp, #12]
 800d1a0:	2314      	movs	r3, #20
 800d1a2:	9302      	str	r3, [sp, #8]
 800d1a4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d1a6:	9301      	str	r3, [sp, #4]
 800d1a8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d1aa:	9300      	str	r3, [sp, #0]
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	4621      	mov	r1, r4
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f7ff fe94 	bl	800cee0 <tcp_output_alloc_header_common>
 800d1b8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d00c      	beq.n	800d1da <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d1c0:	7dfb      	ldrb	r3, [r7, #23]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	6939      	ldr	r1, [r7, #16]
 800d1c6:	68f8      	ldr	r0, [r7, #12]
 800d1c8:	f7ff ff3a 	bl	800d040 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ce:	683a      	ldr	r2, [r7, #0]
 800d1d0:	6939      	ldr	r1, [r7, #16]
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	f7ff ff72 	bl	800d0bc <tcp_output_control_segment>
 800d1d8:	e000      	b.n	800d1dc <tcp_rst+0x8c>
    return;
 800d1da:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d1dc:	371c      	adds	r7, #28
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd90      	pop	{r4, r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	08016744 	.word	0x08016744
 800d1e8:	08016ec8 	.word	0x08016ec8
 800d1ec:	08016798 	.word	0x08016798
 800d1f0:	08016ee4 	.word	0x08016ee4

0800d1f4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d1f4:	b590      	push	{r4, r7, lr}
 800d1f6:	b087      	sub	sp, #28
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d200:	2300      	movs	r3, #0
 800d202:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d106      	bne.n	800d218 <tcp_send_empty_ack+0x24>
 800d20a:	4b28      	ldr	r3, [pc, #160]	@ (800d2ac <tcp_send_empty_ack+0xb8>)
 800d20c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800d210:	4927      	ldr	r1, [pc, #156]	@ (800d2b0 <tcp_send_empty_ack+0xbc>)
 800d212:	4828      	ldr	r0, [pc, #160]	@ (800d2b4 <tcp_send_empty_ack+0xc0>)
 800d214:	f003 fab4 	bl	8010780 <printf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d218:	7dfb      	ldrb	r3, [r7, #23]
 800d21a:	009b      	lsls	r3, r3, #2
 800d21c:	b2db      	uxtb	r3, r3
 800d21e:	f003 0304 	and.w	r3, r3, #4
 800d222:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d224:	7d7b      	ldrb	r3, [r7, #21]
 800d226:	b29c      	uxth	r4, r3
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d22c:	4618      	mov	r0, r3
 800d22e:	f7f9 f980 	bl	8006532 <lwip_htonl>
 800d232:	4603      	mov	r3, r0
 800d234:	2200      	movs	r2, #0
 800d236:	4621      	mov	r1, r4
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f7ff fec3 	bl	800cfc4 <tcp_output_alloc_header>
 800d23e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d109      	bne.n	800d25a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	8b5b      	ldrh	r3, [r3, #26]
 800d24a:	f043 0303 	orr.w	r3, r3, #3
 800d24e:	b29a      	uxth	r2, r3
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d254:	f06f 0301 	mvn.w	r3, #1
 800d258:	e023      	b.n	800d2a2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d25a:	7dbb      	ldrb	r3, [r7, #22]
 800d25c:	7dfa      	ldrb	r2, [r7, #23]
 800d25e:	6939      	ldr	r1, [r7, #16]
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f7ff feed 	bl	800d040 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d266:	687a      	ldr	r2, [r7, #4]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	3304      	adds	r3, #4
 800d26c:	6939      	ldr	r1, [r7, #16]
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f7ff ff24 	bl	800d0bc <tcp_output_control_segment>
 800d274:	4603      	mov	r3, r0
 800d276:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d007      	beq.n	800d290 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	8b5b      	ldrh	r3, [r3, #26]
 800d284:	f043 0303 	orr.w	r3, r3, #3
 800d288:	b29a      	uxth	r2, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	835a      	strh	r2, [r3, #26]
 800d28e:	e006      	b.n	800d29e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	8b5b      	ldrh	r3, [r3, #26]
 800d294:	f023 0303 	bic.w	r3, r3, #3
 800d298:	b29a      	uxth	r2, r3
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d29e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	371c      	adds	r7, #28
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd90      	pop	{r4, r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	08016744 	.word	0x08016744
 800d2b0:	08016f00 	.word	0x08016f00
 800d2b4:	08016798 	.word	0x08016798

0800d2b8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d2b8:	b590      	push	{r4, r7, lr}
 800d2ba:	b087      	sub	sp, #28
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d106      	bne.n	800d2d8 <tcp_keepalive+0x20>
 800d2ca:	4b18      	ldr	r3, [pc, #96]	@ (800d32c <tcp_keepalive+0x74>)
 800d2cc:	f640 0224 	movw	r2, #2084	@ 0x824
 800d2d0:	4917      	ldr	r1, [pc, #92]	@ (800d330 <tcp_keepalive+0x78>)
 800d2d2:	4818      	ldr	r0, [pc, #96]	@ (800d334 <tcp_keepalive+0x7c>)
 800d2d4:	f003 fa54 	bl	8010780 <printf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d2d8:	7dfb      	ldrb	r3, [r7, #23]
 800d2da:	b29c      	uxth	r4, r3
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2e0:	3b01      	subs	r3, #1
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7f9 f925 	bl	8006532 <lwip_htonl>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	4621      	mov	r1, r4
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f7ff fe68 	bl	800cfc4 <tcp_output_alloc_header>
 800d2f4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d102      	bne.n	800d302 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d2fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d300:	e010      	b.n	800d324 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d302:	7dfb      	ldrb	r3, [r7, #23]
 800d304:	2200      	movs	r2, #0
 800d306:	6939      	ldr	r1, [r7, #16]
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f7ff fe99 	bl	800d040 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	3304      	adds	r3, #4
 800d314:	6939      	ldr	r1, [r7, #16]
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f7ff fed0 	bl	800d0bc <tcp_output_control_segment>
 800d31c:	4603      	mov	r3, r0
 800d31e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d320:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d324:	4618      	mov	r0, r3
 800d326:	371c      	adds	r7, #28
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd90      	pop	{r4, r7, pc}
 800d32c:	08016744 	.word	0x08016744
 800d330:	08016f20 	.word	0x08016f20
 800d334:	08016798 	.word	0x08016798

0800d338 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d338:	b590      	push	{r4, r7, lr}
 800d33a:	b08b      	sub	sp, #44	@ 0x2c
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d340:	2300      	movs	r3, #0
 800d342:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d106      	bne.n	800d35a <tcp_zero_window_probe+0x22>
 800d34c:	4b4c      	ldr	r3, [pc, #304]	@ (800d480 <tcp_zero_window_probe+0x148>)
 800d34e:	f640 024f 	movw	r2, #2127	@ 0x84f
 800d352:	494c      	ldr	r1, [pc, #304]	@ (800d484 <tcp_zero_window_probe+0x14c>)
 800d354:	484c      	ldr	r0, [pc, #304]	@ (800d488 <tcp_zero_window_probe+0x150>)
 800d356:	f003 fa13 	bl	8010780 <printf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d35e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d360:	6a3b      	ldr	r3, [r7, #32]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d101      	bne.n	800d36a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d366:	2300      	movs	r3, #0
 800d368:	e086      	b.n	800d478 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d370:	2bff      	cmp	r3, #255	@ 0xff
 800d372:	d007      	beq.n	800d384 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d37a:	3301      	adds	r3, #1
 800d37c:	b2da      	uxtb	r2, r3
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d384:	6a3b      	ldr	r3, [r7, #32]
 800d386:	68db      	ldr	r3, [r3, #12]
 800d388:	899b      	ldrh	r3, [r3, #12]
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	4618      	mov	r0, r3
 800d38e:	f7f9 f8bb 	bl	8006508 <lwip_htons>
 800d392:	4603      	mov	r3, r0
 800d394:	b2db      	uxtb	r3, r3
 800d396:	f003 0301 	and.w	r3, r3, #1
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d005      	beq.n	800d3aa <tcp_zero_window_probe+0x72>
 800d39e:	6a3b      	ldr	r3, [r7, #32]
 800d3a0:	891b      	ldrh	r3, [r3, #8]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d101      	bne.n	800d3aa <tcp_zero_window_probe+0x72>
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	e000      	b.n	800d3ac <tcp_zero_window_probe+0x74>
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d3ae:	7ffb      	ldrb	r3, [r7, #31]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	bf0c      	ite	eq
 800d3b4:	2301      	moveq	r3, #1
 800d3b6:	2300      	movne	r3, #0
 800d3b8:	b2db      	uxtb	r3, r3
 800d3ba:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d3bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3c0:	b299      	uxth	r1, r3
 800d3c2:	6a3b      	ldr	r3, [r7, #32]
 800d3c4:	68db      	ldr	r3, [r3, #12]
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	8bba      	ldrh	r2, [r7, #28]
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f7ff fdfa 	bl	800cfc4 <tcp_output_alloc_header>
 800d3d0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d3d2:	69bb      	ldr	r3, [r7, #24]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d102      	bne.n	800d3de <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d3d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d3dc:	e04c      	b.n	800d478 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d3de:	69bb      	ldr	r3, [r7, #24]
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d3e4:	7ffb      	ldrb	r3, [r7, #31]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d011      	beq.n	800d40e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	899b      	ldrh	r3, [r3, #12]
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	b21b      	sxth	r3, r3
 800d3f2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d3f6:	b21c      	sxth	r4, r3
 800d3f8:	2011      	movs	r0, #17
 800d3fa:	f7f9 f885 	bl	8006508 <lwip_htons>
 800d3fe:	4603      	mov	r3, r0
 800d400:	b21b      	sxth	r3, r3
 800d402:	4323      	orrs	r3, r4
 800d404:	b21b      	sxth	r3, r3
 800d406:	b29a      	uxth	r2, r3
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	819a      	strh	r2, [r3, #12]
 800d40c:	e010      	b.n	800d430 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d40e:	69bb      	ldr	r3, [r7, #24]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	3314      	adds	r3, #20
 800d414:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d416:	6a3b      	ldr	r3, [r7, #32]
 800d418:	6858      	ldr	r0, [r3, #4]
 800d41a:	6a3b      	ldr	r3, [r7, #32]
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	891a      	ldrh	r2, [r3, #8]
 800d420:	6a3b      	ldr	r3, [r7, #32]
 800d422:	891b      	ldrh	r3, [r3, #8]
 800d424:	1ad3      	subs	r3, r2, r3
 800d426:	b29b      	uxth	r3, r3
 800d428:	2201      	movs	r2, #1
 800d42a:	6939      	ldr	r1, [r7, #16]
 800d42c:	f7fa fdc4 	bl	8007fb8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d430:	6a3b      	ldr	r3, [r7, #32]
 800d432:	68db      	ldr	r3, [r3, #12]
 800d434:	685b      	ldr	r3, [r3, #4]
 800d436:	4618      	mov	r0, r3
 800d438:	f7f9 f87b 	bl	8006532 <lwip_htonl>
 800d43c:	4603      	mov	r3, r0
 800d43e:	3301      	adds	r3, #1
 800d440:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	1ad3      	subs	r3, r2, r3
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	da02      	bge.n	800d454 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	68fa      	ldr	r2, [r7, #12]
 800d452:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d454:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d458:	2200      	movs	r2, #0
 800d45a:	69b9      	ldr	r1, [r7, #24]
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f7ff fdef 	bl	800d040 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	3304      	adds	r3, #4
 800d468:	69b9      	ldr	r1, [r7, #24]
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f7ff fe26 	bl	800d0bc <tcp_output_control_segment>
 800d470:	4603      	mov	r3, r0
 800d472:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d474:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d478:	4618      	mov	r0, r3
 800d47a:	372c      	adds	r7, #44	@ 0x2c
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd90      	pop	{r4, r7, pc}
 800d480:	08016744 	.word	0x08016744
 800d484:	08016f3c 	.word	0x08016f3c
 800d488:	08016798 	.word	0x08016798

0800d48c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d494:	f7fa ff10 	bl	80082b8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d498:	4b0a      	ldr	r3, [pc, #40]	@ (800d4c4 <tcpip_tcp_timer+0x38>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d103      	bne.n	800d4a8 <tcpip_tcp_timer+0x1c>
 800d4a0:	4b09      	ldr	r3, [pc, #36]	@ (800d4c8 <tcpip_tcp_timer+0x3c>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d005      	beq.n	800d4b4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	4908      	ldr	r1, [pc, #32]	@ (800d4cc <tcpip_tcp_timer+0x40>)
 800d4ac:	20fa      	movs	r0, #250	@ 0xfa
 800d4ae:	f000 f8f3 	bl	800d698 <sys_timeout>
 800d4b2:	e003      	b.n	800d4bc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d4b4:	4b06      	ldr	r3, [pc, #24]	@ (800d4d0 <tcpip_tcp_timer+0x44>)
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	601a      	str	r2, [r3, #0]
  }
}
 800d4ba:	bf00      	nop
 800d4bc:	bf00      	nop
 800d4be:	3708      	adds	r7, #8
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}
 800d4c4:	20008a70 	.word	0x20008a70
 800d4c8:	20008a74 	.word	0x20008a74
 800d4cc:	0800d48d 	.word	0x0800d48d
 800d4d0:	20008abc 	.word	0x20008abc

0800d4d4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d4d8:	4b0a      	ldr	r3, [pc, #40]	@ (800d504 <tcp_timer_needed+0x30>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d10f      	bne.n	800d500 <tcp_timer_needed+0x2c>
 800d4e0:	4b09      	ldr	r3, [pc, #36]	@ (800d508 <tcp_timer_needed+0x34>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d103      	bne.n	800d4f0 <tcp_timer_needed+0x1c>
 800d4e8:	4b08      	ldr	r3, [pc, #32]	@ (800d50c <tcp_timer_needed+0x38>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d007      	beq.n	800d500 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d4f0:	4b04      	ldr	r3, [pc, #16]	@ (800d504 <tcp_timer_needed+0x30>)
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	4905      	ldr	r1, [pc, #20]	@ (800d510 <tcp_timer_needed+0x3c>)
 800d4fa:	20fa      	movs	r0, #250	@ 0xfa
 800d4fc:	f000 f8cc 	bl	800d698 <sys_timeout>
  }
}
 800d500:	bf00      	nop
 800d502:	bd80      	pop	{r7, pc}
 800d504:	20008abc 	.word	0x20008abc
 800d508:	20008a70 	.word	0x20008a70
 800d50c:	20008a74 	.word	0x20008a74
 800d510:	0800d48d 	.word	0x0800d48d

0800d514 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b086      	sub	sp, #24
 800d518:	af00      	add	r7, sp, #0
 800d51a:	60f8      	str	r0, [r7, #12]
 800d51c:	60b9      	str	r1, [r7, #8]
 800d51e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d520:	2006      	movs	r0, #6
 800d522:	f7f9 fc69 	bl	8006df8 <memp_malloc>
 800d526:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d109      	bne.n	800d542 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d151      	bne.n	800d5d8 <sys_timeout_abs+0xc4>
 800d534:	4b2a      	ldr	r3, [pc, #168]	@ (800d5e0 <sys_timeout_abs+0xcc>)
 800d536:	22be      	movs	r2, #190	@ 0xbe
 800d538:	492a      	ldr	r1, [pc, #168]	@ (800d5e4 <sys_timeout_abs+0xd0>)
 800d53a:	482b      	ldr	r0, [pc, #172]	@ (800d5e8 <sys_timeout_abs+0xd4>)
 800d53c:	f003 f920 	bl	8010780 <printf>
    return;
 800d540:	e04a      	b.n	800d5d8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	2200      	movs	r2, #0
 800d546:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	68ba      	ldr	r2, [r7, #8]
 800d54c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	68fa      	ldr	r2, [r7, #12]
 800d558:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d55a:	4b24      	ldr	r3, [pc, #144]	@ (800d5ec <sys_timeout_abs+0xd8>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d103      	bne.n	800d56a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d562:	4a22      	ldr	r2, [pc, #136]	@ (800d5ec <sys_timeout_abs+0xd8>)
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	6013      	str	r3, [r2, #0]
    return;
 800d568:	e037      	b.n	800d5da <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	685a      	ldr	r2, [r3, #4]
 800d56e:	4b1f      	ldr	r3, [pc, #124]	@ (800d5ec <sys_timeout_abs+0xd8>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	685b      	ldr	r3, [r3, #4]
 800d574:	1ad3      	subs	r3, r2, r3
 800d576:	0fdb      	lsrs	r3, r3, #31
 800d578:	f003 0301 	and.w	r3, r3, #1
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d007      	beq.n	800d592 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d582:	4b1a      	ldr	r3, [pc, #104]	@ (800d5ec <sys_timeout_abs+0xd8>)
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d58a:	4a18      	ldr	r2, [pc, #96]	@ (800d5ec <sys_timeout_abs+0xd8>)
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	6013      	str	r3, [r2, #0]
 800d590:	e023      	b.n	800d5da <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d592:	4b16      	ldr	r3, [pc, #88]	@ (800d5ec <sys_timeout_abs+0xd8>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	617b      	str	r3, [r7, #20]
 800d598:	e01a      	b.n	800d5d0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d00b      	beq.n	800d5ba <sys_timeout_abs+0xa6>
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	685a      	ldr	r2, [r3, #4]
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	1ad3      	subs	r3, r2, r3
 800d5ae:	0fdb      	lsrs	r3, r3, #31
 800d5b0:	f003 0301 	and.w	r3, r3, #1
 800d5b4:	b2db      	uxtb	r3, r3
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d007      	beq.n	800d5ca <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	681a      	ldr	r2, [r3, #0]
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	693a      	ldr	r2, [r7, #16]
 800d5c6:	601a      	str	r2, [r3, #0]
        break;
 800d5c8:	e007      	b.n	800d5da <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	617b      	str	r3, [r7, #20]
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d1e1      	bne.n	800d59a <sys_timeout_abs+0x86>
 800d5d6:	e000      	b.n	800d5da <sys_timeout_abs+0xc6>
    return;
 800d5d8:	bf00      	nop
      }
    }
  }
}
 800d5da:	3718      	adds	r7, #24
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	08016f60 	.word	0x08016f60
 800d5e4:	08016f94 	.word	0x08016f94
 800d5e8:	08016fd4 	.word	0x08016fd4
 800d5ec:	20008ab4 	.word	0x20008ab4

0800d5f0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b086      	sub	sp, #24
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	4798      	blx	r3

  now = sys_now();
 800d602:	f7f8 fd75 	bl	80060f0 <sys_now>
 800d606:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	4b0f      	ldr	r3, [pc, #60]	@ (800d64c <lwip_cyclic_timer+0x5c>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4413      	add	r3, r2
 800d612:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d614:	68fa      	ldr	r2, [r7, #12]
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	1ad3      	subs	r3, r2, r3
 800d61a:	0fdb      	lsrs	r3, r3, #31
 800d61c:	f003 0301 	and.w	r3, r3, #1
 800d620:	b2db      	uxtb	r3, r3
 800d622:	2b00      	cmp	r3, #0
 800d624:	d009      	beq.n	800d63a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	4413      	add	r3, r2
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	4907      	ldr	r1, [pc, #28]	@ (800d650 <lwip_cyclic_timer+0x60>)
 800d632:	4618      	mov	r0, r3
 800d634:	f7ff ff6e 	bl	800d514 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d638:	e004      	b.n	800d644 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	4904      	ldr	r1, [pc, #16]	@ (800d650 <lwip_cyclic_timer+0x60>)
 800d63e:	68f8      	ldr	r0, [r7, #12]
 800d640:	f7ff ff68 	bl	800d514 <sys_timeout_abs>
}
 800d644:	bf00      	nop
 800d646:	3718      	adds	r7, #24
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	20008ab8 	.word	0x20008ab8
 800d650:	0800d5f1 	.word	0x0800d5f1

0800d654 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d65a:	2301      	movs	r3, #1
 800d65c:	607b      	str	r3, [r7, #4]
 800d65e:	e00e      	b.n	800d67e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d660:	4a0b      	ldr	r2, [pc, #44]	@ (800d690 <sys_timeouts_init+0x3c>)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	00db      	lsls	r3, r3, #3
 800d66c:	4a08      	ldr	r2, [pc, #32]	@ (800d690 <sys_timeouts_init+0x3c>)
 800d66e:	4413      	add	r3, r2
 800d670:	461a      	mov	r2, r3
 800d672:	4908      	ldr	r1, [pc, #32]	@ (800d694 <sys_timeouts_init+0x40>)
 800d674:	f000 f810 	bl	800d698 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	3301      	adds	r3, #1
 800d67c:	607b      	str	r3, [r7, #4]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2b02      	cmp	r3, #2
 800d682:	d9ed      	bls.n	800d660 <sys_timeouts_init+0xc>
  }
}
 800d684:	bf00      	nop
 800d686:	bf00      	nop
 800d688:	3708      	adds	r7, #8
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	08017b44 	.word	0x08017b44
 800d694:	0800d5f1 	.word	0x0800d5f1

0800d698 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b086      	sub	sp, #24
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	60b9      	str	r1, [r7, #8]
 800d6a2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d6aa:	d306      	bcc.n	800d6ba <sys_timeout+0x22>
 800d6ac:	4b0a      	ldr	r3, [pc, #40]	@ (800d6d8 <sys_timeout+0x40>)
 800d6ae:	f240 1229 	movw	r2, #297	@ 0x129
 800d6b2:	490a      	ldr	r1, [pc, #40]	@ (800d6dc <sys_timeout+0x44>)
 800d6b4:	480a      	ldr	r0, [pc, #40]	@ (800d6e0 <sys_timeout+0x48>)
 800d6b6:	f003 f863 	bl	8010780 <printf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d6ba:	f7f8 fd19 	bl	80060f0 <sys_now>
 800d6be:	4602      	mov	r2, r0
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	4413      	add	r3, r2
 800d6c4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d6c6:	687a      	ldr	r2, [r7, #4]
 800d6c8:	68b9      	ldr	r1, [r7, #8]
 800d6ca:	6978      	ldr	r0, [r7, #20]
 800d6cc:	f7ff ff22 	bl	800d514 <sys_timeout_abs>
#endif
}
 800d6d0:	bf00      	nop
 800d6d2:	3718      	adds	r7, #24
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}
 800d6d8:	08016f60 	.word	0x08016f60
 800d6dc:	08016ffc 	.word	0x08016ffc
 800d6e0:	08016fd4 	.word	0x08016fd4

0800d6e4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b084      	sub	sp, #16
 800d6e8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d6ea:	f7f8 fd01 	bl	80060f0 <sys_now>
 800d6ee:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d6f0:	4b1a      	ldr	r3, [pc, #104]	@ (800d75c <sys_check_timeouts+0x78>)
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d001      	beq.n	800d6fe <sys_check_timeouts+0x1a>
 800d6fa:	f7f9 ff29 	bl	8007550 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d6fe:	4b18      	ldr	r3, [pc, #96]	@ (800d760 <sys_check_timeouts+0x7c>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d022      	beq.n	800d750 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	685b      	ldr	r3, [r3, #4]
 800d70e:	68fa      	ldr	r2, [r7, #12]
 800d710:	1ad3      	subs	r3, r2, r3
 800d712:	0fdb      	lsrs	r3, r3, #31
 800d714:	f003 0301 	and.w	r3, r3, #1
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d11a      	bne.n	800d754 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	4a0f      	ldr	r2, [pc, #60]	@ (800d760 <sys_check_timeouts+0x7c>)
 800d724:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	689b      	ldr	r3, [r3, #8]
 800d72a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	68db      	ldr	r3, [r3, #12]
 800d730:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	4a0b      	ldr	r2, [pc, #44]	@ (800d764 <sys_check_timeouts+0x80>)
 800d738:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d73a:	68b9      	ldr	r1, [r7, #8]
 800d73c:	2006      	movs	r0, #6
 800d73e:	f7f9 fbcb 	bl	8006ed8 <memp_free>
    if (handler != NULL) {
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d0d3      	beq.n	800d6f0 <sys_check_timeouts+0xc>
      handler(arg);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6838      	ldr	r0, [r7, #0]
 800d74c:	4798      	blx	r3
  do {
 800d74e:	e7cf      	b.n	800d6f0 <sys_check_timeouts+0xc>
      return;
 800d750:	bf00      	nop
 800d752:	e000      	b.n	800d756 <sys_check_timeouts+0x72>
      return;
 800d754:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d756:	3710      	adds	r7, #16
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	20008a61 	.word	0x20008a61
 800d760:	20008ab4 	.word	0x20008ab4
 800d764:	20008ab8 	.word	0x20008ab8

0800d768 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d76c:	f002 ff2a 	bl	80105c4 <rand>
 800d770:	4603      	mov	r3, r0
 800d772:	b29b      	uxth	r3, r3
 800d774:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d778:	b29b      	uxth	r3, r3
 800d77a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d77e:	b29a      	uxth	r2, r3
 800d780:	4b01      	ldr	r3, [pc, #4]	@ (800d788 <udp_init+0x20>)
 800d782:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d784:	bf00      	nop
 800d786:	bd80      	pop	{r7, pc}
 800d788:	2000002c 	.word	0x2000002c

0800d78c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b083      	sub	sp, #12
 800d790:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800d792:	2300      	movs	r3, #0
 800d794:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d796:	4b17      	ldr	r3, [pc, #92]	@ (800d7f4 <udp_new_port+0x68>)
 800d798:	881b      	ldrh	r3, [r3, #0]
 800d79a:	1c5a      	adds	r2, r3, #1
 800d79c:	b291      	uxth	r1, r2
 800d79e:	4a15      	ldr	r2, [pc, #84]	@ (800d7f4 <udp_new_port+0x68>)
 800d7a0:	8011      	strh	r1, [r2, #0]
 800d7a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d103      	bne.n	800d7b2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d7aa:	4b12      	ldr	r3, [pc, #72]	@ (800d7f4 <udp_new_port+0x68>)
 800d7ac:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800d7b0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7b2:	4b11      	ldr	r3, [pc, #68]	@ (800d7f8 <udp_new_port+0x6c>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	603b      	str	r3, [r7, #0]
 800d7b8:	e011      	b.n	800d7de <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	8a5a      	ldrh	r2, [r3, #18]
 800d7be:	4b0d      	ldr	r3, [pc, #52]	@ (800d7f4 <udp_new_port+0x68>)
 800d7c0:	881b      	ldrh	r3, [r3, #0]
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d108      	bne.n	800d7d8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d7c6:	88fb      	ldrh	r3, [r7, #6]
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	80fb      	strh	r3, [r7, #6]
 800d7cc:	88fb      	ldrh	r3, [r7, #6]
 800d7ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d7d2:	d3e0      	bcc.n	800d796 <udp_new_port+0xa>
        return 0;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	e007      	b.n	800d7e8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	68db      	ldr	r3, [r3, #12]
 800d7dc:	603b      	str	r3, [r7, #0]
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d1ea      	bne.n	800d7ba <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800d7e4:	4b03      	ldr	r3, [pc, #12]	@ (800d7f4 <udp_new_port+0x68>)
 800d7e6:	881b      	ldrh	r3, [r3, #0]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	370c      	adds	r7, #12
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr
 800d7f4:	2000002c 	.word	0x2000002c
 800d7f8:	20008ac0 	.word	0x20008ac0

0800d7fc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	60f8      	str	r0, [r7, #12]
 800d804:	60b9      	str	r1, [r7, #8]
 800d806:	4613      	mov	r3, r2
 800d808:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d105      	bne.n	800d81c <udp_input_local_match+0x20>
 800d810:	4b27      	ldr	r3, [pc, #156]	@ (800d8b0 <udp_input_local_match+0xb4>)
 800d812:	2287      	movs	r2, #135	@ 0x87
 800d814:	4927      	ldr	r1, [pc, #156]	@ (800d8b4 <udp_input_local_match+0xb8>)
 800d816:	4828      	ldr	r0, [pc, #160]	@ (800d8b8 <udp_input_local_match+0xbc>)
 800d818:	f002 ffb2 	bl	8010780 <printf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d105      	bne.n	800d82e <udp_input_local_match+0x32>
 800d822:	4b23      	ldr	r3, [pc, #140]	@ (800d8b0 <udp_input_local_match+0xb4>)
 800d824:	2288      	movs	r2, #136	@ 0x88
 800d826:	4925      	ldr	r1, [pc, #148]	@ (800d8bc <udp_input_local_match+0xc0>)
 800d828:	4823      	ldr	r0, [pc, #140]	@ (800d8b8 <udp_input_local_match+0xbc>)
 800d82a:	f002 ffa9 	bl	8010780 <printf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	7a1b      	ldrb	r3, [r3, #8]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d00b      	beq.n	800d84e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	7a1a      	ldrb	r2, [r3, #8]
 800d83a:	4b21      	ldr	r3, [pc, #132]	@ (800d8c0 <udp_input_local_match+0xc4>)
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d842:	3301      	adds	r3, #1
 800d844:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d846:	429a      	cmp	r2, r3
 800d848:	d001      	beq.n	800d84e <udp_input_local_match+0x52>
    return 0;
 800d84a:	2300      	movs	r3, #0
 800d84c:	e02b      	b.n	800d8a6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d84e:	79fb      	ldrb	r3, [r7, #7]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d018      	beq.n	800d886 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d013      	beq.n	800d882 <udp_input_local_match+0x86>
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d00f      	beq.n	800d882 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d862:	4b17      	ldr	r3, [pc, #92]	@ (800d8c0 <udp_input_local_match+0xc4>)
 800d864:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d866:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d86a:	d00a      	beq.n	800d882 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	4b13      	ldr	r3, [pc, #76]	@ (800d8c0 <udp_input_local_match+0xc4>)
 800d872:	695b      	ldr	r3, [r3, #20]
 800d874:	405a      	eors	r2, r3
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	3308      	adds	r3, #8
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d110      	bne.n	800d8a4 <udp_input_local_match+0xa8>
          return 1;
 800d882:	2301      	movs	r3, #1
 800d884:	e00f      	b.n	800d8a6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d009      	beq.n	800d8a0 <udp_input_local_match+0xa4>
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d005      	beq.n	800d8a0 <udp_input_local_match+0xa4>
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681a      	ldr	r2, [r3, #0]
 800d898:	4b09      	ldr	r3, [pc, #36]	@ (800d8c0 <udp_input_local_match+0xc4>)
 800d89a:	695b      	ldr	r3, [r3, #20]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d101      	bne.n	800d8a4 <udp_input_local_match+0xa8>
        return 1;
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	e000      	b.n	800d8a6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d8a4:	2300      	movs	r3, #0
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3710      	adds	r7, #16
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	bf00      	nop
 800d8b0:	08017048 	.word	0x08017048
 800d8b4:	08017078 	.word	0x08017078
 800d8b8:	0801709c 	.word	0x0801709c
 800d8bc:	080170c4 	.word	0x080170c4
 800d8c0:	200054f4 	.word	0x200054f4

0800d8c4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d8c4:	b590      	push	{r4, r7, lr}
 800d8c6:	b08d      	sub	sp, #52	@ 0x34
 800d8c8:	af02      	add	r7, sp, #8
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d105      	bne.n	800d8e4 <udp_input+0x20>
 800d8d8:	4b7c      	ldr	r3, [pc, #496]	@ (800dacc <udp_input+0x208>)
 800d8da:	22cf      	movs	r2, #207	@ 0xcf
 800d8dc:	497c      	ldr	r1, [pc, #496]	@ (800dad0 <udp_input+0x20c>)
 800d8de:	487d      	ldr	r0, [pc, #500]	@ (800dad4 <udp_input+0x210>)
 800d8e0:	f002 ff4e 	bl	8010780 <printf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d105      	bne.n	800d8f6 <udp_input+0x32>
 800d8ea:	4b78      	ldr	r3, [pc, #480]	@ (800dacc <udp_input+0x208>)
 800d8ec:	22d0      	movs	r2, #208	@ 0xd0
 800d8ee:	497a      	ldr	r1, [pc, #488]	@ (800dad8 <udp_input+0x214>)
 800d8f0:	4878      	ldr	r0, [pc, #480]	@ (800dad4 <udp_input+0x210>)
 800d8f2:	f002 ff45 	bl	8010780 <printf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	895b      	ldrh	r3, [r3, #10]
 800d8fa:	2b07      	cmp	r3, #7
 800d8fc:	d803      	bhi.n	800d906 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f7fa f960 	bl	8007bc4 <pbuf_free>
    goto end;
 800d904:	e0de      	b.n	800dac4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	685b      	ldr	r3, [r3, #4]
 800d90a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d90c:	4b73      	ldr	r3, [pc, #460]	@ (800dadc <udp_input+0x218>)
 800d90e:	695b      	ldr	r3, [r3, #20]
 800d910:	4a72      	ldr	r2, [pc, #456]	@ (800dadc <udp_input+0x218>)
 800d912:	6812      	ldr	r2, [r2, #0]
 800d914:	4611      	mov	r1, r2
 800d916:	4618      	mov	r0, r3
 800d918:	f001 fefe 	bl	800f718 <ip4_addr_isbroadcast_u32>
 800d91c:	4603      	mov	r3, r0
 800d91e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	881b      	ldrh	r3, [r3, #0]
 800d924:	b29b      	uxth	r3, r3
 800d926:	4618      	mov	r0, r3
 800d928:	f7f8 fdee 	bl	8006508 <lwip_htons>
 800d92c:	4603      	mov	r3, r0
 800d92e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	885b      	ldrh	r3, [r3, #2]
 800d934:	b29b      	uxth	r3, r3
 800d936:	4618      	mov	r0, r3
 800d938:	f7f8 fde6 	bl	8006508 <lwip_htons>
 800d93c:	4603      	mov	r3, r0
 800d93e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d940:	2300      	movs	r3, #0
 800d942:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800d944:	2300      	movs	r3, #0
 800d946:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d948:	2300      	movs	r3, #0
 800d94a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d94c:	4b64      	ldr	r3, [pc, #400]	@ (800dae0 <udp_input+0x21c>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	627b      	str	r3, [r7, #36]	@ 0x24
 800d952:	e054      	b.n	800d9fe <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d956:	8a5b      	ldrh	r3, [r3, #18]
 800d958:	89fa      	ldrh	r2, [r7, #14]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d14a      	bne.n	800d9f4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d95e:	7cfb      	ldrb	r3, [r7, #19]
 800d960:	461a      	mov	r2, r3
 800d962:	6839      	ldr	r1, [r7, #0]
 800d964:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d966:	f7ff ff49 	bl	800d7fc <udp_input_local_match>
 800d96a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d041      	beq.n	800d9f4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d972:	7c1b      	ldrb	r3, [r3, #16]
 800d974:	f003 0304 	and.w	r3, r3, #4
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d11d      	bne.n	800d9b8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d102      	bne.n	800d988 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d984:	61fb      	str	r3, [r7, #28]
 800d986:	e017      	b.n	800d9b8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d988:	7cfb      	ldrb	r3, [r7, #19]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d014      	beq.n	800d9b8 <udp_input+0xf4>
 800d98e:	4b53      	ldr	r3, [pc, #332]	@ (800dadc <udp_input+0x218>)
 800d990:	695b      	ldr	r3, [r3, #20]
 800d992:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d996:	d10f      	bne.n	800d9b8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d998:	69fb      	ldr	r3, [r7, #28]
 800d99a:	681a      	ldr	r2, [r3, #0]
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	3304      	adds	r3, #4
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d008      	beq.n	800d9b8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	3304      	adds	r3, #4
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d101      	bne.n	800d9b8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9b6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ba:	8a9b      	ldrh	r3, [r3, #20]
 800d9bc:	8a3a      	ldrh	r2, [r7, #16]
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d118      	bne.n	800d9f4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9c4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d005      	beq.n	800d9d6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9cc:	685a      	ldr	r2, [r3, #4]
 800d9ce:	4b43      	ldr	r3, [pc, #268]	@ (800dadc <udp_input+0x218>)
 800d9d0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d10e      	bne.n	800d9f4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d9d6:	6a3b      	ldr	r3, [r7, #32]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d014      	beq.n	800da06 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9de:	68da      	ldr	r2, [r3, #12]
 800d9e0:	6a3b      	ldr	r3, [r7, #32]
 800d9e2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d9e4:	4b3e      	ldr	r3, [pc, #248]	@ (800dae0 <udp_input+0x21c>)
 800d9e6:	681a      	ldr	r2, [r3, #0]
 800d9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ea:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d9ec:	4a3c      	ldr	r2, [pc, #240]	@ (800dae0 <udp_input+0x21c>)
 800d9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9f0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d9f2:	e008      	b.n	800da06 <udp_input+0x142>
      }
    }

    prev = pcb;
 800d9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9f6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800d9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da00:	2b00      	cmp	r3, #0
 800da02:	d1a7      	bne.n	800d954 <udp_input+0x90>
 800da04:	e000      	b.n	800da08 <udp_input+0x144>
        break;
 800da06:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800da08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d101      	bne.n	800da12 <udp_input+0x14e>
    pcb = uncon_pcb;
 800da0e:	69fb      	ldr	r3, [r7, #28]
 800da10:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800da12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da14:	2b00      	cmp	r3, #0
 800da16:	d002      	beq.n	800da1e <udp_input+0x15a>
    for_us = 1;
 800da18:	2301      	movs	r3, #1
 800da1a:	76fb      	strb	r3, [r7, #27]
 800da1c:	e00a      	b.n	800da34 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	3304      	adds	r3, #4
 800da22:	681a      	ldr	r2, [r3, #0]
 800da24:	4b2d      	ldr	r3, [pc, #180]	@ (800dadc <udp_input+0x218>)
 800da26:	695b      	ldr	r3, [r3, #20]
 800da28:	429a      	cmp	r2, r3
 800da2a:	bf0c      	ite	eq
 800da2c:	2301      	moveq	r3, #1
 800da2e:	2300      	movne	r3, #0
 800da30:	b2db      	uxtb	r3, r3
 800da32:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800da34:	7efb      	ldrb	r3, [r7, #27]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d041      	beq.n	800dabe <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800da3a:	2108      	movs	r1, #8
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f7fa f83b 	bl	8007ab8 <pbuf_remove_header>
 800da42:	4603      	mov	r3, r0
 800da44:	2b00      	cmp	r3, #0
 800da46:	d00a      	beq.n	800da5e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800da48:	4b20      	ldr	r3, [pc, #128]	@ (800dacc <udp_input+0x208>)
 800da4a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800da4e:	4925      	ldr	r1, [pc, #148]	@ (800dae4 <udp_input+0x220>)
 800da50:	4820      	ldr	r0, [pc, #128]	@ (800dad4 <udp_input+0x210>)
 800da52:	f002 fe95 	bl	8010780 <printf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f7fa f8b4 	bl	8007bc4 <pbuf_free>
      goto end;
 800da5c:	e032      	b.n	800dac4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800da5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da60:	2b00      	cmp	r3, #0
 800da62:	d012      	beq.n	800da8a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800da64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da66:	699b      	ldr	r3, [r3, #24]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d00a      	beq.n	800da82 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800da6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da6e:	699c      	ldr	r4, [r3, #24]
 800da70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da72:	69d8      	ldr	r0, [r3, #28]
 800da74:	8a3b      	ldrh	r3, [r7, #16]
 800da76:	9300      	str	r3, [sp, #0]
 800da78:	4b1b      	ldr	r3, [pc, #108]	@ (800dae8 <udp_input+0x224>)
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da7e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800da80:	e021      	b.n	800dac6 <udp_input+0x202>
        pbuf_free(p);
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f7fa f89e 	bl	8007bc4 <pbuf_free>
        goto end;
 800da88:	e01c      	b.n	800dac4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800da8a:	7cfb      	ldrb	r3, [r7, #19]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d112      	bne.n	800dab6 <udp_input+0x1f2>
 800da90:	4b12      	ldr	r3, [pc, #72]	@ (800dadc <udp_input+0x218>)
 800da92:	695b      	ldr	r3, [r3, #20]
 800da94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800da98:	2be0      	cmp	r3, #224	@ 0xe0
 800da9a:	d00c      	beq.n	800dab6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800da9c:	4b0f      	ldr	r3, [pc, #60]	@ (800dadc <udp_input+0x218>)
 800da9e:	899b      	ldrh	r3, [r3, #12]
 800daa0:	3308      	adds	r3, #8
 800daa2:	b29b      	uxth	r3, r3
 800daa4:	b21b      	sxth	r3, r3
 800daa6:	4619      	mov	r1, r3
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f7fa f878 	bl	8007b9e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800daae:	2103      	movs	r1, #3
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f001 fb11 	bl	800f0d8 <icmp_dest_unreach>
      pbuf_free(p);
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f7fa f884 	bl	8007bc4 <pbuf_free>
  return;
 800dabc:	e003      	b.n	800dac6 <udp_input+0x202>
    pbuf_free(p);
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f7fa f880 	bl	8007bc4 <pbuf_free>
  return;
 800dac4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800dac6:	372c      	adds	r7, #44	@ 0x2c
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd90      	pop	{r4, r7, pc}
 800dacc:	08017048 	.word	0x08017048
 800dad0:	080170ec 	.word	0x080170ec
 800dad4:	0801709c 	.word	0x0801709c
 800dad8:	08017104 	.word	0x08017104
 800dadc:	200054f4 	.word	0x200054f4
 800dae0:	20008ac0 	.word	0x20008ac0
 800dae4:	08017120 	.word	0x08017120
 800dae8:	20005504 	.word	0x20005504

0800daec <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b088      	sub	sp, #32
 800daf0:	af02      	add	r7, sp, #8
 800daf2:	60f8      	str	r0, [r7, #12]
 800daf4:	60b9      	str	r1, [r7, #8]
 800daf6:	607a      	str	r2, [r7, #4]
 800daf8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d109      	bne.n	800db14 <udp_sendto+0x28>
 800db00:	4b23      	ldr	r3, [pc, #140]	@ (800db90 <udp_sendto+0xa4>)
 800db02:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800db06:	4923      	ldr	r1, [pc, #140]	@ (800db94 <udp_sendto+0xa8>)
 800db08:	4823      	ldr	r0, [pc, #140]	@ (800db98 <udp_sendto+0xac>)
 800db0a:	f002 fe39 	bl	8010780 <printf>
 800db0e:	f06f 030f 	mvn.w	r3, #15
 800db12:	e038      	b.n	800db86 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d109      	bne.n	800db2e <udp_sendto+0x42>
 800db1a:	4b1d      	ldr	r3, [pc, #116]	@ (800db90 <udp_sendto+0xa4>)
 800db1c:	f240 2219 	movw	r2, #537	@ 0x219
 800db20:	491e      	ldr	r1, [pc, #120]	@ (800db9c <udp_sendto+0xb0>)
 800db22:	481d      	ldr	r0, [pc, #116]	@ (800db98 <udp_sendto+0xac>)
 800db24:	f002 fe2c 	bl	8010780 <printf>
 800db28:	f06f 030f 	mvn.w	r3, #15
 800db2c:	e02b      	b.n	800db86 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d109      	bne.n	800db48 <udp_sendto+0x5c>
 800db34:	4b16      	ldr	r3, [pc, #88]	@ (800db90 <udp_sendto+0xa4>)
 800db36:	f240 221a 	movw	r2, #538	@ 0x21a
 800db3a:	4919      	ldr	r1, [pc, #100]	@ (800dba0 <udp_sendto+0xb4>)
 800db3c:	4816      	ldr	r0, [pc, #88]	@ (800db98 <udp_sendto+0xac>)
 800db3e:	f002 fe1f 	bl	8010780 <printf>
 800db42:	f06f 030f 	mvn.w	r3, #15
 800db46:	e01e      	b.n	800db86 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	7a1b      	ldrb	r3, [r3, #8]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d006      	beq.n	800db5e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	7a1b      	ldrb	r3, [r3, #8]
 800db54:	4618      	mov	r0, r3
 800db56:	f7f9 fcd5 	bl	8007504 <netif_get_by_index>
 800db5a:	6178      	str	r0, [r7, #20]
 800db5c:	e003      	b.n	800db66 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f001 fb44 	bl	800f1ec <ip4_route>
 800db64:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d102      	bne.n	800db72 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800db6c:	f06f 0303 	mvn.w	r3, #3
 800db70:	e009      	b.n	800db86 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800db72:	887a      	ldrh	r2, [r7, #2]
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	9300      	str	r3, [sp, #0]
 800db78:	4613      	mov	r3, r2
 800db7a:	687a      	ldr	r2, [r7, #4]
 800db7c:	68b9      	ldr	r1, [r7, #8]
 800db7e:	68f8      	ldr	r0, [r7, #12]
 800db80:	f000 f810 	bl	800dba4 <udp_sendto_if>
 800db84:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800db86:	4618      	mov	r0, r3
 800db88:	3718      	adds	r7, #24
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	08017048 	.word	0x08017048
 800db94:	0801716c 	.word	0x0801716c
 800db98:	0801709c 	.word	0x0801709c
 800db9c:	08017184 	.word	0x08017184
 800dba0:	080171a0 	.word	0x080171a0

0800dba4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b088      	sub	sp, #32
 800dba8:	af02      	add	r7, sp, #8
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
 800dbb0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d109      	bne.n	800dbcc <udp_sendto_if+0x28>
 800dbb8:	4b2e      	ldr	r3, [pc, #184]	@ (800dc74 <udp_sendto_if+0xd0>)
 800dbba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dbbe:	492e      	ldr	r1, [pc, #184]	@ (800dc78 <udp_sendto_if+0xd4>)
 800dbc0:	482e      	ldr	r0, [pc, #184]	@ (800dc7c <udp_sendto_if+0xd8>)
 800dbc2:	f002 fddd 	bl	8010780 <printf>
 800dbc6:	f06f 030f 	mvn.w	r3, #15
 800dbca:	e04f      	b.n	800dc6c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d109      	bne.n	800dbe6 <udp_sendto_if+0x42>
 800dbd2:	4b28      	ldr	r3, [pc, #160]	@ (800dc74 <udp_sendto_if+0xd0>)
 800dbd4:	f240 2281 	movw	r2, #641	@ 0x281
 800dbd8:	4929      	ldr	r1, [pc, #164]	@ (800dc80 <udp_sendto_if+0xdc>)
 800dbda:	4828      	ldr	r0, [pc, #160]	@ (800dc7c <udp_sendto_if+0xd8>)
 800dbdc:	f002 fdd0 	bl	8010780 <printf>
 800dbe0:	f06f 030f 	mvn.w	r3, #15
 800dbe4:	e042      	b.n	800dc6c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d109      	bne.n	800dc00 <udp_sendto_if+0x5c>
 800dbec:	4b21      	ldr	r3, [pc, #132]	@ (800dc74 <udp_sendto_if+0xd0>)
 800dbee:	f240 2282 	movw	r2, #642	@ 0x282
 800dbf2:	4924      	ldr	r1, [pc, #144]	@ (800dc84 <udp_sendto_if+0xe0>)
 800dbf4:	4821      	ldr	r0, [pc, #132]	@ (800dc7c <udp_sendto_if+0xd8>)
 800dbf6:	f002 fdc3 	bl	8010780 <printf>
 800dbfa:	f06f 030f 	mvn.w	r3, #15
 800dbfe:	e035      	b.n	800dc6c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800dc00:	6a3b      	ldr	r3, [r7, #32]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d109      	bne.n	800dc1a <udp_sendto_if+0x76>
 800dc06:	4b1b      	ldr	r3, [pc, #108]	@ (800dc74 <udp_sendto_if+0xd0>)
 800dc08:	f240 2283 	movw	r2, #643	@ 0x283
 800dc0c:	491e      	ldr	r1, [pc, #120]	@ (800dc88 <udp_sendto_if+0xe4>)
 800dc0e:	481b      	ldr	r0, [pc, #108]	@ (800dc7c <udp_sendto_if+0xd8>)
 800dc10:	f002 fdb6 	bl	8010780 <printf>
 800dc14:	f06f 030f 	mvn.w	r3, #15
 800dc18:	e028      	b.n	800dc6c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d009      	beq.n	800dc34 <udp_sendto_if+0x90>
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d005      	beq.n	800dc34 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dc30:	2be0      	cmp	r3, #224	@ 0xe0
 800dc32:	d103      	bne.n	800dc3c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800dc34:	6a3b      	ldr	r3, [r7, #32]
 800dc36:	3304      	adds	r3, #4
 800dc38:	617b      	str	r3, [r7, #20]
 800dc3a:	e00b      	b.n	800dc54 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681a      	ldr	r2, [r3, #0]
 800dc40:	6a3b      	ldr	r3, [r7, #32]
 800dc42:	3304      	adds	r3, #4
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d002      	beq.n	800dc50 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800dc4a:	f06f 0303 	mvn.w	r3, #3
 800dc4e:	e00d      	b.n	800dc6c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800dc54:	887a      	ldrh	r2, [r7, #2]
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	9301      	str	r3, [sp, #4]
 800dc5a:	6a3b      	ldr	r3, [r7, #32]
 800dc5c:	9300      	str	r3, [sp, #0]
 800dc5e:	4613      	mov	r3, r2
 800dc60:	687a      	ldr	r2, [r7, #4]
 800dc62:	68b9      	ldr	r1, [r7, #8]
 800dc64:	68f8      	ldr	r0, [r7, #12]
 800dc66:	f000 f811 	bl	800dc8c <udp_sendto_if_src>
 800dc6a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3718      	adds	r7, #24
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	08017048 	.word	0x08017048
 800dc78:	080171bc 	.word	0x080171bc
 800dc7c:	0801709c 	.word	0x0801709c
 800dc80:	080171d8 	.word	0x080171d8
 800dc84:	080171f4 	.word	0x080171f4
 800dc88:	08017214 	.word	0x08017214

0800dc8c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b08c      	sub	sp, #48	@ 0x30
 800dc90:	af04      	add	r7, sp, #16
 800dc92:	60f8      	str	r0, [r7, #12]
 800dc94:	60b9      	str	r1, [r7, #8]
 800dc96:	607a      	str	r2, [r7, #4]
 800dc98:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d109      	bne.n	800dcb4 <udp_sendto_if_src+0x28>
 800dca0:	4b65      	ldr	r3, [pc, #404]	@ (800de38 <udp_sendto_if_src+0x1ac>)
 800dca2:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800dca6:	4965      	ldr	r1, [pc, #404]	@ (800de3c <udp_sendto_if_src+0x1b0>)
 800dca8:	4865      	ldr	r0, [pc, #404]	@ (800de40 <udp_sendto_if_src+0x1b4>)
 800dcaa:	f002 fd69 	bl	8010780 <printf>
 800dcae:	f06f 030f 	mvn.w	r3, #15
 800dcb2:	e0bc      	b.n	800de2e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d109      	bne.n	800dcce <udp_sendto_if_src+0x42>
 800dcba:	4b5f      	ldr	r3, [pc, #380]	@ (800de38 <udp_sendto_if_src+0x1ac>)
 800dcbc:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800dcc0:	4960      	ldr	r1, [pc, #384]	@ (800de44 <udp_sendto_if_src+0x1b8>)
 800dcc2:	485f      	ldr	r0, [pc, #380]	@ (800de40 <udp_sendto_if_src+0x1b4>)
 800dcc4:	f002 fd5c 	bl	8010780 <printf>
 800dcc8:	f06f 030f 	mvn.w	r3, #15
 800dccc:	e0af      	b.n	800de2e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d109      	bne.n	800dce8 <udp_sendto_if_src+0x5c>
 800dcd4:	4b58      	ldr	r3, [pc, #352]	@ (800de38 <udp_sendto_if_src+0x1ac>)
 800dcd6:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800dcda:	495b      	ldr	r1, [pc, #364]	@ (800de48 <udp_sendto_if_src+0x1bc>)
 800dcdc:	4858      	ldr	r0, [pc, #352]	@ (800de40 <udp_sendto_if_src+0x1b4>)
 800dcde:	f002 fd4f 	bl	8010780 <printf>
 800dce2:	f06f 030f 	mvn.w	r3, #15
 800dce6:	e0a2      	b.n	800de2e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800dce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d109      	bne.n	800dd02 <udp_sendto_if_src+0x76>
 800dcee:	4b52      	ldr	r3, [pc, #328]	@ (800de38 <udp_sendto_if_src+0x1ac>)
 800dcf0:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800dcf4:	4955      	ldr	r1, [pc, #340]	@ (800de4c <udp_sendto_if_src+0x1c0>)
 800dcf6:	4852      	ldr	r0, [pc, #328]	@ (800de40 <udp_sendto_if_src+0x1b4>)
 800dcf8:	f002 fd42 	bl	8010780 <printf>
 800dcfc:	f06f 030f 	mvn.w	r3, #15
 800dd00:	e095      	b.n	800de2e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800dd02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d109      	bne.n	800dd1c <udp_sendto_if_src+0x90>
 800dd08:	4b4b      	ldr	r3, [pc, #300]	@ (800de38 <udp_sendto_if_src+0x1ac>)
 800dd0a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800dd0e:	4950      	ldr	r1, [pc, #320]	@ (800de50 <udp_sendto_if_src+0x1c4>)
 800dd10:	484b      	ldr	r0, [pc, #300]	@ (800de40 <udp_sendto_if_src+0x1b4>)
 800dd12:	f002 fd35 	bl	8010780 <printf>
 800dd16:	f06f 030f 	mvn.w	r3, #15
 800dd1a:	e088      	b.n	800de2e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	8a5b      	ldrh	r3, [r3, #18]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d10f      	bne.n	800dd44 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800dd24:	68f9      	ldr	r1, [r7, #12]
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	8a5b      	ldrh	r3, [r3, #18]
 800dd2a:	461a      	mov	r2, r3
 800dd2c:	68f8      	ldr	r0, [r7, #12]
 800dd2e:	f000 f893 	bl	800de58 <udp_bind>
 800dd32:	4603      	mov	r3, r0
 800dd34:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800dd36:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d002      	beq.n	800dd44 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800dd3e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dd42:	e074      	b.n	800de2e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	891b      	ldrh	r3, [r3, #8]
 800dd48:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d902      	bls.n	800dd56 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800dd50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dd54:	e06b      	b.n	800de2e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800dd56:	2108      	movs	r1, #8
 800dd58:	68b8      	ldr	r0, [r7, #8]
 800dd5a:	f7f9 fe9d 	bl	8007a98 <pbuf_add_header>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d015      	beq.n	800dd90 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800dd64:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dd68:	2108      	movs	r1, #8
 800dd6a:	2022      	movs	r0, #34	@ 0x22
 800dd6c:	f7f9 fc46 	bl	80075fc <pbuf_alloc>
 800dd70:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800dd72:	69fb      	ldr	r3, [r7, #28]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d102      	bne.n	800dd7e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800dd78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dd7c:	e057      	b.n	800de2e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	891b      	ldrh	r3, [r3, #8]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d006      	beq.n	800dd94 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800dd86:	68b9      	ldr	r1, [r7, #8]
 800dd88:	69f8      	ldr	r0, [r7, #28]
 800dd8a:	f7fa f833 	bl	8007df4 <pbuf_chain>
 800dd8e:	e001      	b.n	800dd94 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	895b      	ldrh	r3, [r3, #10]
 800dd98:	2b07      	cmp	r3, #7
 800dd9a:	d806      	bhi.n	800ddaa <udp_sendto_if_src+0x11e>
 800dd9c:	4b26      	ldr	r3, [pc, #152]	@ (800de38 <udp_sendto_if_src+0x1ac>)
 800dd9e:	f240 320d 	movw	r2, #781	@ 0x30d
 800dda2:	492c      	ldr	r1, [pc, #176]	@ (800de54 <udp_sendto_if_src+0x1c8>)
 800dda4:	4826      	ldr	r0, [pc, #152]	@ (800de40 <udp_sendto_if_src+0x1b4>)
 800dda6:	f002 fceb 	bl	8010780 <printf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800ddaa:	69fb      	ldr	r3, [r7, #28]
 800ddac:	685b      	ldr	r3, [r3, #4]
 800ddae:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	8a5b      	ldrh	r3, [r3, #18]
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7f8 fba7 	bl	8006508 <lwip_htons>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	461a      	mov	r2, r3
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800ddc2:	887b      	ldrh	r3, [r7, #2]
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7f8 fb9f 	bl	8006508 <lwip_htons>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	461a      	mov	r2, r3
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	719a      	strb	r2, [r3, #6]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	891b      	ldrh	r3, [r3, #8]
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7f8 fb91 	bl	8006508 <lwip_htons>
 800dde6:	4603      	mov	r3, r0
 800dde8:	461a      	mov	r2, r3
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800ddee:	2311      	movs	r3, #17
 800ddf0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	7adb      	ldrb	r3, [r3, #11]
 800ddf6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	7a9b      	ldrb	r3, [r3, #10]
 800ddfc:	7cb9      	ldrb	r1, [r7, #18]
 800ddfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800de00:	9202      	str	r2, [sp, #8]
 800de02:	7cfa      	ldrb	r2, [r7, #19]
 800de04:	9201      	str	r2, [sp, #4]
 800de06:	9300      	str	r3, [sp, #0]
 800de08:	460b      	mov	r3, r1
 800de0a:	687a      	ldr	r2, [r7, #4]
 800de0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800de0e:	69f8      	ldr	r0, [r7, #28]
 800de10:	f001 fbd4 	bl	800f5bc <ip4_output_if_src>
 800de14:	4603      	mov	r3, r0
 800de16:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800de18:	69fa      	ldr	r2, [r7, #28]
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d004      	beq.n	800de2a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800de20:	69f8      	ldr	r0, [r7, #28]
 800de22:	f7f9 fecf 	bl	8007bc4 <pbuf_free>
    q = NULL;
 800de26:	2300      	movs	r3, #0
 800de28:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800de2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3720      	adds	r7, #32
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	08017048 	.word	0x08017048
 800de3c:	08017234 	.word	0x08017234
 800de40:	0801709c 	.word	0x0801709c
 800de44:	08017254 	.word	0x08017254
 800de48:	08017274 	.word	0x08017274
 800de4c:	08017298 	.word	0x08017298
 800de50:	080172bc 	.word	0x080172bc
 800de54:	080172e0 	.word	0x080172e0

0800de58 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b086      	sub	sp, #24
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	60f8      	str	r0, [r7, #12]
 800de60:	60b9      	str	r1, [r7, #8]
 800de62:	4613      	mov	r3, r2
 800de64:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d101      	bne.n	800de70 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800de6c:	4b39      	ldr	r3, [pc, #228]	@ (800df54 <udp_bind+0xfc>)
 800de6e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d109      	bne.n	800de8a <udp_bind+0x32>
 800de76:	4b38      	ldr	r3, [pc, #224]	@ (800df58 <udp_bind+0x100>)
 800de78:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800de7c:	4937      	ldr	r1, [pc, #220]	@ (800df5c <udp_bind+0x104>)
 800de7e:	4838      	ldr	r0, [pc, #224]	@ (800df60 <udp_bind+0x108>)
 800de80:	f002 fc7e 	bl	8010780 <printf>
 800de84:	f06f 030f 	mvn.w	r3, #15
 800de88:	e060      	b.n	800df4c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800de8a:	2300      	movs	r3, #0
 800de8c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800de8e:	4b35      	ldr	r3, [pc, #212]	@ (800df64 <udp_bind+0x10c>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	617b      	str	r3, [r7, #20]
 800de94:	e009      	b.n	800deaa <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800de96:	68fa      	ldr	r2, [r7, #12]
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d102      	bne.n	800dea4 <udp_bind+0x4c>
      rebind = 1;
 800de9e:	2301      	movs	r3, #1
 800dea0:	74fb      	strb	r3, [r7, #19]
      break;
 800dea2:	e005      	b.n	800deb0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	68db      	ldr	r3, [r3, #12]
 800dea8:	617b      	str	r3, [r7, #20]
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d1f2      	bne.n	800de96 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800deb0:	88fb      	ldrh	r3, [r7, #6]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d109      	bne.n	800deca <udp_bind+0x72>
    port = udp_new_port();
 800deb6:	f7ff fc69 	bl	800d78c <udp_new_port>
 800deba:	4603      	mov	r3, r0
 800debc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800debe:	88fb      	ldrh	r3, [r7, #6]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d12c      	bne.n	800df1e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800dec4:	f06f 0307 	mvn.w	r3, #7
 800dec8:	e040      	b.n	800df4c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800deca:	4b26      	ldr	r3, [pc, #152]	@ (800df64 <udp_bind+0x10c>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	617b      	str	r3, [r7, #20]
 800ded0:	e022      	b.n	800df18 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800ded2:	68fa      	ldr	r2, [r7, #12]
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d01b      	beq.n	800df12 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	8a5b      	ldrh	r3, [r3, #18]
 800dede:	88fa      	ldrh	r2, [r7, #6]
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d116      	bne.n	800df12 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	681a      	ldr	r2, [r3, #0]
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800deec:	429a      	cmp	r2, r3
 800deee:	d00d      	beq.n	800df0c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d00a      	beq.n	800df0c <udp_bind+0xb4>
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d006      	beq.n	800df0c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800defe:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800df00:	2b00      	cmp	r3, #0
 800df02:	d003      	beq.n	800df0c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d102      	bne.n	800df12 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800df0c:	f06f 0307 	mvn.w	r3, #7
 800df10:	e01c      	b.n	800df4c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	68db      	ldr	r3, [r3, #12]
 800df16:	617b      	str	r3, [r7, #20]
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d1d9      	bne.n	800ded2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d002      	beq.n	800df2a <udp_bind+0xd2>
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	e000      	b.n	800df2c <udp_bind+0xd4>
 800df2a:	2300      	movs	r3, #0
 800df2c:	68fa      	ldr	r2, [r7, #12]
 800df2e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	88fa      	ldrh	r2, [r7, #6]
 800df34:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800df36:	7cfb      	ldrb	r3, [r7, #19]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d106      	bne.n	800df4a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800df3c:	4b09      	ldr	r3, [pc, #36]	@ (800df64 <udp_bind+0x10c>)
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800df44:	4a07      	ldr	r2, [pc, #28]	@ (800df64 <udp_bind+0x10c>)
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800df4a:	2300      	movs	r3, #0
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3718      	adds	r7, #24
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	08017b5c 	.word	0x08017b5c
 800df58:	08017048 	.word	0x08017048
 800df5c:	08017310 	.word	0x08017310
 800df60:	0801709c 	.word	0x0801709c
 800df64:	20008ac0 	.word	0x20008ac0

0800df68 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	60b9      	str	r1, [r7, #8]
 800df72:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d107      	bne.n	800df8a <udp_recv+0x22>
 800df7a:	4b08      	ldr	r3, [pc, #32]	@ (800df9c <udp_recv+0x34>)
 800df7c:	f240 428a 	movw	r2, #1162	@ 0x48a
 800df80:	4907      	ldr	r1, [pc, #28]	@ (800dfa0 <udp_recv+0x38>)
 800df82:	4808      	ldr	r0, [pc, #32]	@ (800dfa4 <udp_recv+0x3c>)
 800df84:	f002 fbfc 	bl	8010780 <printf>
 800df88:	e005      	b.n	800df96 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	68ba      	ldr	r2, [r7, #8]
 800df8e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	687a      	ldr	r2, [r7, #4]
 800df94:	61da      	str	r2, [r3, #28]
}
 800df96:	3710      	adds	r7, #16
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}
 800df9c:	08017048 	.word	0x08017048
 800dfa0:	0801737c 	.word	0x0801737c
 800dfa4:	0801709c 	.word	0x0801709c

0800dfa8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b082      	sub	sp, #8
 800dfac:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800dfae:	2000      	movs	r0, #0
 800dfb0:	f7f8 ff22 	bl	8006df8 <memp_malloc>
 800dfb4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d007      	beq.n	800dfcc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800dfbc:	2220      	movs	r2, #32
 800dfbe:	2100      	movs	r1, #0
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f002 fc5c 	bl	801087e <memset>
    pcb->ttl = UDP_TTL;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	22ff      	movs	r2, #255	@ 0xff
 800dfca:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800dfcc:	687b      	ldr	r3, [r7, #4]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3708      	adds	r7, #8
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
	...

0800dfd8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b085      	sub	sp, #20
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d01e      	beq.n	800e026 <udp_netif_ip_addr_changed+0x4e>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d01a      	beq.n	800e026 <udp_netif_ip_addr_changed+0x4e>
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d017      	beq.n	800e026 <udp_netif_ip_addr_changed+0x4e>
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d013      	beq.n	800e026 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800dffe:	4b0d      	ldr	r3, [pc, #52]	@ (800e034 <udp_netif_ip_addr_changed+0x5c>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	60fb      	str	r3, [r7, #12]
 800e004:	e00c      	b.n	800e020 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681a      	ldr	r2, [r3, #0]
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	429a      	cmp	r2, r3
 800e010:	d103      	bne.n	800e01a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	681a      	ldr	r2, [r3, #0]
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	60fb      	str	r3, [r7, #12]
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d1ef      	bne.n	800e006 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e026:	bf00      	nop
 800e028:	3714      	adds	r7, #20
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr
 800e032:	bf00      	nop
 800e034:	20008ac0 	.word	0x20008ac0

0800e038 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e040:	4915      	ldr	r1, [pc, #84]	@ (800e098 <etharp_free_entry+0x60>)
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	4613      	mov	r3, r2
 800e046:	005b      	lsls	r3, r3, #1
 800e048:	4413      	add	r3, r2
 800e04a:	00db      	lsls	r3, r3, #3
 800e04c:	440b      	add	r3, r1
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d013      	beq.n	800e07c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e054:	4910      	ldr	r1, [pc, #64]	@ (800e098 <etharp_free_entry+0x60>)
 800e056:	687a      	ldr	r2, [r7, #4]
 800e058:	4613      	mov	r3, r2
 800e05a:	005b      	lsls	r3, r3, #1
 800e05c:	4413      	add	r3, r2
 800e05e:	00db      	lsls	r3, r3, #3
 800e060:	440b      	add	r3, r1
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	4618      	mov	r0, r3
 800e066:	f7f9 fdad 	bl	8007bc4 <pbuf_free>
    arp_table[i].q = NULL;
 800e06a:	490b      	ldr	r1, [pc, #44]	@ (800e098 <etharp_free_entry+0x60>)
 800e06c:	687a      	ldr	r2, [r7, #4]
 800e06e:	4613      	mov	r3, r2
 800e070:	005b      	lsls	r3, r3, #1
 800e072:	4413      	add	r3, r2
 800e074:	00db      	lsls	r3, r3, #3
 800e076:	440b      	add	r3, r1
 800e078:	2200      	movs	r2, #0
 800e07a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e07c:	4906      	ldr	r1, [pc, #24]	@ (800e098 <etharp_free_entry+0x60>)
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	4613      	mov	r3, r2
 800e082:	005b      	lsls	r3, r3, #1
 800e084:	4413      	add	r3, r2
 800e086:	00db      	lsls	r3, r3, #3
 800e088:	440b      	add	r3, r1
 800e08a:	3314      	adds	r3, #20
 800e08c:	2200      	movs	r2, #0
 800e08e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e090:	bf00      	nop
 800e092:	3708      	adds	r7, #8
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}
 800e098:	20008ac4 	.word	0x20008ac4

0800e09c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b082      	sub	sp, #8
 800e0a0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	607b      	str	r3, [r7, #4]
 800e0a6:	e096      	b.n	800e1d6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e0a8:	494f      	ldr	r1, [pc, #316]	@ (800e1e8 <etharp_tmr+0x14c>)
 800e0aa:	687a      	ldr	r2, [r7, #4]
 800e0ac:	4613      	mov	r3, r2
 800e0ae:	005b      	lsls	r3, r3, #1
 800e0b0:	4413      	add	r3, r2
 800e0b2:	00db      	lsls	r3, r3, #3
 800e0b4:	440b      	add	r3, r1
 800e0b6:	3314      	adds	r3, #20
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e0bc:	78fb      	ldrb	r3, [r7, #3]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	f000 8086 	beq.w	800e1d0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e0c4:	4948      	ldr	r1, [pc, #288]	@ (800e1e8 <etharp_tmr+0x14c>)
 800e0c6:	687a      	ldr	r2, [r7, #4]
 800e0c8:	4613      	mov	r3, r2
 800e0ca:	005b      	lsls	r3, r3, #1
 800e0cc:	4413      	add	r3, r2
 800e0ce:	00db      	lsls	r3, r3, #3
 800e0d0:	440b      	add	r3, r1
 800e0d2:	3312      	adds	r3, #18
 800e0d4:	881b      	ldrh	r3, [r3, #0]
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	b298      	uxth	r0, r3
 800e0da:	4943      	ldr	r1, [pc, #268]	@ (800e1e8 <etharp_tmr+0x14c>)
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	4613      	mov	r3, r2
 800e0e0:	005b      	lsls	r3, r3, #1
 800e0e2:	4413      	add	r3, r2
 800e0e4:	00db      	lsls	r3, r3, #3
 800e0e6:	440b      	add	r3, r1
 800e0e8:	3312      	adds	r3, #18
 800e0ea:	4602      	mov	r2, r0
 800e0ec:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e0ee:	493e      	ldr	r1, [pc, #248]	@ (800e1e8 <etharp_tmr+0x14c>)
 800e0f0:	687a      	ldr	r2, [r7, #4]
 800e0f2:	4613      	mov	r3, r2
 800e0f4:	005b      	lsls	r3, r3, #1
 800e0f6:	4413      	add	r3, r2
 800e0f8:	00db      	lsls	r3, r3, #3
 800e0fa:	440b      	add	r3, r1
 800e0fc:	3312      	adds	r3, #18
 800e0fe:	881b      	ldrh	r3, [r3, #0]
 800e100:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800e104:	d215      	bcs.n	800e132 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e106:	4938      	ldr	r1, [pc, #224]	@ (800e1e8 <etharp_tmr+0x14c>)
 800e108:	687a      	ldr	r2, [r7, #4]
 800e10a:	4613      	mov	r3, r2
 800e10c:	005b      	lsls	r3, r3, #1
 800e10e:	4413      	add	r3, r2
 800e110:	00db      	lsls	r3, r3, #3
 800e112:	440b      	add	r3, r1
 800e114:	3314      	adds	r3, #20
 800e116:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e118:	2b01      	cmp	r3, #1
 800e11a:	d10e      	bne.n	800e13a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e11c:	4932      	ldr	r1, [pc, #200]	@ (800e1e8 <etharp_tmr+0x14c>)
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	4613      	mov	r3, r2
 800e122:	005b      	lsls	r3, r3, #1
 800e124:	4413      	add	r3, r2
 800e126:	00db      	lsls	r3, r3, #3
 800e128:	440b      	add	r3, r1
 800e12a:	3312      	adds	r3, #18
 800e12c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e12e:	2b04      	cmp	r3, #4
 800e130:	d903      	bls.n	800e13a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f7ff ff80 	bl	800e038 <etharp_free_entry>
 800e138:	e04a      	b.n	800e1d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e13a:	492b      	ldr	r1, [pc, #172]	@ (800e1e8 <etharp_tmr+0x14c>)
 800e13c:	687a      	ldr	r2, [r7, #4]
 800e13e:	4613      	mov	r3, r2
 800e140:	005b      	lsls	r3, r3, #1
 800e142:	4413      	add	r3, r2
 800e144:	00db      	lsls	r3, r3, #3
 800e146:	440b      	add	r3, r1
 800e148:	3314      	adds	r3, #20
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	2b03      	cmp	r3, #3
 800e14e:	d10a      	bne.n	800e166 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e150:	4925      	ldr	r1, [pc, #148]	@ (800e1e8 <etharp_tmr+0x14c>)
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	4613      	mov	r3, r2
 800e156:	005b      	lsls	r3, r3, #1
 800e158:	4413      	add	r3, r2
 800e15a:	00db      	lsls	r3, r3, #3
 800e15c:	440b      	add	r3, r1
 800e15e:	3314      	adds	r3, #20
 800e160:	2204      	movs	r2, #4
 800e162:	701a      	strb	r2, [r3, #0]
 800e164:	e034      	b.n	800e1d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e166:	4920      	ldr	r1, [pc, #128]	@ (800e1e8 <etharp_tmr+0x14c>)
 800e168:	687a      	ldr	r2, [r7, #4]
 800e16a:	4613      	mov	r3, r2
 800e16c:	005b      	lsls	r3, r3, #1
 800e16e:	4413      	add	r3, r2
 800e170:	00db      	lsls	r3, r3, #3
 800e172:	440b      	add	r3, r1
 800e174:	3314      	adds	r3, #20
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	2b04      	cmp	r3, #4
 800e17a:	d10a      	bne.n	800e192 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e17c:	491a      	ldr	r1, [pc, #104]	@ (800e1e8 <etharp_tmr+0x14c>)
 800e17e:	687a      	ldr	r2, [r7, #4]
 800e180:	4613      	mov	r3, r2
 800e182:	005b      	lsls	r3, r3, #1
 800e184:	4413      	add	r3, r2
 800e186:	00db      	lsls	r3, r3, #3
 800e188:	440b      	add	r3, r1
 800e18a:	3314      	adds	r3, #20
 800e18c:	2202      	movs	r2, #2
 800e18e:	701a      	strb	r2, [r3, #0]
 800e190:	e01e      	b.n	800e1d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e192:	4915      	ldr	r1, [pc, #84]	@ (800e1e8 <etharp_tmr+0x14c>)
 800e194:	687a      	ldr	r2, [r7, #4]
 800e196:	4613      	mov	r3, r2
 800e198:	005b      	lsls	r3, r3, #1
 800e19a:	4413      	add	r3, r2
 800e19c:	00db      	lsls	r3, r3, #3
 800e19e:	440b      	add	r3, r1
 800e1a0:	3314      	adds	r3, #20
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d113      	bne.n	800e1d0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e1a8:	490f      	ldr	r1, [pc, #60]	@ (800e1e8 <etharp_tmr+0x14c>)
 800e1aa:	687a      	ldr	r2, [r7, #4]
 800e1ac:	4613      	mov	r3, r2
 800e1ae:	005b      	lsls	r3, r3, #1
 800e1b0:	4413      	add	r3, r2
 800e1b2:	00db      	lsls	r3, r3, #3
 800e1b4:	440b      	add	r3, r1
 800e1b6:	3308      	adds	r3, #8
 800e1b8:	6818      	ldr	r0, [r3, #0]
 800e1ba:	687a      	ldr	r2, [r7, #4]
 800e1bc:	4613      	mov	r3, r2
 800e1be:	005b      	lsls	r3, r3, #1
 800e1c0:	4413      	add	r3, r2
 800e1c2:	00db      	lsls	r3, r3, #3
 800e1c4:	4a08      	ldr	r2, [pc, #32]	@ (800e1e8 <etharp_tmr+0x14c>)
 800e1c6:	4413      	add	r3, r2
 800e1c8:	3304      	adds	r3, #4
 800e1ca:	4619      	mov	r1, r3
 800e1cc:	f000 fe6e 	bl	800eeac <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	607b      	str	r3, [r7, #4]
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2b09      	cmp	r3, #9
 800e1da:	f77f af65 	ble.w	800e0a8 <etharp_tmr+0xc>
      }
    }
  }
}
 800e1de:	bf00      	nop
 800e1e0:	bf00      	nop
 800e1e2:	3708      	adds	r7, #8
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}
 800e1e8:	20008ac4 	.word	0x20008ac4

0800e1ec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b08a      	sub	sp, #40	@ 0x28
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	60f8      	str	r0, [r7, #12]
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	607a      	str	r2, [r7, #4]
 800e1f8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e1fa:	230a      	movs	r3, #10
 800e1fc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e1fe:	230a      	movs	r3, #10
 800e200:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e202:	230a      	movs	r3, #10
 800e204:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800e206:	2300      	movs	r3, #0
 800e208:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e20a:	230a      	movs	r3, #10
 800e20c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e20e:	2300      	movs	r3, #0
 800e210:	83bb      	strh	r3, [r7, #28]
 800e212:	2300      	movs	r3, #0
 800e214:	837b      	strh	r3, [r7, #26]
 800e216:	2300      	movs	r3, #0
 800e218:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e21a:	2300      	movs	r3, #0
 800e21c:	843b      	strh	r3, [r7, #32]
 800e21e:	e0ae      	b.n	800e37e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e220:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e224:	49a6      	ldr	r1, [pc, #664]	@ (800e4c0 <etharp_find_entry+0x2d4>)
 800e226:	4613      	mov	r3, r2
 800e228:	005b      	lsls	r3, r3, #1
 800e22a:	4413      	add	r3, r2
 800e22c:	00db      	lsls	r3, r3, #3
 800e22e:	440b      	add	r3, r1
 800e230:	3314      	adds	r3, #20
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e236:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800e23a:	2b0a      	cmp	r3, #10
 800e23c:	d105      	bne.n	800e24a <etharp_find_entry+0x5e>
 800e23e:	7dfb      	ldrb	r3, [r7, #23]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d102      	bne.n	800e24a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e244:	8c3b      	ldrh	r3, [r7, #32]
 800e246:	847b      	strh	r3, [r7, #34]	@ 0x22
 800e248:	e095      	b.n	800e376 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e24a:	7dfb      	ldrb	r3, [r7, #23]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	f000 8092 	beq.w	800e376 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e252:	7dfb      	ldrb	r3, [r7, #23]
 800e254:	2b01      	cmp	r3, #1
 800e256:	d009      	beq.n	800e26c <etharp_find_entry+0x80>
 800e258:	7dfb      	ldrb	r3, [r7, #23]
 800e25a:	2b01      	cmp	r3, #1
 800e25c:	d806      	bhi.n	800e26c <etharp_find_entry+0x80>
 800e25e:	4b99      	ldr	r3, [pc, #612]	@ (800e4c4 <etharp_find_entry+0x2d8>)
 800e260:	f240 1223 	movw	r2, #291	@ 0x123
 800e264:	4998      	ldr	r1, [pc, #608]	@ (800e4c8 <etharp_find_entry+0x2dc>)
 800e266:	4899      	ldr	r0, [pc, #612]	@ (800e4cc <etharp_find_entry+0x2e0>)
 800e268:	f002 fa8a 	bl	8010780 <printf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d020      	beq.n	800e2b4 <etharp_find_entry+0xc8>
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	6819      	ldr	r1, [r3, #0]
 800e276:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e27a:	4891      	ldr	r0, [pc, #580]	@ (800e4c0 <etharp_find_entry+0x2d4>)
 800e27c:	4613      	mov	r3, r2
 800e27e:	005b      	lsls	r3, r3, #1
 800e280:	4413      	add	r3, r2
 800e282:	00db      	lsls	r3, r3, #3
 800e284:	4403      	add	r3, r0
 800e286:	3304      	adds	r3, #4
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	4299      	cmp	r1, r3
 800e28c:	d112      	bne.n	800e2b4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d00c      	beq.n	800e2ae <etharp_find_entry+0xc2>
 800e294:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e298:	4989      	ldr	r1, [pc, #548]	@ (800e4c0 <etharp_find_entry+0x2d4>)
 800e29a:	4613      	mov	r3, r2
 800e29c:	005b      	lsls	r3, r3, #1
 800e29e:	4413      	add	r3, r2
 800e2a0:	00db      	lsls	r3, r3, #3
 800e2a2:	440b      	add	r3, r1
 800e2a4:	3308      	adds	r3, #8
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	687a      	ldr	r2, [r7, #4]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d102      	bne.n	800e2b4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e2ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e2b2:	e100      	b.n	800e4b6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e2b4:	7dfb      	ldrb	r3, [r7, #23]
 800e2b6:	2b01      	cmp	r3, #1
 800e2b8:	d140      	bne.n	800e33c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e2ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2be:	4980      	ldr	r1, [pc, #512]	@ (800e4c0 <etharp_find_entry+0x2d4>)
 800e2c0:	4613      	mov	r3, r2
 800e2c2:	005b      	lsls	r3, r3, #1
 800e2c4:	4413      	add	r3, r2
 800e2c6:	00db      	lsls	r3, r3, #3
 800e2c8:	440b      	add	r3, r1
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d01a      	beq.n	800e306 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e2d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2d4:	497a      	ldr	r1, [pc, #488]	@ (800e4c0 <etharp_find_entry+0x2d4>)
 800e2d6:	4613      	mov	r3, r2
 800e2d8:	005b      	lsls	r3, r3, #1
 800e2da:	4413      	add	r3, r2
 800e2dc:	00db      	lsls	r3, r3, #3
 800e2de:	440b      	add	r3, r1
 800e2e0:	3312      	adds	r3, #18
 800e2e2:	881b      	ldrh	r3, [r3, #0]
 800e2e4:	8bba      	ldrh	r2, [r7, #28]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d845      	bhi.n	800e376 <etharp_find_entry+0x18a>
            old_queue = i;
 800e2ea:	8c3b      	ldrh	r3, [r7, #32]
 800e2ec:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e2ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2f2:	4973      	ldr	r1, [pc, #460]	@ (800e4c0 <etharp_find_entry+0x2d4>)
 800e2f4:	4613      	mov	r3, r2
 800e2f6:	005b      	lsls	r3, r3, #1
 800e2f8:	4413      	add	r3, r2
 800e2fa:	00db      	lsls	r3, r3, #3
 800e2fc:	440b      	add	r3, r1
 800e2fe:	3312      	adds	r3, #18
 800e300:	881b      	ldrh	r3, [r3, #0]
 800e302:	83bb      	strh	r3, [r7, #28]
 800e304:	e037      	b.n	800e376 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e306:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e30a:	496d      	ldr	r1, [pc, #436]	@ (800e4c0 <etharp_find_entry+0x2d4>)
 800e30c:	4613      	mov	r3, r2
 800e30e:	005b      	lsls	r3, r3, #1
 800e310:	4413      	add	r3, r2
 800e312:	00db      	lsls	r3, r3, #3
 800e314:	440b      	add	r3, r1
 800e316:	3312      	adds	r3, #18
 800e318:	881b      	ldrh	r3, [r3, #0]
 800e31a:	8b7a      	ldrh	r2, [r7, #26]
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d82a      	bhi.n	800e376 <etharp_find_entry+0x18a>
            old_pending = i;
 800e320:	8c3b      	ldrh	r3, [r7, #32]
 800e322:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800e324:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e328:	4965      	ldr	r1, [pc, #404]	@ (800e4c0 <etharp_find_entry+0x2d4>)
 800e32a:	4613      	mov	r3, r2
 800e32c:	005b      	lsls	r3, r3, #1
 800e32e:	4413      	add	r3, r2
 800e330:	00db      	lsls	r3, r3, #3
 800e332:	440b      	add	r3, r1
 800e334:	3312      	adds	r3, #18
 800e336:	881b      	ldrh	r3, [r3, #0]
 800e338:	837b      	strh	r3, [r7, #26]
 800e33a:	e01c      	b.n	800e376 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e33c:	7dfb      	ldrb	r3, [r7, #23]
 800e33e:	2b01      	cmp	r3, #1
 800e340:	d919      	bls.n	800e376 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e342:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e346:	495e      	ldr	r1, [pc, #376]	@ (800e4c0 <etharp_find_entry+0x2d4>)
 800e348:	4613      	mov	r3, r2
 800e34a:	005b      	lsls	r3, r3, #1
 800e34c:	4413      	add	r3, r2
 800e34e:	00db      	lsls	r3, r3, #3
 800e350:	440b      	add	r3, r1
 800e352:	3312      	adds	r3, #18
 800e354:	881b      	ldrh	r3, [r3, #0]
 800e356:	8b3a      	ldrh	r2, [r7, #24]
 800e358:	429a      	cmp	r2, r3
 800e35a:	d80c      	bhi.n	800e376 <etharp_find_entry+0x18a>
            old_stable = i;
 800e35c:	8c3b      	ldrh	r3, [r7, #32]
 800e35e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800e360:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e364:	4956      	ldr	r1, [pc, #344]	@ (800e4c0 <etharp_find_entry+0x2d4>)
 800e366:	4613      	mov	r3, r2
 800e368:	005b      	lsls	r3, r3, #1
 800e36a:	4413      	add	r3, r2
 800e36c:	00db      	lsls	r3, r3, #3
 800e36e:	440b      	add	r3, r1
 800e370:	3312      	adds	r3, #18
 800e372:	881b      	ldrh	r3, [r3, #0]
 800e374:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e376:	8c3b      	ldrh	r3, [r7, #32]
 800e378:	3301      	adds	r3, #1
 800e37a:	b29b      	uxth	r3, r3
 800e37c:	843b      	strh	r3, [r7, #32]
 800e37e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e382:	2b09      	cmp	r3, #9
 800e384:	f77f af4c 	ble.w	800e220 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e388:	7afb      	ldrb	r3, [r7, #11]
 800e38a:	f003 0302 	and.w	r3, r3, #2
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d108      	bne.n	800e3a4 <etharp_find_entry+0x1b8>
 800e392:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800e396:	2b0a      	cmp	r3, #10
 800e398:	d107      	bne.n	800e3aa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e39a:	7afb      	ldrb	r3, [r7, #11]
 800e39c:	f003 0301 	and.w	r3, r3, #1
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d102      	bne.n	800e3aa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e3a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e3a8:	e085      	b.n	800e4b6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e3aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800e3ae:	2b09      	cmp	r3, #9
 800e3b0:	dc02      	bgt.n	800e3b8 <etharp_find_entry+0x1cc>
    i = empty;
 800e3b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e3b4:	843b      	strh	r3, [r7, #32]
 800e3b6:	e039      	b.n	800e42c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e3b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800e3bc:	2b09      	cmp	r3, #9
 800e3be:	dc14      	bgt.n	800e3ea <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e3c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e3c2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e3c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e3c8:	493d      	ldr	r1, [pc, #244]	@ (800e4c0 <etharp_find_entry+0x2d4>)
 800e3ca:	4613      	mov	r3, r2
 800e3cc:	005b      	lsls	r3, r3, #1
 800e3ce:	4413      	add	r3, r2
 800e3d0:	00db      	lsls	r3, r3, #3
 800e3d2:	440b      	add	r3, r1
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d018      	beq.n	800e40c <etharp_find_entry+0x220>
 800e3da:	4b3a      	ldr	r3, [pc, #232]	@ (800e4c4 <etharp_find_entry+0x2d8>)
 800e3dc:	f240 126d 	movw	r2, #365	@ 0x16d
 800e3e0:	493b      	ldr	r1, [pc, #236]	@ (800e4d0 <etharp_find_entry+0x2e4>)
 800e3e2:	483a      	ldr	r0, [pc, #232]	@ (800e4cc <etharp_find_entry+0x2e0>)
 800e3e4:	f002 f9cc 	bl	8010780 <printf>
 800e3e8:	e010      	b.n	800e40c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e3ea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800e3ee:	2b09      	cmp	r3, #9
 800e3f0:	dc02      	bgt.n	800e3f8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e3f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e3f4:	843b      	strh	r3, [r7, #32]
 800e3f6:	e009      	b.n	800e40c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e3f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e3fc:	2b09      	cmp	r3, #9
 800e3fe:	dc02      	bgt.n	800e406 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e400:	8bfb      	ldrh	r3, [r7, #30]
 800e402:	843b      	strh	r3, [r7, #32]
 800e404:	e002      	b.n	800e40c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e406:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e40a:	e054      	b.n	800e4b6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e40c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e410:	2b09      	cmp	r3, #9
 800e412:	dd06      	ble.n	800e422 <etharp_find_entry+0x236>
 800e414:	4b2b      	ldr	r3, [pc, #172]	@ (800e4c4 <etharp_find_entry+0x2d8>)
 800e416:	f240 127f 	movw	r2, #383	@ 0x17f
 800e41a:	492e      	ldr	r1, [pc, #184]	@ (800e4d4 <etharp_find_entry+0x2e8>)
 800e41c:	482b      	ldr	r0, [pc, #172]	@ (800e4cc <etharp_find_entry+0x2e0>)
 800e41e:	f002 f9af 	bl	8010780 <printf>
    etharp_free_entry(i);
 800e422:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e426:	4618      	mov	r0, r3
 800e428:	f7ff fe06 	bl	800e038 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e42c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e430:	2b09      	cmp	r3, #9
 800e432:	dd06      	ble.n	800e442 <etharp_find_entry+0x256>
 800e434:	4b23      	ldr	r3, [pc, #140]	@ (800e4c4 <etharp_find_entry+0x2d8>)
 800e436:	f240 1283 	movw	r2, #387	@ 0x183
 800e43a:	4926      	ldr	r1, [pc, #152]	@ (800e4d4 <etharp_find_entry+0x2e8>)
 800e43c:	4823      	ldr	r0, [pc, #140]	@ (800e4cc <etharp_find_entry+0x2e0>)
 800e43e:	f002 f99f 	bl	8010780 <printf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e442:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e446:	491e      	ldr	r1, [pc, #120]	@ (800e4c0 <etharp_find_entry+0x2d4>)
 800e448:	4613      	mov	r3, r2
 800e44a:	005b      	lsls	r3, r3, #1
 800e44c:	4413      	add	r3, r2
 800e44e:	00db      	lsls	r3, r3, #3
 800e450:	440b      	add	r3, r1
 800e452:	3314      	adds	r3, #20
 800e454:	781b      	ldrb	r3, [r3, #0]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d006      	beq.n	800e468 <etharp_find_entry+0x27c>
 800e45a:	4b1a      	ldr	r3, [pc, #104]	@ (800e4c4 <etharp_find_entry+0x2d8>)
 800e45c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800e460:	491d      	ldr	r1, [pc, #116]	@ (800e4d8 <etharp_find_entry+0x2ec>)
 800e462:	481a      	ldr	r0, [pc, #104]	@ (800e4cc <etharp_find_entry+0x2e0>)
 800e464:	f002 f98c 	bl	8010780 <printf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d00b      	beq.n	800e486 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e46e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	6819      	ldr	r1, [r3, #0]
 800e476:	4812      	ldr	r0, [pc, #72]	@ (800e4c0 <etharp_find_entry+0x2d4>)
 800e478:	4613      	mov	r3, r2
 800e47a:	005b      	lsls	r3, r3, #1
 800e47c:	4413      	add	r3, r2
 800e47e:	00db      	lsls	r3, r3, #3
 800e480:	4403      	add	r3, r0
 800e482:	3304      	adds	r3, #4
 800e484:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e486:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e48a:	490d      	ldr	r1, [pc, #52]	@ (800e4c0 <etharp_find_entry+0x2d4>)
 800e48c:	4613      	mov	r3, r2
 800e48e:	005b      	lsls	r3, r3, #1
 800e490:	4413      	add	r3, r2
 800e492:	00db      	lsls	r3, r3, #3
 800e494:	440b      	add	r3, r1
 800e496:	3312      	adds	r3, #18
 800e498:	2200      	movs	r2, #0
 800e49a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e49c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e4a0:	4907      	ldr	r1, [pc, #28]	@ (800e4c0 <etharp_find_entry+0x2d4>)
 800e4a2:	4613      	mov	r3, r2
 800e4a4:	005b      	lsls	r3, r3, #1
 800e4a6:	4413      	add	r3, r2
 800e4a8:	00db      	lsls	r3, r3, #3
 800e4aa:	440b      	add	r3, r1
 800e4ac:	3308      	adds	r3, #8
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e4b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3728      	adds	r7, #40	@ 0x28
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}
 800e4be:	bf00      	nop
 800e4c0:	20008ac4 	.word	0x20008ac4
 800e4c4:	080173ac 	.word	0x080173ac
 800e4c8:	080173e4 	.word	0x080173e4
 800e4cc:	08017424 	.word	0x08017424
 800e4d0:	0801744c 	.word	0x0801744c
 800e4d4:	08017464 	.word	0x08017464
 800e4d8:	08017478 	.word	0x08017478

0800e4dc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b088      	sub	sp, #32
 800e4e0:	af02      	add	r7, sp, #8
 800e4e2:	60f8      	str	r0, [r7, #12]
 800e4e4:	60b9      	str	r1, [r7, #8]
 800e4e6:	607a      	str	r2, [r7, #4]
 800e4e8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e4f0:	2b06      	cmp	r3, #6
 800e4f2:	d006      	beq.n	800e502 <etharp_update_arp_entry+0x26>
 800e4f4:	4b48      	ldr	r3, [pc, #288]	@ (800e618 <etharp_update_arp_entry+0x13c>)
 800e4f6:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800e4fa:	4948      	ldr	r1, [pc, #288]	@ (800e61c <etharp_update_arp_entry+0x140>)
 800e4fc:	4848      	ldr	r0, [pc, #288]	@ (800e620 <etharp_update_arp_entry+0x144>)
 800e4fe:	f002 f93f 	bl	8010780 <printf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d012      	beq.n	800e52e <etharp_update_arp_entry+0x52>
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d00e      	beq.n	800e52e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	68f9      	ldr	r1, [r7, #12]
 800e516:	4618      	mov	r0, r3
 800e518:	f001 f8fe 	bl	800f718 <ip4_addr_isbroadcast_u32>
 800e51c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d105      	bne.n	800e52e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e52a:	2be0      	cmp	r3, #224	@ 0xe0
 800e52c:	d102      	bne.n	800e534 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e52e:	f06f 030f 	mvn.w	r3, #15
 800e532:	e06c      	b.n	800e60e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e534:	78fb      	ldrb	r3, [r7, #3]
 800e536:	68fa      	ldr	r2, [r7, #12]
 800e538:	4619      	mov	r1, r3
 800e53a:	68b8      	ldr	r0, [r7, #8]
 800e53c:	f7ff fe56 	bl	800e1ec <etharp_find_entry>
 800e540:	4603      	mov	r3, r0
 800e542:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e544:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	da02      	bge.n	800e552 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e54c:	8afb      	ldrh	r3, [r7, #22]
 800e54e:	b25b      	sxtb	r3, r3
 800e550:	e05d      	b.n	800e60e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e552:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e556:	4933      	ldr	r1, [pc, #204]	@ (800e624 <etharp_update_arp_entry+0x148>)
 800e558:	4613      	mov	r3, r2
 800e55a:	005b      	lsls	r3, r3, #1
 800e55c:	4413      	add	r3, r2
 800e55e:	00db      	lsls	r3, r3, #3
 800e560:	440b      	add	r3, r1
 800e562:	3314      	adds	r3, #20
 800e564:	2202      	movs	r2, #2
 800e566:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e568:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e56c:	492d      	ldr	r1, [pc, #180]	@ (800e624 <etharp_update_arp_entry+0x148>)
 800e56e:	4613      	mov	r3, r2
 800e570:	005b      	lsls	r3, r3, #1
 800e572:	4413      	add	r3, r2
 800e574:	00db      	lsls	r3, r3, #3
 800e576:	440b      	add	r3, r1
 800e578:	3308      	adds	r3, #8
 800e57a:	68fa      	ldr	r2, [r7, #12]
 800e57c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e57e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e582:	4613      	mov	r3, r2
 800e584:	005b      	lsls	r3, r3, #1
 800e586:	4413      	add	r3, r2
 800e588:	00db      	lsls	r3, r3, #3
 800e58a:	3308      	adds	r3, #8
 800e58c:	4a25      	ldr	r2, [pc, #148]	@ (800e624 <etharp_update_arp_entry+0x148>)
 800e58e:	4413      	add	r3, r2
 800e590:	3304      	adds	r3, #4
 800e592:	2206      	movs	r2, #6
 800e594:	6879      	ldr	r1, [r7, #4]
 800e596:	4618      	mov	r0, r3
 800e598:	f002 f9ee 	bl	8010978 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e59c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e5a0:	4920      	ldr	r1, [pc, #128]	@ (800e624 <etharp_update_arp_entry+0x148>)
 800e5a2:	4613      	mov	r3, r2
 800e5a4:	005b      	lsls	r3, r3, #1
 800e5a6:	4413      	add	r3, r2
 800e5a8:	00db      	lsls	r3, r3, #3
 800e5aa:	440b      	add	r3, r1
 800e5ac:	3312      	adds	r3, #18
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e5b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e5b6:	491b      	ldr	r1, [pc, #108]	@ (800e624 <etharp_update_arp_entry+0x148>)
 800e5b8:	4613      	mov	r3, r2
 800e5ba:	005b      	lsls	r3, r3, #1
 800e5bc:	4413      	add	r3, r2
 800e5be:	00db      	lsls	r3, r3, #3
 800e5c0:	440b      	add	r3, r1
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d021      	beq.n	800e60c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e5c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e5cc:	4915      	ldr	r1, [pc, #84]	@ (800e624 <etharp_update_arp_entry+0x148>)
 800e5ce:	4613      	mov	r3, r2
 800e5d0:	005b      	lsls	r3, r3, #1
 800e5d2:	4413      	add	r3, r2
 800e5d4:	00db      	lsls	r3, r3, #3
 800e5d6:	440b      	add	r3, r1
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e5dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e5e0:	4910      	ldr	r1, [pc, #64]	@ (800e624 <etharp_update_arp_entry+0x148>)
 800e5e2:	4613      	mov	r3, r2
 800e5e4:	005b      	lsls	r3, r3, #1
 800e5e6:	4413      	add	r3, r2
 800e5e8:	00db      	lsls	r3, r3, #3
 800e5ea:	440b      	add	r3, r1
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800e5f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e5fa:	9300      	str	r3, [sp, #0]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6939      	ldr	r1, [r7, #16]
 800e600:	68f8      	ldr	r0, [r7, #12]
 800e602:	f001 ff97 	bl	8010534 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e606:	6938      	ldr	r0, [r7, #16]
 800e608:	f7f9 fadc 	bl	8007bc4 <pbuf_free>
  }
  return ERR_OK;
 800e60c:	2300      	movs	r3, #0
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3718      	adds	r7, #24
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	080173ac 	.word	0x080173ac
 800e61c:	080174a4 	.word	0x080174a4
 800e620:	08017424 	.word	0x08017424
 800e624:	20008ac4 	.word	0x20008ac4

0800e628 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e630:	2300      	movs	r3, #0
 800e632:	60fb      	str	r3, [r7, #12]
 800e634:	e01e      	b.n	800e674 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e636:	4913      	ldr	r1, [pc, #76]	@ (800e684 <etharp_cleanup_netif+0x5c>)
 800e638:	68fa      	ldr	r2, [r7, #12]
 800e63a:	4613      	mov	r3, r2
 800e63c:	005b      	lsls	r3, r3, #1
 800e63e:	4413      	add	r3, r2
 800e640:	00db      	lsls	r3, r3, #3
 800e642:	440b      	add	r3, r1
 800e644:	3314      	adds	r3, #20
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e64a:	7afb      	ldrb	r3, [r7, #11]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d00e      	beq.n	800e66e <etharp_cleanup_netif+0x46>
 800e650:	490c      	ldr	r1, [pc, #48]	@ (800e684 <etharp_cleanup_netif+0x5c>)
 800e652:	68fa      	ldr	r2, [r7, #12]
 800e654:	4613      	mov	r3, r2
 800e656:	005b      	lsls	r3, r3, #1
 800e658:	4413      	add	r3, r2
 800e65a:	00db      	lsls	r3, r3, #3
 800e65c:	440b      	add	r3, r1
 800e65e:	3308      	adds	r3, #8
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	687a      	ldr	r2, [r7, #4]
 800e664:	429a      	cmp	r2, r3
 800e666:	d102      	bne.n	800e66e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e668:	68f8      	ldr	r0, [r7, #12]
 800e66a:	f7ff fce5 	bl	800e038 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	3301      	adds	r3, #1
 800e672:	60fb      	str	r3, [r7, #12]
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	2b09      	cmp	r3, #9
 800e678:	dddd      	ble.n	800e636 <etharp_cleanup_netif+0xe>
    }
  }
}
 800e67a:	bf00      	nop
 800e67c:	bf00      	nop
 800e67e:	3710      	adds	r7, #16
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}
 800e684:	20008ac4 	.word	0x20008ac4

0800e688 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e688:	b5b0      	push	{r4, r5, r7, lr}
 800e68a:	b08a      	sub	sp, #40	@ 0x28
 800e68c:	af04      	add	r7, sp, #16
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d107      	bne.n	800e6a8 <etharp_input+0x20>
 800e698:	4b3d      	ldr	r3, [pc, #244]	@ (800e790 <etharp_input+0x108>)
 800e69a:	f240 228a 	movw	r2, #650	@ 0x28a
 800e69e:	493d      	ldr	r1, [pc, #244]	@ (800e794 <etharp_input+0x10c>)
 800e6a0:	483d      	ldr	r0, [pc, #244]	@ (800e798 <etharp_input+0x110>)
 800e6a2:	f002 f86d 	bl	8010780 <printf>
 800e6a6:	e06f      	b.n	800e788 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	685b      	ldr	r3, [r3, #4]
 800e6ac:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	881b      	ldrh	r3, [r3, #0]
 800e6b2:	b29b      	uxth	r3, r3
 800e6b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e6b8:	d10c      	bne.n	800e6d4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e6be:	2b06      	cmp	r3, #6
 800e6c0:	d108      	bne.n	800e6d4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e6c6:	2b04      	cmp	r3, #4
 800e6c8:	d104      	bne.n	800e6d4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	885b      	ldrh	r3, [r3, #2]
 800e6ce:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e6d0:	2b08      	cmp	r3, #8
 800e6d2:	d003      	beq.n	800e6dc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f7f9 fa75 	bl	8007bc4 <pbuf_free>
    return;
 800e6da:	e055      	b.n	800e788 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	330e      	adds	r3, #14
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	3318      	adds	r3, #24
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	3304      	adds	r3, #4
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d102      	bne.n	800e6fc <etharp_input+0x74>
    for_us = 0;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	75fb      	strb	r3, [r7, #23]
 800e6fa:	e009      	b.n	800e710 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e6fc:	68ba      	ldr	r2, [r7, #8]
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	3304      	adds	r3, #4
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	429a      	cmp	r2, r3
 800e706:	bf0c      	ite	eq
 800e708:	2301      	moveq	r3, #1
 800e70a:	2300      	movne	r3, #0
 800e70c:	b2db      	uxtb	r3, r3
 800e70e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	f103 0208 	add.w	r2, r3, #8
 800e716:	7dfb      	ldrb	r3, [r7, #23]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d001      	beq.n	800e720 <etharp_input+0x98>
 800e71c:	2301      	movs	r3, #1
 800e71e:	e000      	b.n	800e722 <etharp_input+0x9a>
 800e720:	2302      	movs	r3, #2
 800e722:	f107 010c 	add.w	r1, r7, #12
 800e726:	6838      	ldr	r0, [r7, #0]
 800e728:	f7ff fed8 	bl	800e4dc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	88db      	ldrh	r3, [r3, #6]
 800e730:	b29b      	uxth	r3, r3
 800e732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e736:	d003      	beq.n	800e740 <etharp_input+0xb8>
 800e738:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e73c:	d01e      	beq.n	800e77c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e73e:	e020      	b.n	800e782 <etharp_input+0xfa>
      if (for_us) {
 800e740:	7dfb      	ldrb	r3, [r7, #23]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d01c      	beq.n	800e780 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e75c:	693a      	ldr	r2, [r7, #16]
 800e75e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e760:	2102      	movs	r1, #2
 800e762:	9103      	str	r1, [sp, #12]
 800e764:	f107 010c 	add.w	r1, r7, #12
 800e768:	9102      	str	r1, [sp, #8]
 800e76a:	9201      	str	r2, [sp, #4]
 800e76c:	9300      	str	r3, [sp, #0]
 800e76e:	462b      	mov	r3, r5
 800e770:	4622      	mov	r2, r4
 800e772:	4601      	mov	r1, r0
 800e774:	6838      	ldr	r0, [r7, #0]
 800e776:	f000 faeb 	bl	800ed50 <etharp_raw>
      break;
 800e77a:	e001      	b.n	800e780 <etharp_input+0xf8>
      break;
 800e77c:	bf00      	nop
 800e77e:	e000      	b.n	800e782 <etharp_input+0xfa>
      break;
 800e780:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f7f9 fa1e 	bl	8007bc4 <pbuf_free>
}
 800e788:	3718      	adds	r7, #24
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bdb0      	pop	{r4, r5, r7, pc}
 800e78e:	bf00      	nop
 800e790:	080173ac 	.word	0x080173ac
 800e794:	080174fc 	.word	0x080174fc
 800e798:	08017424 	.word	0x08017424

0800e79c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b086      	sub	sp, #24
 800e7a0:	af02      	add	r7, sp, #8
 800e7a2:	60f8      	str	r0, [r7, #12]
 800e7a4:	60b9      	str	r1, [r7, #8]
 800e7a6:	4613      	mov	r3, r2
 800e7a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e7aa:	79fa      	ldrb	r2, [r7, #7]
 800e7ac:	4944      	ldr	r1, [pc, #272]	@ (800e8c0 <etharp_output_to_arp_index+0x124>)
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	005b      	lsls	r3, r3, #1
 800e7b2:	4413      	add	r3, r2
 800e7b4:	00db      	lsls	r3, r3, #3
 800e7b6:	440b      	add	r3, r1
 800e7b8:	3314      	adds	r3, #20
 800e7ba:	781b      	ldrb	r3, [r3, #0]
 800e7bc:	2b01      	cmp	r3, #1
 800e7be:	d806      	bhi.n	800e7ce <etharp_output_to_arp_index+0x32>
 800e7c0:	4b40      	ldr	r3, [pc, #256]	@ (800e8c4 <etharp_output_to_arp_index+0x128>)
 800e7c2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e7c6:	4940      	ldr	r1, [pc, #256]	@ (800e8c8 <etharp_output_to_arp_index+0x12c>)
 800e7c8:	4840      	ldr	r0, [pc, #256]	@ (800e8cc <etharp_output_to_arp_index+0x130>)
 800e7ca:	f001 ffd9 	bl	8010780 <printf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e7ce:	79fa      	ldrb	r2, [r7, #7]
 800e7d0:	493b      	ldr	r1, [pc, #236]	@ (800e8c0 <etharp_output_to_arp_index+0x124>)
 800e7d2:	4613      	mov	r3, r2
 800e7d4:	005b      	lsls	r3, r3, #1
 800e7d6:	4413      	add	r3, r2
 800e7d8:	00db      	lsls	r3, r3, #3
 800e7da:	440b      	add	r3, r1
 800e7dc:	3314      	adds	r3, #20
 800e7de:	781b      	ldrb	r3, [r3, #0]
 800e7e0:	2b02      	cmp	r3, #2
 800e7e2:	d153      	bne.n	800e88c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e7e4:	79fa      	ldrb	r2, [r7, #7]
 800e7e6:	4936      	ldr	r1, [pc, #216]	@ (800e8c0 <etharp_output_to_arp_index+0x124>)
 800e7e8:	4613      	mov	r3, r2
 800e7ea:	005b      	lsls	r3, r3, #1
 800e7ec:	4413      	add	r3, r2
 800e7ee:	00db      	lsls	r3, r3, #3
 800e7f0:	440b      	add	r3, r1
 800e7f2:	3312      	adds	r3, #18
 800e7f4:	881b      	ldrh	r3, [r3, #0]
 800e7f6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800e7fa:	d919      	bls.n	800e830 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e7fc:	79fa      	ldrb	r2, [r7, #7]
 800e7fe:	4613      	mov	r3, r2
 800e800:	005b      	lsls	r3, r3, #1
 800e802:	4413      	add	r3, r2
 800e804:	00db      	lsls	r3, r3, #3
 800e806:	4a2e      	ldr	r2, [pc, #184]	@ (800e8c0 <etharp_output_to_arp_index+0x124>)
 800e808:	4413      	add	r3, r2
 800e80a:	3304      	adds	r3, #4
 800e80c:	4619      	mov	r1, r3
 800e80e:	68f8      	ldr	r0, [r7, #12]
 800e810:	f000 fb4c 	bl	800eeac <etharp_request>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	d138      	bne.n	800e88c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e81a:	79fa      	ldrb	r2, [r7, #7]
 800e81c:	4928      	ldr	r1, [pc, #160]	@ (800e8c0 <etharp_output_to_arp_index+0x124>)
 800e81e:	4613      	mov	r3, r2
 800e820:	005b      	lsls	r3, r3, #1
 800e822:	4413      	add	r3, r2
 800e824:	00db      	lsls	r3, r3, #3
 800e826:	440b      	add	r3, r1
 800e828:	3314      	adds	r3, #20
 800e82a:	2203      	movs	r2, #3
 800e82c:	701a      	strb	r2, [r3, #0]
 800e82e:	e02d      	b.n	800e88c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e830:	79fa      	ldrb	r2, [r7, #7]
 800e832:	4923      	ldr	r1, [pc, #140]	@ (800e8c0 <etharp_output_to_arp_index+0x124>)
 800e834:	4613      	mov	r3, r2
 800e836:	005b      	lsls	r3, r3, #1
 800e838:	4413      	add	r3, r2
 800e83a:	00db      	lsls	r3, r3, #3
 800e83c:	440b      	add	r3, r1
 800e83e:	3312      	adds	r3, #18
 800e840:	881b      	ldrh	r3, [r3, #0]
 800e842:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800e846:	d321      	bcc.n	800e88c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e848:	79fa      	ldrb	r2, [r7, #7]
 800e84a:	4613      	mov	r3, r2
 800e84c:	005b      	lsls	r3, r3, #1
 800e84e:	4413      	add	r3, r2
 800e850:	00db      	lsls	r3, r3, #3
 800e852:	4a1b      	ldr	r2, [pc, #108]	@ (800e8c0 <etharp_output_to_arp_index+0x124>)
 800e854:	4413      	add	r3, r2
 800e856:	1d19      	adds	r1, r3, #4
 800e858:	79fa      	ldrb	r2, [r7, #7]
 800e85a:	4613      	mov	r3, r2
 800e85c:	005b      	lsls	r3, r3, #1
 800e85e:	4413      	add	r3, r2
 800e860:	00db      	lsls	r3, r3, #3
 800e862:	3308      	adds	r3, #8
 800e864:	4a16      	ldr	r2, [pc, #88]	@ (800e8c0 <etharp_output_to_arp_index+0x124>)
 800e866:	4413      	add	r3, r2
 800e868:	3304      	adds	r3, #4
 800e86a:	461a      	mov	r2, r3
 800e86c:	68f8      	ldr	r0, [r7, #12]
 800e86e:	f000 fafb 	bl	800ee68 <etharp_request_dst>
 800e872:	4603      	mov	r3, r0
 800e874:	2b00      	cmp	r3, #0
 800e876:	d109      	bne.n	800e88c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e878:	79fa      	ldrb	r2, [r7, #7]
 800e87a:	4911      	ldr	r1, [pc, #68]	@ (800e8c0 <etharp_output_to_arp_index+0x124>)
 800e87c:	4613      	mov	r3, r2
 800e87e:	005b      	lsls	r3, r3, #1
 800e880:	4413      	add	r3, r2
 800e882:	00db      	lsls	r3, r3, #3
 800e884:	440b      	add	r3, r1
 800e886:	3314      	adds	r3, #20
 800e888:	2203      	movs	r2, #3
 800e88a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800e892:	79fa      	ldrb	r2, [r7, #7]
 800e894:	4613      	mov	r3, r2
 800e896:	005b      	lsls	r3, r3, #1
 800e898:	4413      	add	r3, r2
 800e89a:	00db      	lsls	r3, r3, #3
 800e89c:	3308      	adds	r3, #8
 800e89e:	4a08      	ldr	r2, [pc, #32]	@ (800e8c0 <etharp_output_to_arp_index+0x124>)
 800e8a0:	4413      	add	r3, r2
 800e8a2:	3304      	adds	r3, #4
 800e8a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e8a8:	9200      	str	r2, [sp, #0]
 800e8aa:	460a      	mov	r2, r1
 800e8ac:	68b9      	ldr	r1, [r7, #8]
 800e8ae:	68f8      	ldr	r0, [r7, #12]
 800e8b0:	f001 fe40 	bl	8010534 <ethernet_output>
 800e8b4:	4603      	mov	r3, r0
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3710      	adds	r7, #16
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	20008ac4 	.word	0x20008ac4
 800e8c4:	080173ac 	.word	0x080173ac
 800e8c8:	0801751c 	.word	0x0801751c
 800e8cc:	08017424 	.word	0x08017424

0800e8d0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b08a      	sub	sp, #40	@ 0x28
 800e8d4:	af02      	add	r7, sp, #8
 800e8d6:	60f8      	str	r0, [r7, #12]
 800e8d8:	60b9      	str	r1, [r7, #8]
 800e8da:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d106      	bne.n	800e8f4 <etharp_output+0x24>
 800e8e6:	4b73      	ldr	r3, [pc, #460]	@ (800eab4 <etharp_output+0x1e4>)
 800e8e8:	f240 321e 	movw	r2, #798	@ 0x31e
 800e8ec:	4972      	ldr	r1, [pc, #456]	@ (800eab8 <etharp_output+0x1e8>)
 800e8ee:	4873      	ldr	r0, [pc, #460]	@ (800eabc <etharp_output+0x1ec>)
 800e8f0:	f001 ff46 	bl	8010780 <printf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d106      	bne.n	800e908 <etharp_output+0x38>
 800e8fa:	4b6e      	ldr	r3, [pc, #440]	@ (800eab4 <etharp_output+0x1e4>)
 800e8fc:	f240 321f 	movw	r2, #799	@ 0x31f
 800e900:	496f      	ldr	r1, [pc, #444]	@ (800eac0 <etharp_output+0x1f0>)
 800e902:	486e      	ldr	r0, [pc, #440]	@ (800eabc <etharp_output+0x1ec>)
 800e904:	f001 ff3c 	bl	8010780 <printf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d106      	bne.n	800e91c <etharp_output+0x4c>
 800e90e:	4b69      	ldr	r3, [pc, #420]	@ (800eab4 <etharp_output+0x1e4>)
 800e910:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800e914:	496b      	ldr	r1, [pc, #428]	@ (800eac4 <etharp_output+0x1f4>)
 800e916:	4869      	ldr	r0, [pc, #420]	@ (800eabc <etharp_output+0x1ec>)
 800e918:	f001 ff32 	bl	8010780 <printf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	68f9      	ldr	r1, [r7, #12]
 800e922:	4618      	mov	r0, r3
 800e924:	f000 fef8 	bl	800f718 <ip4_addr_isbroadcast_u32>
 800e928:	4603      	mov	r3, r0
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d002      	beq.n	800e934 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e92e:	4b66      	ldr	r3, [pc, #408]	@ (800eac8 <etharp_output+0x1f8>)
 800e930:	61fb      	str	r3, [r7, #28]
 800e932:	e0af      	b.n	800ea94 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e93c:	2be0      	cmp	r3, #224	@ 0xe0
 800e93e:	d118      	bne.n	800e972 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e940:	2301      	movs	r3, #1
 800e942:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e944:	2300      	movs	r3, #0
 800e946:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e948:	235e      	movs	r3, #94	@ 0x5e
 800e94a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	3301      	adds	r3, #1
 800e950:	781b      	ldrb	r3, [r3, #0]
 800e952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e956:	b2db      	uxtb	r3, r3
 800e958:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	3302      	adds	r3, #2
 800e95e:	781b      	ldrb	r3, [r3, #0]
 800e960:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	3303      	adds	r3, #3
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e96a:	f107 0310 	add.w	r3, r7, #16
 800e96e:	61fb      	str	r3, [r7, #28]
 800e970:	e090      	b.n	800ea94 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681a      	ldr	r2, [r3, #0]
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	3304      	adds	r3, #4
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	405a      	eors	r2, r3
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	3308      	adds	r3, #8
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	4013      	ands	r3, r2
 800e986:	2b00      	cmp	r3, #0
 800e988:	d012      	beq.n	800e9b0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e990:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800e994:	4293      	cmp	r3, r2
 800e996:	d00b      	beq.n	800e9b0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	330c      	adds	r3, #12
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d003      	beq.n	800e9aa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	330c      	adds	r3, #12
 800e9a6:	61bb      	str	r3, [r7, #24]
 800e9a8:	e002      	b.n	800e9b0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e9aa:	f06f 0303 	mvn.w	r3, #3
 800e9ae:	e07d      	b.n	800eaac <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e9b0:	4b46      	ldr	r3, [pc, #280]	@ (800eacc <etharp_output+0x1fc>)
 800e9b2:	781b      	ldrb	r3, [r3, #0]
 800e9b4:	4619      	mov	r1, r3
 800e9b6:	4a46      	ldr	r2, [pc, #280]	@ (800ead0 <etharp_output+0x200>)
 800e9b8:	460b      	mov	r3, r1
 800e9ba:	005b      	lsls	r3, r3, #1
 800e9bc:	440b      	add	r3, r1
 800e9be:	00db      	lsls	r3, r3, #3
 800e9c0:	4413      	add	r3, r2
 800e9c2:	3314      	adds	r3, #20
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	2b01      	cmp	r3, #1
 800e9c8:	d925      	bls.n	800ea16 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e9ca:	4b40      	ldr	r3, [pc, #256]	@ (800eacc <etharp_output+0x1fc>)
 800e9cc:	781b      	ldrb	r3, [r3, #0]
 800e9ce:	4619      	mov	r1, r3
 800e9d0:	4a3f      	ldr	r2, [pc, #252]	@ (800ead0 <etharp_output+0x200>)
 800e9d2:	460b      	mov	r3, r1
 800e9d4:	005b      	lsls	r3, r3, #1
 800e9d6:	440b      	add	r3, r1
 800e9d8:	00db      	lsls	r3, r3, #3
 800e9da:	4413      	add	r3, r2
 800e9dc:	3308      	adds	r3, #8
 800e9de:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e9e0:	68fa      	ldr	r2, [r7, #12]
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d117      	bne.n	800ea16 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e9e6:	69bb      	ldr	r3, [r7, #24]
 800e9e8:	681a      	ldr	r2, [r3, #0]
 800e9ea:	4b38      	ldr	r3, [pc, #224]	@ (800eacc <etharp_output+0x1fc>)
 800e9ec:	781b      	ldrb	r3, [r3, #0]
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	4937      	ldr	r1, [pc, #220]	@ (800ead0 <etharp_output+0x200>)
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	005b      	lsls	r3, r3, #1
 800e9f6:	4403      	add	r3, r0
 800e9f8:	00db      	lsls	r3, r3, #3
 800e9fa:	440b      	add	r3, r1
 800e9fc:	3304      	adds	r3, #4
 800e9fe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d108      	bne.n	800ea16 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ea04:	4b31      	ldr	r3, [pc, #196]	@ (800eacc <etharp_output+0x1fc>)
 800ea06:	781b      	ldrb	r3, [r3, #0]
 800ea08:	461a      	mov	r2, r3
 800ea0a:	68b9      	ldr	r1, [r7, #8]
 800ea0c:	68f8      	ldr	r0, [r7, #12]
 800ea0e:	f7ff fec5 	bl	800e79c <etharp_output_to_arp_index>
 800ea12:	4603      	mov	r3, r0
 800ea14:	e04a      	b.n	800eaac <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ea16:	2300      	movs	r3, #0
 800ea18:	75fb      	strb	r3, [r7, #23]
 800ea1a:	e031      	b.n	800ea80 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ea1c:	7dfa      	ldrb	r2, [r7, #23]
 800ea1e:	492c      	ldr	r1, [pc, #176]	@ (800ead0 <etharp_output+0x200>)
 800ea20:	4613      	mov	r3, r2
 800ea22:	005b      	lsls	r3, r3, #1
 800ea24:	4413      	add	r3, r2
 800ea26:	00db      	lsls	r3, r3, #3
 800ea28:	440b      	add	r3, r1
 800ea2a:	3314      	adds	r3, #20
 800ea2c:	781b      	ldrb	r3, [r3, #0]
 800ea2e:	2b01      	cmp	r3, #1
 800ea30:	d923      	bls.n	800ea7a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800ea32:	7dfa      	ldrb	r2, [r7, #23]
 800ea34:	4926      	ldr	r1, [pc, #152]	@ (800ead0 <etharp_output+0x200>)
 800ea36:	4613      	mov	r3, r2
 800ea38:	005b      	lsls	r3, r3, #1
 800ea3a:	4413      	add	r3, r2
 800ea3c:	00db      	lsls	r3, r3, #3
 800ea3e:	440b      	add	r3, r1
 800ea40:	3308      	adds	r3, #8
 800ea42:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ea44:	68fa      	ldr	r2, [r7, #12]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d117      	bne.n	800ea7a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ea4a:	69bb      	ldr	r3, [r7, #24]
 800ea4c:	6819      	ldr	r1, [r3, #0]
 800ea4e:	7dfa      	ldrb	r2, [r7, #23]
 800ea50:	481f      	ldr	r0, [pc, #124]	@ (800ead0 <etharp_output+0x200>)
 800ea52:	4613      	mov	r3, r2
 800ea54:	005b      	lsls	r3, r3, #1
 800ea56:	4413      	add	r3, r2
 800ea58:	00db      	lsls	r3, r3, #3
 800ea5a:	4403      	add	r3, r0
 800ea5c:	3304      	adds	r3, #4
 800ea5e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800ea60:	4299      	cmp	r1, r3
 800ea62:	d10a      	bne.n	800ea7a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800ea64:	4a19      	ldr	r2, [pc, #100]	@ (800eacc <etharp_output+0x1fc>)
 800ea66:	7dfb      	ldrb	r3, [r7, #23]
 800ea68:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ea6a:	7dfb      	ldrb	r3, [r7, #23]
 800ea6c:	461a      	mov	r2, r3
 800ea6e:	68b9      	ldr	r1, [r7, #8]
 800ea70:	68f8      	ldr	r0, [r7, #12]
 800ea72:	f7ff fe93 	bl	800e79c <etharp_output_to_arp_index>
 800ea76:	4603      	mov	r3, r0
 800ea78:	e018      	b.n	800eaac <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ea7a:	7dfb      	ldrb	r3, [r7, #23]
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	75fb      	strb	r3, [r7, #23]
 800ea80:	7dfb      	ldrb	r3, [r7, #23]
 800ea82:	2b09      	cmp	r3, #9
 800ea84:	d9ca      	bls.n	800ea1c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ea86:	68ba      	ldr	r2, [r7, #8]
 800ea88:	69b9      	ldr	r1, [r7, #24]
 800ea8a:	68f8      	ldr	r0, [r7, #12]
 800ea8c:	f000 f822 	bl	800ead4 <etharp_query>
 800ea90:	4603      	mov	r3, r0
 800ea92:	e00b      	b.n	800eaac <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800ea9a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ea9e:	9300      	str	r3, [sp, #0]
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	68b9      	ldr	r1, [r7, #8]
 800eaa4:	68f8      	ldr	r0, [r7, #12]
 800eaa6:	f001 fd45 	bl	8010534 <ethernet_output>
 800eaaa:	4603      	mov	r3, r0
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3720      	adds	r7, #32
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	080173ac 	.word	0x080173ac
 800eab8:	080174fc 	.word	0x080174fc
 800eabc:	08017424 	.word	0x08017424
 800eac0:	0801754c 	.word	0x0801754c
 800eac4:	080174ec 	.word	0x080174ec
 800eac8:	08017b60 	.word	0x08017b60
 800eacc:	20008bb4 	.word	0x20008bb4
 800ead0:	20008ac4 	.word	0x20008ac4

0800ead4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b08c      	sub	sp, #48	@ 0x30
 800ead8:	af02      	add	r7, sp, #8
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	60b9      	str	r1, [r7, #8]
 800eade:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	3326      	adds	r3, #38	@ 0x26
 800eae4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800eae6:	23ff      	movs	r3, #255	@ 0xff
 800eae8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800eaec:	2300      	movs	r3, #0
 800eaee:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	68f9      	ldr	r1, [r7, #12]
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f000 fe0e 	bl	800f718 <ip4_addr_isbroadcast_u32>
 800eafc:	4603      	mov	r3, r0
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d10c      	bne.n	800eb1c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800eb0a:	2be0      	cmp	r3, #224	@ 0xe0
 800eb0c:	d006      	beq.n	800eb1c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d003      	beq.n	800eb1c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d102      	bne.n	800eb22 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800eb1c:	f06f 030f 	mvn.w	r3, #15
 800eb20:	e101      	b.n	800ed26 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800eb22:	68fa      	ldr	r2, [r7, #12]
 800eb24:	2101      	movs	r1, #1
 800eb26:	68b8      	ldr	r0, [r7, #8]
 800eb28:	f7ff fb60 	bl	800e1ec <etharp_find_entry>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800eb30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	da02      	bge.n	800eb3e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800eb38:	8a7b      	ldrh	r3, [r7, #18]
 800eb3a:	b25b      	sxtb	r3, r3
 800eb3c:	e0f3      	b.n	800ed26 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800eb3e:	8a7b      	ldrh	r3, [r7, #18]
 800eb40:	2b7e      	cmp	r3, #126	@ 0x7e
 800eb42:	d906      	bls.n	800eb52 <etharp_query+0x7e>
 800eb44:	4b7a      	ldr	r3, [pc, #488]	@ (800ed30 <etharp_query+0x25c>)
 800eb46:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800eb4a:	497a      	ldr	r1, [pc, #488]	@ (800ed34 <etharp_query+0x260>)
 800eb4c:	487a      	ldr	r0, [pc, #488]	@ (800ed38 <etharp_query+0x264>)
 800eb4e:	f001 fe17 	bl	8010780 <printf>
  i = (netif_addr_idx_t)i_err;
 800eb52:	8a7b      	ldrh	r3, [r7, #18]
 800eb54:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800eb56:	7c7a      	ldrb	r2, [r7, #17]
 800eb58:	4978      	ldr	r1, [pc, #480]	@ (800ed3c <etharp_query+0x268>)
 800eb5a:	4613      	mov	r3, r2
 800eb5c:	005b      	lsls	r3, r3, #1
 800eb5e:	4413      	add	r3, r2
 800eb60:	00db      	lsls	r3, r3, #3
 800eb62:	440b      	add	r3, r1
 800eb64:	3314      	adds	r3, #20
 800eb66:	781b      	ldrb	r3, [r3, #0]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d115      	bne.n	800eb98 <etharp_query+0xc4>
    is_new_entry = 1;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800eb70:	7c7a      	ldrb	r2, [r7, #17]
 800eb72:	4972      	ldr	r1, [pc, #456]	@ (800ed3c <etharp_query+0x268>)
 800eb74:	4613      	mov	r3, r2
 800eb76:	005b      	lsls	r3, r3, #1
 800eb78:	4413      	add	r3, r2
 800eb7a:	00db      	lsls	r3, r3, #3
 800eb7c:	440b      	add	r3, r1
 800eb7e:	3314      	adds	r3, #20
 800eb80:	2201      	movs	r2, #1
 800eb82:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800eb84:	7c7a      	ldrb	r2, [r7, #17]
 800eb86:	496d      	ldr	r1, [pc, #436]	@ (800ed3c <etharp_query+0x268>)
 800eb88:	4613      	mov	r3, r2
 800eb8a:	005b      	lsls	r3, r3, #1
 800eb8c:	4413      	add	r3, r2
 800eb8e:	00db      	lsls	r3, r3, #3
 800eb90:	440b      	add	r3, r1
 800eb92:	3308      	adds	r3, #8
 800eb94:	68fa      	ldr	r2, [r7, #12]
 800eb96:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800eb98:	7c7a      	ldrb	r2, [r7, #17]
 800eb9a:	4968      	ldr	r1, [pc, #416]	@ (800ed3c <etharp_query+0x268>)
 800eb9c:	4613      	mov	r3, r2
 800eb9e:	005b      	lsls	r3, r3, #1
 800eba0:	4413      	add	r3, r2
 800eba2:	00db      	lsls	r3, r3, #3
 800eba4:	440b      	add	r3, r1
 800eba6:	3314      	adds	r3, #20
 800eba8:	781b      	ldrb	r3, [r3, #0]
 800ebaa:	2b01      	cmp	r3, #1
 800ebac:	d011      	beq.n	800ebd2 <etharp_query+0xfe>
 800ebae:	7c7a      	ldrb	r2, [r7, #17]
 800ebb0:	4962      	ldr	r1, [pc, #392]	@ (800ed3c <etharp_query+0x268>)
 800ebb2:	4613      	mov	r3, r2
 800ebb4:	005b      	lsls	r3, r3, #1
 800ebb6:	4413      	add	r3, r2
 800ebb8:	00db      	lsls	r3, r3, #3
 800ebba:	440b      	add	r3, r1
 800ebbc:	3314      	adds	r3, #20
 800ebbe:	781b      	ldrb	r3, [r3, #0]
 800ebc0:	2b01      	cmp	r3, #1
 800ebc2:	d806      	bhi.n	800ebd2 <etharp_query+0xfe>
 800ebc4:	4b5a      	ldr	r3, [pc, #360]	@ (800ed30 <etharp_query+0x25c>)
 800ebc6:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800ebca:	495d      	ldr	r1, [pc, #372]	@ (800ed40 <etharp_query+0x26c>)
 800ebcc:	485a      	ldr	r0, [pc, #360]	@ (800ed38 <etharp_query+0x264>)
 800ebce:	f001 fdd7 	bl	8010780 <printf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ebd2:	6a3b      	ldr	r3, [r7, #32]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d102      	bne.n	800ebde <etharp_query+0x10a>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d10c      	bne.n	800ebf8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ebde:	68b9      	ldr	r1, [r7, #8]
 800ebe0:	68f8      	ldr	r0, [r7, #12]
 800ebe2:	f000 f963 	bl	800eeac <etharp_request>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d102      	bne.n	800ebf8 <etharp_query+0x124>
      return result;
 800ebf2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ebf6:	e096      	b.n	800ed26 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d106      	bne.n	800ec0c <etharp_query+0x138>
 800ebfe:	4b4c      	ldr	r3, [pc, #304]	@ (800ed30 <etharp_query+0x25c>)
 800ec00:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800ec04:	494f      	ldr	r1, [pc, #316]	@ (800ed44 <etharp_query+0x270>)
 800ec06:	484c      	ldr	r0, [pc, #304]	@ (800ed38 <etharp_query+0x264>)
 800ec08:	f001 fdba 	bl	8010780 <printf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ec0c:	7c7a      	ldrb	r2, [r7, #17]
 800ec0e:	494b      	ldr	r1, [pc, #300]	@ (800ed3c <etharp_query+0x268>)
 800ec10:	4613      	mov	r3, r2
 800ec12:	005b      	lsls	r3, r3, #1
 800ec14:	4413      	add	r3, r2
 800ec16:	00db      	lsls	r3, r3, #3
 800ec18:	440b      	add	r3, r1
 800ec1a:	3314      	adds	r3, #20
 800ec1c:	781b      	ldrb	r3, [r3, #0]
 800ec1e:	2b01      	cmp	r3, #1
 800ec20:	d917      	bls.n	800ec52 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ec22:	4a49      	ldr	r2, [pc, #292]	@ (800ed48 <etharp_query+0x274>)
 800ec24:	7c7b      	ldrb	r3, [r7, #17]
 800ec26:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ec28:	7c7a      	ldrb	r2, [r7, #17]
 800ec2a:	4613      	mov	r3, r2
 800ec2c:	005b      	lsls	r3, r3, #1
 800ec2e:	4413      	add	r3, r2
 800ec30:	00db      	lsls	r3, r3, #3
 800ec32:	3308      	adds	r3, #8
 800ec34:	4a41      	ldr	r2, [pc, #260]	@ (800ed3c <etharp_query+0x268>)
 800ec36:	4413      	add	r3, r2
 800ec38:	3304      	adds	r3, #4
 800ec3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ec3e:	9200      	str	r2, [sp, #0]
 800ec40:	697a      	ldr	r2, [r7, #20]
 800ec42:	6879      	ldr	r1, [r7, #4]
 800ec44:	68f8      	ldr	r0, [r7, #12]
 800ec46:	f001 fc75 	bl	8010534 <ethernet_output>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ec50:	e067      	b.n	800ed22 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ec52:	7c7a      	ldrb	r2, [r7, #17]
 800ec54:	4939      	ldr	r1, [pc, #228]	@ (800ed3c <etharp_query+0x268>)
 800ec56:	4613      	mov	r3, r2
 800ec58:	005b      	lsls	r3, r3, #1
 800ec5a:	4413      	add	r3, r2
 800ec5c:	00db      	lsls	r3, r3, #3
 800ec5e:	440b      	add	r3, r1
 800ec60:	3314      	adds	r3, #20
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d15c      	bne.n	800ed22 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ec70:	e01c      	b.n	800ecac <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ec72:	69fb      	ldr	r3, [r7, #28]
 800ec74:	895a      	ldrh	r2, [r3, #10]
 800ec76:	69fb      	ldr	r3, [r7, #28]
 800ec78:	891b      	ldrh	r3, [r3, #8]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d10a      	bne.n	800ec94 <etharp_query+0x1c0>
 800ec7e:	69fb      	ldr	r3, [r7, #28]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d006      	beq.n	800ec94 <etharp_query+0x1c0>
 800ec86:	4b2a      	ldr	r3, [pc, #168]	@ (800ed30 <etharp_query+0x25c>)
 800ec88:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800ec8c:	492f      	ldr	r1, [pc, #188]	@ (800ed4c <etharp_query+0x278>)
 800ec8e:	482a      	ldr	r0, [pc, #168]	@ (800ed38 <etharp_query+0x264>)
 800ec90:	f001 fd76 	bl	8010780 <printf>
      if (PBUF_NEEDS_COPY(p)) {
 800ec94:	69fb      	ldr	r3, [r7, #28]
 800ec96:	7b1b      	ldrb	r3, [r3, #12]
 800ec98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d002      	beq.n	800eca6 <etharp_query+0x1d2>
        copy_needed = 1;
 800eca0:	2301      	movs	r3, #1
 800eca2:	61bb      	str	r3, [r7, #24]
        break;
 800eca4:	e005      	b.n	800ecb2 <etharp_query+0x1de>
      }
      p = p->next;
 800eca6:	69fb      	ldr	r3, [r7, #28]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ecac:	69fb      	ldr	r3, [r7, #28]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d1df      	bne.n	800ec72 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800ecb2:	69bb      	ldr	r3, [r7, #24]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d007      	beq.n	800ecc8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ecb8:	687a      	ldr	r2, [r7, #4]
 800ecba:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800ecbe:	200e      	movs	r0, #14
 800ecc0:	f7f9 fa7e 	bl	80081c0 <pbuf_clone>
 800ecc4:	61f8      	str	r0, [r7, #28]
 800ecc6:	e004      	b.n	800ecd2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800eccc:	69f8      	ldr	r0, [r7, #28]
 800ecce:	f7f9 f819 	bl	8007d04 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ecd2:	69fb      	ldr	r3, [r7, #28]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d021      	beq.n	800ed1c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ecd8:	7c7a      	ldrb	r2, [r7, #17]
 800ecda:	4918      	ldr	r1, [pc, #96]	@ (800ed3c <etharp_query+0x268>)
 800ecdc:	4613      	mov	r3, r2
 800ecde:	005b      	lsls	r3, r3, #1
 800ece0:	4413      	add	r3, r2
 800ece2:	00db      	lsls	r3, r3, #3
 800ece4:	440b      	add	r3, r1
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d00a      	beq.n	800ed02 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ecec:	7c7a      	ldrb	r2, [r7, #17]
 800ecee:	4913      	ldr	r1, [pc, #76]	@ (800ed3c <etharp_query+0x268>)
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	005b      	lsls	r3, r3, #1
 800ecf4:	4413      	add	r3, r2
 800ecf6:	00db      	lsls	r3, r3, #3
 800ecf8:	440b      	add	r3, r1
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f7f8 ff61 	bl	8007bc4 <pbuf_free>
      }
      arp_table[i].q = p;
 800ed02:	7c7a      	ldrb	r2, [r7, #17]
 800ed04:	490d      	ldr	r1, [pc, #52]	@ (800ed3c <etharp_query+0x268>)
 800ed06:	4613      	mov	r3, r2
 800ed08:	005b      	lsls	r3, r3, #1
 800ed0a:	4413      	add	r3, r2
 800ed0c:	00db      	lsls	r3, r3, #3
 800ed0e:	440b      	add	r3, r1
 800ed10:	69fa      	ldr	r2, [r7, #28]
 800ed12:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ed14:	2300      	movs	r3, #0
 800ed16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ed1a:	e002      	b.n	800ed22 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ed1c:	23ff      	movs	r3, #255	@ 0xff
 800ed1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800ed22:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3728      	adds	r7, #40	@ 0x28
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	080173ac 	.word	0x080173ac
 800ed34:	08017558 	.word	0x08017558
 800ed38:	08017424 	.word	0x08017424
 800ed3c:	20008ac4 	.word	0x20008ac4
 800ed40:	08017568 	.word	0x08017568
 800ed44:	0801754c 	.word	0x0801754c
 800ed48:	20008bb4 	.word	0x20008bb4
 800ed4c:	08017590 	.word	0x08017590

0800ed50 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b08a      	sub	sp, #40	@ 0x28
 800ed54:	af02      	add	r7, sp, #8
 800ed56:	60f8      	str	r0, [r7, #12]
 800ed58:	60b9      	str	r1, [r7, #8]
 800ed5a:	607a      	str	r2, [r7, #4]
 800ed5c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d106      	bne.n	800ed76 <etharp_raw+0x26>
 800ed68:	4b3a      	ldr	r3, [pc, #232]	@ (800ee54 <etharp_raw+0x104>)
 800ed6a:	f240 4257 	movw	r2, #1111	@ 0x457
 800ed6e:	493a      	ldr	r1, [pc, #232]	@ (800ee58 <etharp_raw+0x108>)
 800ed70:	483a      	ldr	r0, [pc, #232]	@ (800ee5c <etharp_raw+0x10c>)
 800ed72:	f001 fd05 	bl	8010780 <printf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800ed76:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ed7a:	211c      	movs	r1, #28
 800ed7c:	200e      	movs	r0, #14
 800ed7e:	f7f8 fc3d 	bl	80075fc <pbuf_alloc>
 800ed82:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ed84:	69bb      	ldr	r3, [r7, #24]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d102      	bne.n	800ed90 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800ed8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ed8e:	e05d      	b.n	800ee4c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ed90:	69bb      	ldr	r3, [r7, #24]
 800ed92:	895b      	ldrh	r3, [r3, #10]
 800ed94:	2b1b      	cmp	r3, #27
 800ed96:	d806      	bhi.n	800eda6 <etharp_raw+0x56>
 800ed98:	4b2e      	ldr	r3, [pc, #184]	@ (800ee54 <etharp_raw+0x104>)
 800ed9a:	f240 4262 	movw	r2, #1122	@ 0x462
 800ed9e:	4930      	ldr	r1, [pc, #192]	@ (800ee60 <etharp_raw+0x110>)
 800eda0:	482e      	ldr	r0, [pc, #184]	@ (800ee5c <etharp_raw+0x10c>)
 800eda2:	f001 fced 	bl	8010780 <printf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800eda6:	69bb      	ldr	r3, [r7, #24]
 800eda8:	685b      	ldr	r3, [r3, #4]
 800edaa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800edac:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800edae:	4618      	mov	r0, r3
 800edb0:	f7f7 fbaa 	bl	8006508 <lwip_htons>
 800edb4:	4603      	mov	r3, r0
 800edb6:	461a      	mov	r2, r3
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800edc2:	2b06      	cmp	r3, #6
 800edc4:	d006      	beq.n	800edd4 <etharp_raw+0x84>
 800edc6:	4b23      	ldr	r3, [pc, #140]	@ (800ee54 <etharp_raw+0x104>)
 800edc8:	f240 4269 	movw	r2, #1129	@ 0x469
 800edcc:	4925      	ldr	r1, [pc, #148]	@ (800ee64 <etharp_raw+0x114>)
 800edce:	4823      	ldr	r0, [pc, #140]	@ (800ee5c <etharp_raw+0x10c>)
 800edd0:	f001 fcd6 	bl	8010780 <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	3308      	adds	r3, #8
 800edd8:	2206      	movs	r2, #6
 800edda:	6839      	ldr	r1, [r7, #0]
 800eddc:	4618      	mov	r0, r3
 800edde:	f001 fdcb 	bl	8010978 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	3312      	adds	r3, #18
 800ede6:	2206      	movs	r2, #6
 800ede8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800edea:	4618      	mov	r0, r3
 800edec:	f001 fdc4 	bl	8010978 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	330e      	adds	r3, #14
 800edf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800edf6:	6812      	ldr	r2, [r2, #0]
 800edf8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	3318      	adds	r3, #24
 800edfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee00:	6812      	ldr	r2, [r2, #0]
 800ee02:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	2200      	movs	r2, #0
 800ee08:	701a      	strb	r2, [r3, #0]
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	f042 0201 	orr.w	r2, r2, #1
 800ee10:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	2200      	movs	r2, #0
 800ee16:	f042 0208 	orr.w	r2, r2, #8
 800ee1a:	709a      	strb	r2, [r3, #2]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	2206      	movs	r2, #6
 800ee24:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	2204      	movs	r2, #4
 800ee2a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ee2c:	f640 0306 	movw	r3, #2054	@ 0x806
 800ee30:	9300      	str	r3, [sp, #0]
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	68ba      	ldr	r2, [r7, #8]
 800ee36:	69b9      	ldr	r1, [r7, #24]
 800ee38:	68f8      	ldr	r0, [r7, #12]
 800ee3a:	f001 fb7b 	bl	8010534 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ee3e:	69b8      	ldr	r0, [r7, #24]
 800ee40:	f7f8 fec0 	bl	8007bc4 <pbuf_free>
  p = NULL;
 800ee44:	2300      	movs	r3, #0
 800ee46:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ee48:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3720      	adds	r7, #32
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	080173ac 	.word	0x080173ac
 800ee58:	080174fc 	.word	0x080174fc
 800ee5c:	08017424 	.word	0x08017424
 800ee60:	080175ac 	.word	0x080175ac
 800ee64:	080175e0 	.word	0x080175e0

0800ee68 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b088      	sub	sp, #32
 800ee6c:	af04      	add	r7, sp, #16
 800ee6e:	60f8      	str	r0, [r7, #12]
 800ee70:	60b9      	str	r1, [r7, #8]
 800ee72:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ee84:	2201      	movs	r2, #1
 800ee86:	9203      	str	r2, [sp, #12]
 800ee88:	68ba      	ldr	r2, [r7, #8]
 800ee8a:	9202      	str	r2, [sp, #8]
 800ee8c:	4a06      	ldr	r2, [pc, #24]	@ (800eea8 <etharp_request_dst+0x40>)
 800ee8e:	9201      	str	r2, [sp, #4]
 800ee90:	9300      	str	r3, [sp, #0]
 800ee92:	4603      	mov	r3, r0
 800ee94:	687a      	ldr	r2, [r7, #4]
 800ee96:	68f8      	ldr	r0, [r7, #12]
 800ee98:	f7ff ff5a 	bl	800ed50 <etharp_raw>
 800ee9c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	3710      	adds	r7, #16
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}
 800eea6:	bf00      	nop
 800eea8:	08017b68 	.word	0x08017b68

0800eeac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b082      	sub	sp, #8
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800eeb6:	4a05      	ldr	r2, [pc, #20]	@ (800eecc <etharp_request+0x20>)
 800eeb8:	6839      	ldr	r1, [r7, #0]
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f7ff ffd4 	bl	800ee68 <etharp_request_dst>
 800eec0:	4603      	mov	r3, r0
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3708      	adds	r7, #8
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	08017b60 	.word	0x08017b60

0800eed0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b08e      	sub	sp, #56	@ 0x38
 800eed4:	af04      	add	r7, sp, #16
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800eeda:	4b79      	ldr	r3, [pc, #484]	@ (800f0c0 <icmp_input+0x1f0>)
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800eee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eee2:	781b      	ldrb	r3, [r3, #0]
 800eee4:	f003 030f 	and.w	r3, r3, #15
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	009b      	lsls	r3, r3, #2
 800eeec:	b2db      	uxtb	r3, r3
 800eeee:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800eef0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eef2:	2b13      	cmp	r3, #19
 800eef4:	f240 80cd 	bls.w	800f092 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	895b      	ldrh	r3, [r3, #10]
 800eefc:	2b03      	cmp	r3, #3
 800eefe:	f240 80ca 	bls.w	800f096 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	685b      	ldr	r3, [r3, #4]
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ef0c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	f000 80b7 	beq.w	800f084 <icmp_input+0x1b4>
 800ef16:	2b08      	cmp	r3, #8
 800ef18:	f040 80b7 	bne.w	800f08a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ef1c:	4b69      	ldr	r3, [pc, #420]	@ (800f0c4 <icmp_input+0x1f4>)
 800ef1e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ef20:	4b67      	ldr	r3, [pc, #412]	@ (800f0c0 <icmp_input+0x1f0>)
 800ef22:	695b      	ldr	r3, [r3, #20]
 800ef24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ef28:	2be0      	cmp	r3, #224	@ 0xe0
 800ef2a:	f000 80bb 	beq.w	800f0a4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ef2e:	4b64      	ldr	r3, [pc, #400]	@ (800f0c0 <icmp_input+0x1f0>)
 800ef30:	695b      	ldr	r3, [r3, #20]
 800ef32:	4a63      	ldr	r2, [pc, #396]	@ (800f0c0 <icmp_input+0x1f0>)
 800ef34:	6812      	ldr	r2, [r2, #0]
 800ef36:	4611      	mov	r1, r2
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f000 fbed 	bl	800f718 <ip4_addr_isbroadcast_u32>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	f040 80b1 	bne.w	800f0a8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	891b      	ldrh	r3, [r3, #8]
 800ef4a:	2b07      	cmp	r3, #7
 800ef4c:	f240 80a5 	bls.w	800f09a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ef50:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ef52:	330e      	adds	r3, #14
 800ef54:	4619      	mov	r1, r3
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f7f8 fd9e 	bl	8007a98 <pbuf_add_header>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d04b      	beq.n	800effa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	891a      	ldrh	r2, [r3, #8]
 800ef66:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ef68:	4413      	add	r3, r2
 800ef6a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	891b      	ldrh	r3, [r3, #8]
 800ef70:	8b7a      	ldrh	r2, [r7, #26]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	f0c0 809a 	bcc.w	800f0ac <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800ef78:	8b7b      	ldrh	r3, [r7, #26]
 800ef7a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ef7e:	4619      	mov	r1, r3
 800ef80:	200e      	movs	r0, #14
 800ef82:	f7f8 fb3b 	bl	80075fc <pbuf_alloc>
 800ef86:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	f000 8090 	beq.w	800f0b0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	895b      	ldrh	r3, [r3, #10]
 800ef94:	461a      	mov	r2, r3
 800ef96:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ef98:	3308      	adds	r3, #8
 800ef9a:	429a      	cmp	r2, r3
 800ef9c:	d203      	bcs.n	800efa6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800ef9e:	6978      	ldr	r0, [r7, #20]
 800efa0:	f7f8 fe10 	bl	8007bc4 <pbuf_free>
          goto icmperr;
 800efa4:	e085      	b.n	800f0b2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	685b      	ldr	r3, [r3, #4]
 800efaa:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800efac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800efae:	4618      	mov	r0, r3
 800efb0:	f001 fce2 	bl	8010978 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800efb4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800efb6:	4619      	mov	r1, r3
 800efb8:	6978      	ldr	r0, [r7, #20]
 800efba:	f7f8 fd7d 	bl	8007ab8 <pbuf_remove_header>
 800efbe:	4603      	mov	r3, r0
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d009      	beq.n	800efd8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800efc4:	4b40      	ldr	r3, [pc, #256]	@ (800f0c8 <icmp_input+0x1f8>)
 800efc6:	22b6      	movs	r2, #182	@ 0xb6
 800efc8:	4940      	ldr	r1, [pc, #256]	@ (800f0cc <icmp_input+0x1fc>)
 800efca:	4841      	ldr	r0, [pc, #260]	@ (800f0d0 <icmp_input+0x200>)
 800efcc:	f001 fbd8 	bl	8010780 <printf>
          pbuf_free(r);
 800efd0:	6978      	ldr	r0, [r7, #20]
 800efd2:	f7f8 fdf7 	bl	8007bc4 <pbuf_free>
          goto icmperr;
 800efd6:	e06c      	b.n	800f0b2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800efd8:	6879      	ldr	r1, [r7, #4]
 800efda:	6978      	ldr	r0, [r7, #20]
 800efdc:	f7f8 ff1a 	bl	8007e14 <pbuf_copy>
 800efe0:	4603      	mov	r3, r0
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d003      	beq.n	800efee <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800efe6:	6978      	ldr	r0, [r7, #20]
 800efe8:	f7f8 fdec 	bl	8007bc4 <pbuf_free>
          goto icmperr;
 800efec:	e061      	b.n	800f0b2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f7f8 fde8 	bl	8007bc4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	607b      	str	r3, [r7, #4]
 800eff8:	e00f      	b.n	800f01a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800effa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800effc:	330e      	adds	r3, #14
 800effe:	4619      	mov	r1, r3
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f7f8 fd59 	bl	8007ab8 <pbuf_remove_header>
 800f006:	4603      	mov	r3, r0
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d006      	beq.n	800f01a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f00c:	4b2e      	ldr	r3, [pc, #184]	@ (800f0c8 <icmp_input+0x1f8>)
 800f00e:	22c7      	movs	r2, #199	@ 0xc7
 800f010:	4930      	ldr	r1, [pc, #192]	@ (800f0d4 <icmp_input+0x204>)
 800f012:	482f      	ldr	r0, [pc, #188]	@ (800f0d0 <icmp_input+0x200>)
 800f014:	f001 fbb4 	bl	8010780 <printf>
          goto icmperr;
 800f018:	e04b      	b.n	800f0b2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f020:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f022:	4619      	mov	r1, r3
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f7f8 fd37 	bl	8007a98 <pbuf_add_header>
 800f02a:	4603      	mov	r3, r0
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d12b      	bne.n	800f088 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	685b      	ldr	r3, [r3, #4]
 800f034:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f036:	69fb      	ldr	r3, [r7, #28]
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f03e:	4b20      	ldr	r3, [pc, #128]	@ (800f0c0 <icmp_input+0x1f0>)
 800f040:	691a      	ldr	r2, [r3, #16]
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f046:	693b      	ldr	r3, [r7, #16]
 800f048:	2200      	movs	r2, #0
 800f04a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	2200      	movs	r2, #0
 800f050:	709a      	strb	r2, [r3, #2]
 800f052:	2200      	movs	r2, #0
 800f054:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	22ff      	movs	r2, #255	@ 0xff
 800f05a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	2200      	movs	r2, #0
 800f060:	729a      	strb	r2, [r3, #10]
 800f062:	2200      	movs	r2, #0
 800f064:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	9302      	str	r3, [sp, #8]
 800f06a:	2301      	movs	r3, #1
 800f06c:	9301      	str	r3, [sp, #4]
 800f06e:	2300      	movs	r3, #0
 800f070:	9300      	str	r3, [sp, #0]
 800f072:	23ff      	movs	r3, #255	@ 0xff
 800f074:	2200      	movs	r2, #0
 800f076:	69f9      	ldr	r1, [r7, #28]
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f000 fa75 	bl	800f568 <ip4_output_if>
 800f07e:	4603      	mov	r3, r0
 800f080:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f082:	e001      	b.n	800f088 <icmp_input+0x1b8>
      break;
 800f084:	bf00      	nop
 800f086:	e000      	b.n	800f08a <icmp_input+0x1ba>
      break;
 800f088:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f7f8 fd9a 	bl	8007bc4 <pbuf_free>
  return;
 800f090:	e013      	b.n	800f0ba <icmp_input+0x1ea>
    goto lenerr;
 800f092:	bf00      	nop
 800f094:	e002      	b.n	800f09c <icmp_input+0x1cc>
    goto lenerr;
 800f096:	bf00      	nop
 800f098:	e000      	b.n	800f09c <icmp_input+0x1cc>
        goto lenerr;
 800f09a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f7f8 fd91 	bl	8007bc4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f0a2:	e00a      	b.n	800f0ba <icmp_input+0x1ea>
        goto icmperr;
 800f0a4:	bf00      	nop
 800f0a6:	e004      	b.n	800f0b2 <icmp_input+0x1e2>
        goto icmperr;
 800f0a8:	bf00      	nop
 800f0aa:	e002      	b.n	800f0b2 <icmp_input+0x1e2>
          goto icmperr;
 800f0ac:	bf00      	nop
 800f0ae:	e000      	b.n	800f0b2 <icmp_input+0x1e2>
          goto icmperr;
 800f0b0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f7f8 fd86 	bl	8007bc4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f0b8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f0ba:	3728      	adds	r7, #40	@ 0x28
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	200054f4 	.word	0x200054f4
 800f0c4:	20005508 	.word	0x20005508
 800f0c8:	08017624 	.word	0x08017624
 800f0cc:	0801765c 	.word	0x0801765c
 800f0d0:	08017694 	.word	0x08017694
 800f0d4:	080176bc 	.word	0x080176bc

0800f0d8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b082      	sub	sp, #8
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	460b      	mov	r3, r1
 800f0e2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f0e4:	78fb      	ldrb	r3, [r7, #3]
 800f0e6:	461a      	mov	r2, r3
 800f0e8:	2103      	movs	r1, #3
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f000 f814 	bl	800f118 <icmp_send_response>
}
 800f0f0:	bf00      	nop
 800f0f2:	3708      	adds	r7, #8
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}

0800f0f8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b082      	sub	sp, #8
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
 800f100:	460b      	mov	r3, r1
 800f102:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f104:	78fb      	ldrb	r3, [r7, #3]
 800f106:	461a      	mov	r2, r3
 800f108:	210b      	movs	r1, #11
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	f000 f804 	bl	800f118 <icmp_send_response>
}
 800f110:	bf00      	nop
 800f112:	3708      	adds	r7, #8
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b08c      	sub	sp, #48	@ 0x30
 800f11c:	af04      	add	r7, sp, #16
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	460b      	mov	r3, r1
 800f122:	70fb      	strb	r3, [r7, #3]
 800f124:	4613      	mov	r3, r2
 800f126:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f128:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f12c:	2124      	movs	r1, #36	@ 0x24
 800f12e:	2022      	movs	r0, #34	@ 0x22
 800f130:	f7f8 fa64 	bl	80075fc <pbuf_alloc>
 800f134:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f136:	69fb      	ldr	r3, [r7, #28]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d04c      	beq.n	800f1d6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f13c:	69fb      	ldr	r3, [r7, #28]
 800f13e:	895b      	ldrh	r3, [r3, #10]
 800f140:	2b23      	cmp	r3, #35	@ 0x23
 800f142:	d806      	bhi.n	800f152 <icmp_send_response+0x3a>
 800f144:	4b26      	ldr	r3, [pc, #152]	@ (800f1e0 <icmp_send_response+0xc8>)
 800f146:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800f14a:	4926      	ldr	r1, [pc, #152]	@ (800f1e4 <icmp_send_response+0xcc>)
 800f14c:	4826      	ldr	r0, [pc, #152]	@ (800f1e8 <icmp_send_response+0xd0>)
 800f14e:	f001 fb17 	bl	8010780 <printf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f158:	69fb      	ldr	r3, [r7, #28]
 800f15a:	685b      	ldr	r3, [r3, #4]
 800f15c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	78fa      	ldrb	r2, [r7, #3]
 800f162:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	78ba      	ldrb	r2, [r7, #2]
 800f168:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	2200      	movs	r2, #0
 800f16e:	711a      	strb	r2, [r3, #4]
 800f170:	2200      	movs	r2, #0
 800f172:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f174:	697b      	ldr	r3, [r7, #20]
 800f176:	2200      	movs	r2, #0
 800f178:	719a      	strb	r2, [r3, #6]
 800f17a:	2200      	movs	r2, #0
 800f17c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f17e:	69fb      	ldr	r3, [r7, #28]
 800f180:	685b      	ldr	r3, [r3, #4]
 800f182:	f103 0008 	add.w	r0, r3, #8
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	221c      	movs	r2, #28
 800f18c:	4619      	mov	r1, r3
 800f18e:	f001 fbf3 	bl	8010978 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f192:	69bb      	ldr	r3, [r7, #24]
 800f194:	68db      	ldr	r3, [r3, #12]
 800f196:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f198:	f107 030c 	add.w	r3, r7, #12
 800f19c:	4618      	mov	r0, r3
 800f19e:	f000 f825 	bl	800f1ec <ip4_route>
 800f1a2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d011      	beq.n	800f1ce <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	709a      	strb	r2, [r3, #2]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f1b4:	f107 020c 	add.w	r2, r7, #12
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	9302      	str	r3, [sp, #8]
 800f1bc:	2301      	movs	r3, #1
 800f1be:	9301      	str	r3, [sp, #4]
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	9300      	str	r3, [sp, #0]
 800f1c4:	23ff      	movs	r3, #255	@ 0xff
 800f1c6:	2100      	movs	r1, #0
 800f1c8:	69f8      	ldr	r0, [r7, #28]
 800f1ca:	f000 f9cd 	bl	800f568 <ip4_output_if>
  }
  pbuf_free(q);
 800f1ce:	69f8      	ldr	r0, [r7, #28]
 800f1d0:	f7f8 fcf8 	bl	8007bc4 <pbuf_free>
 800f1d4:	e000      	b.n	800f1d8 <icmp_send_response+0xc0>
    return;
 800f1d6:	bf00      	nop
}
 800f1d8:	3720      	adds	r7, #32
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
 800f1de:	bf00      	nop
 800f1e0:	08017624 	.word	0x08017624
 800f1e4:	080176f0 	.word	0x080176f0
 800f1e8:	08017694 	.word	0x08017694

0800f1ec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b085      	sub	sp, #20
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f1f4:	4b33      	ldr	r3, [pc, #204]	@ (800f2c4 <ip4_route+0xd8>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	60fb      	str	r3, [r7, #12]
 800f1fa:	e036      	b.n	800f26a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f202:	f003 0301 	and.w	r3, r3, #1
 800f206:	b2db      	uxtb	r3, r3
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d02b      	beq.n	800f264 <ip4_route+0x78>
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f212:	089b      	lsrs	r3, r3, #2
 800f214:	f003 0301 	and.w	r3, r3, #1
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d022      	beq.n	800f264 <ip4_route+0x78>
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	3304      	adds	r3, #4
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d01d      	beq.n	800f264 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681a      	ldr	r2, [r3, #0]
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	3304      	adds	r3, #4
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	405a      	eors	r2, r3
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	3308      	adds	r3, #8
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	4013      	ands	r3, r2
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d101      	bne.n	800f244 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	e038      	b.n	800f2b6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f24a:	f003 0302 	and.w	r3, r3, #2
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d108      	bne.n	800f264 <ip4_route+0x78>
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681a      	ldr	r2, [r3, #0]
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	330c      	adds	r3, #12
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d101      	bne.n	800f264 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	e028      	b.n	800f2b6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	60fb      	str	r3, [r7, #12]
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d1c5      	bne.n	800f1fc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f270:	4b15      	ldr	r3, [pc, #84]	@ (800f2c8 <ip4_route+0xdc>)
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d01a      	beq.n	800f2ae <ip4_route+0xc2>
 800f278:	4b13      	ldr	r3, [pc, #76]	@ (800f2c8 <ip4_route+0xdc>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f280:	f003 0301 	and.w	r3, r3, #1
 800f284:	2b00      	cmp	r3, #0
 800f286:	d012      	beq.n	800f2ae <ip4_route+0xc2>
 800f288:	4b0f      	ldr	r3, [pc, #60]	@ (800f2c8 <ip4_route+0xdc>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f290:	f003 0304 	and.w	r3, r3, #4
 800f294:	2b00      	cmp	r3, #0
 800f296:	d00a      	beq.n	800f2ae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f298:	4b0b      	ldr	r3, [pc, #44]	@ (800f2c8 <ip4_route+0xdc>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	3304      	adds	r3, #4
 800f29e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d004      	beq.n	800f2ae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	b2db      	uxtb	r3, r3
 800f2aa:	2b7f      	cmp	r3, #127	@ 0x7f
 800f2ac:	d101      	bne.n	800f2b2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	e001      	b.n	800f2b6 <ip4_route+0xca>
  }

  return netif_default;
 800f2b2:	4b05      	ldr	r3, [pc, #20]	@ (800f2c8 <ip4_route+0xdc>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3714      	adds	r7, #20
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c0:	4770      	bx	lr
 800f2c2:	bf00      	nop
 800f2c4:	20008a58 	.word	0x20008a58
 800f2c8:	20008a5c 	.word	0x20008a5c

0800f2cc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b082      	sub	sp, #8
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f2da:	f003 0301 	and.w	r3, r3, #1
 800f2de:	b2db      	uxtb	r3, r3
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d016      	beq.n	800f312 <ip4_input_accept+0x46>
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	3304      	adds	r3, #4
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d011      	beq.n	800f312 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f2ee:	4b0b      	ldr	r3, [pc, #44]	@ (800f31c <ip4_input_accept+0x50>)
 800f2f0:	695a      	ldr	r2, [r3, #20]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	3304      	adds	r3, #4
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	d008      	beq.n	800f30e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f2fc:	4b07      	ldr	r3, [pc, #28]	@ (800f31c <ip4_input_accept+0x50>)
 800f2fe:	695b      	ldr	r3, [r3, #20]
 800f300:	6879      	ldr	r1, [r7, #4]
 800f302:	4618      	mov	r0, r3
 800f304:	f000 fa08 	bl	800f718 <ip4_addr_isbroadcast_u32>
 800f308:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d001      	beq.n	800f312 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f30e:	2301      	movs	r3, #1
 800f310:	e000      	b.n	800f314 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f312:	2300      	movs	r3, #0
}
 800f314:	4618      	mov	r0, r3
 800f316:	3708      	adds	r7, #8
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}
 800f31c:	200054f4 	.word	0x200054f4

0800f320 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b086      	sub	sp, #24
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
 800f328:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	685b      	ldr	r3, [r3, #4]
 800f32e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	091b      	lsrs	r3, r3, #4
 800f336:	b2db      	uxtb	r3, r3
 800f338:	2b04      	cmp	r3, #4
 800f33a:	d004      	beq.n	800f346 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f7f8 fc41 	bl	8007bc4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f342:	2300      	movs	r3, #0
 800f344:	e107      	b.n	800f556 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	f003 030f 	and.w	r3, r3, #15
 800f34e:	b2db      	uxtb	r3, r3
 800f350:	009b      	lsls	r3, r3, #2
 800f352:	b2db      	uxtb	r3, r3
 800f354:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	885b      	ldrh	r3, [r3, #2]
 800f35a:	b29b      	uxth	r3, r3
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7f7 f8d3 	bl	8006508 <lwip_htons>
 800f362:	4603      	mov	r3, r0
 800f364:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	891b      	ldrh	r3, [r3, #8]
 800f36a:	89ba      	ldrh	r2, [r7, #12]
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d204      	bcs.n	800f37a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800f370:	89bb      	ldrh	r3, [r7, #12]
 800f372:	4619      	mov	r1, r3
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f7f8 fa9f 	bl	80078b8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	895b      	ldrh	r3, [r3, #10]
 800f37e:	89fa      	ldrh	r2, [r7, #14]
 800f380:	429a      	cmp	r2, r3
 800f382:	d807      	bhi.n	800f394 <ip4_input+0x74>
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	891b      	ldrh	r3, [r3, #8]
 800f388:	89ba      	ldrh	r2, [r7, #12]
 800f38a:	429a      	cmp	r2, r3
 800f38c:	d802      	bhi.n	800f394 <ip4_input+0x74>
 800f38e:	89fb      	ldrh	r3, [r7, #14]
 800f390:	2b13      	cmp	r3, #19
 800f392:	d804      	bhi.n	800f39e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f7f8 fc15 	bl	8007bc4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f39a:	2300      	movs	r3, #0
 800f39c:	e0db      	b.n	800f556 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	691b      	ldr	r3, [r3, #16]
 800f3a2:	4a6f      	ldr	r2, [pc, #444]	@ (800f560 <ip4_input+0x240>)
 800f3a4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	68db      	ldr	r3, [r3, #12]
 800f3aa:	4a6d      	ldr	r2, [pc, #436]	@ (800f560 <ip4_input+0x240>)
 800f3ac:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f3ae:	4b6c      	ldr	r3, [pc, #432]	@ (800f560 <ip4_input+0x240>)
 800f3b0:	695b      	ldr	r3, [r3, #20]
 800f3b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f3b6:	2be0      	cmp	r3, #224	@ 0xe0
 800f3b8:	d112      	bne.n	800f3e0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f3c0:	f003 0301 	and.w	r3, r3, #1
 800f3c4:	b2db      	uxtb	r3, r3
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d007      	beq.n	800f3da <ip4_input+0xba>
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	3304      	adds	r3, #4
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d002      	beq.n	800f3da <ip4_input+0xba>
      netif = inp;
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	613b      	str	r3, [r7, #16]
 800f3d8:	e02a      	b.n	800f430 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	613b      	str	r3, [r7, #16]
 800f3de:	e027      	b.n	800f430 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f3e0:	6838      	ldr	r0, [r7, #0]
 800f3e2:	f7ff ff73 	bl	800f2cc <ip4_input_accept>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d002      	beq.n	800f3f2 <ip4_input+0xd2>
      netif = inp;
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	613b      	str	r3, [r7, #16]
 800f3f0:	e01e      	b.n	800f430 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f3f6:	4b5a      	ldr	r3, [pc, #360]	@ (800f560 <ip4_input+0x240>)
 800f3f8:	695b      	ldr	r3, [r3, #20]
 800f3fa:	b2db      	uxtb	r3, r3
 800f3fc:	2b7f      	cmp	r3, #127	@ 0x7f
 800f3fe:	d017      	beq.n	800f430 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f400:	4b58      	ldr	r3, [pc, #352]	@ (800f564 <ip4_input+0x244>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	613b      	str	r3, [r7, #16]
 800f406:	e00e      	b.n	800f426 <ip4_input+0x106>
          if (netif == inp) {
 800f408:	693a      	ldr	r2, [r7, #16]
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	429a      	cmp	r2, r3
 800f40e:	d006      	beq.n	800f41e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f410:	6938      	ldr	r0, [r7, #16]
 800f412:	f7ff ff5b 	bl	800f2cc <ip4_input_accept>
 800f416:	4603      	mov	r3, r0
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d108      	bne.n	800f42e <ip4_input+0x10e>
 800f41c:	e000      	b.n	800f420 <ip4_input+0x100>
            continue;
 800f41e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	613b      	str	r3, [r7, #16]
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d1ed      	bne.n	800f408 <ip4_input+0xe8>
 800f42c:	e000      	b.n	800f430 <ip4_input+0x110>
            break;
 800f42e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f430:	4b4b      	ldr	r3, [pc, #300]	@ (800f560 <ip4_input+0x240>)
 800f432:	691b      	ldr	r3, [r3, #16]
 800f434:	6839      	ldr	r1, [r7, #0]
 800f436:	4618      	mov	r0, r3
 800f438:	f000 f96e 	bl	800f718 <ip4_addr_isbroadcast_u32>
 800f43c:	4603      	mov	r3, r0
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d105      	bne.n	800f44e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f442:	4b47      	ldr	r3, [pc, #284]	@ (800f560 <ip4_input+0x240>)
 800f444:	691b      	ldr	r3, [r3, #16]
 800f446:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f44a:	2be0      	cmp	r3, #224	@ 0xe0
 800f44c:	d104      	bne.n	800f458 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	f7f8 fbb8 	bl	8007bc4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f454:	2300      	movs	r3, #0
 800f456:	e07e      	b.n	800f556 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d104      	bne.n	800f468 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f7f8 fbb0 	bl	8007bc4 <pbuf_free>
    return ERR_OK;
 800f464:	2300      	movs	r3, #0
 800f466:	e076      	b.n	800f556 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	88db      	ldrh	r3, [r3, #6]
 800f46c:	b29b      	uxth	r3, r3
 800f46e:	461a      	mov	r2, r3
 800f470:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800f474:	4013      	ands	r3, r2
 800f476:	2b00      	cmp	r3, #0
 800f478:	d00b      	beq.n	800f492 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 fc92 	bl	800fda4 <ip4_reass>
 800f480:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d101      	bne.n	800f48c <ip4_input+0x16c>
      return ERR_OK;
 800f488:	2300      	movs	r3, #0
 800f48a:	e064      	b.n	800f556 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f492:	4a33      	ldr	r2, [pc, #204]	@ (800f560 <ip4_input+0x240>)
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f498:	4a31      	ldr	r2, [pc, #196]	@ (800f560 <ip4_input+0x240>)
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f49e:	4a30      	ldr	r2, [pc, #192]	@ (800f560 <ip4_input+0x240>)
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	f003 030f 	and.w	r3, r3, #15
 800f4ac:	b2db      	uxtb	r3, r3
 800f4ae:	009b      	lsls	r3, r3, #2
 800f4b0:	b2db      	uxtb	r3, r3
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	4b2a      	ldr	r3, [pc, #168]	@ (800f560 <ip4_input+0x240>)
 800f4b6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f4b8:	89fb      	ldrh	r3, [r7, #14]
 800f4ba:	4619      	mov	r1, r3
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f7f8 fafb 	bl	8007ab8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	7a5b      	ldrb	r3, [r3, #9]
 800f4c6:	2b11      	cmp	r3, #17
 800f4c8:	d006      	beq.n	800f4d8 <ip4_input+0x1b8>
 800f4ca:	2b11      	cmp	r3, #17
 800f4cc:	dc13      	bgt.n	800f4f6 <ip4_input+0x1d6>
 800f4ce:	2b01      	cmp	r3, #1
 800f4d0:	d00c      	beq.n	800f4ec <ip4_input+0x1cc>
 800f4d2:	2b06      	cmp	r3, #6
 800f4d4:	d005      	beq.n	800f4e2 <ip4_input+0x1c2>
 800f4d6:	e00e      	b.n	800f4f6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f4d8:	6839      	ldr	r1, [r7, #0]
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f7fe f9f2 	bl	800d8c4 <udp_input>
        break;
 800f4e0:	e026      	b.n	800f530 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f4e2:	6839      	ldr	r1, [r7, #0]
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f7fa fa39 	bl	800995c <tcp_input>
        break;
 800f4ea:	e021      	b.n	800f530 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f4ec:	6839      	ldr	r1, [r7, #0]
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f7ff fcee 	bl	800eed0 <icmp_input>
        break;
 800f4f4:	e01c      	b.n	800f530 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f4f6:	4b1a      	ldr	r3, [pc, #104]	@ (800f560 <ip4_input+0x240>)
 800f4f8:	695b      	ldr	r3, [r3, #20]
 800f4fa:	6939      	ldr	r1, [r7, #16]
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f000 f90b 	bl	800f718 <ip4_addr_isbroadcast_u32>
 800f502:	4603      	mov	r3, r0
 800f504:	2b00      	cmp	r3, #0
 800f506:	d10f      	bne.n	800f528 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f508:	4b15      	ldr	r3, [pc, #84]	@ (800f560 <ip4_input+0x240>)
 800f50a:	695b      	ldr	r3, [r3, #20]
 800f50c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f510:	2be0      	cmp	r3, #224	@ 0xe0
 800f512:	d009      	beq.n	800f528 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f514:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f518:	4619      	mov	r1, r3
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f7f8 fb3f 	bl	8007b9e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f520:	2102      	movs	r1, #2
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f7ff fdd8 	bl	800f0d8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f7f8 fb4b 	bl	8007bc4 <pbuf_free>
        break;
 800f52e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f530:	4b0b      	ldr	r3, [pc, #44]	@ (800f560 <ip4_input+0x240>)
 800f532:	2200      	movs	r2, #0
 800f534:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f536:	4b0a      	ldr	r3, [pc, #40]	@ (800f560 <ip4_input+0x240>)
 800f538:	2200      	movs	r2, #0
 800f53a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f53c:	4b08      	ldr	r3, [pc, #32]	@ (800f560 <ip4_input+0x240>)
 800f53e:	2200      	movs	r2, #0
 800f540:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f542:	4b07      	ldr	r3, [pc, #28]	@ (800f560 <ip4_input+0x240>)
 800f544:	2200      	movs	r2, #0
 800f546:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f548:	4b05      	ldr	r3, [pc, #20]	@ (800f560 <ip4_input+0x240>)
 800f54a:	2200      	movs	r2, #0
 800f54c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f54e:	4b04      	ldr	r3, [pc, #16]	@ (800f560 <ip4_input+0x240>)
 800f550:	2200      	movs	r2, #0
 800f552:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f554:	2300      	movs	r3, #0
}
 800f556:	4618      	mov	r0, r3
 800f558:	3718      	adds	r7, #24
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	200054f4 	.word	0x200054f4
 800f564:	20008a58 	.word	0x20008a58

0800f568 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b08a      	sub	sp, #40	@ 0x28
 800f56c:	af04      	add	r7, sp, #16
 800f56e:	60f8      	str	r0, [r7, #12]
 800f570:	60b9      	str	r1, [r7, #8]
 800f572:	607a      	str	r2, [r7, #4]
 800f574:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d009      	beq.n	800f594 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d003      	beq.n	800f58e <ip4_output_if+0x26>
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d102      	bne.n	800f594 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f590:	3304      	adds	r3, #4
 800f592:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f594:	78fa      	ldrb	r2, [r7, #3]
 800f596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f598:	9302      	str	r3, [sp, #8]
 800f59a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f59e:	9301      	str	r3, [sp, #4]
 800f5a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f5a4:	9300      	str	r3, [sp, #0]
 800f5a6:	4613      	mov	r3, r2
 800f5a8:	687a      	ldr	r2, [r7, #4]
 800f5aa:	6979      	ldr	r1, [r7, #20]
 800f5ac:	68f8      	ldr	r0, [r7, #12]
 800f5ae:	f000 f805 	bl	800f5bc <ip4_output_if_src>
 800f5b2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3718      	adds	r7, #24
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}

0800f5bc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b088      	sub	sp, #32
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	60f8      	str	r0, [r7, #12]
 800f5c4:	60b9      	str	r1, [r7, #8]
 800f5c6:	607a      	str	r2, [r7, #4]
 800f5c8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	7b9b      	ldrb	r3, [r3, #14]
 800f5ce:	2b01      	cmp	r3, #1
 800f5d0:	d006      	beq.n	800f5e0 <ip4_output_if_src+0x24>
 800f5d2:	4b4b      	ldr	r3, [pc, #300]	@ (800f700 <ip4_output_if_src+0x144>)
 800f5d4:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800f5d8:	494a      	ldr	r1, [pc, #296]	@ (800f704 <ip4_output_if_src+0x148>)
 800f5da:	484b      	ldr	r0, [pc, #300]	@ (800f708 <ip4_output_if_src+0x14c>)
 800f5dc:	f001 f8d0 	bl	8010780 <printf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d060      	beq.n	800f6a8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f5e6:	2314      	movs	r3, #20
 800f5e8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f5ea:	2114      	movs	r1, #20
 800f5ec:	68f8      	ldr	r0, [r7, #12]
 800f5ee:	f7f8 fa53 	bl	8007a98 <pbuf_add_header>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d002      	beq.n	800f5fe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f5f8:	f06f 0301 	mvn.w	r3, #1
 800f5fc:	e07c      	b.n	800f6f8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	685b      	ldr	r3, [r3, #4]
 800f602:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	895b      	ldrh	r3, [r3, #10]
 800f608:	2b13      	cmp	r3, #19
 800f60a:	d806      	bhi.n	800f61a <ip4_output_if_src+0x5e>
 800f60c:	4b3c      	ldr	r3, [pc, #240]	@ (800f700 <ip4_output_if_src+0x144>)
 800f60e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800f612:	493e      	ldr	r1, [pc, #248]	@ (800f70c <ip4_output_if_src+0x150>)
 800f614:	483c      	ldr	r0, [pc, #240]	@ (800f708 <ip4_output_if_src+0x14c>)
 800f616:	f001 f8b3 	bl	8010780 <printf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f61a:	69fb      	ldr	r3, [r7, #28]
 800f61c:	78fa      	ldrb	r2, [r7, #3]
 800f61e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f620:	69fb      	ldr	r3, [r7, #28]
 800f622:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800f626:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681a      	ldr	r2, [r3, #0]
 800f62c:	69fb      	ldr	r3, [r7, #28]
 800f62e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f630:	8b7b      	ldrh	r3, [r7, #26]
 800f632:	089b      	lsrs	r3, r3, #2
 800f634:	b29b      	uxth	r3, r3
 800f636:	b2db      	uxtb	r3, r3
 800f638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f63c:	b2da      	uxtb	r2, r3
 800f63e:	69fb      	ldr	r3, [r7, #28]
 800f640:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f642:	69fb      	ldr	r3, [r7, #28]
 800f644:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800f648:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	891b      	ldrh	r3, [r3, #8]
 800f64e:	4618      	mov	r0, r3
 800f650:	f7f6 ff5a 	bl	8006508 <lwip_htons>
 800f654:	4603      	mov	r3, r0
 800f656:	461a      	mov	r2, r3
 800f658:	69fb      	ldr	r3, [r7, #28]
 800f65a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	2200      	movs	r2, #0
 800f660:	719a      	strb	r2, [r3, #6]
 800f662:	2200      	movs	r2, #0
 800f664:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f666:	4b2a      	ldr	r3, [pc, #168]	@ (800f710 <ip4_output_if_src+0x154>)
 800f668:	881b      	ldrh	r3, [r3, #0]
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7f6 ff4c 	bl	8006508 <lwip_htons>
 800f670:	4603      	mov	r3, r0
 800f672:	461a      	mov	r2, r3
 800f674:	69fb      	ldr	r3, [r7, #28]
 800f676:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f678:	4b25      	ldr	r3, [pc, #148]	@ (800f710 <ip4_output_if_src+0x154>)
 800f67a:	881b      	ldrh	r3, [r3, #0]
 800f67c:	3301      	adds	r3, #1
 800f67e:	b29a      	uxth	r2, r3
 800f680:	4b23      	ldr	r3, [pc, #140]	@ (800f710 <ip4_output_if_src+0x154>)
 800f682:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d104      	bne.n	800f694 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f68a:	4b22      	ldr	r3, [pc, #136]	@ (800f714 <ip4_output_if_src+0x158>)
 800f68c:	681a      	ldr	r2, [r3, #0]
 800f68e:	69fb      	ldr	r3, [r7, #28]
 800f690:	60da      	str	r2, [r3, #12]
 800f692:	e003      	b.n	800f69c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	681a      	ldr	r2, [r3, #0]
 800f698:	69fb      	ldr	r3, [r7, #28]
 800f69a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f69c:	69fb      	ldr	r3, [r7, #28]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	729a      	strb	r2, [r3, #10]
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	72da      	strb	r2, [r3, #11]
 800f6a6:	e00f      	b.n	800f6c8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	895b      	ldrh	r3, [r3, #10]
 800f6ac:	2b13      	cmp	r3, #19
 800f6ae:	d802      	bhi.n	800f6b6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f6b0:	f06f 0301 	mvn.w	r3, #1
 800f6b4:	e020      	b.n	800f6f8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	685b      	ldr	r3, [r3, #4]
 800f6ba:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f6bc:	69fb      	ldr	r3, [r7, #28]
 800f6be:	691b      	ldr	r3, [r3, #16]
 800f6c0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f6c2:	f107 0314 	add.w	r3, r7, #20
 800f6c6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d00c      	beq.n	800f6ea <ip4_output_if_src+0x12e>
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	891a      	ldrh	r2, [r3, #8]
 800f6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6d6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d906      	bls.n	800f6ea <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f6dc:	687a      	ldr	r2, [r7, #4]
 800f6de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f6e0:	68f8      	ldr	r0, [r7, #12]
 800f6e2:	f000 fd53 	bl	801018c <ip4_frag>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	e006      	b.n	800f6f8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6ec:	695b      	ldr	r3, [r3, #20]
 800f6ee:	687a      	ldr	r2, [r7, #4]
 800f6f0:	68f9      	ldr	r1, [r7, #12]
 800f6f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f6f4:	4798      	blx	r3
 800f6f6:	4603      	mov	r3, r0
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3720      	adds	r7, #32
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}
 800f700:	0801771c 	.word	0x0801771c
 800f704:	08017750 	.word	0x08017750
 800f708:	0801775c 	.word	0x0801775c
 800f70c:	08017784 	.word	0x08017784
 800f710:	20008bb6 	.word	0x20008bb6
 800f714:	08017b5c 	.word	0x08017b5c

0800f718 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f718:	b480      	push	{r7}
 800f71a:	b085      	sub	sp, #20
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
 800f720:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f72c:	d002      	beq.n	800f734 <ip4_addr_isbroadcast_u32+0x1c>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d101      	bne.n	800f738 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f734:	2301      	movs	r3, #1
 800f736:	e02a      	b.n	800f78e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f73e:	f003 0302 	and.w	r3, r3, #2
 800f742:	2b00      	cmp	r3, #0
 800f744:	d101      	bne.n	800f74a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f746:	2300      	movs	r3, #0
 800f748:	e021      	b.n	800f78e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	3304      	adds	r3, #4
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	687a      	ldr	r2, [r7, #4]
 800f752:	429a      	cmp	r2, r3
 800f754:	d101      	bne.n	800f75a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f756:	2300      	movs	r3, #0
 800f758:	e019      	b.n	800f78e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f75a:	68fa      	ldr	r2, [r7, #12]
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	3304      	adds	r3, #4
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	405a      	eors	r2, r3
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	3308      	adds	r3, #8
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	4013      	ands	r3, r2
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d10d      	bne.n	800f78c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	3308      	adds	r3, #8
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	43da      	mvns	r2, r3
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	3308      	adds	r3, #8
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f784:	429a      	cmp	r2, r3
 800f786:	d101      	bne.n	800f78c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f788:	2301      	movs	r3, #1
 800f78a:	e000      	b.n	800f78e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f78c:	2300      	movs	r3, #0
  }
}
 800f78e:	4618      	mov	r0, r3
 800f790:	3714      	adds	r7, #20
 800f792:	46bd      	mov	sp, r7
 800f794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f798:	4770      	bx	lr
	...

0800f79c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b084      	sub	sp, #16
 800f7a0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f7a6:	4b12      	ldr	r3, [pc, #72]	@ (800f7f0 <ip_reass_tmr+0x54>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f7ac:	e018      	b.n	800f7e0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	7fdb      	ldrb	r3, [r3, #31]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d00b      	beq.n	800f7ce <ip_reass_tmr+0x32>
      r->timer--;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	7fdb      	ldrb	r3, [r3, #31]
 800f7ba:	3b01      	subs	r3, #1
 800f7bc:	b2da      	uxtb	r2, r3
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	60fb      	str	r3, [r7, #12]
 800f7cc:	e008      	b.n	800f7e0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f7d8:	68b9      	ldr	r1, [r7, #8]
 800f7da:	6878      	ldr	r0, [r7, #4]
 800f7dc:	f000 f80a 	bl	800f7f4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d1e3      	bne.n	800f7ae <ip_reass_tmr+0x12>
    }
  }
}
 800f7e6:	bf00      	nop
 800f7e8:	bf00      	nop
 800f7ea:	3710      	adds	r7, #16
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd80      	pop	{r7, pc}
 800f7f0:	20008bb8 	.word	0x20008bb8

0800f7f4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b088      	sub	sp, #32
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f7fe:	2300      	movs	r3, #0
 800f800:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f802:	683a      	ldr	r2, [r7, #0]
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	429a      	cmp	r2, r3
 800f808:	d105      	bne.n	800f816 <ip_reass_free_complete_datagram+0x22>
 800f80a:	4b45      	ldr	r3, [pc, #276]	@ (800f920 <ip_reass_free_complete_datagram+0x12c>)
 800f80c:	22ab      	movs	r2, #171	@ 0xab
 800f80e:	4945      	ldr	r1, [pc, #276]	@ (800f924 <ip_reass_free_complete_datagram+0x130>)
 800f810:	4845      	ldr	r0, [pc, #276]	@ (800f928 <ip_reass_free_complete_datagram+0x134>)
 800f812:	f000 ffb5 	bl	8010780 <printf>
  if (prev != NULL) {
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d00a      	beq.n	800f832 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	687a      	ldr	r2, [r7, #4]
 800f822:	429a      	cmp	r2, r3
 800f824:	d005      	beq.n	800f832 <ip_reass_free_complete_datagram+0x3e>
 800f826:	4b3e      	ldr	r3, [pc, #248]	@ (800f920 <ip_reass_free_complete_datagram+0x12c>)
 800f828:	22ad      	movs	r2, #173	@ 0xad
 800f82a:	4940      	ldr	r1, [pc, #256]	@ (800f92c <ip_reass_free_complete_datagram+0x138>)
 800f82c:	483e      	ldr	r0, [pc, #248]	@ (800f928 <ip_reass_free_complete_datagram+0x134>)
 800f82e:	f000 ffa7 	bl	8010780 <printf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	685b      	ldr	r3, [r3, #4]
 800f836:	685b      	ldr	r3, [r3, #4]
 800f838:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	889b      	ldrh	r3, [r3, #4]
 800f83e:	b29b      	uxth	r3, r3
 800f840:	2b00      	cmp	r3, #0
 800f842:	d12a      	bne.n	800f89a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	685b      	ldr	r3, [r3, #4]
 800f848:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	681a      	ldr	r2, [r3, #0]
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f852:	69bb      	ldr	r3, [r7, #24]
 800f854:	6858      	ldr	r0, [r3, #4]
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	3308      	adds	r3, #8
 800f85a:	2214      	movs	r2, #20
 800f85c:	4619      	mov	r1, r3
 800f85e:	f001 f88b 	bl	8010978 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f862:	2101      	movs	r1, #1
 800f864:	69b8      	ldr	r0, [r7, #24]
 800f866:	f7ff fc47 	bl	800f0f8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f86a:	69b8      	ldr	r0, [r7, #24]
 800f86c:	f7f8 fa32 	bl	8007cd4 <pbuf_clen>
 800f870:	4603      	mov	r3, r0
 800f872:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f874:	8bfa      	ldrh	r2, [r7, #30]
 800f876:	8a7b      	ldrh	r3, [r7, #18]
 800f878:	4413      	add	r3, r2
 800f87a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f87e:	db05      	blt.n	800f88c <ip_reass_free_complete_datagram+0x98>
 800f880:	4b27      	ldr	r3, [pc, #156]	@ (800f920 <ip_reass_free_complete_datagram+0x12c>)
 800f882:	22bc      	movs	r2, #188	@ 0xbc
 800f884:	492a      	ldr	r1, [pc, #168]	@ (800f930 <ip_reass_free_complete_datagram+0x13c>)
 800f886:	4828      	ldr	r0, [pc, #160]	@ (800f928 <ip_reass_free_complete_datagram+0x134>)
 800f888:	f000 ff7a 	bl	8010780 <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f88c:	8bfa      	ldrh	r2, [r7, #30]
 800f88e:	8a7b      	ldrh	r3, [r7, #18]
 800f890:	4413      	add	r3, r2
 800f892:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f894:	69b8      	ldr	r0, [r7, #24]
 800f896:	f7f8 f995 	bl	8007bc4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	685b      	ldr	r3, [r3, #4]
 800f89e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f8a0:	e01f      	b.n	800f8e2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f8a2:	69bb      	ldr	r3, [r7, #24]
 800f8a4:	685b      	ldr	r3, [r3, #4]
 800f8a6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f8a8:	69bb      	ldr	r3, [r7, #24]
 800f8aa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f8b2:	68f8      	ldr	r0, [r7, #12]
 800f8b4:	f7f8 fa0e 	bl	8007cd4 <pbuf_clen>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f8bc:	8bfa      	ldrh	r2, [r7, #30]
 800f8be:	8a7b      	ldrh	r3, [r7, #18]
 800f8c0:	4413      	add	r3, r2
 800f8c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f8c6:	db05      	blt.n	800f8d4 <ip_reass_free_complete_datagram+0xe0>
 800f8c8:	4b15      	ldr	r3, [pc, #84]	@ (800f920 <ip_reass_free_complete_datagram+0x12c>)
 800f8ca:	22cc      	movs	r2, #204	@ 0xcc
 800f8cc:	4918      	ldr	r1, [pc, #96]	@ (800f930 <ip_reass_free_complete_datagram+0x13c>)
 800f8ce:	4816      	ldr	r0, [pc, #88]	@ (800f928 <ip_reass_free_complete_datagram+0x134>)
 800f8d0:	f000 ff56 	bl	8010780 <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f8d4:	8bfa      	ldrh	r2, [r7, #30]
 800f8d6:	8a7b      	ldrh	r3, [r7, #18]
 800f8d8:	4413      	add	r3, r2
 800f8da:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f8dc:	68f8      	ldr	r0, [r7, #12]
 800f8de:	f7f8 f971 	bl	8007bc4 <pbuf_free>
  while (p != NULL) {
 800f8e2:	69bb      	ldr	r3, [r7, #24]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d1dc      	bne.n	800f8a2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f8e8:	6839      	ldr	r1, [r7, #0]
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f000 f8c2 	bl	800fa74 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f8f0:	4b10      	ldr	r3, [pc, #64]	@ (800f934 <ip_reass_free_complete_datagram+0x140>)
 800f8f2:	881b      	ldrh	r3, [r3, #0]
 800f8f4:	8bfa      	ldrh	r2, [r7, #30]
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	d905      	bls.n	800f906 <ip_reass_free_complete_datagram+0x112>
 800f8fa:	4b09      	ldr	r3, [pc, #36]	@ (800f920 <ip_reass_free_complete_datagram+0x12c>)
 800f8fc:	22d2      	movs	r2, #210	@ 0xd2
 800f8fe:	490e      	ldr	r1, [pc, #56]	@ (800f938 <ip_reass_free_complete_datagram+0x144>)
 800f900:	4809      	ldr	r0, [pc, #36]	@ (800f928 <ip_reass_free_complete_datagram+0x134>)
 800f902:	f000 ff3d 	bl	8010780 <printf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f906:	4b0b      	ldr	r3, [pc, #44]	@ (800f934 <ip_reass_free_complete_datagram+0x140>)
 800f908:	881a      	ldrh	r2, [r3, #0]
 800f90a:	8bfb      	ldrh	r3, [r7, #30]
 800f90c:	1ad3      	subs	r3, r2, r3
 800f90e:	b29a      	uxth	r2, r3
 800f910:	4b08      	ldr	r3, [pc, #32]	@ (800f934 <ip_reass_free_complete_datagram+0x140>)
 800f912:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f914:	8bfb      	ldrh	r3, [r7, #30]
}
 800f916:	4618      	mov	r0, r3
 800f918:	3720      	adds	r7, #32
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}
 800f91e:	bf00      	nop
 800f920:	080177b4 	.word	0x080177b4
 800f924:	080177f0 	.word	0x080177f0
 800f928:	080177fc 	.word	0x080177fc
 800f92c:	08017824 	.word	0x08017824
 800f930:	08017838 	.word	0x08017838
 800f934:	20008bbc 	.word	0x20008bbc
 800f938:	08017858 	.word	0x08017858

0800f93c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b08a      	sub	sp, #40	@ 0x28
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f946:	2300      	movs	r3, #0
 800f948:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f94a:	2300      	movs	r3, #0
 800f94c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f94e:	2300      	movs	r3, #0
 800f950:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f952:	2300      	movs	r3, #0
 800f954:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f956:	2300      	movs	r3, #0
 800f958:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f95a:	4b28      	ldr	r3, [pc, #160]	@ (800f9fc <ip_reass_remove_oldest_datagram+0xc0>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800f960:	e030      	b.n	800f9c4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f964:	695a      	ldr	r2, [r3, #20]
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	68db      	ldr	r3, [r3, #12]
 800f96a:	429a      	cmp	r2, r3
 800f96c:	d10c      	bne.n	800f988 <ip_reass_remove_oldest_datagram+0x4c>
 800f96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f970:	699a      	ldr	r2, [r3, #24]
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	691b      	ldr	r3, [r3, #16]
 800f976:	429a      	cmp	r2, r3
 800f978:	d106      	bne.n	800f988 <ip_reass_remove_oldest_datagram+0x4c>
 800f97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f97c:	899a      	ldrh	r2, [r3, #12]
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	889b      	ldrh	r3, [r3, #4]
 800f982:	b29b      	uxth	r3, r3
 800f984:	429a      	cmp	r2, r3
 800f986:	d014      	beq.n	800f9b2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	3301      	adds	r3, #1
 800f98c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f98e:	6a3b      	ldr	r3, [r7, #32]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d104      	bne.n	800f99e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f996:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f998:	69fb      	ldr	r3, [r7, #28]
 800f99a:	61bb      	str	r3, [r7, #24]
 800f99c:	e009      	b.n	800f9b2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9a0:	7fda      	ldrb	r2, [r3, #31]
 800f9a2:	6a3b      	ldr	r3, [r7, #32]
 800f9a4:	7fdb      	ldrb	r3, [r3, #31]
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d803      	bhi.n	800f9b2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9ac:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f9ae:	69fb      	ldr	r3, [r7, #28]
 800f9b0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d001      	beq.n	800f9be <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9bc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800f9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d1cb      	bne.n	800f962 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f9ca:	6a3b      	ldr	r3, [r7, #32]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d008      	beq.n	800f9e2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f9d0:	69b9      	ldr	r1, [r7, #24]
 800f9d2:	6a38      	ldr	r0, [r7, #32]
 800f9d4:	f7ff ff0e 	bl	800f7f4 <ip_reass_free_complete_datagram>
 800f9d8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f9da:	697a      	ldr	r2, [r7, #20]
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	4413      	add	r3, r2
 800f9e0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f9e2:	697a      	ldr	r2, [r7, #20]
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	da02      	bge.n	800f9f0 <ip_reass_remove_oldest_datagram+0xb4>
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	dcac      	bgt.n	800f94a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f9f0:	697b      	ldr	r3, [r7, #20]
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3728      	adds	r7, #40	@ 0x28
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}
 800f9fa:	bf00      	nop
 800f9fc:	20008bb8 	.word	0x20008bb8

0800fa00 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b084      	sub	sp, #16
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
 800fa08:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fa0a:	2004      	movs	r0, #4
 800fa0c:	f7f7 f9f4 	bl	8006df8 <memp_malloc>
 800fa10:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d110      	bne.n	800fa3a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800fa18:	6839      	ldr	r1, [r7, #0]
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f7ff ff8e 	bl	800f93c <ip_reass_remove_oldest_datagram>
 800fa20:	4602      	mov	r2, r0
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	4293      	cmp	r3, r2
 800fa26:	dc03      	bgt.n	800fa30 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fa28:	2004      	movs	r0, #4
 800fa2a:	f7f7 f9e5 	bl	8006df8 <memp_malloc>
 800fa2e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d101      	bne.n	800fa3a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800fa36:	2300      	movs	r3, #0
 800fa38:	e016      	b.n	800fa68 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800fa3a:	2220      	movs	r2, #32
 800fa3c:	2100      	movs	r1, #0
 800fa3e:	68f8      	ldr	r0, [r7, #12]
 800fa40:	f000 ff1d 	bl	801087e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	220f      	movs	r2, #15
 800fa48:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800fa4a:	4b09      	ldr	r3, [pc, #36]	@ (800fa70 <ip_reass_enqueue_new_datagram+0x70>)
 800fa4c:	681a      	ldr	r2, [r3, #0]
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800fa52:	4a07      	ldr	r2, [pc, #28]	@ (800fa70 <ip_reass_enqueue_new_datagram+0x70>)
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	3308      	adds	r3, #8
 800fa5c:	2214      	movs	r2, #20
 800fa5e:	6879      	ldr	r1, [r7, #4]
 800fa60:	4618      	mov	r0, r3
 800fa62:	f000 ff89 	bl	8010978 <memcpy>
  return ipr;
 800fa66:	68fb      	ldr	r3, [r7, #12]
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3710      	adds	r7, #16
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}
 800fa70:	20008bb8 	.word	0x20008bb8

0800fa74 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800fa7e:	4b10      	ldr	r3, [pc, #64]	@ (800fac0 <ip_reass_dequeue_datagram+0x4c>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	687a      	ldr	r2, [r7, #4]
 800fa84:	429a      	cmp	r2, r3
 800fa86:	d104      	bne.n	800fa92 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	4a0c      	ldr	r2, [pc, #48]	@ (800fac0 <ip_reass_dequeue_datagram+0x4c>)
 800fa8e:	6013      	str	r3, [r2, #0]
 800fa90:	e00d      	b.n	800faae <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d106      	bne.n	800faa6 <ip_reass_dequeue_datagram+0x32>
 800fa98:	4b0a      	ldr	r3, [pc, #40]	@ (800fac4 <ip_reass_dequeue_datagram+0x50>)
 800fa9a:	f240 1245 	movw	r2, #325	@ 0x145
 800fa9e:	490a      	ldr	r1, [pc, #40]	@ (800fac8 <ip_reass_dequeue_datagram+0x54>)
 800faa0:	480a      	ldr	r0, [pc, #40]	@ (800facc <ip_reass_dequeue_datagram+0x58>)
 800faa2:	f000 fe6d 	bl	8010780 <printf>
    prev->next = ipr->next;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681a      	ldr	r2, [r3, #0]
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800faae:	6879      	ldr	r1, [r7, #4]
 800fab0:	2004      	movs	r0, #4
 800fab2:	f7f7 fa11 	bl	8006ed8 <memp_free>
}
 800fab6:	bf00      	nop
 800fab8:	3708      	adds	r7, #8
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	20008bb8 	.word	0x20008bb8
 800fac4:	080177b4 	.word	0x080177b4
 800fac8:	0801787c 	.word	0x0801787c
 800facc:	080177fc 	.word	0x080177fc

0800fad0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b08c      	sub	sp, #48	@ 0x30
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	60f8      	str	r0, [r7, #12]
 800fad8:	60b9      	str	r1, [r7, #8]
 800fada:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800fadc:	2300      	movs	r3, #0
 800fade:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800fae0:	2301      	movs	r3, #1
 800fae2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	685b      	ldr	r3, [r3, #4]
 800fae8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800faea:	69fb      	ldr	r3, [r7, #28]
 800faec:	885b      	ldrh	r3, [r3, #2]
 800faee:	b29b      	uxth	r3, r3
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7f6 fd09 	bl	8006508 <lwip_htons>
 800faf6:	4603      	mov	r3, r0
 800faf8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800fafa:	69fb      	ldr	r3, [r7, #28]
 800fafc:	781b      	ldrb	r3, [r3, #0]
 800fafe:	f003 030f 	and.w	r3, r3, #15
 800fb02:	b2db      	uxtb	r3, r3
 800fb04:	009b      	lsls	r3, r3, #2
 800fb06:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800fb08:	7e7b      	ldrb	r3, [r7, #25]
 800fb0a:	b29b      	uxth	r3, r3
 800fb0c:	8b7a      	ldrh	r2, [r7, #26]
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d202      	bcs.n	800fb18 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fb12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fb16:	e135      	b.n	800fd84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800fb18:	7e7b      	ldrb	r3, [r7, #25]
 800fb1a:	b29b      	uxth	r3, r3
 800fb1c:	8b7a      	ldrh	r2, [r7, #26]
 800fb1e:	1ad3      	subs	r3, r2, r3
 800fb20:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800fb22:	69fb      	ldr	r3, [r7, #28]
 800fb24:	88db      	ldrh	r3, [r3, #6]
 800fb26:	b29b      	uxth	r3, r3
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7f6 fced 	bl	8006508 <lwip_htons>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fb34:	b29b      	uxth	r3, r3
 800fb36:	00db      	lsls	r3, r3, #3
 800fb38:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	685b      	ldr	r3, [r3, #4]
 800fb3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800fb40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb42:	2200      	movs	r2, #0
 800fb44:	701a      	strb	r2, [r3, #0]
 800fb46:	2200      	movs	r2, #0
 800fb48:	705a      	strb	r2, [r3, #1]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	709a      	strb	r2, [r3, #2]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800fb52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb54:	8afa      	ldrh	r2, [r7, #22]
 800fb56:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800fb58:	8afa      	ldrh	r2, [r7, #22]
 800fb5a:	8b7b      	ldrh	r3, [r7, #26]
 800fb5c:	4413      	add	r3, r2
 800fb5e:	b29a      	uxth	r2, r3
 800fb60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb62:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800fb64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb66:	88db      	ldrh	r3, [r3, #6]
 800fb68:	b29b      	uxth	r3, r3
 800fb6a:	8afa      	ldrh	r2, [r7, #22]
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	d902      	bls.n	800fb76 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fb70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fb74:	e106      	b.n	800fd84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	627b      	str	r3, [r7, #36]	@ 0x24
 800fb7c:	e068      	b.n	800fc50 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800fb7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb80:	685b      	ldr	r3, [r3, #4]
 800fb82:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800fb84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb86:	889b      	ldrh	r3, [r3, #4]
 800fb88:	b29a      	uxth	r2, r3
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	889b      	ldrh	r3, [r3, #4]
 800fb8e:	b29b      	uxth	r3, r3
 800fb90:	429a      	cmp	r2, r3
 800fb92:	d235      	bcs.n	800fc00 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800fb94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb98:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800fb9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d020      	beq.n	800fbe2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800fba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fba2:	889b      	ldrh	r3, [r3, #4]
 800fba4:	b29a      	uxth	r2, r3
 800fba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fba8:	88db      	ldrh	r3, [r3, #6]
 800fbaa:	b29b      	uxth	r3, r3
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d307      	bcc.n	800fbc0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800fbb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbb2:	88db      	ldrh	r3, [r3, #6]
 800fbb4:	b29a      	uxth	r2, r3
 800fbb6:	693b      	ldr	r3, [r7, #16]
 800fbb8:	889b      	ldrh	r3, [r3, #4]
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	429a      	cmp	r2, r3
 800fbbe:	d902      	bls.n	800fbc6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fbc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fbc4:	e0de      	b.n	800fd84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800fbc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbc8:	68ba      	ldr	r2, [r7, #8]
 800fbca:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800fbcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbce:	88db      	ldrh	r3, [r3, #6]
 800fbd0:	b29a      	uxth	r2, r3
 800fbd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbd4:	889b      	ldrh	r3, [r3, #4]
 800fbd6:	b29b      	uxth	r3, r3
 800fbd8:	429a      	cmp	r2, r3
 800fbda:	d03d      	beq.n	800fc58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800fbe0:	e03a      	b.n	800fc58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800fbe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbe4:	88db      	ldrh	r3, [r3, #6]
 800fbe6:	b29a      	uxth	r2, r3
 800fbe8:	693b      	ldr	r3, [r7, #16]
 800fbea:	889b      	ldrh	r3, [r3, #4]
 800fbec:	b29b      	uxth	r3, r3
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	d902      	bls.n	800fbf8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fbf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fbf6:	e0c5      	b.n	800fd84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	68ba      	ldr	r2, [r7, #8]
 800fbfc:	605a      	str	r2, [r3, #4]
      break;
 800fbfe:	e02b      	b.n	800fc58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800fc00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc02:	889b      	ldrh	r3, [r3, #4]
 800fc04:	b29a      	uxth	r2, r3
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	889b      	ldrh	r3, [r3, #4]
 800fc0a:	b29b      	uxth	r3, r3
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	d102      	bne.n	800fc16 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fc10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fc14:	e0b6      	b.n	800fd84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800fc16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc18:	889b      	ldrh	r3, [r3, #4]
 800fc1a:	b29a      	uxth	r2, r3
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	88db      	ldrh	r3, [r3, #6]
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d202      	bcs.n	800fc2c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fc26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fc2a:	e0ab      	b.n	800fd84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800fc2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d009      	beq.n	800fc46 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800fc32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc34:	88db      	ldrh	r3, [r3, #6]
 800fc36:	b29a      	uxth	r2, r3
 800fc38:	693b      	ldr	r3, [r7, #16]
 800fc3a:	889b      	ldrh	r3, [r3, #4]
 800fc3c:	b29b      	uxth	r3, r3
 800fc3e:	429a      	cmp	r2, r3
 800fc40:	d001      	beq.n	800fc46 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fc42:	2300      	movs	r3, #0
 800fc44:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800fc46:	693b      	ldr	r3, [r7, #16]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800fc50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d193      	bne.n	800fb7e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800fc56:	e000      	b.n	800fc5a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800fc58:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800fc5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d12d      	bne.n	800fcbc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800fc60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d01c      	beq.n	800fca0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800fc66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc68:	88db      	ldrh	r3, [r3, #6]
 800fc6a:	b29a      	uxth	r2, r3
 800fc6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc6e:	889b      	ldrh	r3, [r3, #4]
 800fc70:	b29b      	uxth	r3, r3
 800fc72:	429a      	cmp	r2, r3
 800fc74:	d906      	bls.n	800fc84 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800fc76:	4b45      	ldr	r3, [pc, #276]	@ (800fd8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fc78:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800fc7c:	4944      	ldr	r1, [pc, #272]	@ (800fd90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800fc7e:	4845      	ldr	r0, [pc, #276]	@ (800fd94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fc80:	f000 fd7e 	bl	8010780 <printf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800fc84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc86:	68ba      	ldr	r2, [r7, #8]
 800fc88:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800fc8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc8c:	88db      	ldrh	r3, [r3, #6]
 800fc8e:	b29a      	uxth	r2, r3
 800fc90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc92:	889b      	ldrh	r3, [r3, #4]
 800fc94:	b29b      	uxth	r3, r3
 800fc96:	429a      	cmp	r2, r3
 800fc98:	d010      	beq.n	800fcbc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	623b      	str	r3, [r7, #32]
 800fc9e:	e00d      	b.n	800fcbc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	685b      	ldr	r3, [r3, #4]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d006      	beq.n	800fcb6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800fca8:	4b38      	ldr	r3, [pc, #224]	@ (800fd8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fcaa:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800fcae:	493a      	ldr	r1, [pc, #232]	@ (800fd98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800fcb0:	4838      	ldr	r0, [pc, #224]	@ (800fd94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fcb2:	f000 fd65 	bl	8010780 <printf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	68ba      	ldr	r2, [r7, #8]
 800fcba:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d105      	bne.n	800fcce <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	7f9b      	ldrb	r3, [r3, #30]
 800fcc6:	f003 0301 	and.w	r3, r3, #1
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d059      	beq.n	800fd82 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800fcce:	6a3b      	ldr	r3, [r7, #32]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d04f      	beq.n	800fd74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d006      	beq.n	800fcea <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	685b      	ldr	r3, [r3, #4]
 800fce0:	685b      	ldr	r3, [r3, #4]
 800fce2:	889b      	ldrh	r3, [r3, #4]
 800fce4:	b29b      	uxth	r3, r3
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d002      	beq.n	800fcf0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800fcea:	2300      	movs	r3, #0
 800fcec:	623b      	str	r3, [r7, #32]
 800fcee:	e041      	b.n	800fd74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800fcf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcf2:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800fcf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800fcfa:	e012      	b.n	800fd22 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800fcfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcfe:	685b      	ldr	r3, [r3, #4]
 800fd00:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800fd02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd04:	88db      	ldrh	r3, [r3, #6]
 800fd06:	b29a      	uxth	r2, r3
 800fd08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd0a:	889b      	ldrh	r3, [r3, #4]
 800fd0c:	b29b      	uxth	r3, r3
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d002      	beq.n	800fd18 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800fd12:	2300      	movs	r3, #0
 800fd14:	623b      	str	r3, [r7, #32]
            break;
 800fd16:	e007      	b.n	800fd28 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800fd18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd1a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800fd1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800fd22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d1e9      	bne.n	800fcfc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800fd28:	6a3b      	ldr	r3, [r7, #32]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d022      	beq.n	800fd74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	685b      	ldr	r3, [r3, #4]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d106      	bne.n	800fd44 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800fd36:	4b15      	ldr	r3, [pc, #84]	@ (800fd8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fd38:	f240 12df 	movw	r2, #479	@ 0x1df
 800fd3c:	4917      	ldr	r1, [pc, #92]	@ (800fd9c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fd3e:	4815      	ldr	r0, [pc, #84]	@ (800fd94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fd40:	f000 fd1e 	bl	8010780 <printf>
          LWIP_ASSERT("sanity check",
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	685b      	ldr	r3, [r3, #4]
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	d106      	bne.n	800fd5e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800fd50:	4b0e      	ldr	r3, [pc, #56]	@ (800fd8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fd52:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800fd56:	4911      	ldr	r1, [pc, #68]	@ (800fd9c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fd58:	480e      	ldr	r0, [pc, #56]	@ (800fd94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fd5a:	f000 fd11 	bl	8010780 <printf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800fd5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d006      	beq.n	800fd74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800fd66:	4b09      	ldr	r3, [pc, #36]	@ (800fd8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fd68:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800fd6c:	490c      	ldr	r1, [pc, #48]	@ (800fda0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800fd6e:	4809      	ldr	r0, [pc, #36]	@ (800fd94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fd70:	f000 fd06 	bl	8010780 <printf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800fd74:	6a3b      	ldr	r3, [r7, #32]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	bf14      	ite	ne
 800fd7a:	2301      	movne	r3, #1
 800fd7c:	2300      	moveq	r3, #0
 800fd7e:	b2db      	uxtb	r3, r3
 800fd80:	e000      	b.n	800fd84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800fd82:	2300      	movs	r3, #0
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	3730      	adds	r7, #48	@ 0x30
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}
 800fd8c:	080177b4 	.word	0x080177b4
 800fd90:	08017898 	.word	0x08017898
 800fd94:	080177fc 	.word	0x080177fc
 800fd98:	080178b8 	.word	0x080178b8
 800fd9c:	080178f0 	.word	0x080178f0
 800fda0:	08017900 	.word	0x08017900

0800fda4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b08e      	sub	sp, #56	@ 0x38
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	685b      	ldr	r3, [r3, #4]
 800fdb0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800fdb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdb4:	781b      	ldrb	r3, [r3, #0]
 800fdb6:	f003 030f 	and.w	r3, r3, #15
 800fdba:	b2db      	uxtb	r3, r3
 800fdbc:	009b      	lsls	r3, r3, #2
 800fdbe:	b2db      	uxtb	r3, r3
 800fdc0:	2b14      	cmp	r3, #20
 800fdc2:	f040 8171 	bne.w	80100a8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800fdc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdc8:	88db      	ldrh	r3, [r3, #6]
 800fdca:	b29b      	uxth	r3, r3
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f7f6 fb9b 	bl	8006508 <lwip_htons>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fdd8:	b29b      	uxth	r3, r3
 800fdda:	00db      	lsls	r3, r3, #3
 800fddc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fdde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fde0:	885b      	ldrh	r3, [r3, #2]
 800fde2:	b29b      	uxth	r3, r3
 800fde4:	4618      	mov	r0, r3
 800fde6:	f7f6 fb8f 	bl	8006508 <lwip_htons>
 800fdea:	4603      	mov	r3, r0
 800fdec:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800fdee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdf0:	781b      	ldrb	r3, [r3, #0]
 800fdf2:	f003 030f 	and.w	r3, r3, #15
 800fdf6:	b2db      	uxtb	r3, r3
 800fdf8:	009b      	lsls	r3, r3, #2
 800fdfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800fdfe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800fe02:	b29b      	uxth	r3, r3
 800fe04:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800fe06:	429a      	cmp	r2, r3
 800fe08:	f0c0 8150 	bcc.w	80100ac <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800fe0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800fe10:	b29b      	uxth	r3, r3
 800fe12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800fe14:	1ad3      	subs	r3, r2, r3
 800fe16:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f7f7 ff5b 	bl	8007cd4 <pbuf_clen>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800fe22:	4b8c      	ldr	r3, [pc, #560]	@ (8010054 <ip4_reass+0x2b0>)
 800fe24:	881b      	ldrh	r3, [r3, #0]
 800fe26:	461a      	mov	r2, r3
 800fe28:	8c3b      	ldrh	r3, [r7, #32]
 800fe2a:	4413      	add	r3, r2
 800fe2c:	2b0a      	cmp	r3, #10
 800fe2e:	dd10      	ble.n	800fe52 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fe30:	8c3b      	ldrh	r3, [r7, #32]
 800fe32:	4619      	mov	r1, r3
 800fe34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fe36:	f7ff fd81 	bl	800f93c <ip_reass_remove_oldest_datagram>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	f000 8137 	beq.w	80100b0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800fe42:	4b84      	ldr	r3, [pc, #528]	@ (8010054 <ip4_reass+0x2b0>)
 800fe44:	881b      	ldrh	r3, [r3, #0]
 800fe46:	461a      	mov	r2, r3
 800fe48:	8c3b      	ldrh	r3, [r7, #32]
 800fe4a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fe4c:	2b0a      	cmp	r3, #10
 800fe4e:	f300 812f 	bgt.w	80100b0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fe52:	4b81      	ldr	r3, [pc, #516]	@ (8010058 <ip4_reass+0x2b4>)
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	633b      	str	r3, [r7, #48]	@ 0x30
 800fe58:	e015      	b.n	800fe86 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800fe5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe5c:	695a      	ldr	r2, [r3, #20]
 800fe5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe60:	68db      	ldr	r3, [r3, #12]
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d10c      	bne.n	800fe80 <ip4_reass+0xdc>
 800fe66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe68:	699a      	ldr	r2, [r3, #24]
 800fe6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe6c:	691b      	ldr	r3, [r3, #16]
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	d106      	bne.n	800fe80 <ip4_reass+0xdc>
 800fe72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe74:	899a      	ldrh	r2, [r3, #12]
 800fe76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe78:	889b      	ldrh	r3, [r3, #4]
 800fe7a:	b29b      	uxth	r3, r3
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d006      	beq.n	800fe8e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fe80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	633b      	str	r3, [r7, #48]	@ 0x30
 800fe86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d1e6      	bne.n	800fe5a <ip4_reass+0xb6>
 800fe8c:	e000      	b.n	800fe90 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800fe8e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800fe90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d109      	bne.n	800feaa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800fe96:	8c3b      	ldrh	r3, [r7, #32]
 800fe98:	4619      	mov	r1, r3
 800fe9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fe9c:	f7ff fdb0 	bl	800fa00 <ip_reass_enqueue_new_datagram>
 800fea0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800fea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d11c      	bne.n	800fee2 <ip4_reass+0x13e>
      goto nullreturn;
 800fea8:	e105      	b.n	80100b6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800feaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feac:	88db      	ldrh	r3, [r3, #6]
 800feae:	b29b      	uxth	r3, r3
 800feb0:	4618      	mov	r0, r3
 800feb2:	f7f6 fb29 	bl	8006508 <lwip_htons>
 800feb6:	4603      	mov	r3, r0
 800feb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800febc:	2b00      	cmp	r3, #0
 800febe:	d110      	bne.n	800fee2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800fec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fec2:	89db      	ldrh	r3, [r3, #14]
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7f6 fb1f 	bl	8006508 <lwip_htons>
 800feca:	4603      	mov	r3, r0
 800fecc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d006      	beq.n	800fee2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800fed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fed6:	3308      	adds	r3, #8
 800fed8:	2214      	movs	r2, #20
 800feda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fedc:	4618      	mov	r0, r3
 800fede:	f000 fd4b 	bl	8010978 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800fee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fee4:	88db      	ldrh	r3, [r3, #6]
 800fee6:	b29b      	uxth	r3, r3
 800fee8:	f003 0320 	and.w	r3, r3, #32
 800feec:	2b00      	cmp	r3, #0
 800feee:	bf0c      	ite	eq
 800fef0:	2301      	moveq	r3, #1
 800fef2:	2300      	movne	r3, #0
 800fef4:	b2db      	uxtb	r3, r3
 800fef6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800fef8:	69fb      	ldr	r3, [r7, #28]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d00e      	beq.n	800ff1c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800fefe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ff00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff02:	4413      	add	r3, r2
 800ff04:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ff06:	8b7a      	ldrh	r2, [r7, #26]
 800ff08:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	f0c0 80a0 	bcc.w	8010050 <ip4_reass+0x2ac>
 800ff10:	8b7b      	ldrh	r3, [r7, #26]
 800ff12:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800ff16:	4293      	cmp	r3, r2
 800ff18:	f200 809a 	bhi.w	8010050 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ff1c:	69fa      	ldr	r2, [r7, #28]
 800ff1e:	6879      	ldr	r1, [r7, #4]
 800ff20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ff22:	f7ff fdd5 	bl	800fad0 <ip_reass_chain_frag_into_datagram_and_validate>
 800ff26:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ff2e:	f000 809b 	beq.w	8010068 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ff32:	4b48      	ldr	r3, [pc, #288]	@ (8010054 <ip4_reass+0x2b0>)
 800ff34:	881a      	ldrh	r2, [r3, #0]
 800ff36:	8c3b      	ldrh	r3, [r7, #32]
 800ff38:	4413      	add	r3, r2
 800ff3a:	b29a      	uxth	r2, r3
 800ff3c:	4b45      	ldr	r3, [pc, #276]	@ (8010054 <ip4_reass+0x2b0>)
 800ff3e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ff40:	69fb      	ldr	r3, [r7, #28]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d00d      	beq.n	800ff62 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ff46:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ff48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff4a:	4413      	add	r3, r2
 800ff4c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ff4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff50:	8a7a      	ldrh	r2, [r7, #18]
 800ff52:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ff54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff56:	7f9b      	ldrb	r3, [r3, #30]
 800ff58:	f043 0301 	orr.w	r3, r3, #1
 800ff5c:	b2da      	uxtb	r2, r3
 800ff5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff60:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	2b01      	cmp	r3, #1
 800ff66:	d171      	bne.n	801004c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ff68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff6a:	8b9b      	ldrh	r3, [r3, #28]
 800ff6c:	3314      	adds	r3, #20
 800ff6e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ff70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff72:	685b      	ldr	r3, [r3, #4]
 800ff74:	685b      	ldr	r3, [r3, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ff7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff7c:	685b      	ldr	r3, [r3, #4]
 800ff7e:	685b      	ldr	r3, [r3, #4]
 800ff80:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ff82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff84:	3308      	adds	r3, #8
 800ff86:	2214      	movs	r2, #20
 800ff88:	4619      	mov	r1, r3
 800ff8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ff8c:	f000 fcf4 	bl	8010978 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ff90:	8a3b      	ldrh	r3, [r7, #16]
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7f6 fab8 	bl	8006508 <lwip_htons>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	461a      	mov	r2, r3
 800ff9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff9e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ffa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	719a      	strb	r2, [r3, #6]
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ffaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffac:	2200      	movs	r2, #0
 800ffae:	729a      	strb	r2, [r3, #10]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ffb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffb6:	685b      	ldr	r3, [r3, #4]
 800ffb8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ffba:	e00d      	b.n	800ffd8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ffbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffbe:	685b      	ldr	r3, [r3, #4]
 800ffc0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800ffc2:	2114      	movs	r1, #20
 800ffc4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ffc6:	f7f7 fd77 	bl	8007ab8 <pbuf_remove_header>
      pbuf_cat(p, r);
 800ffca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f7f7 febb 	bl	8007d48 <pbuf_cat>
      r = iprh->next_pbuf;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800ffd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d1ee      	bne.n	800ffbc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ffde:	4b1e      	ldr	r3, [pc, #120]	@ (8010058 <ip4_reass+0x2b4>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d102      	bne.n	800ffee <ip4_reass+0x24a>
      ipr_prev = NULL;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ffec:	e010      	b.n	8010010 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ffee:	4b1a      	ldr	r3, [pc, #104]	@ (8010058 <ip4_reass+0x2b4>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fff4:	e007      	b.n	8010006 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800fff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fffc:	429a      	cmp	r2, r3
 800fffe:	d006      	beq.n	801000e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010008:	2b00      	cmp	r3, #0
 801000a:	d1f4      	bne.n	800fff6 <ip4_reass+0x252>
 801000c:	e000      	b.n	8010010 <ip4_reass+0x26c>
          break;
 801000e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010010:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010012:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010014:	f7ff fd2e 	bl	800fa74 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f7f7 fe5b 	bl	8007cd4 <pbuf_clen>
 801001e:	4603      	mov	r3, r0
 8010020:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010022:	4b0c      	ldr	r3, [pc, #48]	@ (8010054 <ip4_reass+0x2b0>)
 8010024:	881b      	ldrh	r3, [r3, #0]
 8010026:	8c3a      	ldrh	r2, [r7, #32]
 8010028:	429a      	cmp	r2, r3
 801002a:	d906      	bls.n	801003a <ip4_reass+0x296>
 801002c:	4b0b      	ldr	r3, [pc, #44]	@ (801005c <ip4_reass+0x2b8>)
 801002e:	f240 229b 	movw	r2, #667	@ 0x29b
 8010032:	490b      	ldr	r1, [pc, #44]	@ (8010060 <ip4_reass+0x2bc>)
 8010034:	480b      	ldr	r0, [pc, #44]	@ (8010064 <ip4_reass+0x2c0>)
 8010036:	f000 fba3 	bl	8010780 <printf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801003a:	4b06      	ldr	r3, [pc, #24]	@ (8010054 <ip4_reass+0x2b0>)
 801003c:	881a      	ldrh	r2, [r3, #0]
 801003e:	8c3b      	ldrh	r3, [r7, #32]
 8010040:	1ad3      	subs	r3, r2, r3
 8010042:	b29a      	uxth	r2, r3
 8010044:	4b03      	ldr	r3, [pc, #12]	@ (8010054 <ip4_reass+0x2b0>)
 8010046:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	e038      	b.n	80100be <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801004c:	2300      	movs	r3, #0
 801004e:	e036      	b.n	80100be <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8010050:	bf00      	nop
 8010052:	e00a      	b.n	801006a <ip4_reass+0x2c6>
 8010054:	20008bbc 	.word	0x20008bbc
 8010058:	20008bb8 	.word	0x20008bb8
 801005c:	080177b4 	.word	0x080177b4
 8010060:	08017924 	.word	0x08017924
 8010064:	080177fc 	.word	0x080177fc
    goto nullreturn_ipr;
 8010068:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801006a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801006c:	2b00      	cmp	r3, #0
 801006e:	d106      	bne.n	801007e <ip4_reass+0x2da>
 8010070:	4b15      	ldr	r3, [pc, #84]	@ (80100c8 <ip4_reass+0x324>)
 8010072:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8010076:	4915      	ldr	r1, [pc, #84]	@ (80100cc <ip4_reass+0x328>)
 8010078:	4815      	ldr	r0, [pc, #84]	@ (80100d0 <ip4_reass+0x32c>)
 801007a:	f000 fb81 	bl	8010780 <printf>
  if (ipr->p == NULL) {
 801007e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010080:	685b      	ldr	r3, [r3, #4]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d116      	bne.n	80100b4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010086:	4b13      	ldr	r3, [pc, #76]	@ (80100d4 <ip4_reass+0x330>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801008c:	429a      	cmp	r2, r3
 801008e:	d006      	beq.n	801009e <ip4_reass+0x2fa>
 8010090:	4b0d      	ldr	r3, [pc, #52]	@ (80100c8 <ip4_reass+0x324>)
 8010092:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8010096:	4910      	ldr	r1, [pc, #64]	@ (80100d8 <ip4_reass+0x334>)
 8010098:	480d      	ldr	r0, [pc, #52]	@ (80100d0 <ip4_reass+0x32c>)
 801009a:	f000 fb71 	bl	8010780 <printf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801009e:	2100      	movs	r1, #0
 80100a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80100a2:	f7ff fce7 	bl	800fa74 <ip_reass_dequeue_datagram>
 80100a6:	e006      	b.n	80100b6 <ip4_reass+0x312>
    goto nullreturn;
 80100a8:	bf00      	nop
 80100aa:	e004      	b.n	80100b6 <ip4_reass+0x312>
    goto nullreturn;
 80100ac:	bf00      	nop
 80100ae:	e002      	b.n	80100b6 <ip4_reass+0x312>
      goto nullreturn;
 80100b0:	bf00      	nop
 80100b2:	e000      	b.n	80100b6 <ip4_reass+0x312>
  }

nullreturn:
 80100b4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f7f7 fd84 	bl	8007bc4 <pbuf_free>
  return NULL;
 80100bc:	2300      	movs	r3, #0
}
 80100be:	4618      	mov	r0, r3
 80100c0:	3738      	adds	r7, #56	@ 0x38
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}
 80100c6:	bf00      	nop
 80100c8:	080177b4 	.word	0x080177b4
 80100cc:	08017940 	.word	0x08017940
 80100d0:	080177fc 	.word	0x080177fc
 80100d4:	20008bb8 	.word	0x20008bb8
 80100d8:	0801794c 	.word	0x0801794c

080100dc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80100e0:	2005      	movs	r0, #5
 80100e2:	f7f6 fe89 	bl	8006df8 <memp_malloc>
 80100e6:	4603      	mov	r3, r0
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	bd80      	pop	{r7, pc}

080100ec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b082      	sub	sp, #8
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d106      	bne.n	8010108 <ip_frag_free_pbuf_custom_ref+0x1c>
 80100fa:	4b07      	ldr	r3, [pc, #28]	@ (8010118 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80100fc:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8010100:	4906      	ldr	r1, [pc, #24]	@ (801011c <ip_frag_free_pbuf_custom_ref+0x30>)
 8010102:	4807      	ldr	r0, [pc, #28]	@ (8010120 <ip_frag_free_pbuf_custom_ref+0x34>)
 8010104:	f000 fb3c 	bl	8010780 <printf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010108:	6879      	ldr	r1, [r7, #4]
 801010a:	2005      	movs	r0, #5
 801010c:	f7f6 fee4 	bl	8006ed8 <memp_free>
}
 8010110:	bf00      	nop
 8010112:	3708      	adds	r7, #8
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}
 8010118:	080177b4 	.word	0x080177b4
 801011c:	0801796c 	.word	0x0801796c
 8010120:	080177fc 	.word	0x080177fc

08010124 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b084      	sub	sp, #16
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d106      	bne.n	8010144 <ipfrag_free_pbuf_custom+0x20>
 8010136:	4b11      	ldr	r3, [pc, #68]	@ (801017c <ipfrag_free_pbuf_custom+0x58>)
 8010138:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801013c:	4910      	ldr	r1, [pc, #64]	@ (8010180 <ipfrag_free_pbuf_custom+0x5c>)
 801013e:	4811      	ldr	r0, [pc, #68]	@ (8010184 <ipfrag_free_pbuf_custom+0x60>)
 8010140:	f000 fb1e 	bl	8010780 <printf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010144:	68fa      	ldr	r2, [r7, #12]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	429a      	cmp	r2, r3
 801014a:	d006      	beq.n	801015a <ipfrag_free_pbuf_custom+0x36>
 801014c:	4b0b      	ldr	r3, [pc, #44]	@ (801017c <ipfrag_free_pbuf_custom+0x58>)
 801014e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8010152:	490d      	ldr	r1, [pc, #52]	@ (8010188 <ipfrag_free_pbuf_custom+0x64>)
 8010154:	480b      	ldr	r0, [pc, #44]	@ (8010184 <ipfrag_free_pbuf_custom+0x60>)
 8010156:	f000 fb13 	bl	8010780 <printf>
  if (pcr->original != NULL) {
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	695b      	ldr	r3, [r3, #20]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d004      	beq.n	801016c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	695b      	ldr	r3, [r3, #20]
 8010166:	4618      	mov	r0, r3
 8010168:	f7f7 fd2c 	bl	8007bc4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801016c:	68f8      	ldr	r0, [r7, #12]
 801016e:	f7ff ffbd 	bl	80100ec <ip_frag_free_pbuf_custom_ref>
}
 8010172:	bf00      	nop
 8010174:	3710      	adds	r7, #16
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}
 801017a:	bf00      	nop
 801017c:	080177b4 	.word	0x080177b4
 8010180:	08017978 	.word	0x08017978
 8010184:	080177fc 	.word	0x080177fc
 8010188:	08017984 	.word	0x08017984

0801018c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b094      	sub	sp, #80	@ 0x50
 8010190:	af02      	add	r7, sp, #8
 8010192:	60f8      	str	r0, [r7, #12]
 8010194:	60b9      	str	r1, [r7, #8]
 8010196:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010198:	2300      	movs	r3, #0
 801019a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80101a2:	3b14      	subs	r3, #20
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	da00      	bge.n	80101aa <ip4_frag+0x1e>
 80101a8:	3307      	adds	r3, #7
 80101aa:	10db      	asrs	r3, r3, #3
 80101ac:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80101ae:	2314      	movs	r3, #20
 80101b0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	685b      	ldr	r3, [r3, #4]
 80101b6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80101b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101ba:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80101bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	f003 030f 	and.w	r3, r3, #15
 80101c4:	b2db      	uxtb	r3, r3
 80101c6:	009b      	lsls	r3, r3, #2
 80101c8:	b2db      	uxtb	r3, r3
 80101ca:	2b14      	cmp	r3, #20
 80101cc:	d002      	beq.n	80101d4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80101ce:	f06f 0305 	mvn.w	r3, #5
 80101d2:	e110      	b.n	80103f6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	895b      	ldrh	r3, [r3, #10]
 80101d8:	2b13      	cmp	r3, #19
 80101da:	d809      	bhi.n	80101f0 <ip4_frag+0x64>
 80101dc:	4b88      	ldr	r3, [pc, #544]	@ (8010400 <ip4_frag+0x274>)
 80101de:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80101e2:	4988      	ldr	r1, [pc, #544]	@ (8010404 <ip4_frag+0x278>)
 80101e4:	4888      	ldr	r0, [pc, #544]	@ (8010408 <ip4_frag+0x27c>)
 80101e6:	f000 facb 	bl	8010780 <printf>
 80101ea:	f06f 0305 	mvn.w	r3, #5
 80101ee:	e102      	b.n	80103f6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80101f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101f2:	88db      	ldrh	r3, [r3, #6]
 80101f4:	b29b      	uxth	r3, r3
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7f6 f986 	bl	8006508 <lwip_htons>
 80101fc:	4603      	mov	r3, r0
 80101fe:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8010200:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010202:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010206:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801020a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801020c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010210:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	891b      	ldrh	r3, [r3, #8]
 8010216:	3b14      	subs	r3, #20
 8010218:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801021c:	e0e1      	b.n	80103e2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801021e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010220:	00db      	lsls	r3, r3, #3
 8010222:	b29b      	uxth	r3, r3
 8010224:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010228:	4293      	cmp	r3, r2
 801022a:	bf28      	it	cs
 801022c:	4613      	movcs	r3, r2
 801022e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010230:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010234:	2114      	movs	r1, #20
 8010236:	200e      	movs	r0, #14
 8010238:	f7f7 f9e0 	bl	80075fc <pbuf_alloc>
 801023c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801023e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010240:	2b00      	cmp	r3, #0
 8010242:	f000 80d5 	beq.w	80103f0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010248:	895b      	ldrh	r3, [r3, #10]
 801024a:	2b13      	cmp	r3, #19
 801024c:	d806      	bhi.n	801025c <ip4_frag+0xd0>
 801024e:	4b6c      	ldr	r3, [pc, #432]	@ (8010400 <ip4_frag+0x274>)
 8010250:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8010254:	496d      	ldr	r1, [pc, #436]	@ (801040c <ip4_frag+0x280>)
 8010256:	486c      	ldr	r0, [pc, #432]	@ (8010408 <ip4_frag+0x27c>)
 8010258:	f000 fa92 	bl	8010780 <printf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801025c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801025e:	685b      	ldr	r3, [r3, #4]
 8010260:	2214      	movs	r2, #20
 8010262:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010264:	4618      	mov	r0, r3
 8010266:	f000 fb87 	bl	8010978 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801026a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801026c:	685b      	ldr	r3, [r3, #4]
 801026e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8010270:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010272:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8010276:	e064      	b.n	8010342 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	895a      	ldrh	r2, [r3, #10]
 801027c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801027e:	1ad3      	subs	r3, r2, r3
 8010280:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	895b      	ldrh	r3, [r3, #10]
 8010286:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8010288:	429a      	cmp	r2, r3
 801028a:	d906      	bls.n	801029a <ip4_frag+0x10e>
 801028c:	4b5c      	ldr	r3, [pc, #368]	@ (8010400 <ip4_frag+0x274>)
 801028e:	f240 322d 	movw	r2, #813	@ 0x32d
 8010292:	495f      	ldr	r1, [pc, #380]	@ (8010410 <ip4_frag+0x284>)
 8010294:	485c      	ldr	r0, [pc, #368]	@ (8010408 <ip4_frag+0x27c>)
 8010296:	f000 fa73 	bl	8010780 <printf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801029a:	8bfa      	ldrh	r2, [r7, #30]
 801029c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80102a0:	4293      	cmp	r3, r2
 80102a2:	bf28      	it	cs
 80102a4:	4613      	movcs	r3, r2
 80102a6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80102aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d105      	bne.n	80102be <ip4_frag+0x132>
        poff = 0;
 80102b2:	2300      	movs	r3, #0
 80102b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	60fb      	str	r3, [r7, #12]
        continue;
 80102bc:	e041      	b.n	8010342 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80102be:	f7ff ff0d 	bl	80100dc <ip_frag_alloc_pbuf_custom_ref>
 80102c2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80102c4:	69bb      	ldr	r3, [r7, #24]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d103      	bne.n	80102d2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80102ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80102cc:	f7f7 fc7a 	bl	8007bc4 <pbuf_free>
        goto memerr;
 80102d0:	e08f      	b.n	80103f2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80102d2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80102d8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80102da:	4413      	add	r3, r2
 80102dc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80102e0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80102e4:	9201      	str	r2, [sp, #4]
 80102e6:	9300      	str	r3, [sp, #0]
 80102e8:	4603      	mov	r3, r0
 80102ea:	2241      	movs	r2, #65	@ 0x41
 80102ec:	2000      	movs	r0, #0
 80102ee:	f7f7 faaf 	bl	8007850 <pbuf_alloced_custom>
 80102f2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80102f4:	697b      	ldr	r3, [r7, #20]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d106      	bne.n	8010308 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80102fa:	69b8      	ldr	r0, [r7, #24]
 80102fc:	f7ff fef6 	bl	80100ec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010300:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010302:	f7f7 fc5f 	bl	8007bc4 <pbuf_free>
        goto memerr;
 8010306:	e074      	b.n	80103f2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010308:	68f8      	ldr	r0, [r7, #12]
 801030a:	f7f7 fcfb 	bl	8007d04 <pbuf_ref>
      pcr->original = p;
 801030e:	69bb      	ldr	r3, [r7, #24]
 8010310:	68fa      	ldr	r2, [r7, #12]
 8010312:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010314:	69bb      	ldr	r3, [r7, #24]
 8010316:	4a3f      	ldr	r2, [pc, #252]	@ (8010414 <ip4_frag+0x288>)
 8010318:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801031a:	6979      	ldr	r1, [r7, #20]
 801031c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801031e:	f7f7 fd13 	bl	8007d48 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010322:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8010326:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801032a:	1ad3      	subs	r3, r2, r3
 801032c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8010330:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010334:	2b00      	cmp	r3, #0
 8010336:	d004      	beq.n	8010342 <ip4_frag+0x1b6>
        poff = 0;
 8010338:	2300      	movs	r3, #0
 801033a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010342:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010346:	2b00      	cmp	r3, #0
 8010348:	d196      	bne.n	8010278 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801034a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801034c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010350:	4413      	add	r3, r2
 8010352:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010354:	68bb      	ldr	r3, [r7, #8]
 8010356:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010358:	f1a3 0213 	sub.w	r2, r3, #19
 801035c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010360:	429a      	cmp	r2, r3
 8010362:	bfcc      	ite	gt
 8010364:	2301      	movgt	r3, #1
 8010366:	2300      	movle	r3, #0
 8010368:	b2db      	uxtb	r3, r3
 801036a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801036c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010370:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010374:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8010376:	6a3b      	ldr	r3, [r7, #32]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d002      	beq.n	8010382 <ip4_frag+0x1f6>
 801037c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801037e:	2b00      	cmp	r3, #0
 8010380:	d003      	beq.n	801038a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010382:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010384:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8010388:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801038a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801038c:	4618      	mov	r0, r3
 801038e:	f7f6 f8bb 	bl	8006508 <lwip_htons>
 8010392:	4603      	mov	r3, r0
 8010394:	461a      	mov	r2, r3
 8010396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010398:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801039a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801039c:	3314      	adds	r3, #20
 801039e:	b29b      	uxth	r3, r3
 80103a0:	4618      	mov	r0, r3
 80103a2:	f7f6 f8b1 	bl	8006508 <lwip_htons>
 80103a6:	4603      	mov	r3, r0
 80103a8:	461a      	mov	r2, r3
 80103aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103ac:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80103ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103b0:	2200      	movs	r2, #0
 80103b2:	729a      	strb	r2, [r3, #10]
 80103b4:	2200      	movs	r2, #0
 80103b6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	695b      	ldr	r3, [r3, #20]
 80103bc:	687a      	ldr	r2, [r7, #4]
 80103be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80103c0:	68b8      	ldr	r0, [r7, #8]
 80103c2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80103c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80103c6:	f7f7 fbfd 	bl	8007bc4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80103ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80103ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80103d0:	1ad3      	subs	r3, r2, r3
 80103d2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80103d6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80103da:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80103dc:	4413      	add	r3, r2
 80103de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80103e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	f47f af19 	bne.w	801021e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80103ec:	2300      	movs	r3, #0
 80103ee:	e002      	b.n	80103f6 <ip4_frag+0x26a>
      goto memerr;
 80103f0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80103f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	3748      	adds	r7, #72	@ 0x48
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}
 80103fe:	bf00      	nop
 8010400:	080177b4 	.word	0x080177b4
 8010404:	08017990 	.word	0x08017990
 8010408:	080177fc 	.word	0x080177fc
 801040c:	080179ac 	.word	0x080179ac
 8010410:	080179cc 	.word	0x080179cc
 8010414:	08010125 	.word	0x08010125

08010418 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b086      	sub	sp, #24
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
 8010420:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010422:	230e      	movs	r3, #14
 8010424:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	895b      	ldrh	r3, [r3, #10]
 801042a:	2b0e      	cmp	r3, #14
 801042c:	d96e      	bls.n	801050c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	7bdb      	ldrb	r3, [r3, #15]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d106      	bne.n	8010444 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801043c:	3301      	adds	r3, #1
 801043e:	b2da      	uxtb	r2, r3
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	685b      	ldr	r3, [r3, #4]
 8010448:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	7b1a      	ldrb	r2, [r3, #12]
 801044e:	7b5b      	ldrb	r3, [r3, #13]
 8010450:	021b      	lsls	r3, r3, #8
 8010452:	4313      	orrs	r3, r2
 8010454:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010456:	693b      	ldr	r3, [r7, #16]
 8010458:	781b      	ldrb	r3, [r3, #0]
 801045a:	f003 0301 	and.w	r3, r3, #1
 801045e:	2b00      	cmp	r3, #0
 8010460:	d023      	beq.n	80104aa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010462:	693b      	ldr	r3, [r7, #16]
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	2b01      	cmp	r3, #1
 8010468:	d10f      	bne.n	801048a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801046a:	693b      	ldr	r3, [r7, #16]
 801046c:	785b      	ldrb	r3, [r3, #1]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d11b      	bne.n	80104aa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010476:	2b5e      	cmp	r3, #94	@ 0x5e
 8010478:	d117      	bne.n	80104aa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	7b5b      	ldrb	r3, [r3, #13]
 801047e:	f043 0310 	orr.w	r3, r3, #16
 8010482:	b2da      	uxtb	r2, r3
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	735a      	strb	r2, [r3, #13]
 8010488:	e00f      	b.n	80104aa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	2206      	movs	r2, #6
 801048e:	4928      	ldr	r1, [pc, #160]	@ (8010530 <ethernet_input+0x118>)
 8010490:	4618      	mov	r0, r3
 8010492:	f000 f9ca 	bl	801082a <memcmp>
 8010496:	4603      	mov	r3, r0
 8010498:	2b00      	cmp	r3, #0
 801049a:	d106      	bne.n	80104aa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	7b5b      	ldrb	r3, [r3, #13]
 80104a0:	f043 0308 	orr.w	r3, r3, #8
 80104a4:	b2da      	uxtb	r2, r3
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80104aa:	89fb      	ldrh	r3, [r7, #14]
 80104ac:	2b08      	cmp	r3, #8
 80104ae:	d003      	beq.n	80104b8 <ethernet_input+0xa0>
 80104b0:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80104b4:	d014      	beq.n	80104e0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80104b6:	e032      	b.n	801051e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80104be:	f003 0308 	and.w	r3, r3, #8
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d024      	beq.n	8010510 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80104c6:	8afb      	ldrh	r3, [r7, #22]
 80104c8:	4619      	mov	r1, r3
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f7f7 faf4 	bl	8007ab8 <pbuf_remove_header>
 80104d0:	4603      	mov	r3, r0
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d11e      	bne.n	8010514 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80104d6:	6839      	ldr	r1, [r7, #0]
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f7fe ff21 	bl	800f320 <ip4_input>
      break;
 80104de:	e013      	b.n	8010508 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80104e6:	f003 0308 	and.w	r3, r3, #8
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d014      	beq.n	8010518 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80104ee:	8afb      	ldrh	r3, [r7, #22]
 80104f0:	4619      	mov	r1, r3
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f7f7 fae0 	bl	8007ab8 <pbuf_remove_header>
 80104f8:	4603      	mov	r3, r0
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d10e      	bne.n	801051c <ethernet_input+0x104>
        etharp_input(p, netif);
 80104fe:	6839      	ldr	r1, [r7, #0]
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f7fe f8c1 	bl	800e688 <etharp_input>
      break;
 8010506:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010508:	2300      	movs	r3, #0
 801050a:	e00c      	b.n	8010526 <ethernet_input+0x10e>
    goto free_and_return;
 801050c:	bf00      	nop
 801050e:	e006      	b.n	801051e <ethernet_input+0x106>
        goto free_and_return;
 8010510:	bf00      	nop
 8010512:	e004      	b.n	801051e <ethernet_input+0x106>
        goto free_and_return;
 8010514:	bf00      	nop
 8010516:	e002      	b.n	801051e <ethernet_input+0x106>
        goto free_and_return;
 8010518:	bf00      	nop
 801051a:	e000      	b.n	801051e <ethernet_input+0x106>
        goto free_and_return;
 801051c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f7f7 fb50 	bl	8007bc4 <pbuf_free>
  return ERR_OK;
 8010524:	2300      	movs	r3, #0
}
 8010526:	4618      	mov	r0, r3
 8010528:	3718      	adds	r7, #24
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}
 801052e:	bf00      	nop
 8010530:	08017b60 	.word	0x08017b60

08010534 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010534:	b580      	push	{r7, lr}
 8010536:	b086      	sub	sp, #24
 8010538:	af00      	add	r7, sp, #0
 801053a:	60f8      	str	r0, [r7, #12]
 801053c:	60b9      	str	r1, [r7, #8]
 801053e:	607a      	str	r2, [r7, #4]
 8010540:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010542:	8c3b      	ldrh	r3, [r7, #32]
 8010544:	4618      	mov	r0, r3
 8010546:	f7f5 ffdf 	bl	8006508 <lwip_htons>
 801054a:	4603      	mov	r3, r0
 801054c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801054e:	210e      	movs	r1, #14
 8010550:	68b8      	ldr	r0, [r7, #8]
 8010552:	f7f7 faa1 	bl	8007a98 <pbuf_add_header>
 8010556:	4603      	mov	r3, r0
 8010558:	2b00      	cmp	r3, #0
 801055a:	d125      	bne.n	80105a8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	685b      	ldr	r3, [r3, #4]
 8010560:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	8afa      	ldrh	r2, [r7, #22]
 8010566:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010568:	693b      	ldr	r3, [r7, #16]
 801056a:	2206      	movs	r2, #6
 801056c:	6839      	ldr	r1, [r7, #0]
 801056e:	4618      	mov	r0, r3
 8010570:	f000 fa02 	bl	8010978 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010574:	693b      	ldr	r3, [r7, #16]
 8010576:	3306      	adds	r3, #6
 8010578:	2206      	movs	r2, #6
 801057a:	6879      	ldr	r1, [r7, #4]
 801057c:	4618      	mov	r0, r3
 801057e:	f000 f9fb 	bl	8010978 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010588:	2b06      	cmp	r3, #6
 801058a:	d006      	beq.n	801059a <ethernet_output+0x66>
 801058c:	4b0a      	ldr	r3, [pc, #40]	@ (80105b8 <ethernet_output+0x84>)
 801058e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8010592:	490a      	ldr	r1, [pc, #40]	@ (80105bc <ethernet_output+0x88>)
 8010594:	480a      	ldr	r0, [pc, #40]	@ (80105c0 <ethernet_output+0x8c>)
 8010596:	f000 f8f3 	bl	8010780 <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	699b      	ldr	r3, [r3, #24]
 801059e:	68b9      	ldr	r1, [r7, #8]
 80105a0:	68f8      	ldr	r0, [r7, #12]
 80105a2:	4798      	blx	r3
 80105a4:	4603      	mov	r3, r0
 80105a6:	e002      	b.n	80105ae <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80105a8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80105aa:	f06f 0301 	mvn.w	r3, #1
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	3718      	adds	r7, #24
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	bf00      	nop
 80105b8:	080179dc 	.word	0x080179dc
 80105bc:	08017a14 	.word	0x08017a14
 80105c0:	08017a48 	.word	0x08017a48

080105c4 <rand>:
 80105c4:	4b0a      	ldr	r3, [pc, #40]	@ (80105f0 <rand+0x2c>)
 80105c6:	480b      	ldr	r0, [pc, #44]	@ (80105f4 <rand+0x30>)
 80105c8:	6819      	ldr	r1, [r3, #0]
 80105ca:	4a0b      	ldr	r2, [pc, #44]	@ (80105f8 <rand+0x34>)
 80105cc:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
 80105d0:	b510      	push	{r4, lr}
 80105d2:	f8d1 409c 	ldr.w	r4, [r1, #156]	@ 0x9c
 80105d6:	4358      	muls	r0, r3
 80105d8:	fb02 0004 	mla	r0, r2, r4, r0
 80105dc:	fba3 3202 	umull	r3, r2, r3, r2
 80105e0:	3301      	adds	r3, #1
 80105e2:	eb40 0002 	adc.w	r0, r0, r2
 80105e6:	e9c1 3026 	strd	r3, r0, [r1, #152]	@ 0x98
 80105ea:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80105ee:	bd10      	pop	{r4, pc}
 80105f0:	2000003c 	.word	0x2000003c
 80105f4:	5851f42d 	.word	0x5851f42d
 80105f8:	4c957f2d 	.word	0x4c957f2d

080105fc <std>:
 80105fc:	2300      	movs	r3, #0
 80105fe:	b510      	push	{r4, lr}
 8010600:	4604      	mov	r4, r0
 8010602:	e9c0 3300 	strd	r3, r3, [r0]
 8010606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801060a:	6083      	str	r3, [r0, #8]
 801060c:	8181      	strh	r1, [r0, #12]
 801060e:	6643      	str	r3, [r0, #100]	@ 0x64
 8010610:	81c2      	strh	r2, [r0, #14]
 8010612:	6183      	str	r3, [r0, #24]
 8010614:	4619      	mov	r1, r3
 8010616:	2208      	movs	r2, #8
 8010618:	305c      	adds	r0, #92	@ 0x5c
 801061a:	f000 f930 	bl	801087e <memset>
 801061e:	4b0d      	ldr	r3, [pc, #52]	@ (8010654 <std+0x58>)
 8010620:	6223      	str	r3, [r4, #32]
 8010622:	4b0d      	ldr	r3, [pc, #52]	@ (8010658 <std+0x5c>)
 8010624:	6263      	str	r3, [r4, #36]	@ 0x24
 8010626:	4b0d      	ldr	r3, [pc, #52]	@ (801065c <std+0x60>)
 8010628:	62a3      	str	r3, [r4, #40]	@ 0x28
 801062a:	4b0d      	ldr	r3, [pc, #52]	@ (8010660 <std+0x64>)
 801062c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801062e:	4b0d      	ldr	r3, [pc, #52]	@ (8010664 <std+0x68>)
 8010630:	61e4      	str	r4, [r4, #28]
 8010632:	429c      	cmp	r4, r3
 8010634:	d006      	beq.n	8010644 <std+0x48>
 8010636:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801063a:	4294      	cmp	r4, r2
 801063c:	d002      	beq.n	8010644 <std+0x48>
 801063e:	33d0      	adds	r3, #208	@ 0xd0
 8010640:	429c      	cmp	r4, r3
 8010642:	d105      	bne.n	8010650 <std+0x54>
 8010644:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801064c:	f000 b990 	b.w	8010970 <__retarget_lock_init_recursive>
 8010650:	bd10      	pop	{r4, pc}
 8010652:	bf00      	nop
 8010654:	080107a5 	.word	0x080107a5
 8010658:	080107c7 	.word	0x080107c7
 801065c:	080107ff 	.word	0x080107ff
 8010660:	08010823 	.word	0x08010823
 8010664:	20008bc0 	.word	0x20008bc0

08010668 <stdio_exit_handler>:
 8010668:	4a02      	ldr	r2, [pc, #8]	@ (8010674 <stdio_exit_handler+0xc>)
 801066a:	4903      	ldr	r1, [pc, #12]	@ (8010678 <stdio_exit_handler+0x10>)
 801066c:	4803      	ldr	r0, [pc, #12]	@ (801067c <stdio_exit_handler+0x14>)
 801066e:	f000 b869 	b.w	8010744 <_fwalk_sglue>
 8010672:	bf00      	nop
 8010674:	20000030 	.word	0x20000030
 8010678:	08012f3d 	.word	0x08012f3d
 801067c:	20000040 	.word	0x20000040

08010680 <cleanup_stdio>:
 8010680:	6841      	ldr	r1, [r0, #4]
 8010682:	4b0c      	ldr	r3, [pc, #48]	@ (80106b4 <cleanup_stdio+0x34>)
 8010684:	4299      	cmp	r1, r3
 8010686:	b510      	push	{r4, lr}
 8010688:	4604      	mov	r4, r0
 801068a:	d001      	beq.n	8010690 <cleanup_stdio+0x10>
 801068c:	f002 fc56 	bl	8012f3c <_fclose_r>
 8010690:	68a1      	ldr	r1, [r4, #8]
 8010692:	4b09      	ldr	r3, [pc, #36]	@ (80106b8 <cleanup_stdio+0x38>)
 8010694:	4299      	cmp	r1, r3
 8010696:	d002      	beq.n	801069e <cleanup_stdio+0x1e>
 8010698:	4620      	mov	r0, r4
 801069a:	f002 fc4f 	bl	8012f3c <_fclose_r>
 801069e:	68e1      	ldr	r1, [r4, #12]
 80106a0:	4b06      	ldr	r3, [pc, #24]	@ (80106bc <cleanup_stdio+0x3c>)
 80106a2:	4299      	cmp	r1, r3
 80106a4:	d004      	beq.n	80106b0 <cleanup_stdio+0x30>
 80106a6:	4620      	mov	r0, r4
 80106a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106ac:	f002 bc46 	b.w	8012f3c <_fclose_r>
 80106b0:	bd10      	pop	{r4, pc}
 80106b2:	bf00      	nop
 80106b4:	20008bc0 	.word	0x20008bc0
 80106b8:	20008c28 	.word	0x20008c28
 80106bc:	20008c90 	.word	0x20008c90

080106c0 <global_stdio_init.part.0>:
 80106c0:	b510      	push	{r4, lr}
 80106c2:	4b0b      	ldr	r3, [pc, #44]	@ (80106f0 <global_stdio_init.part.0+0x30>)
 80106c4:	4c0b      	ldr	r4, [pc, #44]	@ (80106f4 <global_stdio_init.part.0+0x34>)
 80106c6:	4a0c      	ldr	r2, [pc, #48]	@ (80106f8 <global_stdio_init.part.0+0x38>)
 80106c8:	601a      	str	r2, [r3, #0]
 80106ca:	4620      	mov	r0, r4
 80106cc:	2200      	movs	r2, #0
 80106ce:	2104      	movs	r1, #4
 80106d0:	f7ff ff94 	bl	80105fc <std>
 80106d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80106d8:	2201      	movs	r2, #1
 80106da:	2109      	movs	r1, #9
 80106dc:	f7ff ff8e 	bl	80105fc <std>
 80106e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80106e4:	2202      	movs	r2, #2
 80106e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106ea:	2112      	movs	r1, #18
 80106ec:	f7ff bf86 	b.w	80105fc <std>
 80106f0:	20008cf8 	.word	0x20008cf8
 80106f4:	20008bc0 	.word	0x20008bc0
 80106f8:	08010669 	.word	0x08010669

080106fc <__sfp_lock_acquire>:
 80106fc:	4801      	ldr	r0, [pc, #4]	@ (8010704 <__sfp_lock_acquire+0x8>)
 80106fe:	f000 b939 	b.w	8010974 <__retarget_lock_acquire_recursive>
 8010702:	bf00      	nop
 8010704:	20008d02 	.word	0x20008d02

08010708 <__sfp_lock_release>:
 8010708:	4801      	ldr	r0, [pc, #4]	@ (8010710 <__sfp_lock_release+0x8>)
 801070a:	f000 b934 	b.w	8010976 <__retarget_lock_release_recursive>
 801070e:	bf00      	nop
 8010710:	20008d02 	.word	0x20008d02

08010714 <__sinit>:
 8010714:	b510      	push	{r4, lr}
 8010716:	4604      	mov	r4, r0
 8010718:	f7ff fff0 	bl	80106fc <__sfp_lock_acquire>
 801071c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801071e:	b11b      	cbz	r3, 8010728 <__sinit+0x14>
 8010720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010724:	f7ff bff0 	b.w	8010708 <__sfp_lock_release>
 8010728:	4b04      	ldr	r3, [pc, #16]	@ (801073c <__sinit+0x28>)
 801072a:	6363      	str	r3, [r4, #52]	@ 0x34
 801072c:	4b04      	ldr	r3, [pc, #16]	@ (8010740 <__sinit+0x2c>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d1f5      	bne.n	8010720 <__sinit+0xc>
 8010734:	f7ff ffc4 	bl	80106c0 <global_stdio_init.part.0>
 8010738:	e7f2      	b.n	8010720 <__sinit+0xc>
 801073a:	bf00      	nop
 801073c:	08010681 	.word	0x08010681
 8010740:	20008cf8 	.word	0x20008cf8

08010744 <_fwalk_sglue>:
 8010744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010748:	4607      	mov	r7, r0
 801074a:	4688      	mov	r8, r1
 801074c:	4614      	mov	r4, r2
 801074e:	2600      	movs	r6, #0
 8010750:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010754:	f1b9 0901 	subs.w	r9, r9, #1
 8010758:	d505      	bpl.n	8010766 <_fwalk_sglue+0x22>
 801075a:	6824      	ldr	r4, [r4, #0]
 801075c:	2c00      	cmp	r4, #0
 801075e:	d1f7      	bne.n	8010750 <_fwalk_sglue+0xc>
 8010760:	4630      	mov	r0, r6
 8010762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010766:	89ab      	ldrh	r3, [r5, #12]
 8010768:	2b01      	cmp	r3, #1
 801076a:	d907      	bls.n	801077c <_fwalk_sglue+0x38>
 801076c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010770:	3301      	adds	r3, #1
 8010772:	d003      	beq.n	801077c <_fwalk_sglue+0x38>
 8010774:	4629      	mov	r1, r5
 8010776:	4638      	mov	r0, r7
 8010778:	47c0      	blx	r8
 801077a:	4306      	orrs	r6, r0
 801077c:	3568      	adds	r5, #104	@ 0x68
 801077e:	e7e9      	b.n	8010754 <_fwalk_sglue+0x10>

08010780 <printf>:
 8010780:	b40f      	push	{r0, r1, r2, r3}
 8010782:	b507      	push	{r0, r1, r2, lr}
 8010784:	4906      	ldr	r1, [pc, #24]	@ (80107a0 <printf+0x20>)
 8010786:	ab04      	add	r3, sp, #16
 8010788:	6808      	ldr	r0, [r1, #0]
 801078a:	f853 2b04 	ldr.w	r2, [r3], #4
 801078e:	6881      	ldr	r1, [r0, #8]
 8010790:	9301      	str	r3, [sp, #4]
 8010792:	f000 fc6d 	bl	8011070 <_vfprintf_r>
 8010796:	b003      	add	sp, #12
 8010798:	f85d eb04 	ldr.w	lr, [sp], #4
 801079c:	b004      	add	sp, #16
 801079e:	4770      	bx	lr
 80107a0:	2000003c 	.word	0x2000003c

080107a4 <__sread>:
 80107a4:	b510      	push	{r4, lr}
 80107a6:	460c      	mov	r4, r1
 80107a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107ac:	f000 f892 	bl	80108d4 <_read_r>
 80107b0:	2800      	cmp	r0, #0
 80107b2:	bfab      	itete	ge
 80107b4:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 80107b6:	89a3      	ldrhlt	r3, [r4, #12]
 80107b8:	181b      	addge	r3, r3, r0
 80107ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80107be:	bfac      	ite	ge
 80107c0:	6523      	strge	r3, [r4, #80]	@ 0x50
 80107c2:	81a3      	strhlt	r3, [r4, #12]
 80107c4:	bd10      	pop	{r4, pc}

080107c6 <__swrite>:
 80107c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107ca:	461f      	mov	r7, r3
 80107cc:	898b      	ldrh	r3, [r1, #12]
 80107ce:	05db      	lsls	r3, r3, #23
 80107d0:	4605      	mov	r5, r0
 80107d2:	460c      	mov	r4, r1
 80107d4:	4616      	mov	r6, r2
 80107d6:	d505      	bpl.n	80107e4 <__swrite+0x1e>
 80107d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107dc:	2302      	movs	r3, #2
 80107de:	2200      	movs	r2, #0
 80107e0:	f000 f866 	bl	80108b0 <_lseek_r>
 80107e4:	89a3      	ldrh	r3, [r4, #12]
 80107e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80107ee:	81a3      	strh	r3, [r4, #12]
 80107f0:	4632      	mov	r2, r6
 80107f2:	463b      	mov	r3, r7
 80107f4:	4628      	mov	r0, r5
 80107f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107fa:	f000 b87d 	b.w	80108f8 <_write_r>

080107fe <__sseek>:
 80107fe:	b510      	push	{r4, lr}
 8010800:	460c      	mov	r4, r1
 8010802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010806:	f000 f853 	bl	80108b0 <_lseek_r>
 801080a:	1c43      	adds	r3, r0, #1
 801080c:	89a3      	ldrh	r3, [r4, #12]
 801080e:	bf15      	itete	ne
 8010810:	6520      	strne	r0, [r4, #80]	@ 0x50
 8010812:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010816:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801081a:	81a3      	strheq	r3, [r4, #12]
 801081c:	bf18      	it	ne
 801081e:	81a3      	strhne	r3, [r4, #12]
 8010820:	bd10      	pop	{r4, pc}

08010822 <__sclose>:
 8010822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010826:	f000 b833 	b.w	8010890 <_close_r>

0801082a <memcmp>:
 801082a:	b510      	push	{r4, lr}
 801082c:	3901      	subs	r1, #1
 801082e:	4402      	add	r2, r0
 8010830:	4290      	cmp	r0, r2
 8010832:	d101      	bne.n	8010838 <memcmp+0xe>
 8010834:	2000      	movs	r0, #0
 8010836:	e005      	b.n	8010844 <memcmp+0x1a>
 8010838:	7803      	ldrb	r3, [r0, #0]
 801083a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801083e:	42a3      	cmp	r3, r4
 8010840:	d001      	beq.n	8010846 <memcmp+0x1c>
 8010842:	1b18      	subs	r0, r3, r4
 8010844:	bd10      	pop	{r4, pc}
 8010846:	3001      	adds	r0, #1
 8010848:	e7f2      	b.n	8010830 <memcmp+0x6>

0801084a <memmove>:
 801084a:	4288      	cmp	r0, r1
 801084c:	b510      	push	{r4, lr}
 801084e:	eb01 0402 	add.w	r4, r1, r2
 8010852:	d902      	bls.n	801085a <memmove+0x10>
 8010854:	4284      	cmp	r4, r0
 8010856:	4623      	mov	r3, r4
 8010858:	d807      	bhi.n	801086a <memmove+0x20>
 801085a:	1e43      	subs	r3, r0, #1
 801085c:	42a1      	cmp	r1, r4
 801085e:	d008      	beq.n	8010872 <memmove+0x28>
 8010860:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010864:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010868:	e7f8      	b.n	801085c <memmove+0x12>
 801086a:	4402      	add	r2, r0
 801086c:	4601      	mov	r1, r0
 801086e:	428a      	cmp	r2, r1
 8010870:	d100      	bne.n	8010874 <memmove+0x2a>
 8010872:	bd10      	pop	{r4, pc}
 8010874:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010878:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801087c:	e7f7      	b.n	801086e <memmove+0x24>

0801087e <memset>:
 801087e:	4402      	add	r2, r0
 8010880:	4603      	mov	r3, r0
 8010882:	4293      	cmp	r3, r2
 8010884:	d100      	bne.n	8010888 <memset+0xa>
 8010886:	4770      	bx	lr
 8010888:	f803 1b01 	strb.w	r1, [r3], #1
 801088c:	e7f9      	b.n	8010882 <memset+0x4>
	...

08010890 <_close_r>:
 8010890:	b538      	push	{r3, r4, r5, lr}
 8010892:	4d06      	ldr	r5, [pc, #24]	@ (80108ac <_close_r+0x1c>)
 8010894:	2300      	movs	r3, #0
 8010896:	4604      	mov	r4, r0
 8010898:	4608      	mov	r0, r1
 801089a:	602b      	str	r3, [r5, #0]
 801089c:	f7f1 fa00 	bl	8001ca0 <_close>
 80108a0:	1c43      	adds	r3, r0, #1
 80108a2:	d102      	bne.n	80108aa <_close_r+0x1a>
 80108a4:	682b      	ldr	r3, [r5, #0]
 80108a6:	b103      	cbz	r3, 80108aa <_close_r+0x1a>
 80108a8:	6023      	str	r3, [r4, #0]
 80108aa:	bd38      	pop	{r3, r4, r5, pc}
 80108ac:	20008cfc 	.word	0x20008cfc

080108b0 <_lseek_r>:
 80108b0:	b538      	push	{r3, r4, r5, lr}
 80108b2:	4d07      	ldr	r5, [pc, #28]	@ (80108d0 <_lseek_r+0x20>)
 80108b4:	4604      	mov	r4, r0
 80108b6:	4608      	mov	r0, r1
 80108b8:	4611      	mov	r1, r2
 80108ba:	2200      	movs	r2, #0
 80108bc:	602a      	str	r2, [r5, #0]
 80108be:	461a      	mov	r2, r3
 80108c0:	f7f1 fa15 	bl	8001cee <_lseek>
 80108c4:	1c43      	adds	r3, r0, #1
 80108c6:	d102      	bne.n	80108ce <_lseek_r+0x1e>
 80108c8:	682b      	ldr	r3, [r5, #0]
 80108ca:	b103      	cbz	r3, 80108ce <_lseek_r+0x1e>
 80108cc:	6023      	str	r3, [r4, #0]
 80108ce:	bd38      	pop	{r3, r4, r5, pc}
 80108d0:	20008cfc 	.word	0x20008cfc

080108d4 <_read_r>:
 80108d4:	b538      	push	{r3, r4, r5, lr}
 80108d6:	4d07      	ldr	r5, [pc, #28]	@ (80108f4 <_read_r+0x20>)
 80108d8:	4604      	mov	r4, r0
 80108da:	4608      	mov	r0, r1
 80108dc:	4611      	mov	r1, r2
 80108de:	2200      	movs	r2, #0
 80108e0:	602a      	str	r2, [r5, #0]
 80108e2:	461a      	mov	r2, r3
 80108e4:	f7f1 f9bf 	bl	8001c66 <_read>
 80108e8:	1c43      	adds	r3, r0, #1
 80108ea:	d102      	bne.n	80108f2 <_read_r+0x1e>
 80108ec:	682b      	ldr	r3, [r5, #0]
 80108ee:	b103      	cbz	r3, 80108f2 <_read_r+0x1e>
 80108f0:	6023      	str	r3, [r4, #0]
 80108f2:	bd38      	pop	{r3, r4, r5, pc}
 80108f4:	20008cfc 	.word	0x20008cfc

080108f8 <_write_r>:
 80108f8:	b538      	push	{r3, r4, r5, lr}
 80108fa:	4d07      	ldr	r5, [pc, #28]	@ (8010918 <_write_r+0x20>)
 80108fc:	4604      	mov	r4, r0
 80108fe:	4608      	mov	r0, r1
 8010900:	4611      	mov	r1, r2
 8010902:	2200      	movs	r2, #0
 8010904:	602a      	str	r2, [r5, #0]
 8010906:	461a      	mov	r2, r3
 8010908:	f7f0 fb84 	bl	8001014 <_write>
 801090c:	1c43      	adds	r3, r0, #1
 801090e:	d102      	bne.n	8010916 <_write_r+0x1e>
 8010910:	682b      	ldr	r3, [r5, #0]
 8010912:	b103      	cbz	r3, 8010916 <_write_r+0x1e>
 8010914:	6023      	str	r3, [r4, #0]
 8010916:	bd38      	pop	{r3, r4, r5, pc}
 8010918:	20008cfc 	.word	0x20008cfc

0801091c <__errno>:
 801091c:	4b01      	ldr	r3, [pc, #4]	@ (8010924 <__errno+0x8>)
 801091e:	6818      	ldr	r0, [r3, #0]
 8010920:	4770      	bx	lr
 8010922:	bf00      	nop
 8010924:	2000003c 	.word	0x2000003c

08010928 <__libc_init_array>:
 8010928:	b570      	push	{r4, r5, r6, lr}
 801092a:	4d0d      	ldr	r5, [pc, #52]	@ (8010960 <__libc_init_array+0x38>)
 801092c:	4c0d      	ldr	r4, [pc, #52]	@ (8010964 <__libc_init_array+0x3c>)
 801092e:	1b64      	subs	r4, r4, r5
 8010930:	10a4      	asrs	r4, r4, #2
 8010932:	2600      	movs	r6, #0
 8010934:	42a6      	cmp	r6, r4
 8010936:	d109      	bne.n	801094c <__libc_init_array+0x24>
 8010938:	4d0b      	ldr	r5, [pc, #44]	@ (8010968 <__libc_init_array+0x40>)
 801093a:	4c0c      	ldr	r4, [pc, #48]	@ (801096c <__libc_init_array+0x44>)
 801093c:	f004 fb9c 	bl	8015078 <_init>
 8010940:	1b64      	subs	r4, r4, r5
 8010942:	10a4      	asrs	r4, r4, #2
 8010944:	2600      	movs	r6, #0
 8010946:	42a6      	cmp	r6, r4
 8010948:	d105      	bne.n	8010956 <__libc_init_array+0x2e>
 801094a:	bd70      	pop	{r4, r5, r6, pc}
 801094c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010950:	4798      	blx	r3
 8010952:	3601      	adds	r6, #1
 8010954:	e7ee      	b.n	8010934 <__libc_init_array+0xc>
 8010956:	f855 3b04 	ldr.w	r3, [r5], #4
 801095a:	4798      	blx	r3
 801095c:	3601      	adds	r6, #1
 801095e:	e7f2      	b.n	8010946 <__libc_init_array+0x1e>
 8010960:	08017efc 	.word	0x08017efc
 8010964:	08017efc 	.word	0x08017efc
 8010968:	08017efc 	.word	0x08017efc
 801096c:	08017f04 	.word	0x08017f04

08010970 <__retarget_lock_init_recursive>:
 8010970:	4770      	bx	lr

08010972 <__retarget_lock_close_recursive>:
 8010972:	4770      	bx	lr

08010974 <__retarget_lock_acquire_recursive>:
 8010974:	4770      	bx	lr

08010976 <__retarget_lock_release_recursive>:
 8010976:	4770      	bx	lr

08010978 <memcpy>:
 8010978:	440a      	add	r2, r1
 801097a:	4291      	cmp	r1, r2
 801097c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8010980:	d100      	bne.n	8010984 <memcpy+0xc>
 8010982:	4770      	bx	lr
 8010984:	b510      	push	{r4, lr}
 8010986:	f811 4b01 	ldrb.w	r4, [r1], #1
 801098a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801098e:	4291      	cmp	r1, r2
 8010990:	d1f9      	bne.n	8010986 <memcpy+0xe>
 8010992:	bd10      	pop	{r4, pc}

08010994 <register_fini>:
 8010994:	4b02      	ldr	r3, [pc, #8]	@ (80109a0 <register_fini+0xc>)
 8010996:	b113      	cbz	r3, 801099e <register_fini+0xa>
 8010998:	4802      	ldr	r0, [pc, #8]	@ (80109a4 <register_fini+0x10>)
 801099a:	f000 b805 	b.w	80109a8 <atexit>
 801099e:	4770      	bx	lr
 80109a0:	00000000 	.word	0x00000000
 80109a4:	080135b9 	.word	0x080135b9

080109a8 <atexit>:
 80109a8:	2300      	movs	r3, #0
 80109aa:	4601      	mov	r1, r0
 80109ac:	461a      	mov	r2, r3
 80109ae:	4618      	mov	r0, r3
 80109b0:	f002 be58 	b.w	8013664 <__register_exitproc>

080109b4 <_malloc_trim_r>:
 80109b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109b8:	4606      	mov	r6, r0
 80109ba:	2008      	movs	r0, #8
 80109bc:	4689      	mov	r9, r1
 80109be:	f002 fe0f 	bl	80135e0 <sysconf>
 80109c2:	4f24      	ldr	r7, [pc, #144]	@ (8010a54 <_malloc_trim_r+0xa0>)
 80109c4:	4680      	mov	r8, r0
 80109c6:	4630      	mov	r0, r6
 80109c8:	f000 fb44 	bl	8011054 <__malloc_lock>
 80109cc:	68bb      	ldr	r3, [r7, #8]
 80109ce:	685d      	ldr	r5, [r3, #4]
 80109d0:	f025 0503 	bic.w	r5, r5, #3
 80109d4:	f1a5 0411 	sub.w	r4, r5, #17
 80109d8:	eba4 0409 	sub.w	r4, r4, r9
 80109dc:	4444      	add	r4, r8
 80109de:	fbb4 f4f8 	udiv	r4, r4, r8
 80109e2:	3c01      	subs	r4, #1
 80109e4:	fb08 f404 	mul.w	r4, r8, r4
 80109e8:	45a0      	cmp	r8, r4
 80109ea:	dd05      	ble.n	80109f8 <_malloc_trim_r+0x44>
 80109ec:	4630      	mov	r0, r6
 80109ee:	f000 fb37 	bl	8011060 <__malloc_unlock>
 80109f2:	2000      	movs	r0, #0
 80109f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109f8:	2100      	movs	r1, #0
 80109fa:	4630      	mov	r0, r6
 80109fc:	f002 fdcc 	bl	8013598 <_sbrk_r>
 8010a00:	68bb      	ldr	r3, [r7, #8]
 8010a02:	442b      	add	r3, r5
 8010a04:	4298      	cmp	r0, r3
 8010a06:	d1f1      	bne.n	80109ec <_malloc_trim_r+0x38>
 8010a08:	4261      	negs	r1, r4
 8010a0a:	4630      	mov	r0, r6
 8010a0c:	f002 fdc4 	bl	8013598 <_sbrk_r>
 8010a10:	3001      	adds	r0, #1
 8010a12:	d110      	bne.n	8010a36 <_malloc_trim_r+0x82>
 8010a14:	2100      	movs	r1, #0
 8010a16:	4630      	mov	r0, r6
 8010a18:	f002 fdbe 	bl	8013598 <_sbrk_r>
 8010a1c:	68ba      	ldr	r2, [r7, #8]
 8010a1e:	1a83      	subs	r3, r0, r2
 8010a20:	2b0f      	cmp	r3, #15
 8010a22:	dde3      	ble.n	80109ec <_malloc_trim_r+0x38>
 8010a24:	490c      	ldr	r1, [pc, #48]	@ (8010a58 <_malloc_trim_r+0xa4>)
 8010a26:	6809      	ldr	r1, [r1, #0]
 8010a28:	1a40      	subs	r0, r0, r1
 8010a2a:	490c      	ldr	r1, [pc, #48]	@ (8010a5c <_malloc_trim_r+0xa8>)
 8010a2c:	f043 0301 	orr.w	r3, r3, #1
 8010a30:	6008      	str	r0, [r1, #0]
 8010a32:	6053      	str	r3, [r2, #4]
 8010a34:	e7da      	b.n	80109ec <_malloc_trim_r+0x38>
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	4a08      	ldr	r2, [pc, #32]	@ (8010a5c <_malloc_trim_r+0xa8>)
 8010a3a:	1b2d      	subs	r5, r5, r4
 8010a3c:	f045 0501 	orr.w	r5, r5, #1
 8010a40:	605d      	str	r5, [r3, #4]
 8010a42:	6813      	ldr	r3, [r2, #0]
 8010a44:	4630      	mov	r0, r6
 8010a46:	1b1b      	subs	r3, r3, r4
 8010a48:	6013      	str	r3, [r2, #0]
 8010a4a:	f000 fb09 	bl	8011060 <__malloc_unlock>
 8010a4e:	2001      	movs	r0, #1
 8010a50:	e7d0      	b.n	80109f4 <_malloc_trim_r+0x40>
 8010a52:	bf00      	nop
 8010a54:	2000016c 	.word	0x2000016c
 8010a58:	20000164 	.word	0x20000164
 8010a5c:	20008d08 	.word	0x20008d08

08010a60 <_free_r>:
 8010a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a62:	4604      	mov	r4, r0
 8010a64:	460f      	mov	r7, r1
 8010a66:	2900      	cmp	r1, #0
 8010a68:	f000 80b1 	beq.w	8010bce <_free_r+0x16e>
 8010a6c:	f000 faf2 	bl	8011054 <__malloc_lock>
 8010a70:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8010a74:	4d56      	ldr	r5, [pc, #344]	@ (8010bd0 <_free_r+0x170>)
 8010a76:	f022 0001 	bic.w	r0, r2, #1
 8010a7a:	f1a7 0308 	sub.w	r3, r7, #8
 8010a7e:	eb03 0c00 	add.w	ip, r3, r0
 8010a82:	68a9      	ldr	r1, [r5, #8]
 8010a84:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8010a88:	4561      	cmp	r1, ip
 8010a8a:	f026 0603 	bic.w	r6, r6, #3
 8010a8e:	f002 0201 	and.w	r2, r2, #1
 8010a92:	d11b      	bne.n	8010acc <_free_r+0x6c>
 8010a94:	4406      	add	r6, r0
 8010a96:	b93a      	cbnz	r2, 8010aa8 <_free_r+0x48>
 8010a98:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8010a9c:	1a9b      	subs	r3, r3, r2
 8010a9e:	4416      	add	r6, r2
 8010aa0:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8010aa4:	60ca      	str	r2, [r1, #12]
 8010aa6:	6091      	str	r1, [r2, #8]
 8010aa8:	f046 0201 	orr.w	r2, r6, #1
 8010aac:	605a      	str	r2, [r3, #4]
 8010aae:	60ab      	str	r3, [r5, #8]
 8010ab0:	4b48      	ldr	r3, [pc, #288]	@ (8010bd4 <_free_r+0x174>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	42b3      	cmp	r3, r6
 8010ab6:	d804      	bhi.n	8010ac2 <_free_r+0x62>
 8010ab8:	4b47      	ldr	r3, [pc, #284]	@ (8010bd8 <_free_r+0x178>)
 8010aba:	4620      	mov	r0, r4
 8010abc:	6819      	ldr	r1, [r3, #0]
 8010abe:	f7ff ff79 	bl	80109b4 <_malloc_trim_r>
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010ac8:	f000 baca 	b.w	8011060 <__malloc_unlock>
 8010acc:	f8cc 6004 	str.w	r6, [ip, #4]
 8010ad0:	2a00      	cmp	r2, #0
 8010ad2:	d138      	bne.n	8010b46 <_free_r+0xe6>
 8010ad4:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8010ad8:	1a5b      	subs	r3, r3, r1
 8010ada:	4408      	add	r0, r1
 8010adc:	6899      	ldr	r1, [r3, #8]
 8010ade:	f105 0708 	add.w	r7, r5, #8
 8010ae2:	42b9      	cmp	r1, r7
 8010ae4:	d031      	beq.n	8010b4a <_free_r+0xea>
 8010ae6:	68df      	ldr	r7, [r3, #12]
 8010ae8:	60cf      	str	r7, [r1, #12]
 8010aea:	60b9      	str	r1, [r7, #8]
 8010aec:	eb0c 0106 	add.w	r1, ip, r6
 8010af0:	6849      	ldr	r1, [r1, #4]
 8010af2:	07c9      	lsls	r1, r1, #31
 8010af4:	d40b      	bmi.n	8010b0e <_free_r+0xae>
 8010af6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8010afa:	4430      	add	r0, r6
 8010afc:	bb3a      	cbnz	r2, 8010b4e <_free_r+0xee>
 8010afe:	4e37      	ldr	r6, [pc, #220]	@ (8010bdc <_free_r+0x17c>)
 8010b00:	42b1      	cmp	r1, r6
 8010b02:	d124      	bne.n	8010b4e <_free_r+0xee>
 8010b04:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8010b08:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8010b0c:	2201      	movs	r2, #1
 8010b0e:	f040 0101 	orr.w	r1, r0, #1
 8010b12:	6059      	str	r1, [r3, #4]
 8010b14:	5018      	str	r0, [r3, r0]
 8010b16:	2a00      	cmp	r2, #0
 8010b18:	d1d3      	bne.n	8010ac2 <_free_r+0x62>
 8010b1a:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8010b1e:	d21b      	bcs.n	8010b58 <_free_r+0xf8>
 8010b20:	08c2      	lsrs	r2, r0, #3
 8010b22:	2101      	movs	r1, #1
 8010b24:	0940      	lsrs	r0, r0, #5
 8010b26:	4081      	lsls	r1, r0
 8010b28:	6868      	ldr	r0, [r5, #4]
 8010b2a:	3201      	adds	r2, #1
 8010b2c:	4301      	orrs	r1, r0
 8010b2e:	6069      	str	r1, [r5, #4]
 8010b30:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 8010b34:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 8010b38:	3908      	subs	r1, #8
 8010b3a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010b3e:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 8010b42:	60c3      	str	r3, [r0, #12]
 8010b44:	e7bd      	b.n	8010ac2 <_free_r+0x62>
 8010b46:	2200      	movs	r2, #0
 8010b48:	e7d0      	b.n	8010aec <_free_r+0x8c>
 8010b4a:	2201      	movs	r2, #1
 8010b4c:	e7ce      	b.n	8010aec <_free_r+0x8c>
 8010b4e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8010b52:	60ce      	str	r6, [r1, #12]
 8010b54:	60b1      	str	r1, [r6, #8]
 8010b56:	e7da      	b.n	8010b0e <_free_r+0xae>
 8010b58:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 8010b5c:	ea4f 2250 	mov.w	r2, r0, lsr #9
 8010b60:	d214      	bcs.n	8010b8c <_free_r+0x12c>
 8010b62:	0982      	lsrs	r2, r0, #6
 8010b64:	3238      	adds	r2, #56	@ 0x38
 8010b66:	1c51      	adds	r1, r2, #1
 8010b68:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8010b6c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8010b70:	428e      	cmp	r6, r1
 8010b72:	d125      	bne.n	8010bc0 <_free_r+0x160>
 8010b74:	2001      	movs	r0, #1
 8010b76:	1092      	asrs	r2, r2, #2
 8010b78:	fa00 f202 	lsl.w	r2, r0, r2
 8010b7c:	6868      	ldr	r0, [r5, #4]
 8010b7e:	4302      	orrs	r2, r0
 8010b80:	606a      	str	r2, [r5, #4]
 8010b82:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8010b86:	60b3      	str	r3, [r6, #8]
 8010b88:	60cb      	str	r3, [r1, #12]
 8010b8a:	e79a      	b.n	8010ac2 <_free_r+0x62>
 8010b8c:	2a14      	cmp	r2, #20
 8010b8e:	d801      	bhi.n	8010b94 <_free_r+0x134>
 8010b90:	325b      	adds	r2, #91	@ 0x5b
 8010b92:	e7e8      	b.n	8010b66 <_free_r+0x106>
 8010b94:	2a54      	cmp	r2, #84	@ 0x54
 8010b96:	d802      	bhi.n	8010b9e <_free_r+0x13e>
 8010b98:	0b02      	lsrs	r2, r0, #12
 8010b9a:	326e      	adds	r2, #110	@ 0x6e
 8010b9c:	e7e3      	b.n	8010b66 <_free_r+0x106>
 8010b9e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8010ba2:	d802      	bhi.n	8010baa <_free_r+0x14a>
 8010ba4:	0bc2      	lsrs	r2, r0, #15
 8010ba6:	3277      	adds	r2, #119	@ 0x77
 8010ba8:	e7dd      	b.n	8010b66 <_free_r+0x106>
 8010baa:	f240 5154 	movw	r1, #1364	@ 0x554
 8010bae:	428a      	cmp	r2, r1
 8010bb0:	bf9a      	itte	ls
 8010bb2:	0c82      	lsrls	r2, r0, #18
 8010bb4:	327c      	addls	r2, #124	@ 0x7c
 8010bb6:	227e      	movhi	r2, #126	@ 0x7e
 8010bb8:	e7d5      	b.n	8010b66 <_free_r+0x106>
 8010bba:	6889      	ldr	r1, [r1, #8]
 8010bbc:	428e      	cmp	r6, r1
 8010bbe:	d004      	beq.n	8010bca <_free_r+0x16a>
 8010bc0:	684a      	ldr	r2, [r1, #4]
 8010bc2:	f022 0203 	bic.w	r2, r2, #3
 8010bc6:	4282      	cmp	r2, r0
 8010bc8:	d8f7      	bhi.n	8010bba <_free_r+0x15a>
 8010bca:	68ce      	ldr	r6, [r1, #12]
 8010bcc:	e7d9      	b.n	8010b82 <_free_r+0x122>
 8010bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bd0:	2000016c 	.word	0x2000016c
 8010bd4:	20000168 	.word	0x20000168
 8010bd8:	20008d38 	.word	0x20008d38
 8010bdc:	20000174 	.word	0x20000174

08010be0 <_malloc_r>:
 8010be0:	f101 030b 	add.w	r3, r1, #11
 8010be4:	2b16      	cmp	r3, #22
 8010be6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bea:	4605      	mov	r5, r0
 8010bec:	d906      	bls.n	8010bfc <_malloc_r+0x1c>
 8010bee:	f033 0707 	bics.w	r7, r3, #7
 8010bf2:	d504      	bpl.n	8010bfe <_malloc_r+0x1e>
 8010bf4:	230c      	movs	r3, #12
 8010bf6:	602b      	str	r3, [r5, #0]
 8010bf8:	2400      	movs	r4, #0
 8010bfa:	e1a3      	b.n	8010f44 <_malloc_r+0x364>
 8010bfc:	2710      	movs	r7, #16
 8010bfe:	42b9      	cmp	r1, r7
 8010c00:	d8f8      	bhi.n	8010bf4 <_malloc_r+0x14>
 8010c02:	4628      	mov	r0, r5
 8010c04:	f000 fa26 	bl	8011054 <__malloc_lock>
 8010c08:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 8010c0c:	4eaf      	ldr	r6, [pc, #700]	@ (8010ecc <_malloc_r+0x2ec>)
 8010c0e:	d237      	bcs.n	8010c80 <_malloc_r+0xa0>
 8010c10:	f107 0208 	add.w	r2, r7, #8
 8010c14:	4432      	add	r2, r6
 8010c16:	f1a2 0108 	sub.w	r1, r2, #8
 8010c1a:	6854      	ldr	r4, [r2, #4]
 8010c1c:	428c      	cmp	r4, r1
 8010c1e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8010c22:	d102      	bne.n	8010c2a <_malloc_r+0x4a>
 8010c24:	68d4      	ldr	r4, [r2, #12]
 8010c26:	42a2      	cmp	r2, r4
 8010c28:	d010      	beq.n	8010c4c <_malloc_r+0x6c>
 8010c2a:	6863      	ldr	r3, [r4, #4]
 8010c2c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8010c30:	f023 0303 	bic.w	r3, r3, #3
 8010c34:	60ca      	str	r2, [r1, #12]
 8010c36:	4423      	add	r3, r4
 8010c38:	6091      	str	r1, [r2, #8]
 8010c3a:	685a      	ldr	r2, [r3, #4]
 8010c3c:	f042 0201 	orr.w	r2, r2, #1
 8010c40:	605a      	str	r2, [r3, #4]
 8010c42:	4628      	mov	r0, r5
 8010c44:	f000 fa0c 	bl	8011060 <__malloc_unlock>
 8010c48:	3408      	adds	r4, #8
 8010c4a:	e17b      	b.n	8010f44 <_malloc_r+0x364>
 8010c4c:	3302      	adds	r3, #2
 8010c4e:	6934      	ldr	r4, [r6, #16]
 8010c50:	499f      	ldr	r1, [pc, #636]	@ (8010ed0 <_malloc_r+0x2f0>)
 8010c52:	428c      	cmp	r4, r1
 8010c54:	d077      	beq.n	8010d46 <_malloc_r+0x166>
 8010c56:	6862      	ldr	r2, [r4, #4]
 8010c58:	f022 0c03 	bic.w	ip, r2, #3
 8010c5c:	ebac 0007 	sub.w	r0, ip, r7
 8010c60:	280f      	cmp	r0, #15
 8010c62:	dd48      	ble.n	8010cf6 <_malloc_r+0x116>
 8010c64:	19e2      	adds	r2, r4, r7
 8010c66:	f040 0301 	orr.w	r3, r0, #1
 8010c6a:	f047 0701 	orr.w	r7, r7, #1
 8010c6e:	6067      	str	r7, [r4, #4]
 8010c70:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8010c74:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8010c78:	6053      	str	r3, [r2, #4]
 8010c7a:	f844 000c 	str.w	r0, [r4, ip]
 8010c7e:	e7e0      	b.n	8010c42 <_malloc_r+0x62>
 8010c80:	0a7b      	lsrs	r3, r7, #9
 8010c82:	d02a      	beq.n	8010cda <_malloc_r+0xfa>
 8010c84:	2b04      	cmp	r3, #4
 8010c86:	d812      	bhi.n	8010cae <_malloc_r+0xce>
 8010c88:	09bb      	lsrs	r3, r7, #6
 8010c8a:	3338      	adds	r3, #56	@ 0x38
 8010c8c:	1c5a      	adds	r2, r3, #1
 8010c8e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8010c92:	f1a2 0c08 	sub.w	ip, r2, #8
 8010c96:	6854      	ldr	r4, [r2, #4]
 8010c98:	4564      	cmp	r4, ip
 8010c9a:	d006      	beq.n	8010caa <_malloc_r+0xca>
 8010c9c:	6862      	ldr	r2, [r4, #4]
 8010c9e:	f022 0203 	bic.w	r2, r2, #3
 8010ca2:	1bd0      	subs	r0, r2, r7
 8010ca4:	280f      	cmp	r0, #15
 8010ca6:	dd1c      	ble.n	8010ce2 <_malloc_r+0x102>
 8010ca8:	3b01      	subs	r3, #1
 8010caa:	3301      	adds	r3, #1
 8010cac:	e7cf      	b.n	8010c4e <_malloc_r+0x6e>
 8010cae:	2b14      	cmp	r3, #20
 8010cb0:	d801      	bhi.n	8010cb6 <_malloc_r+0xd6>
 8010cb2:	335b      	adds	r3, #91	@ 0x5b
 8010cb4:	e7ea      	b.n	8010c8c <_malloc_r+0xac>
 8010cb6:	2b54      	cmp	r3, #84	@ 0x54
 8010cb8:	d802      	bhi.n	8010cc0 <_malloc_r+0xe0>
 8010cba:	0b3b      	lsrs	r3, r7, #12
 8010cbc:	336e      	adds	r3, #110	@ 0x6e
 8010cbe:	e7e5      	b.n	8010c8c <_malloc_r+0xac>
 8010cc0:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8010cc4:	d802      	bhi.n	8010ccc <_malloc_r+0xec>
 8010cc6:	0bfb      	lsrs	r3, r7, #15
 8010cc8:	3377      	adds	r3, #119	@ 0x77
 8010cca:	e7df      	b.n	8010c8c <_malloc_r+0xac>
 8010ccc:	f240 5254 	movw	r2, #1364	@ 0x554
 8010cd0:	4293      	cmp	r3, r2
 8010cd2:	d804      	bhi.n	8010cde <_malloc_r+0xfe>
 8010cd4:	0cbb      	lsrs	r3, r7, #18
 8010cd6:	337c      	adds	r3, #124	@ 0x7c
 8010cd8:	e7d8      	b.n	8010c8c <_malloc_r+0xac>
 8010cda:	233f      	movs	r3, #63	@ 0x3f
 8010cdc:	e7d6      	b.n	8010c8c <_malloc_r+0xac>
 8010cde:	237e      	movs	r3, #126	@ 0x7e
 8010ce0:	e7d4      	b.n	8010c8c <_malloc_r+0xac>
 8010ce2:	2800      	cmp	r0, #0
 8010ce4:	68e1      	ldr	r1, [r4, #12]
 8010ce6:	db04      	blt.n	8010cf2 <_malloc_r+0x112>
 8010ce8:	68a3      	ldr	r3, [r4, #8]
 8010cea:	60d9      	str	r1, [r3, #12]
 8010cec:	608b      	str	r3, [r1, #8]
 8010cee:	18a3      	adds	r3, r4, r2
 8010cf0:	e7a3      	b.n	8010c3a <_malloc_r+0x5a>
 8010cf2:	460c      	mov	r4, r1
 8010cf4:	e7d0      	b.n	8010c98 <_malloc_r+0xb8>
 8010cf6:	2800      	cmp	r0, #0
 8010cf8:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8010cfc:	db07      	blt.n	8010d0e <_malloc_r+0x12e>
 8010cfe:	44a4      	add	ip, r4
 8010d00:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8010d04:	f043 0301 	orr.w	r3, r3, #1
 8010d08:	f8cc 3004 	str.w	r3, [ip, #4]
 8010d0c:	e799      	b.n	8010c42 <_malloc_r+0x62>
 8010d0e:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 8010d12:	6870      	ldr	r0, [r6, #4]
 8010d14:	f080 8095 	bcs.w	8010e42 <_malloc_r+0x262>
 8010d18:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8010d1c:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8010d20:	f04f 0c01 	mov.w	ip, #1
 8010d24:	3201      	adds	r2, #1
 8010d26:	fa0c fc0e 	lsl.w	ip, ip, lr
 8010d2a:	ea4c 0000 	orr.w	r0, ip, r0
 8010d2e:	6070      	str	r0, [r6, #4]
 8010d30:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8010d34:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8010d38:	3808      	subs	r0, #8
 8010d3a:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8010d3e:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8010d42:	f8cc 400c 	str.w	r4, [ip, #12]
 8010d46:	1098      	asrs	r0, r3, #2
 8010d48:	2201      	movs	r2, #1
 8010d4a:	4082      	lsls	r2, r0
 8010d4c:	6870      	ldr	r0, [r6, #4]
 8010d4e:	4290      	cmp	r0, r2
 8010d50:	d326      	bcc.n	8010da0 <_malloc_r+0x1c0>
 8010d52:	4210      	tst	r0, r2
 8010d54:	d106      	bne.n	8010d64 <_malloc_r+0x184>
 8010d56:	f023 0303 	bic.w	r3, r3, #3
 8010d5a:	0052      	lsls	r2, r2, #1
 8010d5c:	4210      	tst	r0, r2
 8010d5e:	f103 0304 	add.w	r3, r3, #4
 8010d62:	d0fa      	beq.n	8010d5a <_malloc_r+0x17a>
 8010d64:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8010d68:	46c1      	mov	r9, r8
 8010d6a:	469e      	mov	lr, r3
 8010d6c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8010d70:	454c      	cmp	r4, r9
 8010d72:	f040 80b9 	bne.w	8010ee8 <_malloc_r+0x308>
 8010d76:	f10e 0e01 	add.w	lr, lr, #1
 8010d7a:	f01e 0f03 	tst.w	lr, #3
 8010d7e:	f109 0908 	add.w	r9, r9, #8
 8010d82:	d1f3      	bne.n	8010d6c <_malloc_r+0x18c>
 8010d84:	0798      	lsls	r0, r3, #30
 8010d86:	f040 80e3 	bne.w	8010f50 <_malloc_r+0x370>
 8010d8a:	6873      	ldr	r3, [r6, #4]
 8010d8c:	ea23 0302 	bic.w	r3, r3, r2
 8010d90:	6073      	str	r3, [r6, #4]
 8010d92:	6870      	ldr	r0, [r6, #4]
 8010d94:	0052      	lsls	r2, r2, #1
 8010d96:	4290      	cmp	r0, r2
 8010d98:	d302      	bcc.n	8010da0 <_malloc_r+0x1c0>
 8010d9a:	2a00      	cmp	r2, #0
 8010d9c:	f040 80e5 	bne.w	8010f6a <_malloc_r+0x38a>
 8010da0:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8010da4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010da8:	f023 0903 	bic.w	r9, r3, #3
 8010dac:	45b9      	cmp	r9, r7
 8010dae:	d304      	bcc.n	8010dba <_malloc_r+0x1da>
 8010db0:	eba9 0207 	sub.w	r2, r9, r7
 8010db4:	2a0f      	cmp	r2, #15
 8010db6:	f300 8141 	bgt.w	801103c <_malloc_r+0x45c>
 8010dba:	4b46      	ldr	r3, [pc, #280]	@ (8010ed4 <_malloc_r+0x2f4>)
 8010dbc:	6819      	ldr	r1, [r3, #0]
 8010dbe:	3110      	adds	r1, #16
 8010dc0:	4439      	add	r1, r7
 8010dc2:	2008      	movs	r0, #8
 8010dc4:	9101      	str	r1, [sp, #4]
 8010dc6:	f002 fc0b 	bl	80135e0 <sysconf>
 8010dca:	4a43      	ldr	r2, [pc, #268]	@ (8010ed8 <_malloc_r+0x2f8>)
 8010dcc:	9901      	ldr	r1, [sp, #4]
 8010dce:	6813      	ldr	r3, [r2, #0]
 8010dd0:	3301      	adds	r3, #1
 8010dd2:	bf1f      	itttt	ne
 8010dd4:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 8010dd8:	1809      	addne	r1, r1, r0
 8010dda:	4243      	negne	r3, r0
 8010ddc:	4019      	andne	r1, r3
 8010dde:	4680      	mov	r8, r0
 8010de0:	4628      	mov	r0, r5
 8010de2:	9101      	str	r1, [sp, #4]
 8010de4:	f002 fbd8 	bl	8013598 <_sbrk_r>
 8010de8:	1c42      	adds	r2, r0, #1
 8010dea:	eb0a 0b09 	add.w	fp, sl, r9
 8010dee:	4604      	mov	r4, r0
 8010df0:	f000 80f7 	beq.w	8010fe2 <_malloc_r+0x402>
 8010df4:	4583      	cmp	fp, r0
 8010df6:	9901      	ldr	r1, [sp, #4]
 8010df8:	4a37      	ldr	r2, [pc, #220]	@ (8010ed8 <_malloc_r+0x2f8>)
 8010dfa:	d902      	bls.n	8010e02 <_malloc_r+0x222>
 8010dfc:	45b2      	cmp	sl, r6
 8010dfe:	f040 80f0 	bne.w	8010fe2 <_malloc_r+0x402>
 8010e02:	4b36      	ldr	r3, [pc, #216]	@ (8010edc <_malloc_r+0x2fc>)
 8010e04:	6818      	ldr	r0, [r3, #0]
 8010e06:	45a3      	cmp	fp, r4
 8010e08:	eb00 0e01 	add.w	lr, r0, r1
 8010e0c:	f8c3 e000 	str.w	lr, [r3]
 8010e10:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8010e14:	f040 80ab 	bne.w	8010f6e <_malloc_r+0x38e>
 8010e18:	ea1b 0f0c 	tst.w	fp, ip
 8010e1c:	f040 80a7 	bne.w	8010f6e <_malloc_r+0x38e>
 8010e20:	68b2      	ldr	r2, [r6, #8]
 8010e22:	4449      	add	r1, r9
 8010e24:	f041 0101 	orr.w	r1, r1, #1
 8010e28:	6051      	str	r1, [r2, #4]
 8010e2a:	4a2d      	ldr	r2, [pc, #180]	@ (8010ee0 <_malloc_r+0x300>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	6811      	ldr	r1, [r2, #0]
 8010e30:	428b      	cmp	r3, r1
 8010e32:	bf88      	it	hi
 8010e34:	6013      	strhi	r3, [r2, #0]
 8010e36:	4a2b      	ldr	r2, [pc, #172]	@ (8010ee4 <_malloc_r+0x304>)
 8010e38:	6811      	ldr	r1, [r2, #0]
 8010e3a:	428b      	cmp	r3, r1
 8010e3c:	bf88      	it	hi
 8010e3e:	6013      	strhi	r3, [r2, #0]
 8010e40:	e0cf      	b.n	8010fe2 <_malloc_r+0x402>
 8010e42:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 8010e46:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8010e4a:	d218      	bcs.n	8010e7e <_malloc_r+0x29e>
 8010e4c:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8010e50:	3238      	adds	r2, #56	@ 0x38
 8010e52:	f102 0e01 	add.w	lr, r2, #1
 8010e56:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8010e5a:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8010e5e:	45f0      	cmp	r8, lr
 8010e60:	d12b      	bne.n	8010eba <_malloc_r+0x2da>
 8010e62:	1092      	asrs	r2, r2, #2
 8010e64:	f04f 0c01 	mov.w	ip, #1
 8010e68:	fa0c f202 	lsl.w	r2, ip, r2
 8010e6c:	4302      	orrs	r2, r0
 8010e6e:	6072      	str	r2, [r6, #4]
 8010e70:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8010e74:	f8c8 4008 	str.w	r4, [r8, #8]
 8010e78:	f8ce 400c 	str.w	r4, [lr, #12]
 8010e7c:	e763      	b.n	8010d46 <_malloc_r+0x166>
 8010e7e:	2a14      	cmp	r2, #20
 8010e80:	d801      	bhi.n	8010e86 <_malloc_r+0x2a6>
 8010e82:	325b      	adds	r2, #91	@ 0x5b
 8010e84:	e7e5      	b.n	8010e52 <_malloc_r+0x272>
 8010e86:	2a54      	cmp	r2, #84	@ 0x54
 8010e88:	d803      	bhi.n	8010e92 <_malloc_r+0x2b2>
 8010e8a:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8010e8e:	326e      	adds	r2, #110	@ 0x6e
 8010e90:	e7df      	b.n	8010e52 <_malloc_r+0x272>
 8010e92:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8010e96:	d803      	bhi.n	8010ea0 <_malloc_r+0x2c0>
 8010e98:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8010e9c:	3277      	adds	r2, #119	@ 0x77
 8010e9e:	e7d8      	b.n	8010e52 <_malloc_r+0x272>
 8010ea0:	f240 5e54 	movw	lr, #1364	@ 0x554
 8010ea4:	4572      	cmp	r2, lr
 8010ea6:	bf9a      	itte	ls
 8010ea8:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8010eac:	327c      	addls	r2, #124	@ 0x7c
 8010eae:	227e      	movhi	r2, #126	@ 0x7e
 8010eb0:	e7cf      	b.n	8010e52 <_malloc_r+0x272>
 8010eb2:	f8de e008 	ldr.w	lr, [lr, #8]
 8010eb6:	45f0      	cmp	r8, lr
 8010eb8:	d005      	beq.n	8010ec6 <_malloc_r+0x2e6>
 8010eba:	f8de 2004 	ldr.w	r2, [lr, #4]
 8010ebe:	f022 0203 	bic.w	r2, r2, #3
 8010ec2:	4562      	cmp	r2, ip
 8010ec4:	d8f5      	bhi.n	8010eb2 <_malloc_r+0x2d2>
 8010ec6:	f8de 800c 	ldr.w	r8, [lr, #12]
 8010eca:	e7d1      	b.n	8010e70 <_malloc_r+0x290>
 8010ecc:	2000016c 	.word	0x2000016c
 8010ed0:	20000174 	.word	0x20000174
 8010ed4:	20008d38 	.word	0x20008d38
 8010ed8:	20000164 	.word	0x20000164
 8010edc:	20008d08 	.word	0x20008d08
 8010ee0:	20008d34 	.word	0x20008d34
 8010ee4:	20008d30 	.word	0x20008d30
 8010ee8:	6860      	ldr	r0, [r4, #4]
 8010eea:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8010eee:	f020 0003 	bic.w	r0, r0, #3
 8010ef2:	eba0 0a07 	sub.w	sl, r0, r7
 8010ef6:	f1ba 0f0f 	cmp.w	sl, #15
 8010efa:	dd12      	ble.n	8010f22 <_malloc_r+0x342>
 8010efc:	68a3      	ldr	r3, [r4, #8]
 8010efe:	19e2      	adds	r2, r4, r7
 8010f00:	f047 0701 	orr.w	r7, r7, #1
 8010f04:	6067      	str	r7, [r4, #4]
 8010f06:	f8c3 c00c 	str.w	ip, [r3, #12]
 8010f0a:	f8cc 3008 	str.w	r3, [ip, #8]
 8010f0e:	f04a 0301 	orr.w	r3, sl, #1
 8010f12:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8010f16:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8010f1a:	6053      	str	r3, [r2, #4]
 8010f1c:	f844 a000 	str.w	sl, [r4, r0]
 8010f20:	e68f      	b.n	8010c42 <_malloc_r+0x62>
 8010f22:	f1ba 0f00 	cmp.w	sl, #0
 8010f26:	db11      	blt.n	8010f4c <_malloc_r+0x36c>
 8010f28:	4420      	add	r0, r4
 8010f2a:	6843      	ldr	r3, [r0, #4]
 8010f2c:	f043 0301 	orr.w	r3, r3, #1
 8010f30:	6043      	str	r3, [r0, #4]
 8010f32:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8010f36:	4628      	mov	r0, r5
 8010f38:	f8c3 c00c 	str.w	ip, [r3, #12]
 8010f3c:	f8cc 3008 	str.w	r3, [ip, #8]
 8010f40:	f000 f88e 	bl	8011060 <__malloc_unlock>
 8010f44:	4620      	mov	r0, r4
 8010f46:	b003      	add	sp, #12
 8010f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f4c:	4664      	mov	r4, ip
 8010f4e:	e70f      	b.n	8010d70 <_malloc_r+0x190>
 8010f50:	f858 0908 	ldr.w	r0, [r8], #-8
 8010f54:	4540      	cmp	r0, r8
 8010f56:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8010f5a:	f43f af13 	beq.w	8010d84 <_malloc_r+0x1a4>
 8010f5e:	e718      	b.n	8010d92 <_malloc_r+0x1b2>
 8010f60:	3304      	adds	r3, #4
 8010f62:	0052      	lsls	r2, r2, #1
 8010f64:	4210      	tst	r0, r2
 8010f66:	d0fb      	beq.n	8010f60 <_malloc_r+0x380>
 8010f68:	e6fc      	b.n	8010d64 <_malloc_r+0x184>
 8010f6a:	4673      	mov	r3, lr
 8010f6c:	e7fa      	b.n	8010f64 <_malloc_r+0x384>
 8010f6e:	6810      	ldr	r0, [r2, #0]
 8010f70:	3001      	adds	r0, #1
 8010f72:	bf1b      	ittet	ne
 8010f74:	eba4 0b0b 	subne.w	fp, r4, fp
 8010f78:	eb0b 020e 	addne.w	r2, fp, lr
 8010f7c:	6014      	streq	r4, [r2, #0]
 8010f7e:	601a      	strne	r2, [r3, #0]
 8010f80:	f014 0b07 	ands.w	fp, r4, #7
 8010f84:	bf1a      	itte	ne
 8010f86:	f1cb 0008 	rsbne	r0, fp, #8
 8010f8a:	1824      	addne	r4, r4, r0
 8010f8c:	4658      	moveq	r0, fp
 8010f8e:	1862      	adds	r2, r4, r1
 8010f90:	ea02 010c 	and.w	r1, r2, ip
 8010f94:	4480      	add	r8, r0
 8010f96:	eba8 0801 	sub.w	r8, r8, r1
 8010f9a:	ea08 080c 	and.w	r8, r8, ip
 8010f9e:	4641      	mov	r1, r8
 8010fa0:	4628      	mov	r0, r5
 8010fa2:	9201      	str	r2, [sp, #4]
 8010fa4:	f002 faf8 	bl	8013598 <_sbrk_r>
 8010fa8:	1c43      	adds	r3, r0, #1
 8010faa:	9a01      	ldr	r2, [sp, #4]
 8010fac:	4b28      	ldr	r3, [pc, #160]	@ (8011050 <_malloc_r+0x470>)
 8010fae:	d107      	bne.n	8010fc0 <_malloc_r+0x3e0>
 8010fb0:	f1bb 0f00 	cmp.w	fp, #0
 8010fb4:	d023      	beq.n	8010ffe <_malloc_r+0x41e>
 8010fb6:	f1ab 0008 	sub.w	r0, fp, #8
 8010fba:	4410      	add	r0, r2
 8010fbc:	f04f 0800 	mov.w	r8, #0
 8010fc0:	681a      	ldr	r2, [r3, #0]
 8010fc2:	60b4      	str	r4, [r6, #8]
 8010fc4:	1b00      	subs	r0, r0, r4
 8010fc6:	4440      	add	r0, r8
 8010fc8:	4442      	add	r2, r8
 8010fca:	f040 0001 	orr.w	r0, r0, #1
 8010fce:	45b2      	cmp	sl, r6
 8010fd0:	601a      	str	r2, [r3, #0]
 8010fd2:	6060      	str	r0, [r4, #4]
 8010fd4:	f43f af29 	beq.w	8010e2a <_malloc_r+0x24a>
 8010fd8:	f1b9 0f0f 	cmp.w	r9, #15
 8010fdc:	d812      	bhi.n	8011004 <_malloc_r+0x424>
 8010fde:	2301      	movs	r3, #1
 8010fe0:	6063      	str	r3, [r4, #4]
 8010fe2:	68b3      	ldr	r3, [r6, #8]
 8010fe4:	685b      	ldr	r3, [r3, #4]
 8010fe6:	f023 0303 	bic.w	r3, r3, #3
 8010fea:	42bb      	cmp	r3, r7
 8010fec:	eba3 0207 	sub.w	r2, r3, r7
 8010ff0:	d301      	bcc.n	8010ff6 <_malloc_r+0x416>
 8010ff2:	2a0f      	cmp	r2, #15
 8010ff4:	dc22      	bgt.n	801103c <_malloc_r+0x45c>
 8010ff6:	4628      	mov	r0, r5
 8010ff8:	f000 f832 	bl	8011060 <__malloc_unlock>
 8010ffc:	e5fc      	b.n	8010bf8 <_malloc_r+0x18>
 8010ffe:	4610      	mov	r0, r2
 8011000:	46d8      	mov	r8, fp
 8011002:	e7dd      	b.n	8010fc0 <_malloc_r+0x3e0>
 8011004:	f8da 2004 	ldr.w	r2, [sl, #4]
 8011008:	f1a9 090c 	sub.w	r9, r9, #12
 801100c:	f029 0907 	bic.w	r9, r9, #7
 8011010:	f002 0201 	and.w	r2, r2, #1
 8011014:	ea42 0209 	orr.w	r2, r2, r9
 8011018:	f8ca 2004 	str.w	r2, [sl, #4]
 801101c:	2105      	movs	r1, #5
 801101e:	eb0a 0209 	add.w	r2, sl, r9
 8011022:	f1b9 0f0f 	cmp.w	r9, #15
 8011026:	e9c2 1101 	strd	r1, r1, [r2, #4]
 801102a:	f67f aefe 	bls.w	8010e2a <_malloc_r+0x24a>
 801102e:	f10a 0108 	add.w	r1, sl, #8
 8011032:	4628      	mov	r0, r5
 8011034:	f7ff fd14 	bl	8010a60 <_free_r>
 8011038:	4b05      	ldr	r3, [pc, #20]	@ (8011050 <_malloc_r+0x470>)
 801103a:	e6f6      	b.n	8010e2a <_malloc_r+0x24a>
 801103c:	68b4      	ldr	r4, [r6, #8]
 801103e:	f047 0301 	orr.w	r3, r7, #1
 8011042:	4427      	add	r7, r4
 8011044:	f042 0201 	orr.w	r2, r2, #1
 8011048:	6063      	str	r3, [r4, #4]
 801104a:	60b7      	str	r7, [r6, #8]
 801104c:	607a      	str	r2, [r7, #4]
 801104e:	e5f8      	b.n	8010c42 <_malloc_r+0x62>
 8011050:	20008d08 	.word	0x20008d08

08011054 <__malloc_lock>:
 8011054:	4801      	ldr	r0, [pc, #4]	@ (801105c <__malloc_lock+0x8>)
 8011056:	f7ff bc8d 	b.w	8010974 <__retarget_lock_acquire_recursive>
 801105a:	bf00      	nop
 801105c:	20008d00 	.word	0x20008d00

08011060 <__malloc_unlock>:
 8011060:	4801      	ldr	r0, [pc, #4]	@ (8011068 <__malloc_unlock+0x8>)
 8011062:	f7ff bc88 	b.w	8010976 <__retarget_lock_release_recursive>
 8011066:	bf00      	nop
 8011068:	20008d00 	.word	0x20008d00
 801106c:	00000000 	.word	0x00000000

08011070 <_vfprintf_r>:
 8011070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011074:	b0d3      	sub	sp, #332	@ 0x14c
 8011076:	468b      	mov	fp, r1
 8011078:	4690      	mov	r8, r2
 801107a:	461c      	mov	r4, r3
 801107c:	461e      	mov	r6, r3
 801107e:	9003      	str	r0, [sp, #12]
 8011080:	f002 fa86 	bl	8013590 <_localeconv_r>
 8011084:	6803      	ldr	r3, [r0, #0]
 8011086:	9316      	str	r3, [sp, #88]	@ 0x58
 8011088:	4618      	mov	r0, r3
 801108a:	f7ef f8c1 	bl	8000210 <strlen>
 801108e:	9b03      	ldr	r3, [sp, #12]
 8011090:	900d      	str	r0, [sp, #52]	@ 0x34
 8011092:	b123      	cbz	r3, 801109e <_vfprintf_r+0x2e>
 8011094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011096:	b913      	cbnz	r3, 801109e <_vfprintf_r+0x2e>
 8011098:	9803      	ldr	r0, [sp, #12]
 801109a:	f7ff fb3b 	bl	8010714 <__sinit>
 801109e:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80110a2:	07da      	lsls	r2, r3, #31
 80110a4:	d407      	bmi.n	80110b6 <_vfprintf_r+0x46>
 80110a6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80110aa:	059b      	lsls	r3, r3, #22
 80110ac:	d403      	bmi.n	80110b6 <_vfprintf_r+0x46>
 80110ae:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 80110b2:	f7ff fc5f 	bl	8010974 <__retarget_lock_acquire_recursive>
 80110b6:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 80110ba:	049f      	lsls	r7, r3, #18
 80110bc:	d409      	bmi.n	80110d2 <_vfprintf_r+0x62>
 80110be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80110c2:	f8ab 300c 	strh.w	r3, [fp, #12]
 80110c6:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80110ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80110ce:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 80110d2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80110d6:	071d      	lsls	r5, r3, #28
 80110d8:	d502      	bpl.n	80110e0 <_vfprintf_r+0x70>
 80110da:	f8db 3010 	ldr.w	r3, [fp, #16]
 80110de:	b9c3      	cbnz	r3, 8011112 <_vfprintf_r+0xa2>
 80110e0:	9803      	ldr	r0, [sp, #12]
 80110e2:	4659      	mov	r1, fp
 80110e4:	f002 f97a 	bl	80133dc <__swsetup_r>
 80110e8:	b198      	cbz	r0, 8011112 <_vfprintf_r+0xa2>
 80110ea:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80110ee:	07d8      	lsls	r0, r3, #31
 80110f0:	d506      	bpl.n	8011100 <_vfprintf_r+0x90>
 80110f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80110f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80110f8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80110fa:	b053      	add	sp, #332	@ 0x14c
 80110fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011100:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8011104:	0599      	lsls	r1, r3, #22
 8011106:	d4f4      	bmi.n	80110f2 <_vfprintf_r+0x82>
 8011108:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 801110c:	f7ff fc33 	bl	8010976 <__retarget_lock_release_recursive>
 8011110:	e7ef      	b.n	80110f2 <_vfprintf_r+0x82>
 8011112:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8011116:	f003 021a 	and.w	r2, r3, #26
 801111a:	2a0a      	cmp	r2, #10
 801111c:	d116      	bne.n	801114c <_vfprintf_r+0xdc>
 801111e:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 8011122:	2a00      	cmp	r2, #0
 8011124:	db12      	blt.n	801114c <_vfprintf_r+0xdc>
 8011126:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 801112a:	07d2      	lsls	r2, r2, #31
 801112c:	d405      	bmi.n	801113a <_vfprintf_r+0xca>
 801112e:	059b      	lsls	r3, r3, #22
 8011130:	d403      	bmi.n	801113a <_vfprintf_r+0xca>
 8011132:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8011136:	f7ff fc1e 	bl	8010976 <__retarget_lock_release_recursive>
 801113a:	9803      	ldr	r0, [sp, #12]
 801113c:	4623      	mov	r3, r4
 801113e:	4642      	mov	r2, r8
 8011140:	4659      	mov	r1, fp
 8011142:	b053      	add	sp, #332	@ 0x14c
 8011144:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011148:	f001 b9be 	b.w	80124c8 <__sbprintf>
 801114c:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 8011398 <_vfprintf_r+0x328>
 8011150:	2300      	movs	r3, #0
 8011152:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 8011156:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801115a:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 801115e:	ac29      	add	r4, sp, #164	@ 0xa4
 8011160:	9426      	str	r4, [sp, #152]	@ 0x98
 8011162:	9304      	str	r3, [sp, #16]
 8011164:	9309      	str	r3, [sp, #36]	@ 0x24
 8011166:	9312      	str	r3, [sp, #72]	@ 0x48
 8011168:	9317      	str	r3, [sp, #92]	@ 0x5c
 801116a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801116c:	4643      	mov	r3, r8
 801116e:	461d      	mov	r5, r3
 8011170:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011174:	b10a      	cbz	r2, 801117a <_vfprintf_r+0x10a>
 8011176:	2a25      	cmp	r2, #37	@ 0x25
 8011178:	d1f9      	bne.n	801116e <_vfprintf_r+0xfe>
 801117a:	ebb5 0708 	subs.w	r7, r5, r8
 801117e:	d00d      	beq.n	801119c <_vfprintf_r+0x12c>
 8011180:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8011182:	443b      	add	r3, r7
 8011184:	9328      	str	r3, [sp, #160]	@ 0xa0
 8011186:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8011188:	3301      	adds	r3, #1
 801118a:	2b07      	cmp	r3, #7
 801118c:	e9c4 8700 	strd	r8, r7, [r4]
 8011190:	9327      	str	r3, [sp, #156]	@ 0x9c
 8011192:	dc75      	bgt.n	8011280 <_vfprintf_r+0x210>
 8011194:	3408      	adds	r4, #8
 8011196:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011198:	443b      	add	r3, r7
 801119a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801119c:	782b      	ldrb	r3, [r5, #0]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	f001 814f 	beq.w	8012442 <_vfprintf_r+0x13d2>
 80111a4:	2200      	movs	r2, #0
 80111a6:	1c6b      	adds	r3, r5, #1
 80111a8:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 80111ac:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 80111b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80111b2:	4615      	mov	r5, r2
 80111b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111b8:	9206      	str	r2, [sp, #24]
 80111ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80111bc:	9b06      	ldr	r3, [sp, #24]
 80111be:	3b20      	subs	r3, #32
 80111c0:	2b5a      	cmp	r3, #90	@ 0x5a
 80111c2:	f200 85aa 	bhi.w	8011d1a <_vfprintf_r+0xcaa>
 80111c6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80111ca:	009d      	.short	0x009d
 80111cc:	05a805a8 	.word	0x05a805a8
 80111d0:	05a800a5 	.word	0x05a800a5
 80111d4:	05a805a8 	.word	0x05a805a8
 80111d8:	05a80085 	.word	0x05a80085
 80111dc:	00a805a8 	.word	0x00a805a8
 80111e0:	05a800b2 	.word	0x05a800b2
 80111e4:	00b400af 	.word	0x00b400af
 80111e8:	00ce05a8 	.word	0x00ce05a8
 80111ec:	00d100d1 	.word	0x00d100d1
 80111f0:	00d100d1 	.word	0x00d100d1
 80111f4:	00d100d1 	.word	0x00d100d1
 80111f8:	00d100d1 	.word	0x00d100d1
 80111fc:	05a800d1 	.word	0x05a800d1
 8011200:	05a805a8 	.word	0x05a805a8
 8011204:	05a805a8 	.word	0x05a805a8
 8011208:	05a805a8 	.word	0x05a805a8
 801120c:	05a80146 	.word	0x05a80146
 8011210:	011a0107 	.word	0x011a0107
 8011214:	01460146 	.word	0x01460146
 8011218:	05a80146 	.word	0x05a80146
 801121c:	05a805a8 	.word	0x05a805a8
 8011220:	00e205a8 	.word	0x00e205a8
 8011224:	05a805a8 	.word	0x05a805a8
 8011228:	05a804a3 	.word	0x05a804a3
 801122c:	05a805a8 	.word	0x05a805a8
 8011230:	05a804ed 	.word	0x05a804ed
 8011234:	05a8050e 	.word	0x05a8050e
 8011238:	053005a8 	.word	0x053005a8
 801123c:	05a805a8 	.word	0x05a805a8
 8011240:	05a805a8 	.word	0x05a805a8
 8011244:	05a805a8 	.word	0x05a805a8
 8011248:	05a805a8 	.word	0x05a805a8
 801124c:	05a80146 	.word	0x05a80146
 8011250:	011c0107 	.word	0x011c0107
 8011254:	01460146 	.word	0x01460146
 8011258:	00ed0146 	.word	0x00ed0146
 801125c:	0101011c 	.word	0x0101011c
 8011260:	00fa05a8 	.word	0x00fa05a8
 8011264:	048705a8 	.word	0x048705a8
 8011268:	04dc04a5 	.word	0x04dc04a5
 801126c:	05a80101 	.word	0x05a80101
 8011270:	009b04ed 	.word	0x009b04ed
 8011274:	05a80510 	.word	0x05a80510
 8011278:	006505a8 	.word	0x006505a8
 801127c:	009b05a8 	.word	0x009b05a8
 8011280:	9803      	ldr	r0, [sp, #12]
 8011282:	aa26      	add	r2, sp, #152	@ 0x98
 8011284:	4659      	mov	r1, fp
 8011286:	f001 f95f 	bl	8012548 <__sprint_r>
 801128a:	2800      	cmp	r0, #0
 801128c:	f040 814d 	bne.w	801152a <_vfprintf_r+0x4ba>
 8011290:	ac29      	add	r4, sp, #164	@ 0xa4
 8011292:	e780      	b.n	8011196 <_vfprintf_r+0x126>
 8011294:	4b42      	ldr	r3, [pc, #264]	@ (80113a0 <_vfprintf_r+0x330>)
 8011296:	9319      	str	r3, [sp, #100]	@ 0x64
 8011298:	f015 0320 	ands.w	r3, r5, #32
 801129c:	f000 84c8 	beq.w	8011c30 <_vfprintf_r+0xbc0>
 80112a0:	3607      	adds	r6, #7
 80112a2:	f026 0307 	bic.w	r3, r6, #7
 80112a6:	461a      	mov	r2, r3
 80112a8:	685f      	ldr	r7, [r3, #4]
 80112aa:	f852 6b08 	ldr.w	r6, [r2], #8
 80112ae:	9207      	str	r2, [sp, #28]
 80112b0:	07eb      	lsls	r3, r5, #31
 80112b2:	d50a      	bpl.n	80112ca <_vfprintf_r+0x25a>
 80112b4:	ea56 0307 	orrs.w	r3, r6, r7
 80112b8:	d007      	beq.n	80112ca <_vfprintf_r+0x25a>
 80112ba:	2330      	movs	r3, #48	@ 0x30
 80112bc:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 80112c0:	9b06      	ldr	r3, [sp, #24]
 80112c2:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 80112c6:	f045 0502 	orr.w	r5, r5, #2
 80112ca:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80112ce:	2302      	movs	r3, #2
 80112d0:	f000 bc2e 	b.w	8011b30 <_vfprintf_r+0xac0>
 80112d4:	9803      	ldr	r0, [sp, #12]
 80112d6:	f002 f95b 	bl	8013590 <_localeconv_r>
 80112da:	6843      	ldr	r3, [r0, #4]
 80112dc:	9317      	str	r3, [sp, #92]	@ 0x5c
 80112de:	4618      	mov	r0, r3
 80112e0:	f7ee ff96 	bl	8000210 <strlen>
 80112e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80112e6:	9803      	ldr	r0, [sp, #12]
 80112e8:	f002 f952 	bl	8013590 <_localeconv_r>
 80112ec:	6883      	ldr	r3, [r0, #8]
 80112ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80112f0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80112f2:	b12b      	cbz	r3, 8011300 <_vfprintf_r+0x290>
 80112f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112f6:	b11b      	cbz	r3, 8011300 <_vfprintf_r+0x290>
 80112f8:	781b      	ldrb	r3, [r3, #0]
 80112fa:	b10b      	cbz	r3, 8011300 <_vfprintf_r+0x290>
 80112fc:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8011300:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011302:	e757      	b.n	80111b4 <_vfprintf_r+0x144>
 8011304:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8011308:	2b00      	cmp	r3, #0
 801130a:	d1f9      	bne.n	8011300 <_vfprintf_r+0x290>
 801130c:	2320      	movs	r3, #32
 801130e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8011312:	e7f5      	b.n	8011300 <_vfprintf_r+0x290>
 8011314:	f045 0501 	orr.w	r5, r5, #1
 8011318:	e7f2      	b.n	8011300 <_vfprintf_r+0x290>
 801131a:	f856 3b04 	ldr.w	r3, [r6], #4
 801131e:	930e      	str	r3, [sp, #56]	@ 0x38
 8011320:	2b00      	cmp	r3, #0
 8011322:	daed      	bge.n	8011300 <_vfprintf_r+0x290>
 8011324:	425b      	negs	r3, r3
 8011326:	930e      	str	r3, [sp, #56]	@ 0x38
 8011328:	f045 0504 	orr.w	r5, r5, #4
 801132c:	e7e8      	b.n	8011300 <_vfprintf_r+0x290>
 801132e:	232b      	movs	r3, #43	@ 0x2b
 8011330:	e7ed      	b.n	801130e <_vfprintf_r+0x29e>
 8011332:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011334:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011338:	9206      	str	r2, [sp, #24]
 801133a:	2a2a      	cmp	r2, #42	@ 0x2a
 801133c:	d10f      	bne.n	801135e <_vfprintf_r+0x2ee>
 801133e:	f856 2b04 	ldr.w	r2, [r6], #4
 8011342:	930c      	str	r3, [sp, #48]	@ 0x30
 8011344:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 8011348:	e7da      	b.n	8011300 <_vfprintf_r+0x290>
 801134a:	fb01 2909 	mla	r9, r1, r9, r2
 801134e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011352:	9206      	str	r2, [sp, #24]
 8011354:	9a06      	ldr	r2, [sp, #24]
 8011356:	3a30      	subs	r2, #48	@ 0x30
 8011358:	2a09      	cmp	r2, #9
 801135a:	d9f6      	bls.n	801134a <_vfprintf_r+0x2da>
 801135c:	e72d      	b.n	80111ba <_vfprintf_r+0x14a>
 801135e:	f04f 0900 	mov.w	r9, #0
 8011362:	210a      	movs	r1, #10
 8011364:	e7f6      	b.n	8011354 <_vfprintf_r+0x2e4>
 8011366:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 801136a:	e7c9      	b.n	8011300 <_vfprintf_r+0x290>
 801136c:	2200      	movs	r2, #0
 801136e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011370:	920e      	str	r2, [sp, #56]	@ 0x38
 8011372:	210a      	movs	r1, #10
 8011374:	9a06      	ldr	r2, [sp, #24]
 8011376:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8011378:	3a30      	subs	r2, #48	@ 0x30
 801137a:	fb01 2200 	mla	r2, r1, r0, r2
 801137e:	920e      	str	r2, [sp, #56]	@ 0x38
 8011380:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011384:	9206      	str	r2, [sp, #24]
 8011386:	3a30      	subs	r2, #48	@ 0x30
 8011388:	2a09      	cmp	r2, #9
 801138a:	d9f3      	bls.n	8011374 <_vfprintf_r+0x304>
 801138c:	e715      	b.n	80111ba <_vfprintf_r+0x14a>
 801138e:	f045 0508 	orr.w	r5, r5, #8
 8011392:	e7b5      	b.n	8011300 <_vfprintf_r+0x290>
 8011394:	f3af 8000 	nop.w
	...
 80113a0:	08017c7f 	.word	0x08017c7f
 80113a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80113a6:	781b      	ldrb	r3, [r3, #0]
 80113a8:	2b68      	cmp	r3, #104	@ 0x68
 80113aa:	bf01      	itttt	eq
 80113ac:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 80113ae:	3301      	addeq	r3, #1
 80113b0:	930c      	streq	r3, [sp, #48]	@ 0x30
 80113b2:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 80113b6:	bf18      	it	ne
 80113b8:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 80113bc:	e7a0      	b.n	8011300 <_vfprintf_r+0x290>
 80113be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80113c0:	781b      	ldrb	r3, [r3, #0]
 80113c2:	2b6c      	cmp	r3, #108	@ 0x6c
 80113c4:	d105      	bne.n	80113d2 <_vfprintf_r+0x362>
 80113c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80113c8:	3301      	adds	r3, #1
 80113ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80113cc:	f045 0520 	orr.w	r5, r5, #32
 80113d0:	e796      	b.n	8011300 <_vfprintf_r+0x290>
 80113d2:	f045 0510 	orr.w	r5, r5, #16
 80113d6:	e793      	b.n	8011300 <_vfprintf_r+0x290>
 80113d8:	4632      	mov	r2, r6
 80113da:	f852 3b04 	ldr.w	r3, [r2], #4
 80113de:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 80113e2:	2300      	movs	r3, #0
 80113e4:	9207      	str	r2, [sp, #28]
 80113e6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80113ea:	469a      	mov	sl, r3
 80113ec:	f04f 0901 	mov.w	r9, #1
 80113f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80113f2:	461f      	mov	r7, r3
 80113f4:	9308      	str	r3, [sp, #32]
 80113f6:	461e      	mov	r6, r3
 80113f8:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 80113fc:	e1da      	b.n	80117b4 <_vfprintf_r+0x744>
 80113fe:	f045 0510 	orr.w	r5, r5, #16
 8011402:	06af      	lsls	r7, r5, #26
 8011404:	d512      	bpl.n	801142c <_vfprintf_r+0x3bc>
 8011406:	3607      	adds	r6, #7
 8011408:	f026 0307 	bic.w	r3, r6, #7
 801140c:	461a      	mov	r2, r3
 801140e:	685f      	ldr	r7, [r3, #4]
 8011410:	f852 6b08 	ldr.w	r6, [r2], #8
 8011414:	9207      	str	r2, [sp, #28]
 8011416:	2f00      	cmp	r7, #0
 8011418:	da06      	bge.n	8011428 <_vfprintf_r+0x3b8>
 801141a:	4276      	negs	r6, r6
 801141c:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8011420:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8011424:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8011428:	2301      	movs	r3, #1
 801142a:	e384      	b.n	8011b36 <_vfprintf_r+0xac6>
 801142c:	4633      	mov	r3, r6
 801142e:	06ee      	lsls	r6, r5, #27
 8011430:	f853 7b04 	ldr.w	r7, [r3], #4
 8011434:	9307      	str	r3, [sp, #28]
 8011436:	d502      	bpl.n	801143e <_vfprintf_r+0x3ce>
 8011438:	463e      	mov	r6, r7
 801143a:	17ff      	asrs	r7, r7, #31
 801143c:	e7eb      	b.n	8011416 <_vfprintf_r+0x3a6>
 801143e:	0668      	lsls	r0, r5, #25
 8011440:	d503      	bpl.n	801144a <_vfprintf_r+0x3da>
 8011442:	b23e      	sxth	r6, r7
 8011444:	f347 37c0 	sbfx	r7, r7, #15, #1
 8011448:	e7e5      	b.n	8011416 <_vfprintf_r+0x3a6>
 801144a:	05a9      	lsls	r1, r5, #22
 801144c:	d5f4      	bpl.n	8011438 <_vfprintf_r+0x3c8>
 801144e:	b27e      	sxtb	r6, r7
 8011450:	f347 17c0 	sbfx	r7, r7, #7, #1
 8011454:	e7df      	b.n	8011416 <_vfprintf_r+0x3a6>
 8011456:	3607      	adds	r6, #7
 8011458:	f026 0307 	bic.w	r3, r6, #7
 801145c:	ecb3 7b02 	vldmia	r3!, {d7}
 8011460:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8011464:	9307      	str	r3, [sp, #28]
 8011466:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011468:	931a      	str	r3, [sp, #104]	@ 0x68
 801146a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801146c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011470:	931b      	str	r3, [sp, #108]	@ 0x6c
 8011472:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8011476:	4b85      	ldr	r3, [pc, #532]	@ (801168c <_vfprintf_r+0x61c>)
 8011478:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801147c:	f7ef fb76 	bl	8000b6c <__aeabi_dcmpun>
 8011480:	bb10      	cbnz	r0, 80114c8 <_vfprintf_r+0x458>
 8011482:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8011486:	4b81      	ldr	r3, [pc, #516]	@ (801168c <_vfprintf_r+0x61c>)
 8011488:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801148c:	f7ef fb50 	bl	8000b30 <__aeabi_dcmple>
 8011490:	b9d0      	cbnz	r0, 80114c8 <_vfprintf_r+0x458>
 8011492:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011496:	2200      	movs	r2, #0
 8011498:	2300      	movs	r3, #0
 801149a:	f7ef fb3f 	bl	8000b1c <__aeabi_dcmplt>
 801149e:	b110      	cbz	r0, 80114a6 <_vfprintf_r+0x436>
 80114a0:	232d      	movs	r3, #45	@ 0x2d
 80114a2:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80114a6:	4a7a      	ldr	r2, [pc, #488]	@ (8011690 <_vfprintf_r+0x620>)
 80114a8:	4b7a      	ldr	r3, [pc, #488]	@ (8011694 <_vfprintf_r+0x624>)
 80114aa:	9906      	ldr	r1, [sp, #24]
 80114ac:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 80114b0:	2947      	cmp	r1, #71	@ 0x47
 80114b2:	bfd4      	ite	le
 80114b4:	4690      	movle	r8, r2
 80114b6:	4698      	movgt	r8, r3
 80114b8:	f04f 0a00 	mov.w	sl, #0
 80114bc:	f04f 0903 	mov.w	r9, #3
 80114c0:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 80114c4:	f000 bff8 	b.w	80124b8 <_vfprintf_r+0x1448>
 80114c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80114cc:	4610      	mov	r0, r2
 80114ce:	4619      	mov	r1, r3
 80114d0:	f7ef fb4c 	bl	8000b6c <__aeabi_dcmpun>
 80114d4:	4682      	mov	sl, r0
 80114d6:	b140      	cbz	r0, 80114ea <_vfprintf_r+0x47a>
 80114d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80114da:	4a6f      	ldr	r2, [pc, #444]	@ (8011698 <_vfprintf_r+0x628>)
 80114dc:	2b00      	cmp	r3, #0
 80114de:	bfbc      	itt	lt
 80114e0:	232d      	movlt	r3, #45	@ 0x2d
 80114e2:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 80114e6:	4b6d      	ldr	r3, [pc, #436]	@ (801169c <_vfprintf_r+0x62c>)
 80114e8:	e7df      	b.n	80114aa <_vfprintf_r+0x43a>
 80114ea:	9b06      	ldr	r3, [sp, #24]
 80114ec:	2b61      	cmp	r3, #97	@ 0x61
 80114ee:	d02e      	beq.n	801154e <_vfprintf_r+0x4de>
 80114f0:	2b41      	cmp	r3, #65	@ 0x41
 80114f2:	d12e      	bne.n	8011552 <_vfprintf_r+0x4e2>
 80114f4:	2358      	movs	r3, #88	@ 0x58
 80114f6:	2230      	movs	r2, #48	@ 0x30
 80114f8:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 80114fc:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8011500:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8011504:	f045 0502 	orr.w	r5, r5, #2
 8011508:	f340 80ae 	ble.w	8011668 <_vfprintf_r+0x5f8>
 801150c:	9803      	ldr	r0, [sp, #12]
 801150e:	f109 0101 	add.w	r1, r9, #1
 8011512:	f7ff fb65 	bl	8010be0 <_malloc_r>
 8011516:	4680      	mov	r8, r0
 8011518:	2800      	cmp	r0, #0
 801151a:	f040 80aa 	bne.w	8011672 <_vfprintf_r+0x602>
 801151e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8011522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011526:	f8ab 300c 	strh.w	r3, [fp, #12]
 801152a:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 801152e:	07d9      	lsls	r1, r3, #31
 8011530:	d407      	bmi.n	8011542 <_vfprintf_r+0x4d2>
 8011532:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8011536:	059a      	lsls	r2, r3, #22
 8011538:	d403      	bmi.n	8011542 <_vfprintf_r+0x4d2>
 801153a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 801153e:	f7ff fa1a 	bl	8010976 <__retarget_lock_release_recursive>
 8011542:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8011546:	065b      	lsls	r3, r3, #25
 8011548:	f57f add6 	bpl.w	80110f8 <_vfprintf_r+0x88>
 801154c:	e5d1      	b.n	80110f2 <_vfprintf_r+0x82>
 801154e:	2378      	movs	r3, #120	@ 0x78
 8011550:	e7d1      	b.n	80114f6 <_vfprintf_r+0x486>
 8011552:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8011556:	f000 808e 	beq.w	8011676 <_vfprintf_r+0x606>
 801155a:	9b06      	ldr	r3, [sp, #24]
 801155c:	f023 0320 	bic.w	r3, r3, #32
 8011560:	2b47      	cmp	r3, #71	@ 0x47
 8011562:	d105      	bne.n	8011570 <_vfprintf_r+0x500>
 8011564:	f1b9 0f00 	cmp.w	r9, #0
 8011568:	d102      	bne.n	8011570 <_vfprintf_r+0x500>
 801156a:	46ca      	mov	sl, r9
 801156c:	f04f 0901 	mov.w	r9, #1
 8011570:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8011574:	9311      	str	r3, [sp, #68]	@ 0x44
 8011576:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011578:	2b00      	cmp	r3, #0
 801157a:	da7f      	bge.n	801167c <_vfprintf_r+0x60c>
 801157c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801157e:	9314      	str	r3, [sp, #80]	@ 0x50
 8011580:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011582:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8011586:	9315      	str	r3, [sp, #84]	@ 0x54
 8011588:	232d      	movs	r3, #45	@ 0x2d
 801158a:	931c      	str	r3, [sp, #112]	@ 0x70
 801158c:	9b06      	ldr	r3, [sp, #24]
 801158e:	f023 0320 	bic.w	r3, r3, #32
 8011592:	2b41      	cmp	r3, #65	@ 0x41
 8011594:	9308      	str	r3, [sp, #32]
 8011596:	f040 81e7 	bne.w	8011968 <_vfprintf_r+0x8f8>
 801159a:	a820      	add	r0, sp, #128	@ 0x80
 801159c:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 80115a0:	f002 f82a 	bl	80135f8 <frexp>
 80115a4:	2200      	movs	r2, #0
 80115a6:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80115aa:	ec51 0b10 	vmov	r0, r1, d0
 80115ae:	f7ef f843 	bl	8000638 <__aeabi_dmul>
 80115b2:	4602      	mov	r2, r0
 80115b4:	460b      	mov	r3, r1
 80115b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80115ba:	2200      	movs	r2, #0
 80115bc:	2300      	movs	r3, #0
 80115be:	f7ef faa3 	bl	8000b08 <__aeabi_dcmpeq>
 80115c2:	b108      	cbz	r0, 80115c8 <_vfprintf_r+0x558>
 80115c4:	2301      	movs	r3, #1
 80115c6:	9320      	str	r3, [sp, #128]	@ 0x80
 80115c8:	4a35      	ldr	r2, [pc, #212]	@ (80116a0 <_vfprintf_r+0x630>)
 80115ca:	4b36      	ldr	r3, [pc, #216]	@ (80116a4 <_vfprintf_r+0x634>)
 80115cc:	9906      	ldr	r1, [sp, #24]
 80115ce:	2961      	cmp	r1, #97	@ 0x61
 80115d0:	bf18      	it	ne
 80115d2:	461a      	movne	r2, r3
 80115d4:	9210      	str	r2, [sp, #64]	@ 0x40
 80115d6:	f109 37ff 	add.w	r7, r9, #4294967295	@ 0xffffffff
 80115da:	4646      	mov	r6, r8
 80115dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80115e0:	4b31      	ldr	r3, [pc, #196]	@ (80116a8 <_vfprintf_r+0x638>)
 80115e2:	2200      	movs	r2, #0
 80115e4:	f7ef f828 	bl	8000638 <__aeabi_dmul>
 80115e8:	4602      	mov	r2, r0
 80115ea:	460b      	mov	r3, r1
 80115ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80115f0:	f7ef fad2 	bl	8000b98 <__aeabi_d2iz>
 80115f4:	9013      	str	r0, [sp, #76]	@ 0x4c
 80115f6:	f7ee ffb5 	bl	8000564 <__aeabi_i2d>
 80115fa:	4602      	mov	r2, r0
 80115fc:	460b      	mov	r3, r1
 80115fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011602:	f7ee fe61 	bl	80002c8 <__aeabi_dsub>
 8011606:	4602      	mov	r2, r0
 8011608:	460b      	mov	r3, r1
 801160a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801160e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011610:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011612:	5c9b      	ldrb	r3, [r3, r2]
 8011614:	f806 3b01 	strb.w	r3, [r6], #1
 8011618:	1c7a      	adds	r2, r7, #1
 801161a:	d006      	beq.n	801162a <_vfprintf_r+0x5ba>
 801161c:	1e7b      	subs	r3, r7, #1
 801161e:	931d      	str	r3, [sp, #116]	@ 0x74
 8011620:	2200      	movs	r2, #0
 8011622:	2300      	movs	r3, #0
 8011624:	f7ef fa70 	bl	8000b08 <__aeabi_dcmpeq>
 8011628:	b370      	cbz	r0, 8011688 <_vfprintf_r+0x618>
 801162a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801162e:	4b1f      	ldr	r3, [pc, #124]	@ (80116ac <_vfprintf_r+0x63c>)
 8011630:	2200      	movs	r2, #0
 8011632:	f7ef fa91 	bl	8000b58 <__aeabi_dcmpgt>
 8011636:	2800      	cmp	r0, #0
 8011638:	d13a      	bne.n	80116b0 <_vfprintf_r+0x640>
 801163a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801163e:	4b1b      	ldr	r3, [pc, #108]	@ (80116ac <_vfprintf_r+0x63c>)
 8011640:	2200      	movs	r2, #0
 8011642:	f7ef fa61 	bl	8000b08 <__aeabi_dcmpeq>
 8011646:	b110      	cbz	r0, 801164e <_vfprintf_r+0x5de>
 8011648:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801164a:	07db      	lsls	r3, r3, #31
 801164c:	d430      	bmi.n	80116b0 <_vfprintf_r+0x640>
 801164e:	4633      	mov	r3, r6
 8011650:	19f1      	adds	r1, r6, r7
 8011652:	2030      	movs	r0, #48	@ 0x30
 8011654:	1aca      	subs	r2, r1, r3
 8011656:	2a00      	cmp	r2, #0
 8011658:	f280 8183 	bge.w	8011962 <_vfprintf_r+0x8f2>
 801165c:	1c7b      	adds	r3, r7, #1
 801165e:	3701      	adds	r7, #1
 8011660:	bfb8      	it	lt
 8011662:	2300      	movlt	r3, #0
 8011664:	441e      	add	r6, r3
 8011666:	e037      	b.n	80116d8 <_vfprintf_r+0x668>
 8011668:	f04f 0a00 	mov.w	sl, #0
 801166c:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 8011670:	e77e      	b.n	8011570 <_vfprintf_r+0x500>
 8011672:	4682      	mov	sl, r0
 8011674:	e77c      	b.n	8011570 <_vfprintf_r+0x500>
 8011676:	f04f 0906 	mov.w	r9, #6
 801167a:	e779      	b.n	8011570 <_vfprintf_r+0x500>
 801167c:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8011680:	2300      	movs	r3, #0
 8011682:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8011686:	e780      	b.n	801158a <_vfprintf_r+0x51a>
 8011688:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 801168a:	e7a7      	b.n	80115dc <_vfprintf_r+0x56c>
 801168c:	7fefffff 	.word	0x7fefffff
 8011690:	08017c6f 	.word	0x08017c6f
 8011694:	08017c73 	.word	0x08017c73
 8011698:	08017c77 	.word	0x08017c77
 801169c:	08017c7b 	.word	0x08017c7b
 80116a0:	08017c7f 	.word	0x08017c7f
 80116a4:	08017c90 	.word	0x08017c90
 80116a8:	40300000 	.word	0x40300000
 80116ac:	3fe00000 	.word	0x3fe00000
 80116b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80116b2:	9624      	str	r6, [sp, #144]	@ 0x90
 80116b4:	7bd9      	ldrb	r1, [r3, #15]
 80116b6:	2030      	movs	r0, #48	@ 0x30
 80116b8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80116ba:	1e53      	subs	r3, r2, #1
 80116bc:	9324      	str	r3, [sp, #144]	@ 0x90
 80116be:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80116c2:	428b      	cmp	r3, r1
 80116c4:	f000 814a 	beq.w	801195c <_vfprintf_r+0x8ec>
 80116c8:	2b39      	cmp	r3, #57	@ 0x39
 80116ca:	bf0b      	itete	eq
 80116cc:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 80116ce:	3301      	addne	r3, #1
 80116d0:	7a9b      	ldrbeq	r3, [r3, #10]
 80116d2:	b2db      	uxtbne	r3, r3
 80116d4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80116d8:	eba6 0308 	sub.w	r3, r6, r8
 80116dc:	9304      	str	r3, [sp, #16]
 80116de:	9b08      	ldr	r3, [sp, #32]
 80116e0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80116e2:	2b47      	cmp	r3, #71	@ 0x47
 80116e4:	f040 8189 	bne.w	80119fa <_vfprintf_r+0x98a>
 80116e8:	1cf1      	adds	r1, r6, #3
 80116ea:	db02      	blt.n	80116f2 <_vfprintf_r+0x682>
 80116ec:	45b1      	cmp	r9, r6
 80116ee:	f280 81a7 	bge.w	8011a40 <_vfprintf_r+0x9d0>
 80116f2:	9b06      	ldr	r3, [sp, #24]
 80116f4:	3b02      	subs	r3, #2
 80116f6:	9306      	str	r3, [sp, #24]
 80116f8:	9906      	ldr	r1, [sp, #24]
 80116fa:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80116fe:	f021 0120 	bic.w	r1, r1, #32
 8011702:	2941      	cmp	r1, #65	@ 0x41
 8011704:	bf08      	it	eq
 8011706:	320f      	addeq	r2, #15
 8011708:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 801170c:	bf06      	itte	eq
 801170e:	b2d2      	uxtbeq	r2, r2
 8011710:	2101      	moveq	r1, #1
 8011712:	2100      	movne	r1, #0
 8011714:	2b00      	cmp	r3, #0
 8011716:	9320      	str	r3, [sp, #128]	@ 0x80
 8011718:	bfb8      	it	lt
 801171a:	f1c6 0301 	rsblt	r3, r6, #1
 801171e:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 8011722:	bfb4      	ite	lt
 8011724:	222d      	movlt	r2, #45	@ 0x2d
 8011726:	222b      	movge	r2, #43	@ 0x2b
 8011728:	2b09      	cmp	r3, #9
 801172a:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 801172e:	f340 817a 	ble.w	8011a26 <_vfprintf_r+0x9b6>
 8011732:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8011736:	270a      	movs	r7, #10
 8011738:	4602      	mov	r2, r0
 801173a:	fbb3 f6f7 	udiv	r6, r3, r7
 801173e:	fb07 3116 	mls	r1, r7, r6, r3
 8011742:	3130      	adds	r1, #48	@ 0x30
 8011744:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011748:	4619      	mov	r1, r3
 801174a:	2963      	cmp	r1, #99	@ 0x63
 801174c:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8011750:	4633      	mov	r3, r6
 8011752:	dcf1      	bgt.n	8011738 <_vfprintf_r+0x6c8>
 8011754:	3330      	adds	r3, #48	@ 0x30
 8011756:	1e91      	subs	r1, r2, #2
 8011758:	f800 3c01 	strb.w	r3, [r0, #-1]
 801175c:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8011760:	460b      	mov	r3, r1
 8011762:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8011766:	4283      	cmp	r3, r0
 8011768:	f0c0 8158 	bcc.w	8011a1c <_vfprintf_r+0x9ac>
 801176c:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8011770:	1a9b      	subs	r3, r3, r2
 8011772:	4281      	cmp	r1, r0
 8011774:	bf88      	it	hi
 8011776:	2300      	movhi	r3, #0
 8011778:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 801177c:	441a      	add	r2, r3
 801177e:	ab22      	add	r3, sp, #136	@ 0x88
 8011780:	1ad3      	subs	r3, r2, r3
 8011782:	9a04      	ldr	r2, [sp, #16]
 8011784:	9318      	str	r3, [sp, #96]	@ 0x60
 8011786:	2a01      	cmp	r2, #1
 8011788:	eb03 0902 	add.w	r9, r3, r2
 801178c:	dc01      	bgt.n	8011792 <_vfprintf_r+0x722>
 801178e:	07ea      	lsls	r2, r5, #31
 8011790:	d501      	bpl.n	8011796 <_vfprintf_r+0x726>
 8011792:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011794:	4499      	add	r9, r3
 8011796:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801179a:	2700      	movs	r7, #0
 801179c:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80117a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80117a2:	9708      	str	r7, [sp, #32]
 80117a4:	463e      	mov	r6, r7
 80117a6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	f040 8191 	bne.w	8011ad0 <_vfprintf_r+0xa60>
 80117ae:	2300      	movs	r3, #0
 80117b0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80117b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80117b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80117b6:	454b      	cmp	r3, r9
 80117b8:	bfb8      	it	lt
 80117ba:	464b      	movlt	r3, r9
 80117bc:	9311      	str	r3, [sp, #68]	@ 0x44
 80117be:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 80117c2:	b113      	cbz	r3, 80117ca <_vfprintf_r+0x75a>
 80117c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80117c6:	3301      	adds	r3, #1
 80117c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80117ca:	f015 0302 	ands.w	r3, r5, #2
 80117ce:	931c      	str	r3, [sp, #112]	@ 0x70
 80117d0:	bf1e      	ittt	ne
 80117d2:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 80117d4:	3302      	addne	r3, #2
 80117d6:	9311      	strne	r3, [sp, #68]	@ 0x44
 80117d8:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 80117dc:	931d      	str	r3, [sp, #116]	@ 0x74
 80117de:	d122      	bne.n	8011826 <_vfprintf_r+0x7b6>
 80117e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80117e2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80117e4:	1a9b      	subs	r3, r3, r2
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80117ea:	dd1c      	ble.n	8011826 <_vfprintf_r+0x7b6>
 80117ec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80117ee:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80117f2:	2810      	cmp	r0, #16
 80117f4:	489f      	ldr	r0, [pc, #636]	@ (8011a74 <_vfprintf_r+0xa04>)
 80117f6:	6020      	str	r0, [r4, #0]
 80117f8:	f102 0201 	add.w	r2, r2, #1
 80117fc:	f104 0108 	add.w	r1, r4, #8
 8011800:	f300 8297 	bgt.w	8011d32 <_vfprintf_r+0xcc2>
 8011804:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8011806:	6060      	str	r0, [r4, #4]
 8011808:	4403      	add	r3, r0
 801180a:	2a07      	cmp	r2, #7
 801180c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8011810:	f340 82a4 	ble.w	8011d5c <_vfprintf_r+0xcec>
 8011814:	9803      	ldr	r0, [sp, #12]
 8011816:	aa26      	add	r2, sp, #152	@ 0x98
 8011818:	4659      	mov	r1, fp
 801181a:	f000 fe95 	bl	8012548 <__sprint_r>
 801181e:	2800      	cmp	r0, #0
 8011820:	f040 85ed 	bne.w	80123fe <_vfprintf_r+0x138e>
 8011824:	ac29      	add	r4, sp, #164	@ 0xa4
 8011826:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 801182a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801182c:	b16a      	cbz	r2, 801184a <_vfprintf_r+0x7da>
 801182e:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8011832:	6022      	str	r2, [r4, #0]
 8011834:	2201      	movs	r2, #1
 8011836:	4413      	add	r3, r2
 8011838:	9328      	str	r3, [sp, #160]	@ 0xa0
 801183a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801183c:	6062      	str	r2, [r4, #4]
 801183e:	4413      	add	r3, r2
 8011840:	2b07      	cmp	r3, #7
 8011842:	9327      	str	r3, [sp, #156]	@ 0x9c
 8011844:	f300 828c 	bgt.w	8011d60 <_vfprintf_r+0xcf0>
 8011848:	3408      	adds	r4, #8
 801184a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801184c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801184e:	b162      	cbz	r2, 801186a <_vfprintf_r+0x7fa>
 8011850:	aa1f      	add	r2, sp, #124	@ 0x7c
 8011852:	6022      	str	r2, [r4, #0]
 8011854:	2202      	movs	r2, #2
 8011856:	4413      	add	r3, r2
 8011858:	9328      	str	r3, [sp, #160]	@ 0xa0
 801185a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801185c:	6062      	str	r2, [r4, #4]
 801185e:	3301      	adds	r3, #1
 8011860:	2b07      	cmp	r3, #7
 8011862:	9327      	str	r3, [sp, #156]	@ 0x9c
 8011864:	f300 8286 	bgt.w	8011d74 <_vfprintf_r+0xd04>
 8011868:	3408      	adds	r4, #8
 801186a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801186c:	2b80      	cmp	r3, #128	@ 0x80
 801186e:	d122      	bne.n	80118b6 <_vfprintf_r+0x846>
 8011870:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011872:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011874:	1a9b      	subs	r3, r3, r2
 8011876:	2b00      	cmp	r3, #0
 8011878:	9313      	str	r3, [sp, #76]	@ 0x4c
 801187a:	dd1c      	ble.n	80118b6 <_vfprintf_r+0x846>
 801187c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801187e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8011882:	2810      	cmp	r0, #16
 8011884:	487c      	ldr	r0, [pc, #496]	@ (8011a78 <_vfprintf_r+0xa08>)
 8011886:	6020      	str	r0, [r4, #0]
 8011888:	f102 0201 	add.w	r2, r2, #1
 801188c:	f104 0108 	add.w	r1, r4, #8
 8011890:	f300 827a 	bgt.w	8011d88 <_vfprintf_r+0xd18>
 8011894:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8011896:	6060      	str	r0, [r4, #4]
 8011898:	4403      	add	r3, r0
 801189a:	2a07      	cmp	r2, #7
 801189c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80118a0:	f340 8287 	ble.w	8011db2 <_vfprintf_r+0xd42>
 80118a4:	9803      	ldr	r0, [sp, #12]
 80118a6:	aa26      	add	r2, sp, #152	@ 0x98
 80118a8:	4659      	mov	r1, fp
 80118aa:	f000 fe4d 	bl	8012548 <__sprint_r>
 80118ae:	2800      	cmp	r0, #0
 80118b0:	f040 85a5 	bne.w	80123fe <_vfprintf_r+0x138e>
 80118b4:	ac29      	add	r4, sp, #164	@ 0xa4
 80118b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80118b8:	eba3 0309 	sub.w	r3, r3, r9
 80118bc:	2b00      	cmp	r3, #0
 80118be:	9310      	str	r3, [sp, #64]	@ 0x40
 80118c0:	dd1c      	ble.n	80118fc <_vfprintf_r+0x88c>
 80118c2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80118c4:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80118c8:	2810      	cmp	r0, #16
 80118ca:	486b      	ldr	r0, [pc, #428]	@ (8011a78 <_vfprintf_r+0xa08>)
 80118cc:	6020      	str	r0, [r4, #0]
 80118ce:	f102 0201 	add.w	r2, r2, #1
 80118d2:	f104 0108 	add.w	r1, r4, #8
 80118d6:	f300 826e 	bgt.w	8011db6 <_vfprintf_r+0xd46>
 80118da:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80118dc:	6060      	str	r0, [r4, #4]
 80118de:	4403      	add	r3, r0
 80118e0:	2a07      	cmp	r2, #7
 80118e2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80118e6:	f340 827b 	ble.w	8011de0 <_vfprintf_r+0xd70>
 80118ea:	9803      	ldr	r0, [sp, #12]
 80118ec:	aa26      	add	r2, sp, #152	@ 0x98
 80118ee:	4659      	mov	r1, fp
 80118f0:	f000 fe2a 	bl	8012548 <__sprint_r>
 80118f4:	2800      	cmp	r0, #0
 80118f6:	f040 8582 	bne.w	80123fe <_vfprintf_r+0x138e>
 80118fa:	ac29      	add	r4, sp, #164	@ 0xa4
 80118fc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80118fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8011900:	05e8      	lsls	r0, r5, #23
 8011902:	f100 8273 	bmi.w	8011dec <_vfprintf_r+0xd7c>
 8011906:	444b      	add	r3, r9
 8011908:	9328      	str	r3, [sp, #160]	@ 0xa0
 801190a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801190c:	3301      	adds	r3, #1
 801190e:	2b07      	cmp	r3, #7
 8011910:	e9c4 8900 	strd	r8, r9, [r4]
 8011914:	9327      	str	r3, [sp, #156]	@ 0x9c
 8011916:	f300 82af 	bgt.w	8011e78 <_vfprintf_r+0xe08>
 801191a:	3408      	adds	r4, #8
 801191c:	0768      	lsls	r0, r5, #29
 801191e:	f100 8550 	bmi.w	80123c2 <_vfprintf_r+0x1352>
 8011922:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011926:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8011928:	428a      	cmp	r2, r1
 801192a:	bfac      	ite	ge
 801192c:	189b      	addge	r3, r3, r2
 801192e:	185b      	addlt	r3, r3, r1
 8011930:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011932:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8011934:	b13b      	cbz	r3, 8011946 <_vfprintf_r+0x8d6>
 8011936:	9803      	ldr	r0, [sp, #12]
 8011938:	aa26      	add	r2, sp, #152	@ 0x98
 801193a:	4659      	mov	r1, fp
 801193c:	f000 fe04 	bl	8012548 <__sprint_r>
 8011940:	2800      	cmp	r0, #0
 8011942:	f040 855c 	bne.w	80123fe <_vfprintf_r+0x138e>
 8011946:	2300      	movs	r3, #0
 8011948:	9327      	str	r3, [sp, #156]	@ 0x9c
 801194a:	f1ba 0f00 	cmp.w	sl, #0
 801194e:	f040 8572 	bne.w	8012436 <_vfprintf_r+0x13c6>
 8011952:	9e07      	ldr	r6, [sp, #28]
 8011954:	ac29      	add	r4, sp, #164	@ 0xa4
 8011956:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 801195a:	e407      	b.n	801116c <_vfprintf_r+0xfc>
 801195c:	f802 0c01 	strb.w	r0, [r2, #-1]
 8011960:	e6aa      	b.n	80116b8 <_vfprintf_r+0x648>
 8011962:	f803 0b01 	strb.w	r0, [r3], #1
 8011966:	e675      	b.n	8011654 <_vfprintf_r+0x5e4>
 8011968:	9b08      	ldr	r3, [sp, #32]
 801196a:	2b46      	cmp	r3, #70	@ 0x46
 801196c:	d005      	beq.n	801197a <_vfprintf_r+0x90a>
 801196e:	2b45      	cmp	r3, #69	@ 0x45
 8011970:	d11a      	bne.n	80119a8 <_vfprintf_r+0x938>
 8011972:	f109 0601 	add.w	r6, r9, #1
 8011976:	2102      	movs	r1, #2
 8011978:	e001      	b.n	801197e <_vfprintf_r+0x90e>
 801197a:	464e      	mov	r6, r9
 801197c:	2103      	movs	r1, #3
 801197e:	ab24      	add	r3, sp, #144	@ 0x90
 8011980:	9301      	str	r3, [sp, #4]
 8011982:	ab21      	add	r3, sp, #132	@ 0x84
 8011984:	9300      	str	r3, [sp, #0]
 8011986:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 801198a:	ab20      	add	r3, sp, #128	@ 0x80
 801198c:	9803      	ldr	r0, [sp, #12]
 801198e:	4632      	mov	r2, r6
 8011990:	f001 ff32 	bl	80137f8 <_dtoa_r>
 8011994:	9b08      	ldr	r3, [sp, #32]
 8011996:	2b47      	cmp	r3, #71	@ 0x47
 8011998:	4680      	mov	r8, r0
 801199a:	d119      	bne.n	80119d0 <_vfprintf_r+0x960>
 801199c:	07e8      	lsls	r0, r5, #31
 801199e:	d405      	bmi.n	80119ac <_vfprintf_r+0x93c>
 80119a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80119a2:	eba3 0308 	sub.w	r3, r3, r8
 80119a6:	e699      	b.n	80116dc <_vfprintf_r+0x66c>
 80119a8:	464e      	mov	r6, r9
 80119aa:	e7e4      	b.n	8011976 <_vfprintf_r+0x906>
 80119ac:	eb08 0706 	add.w	r7, r8, r6
 80119b0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 80119b4:	2200      	movs	r2, #0
 80119b6:	2300      	movs	r3, #0
 80119b8:	f7ef f8a6 	bl	8000b08 <__aeabi_dcmpeq>
 80119bc:	b100      	cbz	r0, 80119c0 <_vfprintf_r+0x950>
 80119be:	9724      	str	r7, [sp, #144]	@ 0x90
 80119c0:	2230      	movs	r2, #48	@ 0x30
 80119c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80119c4:	429f      	cmp	r7, r3
 80119c6:	d9eb      	bls.n	80119a0 <_vfprintf_r+0x930>
 80119c8:	1c59      	adds	r1, r3, #1
 80119ca:	9124      	str	r1, [sp, #144]	@ 0x90
 80119cc:	701a      	strb	r2, [r3, #0]
 80119ce:	e7f8      	b.n	80119c2 <_vfprintf_r+0x952>
 80119d0:	9b08      	ldr	r3, [sp, #32]
 80119d2:	2b46      	cmp	r3, #70	@ 0x46
 80119d4:	eb00 0706 	add.w	r7, r0, r6
 80119d8:	d1ea      	bne.n	80119b0 <_vfprintf_r+0x940>
 80119da:	7803      	ldrb	r3, [r0, #0]
 80119dc:	2b30      	cmp	r3, #48	@ 0x30
 80119de:	d109      	bne.n	80119f4 <_vfprintf_r+0x984>
 80119e0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 80119e4:	2200      	movs	r2, #0
 80119e6:	2300      	movs	r3, #0
 80119e8:	f7ef f88e 	bl	8000b08 <__aeabi_dcmpeq>
 80119ec:	b910      	cbnz	r0, 80119f4 <_vfprintf_r+0x984>
 80119ee:	f1c6 0601 	rsb	r6, r6, #1
 80119f2:	9620      	str	r6, [sp, #128]	@ 0x80
 80119f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80119f6:	441f      	add	r7, r3
 80119f8:	e7da      	b.n	80119b0 <_vfprintf_r+0x940>
 80119fa:	9b08      	ldr	r3, [sp, #32]
 80119fc:	2b46      	cmp	r3, #70	@ 0x46
 80119fe:	f47f ae7b 	bne.w	80116f8 <_vfprintf_r+0x688>
 8011a02:	f005 0301 	and.w	r3, r5, #1
 8011a06:	2e00      	cmp	r6, #0
 8011a08:	ea43 0309 	orr.w	r3, r3, r9
 8011a0c:	dd25      	ble.n	8011a5a <_vfprintf_r+0x9ea>
 8011a0e:	b37b      	cbz	r3, 8011a70 <_vfprintf_r+0xa00>
 8011a10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011a12:	18f3      	adds	r3, r6, r3
 8011a14:	4499      	add	r9, r3
 8011a16:	2366      	movs	r3, #102	@ 0x66
 8011a18:	9306      	str	r3, [sp, #24]
 8011a1a:	e033      	b.n	8011a84 <_vfprintf_r+0xa14>
 8011a1c:	f813 7b01 	ldrb.w	r7, [r3], #1
 8011a20:	f806 7f01 	strb.w	r7, [r6, #1]!
 8011a24:	e69f      	b.n	8011766 <_vfprintf_r+0x6f6>
 8011a26:	b941      	cbnz	r1, 8011a3a <_vfprintf_r+0x9ca>
 8011a28:	2230      	movs	r2, #48	@ 0x30
 8011a2a:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8011a2e:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8011a32:	3330      	adds	r3, #48	@ 0x30
 8011a34:	f802 3b01 	strb.w	r3, [r2], #1
 8011a38:	e6a1      	b.n	801177e <_vfprintf_r+0x70e>
 8011a3a:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8011a3e:	e7f8      	b.n	8011a32 <_vfprintf_r+0x9c2>
 8011a40:	9b04      	ldr	r3, [sp, #16]
 8011a42:	42b3      	cmp	r3, r6
 8011a44:	dd0d      	ble.n	8011a62 <_vfprintf_r+0x9f2>
 8011a46:	9b04      	ldr	r3, [sp, #16]
 8011a48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011a4a:	2e00      	cmp	r6, #0
 8011a4c:	eb03 0902 	add.w	r9, r3, r2
 8011a50:	dc0c      	bgt.n	8011a6c <_vfprintf_r+0x9fc>
 8011a52:	f1c6 0301 	rsb	r3, r6, #1
 8011a56:	4499      	add	r9, r3
 8011a58:	e008      	b.n	8011a6c <_vfprintf_r+0x9fc>
 8011a5a:	b17b      	cbz	r3, 8011a7c <_vfprintf_r+0xa0c>
 8011a5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011a5e:	3301      	adds	r3, #1
 8011a60:	e7d8      	b.n	8011a14 <_vfprintf_r+0x9a4>
 8011a62:	07eb      	lsls	r3, r5, #31
 8011a64:	d521      	bpl.n	8011aaa <_vfprintf_r+0xa3a>
 8011a66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011a68:	eb06 0903 	add.w	r9, r6, r3
 8011a6c:	2367      	movs	r3, #103	@ 0x67
 8011a6e:	e7d3      	b.n	8011a18 <_vfprintf_r+0x9a8>
 8011a70:	46b1      	mov	r9, r6
 8011a72:	e7d0      	b.n	8011a16 <_vfprintf_r+0x9a6>
 8011a74:	08017cb3 	.word	0x08017cb3
 8011a78:	08017ca3 	.word	0x08017ca3
 8011a7c:	2366      	movs	r3, #102	@ 0x66
 8011a7e:	9306      	str	r3, [sp, #24]
 8011a80:	f04f 0901 	mov.w	r9, #1
 8011a84:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8011a88:	9308      	str	r3, [sp, #32]
 8011a8a:	d01f      	beq.n	8011acc <_vfprintf_r+0xa5c>
 8011a8c:	2700      	movs	r7, #0
 8011a8e:	2e00      	cmp	r6, #0
 8011a90:	9708      	str	r7, [sp, #32]
 8011a92:	f77f ae88 	ble.w	80117a6 <_vfprintf_r+0x736>
 8011a96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a98:	781b      	ldrb	r3, [r3, #0]
 8011a9a:	2bff      	cmp	r3, #255	@ 0xff
 8011a9c:	d107      	bne.n	8011aae <_vfprintf_r+0xa3e>
 8011a9e:	9b08      	ldr	r3, [sp, #32]
 8011aa0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011aa2:	443b      	add	r3, r7
 8011aa4:	fb02 9903 	mla	r9, r2, r3, r9
 8011aa8:	e67d      	b.n	80117a6 <_vfprintf_r+0x736>
 8011aaa:	46b1      	mov	r9, r6
 8011aac:	e7de      	b.n	8011a6c <_vfprintf_r+0x9fc>
 8011aae:	42b3      	cmp	r3, r6
 8011ab0:	daf5      	bge.n	8011a9e <_vfprintf_r+0xa2e>
 8011ab2:	1af6      	subs	r6, r6, r3
 8011ab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ab6:	785b      	ldrb	r3, [r3, #1]
 8011ab8:	b133      	cbz	r3, 8011ac8 <_vfprintf_r+0xa58>
 8011aba:	9b08      	ldr	r3, [sp, #32]
 8011abc:	3301      	adds	r3, #1
 8011abe:	9308      	str	r3, [sp, #32]
 8011ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ac2:	3301      	adds	r3, #1
 8011ac4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ac6:	e7e6      	b.n	8011a96 <_vfprintf_r+0xa26>
 8011ac8:	3701      	adds	r7, #1
 8011aca:	e7e4      	b.n	8011a96 <_vfprintf_r+0xa26>
 8011acc:	9f08      	ldr	r7, [sp, #32]
 8011ace:	e66a      	b.n	80117a6 <_vfprintf_r+0x736>
 8011ad0:	232d      	movs	r3, #45	@ 0x2d
 8011ad2:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8011ad6:	e66a      	b.n	80117ae <_vfprintf_r+0x73e>
 8011ad8:	06af      	lsls	r7, r5, #26
 8011ada:	d507      	bpl.n	8011aec <_vfprintf_r+0xa7c>
 8011adc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011ade:	6833      	ldr	r3, [r6, #0]
 8011ae0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011ae2:	17d2      	asrs	r2, r2, #31
 8011ae4:	e9c3 1200 	strd	r1, r2, [r3]
 8011ae8:	3604      	adds	r6, #4
 8011aea:	e734      	b.n	8011956 <_vfprintf_r+0x8e6>
 8011aec:	06e8      	lsls	r0, r5, #27
 8011aee:	d503      	bpl.n	8011af8 <_vfprintf_r+0xa88>
 8011af0:	6833      	ldr	r3, [r6, #0]
 8011af2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011af4:	601a      	str	r2, [r3, #0]
 8011af6:	e7f7      	b.n	8011ae8 <_vfprintf_r+0xa78>
 8011af8:	0669      	lsls	r1, r5, #25
 8011afa:	d503      	bpl.n	8011b04 <_vfprintf_r+0xa94>
 8011afc:	6833      	ldr	r3, [r6, #0]
 8011afe:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011b00:	801a      	strh	r2, [r3, #0]
 8011b02:	e7f1      	b.n	8011ae8 <_vfprintf_r+0xa78>
 8011b04:	05aa      	lsls	r2, r5, #22
 8011b06:	d5f3      	bpl.n	8011af0 <_vfprintf_r+0xa80>
 8011b08:	6833      	ldr	r3, [r6, #0]
 8011b0a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011b0c:	701a      	strb	r2, [r3, #0]
 8011b0e:	e7eb      	b.n	8011ae8 <_vfprintf_r+0xa78>
 8011b10:	f045 0510 	orr.w	r5, r5, #16
 8011b14:	f015 0320 	ands.w	r3, r5, #32
 8011b18:	d020      	beq.n	8011b5c <_vfprintf_r+0xaec>
 8011b1a:	3607      	adds	r6, #7
 8011b1c:	f026 0307 	bic.w	r3, r6, #7
 8011b20:	461a      	mov	r2, r3
 8011b22:	685f      	ldr	r7, [r3, #4]
 8011b24:	f852 6b08 	ldr.w	r6, [r2], #8
 8011b28:	9207      	str	r2, [sp, #28]
 8011b2a:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8011b2e:	2300      	movs	r3, #0
 8011b30:	2200      	movs	r2, #0
 8011b32:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8011b36:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8011b3a:	f000 8491 	beq.w	8012460 <_vfprintf_r+0x13f0>
 8011b3e:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8011b42:	9208      	str	r2, [sp, #32]
 8011b44:	ea56 0207 	orrs.w	r2, r6, r7
 8011b48:	f040 848f 	bne.w	801246a <_vfprintf_r+0x13fa>
 8011b4c:	f1b9 0f00 	cmp.w	r9, #0
 8011b50:	f000 80db 	beq.w	8011d0a <_vfprintf_r+0xc9a>
 8011b54:	2b01      	cmp	r3, #1
 8011b56:	f040 848b 	bne.w	8012470 <_vfprintf_r+0x1400>
 8011b5a:	e083      	b.n	8011c64 <_vfprintf_r+0xbf4>
 8011b5c:	4632      	mov	r2, r6
 8011b5e:	f015 0710 	ands.w	r7, r5, #16
 8011b62:	f852 6b04 	ldr.w	r6, [r2], #4
 8011b66:	9207      	str	r2, [sp, #28]
 8011b68:	d001      	beq.n	8011b6e <_vfprintf_r+0xafe>
 8011b6a:	461f      	mov	r7, r3
 8011b6c:	e7dd      	b.n	8011b2a <_vfprintf_r+0xaba>
 8011b6e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8011b72:	d001      	beq.n	8011b78 <_vfprintf_r+0xb08>
 8011b74:	b2b6      	uxth	r6, r6
 8011b76:	e7d8      	b.n	8011b2a <_vfprintf_r+0xaba>
 8011b78:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8011b7c:	d0d5      	beq.n	8011b2a <_vfprintf_r+0xaba>
 8011b7e:	b2f6      	uxtb	r6, r6
 8011b80:	e7f3      	b.n	8011b6a <_vfprintf_r+0xafa>
 8011b82:	4633      	mov	r3, r6
 8011b84:	2278      	movs	r2, #120	@ 0x78
 8011b86:	f853 6b04 	ldr.w	r6, [r3], #4
 8011b8a:	9307      	str	r3, [sp, #28]
 8011b8c:	f647 0330 	movw	r3, #30768	@ 0x7830
 8011b90:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8011b94:	4b93      	ldr	r3, [pc, #588]	@ (8011de4 <_vfprintf_r+0xd74>)
 8011b96:	9319      	str	r3, [sp, #100]	@ 0x64
 8011b98:	2700      	movs	r7, #0
 8011b9a:	f045 0502 	orr.w	r5, r5, #2
 8011b9e:	2302      	movs	r3, #2
 8011ba0:	9206      	str	r2, [sp, #24]
 8011ba2:	e7c5      	b.n	8011b30 <_vfprintf_r+0xac0>
 8011ba4:	4633      	mov	r3, r6
 8011ba6:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8011baa:	f853 8b04 	ldr.w	r8, [r3], #4
 8011bae:	9307      	str	r3, [sp, #28]
 8011bb0:	f04f 0600 	mov.w	r6, #0
 8011bb4:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8011bb8:	d00f      	beq.n	8011bda <_vfprintf_r+0xb6a>
 8011bba:	464a      	mov	r2, r9
 8011bbc:	4631      	mov	r1, r6
 8011bbe:	4640      	mov	r0, r8
 8011bc0:	f7ee fb2e 	bl	8000220 <memchr>
 8011bc4:	4682      	mov	sl, r0
 8011bc6:	2800      	cmp	r0, #0
 8011bc8:	f43f ac7a 	beq.w	80114c0 <_vfprintf_r+0x450>
 8011bcc:	eba0 0908 	sub.w	r9, r0, r8
 8011bd0:	46b2      	mov	sl, r6
 8011bd2:	9610      	str	r6, [sp, #64]	@ 0x40
 8011bd4:	4637      	mov	r7, r6
 8011bd6:	9608      	str	r6, [sp, #32]
 8011bd8:	e5ec      	b.n	80117b4 <_vfprintf_r+0x744>
 8011bda:	4640      	mov	r0, r8
 8011bdc:	f7ee fb18 	bl	8000210 <strlen>
 8011be0:	46b2      	mov	sl, r6
 8011be2:	4681      	mov	r9, r0
 8011be4:	e46c      	b.n	80114c0 <_vfprintf_r+0x450>
 8011be6:	f045 0510 	orr.w	r5, r5, #16
 8011bea:	f015 0320 	ands.w	r3, r5, #32
 8011bee:	d009      	beq.n	8011c04 <_vfprintf_r+0xb94>
 8011bf0:	3607      	adds	r6, #7
 8011bf2:	f026 0307 	bic.w	r3, r6, #7
 8011bf6:	461a      	mov	r2, r3
 8011bf8:	685f      	ldr	r7, [r3, #4]
 8011bfa:	f852 6b08 	ldr.w	r6, [r2], #8
 8011bfe:	9207      	str	r2, [sp, #28]
 8011c00:	2301      	movs	r3, #1
 8011c02:	e795      	b.n	8011b30 <_vfprintf_r+0xac0>
 8011c04:	4632      	mov	r2, r6
 8011c06:	f015 0710 	ands.w	r7, r5, #16
 8011c0a:	f852 6b04 	ldr.w	r6, [r2], #4
 8011c0e:	9207      	str	r2, [sp, #28]
 8011c10:	d001      	beq.n	8011c16 <_vfprintf_r+0xba6>
 8011c12:	461f      	mov	r7, r3
 8011c14:	e7f4      	b.n	8011c00 <_vfprintf_r+0xb90>
 8011c16:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8011c1a:	d001      	beq.n	8011c20 <_vfprintf_r+0xbb0>
 8011c1c:	b2b6      	uxth	r6, r6
 8011c1e:	e7ef      	b.n	8011c00 <_vfprintf_r+0xb90>
 8011c20:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8011c24:	d0ec      	beq.n	8011c00 <_vfprintf_r+0xb90>
 8011c26:	b2f6      	uxtb	r6, r6
 8011c28:	e7f3      	b.n	8011c12 <_vfprintf_r+0xba2>
 8011c2a:	4b6f      	ldr	r3, [pc, #444]	@ (8011de8 <_vfprintf_r+0xd78>)
 8011c2c:	f7ff bb33 	b.w	8011296 <_vfprintf_r+0x226>
 8011c30:	4632      	mov	r2, r6
 8011c32:	f015 0710 	ands.w	r7, r5, #16
 8011c36:	f852 6b04 	ldr.w	r6, [r2], #4
 8011c3a:	9207      	str	r2, [sp, #28]
 8011c3c:	d002      	beq.n	8011c44 <_vfprintf_r+0xbd4>
 8011c3e:	461f      	mov	r7, r3
 8011c40:	f7ff bb36 	b.w	80112b0 <_vfprintf_r+0x240>
 8011c44:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8011c48:	d002      	beq.n	8011c50 <_vfprintf_r+0xbe0>
 8011c4a:	b2b6      	uxth	r6, r6
 8011c4c:	f7ff bb30 	b.w	80112b0 <_vfprintf_r+0x240>
 8011c50:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8011c54:	f43f ab2c 	beq.w	80112b0 <_vfprintf_r+0x240>
 8011c58:	b2f6      	uxtb	r6, r6
 8011c5a:	e7f0      	b.n	8011c3e <_vfprintf_r+0xbce>
 8011c5c:	2e0a      	cmp	r6, #10
 8011c5e:	f177 0300 	sbcs.w	r3, r7, #0
 8011c62:	d207      	bcs.n	8011c74 <_vfprintf_r+0xc04>
 8011c64:	3630      	adds	r6, #48	@ 0x30
 8011c66:	b2f6      	uxtb	r6, r6
 8011c68:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8011c6c:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 8011c70:	f000 bc1a 	b.w	80124a8 <_vfprintf_r+0x1438>
 8011c74:	2300      	movs	r3, #0
 8011c76:	9304      	str	r3, [sp, #16]
 8011c78:	9b08      	ldr	r3, [sp, #32]
 8011c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011c7e:	ad52      	add	r5, sp, #328	@ 0x148
 8011c80:	9310      	str	r3, [sp, #64]	@ 0x40
 8011c82:	220a      	movs	r2, #10
 8011c84:	2300      	movs	r3, #0
 8011c86:	4630      	mov	r0, r6
 8011c88:	4639      	mov	r1, r7
 8011c8a:	f7ee ffad 	bl	8000be8 <__aeabi_uldivmod>
 8011c8e:	9b04      	ldr	r3, [sp, #16]
 8011c90:	9011      	str	r0, [sp, #68]	@ 0x44
 8011c92:	3301      	adds	r3, #1
 8011c94:	9304      	str	r3, [sp, #16]
 8011c96:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011c98:	3230      	adds	r2, #48	@ 0x30
 8011c9a:	468a      	mov	sl, r1
 8011c9c:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 8011ca0:	f805 2c01 	strb.w	r2, [r5, #-1]
 8011ca4:	b1d3      	cbz	r3, 8011cdc <_vfprintf_r+0xc6c>
 8011ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ca8:	9a04      	ldr	r2, [sp, #16]
 8011caa:	781b      	ldrb	r3, [r3, #0]
 8011cac:	429a      	cmp	r2, r3
 8011cae:	d115      	bne.n	8011cdc <_vfprintf_r+0xc6c>
 8011cb0:	2aff      	cmp	r2, #255	@ 0xff
 8011cb2:	d013      	beq.n	8011cdc <_vfprintf_r+0xc6c>
 8011cb4:	2e0a      	cmp	r6, #10
 8011cb6:	f177 0300 	sbcs.w	r3, r7, #0
 8011cba:	d30f      	bcc.n	8011cdc <_vfprintf_r+0xc6c>
 8011cbc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011cbe:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8011cc0:	eba8 0803 	sub.w	r8, r8, r3
 8011cc4:	461a      	mov	r2, r3
 8011cc6:	4640      	mov	r0, r8
 8011cc8:	f001 fc48 	bl	801355c <strncpy>
 8011ccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cce:	785b      	ldrb	r3, [r3, #1]
 8011cd0:	b11b      	cbz	r3, 8011cda <_vfprintf_r+0xc6a>
 8011cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cd4:	3301      	adds	r3, #1
 8011cd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cd8:	2300      	movs	r3, #0
 8011cda:	9304      	str	r3, [sp, #16]
 8011cdc:	2e0a      	cmp	r6, #10
 8011cde:	f177 0700 	sbcs.w	r7, r7, #0
 8011ce2:	f0c0 83e1 	bcc.w	80124a8 <_vfprintf_r+0x1438>
 8011ce6:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8011ce8:	4657      	mov	r7, sl
 8011cea:	4645      	mov	r5, r8
 8011cec:	e7c9      	b.n	8011c82 <_vfprintf_r+0xc12>
 8011cee:	f006 030f 	and.w	r3, r6, #15
 8011cf2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011cf4:	0936      	lsrs	r6, r6, #4
 8011cf6:	5cd3      	ldrb	r3, [r2, r3]
 8011cf8:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8011cfc:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8011d00:	093f      	lsrs	r7, r7, #4
 8011d02:	ea56 0307 	orrs.w	r3, r6, r7
 8011d06:	d1f2      	bne.n	8011cee <_vfprintf_r+0xc7e>
 8011d08:	e3ce      	b.n	80124a8 <_vfprintf_r+0x1438>
 8011d0a:	b91b      	cbnz	r3, 8011d14 <_vfprintf_r+0xca4>
 8011d0c:	07ed      	lsls	r5, r5, #31
 8011d0e:	d501      	bpl.n	8011d14 <_vfprintf_r+0xca4>
 8011d10:	2630      	movs	r6, #48	@ 0x30
 8011d12:	e7a9      	b.n	8011c68 <_vfprintf_r+0xbf8>
 8011d14:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8011d18:	e3c6      	b.n	80124a8 <_vfprintf_r+0x1438>
 8011d1a:	9b06      	ldr	r3, [sp, #24]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	f000 8390 	beq.w	8012442 <_vfprintf_r+0x13d2>
 8011d22:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8011d26:	2300      	movs	r3, #0
 8011d28:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8011d2c:	9607      	str	r6, [sp, #28]
 8011d2e:	f7ff bb5c 	b.w	80113ea <_vfprintf_r+0x37a>
 8011d32:	2010      	movs	r0, #16
 8011d34:	4403      	add	r3, r0
 8011d36:	2a07      	cmp	r2, #7
 8011d38:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8011d3c:	6060      	str	r0, [r4, #4]
 8011d3e:	dd08      	ble.n	8011d52 <_vfprintf_r+0xce2>
 8011d40:	9803      	ldr	r0, [sp, #12]
 8011d42:	aa26      	add	r2, sp, #152	@ 0x98
 8011d44:	4659      	mov	r1, fp
 8011d46:	f000 fbff 	bl	8012548 <__sprint_r>
 8011d4a:	2800      	cmp	r0, #0
 8011d4c:	f040 8357 	bne.w	80123fe <_vfprintf_r+0x138e>
 8011d50:	a929      	add	r1, sp, #164	@ 0xa4
 8011d52:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011d54:	3b10      	subs	r3, #16
 8011d56:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011d58:	460c      	mov	r4, r1
 8011d5a:	e547      	b.n	80117ec <_vfprintf_r+0x77c>
 8011d5c:	460c      	mov	r4, r1
 8011d5e:	e562      	b.n	8011826 <_vfprintf_r+0x7b6>
 8011d60:	9803      	ldr	r0, [sp, #12]
 8011d62:	aa26      	add	r2, sp, #152	@ 0x98
 8011d64:	4659      	mov	r1, fp
 8011d66:	f000 fbef 	bl	8012548 <__sprint_r>
 8011d6a:	2800      	cmp	r0, #0
 8011d6c:	f040 8347 	bne.w	80123fe <_vfprintf_r+0x138e>
 8011d70:	ac29      	add	r4, sp, #164	@ 0xa4
 8011d72:	e56a      	b.n	801184a <_vfprintf_r+0x7da>
 8011d74:	9803      	ldr	r0, [sp, #12]
 8011d76:	aa26      	add	r2, sp, #152	@ 0x98
 8011d78:	4659      	mov	r1, fp
 8011d7a:	f000 fbe5 	bl	8012548 <__sprint_r>
 8011d7e:	2800      	cmp	r0, #0
 8011d80:	f040 833d 	bne.w	80123fe <_vfprintf_r+0x138e>
 8011d84:	ac29      	add	r4, sp, #164	@ 0xa4
 8011d86:	e570      	b.n	801186a <_vfprintf_r+0x7fa>
 8011d88:	2010      	movs	r0, #16
 8011d8a:	4403      	add	r3, r0
 8011d8c:	2a07      	cmp	r2, #7
 8011d8e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8011d92:	6060      	str	r0, [r4, #4]
 8011d94:	dd08      	ble.n	8011da8 <_vfprintf_r+0xd38>
 8011d96:	9803      	ldr	r0, [sp, #12]
 8011d98:	aa26      	add	r2, sp, #152	@ 0x98
 8011d9a:	4659      	mov	r1, fp
 8011d9c:	f000 fbd4 	bl	8012548 <__sprint_r>
 8011da0:	2800      	cmp	r0, #0
 8011da2:	f040 832c 	bne.w	80123fe <_vfprintf_r+0x138e>
 8011da6:	a929      	add	r1, sp, #164	@ 0xa4
 8011da8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011daa:	3b10      	subs	r3, #16
 8011dac:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011dae:	460c      	mov	r4, r1
 8011db0:	e564      	b.n	801187c <_vfprintf_r+0x80c>
 8011db2:	460c      	mov	r4, r1
 8011db4:	e57f      	b.n	80118b6 <_vfprintf_r+0x846>
 8011db6:	2010      	movs	r0, #16
 8011db8:	4403      	add	r3, r0
 8011dba:	2a07      	cmp	r2, #7
 8011dbc:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8011dc0:	6060      	str	r0, [r4, #4]
 8011dc2:	dd08      	ble.n	8011dd6 <_vfprintf_r+0xd66>
 8011dc4:	9803      	ldr	r0, [sp, #12]
 8011dc6:	aa26      	add	r2, sp, #152	@ 0x98
 8011dc8:	4659      	mov	r1, fp
 8011dca:	f000 fbbd 	bl	8012548 <__sprint_r>
 8011dce:	2800      	cmp	r0, #0
 8011dd0:	f040 8315 	bne.w	80123fe <_vfprintf_r+0x138e>
 8011dd4:	a929      	add	r1, sp, #164	@ 0xa4
 8011dd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011dd8:	3b10      	subs	r3, #16
 8011dda:	9310      	str	r3, [sp, #64]	@ 0x40
 8011ddc:	460c      	mov	r4, r1
 8011dde:	e570      	b.n	80118c2 <_vfprintf_r+0x852>
 8011de0:	460c      	mov	r4, r1
 8011de2:	e58b      	b.n	80118fc <_vfprintf_r+0x88c>
 8011de4:	08017c7f 	.word	0x08017c7f
 8011de8:	08017c90 	.word	0x08017c90
 8011dec:	9b06      	ldr	r3, [sp, #24]
 8011dee:	2b65      	cmp	r3, #101	@ 0x65
 8011df0:	f340 8245 	ble.w	801227e <_vfprintf_r+0x120e>
 8011df4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011df8:	2200      	movs	r2, #0
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	f7ee fe84 	bl	8000b08 <__aeabi_dcmpeq>
 8011e00:	2800      	cmp	r0, #0
 8011e02:	d06a      	beq.n	8011eda <_vfprintf_r+0xe6a>
 8011e04:	4b73      	ldr	r3, [pc, #460]	@ (8011fd4 <_vfprintf_r+0xf64>)
 8011e06:	6023      	str	r3, [r4, #0]
 8011e08:	2301      	movs	r3, #1
 8011e0a:	6063      	str	r3, [r4, #4]
 8011e0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011e0e:	3301      	adds	r3, #1
 8011e10:	9328      	str	r3, [sp, #160]	@ 0xa0
 8011e12:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8011e14:	3301      	adds	r3, #1
 8011e16:	2b07      	cmp	r3, #7
 8011e18:	9327      	str	r3, [sp, #156]	@ 0x9c
 8011e1a:	dc37      	bgt.n	8011e8c <_vfprintf_r+0xe1c>
 8011e1c:	3408      	adds	r4, #8
 8011e1e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011e20:	9a04      	ldr	r2, [sp, #16]
 8011e22:	4293      	cmp	r3, r2
 8011e24:	db02      	blt.n	8011e2c <_vfprintf_r+0xdbc>
 8011e26:	07e9      	lsls	r1, r5, #31
 8011e28:	f57f ad78 	bpl.w	801191c <_vfprintf_r+0x8ac>
 8011e2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011e2e:	6023      	str	r3, [r4, #0]
 8011e30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011e32:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011e34:	6063      	str	r3, [r4, #4]
 8011e36:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8011e38:	4413      	add	r3, r2
 8011e3a:	9328      	str	r3, [sp, #160]	@ 0xa0
 8011e3c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8011e3e:	3301      	adds	r3, #1
 8011e40:	2b07      	cmp	r3, #7
 8011e42:	9327      	str	r3, [sp, #156]	@ 0x9c
 8011e44:	dc2c      	bgt.n	8011ea0 <_vfprintf_r+0xe30>
 8011e46:	3408      	adds	r4, #8
 8011e48:	9b04      	ldr	r3, [sp, #16]
 8011e4a:	1e5e      	subs	r6, r3, #1
 8011e4c:	2e00      	cmp	r6, #0
 8011e4e:	f77f ad65 	ble.w	801191c <_vfprintf_r+0x8ac>
 8011e52:	4f61      	ldr	r7, [pc, #388]	@ (8011fd8 <_vfprintf_r+0xf68>)
 8011e54:	f04f 0810 	mov.w	r8, #16
 8011e58:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8011e5c:	2e10      	cmp	r6, #16
 8011e5e:	f103 0301 	add.w	r3, r3, #1
 8011e62:	f104 0108 	add.w	r1, r4, #8
 8011e66:	6027      	str	r7, [r4, #0]
 8011e68:	dc24      	bgt.n	8011eb4 <_vfprintf_r+0xe44>
 8011e6a:	6066      	str	r6, [r4, #4]
 8011e6c:	2b07      	cmp	r3, #7
 8011e6e:	4416      	add	r6, r2
 8011e70:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8011e74:	f340 82a2 	ble.w	80123bc <_vfprintf_r+0x134c>
 8011e78:	9803      	ldr	r0, [sp, #12]
 8011e7a:	aa26      	add	r2, sp, #152	@ 0x98
 8011e7c:	4659      	mov	r1, fp
 8011e7e:	f000 fb63 	bl	8012548 <__sprint_r>
 8011e82:	2800      	cmp	r0, #0
 8011e84:	f040 82bb 	bne.w	80123fe <_vfprintf_r+0x138e>
 8011e88:	ac29      	add	r4, sp, #164	@ 0xa4
 8011e8a:	e547      	b.n	801191c <_vfprintf_r+0x8ac>
 8011e8c:	9803      	ldr	r0, [sp, #12]
 8011e8e:	aa26      	add	r2, sp, #152	@ 0x98
 8011e90:	4659      	mov	r1, fp
 8011e92:	f000 fb59 	bl	8012548 <__sprint_r>
 8011e96:	2800      	cmp	r0, #0
 8011e98:	f040 82b1 	bne.w	80123fe <_vfprintf_r+0x138e>
 8011e9c:	ac29      	add	r4, sp, #164	@ 0xa4
 8011e9e:	e7be      	b.n	8011e1e <_vfprintf_r+0xdae>
 8011ea0:	9803      	ldr	r0, [sp, #12]
 8011ea2:	aa26      	add	r2, sp, #152	@ 0x98
 8011ea4:	4659      	mov	r1, fp
 8011ea6:	f000 fb4f 	bl	8012548 <__sprint_r>
 8011eaa:	2800      	cmp	r0, #0
 8011eac:	f040 82a7 	bne.w	80123fe <_vfprintf_r+0x138e>
 8011eb0:	ac29      	add	r4, sp, #164	@ 0xa4
 8011eb2:	e7c9      	b.n	8011e48 <_vfprintf_r+0xdd8>
 8011eb4:	3210      	adds	r2, #16
 8011eb6:	2b07      	cmp	r3, #7
 8011eb8:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8011ebc:	f8c4 8004 	str.w	r8, [r4, #4]
 8011ec0:	dd08      	ble.n	8011ed4 <_vfprintf_r+0xe64>
 8011ec2:	9803      	ldr	r0, [sp, #12]
 8011ec4:	aa26      	add	r2, sp, #152	@ 0x98
 8011ec6:	4659      	mov	r1, fp
 8011ec8:	f000 fb3e 	bl	8012548 <__sprint_r>
 8011ecc:	2800      	cmp	r0, #0
 8011ece:	f040 8296 	bne.w	80123fe <_vfprintf_r+0x138e>
 8011ed2:	a929      	add	r1, sp, #164	@ 0xa4
 8011ed4:	3e10      	subs	r6, #16
 8011ed6:	460c      	mov	r4, r1
 8011ed8:	e7be      	b.n	8011e58 <_vfprintf_r+0xde8>
 8011eda:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	dc7d      	bgt.n	8011fdc <_vfprintf_r+0xf6c>
 8011ee0:	4b3c      	ldr	r3, [pc, #240]	@ (8011fd4 <_vfprintf_r+0xf64>)
 8011ee2:	6023      	str	r3, [r4, #0]
 8011ee4:	2301      	movs	r3, #1
 8011ee6:	6063      	str	r3, [r4, #4]
 8011ee8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011eea:	3301      	adds	r3, #1
 8011eec:	9328      	str	r3, [sp, #160]	@ 0xa0
 8011eee:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8011ef0:	3301      	adds	r3, #1
 8011ef2:	2b07      	cmp	r3, #7
 8011ef4:	9327      	str	r3, [sp, #156]	@ 0x9c
 8011ef6:	dc46      	bgt.n	8011f86 <_vfprintf_r+0xf16>
 8011ef8:	3408      	adds	r4, #8
 8011efa:	9904      	ldr	r1, [sp, #16]
 8011efc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011efe:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8011f00:	430b      	orrs	r3, r1
 8011f02:	f005 0101 	and.w	r1, r5, #1
 8011f06:	430b      	orrs	r3, r1
 8011f08:	f43f ad08 	beq.w	801191c <_vfprintf_r+0x8ac>
 8011f0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011f0e:	6023      	str	r3, [r4, #0]
 8011f10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011f12:	6063      	str	r3, [r4, #4]
 8011f14:	441a      	add	r2, r3
 8011f16:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8011f18:	9228      	str	r2, [sp, #160]	@ 0xa0
 8011f1a:	3301      	adds	r3, #1
 8011f1c:	2b07      	cmp	r3, #7
 8011f1e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8011f20:	dc3b      	bgt.n	8011f9a <_vfprintf_r+0xf2a>
 8011f22:	f104 0308 	add.w	r3, r4, #8
 8011f26:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8011f28:	2e00      	cmp	r6, #0
 8011f2a:	da1b      	bge.n	8011f64 <_vfprintf_r+0xef4>
 8011f2c:	4f2a      	ldr	r7, [pc, #168]	@ (8011fd8 <_vfprintf_r+0xf68>)
 8011f2e:	4276      	negs	r6, r6
 8011f30:	461a      	mov	r2, r3
 8011f32:	2410      	movs	r4, #16
 8011f34:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8011f38:	2e10      	cmp	r6, #16
 8011f3a:	f101 0101 	add.w	r1, r1, #1
 8011f3e:	f103 0308 	add.w	r3, r3, #8
 8011f42:	6017      	str	r7, [r2, #0]
 8011f44:	dc33      	bgt.n	8011fae <_vfprintf_r+0xf3e>
 8011f46:	6056      	str	r6, [r2, #4]
 8011f48:	2907      	cmp	r1, #7
 8011f4a:	4406      	add	r6, r0
 8011f4c:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 8011f50:	dd08      	ble.n	8011f64 <_vfprintf_r+0xef4>
 8011f52:	9803      	ldr	r0, [sp, #12]
 8011f54:	aa26      	add	r2, sp, #152	@ 0x98
 8011f56:	4659      	mov	r1, fp
 8011f58:	f000 faf6 	bl	8012548 <__sprint_r>
 8011f5c:	2800      	cmp	r0, #0
 8011f5e:	f040 824e 	bne.w	80123fe <_vfprintf_r+0x138e>
 8011f62:	ab29      	add	r3, sp, #164	@ 0xa4
 8011f64:	9a04      	ldr	r2, [sp, #16]
 8011f66:	9904      	ldr	r1, [sp, #16]
 8011f68:	605a      	str	r2, [r3, #4]
 8011f6a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8011f6c:	f8c3 8000 	str.w	r8, [r3]
 8011f70:	440a      	add	r2, r1
 8011f72:	9228      	str	r2, [sp, #160]	@ 0xa0
 8011f74:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8011f76:	3201      	adds	r2, #1
 8011f78:	2a07      	cmp	r2, #7
 8011f7a:	9227      	str	r2, [sp, #156]	@ 0x9c
 8011f7c:	f73f af7c 	bgt.w	8011e78 <_vfprintf_r+0xe08>
 8011f80:	f103 0408 	add.w	r4, r3, #8
 8011f84:	e4ca      	b.n	801191c <_vfprintf_r+0x8ac>
 8011f86:	9803      	ldr	r0, [sp, #12]
 8011f88:	aa26      	add	r2, sp, #152	@ 0x98
 8011f8a:	4659      	mov	r1, fp
 8011f8c:	f000 fadc 	bl	8012548 <__sprint_r>
 8011f90:	2800      	cmp	r0, #0
 8011f92:	f040 8234 	bne.w	80123fe <_vfprintf_r+0x138e>
 8011f96:	ac29      	add	r4, sp, #164	@ 0xa4
 8011f98:	e7af      	b.n	8011efa <_vfprintf_r+0xe8a>
 8011f9a:	9803      	ldr	r0, [sp, #12]
 8011f9c:	aa26      	add	r2, sp, #152	@ 0x98
 8011f9e:	4659      	mov	r1, fp
 8011fa0:	f000 fad2 	bl	8012548 <__sprint_r>
 8011fa4:	2800      	cmp	r0, #0
 8011fa6:	f040 822a 	bne.w	80123fe <_vfprintf_r+0x138e>
 8011faa:	ab29      	add	r3, sp, #164	@ 0xa4
 8011fac:	e7bb      	b.n	8011f26 <_vfprintf_r+0xeb6>
 8011fae:	3010      	adds	r0, #16
 8011fb0:	2907      	cmp	r1, #7
 8011fb2:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8011fb6:	6054      	str	r4, [r2, #4]
 8011fb8:	dd08      	ble.n	8011fcc <_vfprintf_r+0xf5c>
 8011fba:	9803      	ldr	r0, [sp, #12]
 8011fbc:	aa26      	add	r2, sp, #152	@ 0x98
 8011fbe:	4659      	mov	r1, fp
 8011fc0:	f000 fac2 	bl	8012548 <__sprint_r>
 8011fc4:	2800      	cmp	r0, #0
 8011fc6:	f040 821a 	bne.w	80123fe <_vfprintf_r+0x138e>
 8011fca:	ab29      	add	r3, sp, #164	@ 0xa4
 8011fcc:	3e10      	subs	r6, #16
 8011fce:	461a      	mov	r2, r3
 8011fd0:	e7b0      	b.n	8011f34 <_vfprintf_r+0xec4>
 8011fd2:	bf00      	nop
 8011fd4:	08017ca1 	.word	0x08017ca1
 8011fd8:	08017ca3 	.word	0x08017ca3
 8011fdc:	9b04      	ldr	r3, [sp, #16]
 8011fde:	4443      	add	r3, r8
 8011fe0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011fe2:	9b04      	ldr	r3, [sp, #16]
 8011fe4:	42b3      	cmp	r3, r6
 8011fe6:	bfa8      	it	ge
 8011fe8:	4633      	movge	r3, r6
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	4699      	mov	r9, r3
 8011fee:	dd0b      	ble.n	8012008 <_vfprintf_r+0xf98>
 8011ff0:	e9c4 8300 	strd	r8, r3, [r4]
 8011ff4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011ff6:	444b      	add	r3, r9
 8011ff8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8011ffa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8011ffc:	3301      	adds	r3, #1
 8011ffe:	2b07      	cmp	r3, #7
 8012000:	9327      	str	r3, [sp, #156]	@ 0x9c
 8012002:	f300 8089 	bgt.w	8012118 <_vfprintf_r+0x10a8>
 8012006:	3408      	adds	r4, #8
 8012008:	f1b9 0f00 	cmp.w	r9, #0
 801200c:	bfac      	ite	ge
 801200e:	eba6 0309 	subge.w	r3, r6, r9
 8012012:	4633      	movlt	r3, r6
 8012014:	2b00      	cmp	r3, #0
 8012016:	9306      	str	r3, [sp, #24]
 8012018:	dd1c      	ble.n	8012054 <_vfprintf_r+0xfe4>
 801201a:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 8012380 <_vfprintf_r+0x1310>
 801201e:	9806      	ldr	r0, [sp, #24]
 8012020:	f8c4 9000 	str.w	r9, [r4]
 8012024:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8012028:	2810      	cmp	r0, #16
 801202a:	f102 0201 	add.w	r2, r2, #1
 801202e:	f104 0108 	add.w	r1, r4, #8
 8012032:	dc7b      	bgt.n	801212c <_vfprintf_r+0x10bc>
 8012034:	4403      	add	r3, r0
 8012036:	2a07      	cmp	r2, #7
 8012038:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801203c:	6060      	str	r0, [r4, #4]
 801203e:	f340 808a 	ble.w	8012156 <_vfprintf_r+0x10e6>
 8012042:	9803      	ldr	r0, [sp, #12]
 8012044:	aa26      	add	r2, sp, #152	@ 0x98
 8012046:	4659      	mov	r1, fp
 8012048:	f000 fa7e 	bl	8012548 <__sprint_r>
 801204c:	2800      	cmp	r0, #0
 801204e:	f040 81d6 	bne.w	80123fe <_vfprintf_r+0x138e>
 8012052:	ac29      	add	r4, sp, #164	@ 0xa4
 8012054:	056a      	lsls	r2, r5, #21
 8012056:	44b0      	add	r8, r6
 8012058:	d508      	bpl.n	801206c <_vfprintf_r+0xffc>
 801205a:	9b08      	ldr	r3, [sp, #32]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d17c      	bne.n	801215a <_vfprintf_r+0x10ea>
 8012060:	2f00      	cmp	r7, #0
 8012062:	d17c      	bne.n	801215e <_vfprintf_r+0x10ee>
 8012064:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012066:	4598      	cmp	r8, r3
 8012068:	bf28      	it	cs
 801206a:	4698      	movcs	r8, r3
 801206c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801206e:	9a04      	ldr	r2, [sp, #16]
 8012070:	4293      	cmp	r3, r2
 8012072:	db01      	blt.n	8012078 <_vfprintf_r+0x1008>
 8012074:	07eb      	lsls	r3, r5, #31
 8012076:	d50e      	bpl.n	8012096 <_vfprintf_r+0x1026>
 8012078:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801207a:	6023      	str	r3, [r4, #0]
 801207c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801207e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012080:	6063      	str	r3, [r4, #4]
 8012082:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8012084:	4413      	add	r3, r2
 8012086:	9328      	str	r3, [sp, #160]	@ 0xa0
 8012088:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801208a:	3301      	adds	r3, #1
 801208c:	2b07      	cmp	r3, #7
 801208e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8012090:	f300 80e1 	bgt.w	8012256 <_vfprintf_r+0x11e6>
 8012094:	3408      	adds	r4, #8
 8012096:	9b04      	ldr	r3, [sp, #16]
 8012098:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 801209a:	1bdf      	subs	r7, r3, r7
 801209c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801209e:	eba3 0308 	sub.w	r3, r3, r8
 80120a2:	429f      	cmp	r7, r3
 80120a4:	bfa8      	it	ge
 80120a6:	461f      	movge	r7, r3
 80120a8:	2f00      	cmp	r7, #0
 80120aa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80120ac:	dd0a      	ble.n	80120c4 <_vfprintf_r+0x1054>
 80120ae:	443b      	add	r3, r7
 80120b0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80120b2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80120b4:	3301      	adds	r3, #1
 80120b6:	2b07      	cmp	r3, #7
 80120b8:	e9c4 8700 	strd	r8, r7, [r4]
 80120bc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80120be:	f300 80d4 	bgt.w	801226a <_vfprintf_r+0x11fa>
 80120c2:	3408      	adds	r4, #8
 80120c4:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80120c6:	9b04      	ldr	r3, [sp, #16]
 80120c8:	2f00      	cmp	r7, #0
 80120ca:	eba3 0606 	sub.w	r6, r3, r6
 80120ce:	bfa8      	it	ge
 80120d0:	1bf6      	subge	r6, r6, r7
 80120d2:	2e00      	cmp	r6, #0
 80120d4:	f77f ac22 	ble.w	801191c <_vfprintf_r+0x8ac>
 80120d8:	4fa9      	ldr	r7, [pc, #676]	@ (8012380 <_vfprintf_r+0x1310>)
 80120da:	f04f 0810 	mov.w	r8, #16
 80120de:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80120e2:	2e10      	cmp	r6, #16
 80120e4:	f103 0301 	add.w	r3, r3, #1
 80120e8:	f104 0108 	add.w	r1, r4, #8
 80120ec:	6027      	str	r7, [r4, #0]
 80120ee:	f77f aebc 	ble.w	8011e6a <_vfprintf_r+0xdfa>
 80120f2:	3210      	adds	r2, #16
 80120f4:	2b07      	cmp	r3, #7
 80120f6:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80120fa:	f8c4 8004 	str.w	r8, [r4, #4]
 80120fe:	dd08      	ble.n	8012112 <_vfprintf_r+0x10a2>
 8012100:	9803      	ldr	r0, [sp, #12]
 8012102:	aa26      	add	r2, sp, #152	@ 0x98
 8012104:	4659      	mov	r1, fp
 8012106:	f000 fa1f 	bl	8012548 <__sprint_r>
 801210a:	2800      	cmp	r0, #0
 801210c:	f040 8177 	bne.w	80123fe <_vfprintf_r+0x138e>
 8012110:	a929      	add	r1, sp, #164	@ 0xa4
 8012112:	3e10      	subs	r6, #16
 8012114:	460c      	mov	r4, r1
 8012116:	e7e2      	b.n	80120de <_vfprintf_r+0x106e>
 8012118:	9803      	ldr	r0, [sp, #12]
 801211a:	aa26      	add	r2, sp, #152	@ 0x98
 801211c:	4659      	mov	r1, fp
 801211e:	f000 fa13 	bl	8012548 <__sprint_r>
 8012122:	2800      	cmp	r0, #0
 8012124:	f040 816b 	bne.w	80123fe <_vfprintf_r+0x138e>
 8012128:	ac29      	add	r4, sp, #164	@ 0xa4
 801212a:	e76d      	b.n	8012008 <_vfprintf_r+0xf98>
 801212c:	2010      	movs	r0, #16
 801212e:	4403      	add	r3, r0
 8012130:	2a07      	cmp	r2, #7
 8012132:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8012136:	6060      	str	r0, [r4, #4]
 8012138:	dd08      	ble.n	801214c <_vfprintf_r+0x10dc>
 801213a:	9803      	ldr	r0, [sp, #12]
 801213c:	aa26      	add	r2, sp, #152	@ 0x98
 801213e:	4659      	mov	r1, fp
 8012140:	f000 fa02 	bl	8012548 <__sprint_r>
 8012144:	2800      	cmp	r0, #0
 8012146:	f040 815a 	bne.w	80123fe <_vfprintf_r+0x138e>
 801214a:	a929      	add	r1, sp, #164	@ 0xa4
 801214c:	9b06      	ldr	r3, [sp, #24]
 801214e:	3b10      	subs	r3, #16
 8012150:	9306      	str	r3, [sp, #24]
 8012152:	460c      	mov	r4, r1
 8012154:	e763      	b.n	801201e <_vfprintf_r+0xfae>
 8012156:	460c      	mov	r4, r1
 8012158:	e77c      	b.n	8012054 <_vfprintf_r+0xfe4>
 801215a:	2f00      	cmp	r7, #0
 801215c:	d04b      	beq.n	80121f6 <_vfprintf_r+0x1186>
 801215e:	3f01      	subs	r7, #1
 8012160:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012162:	6023      	str	r3, [r4, #0]
 8012164:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012166:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012168:	6063      	str	r3, [r4, #4]
 801216a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801216c:	4413      	add	r3, r2
 801216e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8012170:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8012172:	3301      	adds	r3, #1
 8012174:	2b07      	cmp	r3, #7
 8012176:	9327      	str	r3, [sp, #156]	@ 0x9c
 8012178:	dc44      	bgt.n	8012204 <_vfprintf_r+0x1194>
 801217a:	3408      	adds	r4, #8
 801217c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801217e:	f893 9000 	ldrb.w	r9, [r3]
 8012182:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012184:	eba3 0308 	sub.w	r3, r3, r8
 8012188:	4599      	cmp	r9, r3
 801218a:	bfa8      	it	ge
 801218c:	4699      	movge	r9, r3
 801218e:	f1b9 0f00 	cmp.w	r9, #0
 8012192:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8012194:	dd09      	ble.n	80121aa <_vfprintf_r+0x113a>
 8012196:	444b      	add	r3, r9
 8012198:	9328      	str	r3, [sp, #160]	@ 0xa0
 801219a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801219c:	3301      	adds	r3, #1
 801219e:	2b07      	cmp	r3, #7
 80121a0:	e9c4 8900 	strd	r8, r9, [r4]
 80121a4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80121a6:	dc37      	bgt.n	8012218 <_vfprintf_r+0x11a8>
 80121a8:	3408      	adds	r4, #8
 80121aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121ac:	781e      	ldrb	r6, [r3, #0]
 80121ae:	f1b9 0f00 	cmp.w	r9, #0
 80121b2:	bfa8      	it	ge
 80121b4:	eba6 0609 	subge.w	r6, r6, r9
 80121b8:	2e00      	cmp	r6, #0
 80121ba:	dd18      	ble.n	80121ee <_vfprintf_r+0x117e>
 80121bc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80121c0:	486f      	ldr	r0, [pc, #444]	@ (8012380 <_vfprintf_r+0x1310>)
 80121c2:	6020      	str	r0, [r4, #0]
 80121c4:	2e10      	cmp	r6, #16
 80121c6:	f103 0301 	add.w	r3, r3, #1
 80121ca:	f104 0108 	add.w	r1, r4, #8
 80121ce:	dc2d      	bgt.n	801222c <_vfprintf_r+0x11bc>
 80121d0:	6066      	str	r6, [r4, #4]
 80121d2:	2b07      	cmp	r3, #7
 80121d4:	4416      	add	r6, r2
 80121d6:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 80121da:	dd3a      	ble.n	8012252 <_vfprintf_r+0x11e2>
 80121dc:	9803      	ldr	r0, [sp, #12]
 80121de:	aa26      	add	r2, sp, #152	@ 0x98
 80121e0:	4659      	mov	r1, fp
 80121e2:	f000 f9b1 	bl	8012548 <__sprint_r>
 80121e6:	2800      	cmp	r0, #0
 80121e8:	f040 8109 	bne.w	80123fe <_vfprintf_r+0x138e>
 80121ec:	ac29      	add	r4, sp, #164	@ 0xa4
 80121ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121f0:	781b      	ldrb	r3, [r3, #0]
 80121f2:	4498      	add	r8, r3
 80121f4:	e731      	b.n	801205a <_vfprintf_r+0xfea>
 80121f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121f8:	3b01      	subs	r3, #1
 80121fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80121fc:	9b08      	ldr	r3, [sp, #32]
 80121fe:	3b01      	subs	r3, #1
 8012200:	9308      	str	r3, [sp, #32]
 8012202:	e7ad      	b.n	8012160 <_vfprintf_r+0x10f0>
 8012204:	9803      	ldr	r0, [sp, #12]
 8012206:	aa26      	add	r2, sp, #152	@ 0x98
 8012208:	4659      	mov	r1, fp
 801220a:	f000 f99d 	bl	8012548 <__sprint_r>
 801220e:	2800      	cmp	r0, #0
 8012210:	f040 80f5 	bne.w	80123fe <_vfprintf_r+0x138e>
 8012214:	ac29      	add	r4, sp, #164	@ 0xa4
 8012216:	e7b1      	b.n	801217c <_vfprintf_r+0x110c>
 8012218:	9803      	ldr	r0, [sp, #12]
 801221a:	aa26      	add	r2, sp, #152	@ 0x98
 801221c:	4659      	mov	r1, fp
 801221e:	f000 f993 	bl	8012548 <__sprint_r>
 8012222:	2800      	cmp	r0, #0
 8012224:	f040 80eb 	bne.w	80123fe <_vfprintf_r+0x138e>
 8012228:	ac29      	add	r4, sp, #164	@ 0xa4
 801222a:	e7be      	b.n	80121aa <_vfprintf_r+0x113a>
 801222c:	2010      	movs	r0, #16
 801222e:	4402      	add	r2, r0
 8012230:	2b07      	cmp	r3, #7
 8012232:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8012236:	6060      	str	r0, [r4, #4]
 8012238:	dd08      	ble.n	801224c <_vfprintf_r+0x11dc>
 801223a:	9803      	ldr	r0, [sp, #12]
 801223c:	aa26      	add	r2, sp, #152	@ 0x98
 801223e:	4659      	mov	r1, fp
 8012240:	f000 f982 	bl	8012548 <__sprint_r>
 8012244:	2800      	cmp	r0, #0
 8012246:	f040 80da 	bne.w	80123fe <_vfprintf_r+0x138e>
 801224a:	a929      	add	r1, sp, #164	@ 0xa4
 801224c:	3e10      	subs	r6, #16
 801224e:	460c      	mov	r4, r1
 8012250:	e7b4      	b.n	80121bc <_vfprintf_r+0x114c>
 8012252:	460c      	mov	r4, r1
 8012254:	e7cb      	b.n	80121ee <_vfprintf_r+0x117e>
 8012256:	9803      	ldr	r0, [sp, #12]
 8012258:	aa26      	add	r2, sp, #152	@ 0x98
 801225a:	4659      	mov	r1, fp
 801225c:	f000 f974 	bl	8012548 <__sprint_r>
 8012260:	2800      	cmp	r0, #0
 8012262:	f040 80cc 	bne.w	80123fe <_vfprintf_r+0x138e>
 8012266:	ac29      	add	r4, sp, #164	@ 0xa4
 8012268:	e715      	b.n	8012096 <_vfprintf_r+0x1026>
 801226a:	9803      	ldr	r0, [sp, #12]
 801226c:	aa26      	add	r2, sp, #152	@ 0x98
 801226e:	4659      	mov	r1, fp
 8012270:	f000 f96a 	bl	8012548 <__sprint_r>
 8012274:	2800      	cmp	r0, #0
 8012276:	f040 80c2 	bne.w	80123fe <_vfprintf_r+0x138e>
 801227a:	ac29      	add	r4, sp, #164	@ 0xa4
 801227c:	e722      	b.n	80120c4 <_vfprintf_r+0x1054>
 801227e:	9904      	ldr	r1, [sp, #16]
 8012280:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012282:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8012284:	2901      	cmp	r1, #1
 8012286:	f103 0301 	add.w	r3, r3, #1
 801228a:	f102 0201 	add.w	r2, r2, #1
 801228e:	f104 0608 	add.w	r6, r4, #8
 8012292:	dc02      	bgt.n	801229a <_vfprintf_r+0x122a>
 8012294:	07ef      	lsls	r7, r5, #31
 8012296:	f140 8086 	bpl.w	80123a6 <_vfprintf_r+0x1336>
 801229a:	2101      	movs	r1, #1
 801229c:	2a07      	cmp	r2, #7
 801229e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80122a2:	f8c4 8000 	str.w	r8, [r4]
 80122a6:	6061      	str	r1, [r4, #4]
 80122a8:	dd08      	ble.n	80122bc <_vfprintf_r+0x124c>
 80122aa:	9803      	ldr	r0, [sp, #12]
 80122ac:	aa26      	add	r2, sp, #152	@ 0x98
 80122ae:	4659      	mov	r1, fp
 80122b0:	f000 f94a 	bl	8012548 <__sprint_r>
 80122b4:	2800      	cmp	r0, #0
 80122b6:	f040 80a2 	bne.w	80123fe <_vfprintf_r+0x138e>
 80122ba:	ae29      	add	r6, sp, #164	@ 0xa4
 80122bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80122be:	6033      	str	r3, [r6, #0]
 80122c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80122c2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80122c4:	6073      	str	r3, [r6, #4]
 80122c6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80122c8:	4413      	add	r3, r2
 80122ca:	9328      	str	r3, [sp, #160]	@ 0xa0
 80122cc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80122ce:	3301      	adds	r3, #1
 80122d0:	2b07      	cmp	r3, #7
 80122d2:	9327      	str	r3, [sp, #156]	@ 0x9c
 80122d4:	dc33      	bgt.n	801233e <_vfprintf_r+0x12ce>
 80122d6:	3608      	adds	r6, #8
 80122d8:	9b04      	ldr	r3, [sp, #16]
 80122da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80122de:	1e5c      	subs	r4, r3, #1
 80122e0:	2200      	movs	r2, #0
 80122e2:	2300      	movs	r3, #0
 80122e4:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 80122e8:	f7ee fc0e 	bl	8000b08 <__aeabi_dcmpeq>
 80122ec:	2800      	cmp	r0, #0
 80122ee:	d12f      	bne.n	8012350 <_vfprintf_r+0x12e0>
 80122f0:	f108 0201 	add.w	r2, r8, #1
 80122f4:	e9c6 2400 	strd	r2, r4, [r6]
 80122f8:	9a04      	ldr	r2, [sp, #16]
 80122fa:	f109 0301 	add.w	r3, r9, #1
 80122fe:	3f01      	subs	r7, #1
 8012300:	4417      	add	r7, r2
 8012302:	2b07      	cmp	r3, #7
 8012304:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 8012308:	dd56      	ble.n	80123b8 <_vfprintf_r+0x1348>
 801230a:	9803      	ldr	r0, [sp, #12]
 801230c:	aa26      	add	r2, sp, #152	@ 0x98
 801230e:	4659      	mov	r1, fp
 8012310:	f000 f91a 	bl	8012548 <__sprint_r>
 8012314:	2800      	cmp	r0, #0
 8012316:	d172      	bne.n	80123fe <_vfprintf_r+0x138e>
 8012318:	ae29      	add	r6, sp, #164	@ 0xa4
 801231a:	ab22      	add	r3, sp, #136	@ 0x88
 801231c:	6033      	str	r3, [r6, #0]
 801231e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8012320:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8012322:	6073      	str	r3, [r6, #4]
 8012324:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8012326:	4413      	add	r3, r2
 8012328:	9328      	str	r3, [sp, #160]	@ 0xa0
 801232a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801232c:	3301      	adds	r3, #1
 801232e:	2b07      	cmp	r3, #7
 8012330:	9327      	str	r3, [sp, #156]	@ 0x9c
 8012332:	f73f ada1 	bgt.w	8011e78 <_vfprintf_r+0xe08>
 8012336:	f106 0408 	add.w	r4, r6, #8
 801233a:	f7ff baef 	b.w	801191c <_vfprintf_r+0x8ac>
 801233e:	9803      	ldr	r0, [sp, #12]
 8012340:	aa26      	add	r2, sp, #152	@ 0x98
 8012342:	4659      	mov	r1, fp
 8012344:	f000 f900 	bl	8012548 <__sprint_r>
 8012348:	2800      	cmp	r0, #0
 801234a:	d158      	bne.n	80123fe <_vfprintf_r+0x138e>
 801234c:	ae29      	add	r6, sp, #164	@ 0xa4
 801234e:	e7c3      	b.n	80122d8 <_vfprintf_r+0x1268>
 8012350:	9b04      	ldr	r3, [sp, #16]
 8012352:	2b01      	cmp	r3, #1
 8012354:	dde1      	ble.n	801231a <_vfprintf_r+0x12aa>
 8012356:	4f0a      	ldr	r7, [pc, #40]	@ (8012380 <_vfprintf_r+0x1310>)
 8012358:	f04f 0810 	mov.w	r8, #16
 801235c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8012360:	2c10      	cmp	r4, #16
 8012362:	f103 0301 	add.w	r3, r3, #1
 8012366:	f106 0108 	add.w	r1, r6, #8
 801236a:	6037      	str	r7, [r6, #0]
 801236c:	dc0a      	bgt.n	8012384 <_vfprintf_r+0x1314>
 801236e:	6074      	str	r4, [r6, #4]
 8012370:	2b07      	cmp	r3, #7
 8012372:	4414      	add	r4, r2
 8012374:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 8012378:	dcc7      	bgt.n	801230a <_vfprintf_r+0x129a>
 801237a:	460e      	mov	r6, r1
 801237c:	e7cd      	b.n	801231a <_vfprintf_r+0x12aa>
 801237e:	bf00      	nop
 8012380:	08017ca3 	.word	0x08017ca3
 8012384:	3210      	adds	r2, #16
 8012386:	2b07      	cmp	r3, #7
 8012388:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801238c:	f8c6 8004 	str.w	r8, [r6, #4]
 8012390:	dd06      	ble.n	80123a0 <_vfprintf_r+0x1330>
 8012392:	9803      	ldr	r0, [sp, #12]
 8012394:	aa26      	add	r2, sp, #152	@ 0x98
 8012396:	4659      	mov	r1, fp
 8012398:	f000 f8d6 	bl	8012548 <__sprint_r>
 801239c:	bb78      	cbnz	r0, 80123fe <_vfprintf_r+0x138e>
 801239e:	a929      	add	r1, sp, #164	@ 0xa4
 80123a0:	3c10      	subs	r4, #16
 80123a2:	460e      	mov	r6, r1
 80123a4:	e7da      	b.n	801235c <_vfprintf_r+0x12ec>
 80123a6:	2101      	movs	r1, #1
 80123a8:	2a07      	cmp	r2, #7
 80123aa:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80123ae:	f8c4 8000 	str.w	r8, [r4]
 80123b2:	6061      	str	r1, [r4, #4]
 80123b4:	ddb1      	ble.n	801231a <_vfprintf_r+0x12aa>
 80123b6:	e7a8      	b.n	801230a <_vfprintf_r+0x129a>
 80123b8:	3608      	adds	r6, #8
 80123ba:	e7ae      	b.n	801231a <_vfprintf_r+0x12aa>
 80123bc:	460c      	mov	r4, r1
 80123be:	f7ff baad 	b.w	801191c <_vfprintf_r+0x8ac>
 80123c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123c4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80123c6:	1a9d      	subs	r5, r3, r2
 80123c8:	2d00      	cmp	r5, #0
 80123ca:	f77f aaaa 	ble.w	8011922 <_vfprintf_r+0x8b2>
 80123ce:	4e3d      	ldr	r6, [pc, #244]	@ (80124c4 <_vfprintf_r+0x1454>)
 80123d0:	2710      	movs	r7, #16
 80123d2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80123d6:	2d10      	cmp	r5, #16
 80123d8:	f103 0301 	add.w	r3, r3, #1
 80123dc:	6026      	str	r6, [r4, #0]
 80123de:	dc18      	bgt.n	8012412 <_vfprintf_r+0x13a2>
 80123e0:	6065      	str	r5, [r4, #4]
 80123e2:	2b07      	cmp	r3, #7
 80123e4:	4415      	add	r5, r2
 80123e6:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 80123ea:	f77f aa9a 	ble.w	8011922 <_vfprintf_r+0x8b2>
 80123ee:	9803      	ldr	r0, [sp, #12]
 80123f0:	aa26      	add	r2, sp, #152	@ 0x98
 80123f2:	4659      	mov	r1, fp
 80123f4:	f000 f8a8 	bl	8012548 <__sprint_r>
 80123f8:	2800      	cmp	r0, #0
 80123fa:	f43f aa92 	beq.w	8011922 <_vfprintf_r+0x8b2>
 80123fe:	f1ba 0f00 	cmp.w	sl, #0
 8012402:	f43f a892 	beq.w	801152a <_vfprintf_r+0x4ba>
 8012406:	9803      	ldr	r0, [sp, #12]
 8012408:	4651      	mov	r1, sl
 801240a:	f7fe fb29 	bl	8010a60 <_free_r>
 801240e:	f7ff b88c 	b.w	801152a <_vfprintf_r+0x4ba>
 8012412:	3210      	adds	r2, #16
 8012414:	2b07      	cmp	r3, #7
 8012416:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801241a:	6067      	str	r7, [r4, #4]
 801241c:	dc02      	bgt.n	8012424 <_vfprintf_r+0x13b4>
 801241e:	3408      	adds	r4, #8
 8012420:	3d10      	subs	r5, #16
 8012422:	e7d6      	b.n	80123d2 <_vfprintf_r+0x1362>
 8012424:	9803      	ldr	r0, [sp, #12]
 8012426:	aa26      	add	r2, sp, #152	@ 0x98
 8012428:	4659      	mov	r1, fp
 801242a:	f000 f88d 	bl	8012548 <__sprint_r>
 801242e:	2800      	cmp	r0, #0
 8012430:	d1e5      	bne.n	80123fe <_vfprintf_r+0x138e>
 8012432:	ac29      	add	r4, sp, #164	@ 0xa4
 8012434:	e7f4      	b.n	8012420 <_vfprintf_r+0x13b0>
 8012436:	9803      	ldr	r0, [sp, #12]
 8012438:	4651      	mov	r1, sl
 801243a:	f7fe fb11 	bl	8010a60 <_free_r>
 801243e:	f7ff ba88 	b.w	8011952 <_vfprintf_r+0x8e2>
 8012442:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8012444:	b91b      	cbnz	r3, 801244e <_vfprintf_r+0x13de>
 8012446:	2300      	movs	r3, #0
 8012448:	9327      	str	r3, [sp, #156]	@ 0x9c
 801244a:	f7ff b86e 	b.w	801152a <_vfprintf_r+0x4ba>
 801244e:	9803      	ldr	r0, [sp, #12]
 8012450:	aa26      	add	r2, sp, #152	@ 0x98
 8012452:	4659      	mov	r1, fp
 8012454:	f000 f878 	bl	8012548 <__sprint_r>
 8012458:	2800      	cmp	r0, #0
 801245a:	d0f4      	beq.n	8012446 <_vfprintf_r+0x13d6>
 801245c:	f7ff b865 	b.w	801152a <_vfprintf_r+0x4ba>
 8012460:	ea56 0207 	orrs.w	r2, r6, r7
 8012464:	9508      	str	r5, [sp, #32]
 8012466:	f43f ab75 	beq.w	8011b54 <_vfprintf_r+0xae4>
 801246a:	2b01      	cmp	r3, #1
 801246c:	f43f abf6 	beq.w	8011c5c <_vfprintf_r+0xbec>
 8012470:	2b02      	cmp	r3, #2
 8012472:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8012476:	f43f ac3a 	beq.w	8011cee <_vfprintf_r+0xc7e>
 801247a:	f006 0307 	and.w	r3, r6, #7
 801247e:	08f6      	lsrs	r6, r6, #3
 8012480:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 8012484:	08ff      	lsrs	r7, r7, #3
 8012486:	3330      	adds	r3, #48	@ 0x30
 8012488:	ea56 0107 	orrs.w	r1, r6, r7
 801248c:	4642      	mov	r2, r8
 801248e:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8012492:	d1f2      	bne.n	801247a <_vfprintf_r+0x140a>
 8012494:	9908      	ldr	r1, [sp, #32]
 8012496:	07ce      	lsls	r6, r1, #31
 8012498:	d506      	bpl.n	80124a8 <_vfprintf_r+0x1438>
 801249a:	2b30      	cmp	r3, #48	@ 0x30
 801249c:	d004      	beq.n	80124a8 <_vfprintf_r+0x1438>
 801249e:	2330      	movs	r3, #48	@ 0x30
 80124a0:	f808 3c01 	strb.w	r3, [r8, #-1]
 80124a4:	f1a2 0802 	sub.w	r8, r2, #2
 80124a8:	ab52      	add	r3, sp, #328	@ 0x148
 80124aa:	9d08      	ldr	r5, [sp, #32]
 80124ac:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 80124b0:	f04f 0a00 	mov.w	sl, #0
 80124b4:	eba3 0908 	sub.w	r9, r3, r8
 80124b8:	4657      	mov	r7, sl
 80124ba:	f8cd a020 	str.w	sl, [sp, #32]
 80124be:	4656      	mov	r6, sl
 80124c0:	f7ff b978 	b.w	80117b4 <_vfprintf_r+0x744>
 80124c4:	08017cb3 	.word	0x08017cb3

080124c8 <__sbprintf>:
 80124c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124ca:	461f      	mov	r7, r3
 80124cc:	898b      	ldrh	r3, [r1, #12]
 80124ce:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 80124d2:	f023 0302 	bic.w	r3, r3, #2
 80124d6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80124da:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80124dc:	9319      	str	r3, [sp, #100]	@ 0x64
 80124de:	89cb      	ldrh	r3, [r1, #14]
 80124e0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80124e4:	69cb      	ldr	r3, [r1, #28]
 80124e6:	9307      	str	r3, [sp, #28]
 80124e8:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80124ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80124ec:	ab1a      	add	r3, sp, #104	@ 0x68
 80124ee:	9300      	str	r3, [sp, #0]
 80124f0:	9304      	str	r3, [sp, #16]
 80124f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80124f6:	4615      	mov	r5, r2
 80124f8:	4606      	mov	r6, r0
 80124fa:	9302      	str	r3, [sp, #8]
 80124fc:	9305      	str	r3, [sp, #20]
 80124fe:	a816      	add	r0, sp, #88	@ 0x58
 8012500:	2300      	movs	r3, #0
 8012502:	460c      	mov	r4, r1
 8012504:	9306      	str	r3, [sp, #24]
 8012506:	f7fe fa33 	bl	8010970 <__retarget_lock_init_recursive>
 801250a:	462a      	mov	r2, r5
 801250c:	463b      	mov	r3, r7
 801250e:	4669      	mov	r1, sp
 8012510:	4630      	mov	r0, r6
 8012512:	f7fe fdad 	bl	8011070 <_vfprintf_r>
 8012516:	1e05      	subs	r5, r0, #0
 8012518:	db07      	blt.n	801252a <__sbprintf+0x62>
 801251a:	4669      	mov	r1, sp
 801251c:	4630      	mov	r0, r6
 801251e:	f000 fdeb 	bl	80130f8 <_fflush_r>
 8012522:	2800      	cmp	r0, #0
 8012524:	bf18      	it	ne
 8012526:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 801252a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801252e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8012530:	065b      	lsls	r3, r3, #25
 8012532:	bf42      	ittt	mi
 8012534:	89a3      	ldrhmi	r3, [r4, #12]
 8012536:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 801253a:	81a3      	strhmi	r3, [r4, #12]
 801253c:	f7fe fa19 	bl	8010972 <__retarget_lock_close_recursive>
 8012540:	4628      	mov	r0, r5
 8012542:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8012546:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012548 <__sprint_r>:
 8012548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801254c:	6893      	ldr	r3, [r2, #8]
 801254e:	4680      	mov	r8, r0
 8012550:	460e      	mov	r6, r1
 8012552:	4614      	mov	r4, r2
 8012554:	b343      	cbz	r3, 80125a8 <__sprint_r+0x60>
 8012556:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8012558:	049d      	lsls	r5, r3, #18
 801255a:	d522      	bpl.n	80125a2 <__sprint_r+0x5a>
 801255c:	6815      	ldr	r5, [r2, #0]
 801255e:	68a0      	ldr	r0, [r4, #8]
 8012560:	3508      	adds	r5, #8
 8012562:	b928      	cbnz	r0, 8012570 <__sprint_r+0x28>
 8012564:	2300      	movs	r3, #0
 8012566:	60a3      	str	r3, [r4, #8]
 8012568:	2300      	movs	r3, #0
 801256a:	6063      	str	r3, [r4, #4]
 801256c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012570:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 8012574:	f04f 0900 	mov.w	r9, #0
 8012578:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 801257c:	45ca      	cmp	sl, r9
 801257e:	dc05      	bgt.n	801258c <__sprint_r+0x44>
 8012580:	68a3      	ldr	r3, [r4, #8]
 8012582:	f027 0703 	bic.w	r7, r7, #3
 8012586:	1bdb      	subs	r3, r3, r7
 8012588:	60a3      	str	r3, [r4, #8]
 801258a:	e7e8      	b.n	801255e <__sprint_r+0x16>
 801258c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8012590:	4632      	mov	r2, r6
 8012592:	4640      	mov	r0, r8
 8012594:	f000 ffb9 	bl	801350a <_fputwc_r>
 8012598:	1c43      	adds	r3, r0, #1
 801259a:	d0e3      	beq.n	8012564 <__sprint_r+0x1c>
 801259c:	f109 0901 	add.w	r9, r9, #1
 80125a0:	e7ec      	b.n	801257c <__sprint_r+0x34>
 80125a2:	f000 fdcf 	bl	8013144 <__sfvwrite_r>
 80125a6:	e7dd      	b.n	8012564 <__sprint_r+0x1c>
 80125a8:	4618      	mov	r0, r3
 80125aa:	e7dd      	b.n	8012568 <__sprint_r+0x20>

080125ac <_vfiprintf_r>:
 80125ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125b0:	b0bb      	sub	sp, #236	@ 0xec
 80125b2:	460f      	mov	r7, r1
 80125b4:	4693      	mov	fp, r2
 80125b6:	461c      	mov	r4, r3
 80125b8:	461d      	mov	r5, r3
 80125ba:	9000      	str	r0, [sp, #0]
 80125bc:	b118      	cbz	r0, 80125c6 <_vfiprintf_r+0x1a>
 80125be:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80125c0:	b90b      	cbnz	r3, 80125c6 <_vfiprintf_r+0x1a>
 80125c2:	f7fe f8a7 	bl	8010714 <__sinit>
 80125c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80125c8:	07db      	lsls	r3, r3, #31
 80125ca:	d405      	bmi.n	80125d8 <_vfiprintf_r+0x2c>
 80125cc:	89bb      	ldrh	r3, [r7, #12]
 80125ce:	059e      	lsls	r6, r3, #22
 80125d0:	d402      	bmi.n	80125d8 <_vfiprintf_r+0x2c>
 80125d2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80125d4:	f7fe f9ce 	bl	8010974 <__retarget_lock_acquire_recursive>
 80125d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80125dc:	0498      	lsls	r0, r3, #18
 80125de:	d406      	bmi.n	80125ee <_vfiprintf_r+0x42>
 80125e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80125e4:	81bb      	strh	r3, [r7, #12]
 80125e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80125e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80125ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80125ee:	89bb      	ldrh	r3, [r7, #12]
 80125f0:	0719      	lsls	r1, r3, #28
 80125f2:	d501      	bpl.n	80125f8 <_vfiprintf_r+0x4c>
 80125f4:	693b      	ldr	r3, [r7, #16]
 80125f6:	b9ab      	cbnz	r3, 8012624 <_vfiprintf_r+0x78>
 80125f8:	9800      	ldr	r0, [sp, #0]
 80125fa:	4639      	mov	r1, r7
 80125fc:	f000 feee 	bl	80133dc <__swsetup_r>
 8012600:	b180      	cbz	r0, 8012624 <_vfiprintf_r+0x78>
 8012602:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012604:	07da      	lsls	r2, r3, #31
 8012606:	d506      	bpl.n	8012616 <_vfiprintf_r+0x6a>
 8012608:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801260c:	9303      	str	r3, [sp, #12]
 801260e:	9803      	ldr	r0, [sp, #12]
 8012610:	b03b      	add	sp, #236	@ 0xec
 8012612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012616:	89bb      	ldrh	r3, [r7, #12]
 8012618:	059b      	lsls	r3, r3, #22
 801261a:	d4f5      	bmi.n	8012608 <_vfiprintf_r+0x5c>
 801261c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801261e:	f7fe f9aa 	bl	8010976 <__retarget_lock_release_recursive>
 8012622:	e7f1      	b.n	8012608 <_vfiprintf_r+0x5c>
 8012624:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012628:	f003 021a 	and.w	r2, r3, #26
 801262c:	2a0a      	cmp	r2, #10
 801262e:	d114      	bne.n	801265a <_vfiprintf_r+0xae>
 8012630:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012634:	2a00      	cmp	r2, #0
 8012636:	db10      	blt.n	801265a <_vfiprintf_r+0xae>
 8012638:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801263a:	07d6      	lsls	r6, r2, #31
 801263c:	d404      	bmi.n	8012648 <_vfiprintf_r+0x9c>
 801263e:	059d      	lsls	r5, r3, #22
 8012640:	d402      	bmi.n	8012648 <_vfiprintf_r+0x9c>
 8012642:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8012644:	f7fe f997 	bl	8010976 <__retarget_lock_release_recursive>
 8012648:	9800      	ldr	r0, [sp, #0]
 801264a:	4623      	mov	r3, r4
 801264c:	465a      	mov	r2, fp
 801264e:	4639      	mov	r1, r7
 8012650:	b03b      	add	sp, #236	@ 0xec
 8012652:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012656:	f000 bc31 	b.w	8012ebc <__sbprintf>
 801265a:	2300      	movs	r3, #0
 801265c:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8012660:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8012664:	ae11      	add	r6, sp, #68	@ 0x44
 8012666:	960e      	str	r6, [sp, #56]	@ 0x38
 8012668:	9307      	str	r3, [sp, #28]
 801266a:	9309      	str	r3, [sp, #36]	@ 0x24
 801266c:	9303      	str	r3, [sp, #12]
 801266e:	465b      	mov	r3, fp
 8012670:	461c      	mov	r4, r3
 8012672:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012676:	b10a      	cbz	r2, 801267c <_vfiprintf_r+0xd0>
 8012678:	2a25      	cmp	r2, #37	@ 0x25
 801267a:	d1f9      	bne.n	8012670 <_vfiprintf_r+0xc4>
 801267c:	ebb4 080b 	subs.w	r8, r4, fp
 8012680:	d00d      	beq.n	801269e <_vfiprintf_r+0xf2>
 8012682:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012684:	4443      	add	r3, r8
 8012686:	9310      	str	r3, [sp, #64]	@ 0x40
 8012688:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801268a:	3301      	adds	r3, #1
 801268c:	2b07      	cmp	r3, #7
 801268e:	e9c6 b800 	strd	fp, r8, [r6]
 8012692:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012694:	dc75      	bgt.n	8012782 <_vfiprintf_r+0x1d6>
 8012696:	3608      	adds	r6, #8
 8012698:	9b03      	ldr	r3, [sp, #12]
 801269a:	4443      	add	r3, r8
 801269c:	9303      	str	r3, [sp, #12]
 801269e:	7823      	ldrb	r3, [r4, #0]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	f000 83cd 	beq.w	8012e40 <_vfiprintf_r+0x894>
 80126a6:	2300      	movs	r3, #0
 80126a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80126ac:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80126b0:	3401      	adds	r4, #1
 80126b2:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80126b6:	469a      	mov	sl, r3
 80126b8:	46a3      	mov	fp, r4
 80126ba:	f81b 3b01 	ldrb.w	r3, [fp], #1
 80126be:	f1a3 0220 	sub.w	r2, r3, #32
 80126c2:	2a5a      	cmp	r2, #90	@ 0x5a
 80126c4:	f200 8316 	bhi.w	8012cf4 <_vfiprintf_r+0x748>
 80126c8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80126cc:	0314009a 	.word	0x0314009a
 80126d0:	00a20314 	.word	0x00a20314
 80126d4:	03140314 	.word	0x03140314
 80126d8:	00820314 	.word	0x00820314
 80126dc:	03140314 	.word	0x03140314
 80126e0:	00af00a5 	.word	0x00af00a5
 80126e4:	00ac0314 	.word	0x00ac0314
 80126e8:	031400b1 	.word	0x031400b1
 80126ec:	00d000cd 	.word	0x00d000cd
 80126f0:	00d000d0 	.word	0x00d000d0
 80126f4:	00d000d0 	.word	0x00d000d0
 80126f8:	00d000d0 	.word	0x00d000d0
 80126fc:	00d000d0 	.word	0x00d000d0
 8012700:	03140314 	.word	0x03140314
 8012704:	03140314 	.word	0x03140314
 8012708:	03140314 	.word	0x03140314
 801270c:	03140314 	.word	0x03140314
 8012710:	00f70314 	.word	0x00f70314
 8012714:	03140104 	.word	0x03140104
 8012718:	03140314 	.word	0x03140314
 801271c:	03140314 	.word	0x03140314
 8012720:	03140314 	.word	0x03140314
 8012724:	03140314 	.word	0x03140314
 8012728:	01520314 	.word	0x01520314
 801272c:	03140314 	.word	0x03140314
 8012730:	019a0314 	.word	0x019a0314
 8012734:	027a0314 	.word	0x027a0314
 8012738:	03140314 	.word	0x03140314
 801273c:	0314029a 	.word	0x0314029a
 8012740:	03140314 	.word	0x03140314
 8012744:	03140314 	.word	0x03140314
 8012748:	03140314 	.word	0x03140314
 801274c:	03140314 	.word	0x03140314
 8012750:	00f70314 	.word	0x00f70314
 8012754:	03140106 	.word	0x03140106
 8012758:	03140314 	.word	0x03140314
 801275c:	010600e0 	.word	0x010600e0
 8012760:	031400f1 	.word	0x031400f1
 8012764:	031400eb 	.word	0x031400eb
 8012768:	01540132 	.word	0x01540132
 801276c:	00f10189 	.word	0x00f10189
 8012770:	019a0314 	.word	0x019a0314
 8012774:	027c0098 	.word	0x027c0098
 8012778:	03140314 	.word	0x03140314
 801277c:	03140065 	.word	0x03140065
 8012780:	0098      	.short	0x0098
 8012782:	9800      	ldr	r0, [sp, #0]
 8012784:	aa0e      	add	r2, sp, #56	@ 0x38
 8012786:	4639      	mov	r1, r7
 8012788:	f7ff fede 	bl	8012548 <__sprint_r>
 801278c:	2800      	cmp	r0, #0
 801278e:	f040 8336 	bne.w	8012dfe <_vfiprintf_r+0x852>
 8012792:	ae11      	add	r6, sp, #68	@ 0x44
 8012794:	e780      	b.n	8012698 <_vfiprintf_r+0xec>
 8012796:	4a99      	ldr	r2, [pc, #612]	@ (80129fc <_vfiprintf_r+0x450>)
 8012798:	9205      	str	r2, [sp, #20]
 801279a:	f01a 0220 	ands.w	r2, sl, #32
 801279e:	f000 8231 	beq.w	8012c04 <_vfiprintf_r+0x658>
 80127a2:	3507      	adds	r5, #7
 80127a4:	f025 0507 	bic.w	r5, r5, #7
 80127a8:	46a8      	mov	r8, r5
 80127aa:	686d      	ldr	r5, [r5, #4]
 80127ac:	f858 4b08 	ldr.w	r4, [r8], #8
 80127b0:	f01a 0f01 	tst.w	sl, #1
 80127b4:	d009      	beq.n	80127ca <_vfiprintf_r+0x21e>
 80127b6:	ea54 0205 	orrs.w	r2, r4, r5
 80127ba:	bf1f      	itttt	ne
 80127bc:	2230      	movne	r2, #48	@ 0x30
 80127be:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 80127c2:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 80127c6:	f04a 0a02 	orrne.w	sl, sl, #2
 80127ca:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 80127ce:	e112      	b.n	80129f6 <_vfiprintf_r+0x44a>
 80127d0:	9800      	ldr	r0, [sp, #0]
 80127d2:	f000 fedd 	bl	8013590 <_localeconv_r>
 80127d6:	6843      	ldr	r3, [r0, #4]
 80127d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80127da:	4618      	mov	r0, r3
 80127dc:	f7ed fd18 	bl	8000210 <strlen>
 80127e0:	9007      	str	r0, [sp, #28]
 80127e2:	9800      	ldr	r0, [sp, #0]
 80127e4:	f000 fed4 	bl	8013590 <_localeconv_r>
 80127e8:	6883      	ldr	r3, [r0, #8]
 80127ea:	9306      	str	r3, [sp, #24]
 80127ec:	9b07      	ldr	r3, [sp, #28]
 80127ee:	b12b      	cbz	r3, 80127fc <_vfiprintf_r+0x250>
 80127f0:	9b06      	ldr	r3, [sp, #24]
 80127f2:	b11b      	cbz	r3, 80127fc <_vfiprintf_r+0x250>
 80127f4:	781b      	ldrb	r3, [r3, #0]
 80127f6:	b10b      	cbz	r3, 80127fc <_vfiprintf_r+0x250>
 80127f8:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 80127fc:	465c      	mov	r4, fp
 80127fe:	e75b      	b.n	80126b8 <_vfiprintf_r+0x10c>
 8012800:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8012804:	2b00      	cmp	r3, #0
 8012806:	d1f9      	bne.n	80127fc <_vfiprintf_r+0x250>
 8012808:	2320      	movs	r3, #32
 801280a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801280e:	e7f5      	b.n	80127fc <_vfiprintf_r+0x250>
 8012810:	f04a 0a01 	orr.w	sl, sl, #1
 8012814:	e7f2      	b.n	80127fc <_vfiprintf_r+0x250>
 8012816:	f855 3b04 	ldr.w	r3, [r5], #4
 801281a:	9302      	str	r3, [sp, #8]
 801281c:	2b00      	cmp	r3, #0
 801281e:	daed      	bge.n	80127fc <_vfiprintf_r+0x250>
 8012820:	425b      	negs	r3, r3
 8012822:	9302      	str	r3, [sp, #8]
 8012824:	f04a 0a04 	orr.w	sl, sl, #4
 8012828:	e7e8      	b.n	80127fc <_vfiprintf_r+0x250>
 801282a:	232b      	movs	r3, #43	@ 0x2b
 801282c:	e7ed      	b.n	801280a <_vfiprintf_r+0x25e>
 801282e:	465a      	mov	r2, fp
 8012830:	f812 3b01 	ldrb.w	r3, [r2], #1
 8012834:	2b2a      	cmp	r3, #42	@ 0x2a
 8012836:	d112      	bne.n	801285e <_vfiprintf_r+0x2b2>
 8012838:	f855 3b04 	ldr.w	r3, [r5], #4
 801283c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012840:	9301      	str	r3, [sp, #4]
 8012842:	4693      	mov	fp, r2
 8012844:	e7da      	b.n	80127fc <_vfiprintf_r+0x250>
 8012846:	9b01      	ldr	r3, [sp, #4]
 8012848:	fb00 1303 	mla	r3, r0, r3, r1
 801284c:	9301      	str	r3, [sp, #4]
 801284e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8012852:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8012856:	2909      	cmp	r1, #9
 8012858:	d9f5      	bls.n	8012846 <_vfiprintf_r+0x29a>
 801285a:	4693      	mov	fp, r2
 801285c:	e72f      	b.n	80126be <_vfiprintf_r+0x112>
 801285e:	2100      	movs	r1, #0
 8012860:	9101      	str	r1, [sp, #4]
 8012862:	200a      	movs	r0, #10
 8012864:	e7f5      	b.n	8012852 <_vfiprintf_r+0x2a6>
 8012866:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 801286a:	e7c7      	b.n	80127fc <_vfiprintf_r+0x250>
 801286c:	2100      	movs	r1, #0
 801286e:	465a      	mov	r2, fp
 8012870:	9102      	str	r1, [sp, #8]
 8012872:	200a      	movs	r0, #10
 8012874:	9902      	ldr	r1, [sp, #8]
 8012876:	3b30      	subs	r3, #48	@ 0x30
 8012878:	fb00 3301 	mla	r3, r0, r1, r3
 801287c:	9302      	str	r3, [sp, #8]
 801287e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8012882:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8012886:	2909      	cmp	r1, #9
 8012888:	d9f4      	bls.n	8012874 <_vfiprintf_r+0x2c8>
 801288a:	e7e6      	b.n	801285a <_vfiprintf_r+0x2ae>
 801288c:	f89b 3000 	ldrb.w	r3, [fp]
 8012890:	2b68      	cmp	r3, #104	@ 0x68
 8012892:	bf06      	itte	eq
 8012894:	f10b 0b01 	addeq.w	fp, fp, #1
 8012898:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 801289c:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 80128a0:	e7ac      	b.n	80127fc <_vfiprintf_r+0x250>
 80128a2:	f89b 3000 	ldrb.w	r3, [fp]
 80128a6:	2b6c      	cmp	r3, #108	@ 0x6c
 80128a8:	d104      	bne.n	80128b4 <_vfiprintf_r+0x308>
 80128aa:	f10b 0b01 	add.w	fp, fp, #1
 80128ae:	f04a 0a20 	orr.w	sl, sl, #32
 80128b2:	e7a3      	b.n	80127fc <_vfiprintf_r+0x250>
 80128b4:	f04a 0a10 	orr.w	sl, sl, #16
 80128b8:	e7a0      	b.n	80127fc <_vfiprintf_r+0x250>
 80128ba:	46a8      	mov	r8, r5
 80128bc:	2400      	movs	r4, #0
 80128be:	f858 3b04 	ldr.w	r3, [r8], #4
 80128c2:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 80128c6:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 80128ca:	2301      	movs	r3, #1
 80128cc:	9301      	str	r3, [sp, #4]
 80128ce:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 80128d2:	e0ab      	b.n	8012a2c <_vfiprintf_r+0x480>
 80128d4:	f04a 0a10 	orr.w	sl, sl, #16
 80128d8:	f01a 0f20 	tst.w	sl, #32
 80128dc:	d011      	beq.n	8012902 <_vfiprintf_r+0x356>
 80128de:	3507      	adds	r5, #7
 80128e0:	f025 0507 	bic.w	r5, r5, #7
 80128e4:	46a8      	mov	r8, r5
 80128e6:	686d      	ldr	r5, [r5, #4]
 80128e8:	f858 4b08 	ldr.w	r4, [r8], #8
 80128ec:	2d00      	cmp	r5, #0
 80128ee:	da06      	bge.n	80128fe <_vfiprintf_r+0x352>
 80128f0:	4264      	negs	r4, r4
 80128f2:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 80128f6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80128fa:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80128fe:	2301      	movs	r3, #1
 8012900:	e048      	b.n	8012994 <_vfiprintf_r+0x3e8>
 8012902:	46a8      	mov	r8, r5
 8012904:	f01a 0f10 	tst.w	sl, #16
 8012908:	f858 5b04 	ldr.w	r5, [r8], #4
 801290c:	d002      	beq.n	8012914 <_vfiprintf_r+0x368>
 801290e:	462c      	mov	r4, r5
 8012910:	17ed      	asrs	r5, r5, #31
 8012912:	e7eb      	b.n	80128ec <_vfiprintf_r+0x340>
 8012914:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8012918:	d003      	beq.n	8012922 <_vfiprintf_r+0x376>
 801291a:	b22c      	sxth	r4, r5
 801291c:	f345 35c0 	sbfx	r5, r5, #15, #1
 8012920:	e7e4      	b.n	80128ec <_vfiprintf_r+0x340>
 8012922:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8012926:	d0f2      	beq.n	801290e <_vfiprintf_r+0x362>
 8012928:	b26c      	sxtb	r4, r5
 801292a:	f345 15c0 	sbfx	r5, r5, #7, #1
 801292e:	e7dd      	b.n	80128ec <_vfiprintf_r+0x340>
 8012930:	f01a 0f20 	tst.w	sl, #32
 8012934:	d007      	beq.n	8012946 <_vfiprintf_r+0x39a>
 8012936:	9a03      	ldr	r2, [sp, #12]
 8012938:	682b      	ldr	r3, [r5, #0]
 801293a:	9903      	ldr	r1, [sp, #12]
 801293c:	17d2      	asrs	r2, r2, #31
 801293e:	e9c3 1200 	strd	r1, r2, [r3]
 8012942:	3504      	adds	r5, #4
 8012944:	e693      	b.n	801266e <_vfiprintf_r+0xc2>
 8012946:	f01a 0f10 	tst.w	sl, #16
 801294a:	d003      	beq.n	8012954 <_vfiprintf_r+0x3a8>
 801294c:	682b      	ldr	r3, [r5, #0]
 801294e:	9a03      	ldr	r2, [sp, #12]
 8012950:	601a      	str	r2, [r3, #0]
 8012952:	e7f6      	b.n	8012942 <_vfiprintf_r+0x396>
 8012954:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8012958:	d003      	beq.n	8012962 <_vfiprintf_r+0x3b6>
 801295a:	682b      	ldr	r3, [r5, #0]
 801295c:	9a03      	ldr	r2, [sp, #12]
 801295e:	801a      	strh	r2, [r3, #0]
 8012960:	e7ef      	b.n	8012942 <_vfiprintf_r+0x396>
 8012962:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8012966:	d0f1      	beq.n	801294c <_vfiprintf_r+0x3a0>
 8012968:	682b      	ldr	r3, [r5, #0]
 801296a:	9a03      	ldr	r2, [sp, #12]
 801296c:	701a      	strb	r2, [r3, #0]
 801296e:	e7e8      	b.n	8012942 <_vfiprintf_r+0x396>
 8012970:	f04a 0a10 	orr.w	sl, sl, #16
 8012974:	f01a 0320 	ands.w	r3, sl, #32
 8012978:	d01f      	beq.n	80129ba <_vfiprintf_r+0x40e>
 801297a:	3507      	adds	r5, #7
 801297c:	f025 0507 	bic.w	r5, r5, #7
 8012980:	46a8      	mov	r8, r5
 8012982:	686d      	ldr	r5, [r5, #4]
 8012984:	f858 4b08 	ldr.w	r4, [r8], #8
 8012988:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 801298c:	2300      	movs	r3, #0
 801298e:	2200      	movs	r2, #0
 8012990:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8012994:	9a01      	ldr	r2, [sp, #4]
 8012996:	3201      	adds	r2, #1
 8012998:	f000 825f 	beq.w	8012e5a <_vfiprintf_r+0x8ae>
 801299c:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 80129a0:	9204      	str	r2, [sp, #16]
 80129a2:	ea54 0205 	orrs.w	r2, r4, r5
 80129a6:	f040 825e 	bne.w	8012e66 <_vfiprintf_r+0x8ba>
 80129aa:	9a01      	ldr	r2, [sp, #4]
 80129ac:	2a00      	cmp	r2, #0
 80129ae:	f000 8198 	beq.w	8012ce2 <_vfiprintf_r+0x736>
 80129b2:	2b01      	cmp	r3, #1
 80129b4:	f040 825a 	bne.w	8012e6c <_vfiprintf_r+0x8c0>
 80129b8:	e13b      	b.n	8012c32 <_vfiprintf_r+0x686>
 80129ba:	46a8      	mov	r8, r5
 80129bc:	f01a 0510 	ands.w	r5, sl, #16
 80129c0:	f858 4b04 	ldr.w	r4, [r8], #4
 80129c4:	d001      	beq.n	80129ca <_vfiprintf_r+0x41e>
 80129c6:	461d      	mov	r5, r3
 80129c8:	e7de      	b.n	8012988 <_vfiprintf_r+0x3dc>
 80129ca:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 80129ce:	d001      	beq.n	80129d4 <_vfiprintf_r+0x428>
 80129d0:	b2a4      	uxth	r4, r4
 80129d2:	e7d9      	b.n	8012988 <_vfiprintf_r+0x3dc>
 80129d4:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80129d8:	d0d6      	beq.n	8012988 <_vfiprintf_r+0x3dc>
 80129da:	b2e4      	uxtb	r4, r4
 80129dc:	e7f3      	b.n	80129c6 <_vfiprintf_r+0x41a>
 80129de:	46a8      	mov	r8, r5
 80129e0:	f647 0330 	movw	r3, #30768	@ 0x7830
 80129e4:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80129e8:	f858 4b04 	ldr.w	r4, [r8], #4
 80129ec:	4b03      	ldr	r3, [pc, #12]	@ (80129fc <_vfiprintf_r+0x450>)
 80129ee:	9305      	str	r3, [sp, #20]
 80129f0:	2500      	movs	r5, #0
 80129f2:	f04a 0a02 	orr.w	sl, sl, #2
 80129f6:	2302      	movs	r3, #2
 80129f8:	e7c9      	b.n	801298e <_vfiprintf_r+0x3e2>
 80129fa:	bf00      	nop
 80129fc:	08017c7f 	.word	0x08017c7f
 8012a00:	9b01      	ldr	r3, [sp, #4]
 8012a02:	46a8      	mov	r8, r5
 8012a04:	1c5c      	adds	r4, r3, #1
 8012a06:	f04f 0500 	mov.w	r5, #0
 8012a0a:	f858 9b04 	ldr.w	r9, [r8], #4
 8012a0e:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8012a12:	f000 80d0 	beq.w	8012bb6 <_vfiprintf_r+0x60a>
 8012a16:	461a      	mov	r2, r3
 8012a18:	4629      	mov	r1, r5
 8012a1a:	4648      	mov	r0, r9
 8012a1c:	f7ed fc00 	bl	8000220 <memchr>
 8012a20:	4604      	mov	r4, r0
 8012a22:	b118      	cbz	r0, 8012a2c <_vfiprintf_r+0x480>
 8012a24:	eba0 0309 	sub.w	r3, r0, r9
 8012a28:	9301      	str	r3, [sp, #4]
 8012a2a:	462c      	mov	r4, r5
 8012a2c:	9b01      	ldr	r3, [sp, #4]
 8012a2e:	42a3      	cmp	r3, r4
 8012a30:	bfb8      	it	lt
 8012a32:	4623      	movlt	r3, r4
 8012a34:	9304      	str	r3, [sp, #16]
 8012a36:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8012a3a:	b113      	cbz	r3, 8012a42 <_vfiprintf_r+0x496>
 8012a3c:	9b04      	ldr	r3, [sp, #16]
 8012a3e:	3301      	adds	r3, #1
 8012a40:	9304      	str	r3, [sp, #16]
 8012a42:	f01a 0302 	ands.w	r3, sl, #2
 8012a46:	9308      	str	r3, [sp, #32]
 8012a48:	bf1e      	ittt	ne
 8012a4a:	9b04      	ldrne	r3, [sp, #16]
 8012a4c:	3302      	addne	r3, #2
 8012a4e:	9304      	strne	r3, [sp, #16]
 8012a50:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 8012a54:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a56:	d11f      	bne.n	8012a98 <_vfiprintf_r+0x4ec>
 8012a58:	9b02      	ldr	r3, [sp, #8]
 8012a5a:	9a04      	ldr	r2, [sp, #16]
 8012a5c:	1a9d      	subs	r5, r3, r2
 8012a5e:	2d00      	cmp	r5, #0
 8012a60:	dd1a      	ble.n	8012a98 <_vfiprintf_r+0x4ec>
 8012a62:	4ba9      	ldr	r3, [pc, #676]	@ (8012d08 <_vfiprintf_r+0x75c>)
 8012a64:	6033      	str	r3, [r6, #0]
 8012a66:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8012a6a:	2d10      	cmp	r5, #16
 8012a6c:	f102 0201 	add.w	r2, r2, #1
 8012a70:	f106 0008 	add.w	r0, r6, #8
 8012a74:	f300 814e 	bgt.w	8012d14 <_vfiprintf_r+0x768>
 8012a78:	6075      	str	r5, [r6, #4]
 8012a7a:	2a07      	cmp	r2, #7
 8012a7c:	4465      	add	r5, ip
 8012a7e:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8012a82:	f340 815a 	ble.w	8012d3a <_vfiprintf_r+0x78e>
 8012a86:	9800      	ldr	r0, [sp, #0]
 8012a88:	aa0e      	add	r2, sp, #56	@ 0x38
 8012a8a:	4639      	mov	r1, r7
 8012a8c:	f7ff fd5c 	bl	8012548 <__sprint_r>
 8012a90:	2800      	cmp	r0, #0
 8012a92:	f040 81b4 	bne.w	8012dfe <_vfiprintf_r+0x852>
 8012a96:	ae11      	add	r6, sp, #68	@ 0x44
 8012a98:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8012a9c:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8012aa0:	b161      	cbz	r1, 8012abc <_vfiprintf_r+0x510>
 8012aa2:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8012aa6:	3301      	adds	r3, #1
 8012aa8:	6031      	str	r1, [r6, #0]
 8012aaa:	2101      	movs	r1, #1
 8012aac:	440a      	add	r2, r1
 8012aae:	2b07      	cmp	r3, #7
 8012ab0:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8012ab4:	6071      	str	r1, [r6, #4]
 8012ab6:	f300 8142 	bgt.w	8012d3e <_vfiprintf_r+0x792>
 8012aba:	3608      	adds	r6, #8
 8012abc:	9908      	ldr	r1, [sp, #32]
 8012abe:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8012ac2:	b159      	cbz	r1, 8012adc <_vfiprintf_r+0x530>
 8012ac4:	a90d      	add	r1, sp, #52	@ 0x34
 8012ac6:	3301      	adds	r3, #1
 8012ac8:	6031      	str	r1, [r6, #0]
 8012aca:	2102      	movs	r1, #2
 8012acc:	440a      	add	r2, r1
 8012ace:	2b07      	cmp	r3, #7
 8012ad0:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8012ad4:	6071      	str	r1, [r6, #4]
 8012ad6:	f300 813b 	bgt.w	8012d50 <_vfiprintf_r+0x7a4>
 8012ada:	3608      	adds	r6, #8
 8012adc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ade:	2b80      	cmp	r3, #128	@ 0x80
 8012ae0:	d11f      	bne.n	8012b22 <_vfiprintf_r+0x576>
 8012ae2:	9b02      	ldr	r3, [sp, #8]
 8012ae4:	9a04      	ldr	r2, [sp, #16]
 8012ae6:	1a9d      	subs	r5, r3, r2
 8012ae8:	2d00      	cmp	r5, #0
 8012aea:	dd1a      	ble.n	8012b22 <_vfiprintf_r+0x576>
 8012aec:	4b87      	ldr	r3, [pc, #540]	@ (8012d0c <_vfiprintf_r+0x760>)
 8012aee:	6033      	str	r3, [r6, #0]
 8012af0:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8012af4:	2d10      	cmp	r5, #16
 8012af6:	f102 0201 	add.w	r2, r2, #1
 8012afa:	f106 0008 	add.w	r0, r6, #8
 8012afe:	f300 8130 	bgt.w	8012d62 <_vfiprintf_r+0x7b6>
 8012b02:	6075      	str	r5, [r6, #4]
 8012b04:	2a07      	cmp	r2, #7
 8012b06:	4465      	add	r5, ip
 8012b08:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8012b0c:	f340 813c 	ble.w	8012d88 <_vfiprintf_r+0x7dc>
 8012b10:	9800      	ldr	r0, [sp, #0]
 8012b12:	aa0e      	add	r2, sp, #56	@ 0x38
 8012b14:	4639      	mov	r1, r7
 8012b16:	f7ff fd17 	bl	8012548 <__sprint_r>
 8012b1a:	2800      	cmp	r0, #0
 8012b1c:	f040 816f 	bne.w	8012dfe <_vfiprintf_r+0x852>
 8012b20:	ae11      	add	r6, sp, #68	@ 0x44
 8012b22:	9b01      	ldr	r3, [sp, #4]
 8012b24:	1ae4      	subs	r4, r4, r3
 8012b26:	2c00      	cmp	r4, #0
 8012b28:	dd1a      	ble.n	8012b60 <_vfiprintf_r+0x5b4>
 8012b2a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8012b2e:	4877      	ldr	r0, [pc, #476]	@ (8012d0c <_vfiprintf_r+0x760>)
 8012b30:	6030      	str	r0, [r6, #0]
 8012b32:	2c10      	cmp	r4, #16
 8012b34:	f103 0301 	add.w	r3, r3, #1
 8012b38:	f106 0108 	add.w	r1, r6, #8
 8012b3c:	f300 8126 	bgt.w	8012d8c <_vfiprintf_r+0x7e0>
 8012b40:	6074      	str	r4, [r6, #4]
 8012b42:	2b07      	cmp	r3, #7
 8012b44:	4414      	add	r4, r2
 8012b46:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8012b4a:	f340 8130 	ble.w	8012dae <_vfiprintf_r+0x802>
 8012b4e:	9800      	ldr	r0, [sp, #0]
 8012b50:	aa0e      	add	r2, sp, #56	@ 0x38
 8012b52:	4639      	mov	r1, r7
 8012b54:	f7ff fcf8 	bl	8012548 <__sprint_r>
 8012b58:	2800      	cmp	r0, #0
 8012b5a:	f040 8150 	bne.w	8012dfe <_vfiprintf_r+0x852>
 8012b5e:	ae11      	add	r6, sp, #68	@ 0x44
 8012b60:	9b01      	ldr	r3, [sp, #4]
 8012b62:	9a01      	ldr	r2, [sp, #4]
 8012b64:	6073      	str	r3, [r6, #4]
 8012b66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012b68:	f8c6 9000 	str.w	r9, [r6]
 8012b6c:	4413      	add	r3, r2
 8012b6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8012b70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b72:	3301      	adds	r3, #1
 8012b74:	2b07      	cmp	r3, #7
 8012b76:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012b78:	f300 811b 	bgt.w	8012db2 <_vfiprintf_r+0x806>
 8012b7c:	f106 0308 	add.w	r3, r6, #8
 8012b80:	f01a 0f04 	tst.w	sl, #4
 8012b84:	f040 811d 	bne.w	8012dc2 <_vfiprintf_r+0x816>
 8012b88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012b8c:	9904      	ldr	r1, [sp, #16]
 8012b8e:	428a      	cmp	r2, r1
 8012b90:	bfac      	ite	ge
 8012b92:	189b      	addge	r3, r3, r2
 8012b94:	185b      	addlt	r3, r3, r1
 8012b96:	9303      	str	r3, [sp, #12]
 8012b98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012b9a:	b13b      	cbz	r3, 8012bac <_vfiprintf_r+0x600>
 8012b9c:	9800      	ldr	r0, [sp, #0]
 8012b9e:	aa0e      	add	r2, sp, #56	@ 0x38
 8012ba0:	4639      	mov	r1, r7
 8012ba2:	f7ff fcd1 	bl	8012548 <__sprint_r>
 8012ba6:	2800      	cmp	r0, #0
 8012ba8:	f040 8129 	bne.w	8012dfe <_vfiprintf_r+0x852>
 8012bac:	2300      	movs	r3, #0
 8012bae:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012bb0:	4645      	mov	r5, r8
 8012bb2:	ae11      	add	r6, sp, #68	@ 0x44
 8012bb4:	e55b      	b.n	801266e <_vfiprintf_r+0xc2>
 8012bb6:	4648      	mov	r0, r9
 8012bb8:	f7ed fb2a 	bl	8000210 <strlen>
 8012bbc:	9001      	str	r0, [sp, #4]
 8012bbe:	e734      	b.n	8012a2a <_vfiprintf_r+0x47e>
 8012bc0:	f04a 0a10 	orr.w	sl, sl, #16
 8012bc4:	f01a 0320 	ands.w	r3, sl, #32
 8012bc8:	d008      	beq.n	8012bdc <_vfiprintf_r+0x630>
 8012bca:	3507      	adds	r5, #7
 8012bcc:	f025 0507 	bic.w	r5, r5, #7
 8012bd0:	46a8      	mov	r8, r5
 8012bd2:	686d      	ldr	r5, [r5, #4]
 8012bd4:	f858 4b08 	ldr.w	r4, [r8], #8
 8012bd8:	2301      	movs	r3, #1
 8012bda:	e6d8      	b.n	801298e <_vfiprintf_r+0x3e2>
 8012bdc:	46a8      	mov	r8, r5
 8012bde:	f01a 0510 	ands.w	r5, sl, #16
 8012be2:	f858 4b04 	ldr.w	r4, [r8], #4
 8012be6:	d001      	beq.n	8012bec <_vfiprintf_r+0x640>
 8012be8:	461d      	mov	r5, r3
 8012bea:	e7f5      	b.n	8012bd8 <_vfiprintf_r+0x62c>
 8012bec:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8012bf0:	d001      	beq.n	8012bf6 <_vfiprintf_r+0x64a>
 8012bf2:	b2a4      	uxth	r4, r4
 8012bf4:	e7f0      	b.n	8012bd8 <_vfiprintf_r+0x62c>
 8012bf6:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8012bfa:	d0ed      	beq.n	8012bd8 <_vfiprintf_r+0x62c>
 8012bfc:	b2e4      	uxtb	r4, r4
 8012bfe:	e7f3      	b.n	8012be8 <_vfiprintf_r+0x63c>
 8012c00:	4a43      	ldr	r2, [pc, #268]	@ (8012d10 <_vfiprintf_r+0x764>)
 8012c02:	e5c9      	b.n	8012798 <_vfiprintf_r+0x1ec>
 8012c04:	46a8      	mov	r8, r5
 8012c06:	f01a 0510 	ands.w	r5, sl, #16
 8012c0a:	f858 4b04 	ldr.w	r4, [r8], #4
 8012c0e:	d001      	beq.n	8012c14 <_vfiprintf_r+0x668>
 8012c10:	4615      	mov	r5, r2
 8012c12:	e5cd      	b.n	80127b0 <_vfiprintf_r+0x204>
 8012c14:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 8012c18:	d001      	beq.n	8012c1e <_vfiprintf_r+0x672>
 8012c1a:	b2a4      	uxth	r4, r4
 8012c1c:	e5c8      	b.n	80127b0 <_vfiprintf_r+0x204>
 8012c1e:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8012c22:	f43f adc5 	beq.w	80127b0 <_vfiprintf_r+0x204>
 8012c26:	b2e4      	uxtb	r4, r4
 8012c28:	e7f2      	b.n	8012c10 <_vfiprintf_r+0x664>
 8012c2a:	2c0a      	cmp	r4, #10
 8012c2c:	f175 0300 	sbcs.w	r3, r5, #0
 8012c30:	d206      	bcs.n	8012c40 <_vfiprintf_r+0x694>
 8012c32:	3430      	adds	r4, #48	@ 0x30
 8012c34:	b2e4      	uxtb	r4, r4
 8012c36:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8012c3a:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 8012c3e:	e131      	b.n	8012ea4 <_vfiprintf_r+0x8f8>
 8012c40:	ab3a      	add	r3, sp, #232	@ 0xe8
 8012c42:	9308      	str	r3, [sp, #32]
 8012c44:	9b04      	ldr	r3, [sp, #16]
 8012c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8012c4a:	f04f 0a00 	mov.w	sl, #0
 8012c4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012c50:	220a      	movs	r2, #10
 8012c52:	2300      	movs	r3, #0
 8012c54:	4620      	mov	r0, r4
 8012c56:	4629      	mov	r1, r5
 8012c58:	f7ed ffc6 	bl	8000be8 <__aeabi_uldivmod>
 8012c5c:	460b      	mov	r3, r1
 8012c5e:	9908      	ldr	r1, [sp, #32]
 8012c60:	900b      	str	r0, [sp, #44]	@ 0x2c
 8012c62:	3230      	adds	r2, #48	@ 0x30
 8012c64:	f801 2c01 	strb.w	r2, [r1, #-1]
 8012c68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012c6a:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 8012c6e:	f10a 0a01 	add.w	sl, sl, #1
 8012c72:	b1e2      	cbz	r2, 8012cae <_vfiprintf_r+0x702>
 8012c74:	9a06      	ldr	r2, [sp, #24]
 8012c76:	7812      	ldrb	r2, [r2, #0]
 8012c78:	4552      	cmp	r2, sl
 8012c7a:	d118      	bne.n	8012cae <_vfiprintf_r+0x702>
 8012c7c:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8012c80:	d015      	beq.n	8012cae <_vfiprintf_r+0x702>
 8012c82:	2c0a      	cmp	r4, #10
 8012c84:	f175 0200 	sbcs.w	r2, r5, #0
 8012c88:	d311      	bcc.n	8012cae <_vfiprintf_r+0x702>
 8012c8a:	9308      	str	r3, [sp, #32]
 8012c8c:	9b07      	ldr	r3, [sp, #28]
 8012c8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012c90:	eba9 0903 	sub.w	r9, r9, r3
 8012c94:	461a      	mov	r2, r3
 8012c96:	4648      	mov	r0, r9
 8012c98:	f000 fc60 	bl	801355c <strncpy>
 8012c9c:	9b06      	ldr	r3, [sp, #24]
 8012c9e:	785a      	ldrb	r2, [r3, #1]
 8012ca0:	9b08      	ldr	r3, [sp, #32]
 8012ca2:	b172      	cbz	r2, 8012cc2 <_vfiprintf_r+0x716>
 8012ca4:	9a06      	ldr	r2, [sp, #24]
 8012ca6:	3201      	adds	r2, #1
 8012ca8:	9206      	str	r2, [sp, #24]
 8012caa:	f04f 0a00 	mov.w	sl, #0
 8012cae:	2c0a      	cmp	r4, #10
 8012cb0:	f175 0500 	sbcs.w	r5, r5, #0
 8012cb4:	f0c0 80f6 	bcc.w	8012ea4 <_vfiprintf_r+0x8f8>
 8012cb8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8012cba:	f8cd 9020 	str.w	r9, [sp, #32]
 8012cbe:	461d      	mov	r5, r3
 8012cc0:	e7c6      	b.n	8012c50 <_vfiprintf_r+0x6a4>
 8012cc2:	4692      	mov	sl, r2
 8012cc4:	e7f3      	b.n	8012cae <_vfiprintf_r+0x702>
 8012cc6:	f004 030f 	and.w	r3, r4, #15
 8012cca:	9a05      	ldr	r2, [sp, #20]
 8012ccc:	0924      	lsrs	r4, r4, #4
 8012cce:	5cd3      	ldrb	r3, [r2, r3]
 8012cd0:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8012cd4:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8012cd8:	092d      	lsrs	r5, r5, #4
 8012cda:	ea54 0305 	orrs.w	r3, r4, r5
 8012cde:	d1f2      	bne.n	8012cc6 <_vfiprintf_r+0x71a>
 8012ce0:	e0e0      	b.n	8012ea4 <_vfiprintf_r+0x8f8>
 8012ce2:	b923      	cbnz	r3, 8012cee <_vfiprintf_r+0x742>
 8012ce4:	f01a 0f01 	tst.w	sl, #1
 8012ce8:	d001      	beq.n	8012cee <_vfiprintf_r+0x742>
 8012cea:	2430      	movs	r4, #48	@ 0x30
 8012cec:	e7a3      	b.n	8012c36 <_vfiprintf_r+0x68a>
 8012cee:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8012cf2:	e0d7      	b.n	8012ea4 <_vfiprintf_r+0x8f8>
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	f000 80a3 	beq.w	8012e40 <_vfiprintf_r+0x894>
 8012cfa:	2400      	movs	r4, #0
 8012cfc:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8012d00:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8012d04:	46a8      	mov	r8, r5
 8012d06:	e5e0      	b.n	80128ca <_vfiprintf_r+0x31e>
 8012d08:	08017cd3 	.word	0x08017cd3
 8012d0c:	08017cc3 	.word	0x08017cc3
 8012d10:	08017c90 	.word	0x08017c90
 8012d14:	2110      	movs	r1, #16
 8012d16:	6071      	str	r1, [r6, #4]
 8012d18:	2a07      	cmp	r2, #7
 8012d1a:	4461      	add	r1, ip
 8012d1c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8012d20:	dd08      	ble.n	8012d34 <_vfiprintf_r+0x788>
 8012d22:	9800      	ldr	r0, [sp, #0]
 8012d24:	aa0e      	add	r2, sp, #56	@ 0x38
 8012d26:	4639      	mov	r1, r7
 8012d28:	f7ff fc0e 	bl	8012548 <__sprint_r>
 8012d2c:	2800      	cmp	r0, #0
 8012d2e:	d166      	bne.n	8012dfe <_vfiprintf_r+0x852>
 8012d30:	4b60      	ldr	r3, [pc, #384]	@ (8012eb4 <_vfiprintf_r+0x908>)
 8012d32:	a811      	add	r0, sp, #68	@ 0x44
 8012d34:	3d10      	subs	r5, #16
 8012d36:	4606      	mov	r6, r0
 8012d38:	e694      	b.n	8012a64 <_vfiprintf_r+0x4b8>
 8012d3a:	4606      	mov	r6, r0
 8012d3c:	e6ac      	b.n	8012a98 <_vfiprintf_r+0x4ec>
 8012d3e:	9800      	ldr	r0, [sp, #0]
 8012d40:	aa0e      	add	r2, sp, #56	@ 0x38
 8012d42:	4639      	mov	r1, r7
 8012d44:	f7ff fc00 	bl	8012548 <__sprint_r>
 8012d48:	2800      	cmp	r0, #0
 8012d4a:	d158      	bne.n	8012dfe <_vfiprintf_r+0x852>
 8012d4c:	ae11      	add	r6, sp, #68	@ 0x44
 8012d4e:	e6b5      	b.n	8012abc <_vfiprintf_r+0x510>
 8012d50:	9800      	ldr	r0, [sp, #0]
 8012d52:	aa0e      	add	r2, sp, #56	@ 0x38
 8012d54:	4639      	mov	r1, r7
 8012d56:	f7ff fbf7 	bl	8012548 <__sprint_r>
 8012d5a:	2800      	cmp	r0, #0
 8012d5c:	d14f      	bne.n	8012dfe <_vfiprintf_r+0x852>
 8012d5e:	ae11      	add	r6, sp, #68	@ 0x44
 8012d60:	e6bc      	b.n	8012adc <_vfiprintf_r+0x530>
 8012d62:	2110      	movs	r1, #16
 8012d64:	6071      	str	r1, [r6, #4]
 8012d66:	2a07      	cmp	r2, #7
 8012d68:	4461      	add	r1, ip
 8012d6a:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8012d6e:	dd08      	ble.n	8012d82 <_vfiprintf_r+0x7d6>
 8012d70:	9800      	ldr	r0, [sp, #0]
 8012d72:	aa0e      	add	r2, sp, #56	@ 0x38
 8012d74:	4639      	mov	r1, r7
 8012d76:	f7ff fbe7 	bl	8012548 <__sprint_r>
 8012d7a:	2800      	cmp	r0, #0
 8012d7c:	d13f      	bne.n	8012dfe <_vfiprintf_r+0x852>
 8012d7e:	4b4e      	ldr	r3, [pc, #312]	@ (8012eb8 <_vfiprintf_r+0x90c>)
 8012d80:	a811      	add	r0, sp, #68	@ 0x44
 8012d82:	3d10      	subs	r5, #16
 8012d84:	4606      	mov	r6, r0
 8012d86:	e6b2      	b.n	8012aee <_vfiprintf_r+0x542>
 8012d88:	4606      	mov	r6, r0
 8012d8a:	e6ca      	b.n	8012b22 <_vfiprintf_r+0x576>
 8012d8c:	2010      	movs	r0, #16
 8012d8e:	4402      	add	r2, r0
 8012d90:	2b07      	cmp	r3, #7
 8012d92:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8012d96:	6070      	str	r0, [r6, #4]
 8012d98:	dd06      	ble.n	8012da8 <_vfiprintf_r+0x7fc>
 8012d9a:	9800      	ldr	r0, [sp, #0]
 8012d9c:	aa0e      	add	r2, sp, #56	@ 0x38
 8012d9e:	4639      	mov	r1, r7
 8012da0:	f7ff fbd2 	bl	8012548 <__sprint_r>
 8012da4:	bb58      	cbnz	r0, 8012dfe <_vfiprintf_r+0x852>
 8012da6:	a911      	add	r1, sp, #68	@ 0x44
 8012da8:	3c10      	subs	r4, #16
 8012daa:	460e      	mov	r6, r1
 8012dac:	e6bd      	b.n	8012b2a <_vfiprintf_r+0x57e>
 8012dae:	460e      	mov	r6, r1
 8012db0:	e6d6      	b.n	8012b60 <_vfiprintf_r+0x5b4>
 8012db2:	9800      	ldr	r0, [sp, #0]
 8012db4:	aa0e      	add	r2, sp, #56	@ 0x38
 8012db6:	4639      	mov	r1, r7
 8012db8:	f7ff fbc6 	bl	8012548 <__sprint_r>
 8012dbc:	b9f8      	cbnz	r0, 8012dfe <_vfiprintf_r+0x852>
 8012dbe:	ab11      	add	r3, sp, #68	@ 0x44
 8012dc0:	e6de      	b.n	8012b80 <_vfiprintf_r+0x5d4>
 8012dc2:	9a02      	ldr	r2, [sp, #8]
 8012dc4:	9904      	ldr	r1, [sp, #16]
 8012dc6:	1a54      	subs	r4, r2, r1
 8012dc8:	2c00      	cmp	r4, #0
 8012dca:	f77f aedd 	ble.w	8012b88 <_vfiprintf_r+0x5dc>
 8012dce:	4d39      	ldr	r5, [pc, #228]	@ (8012eb4 <_vfiprintf_r+0x908>)
 8012dd0:	2610      	movs	r6, #16
 8012dd2:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8012dd6:	2c10      	cmp	r4, #16
 8012dd8:	f102 0201 	add.w	r2, r2, #1
 8012ddc:	601d      	str	r5, [r3, #0]
 8012dde:	dc1d      	bgt.n	8012e1c <_vfiprintf_r+0x870>
 8012de0:	605c      	str	r4, [r3, #4]
 8012de2:	2a07      	cmp	r2, #7
 8012de4:	440c      	add	r4, r1
 8012de6:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8012dea:	f77f aecd 	ble.w	8012b88 <_vfiprintf_r+0x5dc>
 8012dee:	9800      	ldr	r0, [sp, #0]
 8012df0:	aa0e      	add	r2, sp, #56	@ 0x38
 8012df2:	4639      	mov	r1, r7
 8012df4:	f7ff fba8 	bl	8012548 <__sprint_r>
 8012df8:	2800      	cmp	r0, #0
 8012dfa:	f43f aec5 	beq.w	8012b88 <_vfiprintf_r+0x5dc>
 8012dfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012e00:	07d9      	lsls	r1, r3, #31
 8012e02:	d405      	bmi.n	8012e10 <_vfiprintf_r+0x864>
 8012e04:	89bb      	ldrh	r3, [r7, #12]
 8012e06:	059a      	lsls	r2, r3, #22
 8012e08:	d402      	bmi.n	8012e10 <_vfiprintf_r+0x864>
 8012e0a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8012e0c:	f7fd fdb3 	bl	8010976 <__retarget_lock_release_recursive>
 8012e10:	89bb      	ldrh	r3, [r7, #12]
 8012e12:	065b      	lsls	r3, r3, #25
 8012e14:	f57f abfb 	bpl.w	801260e <_vfiprintf_r+0x62>
 8012e18:	f7ff bbf6 	b.w	8012608 <_vfiprintf_r+0x5c>
 8012e1c:	3110      	adds	r1, #16
 8012e1e:	2a07      	cmp	r2, #7
 8012e20:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8012e24:	605e      	str	r6, [r3, #4]
 8012e26:	dc02      	bgt.n	8012e2e <_vfiprintf_r+0x882>
 8012e28:	3308      	adds	r3, #8
 8012e2a:	3c10      	subs	r4, #16
 8012e2c:	e7d1      	b.n	8012dd2 <_vfiprintf_r+0x826>
 8012e2e:	9800      	ldr	r0, [sp, #0]
 8012e30:	aa0e      	add	r2, sp, #56	@ 0x38
 8012e32:	4639      	mov	r1, r7
 8012e34:	f7ff fb88 	bl	8012548 <__sprint_r>
 8012e38:	2800      	cmp	r0, #0
 8012e3a:	d1e0      	bne.n	8012dfe <_vfiprintf_r+0x852>
 8012e3c:	ab11      	add	r3, sp, #68	@ 0x44
 8012e3e:	e7f4      	b.n	8012e2a <_vfiprintf_r+0x87e>
 8012e40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012e42:	b913      	cbnz	r3, 8012e4a <_vfiprintf_r+0x89e>
 8012e44:	2300      	movs	r3, #0
 8012e46:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012e48:	e7d9      	b.n	8012dfe <_vfiprintf_r+0x852>
 8012e4a:	9800      	ldr	r0, [sp, #0]
 8012e4c:	aa0e      	add	r2, sp, #56	@ 0x38
 8012e4e:	4639      	mov	r1, r7
 8012e50:	f7ff fb7a 	bl	8012548 <__sprint_r>
 8012e54:	2800      	cmp	r0, #0
 8012e56:	d0f5      	beq.n	8012e44 <_vfiprintf_r+0x898>
 8012e58:	e7d1      	b.n	8012dfe <_vfiprintf_r+0x852>
 8012e5a:	ea54 0205 	orrs.w	r2, r4, r5
 8012e5e:	f8cd a010 	str.w	sl, [sp, #16]
 8012e62:	f43f ada6 	beq.w	80129b2 <_vfiprintf_r+0x406>
 8012e66:	2b01      	cmp	r3, #1
 8012e68:	f43f aedf 	beq.w	8012c2a <_vfiprintf_r+0x67e>
 8012e6c:	2b02      	cmp	r3, #2
 8012e6e:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8012e72:	f43f af28 	beq.w	8012cc6 <_vfiprintf_r+0x71a>
 8012e76:	f004 0307 	and.w	r3, r4, #7
 8012e7a:	08e4      	lsrs	r4, r4, #3
 8012e7c:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8012e80:	08ed      	lsrs	r5, r5, #3
 8012e82:	3330      	adds	r3, #48	@ 0x30
 8012e84:	ea54 0105 	orrs.w	r1, r4, r5
 8012e88:	464a      	mov	r2, r9
 8012e8a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8012e8e:	d1f2      	bne.n	8012e76 <_vfiprintf_r+0x8ca>
 8012e90:	9904      	ldr	r1, [sp, #16]
 8012e92:	07c8      	lsls	r0, r1, #31
 8012e94:	d506      	bpl.n	8012ea4 <_vfiprintf_r+0x8f8>
 8012e96:	2b30      	cmp	r3, #48	@ 0x30
 8012e98:	d004      	beq.n	8012ea4 <_vfiprintf_r+0x8f8>
 8012e9a:	2330      	movs	r3, #48	@ 0x30
 8012e9c:	f809 3c01 	strb.w	r3, [r9, #-1]
 8012ea0:	f1a2 0902 	sub.w	r9, r2, #2
 8012ea4:	ab3a      	add	r3, sp, #232	@ 0xe8
 8012ea6:	eba3 0309 	sub.w	r3, r3, r9
 8012eaa:	9c01      	ldr	r4, [sp, #4]
 8012eac:	f8dd a010 	ldr.w	sl, [sp, #16]
 8012eb0:	9301      	str	r3, [sp, #4]
 8012eb2:	e5bb      	b.n	8012a2c <_vfiprintf_r+0x480>
 8012eb4:	08017cd3 	.word	0x08017cd3
 8012eb8:	08017cc3 	.word	0x08017cc3

08012ebc <__sbprintf>:
 8012ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ebe:	461f      	mov	r7, r3
 8012ec0:	898b      	ldrh	r3, [r1, #12]
 8012ec2:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8012ec6:	f023 0302 	bic.w	r3, r3, #2
 8012eca:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012ece:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8012ed0:	9319      	str	r3, [sp, #100]	@ 0x64
 8012ed2:	89cb      	ldrh	r3, [r1, #14]
 8012ed4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012ed8:	69cb      	ldr	r3, [r1, #28]
 8012eda:	9307      	str	r3, [sp, #28]
 8012edc:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8012ede:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ee0:	ab1a      	add	r3, sp, #104	@ 0x68
 8012ee2:	9300      	str	r3, [sp, #0]
 8012ee4:	9304      	str	r3, [sp, #16]
 8012ee6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012eea:	4615      	mov	r5, r2
 8012eec:	4606      	mov	r6, r0
 8012eee:	9302      	str	r3, [sp, #8]
 8012ef0:	9305      	str	r3, [sp, #20]
 8012ef2:	a816      	add	r0, sp, #88	@ 0x58
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	460c      	mov	r4, r1
 8012ef8:	9306      	str	r3, [sp, #24]
 8012efa:	f7fd fd39 	bl	8010970 <__retarget_lock_init_recursive>
 8012efe:	462a      	mov	r2, r5
 8012f00:	463b      	mov	r3, r7
 8012f02:	4669      	mov	r1, sp
 8012f04:	4630      	mov	r0, r6
 8012f06:	f7ff fb51 	bl	80125ac <_vfiprintf_r>
 8012f0a:	1e05      	subs	r5, r0, #0
 8012f0c:	db07      	blt.n	8012f1e <__sbprintf+0x62>
 8012f0e:	4669      	mov	r1, sp
 8012f10:	4630      	mov	r0, r6
 8012f12:	f000 f8f1 	bl	80130f8 <_fflush_r>
 8012f16:	2800      	cmp	r0, #0
 8012f18:	bf18      	it	ne
 8012f1a:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8012f1e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012f22:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8012f24:	065b      	lsls	r3, r3, #25
 8012f26:	bf42      	ittt	mi
 8012f28:	89a3      	ldrhmi	r3, [r4, #12]
 8012f2a:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8012f2e:	81a3      	strhmi	r3, [r4, #12]
 8012f30:	f7fd fd1f 	bl	8010972 <__retarget_lock_close_recursive>
 8012f34:	4628      	mov	r0, r5
 8012f36:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8012f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012f3c <_fclose_r>:
 8012f3c:	b570      	push	{r4, r5, r6, lr}
 8012f3e:	4605      	mov	r5, r0
 8012f40:	460c      	mov	r4, r1
 8012f42:	b1b1      	cbz	r1, 8012f72 <_fclose_r+0x36>
 8012f44:	b118      	cbz	r0, 8012f4e <_fclose_r+0x12>
 8012f46:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8012f48:	b90b      	cbnz	r3, 8012f4e <_fclose_r+0x12>
 8012f4a:	f7fd fbe3 	bl	8010714 <__sinit>
 8012f4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012f50:	07de      	lsls	r6, r3, #31
 8012f52:	d405      	bmi.n	8012f60 <_fclose_r+0x24>
 8012f54:	89a3      	ldrh	r3, [r4, #12]
 8012f56:	0598      	lsls	r0, r3, #22
 8012f58:	d402      	bmi.n	8012f60 <_fclose_r+0x24>
 8012f5a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012f5c:	f7fd fd0a 	bl	8010974 <__retarget_lock_acquire_recursive>
 8012f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f64:	b943      	cbnz	r3, 8012f78 <_fclose_r+0x3c>
 8012f66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012f68:	07d9      	lsls	r1, r3, #31
 8012f6a:	d402      	bmi.n	8012f72 <_fclose_r+0x36>
 8012f6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012f6e:	f7fd fd02 	bl	8010976 <__retarget_lock_release_recursive>
 8012f72:	2600      	movs	r6, #0
 8012f74:	4630      	mov	r0, r6
 8012f76:	bd70      	pop	{r4, r5, r6, pc}
 8012f78:	4621      	mov	r1, r4
 8012f7a:	4628      	mov	r0, r5
 8012f7c:	f000 f834 	bl	8012fe8 <__sflush_r>
 8012f80:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8012f82:	4606      	mov	r6, r0
 8012f84:	b133      	cbz	r3, 8012f94 <_fclose_r+0x58>
 8012f86:	69e1      	ldr	r1, [r4, #28]
 8012f88:	4628      	mov	r0, r5
 8012f8a:	4798      	blx	r3
 8012f8c:	2800      	cmp	r0, #0
 8012f8e:	bfb8      	it	lt
 8012f90:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 8012f94:	89a3      	ldrh	r3, [r4, #12]
 8012f96:	061a      	lsls	r2, r3, #24
 8012f98:	d503      	bpl.n	8012fa2 <_fclose_r+0x66>
 8012f9a:	6921      	ldr	r1, [r4, #16]
 8012f9c:	4628      	mov	r0, r5
 8012f9e:	f7fd fd5f 	bl	8010a60 <_free_r>
 8012fa2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012fa4:	b141      	cbz	r1, 8012fb8 <_fclose_r+0x7c>
 8012fa6:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8012faa:	4299      	cmp	r1, r3
 8012fac:	d002      	beq.n	8012fb4 <_fclose_r+0x78>
 8012fae:	4628      	mov	r0, r5
 8012fb0:	f7fd fd56 	bl	8010a60 <_free_r>
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	6323      	str	r3, [r4, #48]	@ 0x30
 8012fb8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012fba:	b121      	cbz	r1, 8012fc6 <_fclose_r+0x8a>
 8012fbc:	4628      	mov	r0, r5
 8012fbe:	f7fd fd4f 	bl	8010a60 <_free_r>
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	6463      	str	r3, [r4, #68]	@ 0x44
 8012fc6:	f7fd fb99 	bl	80106fc <__sfp_lock_acquire>
 8012fca:	2300      	movs	r3, #0
 8012fcc:	81a3      	strh	r3, [r4, #12]
 8012fce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012fd0:	07db      	lsls	r3, r3, #31
 8012fd2:	d402      	bmi.n	8012fda <_fclose_r+0x9e>
 8012fd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012fd6:	f7fd fcce 	bl	8010976 <__retarget_lock_release_recursive>
 8012fda:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012fdc:	f7fd fcc9 	bl	8010972 <__retarget_lock_close_recursive>
 8012fe0:	f7fd fb92 	bl	8010708 <__sfp_lock_release>
 8012fe4:	e7c6      	b.n	8012f74 <_fclose_r+0x38>
	...

08012fe8 <__sflush_r>:
 8012fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fec:	4605      	mov	r5, r0
 8012fee:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8012ff2:	0706      	lsls	r6, r0, #28
 8012ff4:	460c      	mov	r4, r1
 8012ff6:	d457      	bmi.n	80130a8 <__sflush_r+0xc0>
 8012ff8:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 8012ffc:	818b      	strh	r3, [r1, #12]
 8012ffe:	684b      	ldr	r3, [r1, #4]
 8013000:	2b00      	cmp	r3, #0
 8013002:	dc02      	bgt.n	801300a <__sflush_r+0x22>
 8013004:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8013006:	2b00      	cmp	r3, #0
 8013008:	dd4c      	ble.n	80130a4 <__sflush_r+0xbc>
 801300a:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801300c:	2e00      	cmp	r6, #0
 801300e:	d049      	beq.n	80130a4 <__sflush_r+0xbc>
 8013010:	2300      	movs	r3, #0
 8013012:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 8013016:	682f      	ldr	r7, [r5, #0]
 8013018:	69e1      	ldr	r1, [r4, #28]
 801301a:	602b      	str	r3, [r5, #0]
 801301c:	d034      	beq.n	8013088 <__sflush_r+0xa0>
 801301e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8013020:	89a3      	ldrh	r3, [r4, #12]
 8013022:	0759      	lsls	r1, r3, #29
 8013024:	d505      	bpl.n	8013032 <__sflush_r+0x4a>
 8013026:	6863      	ldr	r3, [r4, #4]
 8013028:	1ad2      	subs	r2, r2, r3
 801302a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801302c:	b10b      	cbz	r3, 8013032 <__sflush_r+0x4a>
 801302e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8013030:	1ad2      	subs	r2, r2, r3
 8013032:	2300      	movs	r3, #0
 8013034:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013036:	69e1      	ldr	r1, [r4, #28]
 8013038:	4628      	mov	r0, r5
 801303a:	47b0      	blx	r6
 801303c:	1c43      	adds	r3, r0, #1
 801303e:	d106      	bne.n	801304e <__sflush_r+0x66>
 8013040:	682a      	ldr	r2, [r5, #0]
 8013042:	2a1d      	cmp	r2, #29
 8013044:	d848      	bhi.n	80130d8 <__sflush_r+0xf0>
 8013046:	4b2b      	ldr	r3, [pc, #172]	@ (80130f4 <__sflush_r+0x10c>)
 8013048:	4113      	asrs	r3, r2
 801304a:	07de      	lsls	r6, r3, #31
 801304c:	d444      	bmi.n	80130d8 <__sflush_r+0xf0>
 801304e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013052:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8013056:	81a2      	strh	r2, [r4, #12]
 8013058:	2200      	movs	r2, #0
 801305a:	6062      	str	r2, [r4, #4]
 801305c:	04d9      	lsls	r1, r3, #19
 801305e:	6922      	ldr	r2, [r4, #16]
 8013060:	6022      	str	r2, [r4, #0]
 8013062:	d504      	bpl.n	801306e <__sflush_r+0x86>
 8013064:	1c42      	adds	r2, r0, #1
 8013066:	d101      	bne.n	801306c <__sflush_r+0x84>
 8013068:	682b      	ldr	r3, [r5, #0]
 801306a:	b903      	cbnz	r3, 801306e <__sflush_r+0x86>
 801306c:	6520      	str	r0, [r4, #80]	@ 0x50
 801306e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013070:	602f      	str	r7, [r5, #0]
 8013072:	b1b9      	cbz	r1, 80130a4 <__sflush_r+0xbc>
 8013074:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8013078:	4299      	cmp	r1, r3
 801307a:	d002      	beq.n	8013082 <__sflush_r+0x9a>
 801307c:	4628      	mov	r0, r5
 801307e:	f7fd fcef 	bl	8010a60 <_free_r>
 8013082:	2300      	movs	r3, #0
 8013084:	6323      	str	r3, [r4, #48]	@ 0x30
 8013086:	e00d      	b.n	80130a4 <__sflush_r+0xbc>
 8013088:	2301      	movs	r3, #1
 801308a:	4628      	mov	r0, r5
 801308c:	47b0      	blx	r6
 801308e:	4602      	mov	r2, r0
 8013090:	1c50      	adds	r0, r2, #1
 8013092:	d1c5      	bne.n	8013020 <__sflush_r+0x38>
 8013094:	682b      	ldr	r3, [r5, #0]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d0c2      	beq.n	8013020 <__sflush_r+0x38>
 801309a:	2b1d      	cmp	r3, #29
 801309c:	d001      	beq.n	80130a2 <__sflush_r+0xba>
 801309e:	2b16      	cmp	r3, #22
 80130a0:	d11a      	bne.n	80130d8 <__sflush_r+0xf0>
 80130a2:	602f      	str	r7, [r5, #0]
 80130a4:	2000      	movs	r0, #0
 80130a6:	e01e      	b.n	80130e6 <__sflush_r+0xfe>
 80130a8:	690f      	ldr	r7, [r1, #16]
 80130aa:	2f00      	cmp	r7, #0
 80130ac:	d0fa      	beq.n	80130a4 <__sflush_r+0xbc>
 80130ae:	0783      	lsls	r3, r0, #30
 80130b0:	680e      	ldr	r6, [r1, #0]
 80130b2:	bf08      	it	eq
 80130b4:	694b      	ldreq	r3, [r1, #20]
 80130b6:	600f      	str	r7, [r1, #0]
 80130b8:	bf18      	it	ne
 80130ba:	2300      	movne	r3, #0
 80130bc:	eba6 0807 	sub.w	r8, r6, r7
 80130c0:	608b      	str	r3, [r1, #8]
 80130c2:	f1b8 0f00 	cmp.w	r8, #0
 80130c6:	dded      	ble.n	80130a4 <__sflush_r+0xbc>
 80130c8:	69e1      	ldr	r1, [r4, #28]
 80130ca:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80130cc:	4643      	mov	r3, r8
 80130ce:	463a      	mov	r2, r7
 80130d0:	4628      	mov	r0, r5
 80130d2:	47b0      	blx	r6
 80130d4:	2800      	cmp	r0, #0
 80130d6:	dc08      	bgt.n	80130ea <__sflush_r+0x102>
 80130d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80130e0:	81a3      	strh	r3, [r4, #12]
 80130e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80130e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130ea:	4407      	add	r7, r0
 80130ec:	eba8 0800 	sub.w	r8, r8, r0
 80130f0:	e7e7      	b.n	80130c2 <__sflush_r+0xda>
 80130f2:	bf00      	nop
 80130f4:	dfbffffe 	.word	0xdfbffffe

080130f8 <_fflush_r>:
 80130f8:	b538      	push	{r3, r4, r5, lr}
 80130fa:	460c      	mov	r4, r1
 80130fc:	4605      	mov	r5, r0
 80130fe:	b118      	cbz	r0, 8013108 <_fflush_r+0x10>
 8013100:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8013102:	b90b      	cbnz	r3, 8013108 <_fflush_r+0x10>
 8013104:	f7fd fb06 	bl	8010714 <__sinit>
 8013108:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 801310c:	b1b8      	cbz	r0, 801313e <_fflush_r+0x46>
 801310e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013110:	07db      	lsls	r3, r3, #31
 8013112:	d404      	bmi.n	801311e <_fflush_r+0x26>
 8013114:	0581      	lsls	r1, r0, #22
 8013116:	d402      	bmi.n	801311e <_fflush_r+0x26>
 8013118:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801311a:	f7fd fc2b 	bl	8010974 <__retarget_lock_acquire_recursive>
 801311e:	4628      	mov	r0, r5
 8013120:	4621      	mov	r1, r4
 8013122:	f7ff ff61 	bl	8012fe8 <__sflush_r>
 8013126:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013128:	07da      	lsls	r2, r3, #31
 801312a:	4605      	mov	r5, r0
 801312c:	d405      	bmi.n	801313a <_fflush_r+0x42>
 801312e:	89a3      	ldrh	r3, [r4, #12]
 8013130:	059b      	lsls	r3, r3, #22
 8013132:	d402      	bmi.n	801313a <_fflush_r+0x42>
 8013134:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013136:	f7fd fc1e 	bl	8010976 <__retarget_lock_release_recursive>
 801313a:	4628      	mov	r0, r5
 801313c:	bd38      	pop	{r3, r4, r5, pc}
 801313e:	4605      	mov	r5, r0
 8013140:	e7fb      	b.n	801313a <_fflush_r+0x42>
	...

08013144 <__sfvwrite_r>:
 8013144:	6893      	ldr	r3, [r2, #8]
 8013146:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801314a:	4606      	mov	r6, r0
 801314c:	460c      	mov	r4, r1
 801314e:	4691      	mov	r9, r2
 8013150:	b91b      	cbnz	r3, 801315a <__sfvwrite_r+0x16>
 8013152:	2000      	movs	r0, #0
 8013154:	b003      	add	sp, #12
 8013156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801315a:	898b      	ldrh	r3, [r1, #12]
 801315c:	0718      	lsls	r0, r3, #28
 801315e:	d550      	bpl.n	8013202 <__sfvwrite_r+0xbe>
 8013160:	690b      	ldr	r3, [r1, #16]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d04d      	beq.n	8013202 <__sfvwrite_r+0xbe>
 8013166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801316a:	f8d9 8000 	ldr.w	r8, [r9]
 801316e:	f013 0702 	ands.w	r7, r3, #2
 8013172:	d16b      	bne.n	801324c <__sfvwrite_r+0x108>
 8013174:	f013 0301 	ands.w	r3, r3, #1
 8013178:	f000 809c 	beq.w	80132b4 <__sfvwrite_r+0x170>
 801317c:	4638      	mov	r0, r7
 801317e:	46ba      	mov	sl, r7
 8013180:	46bb      	mov	fp, r7
 8013182:	f1bb 0f00 	cmp.w	fp, #0
 8013186:	f000 8103 	beq.w	8013390 <__sfvwrite_r+0x24c>
 801318a:	b950      	cbnz	r0, 80131a2 <__sfvwrite_r+0x5e>
 801318c:	465a      	mov	r2, fp
 801318e:	210a      	movs	r1, #10
 8013190:	4650      	mov	r0, sl
 8013192:	f7ed f845 	bl	8000220 <memchr>
 8013196:	2800      	cmp	r0, #0
 8013198:	f000 8100 	beq.w	801339c <__sfvwrite_r+0x258>
 801319c:	3001      	adds	r0, #1
 801319e:	eba0 070a 	sub.w	r7, r0, sl
 80131a2:	6820      	ldr	r0, [r4, #0]
 80131a4:	6921      	ldr	r1, [r4, #16]
 80131a6:	68a5      	ldr	r5, [r4, #8]
 80131a8:	6963      	ldr	r3, [r4, #20]
 80131aa:	455f      	cmp	r7, fp
 80131ac:	463a      	mov	r2, r7
 80131ae:	bf28      	it	cs
 80131b0:	465a      	movcs	r2, fp
 80131b2:	4288      	cmp	r0, r1
 80131b4:	f240 80f5 	bls.w	80133a2 <__sfvwrite_r+0x25e>
 80131b8:	441d      	add	r5, r3
 80131ba:	42aa      	cmp	r2, r5
 80131bc:	f340 80f1 	ble.w	80133a2 <__sfvwrite_r+0x25e>
 80131c0:	4651      	mov	r1, sl
 80131c2:	462a      	mov	r2, r5
 80131c4:	f7fd fb41 	bl	801084a <memmove>
 80131c8:	6823      	ldr	r3, [r4, #0]
 80131ca:	442b      	add	r3, r5
 80131cc:	6023      	str	r3, [r4, #0]
 80131ce:	4621      	mov	r1, r4
 80131d0:	4630      	mov	r0, r6
 80131d2:	f7ff ff91 	bl	80130f8 <_fflush_r>
 80131d6:	2800      	cmp	r0, #0
 80131d8:	d167      	bne.n	80132aa <__sfvwrite_r+0x166>
 80131da:	1b7f      	subs	r7, r7, r5
 80131dc:	f040 80f9 	bne.w	80133d2 <__sfvwrite_r+0x28e>
 80131e0:	4621      	mov	r1, r4
 80131e2:	4630      	mov	r0, r6
 80131e4:	f7ff ff88 	bl	80130f8 <_fflush_r>
 80131e8:	2800      	cmp	r0, #0
 80131ea:	d15e      	bne.n	80132aa <__sfvwrite_r+0x166>
 80131ec:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80131f0:	1b5b      	subs	r3, r3, r5
 80131f2:	44aa      	add	sl, r5
 80131f4:	ebab 0b05 	sub.w	fp, fp, r5
 80131f8:	f8c9 3008 	str.w	r3, [r9, #8]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d1c0      	bne.n	8013182 <__sfvwrite_r+0x3e>
 8013200:	e7a7      	b.n	8013152 <__sfvwrite_r+0xe>
 8013202:	4621      	mov	r1, r4
 8013204:	4630      	mov	r0, r6
 8013206:	f000 f8e9 	bl	80133dc <__swsetup_r>
 801320a:	2800      	cmp	r0, #0
 801320c:	d0ab      	beq.n	8013166 <__sfvwrite_r+0x22>
 801320e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013212:	e79f      	b.n	8013154 <__sfvwrite_r+0x10>
 8013214:	e9d8 a500 	ldrd	sl, r5, [r8]
 8013218:	f108 0808 	add.w	r8, r8, #8
 801321c:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8013220:	69e1      	ldr	r1, [r4, #28]
 8013222:	2d00      	cmp	r5, #0
 8013224:	d0f6      	beq.n	8013214 <__sfvwrite_r+0xd0>
 8013226:	42bd      	cmp	r5, r7
 8013228:	462b      	mov	r3, r5
 801322a:	4652      	mov	r2, sl
 801322c:	bf28      	it	cs
 801322e:	463b      	movcs	r3, r7
 8013230:	4630      	mov	r0, r6
 8013232:	47d8      	blx	fp
 8013234:	2800      	cmp	r0, #0
 8013236:	dd38      	ble.n	80132aa <__sfvwrite_r+0x166>
 8013238:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801323c:	1a1b      	subs	r3, r3, r0
 801323e:	4482      	add	sl, r0
 8013240:	1a2d      	subs	r5, r5, r0
 8013242:	f8c9 3008 	str.w	r3, [r9, #8]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d1e8      	bne.n	801321c <__sfvwrite_r+0xd8>
 801324a:	e782      	b.n	8013152 <__sfvwrite_r+0xe>
 801324c:	f04f 0a00 	mov.w	sl, #0
 8013250:	4f61      	ldr	r7, [pc, #388]	@ (80133d8 <__sfvwrite_r+0x294>)
 8013252:	4655      	mov	r5, sl
 8013254:	e7e2      	b.n	801321c <__sfvwrite_r+0xd8>
 8013256:	e9d8 7a00 	ldrd	r7, sl, [r8]
 801325a:	f108 0808 	add.w	r8, r8, #8
 801325e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013262:	6820      	ldr	r0, [r4, #0]
 8013264:	68a2      	ldr	r2, [r4, #8]
 8013266:	f1ba 0f00 	cmp.w	sl, #0
 801326a:	d0f4      	beq.n	8013256 <__sfvwrite_r+0x112>
 801326c:	0599      	lsls	r1, r3, #22
 801326e:	d563      	bpl.n	8013338 <__sfvwrite_r+0x1f4>
 8013270:	4552      	cmp	r2, sl
 8013272:	d836      	bhi.n	80132e2 <__sfvwrite_r+0x19e>
 8013274:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 8013278:	d033      	beq.n	80132e2 <__sfvwrite_r+0x19e>
 801327a:	6921      	ldr	r1, [r4, #16]
 801327c:	6965      	ldr	r5, [r4, #20]
 801327e:	eba0 0b01 	sub.w	fp, r0, r1
 8013282:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013286:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801328a:	f10b 0201 	add.w	r2, fp, #1
 801328e:	106d      	asrs	r5, r5, #1
 8013290:	4452      	add	r2, sl
 8013292:	4295      	cmp	r5, r2
 8013294:	bf38      	it	cc
 8013296:	4615      	movcc	r5, r2
 8013298:	055b      	lsls	r3, r3, #21
 801329a:	d53d      	bpl.n	8013318 <__sfvwrite_r+0x1d4>
 801329c:	4629      	mov	r1, r5
 801329e:	4630      	mov	r0, r6
 80132a0:	f7fd fc9e 	bl	8010be0 <_malloc_r>
 80132a4:	b948      	cbnz	r0, 80132ba <__sfvwrite_r+0x176>
 80132a6:	230c      	movs	r3, #12
 80132a8:	6033      	str	r3, [r6, #0]
 80132aa:	89a3      	ldrh	r3, [r4, #12]
 80132ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80132b0:	81a3      	strh	r3, [r4, #12]
 80132b2:	e7ac      	b.n	801320e <__sfvwrite_r+0xca>
 80132b4:	461f      	mov	r7, r3
 80132b6:	469a      	mov	sl, r3
 80132b8:	e7d1      	b.n	801325e <__sfvwrite_r+0x11a>
 80132ba:	465a      	mov	r2, fp
 80132bc:	6921      	ldr	r1, [r4, #16]
 80132be:	9001      	str	r0, [sp, #4]
 80132c0:	f7fd fb5a 	bl	8010978 <memcpy>
 80132c4:	89a2      	ldrh	r2, [r4, #12]
 80132c6:	9b01      	ldr	r3, [sp, #4]
 80132c8:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80132cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80132d0:	81a2      	strh	r2, [r4, #12]
 80132d2:	6123      	str	r3, [r4, #16]
 80132d4:	6165      	str	r5, [r4, #20]
 80132d6:	445b      	add	r3, fp
 80132d8:	eba5 050b 	sub.w	r5, r5, fp
 80132dc:	6023      	str	r3, [r4, #0]
 80132de:	4652      	mov	r2, sl
 80132e0:	60a5      	str	r5, [r4, #8]
 80132e2:	4552      	cmp	r2, sl
 80132e4:	bf28      	it	cs
 80132e6:	4652      	movcs	r2, sl
 80132e8:	6820      	ldr	r0, [r4, #0]
 80132ea:	9201      	str	r2, [sp, #4]
 80132ec:	4639      	mov	r1, r7
 80132ee:	f7fd faac 	bl	801084a <memmove>
 80132f2:	68a3      	ldr	r3, [r4, #8]
 80132f4:	9a01      	ldr	r2, [sp, #4]
 80132f6:	1a9b      	subs	r3, r3, r2
 80132f8:	60a3      	str	r3, [r4, #8]
 80132fa:	6823      	ldr	r3, [r4, #0]
 80132fc:	4413      	add	r3, r2
 80132fe:	4655      	mov	r5, sl
 8013300:	6023      	str	r3, [r4, #0]
 8013302:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013306:	1b5b      	subs	r3, r3, r5
 8013308:	442f      	add	r7, r5
 801330a:	ebaa 0a05 	sub.w	sl, sl, r5
 801330e:	f8c9 3008 	str.w	r3, [r9, #8]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d1a3      	bne.n	801325e <__sfvwrite_r+0x11a>
 8013316:	e71c      	b.n	8013152 <__sfvwrite_r+0xe>
 8013318:	462a      	mov	r2, r5
 801331a:	4630      	mov	r0, r6
 801331c:	f001 fb5e 	bl	80149dc <_realloc_r>
 8013320:	4603      	mov	r3, r0
 8013322:	2800      	cmp	r0, #0
 8013324:	d1d5      	bne.n	80132d2 <__sfvwrite_r+0x18e>
 8013326:	6921      	ldr	r1, [r4, #16]
 8013328:	4630      	mov	r0, r6
 801332a:	f7fd fb99 	bl	8010a60 <_free_r>
 801332e:	89a3      	ldrh	r3, [r4, #12]
 8013330:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013334:	81a3      	strh	r3, [r4, #12]
 8013336:	e7b6      	b.n	80132a6 <__sfvwrite_r+0x162>
 8013338:	6923      	ldr	r3, [r4, #16]
 801333a:	4283      	cmp	r3, r0
 801333c:	d302      	bcc.n	8013344 <__sfvwrite_r+0x200>
 801333e:	6961      	ldr	r1, [r4, #20]
 8013340:	4551      	cmp	r1, sl
 8013342:	d915      	bls.n	8013370 <__sfvwrite_r+0x22c>
 8013344:	4552      	cmp	r2, sl
 8013346:	bf28      	it	cs
 8013348:	4652      	movcs	r2, sl
 801334a:	4639      	mov	r1, r7
 801334c:	4615      	mov	r5, r2
 801334e:	f7fd fa7c 	bl	801084a <memmove>
 8013352:	68a3      	ldr	r3, [r4, #8]
 8013354:	6822      	ldr	r2, [r4, #0]
 8013356:	1b5b      	subs	r3, r3, r5
 8013358:	442a      	add	r2, r5
 801335a:	60a3      	str	r3, [r4, #8]
 801335c:	6022      	str	r2, [r4, #0]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d1cf      	bne.n	8013302 <__sfvwrite_r+0x1be>
 8013362:	4621      	mov	r1, r4
 8013364:	4630      	mov	r0, r6
 8013366:	f7ff fec7 	bl	80130f8 <_fflush_r>
 801336a:	2800      	cmp	r0, #0
 801336c:	d0c9      	beq.n	8013302 <__sfvwrite_r+0x1be>
 801336e:	e79c      	b.n	80132aa <__sfvwrite_r+0x166>
 8013370:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013374:	4553      	cmp	r3, sl
 8013376:	bf28      	it	cs
 8013378:	4653      	movcs	r3, sl
 801337a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 801337c:	fb93 f3f1 	sdiv	r3, r3, r1
 8013380:	463a      	mov	r2, r7
 8013382:	434b      	muls	r3, r1
 8013384:	4630      	mov	r0, r6
 8013386:	69e1      	ldr	r1, [r4, #28]
 8013388:	47a8      	blx	r5
 801338a:	1e05      	subs	r5, r0, #0
 801338c:	dcb9      	bgt.n	8013302 <__sfvwrite_r+0x1be>
 801338e:	e78c      	b.n	80132aa <__sfvwrite_r+0x166>
 8013390:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8013394:	2000      	movs	r0, #0
 8013396:	f108 0808 	add.w	r8, r8, #8
 801339a:	e6f2      	b.n	8013182 <__sfvwrite_r+0x3e>
 801339c:	f10b 0701 	add.w	r7, fp, #1
 80133a0:	e6ff      	b.n	80131a2 <__sfvwrite_r+0x5e>
 80133a2:	4293      	cmp	r3, r2
 80133a4:	dc08      	bgt.n	80133b8 <__sfvwrite_r+0x274>
 80133a6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80133a8:	69e1      	ldr	r1, [r4, #28]
 80133aa:	4652      	mov	r2, sl
 80133ac:	4630      	mov	r0, r6
 80133ae:	47a8      	blx	r5
 80133b0:	1e05      	subs	r5, r0, #0
 80133b2:	f73f af12 	bgt.w	80131da <__sfvwrite_r+0x96>
 80133b6:	e778      	b.n	80132aa <__sfvwrite_r+0x166>
 80133b8:	4651      	mov	r1, sl
 80133ba:	9201      	str	r2, [sp, #4]
 80133bc:	f7fd fa45 	bl	801084a <memmove>
 80133c0:	9a01      	ldr	r2, [sp, #4]
 80133c2:	68a3      	ldr	r3, [r4, #8]
 80133c4:	1a9b      	subs	r3, r3, r2
 80133c6:	60a3      	str	r3, [r4, #8]
 80133c8:	6823      	ldr	r3, [r4, #0]
 80133ca:	4413      	add	r3, r2
 80133cc:	6023      	str	r3, [r4, #0]
 80133ce:	4615      	mov	r5, r2
 80133d0:	e703      	b.n	80131da <__sfvwrite_r+0x96>
 80133d2:	2001      	movs	r0, #1
 80133d4:	e70a      	b.n	80131ec <__sfvwrite_r+0xa8>
 80133d6:	bf00      	nop
 80133d8:	7ffffc00 	.word	0x7ffffc00

080133dc <__swsetup_r>:
 80133dc:	b538      	push	{r3, r4, r5, lr}
 80133de:	4b29      	ldr	r3, [pc, #164]	@ (8013484 <__swsetup_r+0xa8>)
 80133e0:	4605      	mov	r5, r0
 80133e2:	6818      	ldr	r0, [r3, #0]
 80133e4:	460c      	mov	r4, r1
 80133e6:	b118      	cbz	r0, 80133f0 <__swsetup_r+0x14>
 80133e8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80133ea:	b90b      	cbnz	r3, 80133f0 <__swsetup_r+0x14>
 80133ec:	f7fd f992 	bl	8010714 <__sinit>
 80133f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133f4:	0719      	lsls	r1, r3, #28
 80133f6:	d422      	bmi.n	801343e <__swsetup_r+0x62>
 80133f8:	06da      	lsls	r2, r3, #27
 80133fa:	d407      	bmi.n	801340c <__swsetup_r+0x30>
 80133fc:	2209      	movs	r2, #9
 80133fe:	602a      	str	r2, [r5, #0]
 8013400:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013404:	81a3      	strh	r3, [r4, #12]
 8013406:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801340a:	e033      	b.n	8013474 <__swsetup_r+0x98>
 801340c:	0758      	lsls	r0, r3, #29
 801340e:	d512      	bpl.n	8013436 <__swsetup_r+0x5a>
 8013410:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013412:	b141      	cbz	r1, 8013426 <__swsetup_r+0x4a>
 8013414:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8013418:	4299      	cmp	r1, r3
 801341a:	d002      	beq.n	8013422 <__swsetup_r+0x46>
 801341c:	4628      	mov	r0, r5
 801341e:	f7fd fb1f 	bl	8010a60 <_free_r>
 8013422:	2300      	movs	r3, #0
 8013424:	6323      	str	r3, [r4, #48]	@ 0x30
 8013426:	89a3      	ldrh	r3, [r4, #12]
 8013428:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801342c:	81a3      	strh	r3, [r4, #12]
 801342e:	2300      	movs	r3, #0
 8013430:	6063      	str	r3, [r4, #4]
 8013432:	6923      	ldr	r3, [r4, #16]
 8013434:	6023      	str	r3, [r4, #0]
 8013436:	89a3      	ldrh	r3, [r4, #12]
 8013438:	f043 0308 	orr.w	r3, r3, #8
 801343c:	81a3      	strh	r3, [r4, #12]
 801343e:	6923      	ldr	r3, [r4, #16]
 8013440:	b94b      	cbnz	r3, 8013456 <__swsetup_r+0x7a>
 8013442:	89a3      	ldrh	r3, [r4, #12]
 8013444:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013448:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801344c:	d003      	beq.n	8013456 <__swsetup_r+0x7a>
 801344e:	4621      	mov	r1, r4
 8013450:	4628      	mov	r0, r5
 8013452:	f001 fcb7 	bl	8014dc4 <__smakebuf_r>
 8013456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801345a:	f013 0201 	ands.w	r2, r3, #1
 801345e:	d00a      	beq.n	8013476 <__swsetup_r+0x9a>
 8013460:	2200      	movs	r2, #0
 8013462:	60a2      	str	r2, [r4, #8]
 8013464:	6962      	ldr	r2, [r4, #20]
 8013466:	4252      	negs	r2, r2
 8013468:	61a2      	str	r2, [r4, #24]
 801346a:	6922      	ldr	r2, [r4, #16]
 801346c:	b942      	cbnz	r2, 8013480 <__swsetup_r+0xa4>
 801346e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013472:	d1c5      	bne.n	8013400 <__swsetup_r+0x24>
 8013474:	bd38      	pop	{r3, r4, r5, pc}
 8013476:	0799      	lsls	r1, r3, #30
 8013478:	bf58      	it	pl
 801347a:	6962      	ldrpl	r2, [r4, #20]
 801347c:	60a2      	str	r2, [r4, #8]
 801347e:	e7f4      	b.n	801346a <__swsetup_r+0x8e>
 8013480:	2000      	movs	r0, #0
 8013482:	e7f7      	b.n	8013474 <__swsetup_r+0x98>
 8013484:	2000003c 	.word	0x2000003c

08013488 <__fputwc>:
 8013488:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801348c:	4680      	mov	r8, r0
 801348e:	460f      	mov	r7, r1
 8013490:	4614      	mov	r4, r2
 8013492:	f000 f877 	bl	8013584 <__locale_mb_cur_max>
 8013496:	2801      	cmp	r0, #1
 8013498:	4605      	mov	r5, r0
 801349a:	d11b      	bne.n	80134d4 <__fputwc+0x4c>
 801349c:	1e7b      	subs	r3, r7, #1
 801349e:	2bfe      	cmp	r3, #254	@ 0xfe
 80134a0:	d818      	bhi.n	80134d4 <__fputwc+0x4c>
 80134a2:	f88d 7004 	strb.w	r7, [sp, #4]
 80134a6:	2600      	movs	r6, #0
 80134a8:	f10d 0904 	add.w	r9, sp, #4
 80134ac:	42ae      	cmp	r6, r5
 80134ae:	d021      	beq.n	80134f4 <__fputwc+0x6c>
 80134b0:	68a3      	ldr	r3, [r4, #8]
 80134b2:	f816 1009 	ldrb.w	r1, [r6, r9]
 80134b6:	3b01      	subs	r3, #1
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	60a3      	str	r3, [r4, #8]
 80134bc:	da04      	bge.n	80134c8 <__fputwc+0x40>
 80134be:	69a2      	ldr	r2, [r4, #24]
 80134c0:	4293      	cmp	r3, r2
 80134c2:	db1b      	blt.n	80134fc <__fputwc+0x74>
 80134c4:	290a      	cmp	r1, #10
 80134c6:	d019      	beq.n	80134fc <__fputwc+0x74>
 80134c8:	6823      	ldr	r3, [r4, #0]
 80134ca:	1c5a      	adds	r2, r3, #1
 80134cc:	6022      	str	r2, [r4, #0]
 80134ce:	7019      	strb	r1, [r3, #0]
 80134d0:	3601      	adds	r6, #1
 80134d2:	e7eb      	b.n	80134ac <__fputwc+0x24>
 80134d4:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 80134d8:	463a      	mov	r2, r7
 80134da:	a901      	add	r1, sp, #4
 80134dc:	4640      	mov	r0, r8
 80134de:	f001 fc33 	bl	8014d48 <_wcrtomb_r>
 80134e2:	1c43      	adds	r3, r0, #1
 80134e4:	4605      	mov	r5, r0
 80134e6:	d1de      	bne.n	80134a6 <__fputwc+0x1e>
 80134e8:	89a3      	ldrh	r3, [r4, #12]
 80134ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80134ee:	81a3      	strh	r3, [r4, #12]
 80134f0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80134f4:	4638      	mov	r0, r7
 80134f6:	b003      	add	sp, #12
 80134f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134fc:	4622      	mov	r2, r4
 80134fe:	4640      	mov	r0, r8
 8013500:	f001 fc9c 	bl	8014e3c <__swbuf_r>
 8013504:	3001      	adds	r0, #1
 8013506:	d1e3      	bne.n	80134d0 <__fputwc+0x48>
 8013508:	e7f2      	b.n	80134f0 <__fputwc+0x68>

0801350a <_fputwc_r>:
 801350a:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 801350c:	07db      	lsls	r3, r3, #31
 801350e:	b570      	push	{r4, r5, r6, lr}
 8013510:	4605      	mov	r5, r0
 8013512:	460e      	mov	r6, r1
 8013514:	4614      	mov	r4, r2
 8013516:	d405      	bmi.n	8013524 <_fputwc_r+0x1a>
 8013518:	8993      	ldrh	r3, [r2, #12]
 801351a:	0598      	lsls	r0, r3, #22
 801351c:	d402      	bmi.n	8013524 <_fputwc_r+0x1a>
 801351e:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8013520:	f7fd fa28 	bl	8010974 <__retarget_lock_acquire_recursive>
 8013524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013528:	0499      	lsls	r1, r3, #18
 801352a:	d406      	bmi.n	801353a <_fputwc_r+0x30>
 801352c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013530:	81a3      	strh	r3, [r4, #12]
 8013532:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013534:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013538:	6663      	str	r3, [r4, #100]	@ 0x64
 801353a:	4622      	mov	r2, r4
 801353c:	4628      	mov	r0, r5
 801353e:	4631      	mov	r1, r6
 8013540:	f7ff ffa2 	bl	8013488 <__fputwc>
 8013544:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013546:	07da      	lsls	r2, r3, #31
 8013548:	4605      	mov	r5, r0
 801354a:	d405      	bmi.n	8013558 <_fputwc_r+0x4e>
 801354c:	89a3      	ldrh	r3, [r4, #12]
 801354e:	059b      	lsls	r3, r3, #22
 8013550:	d402      	bmi.n	8013558 <_fputwc_r+0x4e>
 8013552:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013554:	f7fd fa0f 	bl	8010976 <__retarget_lock_release_recursive>
 8013558:	4628      	mov	r0, r5
 801355a:	bd70      	pop	{r4, r5, r6, pc}

0801355c <strncpy>:
 801355c:	b510      	push	{r4, lr}
 801355e:	3901      	subs	r1, #1
 8013560:	4603      	mov	r3, r0
 8013562:	b132      	cbz	r2, 8013572 <strncpy+0x16>
 8013564:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013568:	f803 4b01 	strb.w	r4, [r3], #1
 801356c:	3a01      	subs	r2, #1
 801356e:	2c00      	cmp	r4, #0
 8013570:	d1f7      	bne.n	8013562 <strncpy+0x6>
 8013572:	441a      	add	r2, r3
 8013574:	2100      	movs	r1, #0
 8013576:	4293      	cmp	r3, r2
 8013578:	d100      	bne.n	801357c <strncpy+0x20>
 801357a:	bd10      	pop	{r4, pc}
 801357c:	f803 1b01 	strb.w	r1, [r3], #1
 8013580:	e7f9      	b.n	8013576 <strncpy+0x1a>
	...

08013584 <__locale_mb_cur_max>:
 8013584:	4b01      	ldr	r3, [pc, #4]	@ (801358c <__locale_mb_cur_max+0x8>)
 8013586:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 801358a:	4770      	bx	lr
 801358c:	20000574 	.word	0x20000574

08013590 <_localeconv_r>:
 8013590:	4800      	ldr	r0, [pc, #0]	@ (8013594 <_localeconv_r+0x4>)
 8013592:	4770      	bx	lr
 8013594:	20000664 	.word	0x20000664

08013598 <_sbrk_r>:
 8013598:	b538      	push	{r3, r4, r5, lr}
 801359a:	4d06      	ldr	r5, [pc, #24]	@ (80135b4 <_sbrk_r+0x1c>)
 801359c:	2300      	movs	r3, #0
 801359e:	4604      	mov	r4, r0
 80135a0:	4608      	mov	r0, r1
 80135a2:	602b      	str	r3, [r5, #0]
 80135a4:	f7ee fbb0 	bl	8001d08 <_sbrk>
 80135a8:	1c43      	adds	r3, r0, #1
 80135aa:	d102      	bne.n	80135b2 <_sbrk_r+0x1a>
 80135ac:	682b      	ldr	r3, [r5, #0]
 80135ae:	b103      	cbz	r3, 80135b2 <_sbrk_r+0x1a>
 80135b0:	6023      	str	r3, [r4, #0]
 80135b2:	bd38      	pop	{r3, r4, r5, pc}
 80135b4:	20008cfc 	.word	0x20008cfc

080135b8 <__libc_fini_array>:
 80135b8:	b538      	push	{r3, r4, r5, lr}
 80135ba:	4d07      	ldr	r5, [pc, #28]	@ (80135d8 <__libc_fini_array+0x20>)
 80135bc:	4c07      	ldr	r4, [pc, #28]	@ (80135dc <__libc_fini_array+0x24>)
 80135be:	1b64      	subs	r4, r4, r5
 80135c0:	10a4      	asrs	r4, r4, #2
 80135c2:	b91c      	cbnz	r4, 80135cc <__libc_fini_array+0x14>
 80135c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80135c8:	f001 bd5c 	b.w	8015084 <_fini>
 80135cc:	3c01      	subs	r4, #1
 80135ce:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80135d2:	4798      	blx	r3
 80135d4:	e7f5      	b.n	80135c2 <__libc_fini_array+0xa>
 80135d6:	bf00      	nop
 80135d8:	08017f04 	.word	0x08017f04
 80135dc:	08017f08 	.word	0x08017f08

080135e0 <sysconf>:
 80135e0:	2808      	cmp	r0, #8
 80135e2:	b508      	push	{r3, lr}
 80135e4:	d006      	beq.n	80135f4 <sysconf+0x14>
 80135e6:	f7fd f999 	bl	801091c <__errno>
 80135ea:	2316      	movs	r3, #22
 80135ec:	6003      	str	r3, [r0, #0]
 80135ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80135f2:	bd08      	pop	{r3, pc}
 80135f4:	2080      	movs	r0, #128	@ 0x80
 80135f6:	e7fc      	b.n	80135f2 <sysconf+0x12>

080135f8 <frexp>:
 80135f8:	b570      	push	{r4, r5, r6, lr}
 80135fa:	2100      	movs	r1, #0
 80135fc:	ec55 4b10 	vmov	r4, r5, d0
 8013600:	6001      	str	r1, [r0, #0]
 8013602:	4915      	ldr	r1, [pc, #84]	@ (8013658 <frexp+0x60>)
 8013604:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8013608:	428a      	cmp	r2, r1
 801360a:	4606      	mov	r6, r0
 801360c:	462b      	mov	r3, r5
 801360e:	d820      	bhi.n	8013652 <frexp+0x5a>
 8013610:	4621      	mov	r1, r4
 8013612:	4311      	orrs	r1, r2
 8013614:	d01d      	beq.n	8013652 <frexp+0x5a>
 8013616:	4911      	ldr	r1, [pc, #68]	@ (801365c <frexp+0x64>)
 8013618:	4029      	ands	r1, r5
 801361a:	b961      	cbnz	r1, 8013636 <frexp+0x3e>
 801361c:	4b10      	ldr	r3, [pc, #64]	@ (8013660 <frexp+0x68>)
 801361e:	2200      	movs	r2, #0
 8013620:	4620      	mov	r0, r4
 8013622:	4629      	mov	r1, r5
 8013624:	f7ed f808 	bl	8000638 <__aeabi_dmul>
 8013628:	460b      	mov	r3, r1
 801362a:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 801362e:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8013632:	4604      	mov	r4, r0
 8013634:	6031      	str	r1, [r6, #0]
 8013636:	6831      	ldr	r1, [r6, #0]
 8013638:	1512      	asrs	r2, r2, #20
 801363a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801363e:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 8013642:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013646:	4411      	add	r1, r2
 8013648:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 801364c:	6031      	str	r1, [r6, #0]
 801364e:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 8013652:	ec45 4b10 	vmov	d0, r4, r5
 8013656:	bd70      	pop	{r4, r5, r6, pc}
 8013658:	7fefffff 	.word	0x7fefffff
 801365c:	7ff00000 	.word	0x7ff00000
 8013660:	43500000 	.word	0x43500000

08013664 <__register_exitproc>:
 8013664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013668:	f8df a074 	ldr.w	sl, [pc, #116]	@ 80136e0 <__register_exitproc+0x7c>
 801366c:	4606      	mov	r6, r0
 801366e:	f8da 0000 	ldr.w	r0, [sl]
 8013672:	4698      	mov	r8, r3
 8013674:	460f      	mov	r7, r1
 8013676:	4691      	mov	r9, r2
 8013678:	f7fd f97c 	bl	8010974 <__retarget_lock_acquire_recursive>
 801367c:	4b16      	ldr	r3, [pc, #88]	@ (80136d8 <__register_exitproc+0x74>)
 801367e:	681c      	ldr	r4, [r3, #0]
 8013680:	b90c      	cbnz	r4, 8013686 <__register_exitproc+0x22>
 8013682:	4c16      	ldr	r4, [pc, #88]	@ (80136dc <__register_exitproc+0x78>)
 8013684:	601c      	str	r4, [r3, #0]
 8013686:	6865      	ldr	r5, [r4, #4]
 8013688:	f8da 0000 	ldr.w	r0, [sl]
 801368c:	2d1f      	cmp	r5, #31
 801368e:	dd05      	ble.n	801369c <__register_exitproc+0x38>
 8013690:	f7fd f971 	bl	8010976 <__retarget_lock_release_recursive>
 8013694:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801369c:	b19e      	cbz	r6, 80136c6 <__register_exitproc+0x62>
 801369e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80136a2:	2201      	movs	r2, #1
 80136a4:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 80136a8:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 80136ac:	40aa      	lsls	r2, r5
 80136ae:	4313      	orrs	r3, r2
 80136b0:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 80136b4:	2e02      	cmp	r6, #2
 80136b6:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 80136ba:	bf02      	ittt	eq
 80136bc:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 80136c0:	4313      	orreq	r3, r2
 80136c2:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 80136c6:	1c6b      	adds	r3, r5, #1
 80136c8:	3502      	adds	r5, #2
 80136ca:	6063      	str	r3, [r4, #4]
 80136cc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80136d0:	f7fd f951 	bl	8010976 <__retarget_lock_release_recursive>
 80136d4:	2000      	movs	r0, #0
 80136d6:	e7df      	b.n	8013698 <__register_exitproc+0x34>
 80136d8:	20008d04 	.word	0x20008d04
 80136dc:	20008d3c 	.word	0x20008d3c
 80136e0:	20000160 	.word	0x20000160

080136e4 <quorem>:
 80136e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136e8:	6903      	ldr	r3, [r0, #16]
 80136ea:	690c      	ldr	r4, [r1, #16]
 80136ec:	42a3      	cmp	r3, r4
 80136ee:	4607      	mov	r7, r0
 80136f0:	db7e      	blt.n	80137f0 <quorem+0x10c>
 80136f2:	3c01      	subs	r4, #1
 80136f4:	f101 0814 	add.w	r8, r1, #20
 80136f8:	00a3      	lsls	r3, r4, #2
 80136fa:	f100 0514 	add.w	r5, r0, #20
 80136fe:	9300      	str	r3, [sp, #0]
 8013700:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013704:	9301      	str	r3, [sp, #4]
 8013706:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801370a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801370e:	3301      	adds	r3, #1
 8013710:	429a      	cmp	r2, r3
 8013712:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013716:	fbb2 f6f3 	udiv	r6, r2, r3
 801371a:	d32e      	bcc.n	801377a <quorem+0x96>
 801371c:	f04f 0a00 	mov.w	sl, #0
 8013720:	46c4      	mov	ip, r8
 8013722:	46ae      	mov	lr, r5
 8013724:	46d3      	mov	fp, sl
 8013726:	f85c 3b04 	ldr.w	r3, [ip], #4
 801372a:	b298      	uxth	r0, r3
 801372c:	fb06 a000 	mla	r0, r6, r0, sl
 8013730:	0c02      	lsrs	r2, r0, #16
 8013732:	0c1b      	lsrs	r3, r3, #16
 8013734:	fb06 2303 	mla	r3, r6, r3, r2
 8013738:	f8de 2000 	ldr.w	r2, [lr]
 801373c:	b280      	uxth	r0, r0
 801373e:	b292      	uxth	r2, r2
 8013740:	1a12      	subs	r2, r2, r0
 8013742:	445a      	add	r2, fp
 8013744:	f8de 0000 	ldr.w	r0, [lr]
 8013748:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801374c:	b29b      	uxth	r3, r3
 801374e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013752:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013756:	b292      	uxth	r2, r2
 8013758:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801375c:	45e1      	cmp	r9, ip
 801375e:	f84e 2b04 	str.w	r2, [lr], #4
 8013762:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013766:	d2de      	bcs.n	8013726 <quorem+0x42>
 8013768:	9b00      	ldr	r3, [sp, #0]
 801376a:	58eb      	ldr	r3, [r5, r3]
 801376c:	b92b      	cbnz	r3, 801377a <quorem+0x96>
 801376e:	9b01      	ldr	r3, [sp, #4]
 8013770:	3b04      	subs	r3, #4
 8013772:	429d      	cmp	r5, r3
 8013774:	461a      	mov	r2, r3
 8013776:	d32f      	bcc.n	80137d8 <quorem+0xf4>
 8013778:	613c      	str	r4, [r7, #16]
 801377a:	4638      	mov	r0, r7
 801377c:	f001 f826 	bl	80147cc <__mcmp>
 8013780:	2800      	cmp	r0, #0
 8013782:	db25      	blt.n	80137d0 <quorem+0xec>
 8013784:	4629      	mov	r1, r5
 8013786:	2000      	movs	r0, #0
 8013788:	f858 2b04 	ldr.w	r2, [r8], #4
 801378c:	f8d1 c000 	ldr.w	ip, [r1]
 8013790:	fa1f fe82 	uxth.w	lr, r2
 8013794:	fa1f f38c 	uxth.w	r3, ip
 8013798:	eba3 030e 	sub.w	r3, r3, lr
 801379c:	4403      	add	r3, r0
 801379e:	0c12      	lsrs	r2, r2, #16
 80137a0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80137a4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80137a8:	b29b      	uxth	r3, r3
 80137aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80137ae:	45c1      	cmp	r9, r8
 80137b0:	f841 3b04 	str.w	r3, [r1], #4
 80137b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80137b8:	d2e6      	bcs.n	8013788 <quorem+0xa4>
 80137ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80137be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80137c2:	b922      	cbnz	r2, 80137ce <quorem+0xea>
 80137c4:	3b04      	subs	r3, #4
 80137c6:	429d      	cmp	r5, r3
 80137c8:	461a      	mov	r2, r3
 80137ca:	d30b      	bcc.n	80137e4 <quorem+0x100>
 80137cc:	613c      	str	r4, [r7, #16]
 80137ce:	3601      	adds	r6, #1
 80137d0:	4630      	mov	r0, r6
 80137d2:	b003      	add	sp, #12
 80137d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137d8:	6812      	ldr	r2, [r2, #0]
 80137da:	3b04      	subs	r3, #4
 80137dc:	2a00      	cmp	r2, #0
 80137de:	d1cb      	bne.n	8013778 <quorem+0x94>
 80137e0:	3c01      	subs	r4, #1
 80137e2:	e7c6      	b.n	8013772 <quorem+0x8e>
 80137e4:	6812      	ldr	r2, [r2, #0]
 80137e6:	3b04      	subs	r3, #4
 80137e8:	2a00      	cmp	r2, #0
 80137ea:	d1ef      	bne.n	80137cc <quorem+0xe8>
 80137ec:	3c01      	subs	r4, #1
 80137ee:	e7ea      	b.n	80137c6 <quorem+0xe2>
 80137f0:	2000      	movs	r0, #0
 80137f2:	e7ee      	b.n	80137d2 <quorem+0xee>
 80137f4:	0000      	movs	r0, r0
	...

080137f8 <_dtoa_r>:
 80137f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137fc:	b099      	sub	sp, #100	@ 0x64
 80137fe:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013802:	9109      	str	r1, [sp, #36]	@ 0x24
 8013804:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8013806:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8013808:	920e      	str	r2, [sp, #56]	@ 0x38
 801380a:	ec55 4b10 	vmov	r4, r5, d0
 801380e:	4683      	mov	fp, r0
 8013810:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013812:	b149      	cbz	r1, 8013828 <_dtoa_r+0x30>
 8013814:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013816:	604a      	str	r2, [r1, #4]
 8013818:	2301      	movs	r3, #1
 801381a:	4093      	lsls	r3, r2
 801381c:	608b      	str	r3, [r1, #8]
 801381e:	f000 fdce 	bl	80143be <_Bfree>
 8013822:	2300      	movs	r3, #0
 8013824:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 8013828:	1e2b      	subs	r3, r5, #0
 801382a:	bfb9      	ittee	lt
 801382c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013830:	9303      	strlt	r3, [sp, #12]
 8013832:	2300      	movge	r3, #0
 8013834:	6033      	strge	r3, [r6, #0]
 8013836:	9f03      	ldr	r7, [sp, #12]
 8013838:	4b97      	ldr	r3, [pc, #604]	@ (8013a98 <_dtoa_r+0x2a0>)
 801383a:	bfbc      	itt	lt
 801383c:	2201      	movlt	r2, #1
 801383e:	6032      	strlt	r2, [r6, #0]
 8013840:	43bb      	bics	r3, r7
 8013842:	d114      	bne.n	801386e <_dtoa_r+0x76>
 8013844:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013846:	f242 730f 	movw	r3, #9999	@ 0x270f
 801384a:	6013      	str	r3, [r2, #0]
 801384c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013850:	4323      	orrs	r3, r4
 8013852:	f000 854c 	beq.w	80142ee <_dtoa_r+0xaf6>
 8013856:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013858:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8013ab0 <_dtoa_r+0x2b8>
 801385c:	b11b      	cbz	r3, 8013866 <_dtoa_r+0x6e>
 801385e:	f10a 0303 	add.w	r3, sl, #3
 8013862:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013864:	6013      	str	r3, [r2, #0]
 8013866:	4650      	mov	r0, sl
 8013868:	b019      	add	sp, #100	@ 0x64
 801386a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801386e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013872:	2200      	movs	r2, #0
 8013874:	ec51 0b17 	vmov	r0, r1, d7
 8013878:	2300      	movs	r3, #0
 801387a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801387e:	f7ed f943 	bl	8000b08 <__aeabi_dcmpeq>
 8013882:	4680      	mov	r8, r0
 8013884:	b150      	cbz	r0, 801389c <_dtoa_r+0xa4>
 8013886:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013888:	2301      	movs	r3, #1
 801388a:	6013      	str	r3, [r2, #0]
 801388c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801388e:	b113      	cbz	r3, 8013896 <_dtoa_r+0x9e>
 8013890:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013892:	4b82      	ldr	r3, [pc, #520]	@ (8013a9c <_dtoa_r+0x2a4>)
 8013894:	6013      	str	r3, [r2, #0]
 8013896:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8013ab4 <_dtoa_r+0x2bc>
 801389a:	e7e4      	b.n	8013866 <_dtoa_r+0x6e>
 801389c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80138a0:	aa16      	add	r2, sp, #88	@ 0x58
 80138a2:	a917      	add	r1, sp, #92	@ 0x5c
 80138a4:	4658      	mov	r0, fp
 80138a6:	f001 f841 	bl	801492c <__d2b>
 80138aa:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80138ae:	4681      	mov	r9, r0
 80138b0:	2e00      	cmp	r6, #0
 80138b2:	d077      	beq.n	80139a4 <_dtoa_r+0x1ac>
 80138b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80138b6:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80138ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80138be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80138c2:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80138c6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80138ca:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80138ce:	4619      	mov	r1, r3
 80138d0:	2200      	movs	r2, #0
 80138d2:	4b73      	ldr	r3, [pc, #460]	@ (8013aa0 <_dtoa_r+0x2a8>)
 80138d4:	f7ec fcf8 	bl	80002c8 <__aeabi_dsub>
 80138d8:	a369      	add	r3, pc, #420	@ (adr r3, 8013a80 <_dtoa_r+0x288>)
 80138da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138de:	f7ec feab 	bl	8000638 <__aeabi_dmul>
 80138e2:	a369      	add	r3, pc, #420	@ (adr r3, 8013a88 <_dtoa_r+0x290>)
 80138e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138e8:	f7ec fcf0 	bl	80002cc <__adddf3>
 80138ec:	4604      	mov	r4, r0
 80138ee:	4630      	mov	r0, r6
 80138f0:	460d      	mov	r5, r1
 80138f2:	f7ec fe37 	bl	8000564 <__aeabi_i2d>
 80138f6:	a366      	add	r3, pc, #408	@ (adr r3, 8013a90 <_dtoa_r+0x298>)
 80138f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138fc:	f7ec fe9c 	bl	8000638 <__aeabi_dmul>
 8013900:	4602      	mov	r2, r0
 8013902:	460b      	mov	r3, r1
 8013904:	4620      	mov	r0, r4
 8013906:	4629      	mov	r1, r5
 8013908:	f7ec fce0 	bl	80002cc <__adddf3>
 801390c:	4604      	mov	r4, r0
 801390e:	460d      	mov	r5, r1
 8013910:	f7ed f942 	bl	8000b98 <__aeabi_d2iz>
 8013914:	2200      	movs	r2, #0
 8013916:	4607      	mov	r7, r0
 8013918:	2300      	movs	r3, #0
 801391a:	4620      	mov	r0, r4
 801391c:	4629      	mov	r1, r5
 801391e:	f7ed f8fd 	bl	8000b1c <__aeabi_dcmplt>
 8013922:	b140      	cbz	r0, 8013936 <_dtoa_r+0x13e>
 8013924:	4638      	mov	r0, r7
 8013926:	f7ec fe1d 	bl	8000564 <__aeabi_i2d>
 801392a:	4622      	mov	r2, r4
 801392c:	462b      	mov	r3, r5
 801392e:	f7ed f8eb 	bl	8000b08 <__aeabi_dcmpeq>
 8013932:	b900      	cbnz	r0, 8013936 <_dtoa_r+0x13e>
 8013934:	3f01      	subs	r7, #1
 8013936:	2f16      	cmp	r7, #22
 8013938:	d851      	bhi.n	80139de <_dtoa_r+0x1e6>
 801393a:	4b5a      	ldr	r3, [pc, #360]	@ (8013aa4 <_dtoa_r+0x2ac>)
 801393c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013944:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013948:	f7ed f8e8 	bl	8000b1c <__aeabi_dcmplt>
 801394c:	2800      	cmp	r0, #0
 801394e:	d048      	beq.n	80139e2 <_dtoa_r+0x1ea>
 8013950:	3f01      	subs	r7, #1
 8013952:	2300      	movs	r3, #0
 8013954:	9312      	str	r3, [sp, #72]	@ 0x48
 8013956:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013958:	1b9b      	subs	r3, r3, r6
 801395a:	1e5a      	subs	r2, r3, #1
 801395c:	bf44      	itt	mi
 801395e:	f1c3 0801 	rsbmi	r8, r3, #1
 8013962:	2300      	movmi	r3, #0
 8013964:	9208      	str	r2, [sp, #32]
 8013966:	bf54      	ite	pl
 8013968:	f04f 0800 	movpl.w	r8, #0
 801396c:	9308      	strmi	r3, [sp, #32]
 801396e:	2f00      	cmp	r7, #0
 8013970:	db39      	blt.n	80139e6 <_dtoa_r+0x1ee>
 8013972:	9b08      	ldr	r3, [sp, #32]
 8013974:	970f      	str	r7, [sp, #60]	@ 0x3c
 8013976:	443b      	add	r3, r7
 8013978:	9308      	str	r3, [sp, #32]
 801397a:	2300      	movs	r3, #0
 801397c:	930a      	str	r3, [sp, #40]	@ 0x28
 801397e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013980:	2b09      	cmp	r3, #9
 8013982:	d865      	bhi.n	8013a50 <_dtoa_r+0x258>
 8013984:	2b05      	cmp	r3, #5
 8013986:	bfc4      	itt	gt
 8013988:	3b04      	subgt	r3, #4
 801398a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801398c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801398e:	f1a3 0302 	sub.w	r3, r3, #2
 8013992:	bfcc      	ite	gt
 8013994:	2400      	movgt	r4, #0
 8013996:	2401      	movle	r4, #1
 8013998:	2b03      	cmp	r3, #3
 801399a:	d864      	bhi.n	8013a66 <_dtoa_r+0x26e>
 801399c:	e8df f003 	tbb	[pc, r3]
 80139a0:	5635372a 	.word	0x5635372a
 80139a4:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80139a8:	441e      	add	r6, r3
 80139aa:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80139ae:	2b20      	cmp	r3, #32
 80139b0:	bfc1      	itttt	gt
 80139b2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80139b6:	409f      	lslgt	r7, r3
 80139b8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80139bc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80139c0:	bfd6      	itet	le
 80139c2:	f1c3 0320 	rsble	r3, r3, #32
 80139c6:	ea47 0003 	orrgt.w	r0, r7, r3
 80139ca:	fa04 f003 	lslle.w	r0, r4, r3
 80139ce:	f7ec fdb9 	bl	8000544 <__aeabi_ui2d>
 80139d2:	2201      	movs	r2, #1
 80139d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80139d8:	3e01      	subs	r6, #1
 80139da:	9214      	str	r2, [sp, #80]	@ 0x50
 80139dc:	e777      	b.n	80138ce <_dtoa_r+0xd6>
 80139de:	2301      	movs	r3, #1
 80139e0:	e7b8      	b.n	8013954 <_dtoa_r+0x15c>
 80139e2:	9012      	str	r0, [sp, #72]	@ 0x48
 80139e4:	e7b7      	b.n	8013956 <_dtoa_r+0x15e>
 80139e6:	427b      	negs	r3, r7
 80139e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80139ea:	2300      	movs	r3, #0
 80139ec:	eba8 0807 	sub.w	r8, r8, r7
 80139f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80139f2:	e7c4      	b.n	801397e <_dtoa_r+0x186>
 80139f4:	2300      	movs	r3, #0
 80139f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80139f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	dc36      	bgt.n	8013a6c <_dtoa_r+0x274>
 80139fe:	2301      	movs	r3, #1
 8013a00:	9300      	str	r3, [sp, #0]
 8013a02:	9307      	str	r3, [sp, #28]
 8013a04:	461a      	mov	r2, r3
 8013a06:	920e      	str	r2, [sp, #56]	@ 0x38
 8013a08:	e00b      	b.n	8013a22 <_dtoa_r+0x22a>
 8013a0a:	2301      	movs	r3, #1
 8013a0c:	e7f3      	b.n	80139f6 <_dtoa_r+0x1fe>
 8013a0e:	2300      	movs	r3, #0
 8013a10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013a12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a14:	18fb      	adds	r3, r7, r3
 8013a16:	9300      	str	r3, [sp, #0]
 8013a18:	3301      	adds	r3, #1
 8013a1a:	2b01      	cmp	r3, #1
 8013a1c:	9307      	str	r3, [sp, #28]
 8013a1e:	bfb8      	it	lt
 8013a20:	2301      	movlt	r3, #1
 8013a22:	2100      	movs	r1, #0
 8013a24:	2204      	movs	r2, #4
 8013a26:	f102 0014 	add.w	r0, r2, #20
 8013a2a:	4298      	cmp	r0, r3
 8013a2c:	d922      	bls.n	8013a74 <_dtoa_r+0x27c>
 8013a2e:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 8013a32:	4658      	mov	r0, fp
 8013a34:	f000 fc9e 	bl	8014374 <_Balloc>
 8013a38:	4682      	mov	sl, r0
 8013a3a:	2800      	cmp	r0, #0
 8013a3c:	d13c      	bne.n	8013ab8 <_dtoa_r+0x2c0>
 8013a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8013aa8 <_dtoa_r+0x2b0>)
 8013a40:	4602      	mov	r2, r0
 8013a42:	f240 11af 	movw	r1, #431	@ 0x1af
 8013a46:	4819      	ldr	r0, [pc, #100]	@ (8013aac <_dtoa_r+0x2b4>)
 8013a48:	f001 fa64 	bl	8014f14 <__assert_func>
 8013a4c:	2301      	movs	r3, #1
 8013a4e:	e7df      	b.n	8013a10 <_dtoa_r+0x218>
 8013a50:	2401      	movs	r4, #1
 8013a52:	2300      	movs	r3, #0
 8013a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a56:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013a58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013a5c:	9300      	str	r3, [sp, #0]
 8013a5e:	9307      	str	r3, [sp, #28]
 8013a60:	2200      	movs	r2, #0
 8013a62:	2312      	movs	r3, #18
 8013a64:	e7cf      	b.n	8013a06 <_dtoa_r+0x20e>
 8013a66:	2301      	movs	r3, #1
 8013a68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013a6a:	e7f5      	b.n	8013a58 <_dtoa_r+0x260>
 8013a6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a6e:	9300      	str	r3, [sp, #0]
 8013a70:	9307      	str	r3, [sp, #28]
 8013a72:	e7d6      	b.n	8013a22 <_dtoa_r+0x22a>
 8013a74:	3101      	adds	r1, #1
 8013a76:	0052      	lsls	r2, r2, #1
 8013a78:	e7d5      	b.n	8013a26 <_dtoa_r+0x22e>
 8013a7a:	bf00      	nop
 8013a7c:	f3af 8000 	nop.w
 8013a80:	636f4361 	.word	0x636f4361
 8013a84:	3fd287a7 	.word	0x3fd287a7
 8013a88:	8b60c8b3 	.word	0x8b60c8b3
 8013a8c:	3fc68a28 	.word	0x3fc68a28
 8013a90:	509f79fb 	.word	0x509f79fb
 8013a94:	3fd34413 	.word	0x3fd34413
 8013a98:	7ff00000 	.word	0x7ff00000
 8013a9c:	08017ca2 	.word	0x08017ca2
 8013aa0:	3ff80000 	.word	0x3ff80000
 8013aa4:	08017df0 	.word	0x08017df0
 8013aa8:	08017cfa 	.word	0x08017cfa
 8013aac:	08017d0b 	.word	0x08017d0b
 8013ab0:	08017cf6 	.word	0x08017cf6
 8013ab4:	08017ca1 	.word	0x08017ca1
 8013ab8:	9b07      	ldr	r3, [sp, #28]
 8013aba:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 8013abe:	2b0e      	cmp	r3, #14
 8013ac0:	f200 80a4 	bhi.w	8013c0c <_dtoa_r+0x414>
 8013ac4:	2c00      	cmp	r4, #0
 8013ac6:	f000 80a1 	beq.w	8013c0c <_dtoa_r+0x414>
 8013aca:	2f00      	cmp	r7, #0
 8013acc:	dd33      	ble.n	8013b36 <_dtoa_r+0x33e>
 8013ace:	4bae      	ldr	r3, [pc, #696]	@ (8013d88 <_dtoa_r+0x590>)
 8013ad0:	f007 020f 	and.w	r2, r7, #15
 8013ad4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013ad8:	ed93 7b00 	vldr	d7, [r3]
 8013adc:	05f8      	lsls	r0, r7, #23
 8013ade:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013ae2:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013ae6:	d516      	bpl.n	8013b16 <_dtoa_r+0x31e>
 8013ae8:	4ba8      	ldr	r3, [pc, #672]	@ (8013d8c <_dtoa_r+0x594>)
 8013aea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013aee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013af2:	f7ec fecb 	bl	800088c <__aeabi_ddiv>
 8013af6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013afa:	f004 040f 	and.w	r4, r4, #15
 8013afe:	2603      	movs	r6, #3
 8013b00:	4da2      	ldr	r5, [pc, #648]	@ (8013d8c <_dtoa_r+0x594>)
 8013b02:	b954      	cbnz	r4, 8013b1a <_dtoa_r+0x322>
 8013b04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b0c:	f7ec febe 	bl	800088c <__aeabi_ddiv>
 8013b10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b14:	e028      	b.n	8013b68 <_dtoa_r+0x370>
 8013b16:	2602      	movs	r6, #2
 8013b18:	e7f2      	b.n	8013b00 <_dtoa_r+0x308>
 8013b1a:	07e1      	lsls	r1, r4, #31
 8013b1c:	d508      	bpl.n	8013b30 <_dtoa_r+0x338>
 8013b1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013b26:	f7ec fd87 	bl	8000638 <__aeabi_dmul>
 8013b2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013b2e:	3601      	adds	r6, #1
 8013b30:	1064      	asrs	r4, r4, #1
 8013b32:	3508      	adds	r5, #8
 8013b34:	e7e5      	b.n	8013b02 <_dtoa_r+0x30a>
 8013b36:	f000 80d2 	beq.w	8013cde <_dtoa_r+0x4e6>
 8013b3a:	427c      	negs	r4, r7
 8013b3c:	4b92      	ldr	r3, [pc, #584]	@ (8013d88 <_dtoa_r+0x590>)
 8013b3e:	4d93      	ldr	r5, [pc, #588]	@ (8013d8c <_dtoa_r+0x594>)
 8013b40:	f004 020f 	and.w	r2, r4, #15
 8013b44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013b50:	f7ec fd72 	bl	8000638 <__aeabi_dmul>
 8013b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b58:	1124      	asrs	r4, r4, #4
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	2602      	movs	r6, #2
 8013b5e:	2c00      	cmp	r4, #0
 8013b60:	f040 80b2 	bne.w	8013cc8 <_dtoa_r+0x4d0>
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d1d3      	bne.n	8013b10 <_dtoa_r+0x318>
 8013b68:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013b6a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	f000 80b7 	beq.w	8013ce2 <_dtoa_r+0x4ea>
 8013b74:	4b86      	ldr	r3, [pc, #536]	@ (8013d90 <_dtoa_r+0x598>)
 8013b76:	2200      	movs	r2, #0
 8013b78:	4620      	mov	r0, r4
 8013b7a:	4629      	mov	r1, r5
 8013b7c:	f7ec ffce 	bl	8000b1c <__aeabi_dcmplt>
 8013b80:	2800      	cmp	r0, #0
 8013b82:	f000 80ae 	beq.w	8013ce2 <_dtoa_r+0x4ea>
 8013b86:	9b07      	ldr	r3, [sp, #28]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	f000 80aa 	beq.w	8013ce2 <_dtoa_r+0x4ea>
 8013b8e:	9b00      	ldr	r3, [sp, #0]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	dd37      	ble.n	8013c04 <_dtoa_r+0x40c>
 8013b94:	1e7b      	subs	r3, r7, #1
 8013b96:	9304      	str	r3, [sp, #16]
 8013b98:	4620      	mov	r0, r4
 8013b9a:	4b7e      	ldr	r3, [pc, #504]	@ (8013d94 <_dtoa_r+0x59c>)
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	4629      	mov	r1, r5
 8013ba0:	f7ec fd4a 	bl	8000638 <__aeabi_dmul>
 8013ba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ba8:	9c00      	ldr	r4, [sp, #0]
 8013baa:	3601      	adds	r6, #1
 8013bac:	4630      	mov	r0, r6
 8013bae:	f7ec fcd9 	bl	8000564 <__aeabi_i2d>
 8013bb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013bb6:	f7ec fd3f 	bl	8000638 <__aeabi_dmul>
 8013bba:	4b77      	ldr	r3, [pc, #476]	@ (8013d98 <_dtoa_r+0x5a0>)
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	f7ec fb85 	bl	80002cc <__adddf3>
 8013bc2:	4605      	mov	r5, r0
 8013bc4:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013bc8:	2c00      	cmp	r4, #0
 8013bca:	f040 808d 	bne.w	8013ce8 <_dtoa_r+0x4f0>
 8013bce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013bd2:	4b72      	ldr	r3, [pc, #456]	@ (8013d9c <_dtoa_r+0x5a4>)
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	f7ec fb77 	bl	80002c8 <__aeabi_dsub>
 8013bda:	4602      	mov	r2, r0
 8013bdc:	460b      	mov	r3, r1
 8013bde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013be2:	462a      	mov	r2, r5
 8013be4:	4633      	mov	r3, r6
 8013be6:	f7ec ffb7 	bl	8000b58 <__aeabi_dcmpgt>
 8013bea:	2800      	cmp	r0, #0
 8013bec:	f040 828c 	bne.w	8014108 <_dtoa_r+0x910>
 8013bf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013bf4:	462a      	mov	r2, r5
 8013bf6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013bfa:	f7ec ff8f 	bl	8000b1c <__aeabi_dcmplt>
 8013bfe:	2800      	cmp	r0, #0
 8013c00:	f040 8129 	bne.w	8013e56 <_dtoa_r+0x65e>
 8013c04:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8013c08:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013c0c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	f2c0 815b 	blt.w	8013eca <_dtoa_r+0x6d2>
 8013c14:	2f0e      	cmp	r7, #14
 8013c16:	f300 8158 	bgt.w	8013eca <_dtoa_r+0x6d2>
 8013c1a:	4b5b      	ldr	r3, [pc, #364]	@ (8013d88 <_dtoa_r+0x590>)
 8013c1c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013c20:	ed93 7b00 	vldr	d7, [r3]
 8013c24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	ed8d 7b00 	vstr	d7, [sp]
 8013c2c:	da03      	bge.n	8013c36 <_dtoa_r+0x43e>
 8013c2e:	9b07      	ldr	r3, [sp, #28]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	f340 8102 	ble.w	8013e3a <_dtoa_r+0x642>
 8013c36:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013c3a:	4656      	mov	r6, sl
 8013c3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c40:	4620      	mov	r0, r4
 8013c42:	4629      	mov	r1, r5
 8013c44:	f7ec fe22 	bl	800088c <__aeabi_ddiv>
 8013c48:	f7ec ffa6 	bl	8000b98 <__aeabi_d2iz>
 8013c4c:	4680      	mov	r8, r0
 8013c4e:	f7ec fc89 	bl	8000564 <__aeabi_i2d>
 8013c52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c56:	f7ec fcef 	bl	8000638 <__aeabi_dmul>
 8013c5a:	4602      	mov	r2, r0
 8013c5c:	460b      	mov	r3, r1
 8013c5e:	4620      	mov	r0, r4
 8013c60:	4629      	mov	r1, r5
 8013c62:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013c66:	f7ec fb2f 	bl	80002c8 <__aeabi_dsub>
 8013c6a:	f806 4b01 	strb.w	r4, [r6], #1
 8013c6e:	9d07      	ldr	r5, [sp, #28]
 8013c70:	eba6 040a 	sub.w	r4, r6, sl
 8013c74:	42a5      	cmp	r5, r4
 8013c76:	4602      	mov	r2, r0
 8013c78:	460b      	mov	r3, r1
 8013c7a:	f040 8118 	bne.w	8013eae <_dtoa_r+0x6b6>
 8013c7e:	f7ec fb25 	bl	80002cc <__adddf3>
 8013c82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c86:	4604      	mov	r4, r0
 8013c88:	460d      	mov	r5, r1
 8013c8a:	f7ec ff65 	bl	8000b58 <__aeabi_dcmpgt>
 8013c8e:	2800      	cmp	r0, #0
 8013c90:	f040 80fa 	bne.w	8013e88 <_dtoa_r+0x690>
 8013c94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c98:	4620      	mov	r0, r4
 8013c9a:	4629      	mov	r1, r5
 8013c9c:	f7ec ff34 	bl	8000b08 <__aeabi_dcmpeq>
 8013ca0:	b118      	cbz	r0, 8013caa <_dtoa_r+0x4b2>
 8013ca2:	f018 0f01 	tst.w	r8, #1
 8013ca6:	f040 80ef 	bne.w	8013e88 <_dtoa_r+0x690>
 8013caa:	4649      	mov	r1, r9
 8013cac:	4658      	mov	r0, fp
 8013cae:	f000 fb86 	bl	80143be <_Bfree>
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	7033      	strb	r3, [r6, #0]
 8013cb6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013cb8:	3701      	adds	r7, #1
 8013cba:	601f      	str	r7, [r3, #0]
 8013cbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	f43f add1 	beq.w	8013866 <_dtoa_r+0x6e>
 8013cc4:	601e      	str	r6, [r3, #0]
 8013cc6:	e5ce      	b.n	8013866 <_dtoa_r+0x6e>
 8013cc8:	07e2      	lsls	r2, r4, #31
 8013cca:	d505      	bpl.n	8013cd8 <_dtoa_r+0x4e0>
 8013ccc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013cd0:	f7ec fcb2 	bl	8000638 <__aeabi_dmul>
 8013cd4:	3601      	adds	r6, #1
 8013cd6:	2301      	movs	r3, #1
 8013cd8:	1064      	asrs	r4, r4, #1
 8013cda:	3508      	adds	r5, #8
 8013cdc:	e73f      	b.n	8013b5e <_dtoa_r+0x366>
 8013cde:	2602      	movs	r6, #2
 8013ce0:	e742      	b.n	8013b68 <_dtoa_r+0x370>
 8013ce2:	9c07      	ldr	r4, [sp, #28]
 8013ce4:	9704      	str	r7, [sp, #16]
 8013ce6:	e761      	b.n	8013bac <_dtoa_r+0x3b4>
 8013ce8:	4b27      	ldr	r3, [pc, #156]	@ (8013d88 <_dtoa_r+0x590>)
 8013cea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013cec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013cf0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013cf4:	4454      	add	r4, sl
 8013cf6:	2900      	cmp	r1, #0
 8013cf8:	d054      	beq.n	8013da4 <_dtoa_r+0x5ac>
 8013cfa:	4929      	ldr	r1, [pc, #164]	@ (8013da0 <_dtoa_r+0x5a8>)
 8013cfc:	2000      	movs	r0, #0
 8013cfe:	f7ec fdc5 	bl	800088c <__aeabi_ddiv>
 8013d02:	4633      	mov	r3, r6
 8013d04:	462a      	mov	r2, r5
 8013d06:	f7ec fadf 	bl	80002c8 <__aeabi_dsub>
 8013d0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013d0e:	4656      	mov	r6, sl
 8013d10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d14:	f7ec ff40 	bl	8000b98 <__aeabi_d2iz>
 8013d18:	4605      	mov	r5, r0
 8013d1a:	f7ec fc23 	bl	8000564 <__aeabi_i2d>
 8013d1e:	4602      	mov	r2, r0
 8013d20:	460b      	mov	r3, r1
 8013d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d26:	f7ec facf 	bl	80002c8 <__aeabi_dsub>
 8013d2a:	3530      	adds	r5, #48	@ 0x30
 8013d2c:	4602      	mov	r2, r0
 8013d2e:	460b      	mov	r3, r1
 8013d30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013d34:	f806 5b01 	strb.w	r5, [r6], #1
 8013d38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013d3c:	f7ec feee 	bl	8000b1c <__aeabi_dcmplt>
 8013d40:	2800      	cmp	r0, #0
 8013d42:	d172      	bne.n	8013e2a <_dtoa_r+0x632>
 8013d44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013d48:	4911      	ldr	r1, [pc, #68]	@ (8013d90 <_dtoa_r+0x598>)
 8013d4a:	2000      	movs	r0, #0
 8013d4c:	f7ec fabc 	bl	80002c8 <__aeabi_dsub>
 8013d50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013d54:	f7ec fee2 	bl	8000b1c <__aeabi_dcmplt>
 8013d58:	2800      	cmp	r0, #0
 8013d5a:	f040 8096 	bne.w	8013e8a <_dtoa_r+0x692>
 8013d5e:	42a6      	cmp	r6, r4
 8013d60:	f43f af50 	beq.w	8013c04 <_dtoa_r+0x40c>
 8013d64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013d68:	4b0a      	ldr	r3, [pc, #40]	@ (8013d94 <_dtoa_r+0x59c>)
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	f7ec fc64 	bl	8000638 <__aeabi_dmul>
 8013d70:	4b08      	ldr	r3, [pc, #32]	@ (8013d94 <_dtoa_r+0x59c>)
 8013d72:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013d76:	2200      	movs	r2, #0
 8013d78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d7c:	f7ec fc5c 	bl	8000638 <__aeabi_dmul>
 8013d80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013d84:	e7c4      	b.n	8013d10 <_dtoa_r+0x518>
 8013d86:	bf00      	nop
 8013d88:	08017df0 	.word	0x08017df0
 8013d8c:	08017dc8 	.word	0x08017dc8
 8013d90:	3ff00000 	.word	0x3ff00000
 8013d94:	40240000 	.word	0x40240000
 8013d98:	401c0000 	.word	0x401c0000
 8013d9c:	40140000 	.word	0x40140000
 8013da0:	3fe00000 	.word	0x3fe00000
 8013da4:	4631      	mov	r1, r6
 8013da6:	4628      	mov	r0, r5
 8013da8:	f7ec fc46 	bl	8000638 <__aeabi_dmul>
 8013dac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013db0:	9415      	str	r4, [sp, #84]	@ 0x54
 8013db2:	4656      	mov	r6, sl
 8013db4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013db8:	f7ec feee 	bl	8000b98 <__aeabi_d2iz>
 8013dbc:	4605      	mov	r5, r0
 8013dbe:	f7ec fbd1 	bl	8000564 <__aeabi_i2d>
 8013dc2:	4602      	mov	r2, r0
 8013dc4:	460b      	mov	r3, r1
 8013dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013dca:	f7ec fa7d 	bl	80002c8 <__aeabi_dsub>
 8013dce:	3530      	adds	r5, #48	@ 0x30
 8013dd0:	f806 5b01 	strb.w	r5, [r6], #1
 8013dd4:	4602      	mov	r2, r0
 8013dd6:	460b      	mov	r3, r1
 8013dd8:	42a6      	cmp	r6, r4
 8013dda:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013dde:	f04f 0200 	mov.w	r2, #0
 8013de2:	d124      	bne.n	8013e2e <_dtoa_r+0x636>
 8013de4:	4bac      	ldr	r3, [pc, #688]	@ (8014098 <_dtoa_r+0x8a0>)
 8013de6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013dea:	f7ec fa6f 	bl	80002cc <__adddf3>
 8013dee:	4602      	mov	r2, r0
 8013df0:	460b      	mov	r3, r1
 8013df2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013df6:	f7ec feaf 	bl	8000b58 <__aeabi_dcmpgt>
 8013dfa:	2800      	cmp	r0, #0
 8013dfc:	d145      	bne.n	8013e8a <_dtoa_r+0x692>
 8013dfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013e02:	49a5      	ldr	r1, [pc, #660]	@ (8014098 <_dtoa_r+0x8a0>)
 8013e04:	2000      	movs	r0, #0
 8013e06:	f7ec fa5f 	bl	80002c8 <__aeabi_dsub>
 8013e0a:	4602      	mov	r2, r0
 8013e0c:	460b      	mov	r3, r1
 8013e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e12:	f7ec fe83 	bl	8000b1c <__aeabi_dcmplt>
 8013e16:	2800      	cmp	r0, #0
 8013e18:	f43f aef4 	beq.w	8013c04 <_dtoa_r+0x40c>
 8013e1c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8013e1e:	1e73      	subs	r3, r6, #1
 8013e20:	9315      	str	r3, [sp, #84]	@ 0x54
 8013e22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013e26:	2b30      	cmp	r3, #48	@ 0x30
 8013e28:	d0f8      	beq.n	8013e1c <_dtoa_r+0x624>
 8013e2a:	9f04      	ldr	r7, [sp, #16]
 8013e2c:	e73d      	b.n	8013caa <_dtoa_r+0x4b2>
 8013e2e:	4b9b      	ldr	r3, [pc, #620]	@ (801409c <_dtoa_r+0x8a4>)
 8013e30:	f7ec fc02 	bl	8000638 <__aeabi_dmul>
 8013e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013e38:	e7bc      	b.n	8013db4 <_dtoa_r+0x5bc>
 8013e3a:	d10c      	bne.n	8013e56 <_dtoa_r+0x65e>
 8013e3c:	4b98      	ldr	r3, [pc, #608]	@ (80140a0 <_dtoa_r+0x8a8>)
 8013e3e:	2200      	movs	r2, #0
 8013e40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e44:	f7ec fbf8 	bl	8000638 <__aeabi_dmul>
 8013e48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013e4c:	f7ec fe7a 	bl	8000b44 <__aeabi_dcmpge>
 8013e50:	2800      	cmp	r0, #0
 8013e52:	f000 8157 	beq.w	8014104 <_dtoa_r+0x90c>
 8013e56:	2400      	movs	r4, #0
 8013e58:	4625      	mov	r5, r4
 8013e5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013e5c:	43db      	mvns	r3, r3
 8013e5e:	9304      	str	r3, [sp, #16]
 8013e60:	4656      	mov	r6, sl
 8013e62:	2700      	movs	r7, #0
 8013e64:	4621      	mov	r1, r4
 8013e66:	4658      	mov	r0, fp
 8013e68:	f000 faa9 	bl	80143be <_Bfree>
 8013e6c:	2d00      	cmp	r5, #0
 8013e6e:	d0dc      	beq.n	8013e2a <_dtoa_r+0x632>
 8013e70:	b12f      	cbz	r7, 8013e7e <_dtoa_r+0x686>
 8013e72:	42af      	cmp	r7, r5
 8013e74:	d003      	beq.n	8013e7e <_dtoa_r+0x686>
 8013e76:	4639      	mov	r1, r7
 8013e78:	4658      	mov	r0, fp
 8013e7a:	f000 faa0 	bl	80143be <_Bfree>
 8013e7e:	4629      	mov	r1, r5
 8013e80:	4658      	mov	r0, fp
 8013e82:	f000 fa9c 	bl	80143be <_Bfree>
 8013e86:	e7d0      	b.n	8013e2a <_dtoa_r+0x632>
 8013e88:	9704      	str	r7, [sp, #16]
 8013e8a:	4633      	mov	r3, r6
 8013e8c:	461e      	mov	r6, r3
 8013e8e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013e92:	2a39      	cmp	r2, #57	@ 0x39
 8013e94:	d107      	bne.n	8013ea6 <_dtoa_r+0x6ae>
 8013e96:	459a      	cmp	sl, r3
 8013e98:	d1f8      	bne.n	8013e8c <_dtoa_r+0x694>
 8013e9a:	9a04      	ldr	r2, [sp, #16]
 8013e9c:	3201      	adds	r2, #1
 8013e9e:	9204      	str	r2, [sp, #16]
 8013ea0:	2230      	movs	r2, #48	@ 0x30
 8013ea2:	f88a 2000 	strb.w	r2, [sl]
 8013ea6:	781a      	ldrb	r2, [r3, #0]
 8013ea8:	3201      	adds	r2, #1
 8013eaa:	701a      	strb	r2, [r3, #0]
 8013eac:	e7bd      	b.n	8013e2a <_dtoa_r+0x632>
 8013eae:	4b7b      	ldr	r3, [pc, #492]	@ (801409c <_dtoa_r+0x8a4>)
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	f7ec fbc1 	bl	8000638 <__aeabi_dmul>
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	2300      	movs	r3, #0
 8013eba:	4604      	mov	r4, r0
 8013ebc:	460d      	mov	r5, r1
 8013ebe:	f7ec fe23 	bl	8000b08 <__aeabi_dcmpeq>
 8013ec2:	2800      	cmp	r0, #0
 8013ec4:	f43f aeba 	beq.w	8013c3c <_dtoa_r+0x444>
 8013ec8:	e6ef      	b.n	8013caa <_dtoa_r+0x4b2>
 8013eca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013ecc:	2a00      	cmp	r2, #0
 8013ece:	f000 80db 	beq.w	8014088 <_dtoa_r+0x890>
 8013ed2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013ed4:	2a01      	cmp	r2, #1
 8013ed6:	f300 80bf 	bgt.w	8014058 <_dtoa_r+0x860>
 8013eda:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013edc:	2a00      	cmp	r2, #0
 8013ede:	f000 80b7 	beq.w	8014050 <_dtoa_r+0x858>
 8013ee2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013ee6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013ee8:	4646      	mov	r6, r8
 8013eea:	9a08      	ldr	r2, [sp, #32]
 8013eec:	2101      	movs	r1, #1
 8013eee:	441a      	add	r2, r3
 8013ef0:	4658      	mov	r0, fp
 8013ef2:	4498      	add	r8, r3
 8013ef4:	9208      	str	r2, [sp, #32]
 8013ef6:	f000 fafd 	bl	80144f4 <__i2b>
 8013efa:	4605      	mov	r5, r0
 8013efc:	b15e      	cbz	r6, 8013f16 <_dtoa_r+0x71e>
 8013efe:	9b08      	ldr	r3, [sp, #32]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	dd08      	ble.n	8013f16 <_dtoa_r+0x71e>
 8013f04:	42b3      	cmp	r3, r6
 8013f06:	9a08      	ldr	r2, [sp, #32]
 8013f08:	bfa8      	it	ge
 8013f0a:	4633      	movge	r3, r6
 8013f0c:	eba8 0803 	sub.w	r8, r8, r3
 8013f10:	1af6      	subs	r6, r6, r3
 8013f12:	1ad3      	subs	r3, r2, r3
 8013f14:	9308      	str	r3, [sp, #32]
 8013f16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f18:	b1f3      	cbz	r3, 8013f58 <_dtoa_r+0x760>
 8013f1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	f000 80b7 	beq.w	8014090 <_dtoa_r+0x898>
 8013f22:	b18c      	cbz	r4, 8013f48 <_dtoa_r+0x750>
 8013f24:	4629      	mov	r1, r5
 8013f26:	4622      	mov	r2, r4
 8013f28:	4658      	mov	r0, fp
 8013f2a:	f000 fba3 	bl	8014674 <__pow5mult>
 8013f2e:	464a      	mov	r2, r9
 8013f30:	4601      	mov	r1, r0
 8013f32:	4605      	mov	r5, r0
 8013f34:	4658      	mov	r0, fp
 8013f36:	f000 faf3 	bl	8014520 <__multiply>
 8013f3a:	4649      	mov	r1, r9
 8013f3c:	9004      	str	r0, [sp, #16]
 8013f3e:	4658      	mov	r0, fp
 8013f40:	f000 fa3d 	bl	80143be <_Bfree>
 8013f44:	9b04      	ldr	r3, [sp, #16]
 8013f46:	4699      	mov	r9, r3
 8013f48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f4a:	1b1a      	subs	r2, r3, r4
 8013f4c:	d004      	beq.n	8013f58 <_dtoa_r+0x760>
 8013f4e:	4649      	mov	r1, r9
 8013f50:	4658      	mov	r0, fp
 8013f52:	f000 fb8f 	bl	8014674 <__pow5mult>
 8013f56:	4681      	mov	r9, r0
 8013f58:	2101      	movs	r1, #1
 8013f5a:	4658      	mov	r0, fp
 8013f5c:	f000 faca 	bl	80144f4 <__i2b>
 8013f60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013f62:	4604      	mov	r4, r0
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	f000 81cc 	beq.w	8014302 <_dtoa_r+0xb0a>
 8013f6a:	461a      	mov	r2, r3
 8013f6c:	4601      	mov	r1, r0
 8013f6e:	4658      	mov	r0, fp
 8013f70:	f000 fb80 	bl	8014674 <__pow5mult>
 8013f74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f76:	2b01      	cmp	r3, #1
 8013f78:	4604      	mov	r4, r0
 8013f7a:	f300 8095 	bgt.w	80140a8 <_dtoa_r+0x8b0>
 8013f7e:	9b02      	ldr	r3, [sp, #8]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	f040 8087 	bne.w	8014094 <_dtoa_r+0x89c>
 8013f86:	9b03      	ldr	r3, [sp, #12]
 8013f88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	f040 8089 	bne.w	80140a4 <_dtoa_r+0x8ac>
 8013f92:	9b03      	ldr	r3, [sp, #12]
 8013f94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013f98:	0d1b      	lsrs	r3, r3, #20
 8013f9a:	051b      	lsls	r3, r3, #20
 8013f9c:	b12b      	cbz	r3, 8013faa <_dtoa_r+0x7b2>
 8013f9e:	9b08      	ldr	r3, [sp, #32]
 8013fa0:	3301      	adds	r3, #1
 8013fa2:	9308      	str	r3, [sp, #32]
 8013fa4:	f108 0801 	add.w	r8, r8, #1
 8013fa8:	2301      	movs	r3, #1
 8013faa:	930a      	str	r3, [sp, #40]	@ 0x28
 8013fac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	f000 81ad 	beq.w	801430e <_dtoa_r+0xb16>
 8013fb4:	6923      	ldr	r3, [r4, #16]
 8013fb6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013fba:	6918      	ldr	r0, [r3, #16]
 8013fbc:	f000 fa4e 	bl	801445c <__hi0bits>
 8013fc0:	f1c0 0020 	rsb	r0, r0, #32
 8013fc4:	9b08      	ldr	r3, [sp, #32]
 8013fc6:	4418      	add	r0, r3
 8013fc8:	f010 001f 	ands.w	r0, r0, #31
 8013fcc:	d077      	beq.n	80140be <_dtoa_r+0x8c6>
 8013fce:	f1c0 0320 	rsb	r3, r0, #32
 8013fd2:	2b04      	cmp	r3, #4
 8013fd4:	dd6b      	ble.n	80140ae <_dtoa_r+0x8b6>
 8013fd6:	9b08      	ldr	r3, [sp, #32]
 8013fd8:	f1c0 001c 	rsb	r0, r0, #28
 8013fdc:	4403      	add	r3, r0
 8013fde:	4480      	add	r8, r0
 8013fe0:	4406      	add	r6, r0
 8013fe2:	9308      	str	r3, [sp, #32]
 8013fe4:	f1b8 0f00 	cmp.w	r8, #0
 8013fe8:	dd05      	ble.n	8013ff6 <_dtoa_r+0x7fe>
 8013fea:	4649      	mov	r1, r9
 8013fec:	4642      	mov	r2, r8
 8013fee:	4658      	mov	r0, fp
 8013ff0:	f000 fb80 	bl	80146f4 <__lshift>
 8013ff4:	4681      	mov	r9, r0
 8013ff6:	9b08      	ldr	r3, [sp, #32]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	dd05      	ble.n	8014008 <_dtoa_r+0x810>
 8013ffc:	4621      	mov	r1, r4
 8013ffe:	461a      	mov	r2, r3
 8014000:	4658      	mov	r0, fp
 8014002:	f000 fb77 	bl	80146f4 <__lshift>
 8014006:	4604      	mov	r4, r0
 8014008:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801400a:	2b00      	cmp	r3, #0
 801400c:	d059      	beq.n	80140c2 <_dtoa_r+0x8ca>
 801400e:	4621      	mov	r1, r4
 8014010:	4648      	mov	r0, r9
 8014012:	f000 fbdb 	bl	80147cc <__mcmp>
 8014016:	2800      	cmp	r0, #0
 8014018:	da53      	bge.n	80140c2 <_dtoa_r+0x8ca>
 801401a:	1e7b      	subs	r3, r7, #1
 801401c:	9304      	str	r3, [sp, #16]
 801401e:	4649      	mov	r1, r9
 8014020:	2300      	movs	r3, #0
 8014022:	220a      	movs	r2, #10
 8014024:	4658      	mov	r0, fp
 8014026:	f000 f9d3 	bl	80143d0 <__multadd>
 801402a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801402c:	4681      	mov	r9, r0
 801402e:	2b00      	cmp	r3, #0
 8014030:	f000 816f 	beq.w	8014312 <_dtoa_r+0xb1a>
 8014034:	2300      	movs	r3, #0
 8014036:	4629      	mov	r1, r5
 8014038:	220a      	movs	r2, #10
 801403a:	4658      	mov	r0, fp
 801403c:	f000 f9c8 	bl	80143d0 <__multadd>
 8014040:	9b00      	ldr	r3, [sp, #0]
 8014042:	2b00      	cmp	r3, #0
 8014044:	4605      	mov	r5, r0
 8014046:	dc67      	bgt.n	8014118 <_dtoa_r+0x920>
 8014048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801404a:	2b02      	cmp	r3, #2
 801404c:	dc41      	bgt.n	80140d2 <_dtoa_r+0x8da>
 801404e:	e063      	b.n	8014118 <_dtoa_r+0x920>
 8014050:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014052:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8014056:	e746      	b.n	8013ee6 <_dtoa_r+0x6ee>
 8014058:	9b07      	ldr	r3, [sp, #28]
 801405a:	1e5c      	subs	r4, r3, #1
 801405c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801405e:	42a3      	cmp	r3, r4
 8014060:	bfbf      	itttt	lt
 8014062:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8014064:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8014066:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8014068:	1ae3      	sublt	r3, r4, r3
 801406a:	bfb4      	ite	lt
 801406c:	18d2      	addlt	r2, r2, r3
 801406e:	1b1c      	subge	r4, r3, r4
 8014070:	9b07      	ldr	r3, [sp, #28]
 8014072:	bfbc      	itt	lt
 8014074:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8014076:	2400      	movlt	r4, #0
 8014078:	2b00      	cmp	r3, #0
 801407a:	bfb5      	itete	lt
 801407c:	eba8 0603 	sublt.w	r6, r8, r3
 8014080:	9b07      	ldrge	r3, [sp, #28]
 8014082:	2300      	movlt	r3, #0
 8014084:	4646      	movge	r6, r8
 8014086:	e730      	b.n	8013eea <_dtoa_r+0x6f2>
 8014088:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801408a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801408c:	4646      	mov	r6, r8
 801408e:	e735      	b.n	8013efc <_dtoa_r+0x704>
 8014090:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014092:	e75c      	b.n	8013f4e <_dtoa_r+0x756>
 8014094:	2300      	movs	r3, #0
 8014096:	e788      	b.n	8013faa <_dtoa_r+0x7b2>
 8014098:	3fe00000 	.word	0x3fe00000
 801409c:	40240000 	.word	0x40240000
 80140a0:	40140000 	.word	0x40140000
 80140a4:	9b02      	ldr	r3, [sp, #8]
 80140a6:	e780      	b.n	8013faa <_dtoa_r+0x7b2>
 80140a8:	2300      	movs	r3, #0
 80140aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80140ac:	e782      	b.n	8013fb4 <_dtoa_r+0x7bc>
 80140ae:	d099      	beq.n	8013fe4 <_dtoa_r+0x7ec>
 80140b0:	9a08      	ldr	r2, [sp, #32]
 80140b2:	331c      	adds	r3, #28
 80140b4:	441a      	add	r2, r3
 80140b6:	4498      	add	r8, r3
 80140b8:	441e      	add	r6, r3
 80140ba:	9208      	str	r2, [sp, #32]
 80140bc:	e792      	b.n	8013fe4 <_dtoa_r+0x7ec>
 80140be:	4603      	mov	r3, r0
 80140c0:	e7f6      	b.n	80140b0 <_dtoa_r+0x8b8>
 80140c2:	9b07      	ldr	r3, [sp, #28]
 80140c4:	9704      	str	r7, [sp, #16]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	dc20      	bgt.n	801410c <_dtoa_r+0x914>
 80140ca:	9300      	str	r3, [sp, #0]
 80140cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140ce:	2b02      	cmp	r3, #2
 80140d0:	dd1e      	ble.n	8014110 <_dtoa_r+0x918>
 80140d2:	9b00      	ldr	r3, [sp, #0]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	f47f aec0 	bne.w	8013e5a <_dtoa_r+0x662>
 80140da:	4621      	mov	r1, r4
 80140dc:	2205      	movs	r2, #5
 80140de:	4658      	mov	r0, fp
 80140e0:	f000 f976 	bl	80143d0 <__multadd>
 80140e4:	4601      	mov	r1, r0
 80140e6:	4604      	mov	r4, r0
 80140e8:	4648      	mov	r0, r9
 80140ea:	f000 fb6f 	bl	80147cc <__mcmp>
 80140ee:	2800      	cmp	r0, #0
 80140f0:	f77f aeb3 	ble.w	8013e5a <_dtoa_r+0x662>
 80140f4:	4656      	mov	r6, sl
 80140f6:	2331      	movs	r3, #49	@ 0x31
 80140f8:	f806 3b01 	strb.w	r3, [r6], #1
 80140fc:	9b04      	ldr	r3, [sp, #16]
 80140fe:	3301      	adds	r3, #1
 8014100:	9304      	str	r3, [sp, #16]
 8014102:	e6ae      	b.n	8013e62 <_dtoa_r+0x66a>
 8014104:	9c07      	ldr	r4, [sp, #28]
 8014106:	9704      	str	r7, [sp, #16]
 8014108:	4625      	mov	r5, r4
 801410a:	e7f3      	b.n	80140f4 <_dtoa_r+0x8fc>
 801410c:	9b07      	ldr	r3, [sp, #28]
 801410e:	9300      	str	r3, [sp, #0]
 8014110:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014112:	2b00      	cmp	r3, #0
 8014114:	f000 8101 	beq.w	801431a <_dtoa_r+0xb22>
 8014118:	2e00      	cmp	r6, #0
 801411a:	dd05      	ble.n	8014128 <_dtoa_r+0x930>
 801411c:	4629      	mov	r1, r5
 801411e:	4632      	mov	r2, r6
 8014120:	4658      	mov	r0, fp
 8014122:	f000 fae7 	bl	80146f4 <__lshift>
 8014126:	4605      	mov	r5, r0
 8014128:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801412a:	2b00      	cmp	r3, #0
 801412c:	d059      	beq.n	80141e2 <_dtoa_r+0x9ea>
 801412e:	6869      	ldr	r1, [r5, #4]
 8014130:	4658      	mov	r0, fp
 8014132:	f000 f91f 	bl	8014374 <_Balloc>
 8014136:	4606      	mov	r6, r0
 8014138:	b920      	cbnz	r0, 8014144 <_dtoa_r+0x94c>
 801413a:	4b83      	ldr	r3, [pc, #524]	@ (8014348 <_dtoa_r+0xb50>)
 801413c:	4602      	mov	r2, r0
 801413e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014142:	e480      	b.n	8013a46 <_dtoa_r+0x24e>
 8014144:	692a      	ldr	r2, [r5, #16]
 8014146:	3202      	adds	r2, #2
 8014148:	0092      	lsls	r2, r2, #2
 801414a:	f105 010c 	add.w	r1, r5, #12
 801414e:	300c      	adds	r0, #12
 8014150:	f7fc fc12 	bl	8010978 <memcpy>
 8014154:	2201      	movs	r2, #1
 8014156:	4631      	mov	r1, r6
 8014158:	4658      	mov	r0, fp
 801415a:	f000 facb 	bl	80146f4 <__lshift>
 801415e:	f10a 0301 	add.w	r3, sl, #1
 8014162:	9307      	str	r3, [sp, #28]
 8014164:	9b00      	ldr	r3, [sp, #0]
 8014166:	4453      	add	r3, sl
 8014168:	930b      	str	r3, [sp, #44]	@ 0x2c
 801416a:	9b02      	ldr	r3, [sp, #8]
 801416c:	f003 0301 	and.w	r3, r3, #1
 8014170:	462f      	mov	r7, r5
 8014172:	930a      	str	r3, [sp, #40]	@ 0x28
 8014174:	4605      	mov	r5, r0
 8014176:	9b07      	ldr	r3, [sp, #28]
 8014178:	4621      	mov	r1, r4
 801417a:	3b01      	subs	r3, #1
 801417c:	4648      	mov	r0, r9
 801417e:	9300      	str	r3, [sp, #0]
 8014180:	f7ff fab0 	bl	80136e4 <quorem>
 8014184:	4639      	mov	r1, r7
 8014186:	9002      	str	r0, [sp, #8]
 8014188:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801418c:	4648      	mov	r0, r9
 801418e:	f000 fb1d 	bl	80147cc <__mcmp>
 8014192:	462a      	mov	r2, r5
 8014194:	9008      	str	r0, [sp, #32]
 8014196:	4621      	mov	r1, r4
 8014198:	4658      	mov	r0, fp
 801419a:	f000 fb33 	bl	8014804 <__mdiff>
 801419e:	68c2      	ldr	r2, [r0, #12]
 80141a0:	4606      	mov	r6, r0
 80141a2:	bb02      	cbnz	r2, 80141e6 <_dtoa_r+0x9ee>
 80141a4:	4601      	mov	r1, r0
 80141a6:	4648      	mov	r0, r9
 80141a8:	f000 fb10 	bl	80147cc <__mcmp>
 80141ac:	4602      	mov	r2, r0
 80141ae:	4631      	mov	r1, r6
 80141b0:	4658      	mov	r0, fp
 80141b2:	920e      	str	r2, [sp, #56]	@ 0x38
 80141b4:	f000 f903 	bl	80143be <_Bfree>
 80141b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80141bc:	9e07      	ldr	r6, [sp, #28]
 80141be:	ea43 0102 	orr.w	r1, r3, r2
 80141c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80141c4:	4319      	orrs	r1, r3
 80141c6:	d110      	bne.n	80141ea <_dtoa_r+0x9f2>
 80141c8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80141cc:	d029      	beq.n	8014222 <_dtoa_r+0xa2a>
 80141ce:	9b08      	ldr	r3, [sp, #32]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	dd02      	ble.n	80141da <_dtoa_r+0x9e2>
 80141d4:	9b02      	ldr	r3, [sp, #8]
 80141d6:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80141da:	9b00      	ldr	r3, [sp, #0]
 80141dc:	f883 8000 	strb.w	r8, [r3]
 80141e0:	e640      	b.n	8013e64 <_dtoa_r+0x66c>
 80141e2:	4628      	mov	r0, r5
 80141e4:	e7bb      	b.n	801415e <_dtoa_r+0x966>
 80141e6:	2201      	movs	r2, #1
 80141e8:	e7e1      	b.n	80141ae <_dtoa_r+0x9b6>
 80141ea:	9b08      	ldr	r3, [sp, #32]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	db04      	blt.n	80141fa <_dtoa_r+0xa02>
 80141f0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80141f2:	430b      	orrs	r3, r1
 80141f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80141f6:	430b      	orrs	r3, r1
 80141f8:	d120      	bne.n	801423c <_dtoa_r+0xa44>
 80141fa:	2a00      	cmp	r2, #0
 80141fc:	dded      	ble.n	80141da <_dtoa_r+0x9e2>
 80141fe:	4649      	mov	r1, r9
 8014200:	2201      	movs	r2, #1
 8014202:	4658      	mov	r0, fp
 8014204:	f000 fa76 	bl	80146f4 <__lshift>
 8014208:	4621      	mov	r1, r4
 801420a:	4681      	mov	r9, r0
 801420c:	f000 fade 	bl	80147cc <__mcmp>
 8014210:	2800      	cmp	r0, #0
 8014212:	dc03      	bgt.n	801421c <_dtoa_r+0xa24>
 8014214:	d1e1      	bne.n	80141da <_dtoa_r+0x9e2>
 8014216:	f018 0f01 	tst.w	r8, #1
 801421a:	d0de      	beq.n	80141da <_dtoa_r+0x9e2>
 801421c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014220:	d1d8      	bne.n	80141d4 <_dtoa_r+0x9dc>
 8014222:	9a00      	ldr	r2, [sp, #0]
 8014224:	2339      	movs	r3, #57	@ 0x39
 8014226:	7013      	strb	r3, [r2, #0]
 8014228:	4633      	mov	r3, r6
 801422a:	461e      	mov	r6, r3
 801422c:	3b01      	subs	r3, #1
 801422e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014232:	2a39      	cmp	r2, #57	@ 0x39
 8014234:	d052      	beq.n	80142dc <_dtoa_r+0xae4>
 8014236:	3201      	adds	r2, #1
 8014238:	701a      	strb	r2, [r3, #0]
 801423a:	e613      	b.n	8013e64 <_dtoa_r+0x66c>
 801423c:	2a00      	cmp	r2, #0
 801423e:	dd07      	ble.n	8014250 <_dtoa_r+0xa58>
 8014240:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014244:	d0ed      	beq.n	8014222 <_dtoa_r+0xa2a>
 8014246:	9a00      	ldr	r2, [sp, #0]
 8014248:	f108 0301 	add.w	r3, r8, #1
 801424c:	7013      	strb	r3, [r2, #0]
 801424e:	e609      	b.n	8013e64 <_dtoa_r+0x66c>
 8014250:	9b07      	ldr	r3, [sp, #28]
 8014252:	9a07      	ldr	r2, [sp, #28]
 8014254:	f803 8c01 	strb.w	r8, [r3, #-1]
 8014258:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801425a:	4293      	cmp	r3, r2
 801425c:	d028      	beq.n	80142b0 <_dtoa_r+0xab8>
 801425e:	4649      	mov	r1, r9
 8014260:	2300      	movs	r3, #0
 8014262:	220a      	movs	r2, #10
 8014264:	4658      	mov	r0, fp
 8014266:	f000 f8b3 	bl	80143d0 <__multadd>
 801426a:	42af      	cmp	r7, r5
 801426c:	4681      	mov	r9, r0
 801426e:	f04f 0300 	mov.w	r3, #0
 8014272:	f04f 020a 	mov.w	r2, #10
 8014276:	4639      	mov	r1, r7
 8014278:	4658      	mov	r0, fp
 801427a:	d107      	bne.n	801428c <_dtoa_r+0xa94>
 801427c:	f000 f8a8 	bl	80143d0 <__multadd>
 8014280:	4607      	mov	r7, r0
 8014282:	4605      	mov	r5, r0
 8014284:	9b07      	ldr	r3, [sp, #28]
 8014286:	3301      	adds	r3, #1
 8014288:	9307      	str	r3, [sp, #28]
 801428a:	e774      	b.n	8014176 <_dtoa_r+0x97e>
 801428c:	f000 f8a0 	bl	80143d0 <__multadd>
 8014290:	4629      	mov	r1, r5
 8014292:	4607      	mov	r7, r0
 8014294:	2300      	movs	r3, #0
 8014296:	220a      	movs	r2, #10
 8014298:	4658      	mov	r0, fp
 801429a:	f000 f899 	bl	80143d0 <__multadd>
 801429e:	4605      	mov	r5, r0
 80142a0:	e7f0      	b.n	8014284 <_dtoa_r+0xa8c>
 80142a2:	9b00      	ldr	r3, [sp, #0]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	bfcc      	ite	gt
 80142a8:	461e      	movgt	r6, r3
 80142aa:	2601      	movle	r6, #1
 80142ac:	4456      	add	r6, sl
 80142ae:	2700      	movs	r7, #0
 80142b0:	4649      	mov	r1, r9
 80142b2:	2201      	movs	r2, #1
 80142b4:	4658      	mov	r0, fp
 80142b6:	f000 fa1d 	bl	80146f4 <__lshift>
 80142ba:	4621      	mov	r1, r4
 80142bc:	4681      	mov	r9, r0
 80142be:	f000 fa85 	bl	80147cc <__mcmp>
 80142c2:	2800      	cmp	r0, #0
 80142c4:	dcb0      	bgt.n	8014228 <_dtoa_r+0xa30>
 80142c6:	d102      	bne.n	80142ce <_dtoa_r+0xad6>
 80142c8:	f018 0f01 	tst.w	r8, #1
 80142cc:	d1ac      	bne.n	8014228 <_dtoa_r+0xa30>
 80142ce:	4633      	mov	r3, r6
 80142d0:	461e      	mov	r6, r3
 80142d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80142d6:	2a30      	cmp	r2, #48	@ 0x30
 80142d8:	d0fa      	beq.n	80142d0 <_dtoa_r+0xad8>
 80142da:	e5c3      	b.n	8013e64 <_dtoa_r+0x66c>
 80142dc:	459a      	cmp	sl, r3
 80142de:	d1a4      	bne.n	801422a <_dtoa_r+0xa32>
 80142e0:	9b04      	ldr	r3, [sp, #16]
 80142e2:	3301      	adds	r3, #1
 80142e4:	9304      	str	r3, [sp, #16]
 80142e6:	2331      	movs	r3, #49	@ 0x31
 80142e8:	f88a 3000 	strb.w	r3, [sl]
 80142ec:	e5ba      	b.n	8013e64 <_dtoa_r+0x66c>
 80142ee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80142f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801434c <_dtoa_r+0xb54>
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	f43f aab6 	beq.w	8013866 <_dtoa_r+0x6e>
 80142fa:	f10a 0308 	add.w	r3, sl, #8
 80142fe:	f7ff bab0 	b.w	8013862 <_dtoa_r+0x6a>
 8014302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014304:	2b01      	cmp	r3, #1
 8014306:	f77f ae3a 	ble.w	8013f7e <_dtoa_r+0x786>
 801430a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801430c:	930a      	str	r3, [sp, #40]	@ 0x28
 801430e:	2001      	movs	r0, #1
 8014310:	e658      	b.n	8013fc4 <_dtoa_r+0x7cc>
 8014312:	9b00      	ldr	r3, [sp, #0]
 8014314:	2b00      	cmp	r3, #0
 8014316:	f77f aed9 	ble.w	80140cc <_dtoa_r+0x8d4>
 801431a:	4656      	mov	r6, sl
 801431c:	4621      	mov	r1, r4
 801431e:	4648      	mov	r0, r9
 8014320:	f7ff f9e0 	bl	80136e4 <quorem>
 8014324:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014328:	f806 8b01 	strb.w	r8, [r6], #1
 801432c:	9b00      	ldr	r3, [sp, #0]
 801432e:	eba6 020a 	sub.w	r2, r6, sl
 8014332:	4293      	cmp	r3, r2
 8014334:	ddb5      	ble.n	80142a2 <_dtoa_r+0xaaa>
 8014336:	4649      	mov	r1, r9
 8014338:	2300      	movs	r3, #0
 801433a:	220a      	movs	r2, #10
 801433c:	4658      	mov	r0, fp
 801433e:	f000 f847 	bl	80143d0 <__multadd>
 8014342:	4681      	mov	r9, r0
 8014344:	e7ea      	b.n	801431c <_dtoa_r+0xb24>
 8014346:	bf00      	nop
 8014348:	08017cfa 	.word	0x08017cfa
 801434c:	08017ced 	.word	0x08017ced

08014350 <__ascii_mbtowc>:
 8014350:	b082      	sub	sp, #8
 8014352:	b901      	cbnz	r1, 8014356 <__ascii_mbtowc+0x6>
 8014354:	a901      	add	r1, sp, #4
 8014356:	b142      	cbz	r2, 801436a <__ascii_mbtowc+0x1a>
 8014358:	b14b      	cbz	r3, 801436e <__ascii_mbtowc+0x1e>
 801435a:	7813      	ldrb	r3, [r2, #0]
 801435c:	600b      	str	r3, [r1, #0]
 801435e:	7812      	ldrb	r2, [r2, #0]
 8014360:	1e10      	subs	r0, r2, #0
 8014362:	bf18      	it	ne
 8014364:	2001      	movne	r0, #1
 8014366:	b002      	add	sp, #8
 8014368:	4770      	bx	lr
 801436a:	4610      	mov	r0, r2
 801436c:	e7fb      	b.n	8014366 <__ascii_mbtowc+0x16>
 801436e:	f06f 0001 	mvn.w	r0, #1
 8014372:	e7f8      	b.n	8014366 <__ascii_mbtowc+0x16>

08014374 <_Balloc>:
 8014374:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8014376:	b570      	push	{r4, r5, r6, lr}
 8014378:	4605      	mov	r5, r0
 801437a:	460c      	mov	r4, r1
 801437c:	b17b      	cbz	r3, 801439e <_Balloc+0x2a>
 801437e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8014380:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014384:	b9a0      	cbnz	r0, 80143b0 <_Balloc+0x3c>
 8014386:	2101      	movs	r1, #1
 8014388:	fa01 f604 	lsl.w	r6, r1, r4
 801438c:	1d72      	adds	r2, r6, #5
 801438e:	0092      	lsls	r2, r2, #2
 8014390:	4628      	mov	r0, r5
 8014392:	f000 fddd 	bl	8014f50 <_calloc_r>
 8014396:	b148      	cbz	r0, 80143ac <_Balloc+0x38>
 8014398:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801439c:	e00b      	b.n	80143b6 <_Balloc+0x42>
 801439e:	2221      	movs	r2, #33	@ 0x21
 80143a0:	2104      	movs	r1, #4
 80143a2:	f000 fdd5 	bl	8014f50 <_calloc_r>
 80143a6:	6468      	str	r0, [r5, #68]	@ 0x44
 80143a8:	2800      	cmp	r0, #0
 80143aa:	d1e8      	bne.n	801437e <_Balloc+0xa>
 80143ac:	2000      	movs	r0, #0
 80143ae:	bd70      	pop	{r4, r5, r6, pc}
 80143b0:	6802      	ldr	r2, [r0, #0]
 80143b2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80143b6:	2300      	movs	r3, #0
 80143b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80143bc:	e7f7      	b.n	80143ae <_Balloc+0x3a>

080143be <_Bfree>:
 80143be:	b131      	cbz	r1, 80143ce <_Bfree+0x10>
 80143c0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80143c2:	684a      	ldr	r2, [r1, #4]
 80143c4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80143c8:	6008      	str	r0, [r1, #0]
 80143ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80143ce:	4770      	bx	lr

080143d0 <__multadd>:
 80143d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143d4:	690d      	ldr	r5, [r1, #16]
 80143d6:	4607      	mov	r7, r0
 80143d8:	460c      	mov	r4, r1
 80143da:	461e      	mov	r6, r3
 80143dc:	f101 0c14 	add.w	ip, r1, #20
 80143e0:	2000      	movs	r0, #0
 80143e2:	f8dc 3000 	ldr.w	r3, [ip]
 80143e6:	b299      	uxth	r1, r3
 80143e8:	fb02 6101 	mla	r1, r2, r1, r6
 80143ec:	0c1e      	lsrs	r6, r3, #16
 80143ee:	0c0b      	lsrs	r3, r1, #16
 80143f0:	fb02 3306 	mla	r3, r2, r6, r3
 80143f4:	b289      	uxth	r1, r1
 80143f6:	3001      	adds	r0, #1
 80143f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80143fc:	4285      	cmp	r5, r0
 80143fe:	f84c 1b04 	str.w	r1, [ip], #4
 8014402:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014406:	dcec      	bgt.n	80143e2 <__multadd+0x12>
 8014408:	b30e      	cbz	r6, 801444e <__multadd+0x7e>
 801440a:	68a3      	ldr	r3, [r4, #8]
 801440c:	42ab      	cmp	r3, r5
 801440e:	dc19      	bgt.n	8014444 <__multadd+0x74>
 8014410:	6861      	ldr	r1, [r4, #4]
 8014412:	4638      	mov	r0, r7
 8014414:	3101      	adds	r1, #1
 8014416:	f7ff ffad 	bl	8014374 <_Balloc>
 801441a:	4680      	mov	r8, r0
 801441c:	b928      	cbnz	r0, 801442a <__multadd+0x5a>
 801441e:	4602      	mov	r2, r0
 8014420:	4b0c      	ldr	r3, [pc, #48]	@ (8014454 <__multadd+0x84>)
 8014422:	480d      	ldr	r0, [pc, #52]	@ (8014458 <__multadd+0x88>)
 8014424:	21ba      	movs	r1, #186	@ 0xba
 8014426:	f000 fd75 	bl	8014f14 <__assert_func>
 801442a:	6922      	ldr	r2, [r4, #16]
 801442c:	3202      	adds	r2, #2
 801442e:	f104 010c 	add.w	r1, r4, #12
 8014432:	0092      	lsls	r2, r2, #2
 8014434:	300c      	adds	r0, #12
 8014436:	f7fc fa9f 	bl	8010978 <memcpy>
 801443a:	4621      	mov	r1, r4
 801443c:	4638      	mov	r0, r7
 801443e:	f7ff ffbe 	bl	80143be <_Bfree>
 8014442:	4644      	mov	r4, r8
 8014444:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014448:	3501      	adds	r5, #1
 801444a:	615e      	str	r6, [r3, #20]
 801444c:	6125      	str	r5, [r4, #16]
 801444e:	4620      	mov	r0, r4
 8014450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014454:	08017cfa 	.word	0x08017cfa
 8014458:	08017d63 	.word	0x08017d63

0801445c <__hi0bits>:
 801445c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014460:	4603      	mov	r3, r0
 8014462:	bf36      	itet	cc
 8014464:	0403      	lslcc	r3, r0, #16
 8014466:	2000      	movcs	r0, #0
 8014468:	2010      	movcc	r0, #16
 801446a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801446e:	bf3c      	itt	cc
 8014470:	021b      	lslcc	r3, r3, #8
 8014472:	3008      	addcc	r0, #8
 8014474:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014478:	bf3c      	itt	cc
 801447a:	011b      	lslcc	r3, r3, #4
 801447c:	3004      	addcc	r0, #4
 801447e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014482:	bf3c      	itt	cc
 8014484:	009b      	lslcc	r3, r3, #2
 8014486:	3002      	addcc	r0, #2
 8014488:	2b00      	cmp	r3, #0
 801448a:	db05      	blt.n	8014498 <__hi0bits+0x3c>
 801448c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014490:	f100 0001 	add.w	r0, r0, #1
 8014494:	bf08      	it	eq
 8014496:	2020      	moveq	r0, #32
 8014498:	4770      	bx	lr

0801449a <__lo0bits>:
 801449a:	6803      	ldr	r3, [r0, #0]
 801449c:	4602      	mov	r2, r0
 801449e:	f013 0007 	ands.w	r0, r3, #7
 80144a2:	d00b      	beq.n	80144bc <__lo0bits+0x22>
 80144a4:	07d9      	lsls	r1, r3, #31
 80144a6:	d421      	bmi.n	80144ec <__lo0bits+0x52>
 80144a8:	0798      	lsls	r0, r3, #30
 80144aa:	bf49      	itett	mi
 80144ac:	085b      	lsrmi	r3, r3, #1
 80144ae:	089b      	lsrpl	r3, r3, #2
 80144b0:	2001      	movmi	r0, #1
 80144b2:	6013      	strmi	r3, [r2, #0]
 80144b4:	bf5c      	itt	pl
 80144b6:	6013      	strpl	r3, [r2, #0]
 80144b8:	2002      	movpl	r0, #2
 80144ba:	4770      	bx	lr
 80144bc:	b299      	uxth	r1, r3
 80144be:	b909      	cbnz	r1, 80144c4 <__lo0bits+0x2a>
 80144c0:	0c1b      	lsrs	r3, r3, #16
 80144c2:	2010      	movs	r0, #16
 80144c4:	b2d9      	uxtb	r1, r3
 80144c6:	b909      	cbnz	r1, 80144cc <__lo0bits+0x32>
 80144c8:	3008      	adds	r0, #8
 80144ca:	0a1b      	lsrs	r3, r3, #8
 80144cc:	0719      	lsls	r1, r3, #28
 80144ce:	bf04      	itt	eq
 80144d0:	091b      	lsreq	r3, r3, #4
 80144d2:	3004      	addeq	r0, #4
 80144d4:	0799      	lsls	r1, r3, #30
 80144d6:	bf04      	itt	eq
 80144d8:	089b      	lsreq	r3, r3, #2
 80144da:	3002      	addeq	r0, #2
 80144dc:	07d9      	lsls	r1, r3, #31
 80144de:	d403      	bmi.n	80144e8 <__lo0bits+0x4e>
 80144e0:	085b      	lsrs	r3, r3, #1
 80144e2:	f100 0001 	add.w	r0, r0, #1
 80144e6:	d003      	beq.n	80144f0 <__lo0bits+0x56>
 80144e8:	6013      	str	r3, [r2, #0]
 80144ea:	4770      	bx	lr
 80144ec:	2000      	movs	r0, #0
 80144ee:	4770      	bx	lr
 80144f0:	2020      	movs	r0, #32
 80144f2:	4770      	bx	lr

080144f4 <__i2b>:
 80144f4:	b510      	push	{r4, lr}
 80144f6:	460c      	mov	r4, r1
 80144f8:	2101      	movs	r1, #1
 80144fa:	f7ff ff3b 	bl	8014374 <_Balloc>
 80144fe:	4602      	mov	r2, r0
 8014500:	b928      	cbnz	r0, 801450e <__i2b+0x1a>
 8014502:	4b05      	ldr	r3, [pc, #20]	@ (8014518 <__i2b+0x24>)
 8014504:	4805      	ldr	r0, [pc, #20]	@ (801451c <__i2b+0x28>)
 8014506:	f240 1145 	movw	r1, #325	@ 0x145
 801450a:	f000 fd03 	bl	8014f14 <__assert_func>
 801450e:	2301      	movs	r3, #1
 8014510:	6144      	str	r4, [r0, #20]
 8014512:	6103      	str	r3, [r0, #16]
 8014514:	bd10      	pop	{r4, pc}
 8014516:	bf00      	nop
 8014518:	08017cfa 	.word	0x08017cfa
 801451c:	08017d63 	.word	0x08017d63

08014520 <__multiply>:
 8014520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014524:	4614      	mov	r4, r2
 8014526:	690a      	ldr	r2, [r1, #16]
 8014528:	6923      	ldr	r3, [r4, #16]
 801452a:	429a      	cmp	r2, r3
 801452c:	bfa8      	it	ge
 801452e:	4623      	movge	r3, r4
 8014530:	460f      	mov	r7, r1
 8014532:	bfa4      	itt	ge
 8014534:	460c      	movge	r4, r1
 8014536:	461f      	movge	r7, r3
 8014538:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801453c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8014540:	68a3      	ldr	r3, [r4, #8]
 8014542:	6861      	ldr	r1, [r4, #4]
 8014544:	eb0a 0609 	add.w	r6, sl, r9
 8014548:	42b3      	cmp	r3, r6
 801454a:	b085      	sub	sp, #20
 801454c:	bfb8      	it	lt
 801454e:	3101      	addlt	r1, #1
 8014550:	f7ff ff10 	bl	8014374 <_Balloc>
 8014554:	b930      	cbnz	r0, 8014564 <__multiply+0x44>
 8014556:	4602      	mov	r2, r0
 8014558:	4b44      	ldr	r3, [pc, #272]	@ (801466c <__multiply+0x14c>)
 801455a:	4845      	ldr	r0, [pc, #276]	@ (8014670 <__multiply+0x150>)
 801455c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014560:	f000 fcd8 	bl	8014f14 <__assert_func>
 8014564:	f100 0514 	add.w	r5, r0, #20
 8014568:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801456c:	462b      	mov	r3, r5
 801456e:	2200      	movs	r2, #0
 8014570:	4543      	cmp	r3, r8
 8014572:	d321      	bcc.n	80145b8 <__multiply+0x98>
 8014574:	f107 0114 	add.w	r1, r7, #20
 8014578:	f104 0214 	add.w	r2, r4, #20
 801457c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8014580:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8014584:	9302      	str	r3, [sp, #8]
 8014586:	1b13      	subs	r3, r2, r4
 8014588:	3b15      	subs	r3, #21
 801458a:	f023 0303 	bic.w	r3, r3, #3
 801458e:	3304      	adds	r3, #4
 8014590:	f104 0715 	add.w	r7, r4, #21
 8014594:	42ba      	cmp	r2, r7
 8014596:	bf38      	it	cc
 8014598:	2304      	movcc	r3, #4
 801459a:	9301      	str	r3, [sp, #4]
 801459c:	9b02      	ldr	r3, [sp, #8]
 801459e:	9103      	str	r1, [sp, #12]
 80145a0:	428b      	cmp	r3, r1
 80145a2:	d80c      	bhi.n	80145be <__multiply+0x9e>
 80145a4:	2e00      	cmp	r6, #0
 80145a6:	dd03      	ble.n	80145b0 <__multiply+0x90>
 80145a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d05b      	beq.n	8014668 <__multiply+0x148>
 80145b0:	6106      	str	r6, [r0, #16]
 80145b2:	b005      	add	sp, #20
 80145b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145b8:	f843 2b04 	str.w	r2, [r3], #4
 80145bc:	e7d8      	b.n	8014570 <__multiply+0x50>
 80145be:	f8b1 a000 	ldrh.w	sl, [r1]
 80145c2:	f1ba 0f00 	cmp.w	sl, #0
 80145c6:	d024      	beq.n	8014612 <__multiply+0xf2>
 80145c8:	f104 0e14 	add.w	lr, r4, #20
 80145cc:	46a9      	mov	r9, r5
 80145ce:	f04f 0c00 	mov.w	ip, #0
 80145d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80145d6:	f8d9 3000 	ldr.w	r3, [r9]
 80145da:	fa1f fb87 	uxth.w	fp, r7
 80145de:	b29b      	uxth	r3, r3
 80145e0:	fb0a 330b 	mla	r3, sl, fp, r3
 80145e4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80145e8:	f8d9 7000 	ldr.w	r7, [r9]
 80145ec:	4463      	add	r3, ip
 80145ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80145f2:	fb0a c70b 	mla	r7, sl, fp, ip
 80145f6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80145fa:	b29b      	uxth	r3, r3
 80145fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014600:	4572      	cmp	r2, lr
 8014602:	f849 3b04 	str.w	r3, [r9], #4
 8014606:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801460a:	d8e2      	bhi.n	80145d2 <__multiply+0xb2>
 801460c:	9b01      	ldr	r3, [sp, #4]
 801460e:	f845 c003 	str.w	ip, [r5, r3]
 8014612:	9b03      	ldr	r3, [sp, #12]
 8014614:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014618:	3104      	adds	r1, #4
 801461a:	f1b9 0f00 	cmp.w	r9, #0
 801461e:	d021      	beq.n	8014664 <__multiply+0x144>
 8014620:	682b      	ldr	r3, [r5, #0]
 8014622:	f104 0c14 	add.w	ip, r4, #20
 8014626:	46ae      	mov	lr, r5
 8014628:	f04f 0a00 	mov.w	sl, #0
 801462c:	f8bc b000 	ldrh.w	fp, [ip]
 8014630:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8014634:	fb09 770b 	mla	r7, r9, fp, r7
 8014638:	4457      	add	r7, sl
 801463a:	b29b      	uxth	r3, r3
 801463c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014640:	f84e 3b04 	str.w	r3, [lr], #4
 8014644:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014648:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801464c:	f8be 3000 	ldrh.w	r3, [lr]
 8014650:	fb09 330a 	mla	r3, r9, sl, r3
 8014654:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8014658:	4562      	cmp	r2, ip
 801465a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801465e:	d8e5      	bhi.n	801462c <__multiply+0x10c>
 8014660:	9f01      	ldr	r7, [sp, #4]
 8014662:	51eb      	str	r3, [r5, r7]
 8014664:	3504      	adds	r5, #4
 8014666:	e799      	b.n	801459c <__multiply+0x7c>
 8014668:	3e01      	subs	r6, #1
 801466a:	e79b      	b.n	80145a4 <__multiply+0x84>
 801466c:	08017cfa 	.word	0x08017cfa
 8014670:	08017d63 	.word	0x08017d63

08014674 <__pow5mult>:
 8014674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014678:	4615      	mov	r5, r2
 801467a:	f012 0203 	ands.w	r2, r2, #3
 801467e:	4607      	mov	r7, r0
 8014680:	460e      	mov	r6, r1
 8014682:	d007      	beq.n	8014694 <__pow5mult+0x20>
 8014684:	4c1a      	ldr	r4, [pc, #104]	@ (80146f0 <__pow5mult+0x7c>)
 8014686:	3a01      	subs	r2, #1
 8014688:	2300      	movs	r3, #0
 801468a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801468e:	f7ff fe9f 	bl	80143d0 <__multadd>
 8014692:	4606      	mov	r6, r0
 8014694:	10ad      	asrs	r5, r5, #2
 8014696:	d027      	beq.n	80146e8 <__pow5mult+0x74>
 8014698:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 801469a:	b944      	cbnz	r4, 80146ae <__pow5mult+0x3a>
 801469c:	f240 2171 	movw	r1, #625	@ 0x271
 80146a0:	4638      	mov	r0, r7
 80146a2:	f7ff ff27 	bl	80144f4 <__i2b>
 80146a6:	2300      	movs	r3, #0
 80146a8:	6438      	str	r0, [r7, #64]	@ 0x40
 80146aa:	4604      	mov	r4, r0
 80146ac:	6003      	str	r3, [r0, #0]
 80146ae:	f04f 0900 	mov.w	r9, #0
 80146b2:	07eb      	lsls	r3, r5, #31
 80146b4:	d50a      	bpl.n	80146cc <__pow5mult+0x58>
 80146b6:	4631      	mov	r1, r6
 80146b8:	4622      	mov	r2, r4
 80146ba:	4638      	mov	r0, r7
 80146bc:	f7ff ff30 	bl	8014520 <__multiply>
 80146c0:	4631      	mov	r1, r6
 80146c2:	4680      	mov	r8, r0
 80146c4:	4638      	mov	r0, r7
 80146c6:	f7ff fe7a 	bl	80143be <_Bfree>
 80146ca:	4646      	mov	r6, r8
 80146cc:	106d      	asrs	r5, r5, #1
 80146ce:	d00b      	beq.n	80146e8 <__pow5mult+0x74>
 80146d0:	6820      	ldr	r0, [r4, #0]
 80146d2:	b938      	cbnz	r0, 80146e4 <__pow5mult+0x70>
 80146d4:	4622      	mov	r2, r4
 80146d6:	4621      	mov	r1, r4
 80146d8:	4638      	mov	r0, r7
 80146da:	f7ff ff21 	bl	8014520 <__multiply>
 80146de:	6020      	str	r0, [r4, #0]
 80146e0:	f8c0 9000 	str.w	r9, [r0]
 80146e4:	4604      	mov	r4, r0
 80146e6:	e7e4      	b.n	80146b2 <__pow5mult+0x3e>
 80146e8:	4630      	mov	r0, r6
 80146ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146ee:	bf00      	nop
 80146f0:	08017dbc 	.word	0x08017dbc

080146f4 <__lshift>:
 80146f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146f8:	460c      	mov	r4, r1
 80146fa:	6849      	ldr	r1, [r1, #4]
 80146fc:	6923      	ldr	r3, [r4, #16]
 80146fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014702:	68a3      	ldr	r3, [r4, #8]
 8014704:	4607      	mov	r7, r0
 8014706:	4691      	mov	r9, r2
 8014708:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801470c:	f108 0601 	add.w	r6, r8, #1
 8014710:	42b3      	cmp	r3, r6
 8014712:	db0b      	blt.n	801472c <__lshift+0x38>
 8014714:	4638      	mov	r0, r7
 8014716:	f7ff fe2d 	bl	8014374 <_Balloc>
 801471a:	4605      	mov	r5, r0
 801471c:	b948      	cbnz	r0, 8014732 <__lshift+0x3e>
 801471e:	4602      	mov	r2, r0
 8014720:	4b28      	ldr	r3, [pc, #160]	@ (80147c4 <__lshift+0xd0>)
 8014722:	4829      	ldr	r0, [pc, #164]	@ (80147c8 <__lshift+0xd4>)
 8014724:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014728:	f000 fbf4 	bl	8014f14 <__assert_func>
 801472c:	3101      	adds	r1, #1
 801472e:	005b      	lsls	r3, r3, #1
 8014730:	e7ee      	b.n	8014710 <__lshift+0x1c>
 8014732:	2300      	movs	r3, #0
 8014734:	f100 0114 	add.w	r1, r0, #20
 8014738:	f100 0210 	add.w	r2, r0, #16
 801473c:	4618      	mov	r0, r3
 801473e:	4553      	cmp	r3, sl
 8014740:	db33      	blt.n	80147aa <__lshift+0xb6>
 8014742:	6920      	ldr	r0, [r4, #16]
 8014744:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014748:	f104 0314 	add.w	r3, r4, #20
 801474c:	f019 091f 	ands.w	r9, r9, #31
 8014750:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014754:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014758:	d02b      	beq.n	80147b2 <__lshift+0xbe>
 801475a:	f1c9 0e20 	rsb	lr, r9, #32
 801475e:	468a      	mov	sl, r1
 8014760:	2200      	movs	r2, #0
 8014762:	6818      	ldr	r0, [r3, #0]
 8014764:	fa00 f009 	lsl.w	r0, r0, r9
 8014768:	4310      	orrs	r0, r2
 801476a:	f84a 0b04 	str.w	r0, [sl], #4
 801476e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014772:	459c      	cmp	ip, r3
 8014774:	fa22 f20e 	lsr.w	r2, r2, lr
 8014778:	d8f3      	bhi.n	8014762 <__lshift+0x6e>
 801477a:	ebac 0304 	sub.w	r3, ip, r4
 801477e:	3b15      	subs	r3, #21
 8014780:	f023 0303 	bic.w	r3, r3, #3
 8014784:	3304      	adds	r3, #4
 8014786:	f104 0015 	add.w	r0, r4, #21
 801478a:	4584      	cmp	ip, r0
 801478c:	bf38      	it	cc
 801478e:	2304      	movcc	r3, #4
 8014790:	50ca      	str	r2, [r1, r3]
 8014792:	b10a      	cbz	r2, 8014798 <__lshift+0xa4>
 8014794:	f108 0602 	add.w	r6, r8, #2
 8014798:	3e01      	subs	r6, #1
 801479a:	4638      	mov	r0, r7
 801479c:	612e      	str	r6, [r5, #16]
 801479e:	4621      	mov	r1, r4
 80147a0:	f7ff fe0d 	bl	80143be <_Bfree>
 80147a4:	4628      	mov	r0, r5
 80147a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80147ae:	3301      	adds	r3, #1
 80147b0:	e7c5      	b.n	801473e <__lshift+0x4a>
 80147b2:	3904      	subs	r1, #4
 80147b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80147b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80147bc:	459c      	cmp	ip, r3
 80147be:	d8f9      	bhi.n	80147b4 <__lshift+0xc0>
 80147c0:	e7ea      	b.n	8014798 <__lshift+0xa4>
 80147c2:	bf00      	nop
 80147c4:	08017cfa 	.word	0x08017cfa
 80147c8:	08017d63 	.word	0x08017d63

080147cc <__mcmp>:
 80147cc:	690a      	ldr	r2, [r1, #16]
 80147ce:	4603      	mov	r3, r0
 80147d0:	6900      	ldr	r0, [r0, #16]
 80147d2:	1a80      	subs	r0, r0, r2
 80147d4:	b530      	push	{r4, r5, lr}
 80147d6:	d10e      	bne.n	80147f6 <__mcmp+0x2a>
 80147d8:	3314      	adds	r3, #20
 80147da:	3114      	adds	r1, #20
 80147dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80147e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80147e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80147e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80147ec:	4295      	cmp	r5, r2
 80147ee:	d003      	beq.n	80147f8 <__mcmp+0x2c>
 80147f0:	d205      	bcs.n	80147fe <__mcmp+0x32>
 80147f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80147f6:	bd30      	pop	{r4, r5, pc}
 80147f8:	42a3      	cmp	r3, r4
 80147fa:	d3f3      	bcc.n	80147e4 <__mcmp+0x18>
 80147fc:	e7fb      	b.n	80147f6 <__mcmp+0x2a>
 80147fe:	2001      	movs	r0, #1
 8014800:	e7f9      	b.n	80147f6 <__mcmp+0x2a>
	...

08014804 <__mdiff>:
 8014804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014808:	4689      	mov	r9, r1
 801480a:	4606      	mov	r6, r0
 801480c:	4611      	mov	r1, r2
 801480e:	4648      	mov	r0, r9
 8014810:	4614      	mov	r4, r2
 8014812:	f7ff ffdb 	bl	80147cc <__mcmp>
 8014816:	1e05      	subs	r5, r0, #0
 8014818:	d112      	bne.n	8014840 <__mdiff+0x3c>
 801481a:	4629      	mov	r1, r5
 801481c:	4630      	mov	r0, r6
 801481e:	f7ff fda9 	bl	8014374 <_Balloc>
 8014822:	4602      	mov	r2, r0
 8014824:	b928      	cbnz	r0, 8014832 <__mdiff+0x2e>
 8014826:	4b3f      	ldr	r3, [pc, #252]	@ (8014924 <__mdiff+0x120>)
 8014828:	f240 2137 	movw	r1, #567	@ 0x237
 801482c:	483e      	ldr	r0, [pc, #248]	@ (8014928 <__mdiff+0x124>)
 801482e:	f000 fb71 	bl	8014f14 <__assert_func>
 8014832:	2301      	movs	r3, #1
 8014834:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014838:	4610      	mov	r0, r2
 801483a:	b003      	add	sp, #12
 801483c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014840:	bfbc      	itt	lt
 8014842:	464b      	movlt	r3, r9
 8014844:	46a1      	movlt	r9, r4
 8014846:	4630      	mov	r0, r6
 8014848:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801484c:	bfba      	itte	lt
 801484e:	461c      	movlt	r4, r3
 8014850:	2501      	movlt	r5, #1
 8014852:	2500      	movge	r5, #0
 8014854:	f7ff fd8e 	bl	8014374 <_Balloc>
 8014858:	4602      	mov	r2, r0
 801485a:	b918      	cbnz	r0, 8014864 <__mdiff+0x60>
 801485c:	4b31      	ldr	r3, [pc, #196]	@ (8014924 <__mdiff+0x120>)
 801485e:	f240 2145 	movw	r1, #581	@ 0x245
 8014862:	e7e3      	b.n	801482c <__mdiff+0x28>
 8014864:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014868:	6926      	ldr	r6, [r4, #16]
 801486a:	60c5      	str	r5, [r0, #12]
 801486c:	f109 0310 	add.w	r3, r9, #16
 8014870:	f109 0514 	add.w	r5, r9, #20
 8014874:	f104 0e14 	add.w	lr, r4, #20
 8014878:	f100 0b14 	add.w	fp, r0, #20
 801487c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014880:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014884:	9301      	str	r3, [sp, #4]
 8014886:	46d9      	mov	r9, fp
 8014888:	f04f 0c00 	mov.w	ip, #0
 801488c:	9b01      	ldr	r3, [sp, #4]
 801488e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014892:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014896:	9301      	str	r3, [sp, #4]
 8014898:	fa1f f38a 	uxth.w	r3, sl
 801489c:	4619      	mov	r1, r3
 801489e:	b283      	uxth	r3, r0
 80148a0:	1acb      	subs	r3, r1, r3
 80148a2:	0c00      	lsrs	r0, r0, #16
 80148a4:	4463      	add	r3, ip
 80148a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80148aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80148ae:	b29b      	uxth	r3, r3
 80148b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80148b4:	4576      	cmp	r6, lr
 80148b6:	f849 3b04 	str.w	r3, [r9], #4
 80148ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80148be:	d8e5      	bhi.n	801488c <__mdiff+0x88>
 80148c0:	1b33      	subs	r3, r6, r4
 80148c2:	3b15      	subs	r3, #21
 80148c4:	f023 0303 	bic.w	r3, r3, #3
 80148c8:	3415      	adds	r4, #21
 80148ca:	3304      	adds	r3, #4
 80148cc:	42a6      	cmp	r6, r4
 80148ce:	bf38      	it	cc
 80148d0:	2304      	movcc	r3, #4
 80148d2:	441d      	add	r5, r3
 80148d4:	445b      	add	r3, fp
 80148d6:	461e      	mov	r6, r3
 80148d8:	462c      	mov	r4, r5
 80148da:	4544      	cmp	r4, r8
 80148dc:	d30e      	bcc.n	80148fc <__mdiff+0xf8>
 80148de:	f108 0103 	add.w	r1, r8, #3
 80148e2:	1b49      	subs	r1, r1, r5
 80148e4:	f021 0103 	bic.w	r1, r1, #3
 80148e8:	3d03      	subs	r5, #3
 80148ea:	45a8      	cmp	r8, r5
 80148ec:	bf38      	it	cc
 80148ee:	2100      	movcc	r1, #0
 80148f0:	440b      	add	r3, r1
 80148f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80148f6:	b191      	cbz	r1, 801491e <__mdiff+0x11a>
 80148f8:	6117      	str	r7, [r2, #16]
 80148fa:	e79d      	b.n	8014838 <__mdiff+0x34>
 80148fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8014900:	46e6      	mov	lr, ip
 8014902:	0c08      	lsrs	r0, r1, #16
 8014904:	fa1c fc81 	uxtah	ip, ip, r1
 8014908:	4471      	add	r1, lr
 801490a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801490e:	b289      	uxth	r1, r1
 8014910:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014914:	f846 1b04 	str.w	r1, [r6], #4
 8014918:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801491c:	e7dd      	b.n	80148da <__mdiff+0xd6>
 801491e:	3f01      	subs	r7, #1
 8014920:	e7e7      	b.n	80148f2 <__mdiff+0xee>
 8014922:	bf00      	nop
 8014924:	08017cfa 	.word	0x08017cfa
 8014928:	08017d63 	.word	0x08017d63

0801492c <__d2b>:
 801492c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014930:	460f      	mov	r7, r1
 8014932:	2101      	movs	r1, #1
 8014934:	ec59 8b10 	vmov	r8, r9, d0
 8014938:	4616      	mov	r6, r2
 801493a:	f7ff fd1b 	bl	8014374 <_Balloc>
 801493e:	4604      	mov	r4, r0
 8014940:	b930      	cbnz	r0, 8014950 <__d2b+0x24>
 8014942:	4602      	mov	r2, r0
 8014944:	4b23      	ldr	r3, [pc, #140]	@ (80149d4 <__d2b+0xa8>)
 8014946:	4824      	ldr	r0, [pc, #144]	@ (80149d8 <__d2b+0xac>)
 8014948:	f240 310f 	movw	r1, #783	@ 0x30f
 801494c:	f000 fae2 	bl	8014f14 <__assert_func>
 8014950:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014954:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014958:	b10d      	cbz	r5, 801495e <__d2b+0x32>
 801495a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801495e:	9301      	str	r3, [sp, #4]
 8014960:	f1b8 0300 	subs.w	r3, r8, #0
 8014964:	d023      	beq.n	80149ae <__d2b+0x82>
 8014966:	4668      	mov	r0, sp
 8014968:	9300      	str	r3, [sp, #0]
 801496a:	f7ff fd96 	bl	801449a <__lo0bits>
 801496e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014972:	b1d0      	cbz	r0, 80149aa <__d2b+0x7e>
 8014974:	f1c0 0320 	rsb	r3, r0, #32
 8014978:	fa02 f303 	lsl.w	r3, r2, r3
 801497c:	430b      	orrs	r3, r1
 801497e:	40c2      	lsrs	r2, r0
 8014980:	6163      	str	r3, [r4, #20]
 8014982:	9201      	str	r2, [sp, #4]
 8014984:	9b01      	ldr	r3, [sp, #4]
 8014986:	61a3      	str	r3, [r4, #24]
 8014988:	2b00      	cmp	r3, #0
 801498a:	bf0c      	ite	eq
 801498c:	2201      	moveq	r2, #1
 801498e:	2202      	movne	r2, #2
 8014990:	6122      	str	r2, [r4, #16]
 8014992:	b1a5      	cbz	r5, 80149be <__d2b+0x92>
 8014994:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014998:	4405      	add	r5, r0
 801499a:	603d      	str	r5, [r7, #0]
 801499c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80149a0:	6030      	str	r0, [r6, #0]
 80149a2:	4620      	mov	r0, r4
 80149a4:	b003      	add	sp, #12
 80149a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80149aa:	6161      	str	r1, [r4, #20]
 80149ac:	e7ea      	b.n	8014984 <__d2b+0x58>
 80149ae:	a801      	add	r0, sp, #4
 80149b0:	f7ff fd73 	bl	801449a <__lo0bits>
 80149b4:	9b01      	ldr	r3, [sp, #4]
 80149b6:	6163      	str	r3, [r4, #20]
 80149b8:	3020      	adds	r0, #32
 80149ba:	2201      	movs	r2, #1
 80149bc:	e7e8      	b.n	8014990 <__d2b+0x64>
 80149be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80149c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80149c6:	6038      	str	r0, [r7, #0]
 80149c8:	6918      	ldr	r0, [r3, #16]
 80149ca:	f7ff fd47 	bl	801445c <__hi0bits>
 80149ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80149d2:	e7e5      	b.n	80149a0 <__d2b+0x74>
 80149d4:	08017cfa 	.word	0x08017cfa
 80149d8:	08017d63 	.word	0x08017d63

080149dc <_realloc_r>:
 80149dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149e0:	4682      	mov	sl, r0
 80149e2:	4693      	mov	fp, r2
 80149e4:	460c      	mov	r4, r1
 80149e6:	b929      	cbnz	r1, 80149f4 <_realloc_r+0x18>
 80149e8:	4611      	mov	r1, r2
 80149ea:	b003      	add	sp, #12
 80149ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149f0:	f7fc b8f6 	b.w	8010be0 <_malloc_r>
 80149f4:	f7fc fb2e 	bl	8011054 <__malloc_lock>
 80149f8:	f10b 080b 	add.w	r8, fp, #11
 80149fc:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8014a00:	f1b8 0f16 	cmp.w	r8, #22
 8014a04:	f1a4 0908 	sub.w	r9, r4, #8
 8014a08:	f025 0603 	bic.w	r6, r5, #3
 8014a0c:	d908      	bls.n	8014a20 <_realloc_r+0x44>
 8014a0e:	f038 0807 	bics.w	r8, r8, #7
 8014a12:	d507      	bpl.n	8014a24 <_realloc_r+0x48>
 8014a14:	230c      	movs	r3, #12
 8014a16:	f8ca 3000 	str.w	r3, [sl]
 8014a1a:	f04f 0b00 	mov.w	fp, #0
 8014a1e:	e032      	b.n	8014a86 <_realloc_r+0xaa>
 8014a20:	f04f 0810 	mov.w	r8, #16
 8014a24:	45c3      	cmp	fp, r8
 8014a26:	d8f5      	bhi.n	8014a14 <_realloc_r+0x38>
 8014a28:	4546      	cmp	r6, r8
 8014a2a:	f280 8174 	bge.w	8014d16 <_realloc_r+0x33a>
 8014a2e:	4b9e      	ldr	r3, [pc, #632]	@ (8014ca8 <_realloc_r+0x2cc>)
 8014a30:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8014a34:	eb09 0106 	add.w	r1, r9, r6
 8014a38:	458c      	cmp	ip, r1
 8014a3a:	6848      	ldr	r0, [r1, #4]
 8014a3c:	d005      	beq.n	8014a4a <_realloc_r+0x6e>
 8014a3e:	f020 0201 	bic.w	r2, r0, #1
 8014a42:	440a      	add	r2, r1
 8014a44:	6852      	ldr	r2, [r2, #4]
 8014a46:	07d7      	lsls	r7, r2, #31
 8014a48:	d449      	bmi.n	8014ade <_realloc_r+0x102>
 8014a4a:	f020 0003 	bic.w	r0, r0, #3
 8014a4e:	458c      	cmp	ip, r1
 8014a50:	eb06 0700 	add.w	r7, r6, r0
 8014a54:	d11b      	bne.n	8014a8e <_realloc_r+0xb2>
 8014a56:	f108 0210 	add.w	r2, r8, #16
 8014a5a:	42ba      	cmp	r2, r7
 8014a5c:	dc41      	bgt.n	8014ae2 <_realloc_r+0x106>
 8014a5e:	eb09 0208 	add.w	r2, r9, r8
 8014a62:	eba7 0708 	sub.w	r7, r7, r8
 8014a66:	f047 0701 	orr.w	r7, r7, #1
 8014a6a:	609a      	str	r2, [r3, #8]
 8014a6c:	6057      	str	r7, [r2, #4]
 8014a6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014a72:	f003 0301 	and.w	r3, r3, #1
 8014a76:	ea43 0308 	orr.w	r3, r3, r8
 8014a7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8014a7e:	4650      	mov	r0, sl
 8014a80:	f7fc faee 	bl	8011060 <__malloc_unlock>
 8014a84:	46a3      	mov	fp, r4
 8014a86:	4658      	mov	r0, fp
 8014a88:	b003      	add	sp, #12
 8014a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a8e:	45b8      	cmp	r8, r7
 8014a90:	dc27      	bgt.n	8014ae2 <_realloc_r+0x106>
 8014a92:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8014a96:	60d3      	str	r3, [r2, #12]
 8014a98:	609a      	str	r2, [r3, #8]
 8014a9a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014a9e:	eba7 0008 	sub.w	r0, r7, r8
 8014aa2:	280f      	cmp	r0, #15
 8014aa4:	f003 0301 	and.w	r3, r3, #1
 8014aa8:	eb09 0207 	add.w	r2, r9, r7
 8014aac:	f240 8135 	bls.w	8014d1a <_realloc_r+0x33e>
 8014ab0:	eb09 0108 	add.w	r1, r9, r8
 8014ab4:	ea48 0303 	orr.w	r3, r8, r3
 8014ab8:	f040 0001 	orr.w	r0, r0, #1
 8014abc:	f8c9 3004 	str.w	r3, [r9, #4]
 8014ac0:	6048      	str	r0, [r1, #4]
 8014ac2:	6853      	ldr	r3, [r2, #4]
 8014ac4:	f043 0301 	orr.w	r3, r3, #1
 8014ac8:	6053      	str	r3, [r2, #4]
 8014aca:	3108      	adds	r1, #8
 8014acc:	4650      	mov	r0, sl
 8014ace:	f7fb ffc7 	bl	8010a60 <_free_r>
 8014ad2:	4650      	mov	r0, sl
 8014ad4:	f7fc fac4 	bl	8011060 <__malloc_unlock>
 8014ad8:	f109 0b08 	add.w	fp, r9, #8
 8014adc:	e7d3      	b.n	8014a86 <_realloc_r+0xaa>
 8014ade:	2000      	movs	r0, #0
 8014ae0:	4601      	mov	r1, r0
 8014ae2:	07ea      	lsls	r2, r5, #31
 8014ae4:	f100 80c7 	bmi.w	8014c76 <_realloc_r+0x29a>
 8014ae8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8014aec:	eba9 0505 	sub.w	r5, r9, r5
 8014af0:	686a      	ldr	r2, [r5, #4]
 8014af2:	f022 0203 	bic.w	r2, r2, #3
 8014af6:	4432      	add	r2, r6
 8014af8:	9201      	str	r2, [sp, #4]
 8014afa:	2900      	cmp	r1, #0
 8014afc:	f000 8086 	beq.w	8014c0c <_realloc_r+0x230>
 8014b00:	458c      	cmp	ip, r1
 8014b02:	eb00 0702 	add.w	r7, r0, r2
 8014b06:	d149      	bne.n	8014b9c <_realloc_r+0x1c0>
 8014b08:	f108 0210 	add.w	r2, r8, #16
 8014b0c:	42ba      	cmp	r2, r7
 8014b0e:	dc7d      	bgt.n	8014c0c <_realloc_r+0x230>
 8014b10:	46ab      	mov	fp, r5
 8014b12:	68ea      	ldr	r2, [r5, #12]
 8014b14:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8014b18:	60ca      	str	r2, [r1, #12]
 8014b1a:	6091      	str	r1, [r2, #8]
 8014b1c:	1f32      	subs	r2, r6, #4
 8014b1e:	2a24      	cmp	r2, #36	@ 0x24
 8014b20:	d836      	bhi.n	8014b90 <_realloc_r+0x1b4>
 8014b22:	2a13      	cmp	r2, #19
 8014b24:	d932      	bls.n	8014b8c <_realloc_r+0x1b0>
 8014b26:	6821      	ldr	r1, [r4, #0]
 8014b28:	60a9      	str	r1, [r5, #8]
 8014b2a:	6861      	ldr	r1, [r4, #4]
 8014b2c:	60e9      	str	r1, [r5, #12]
 8014b2e:	2a1b      	cmp	r2, #27
 8014b30:	d81a      	bhi.n	8014b68 <_realloc_r+0x18c>
 8014b32:	3408      	adds	r4, #8
 8014b34:	f105 0210 	add.w	r2, r5, #16
 8014b38:	6821      	ldr	r1, [r4, #0]
 8014b3a:	6011      	str	r1, [r2, #0]
 8014b3c:	6861      	ldr	r1, [r4, #4]
 8014b3e:	6051      	str	r1, [r2, #4]
 8014b40:	68a1      	ldr	r1, [r4, #8]
 8014b42:	6091      	str	r1, [r2, #8]
 8014b44:	eb05 0208 	add.w	r2, r5, r8
 8014b48:	eba7 0708 	sub.w	r7, r7, r8
 8014b4c:	f047 0701 	orr.w	r7, r7, #1
 8014b50:	609a      	str	r2, [r3, #8]
 8014b52:	6057      	str	r7, [r2, #4]
 8014b54:	686b      	ldr	r3, [r5, #4]
 8014b56:	f003 0301 	and.w	r3, r3, #1
 8014b5a:	ea43 0308 	orr.w	r3, r3, r8
 8014b5e:	606b      	str	r3, [r5, #4]
 8014b60:	4650      	mov	r0, sl
 8014b62:	f7fc fa7d 	bl	8011060 <__malloc_unlock>
 8014b66:	e78e      	b.n	8014a86 <_realloc_r+0xaa>
 8014b68:	68a1      	ldr	r1, [r4, #8]
 8014b6a:	6129      	str	r1, [r5, #16]
 8014b6c:	68e1      	ldr	r1, [r4, #12]
 8014b6e:	6169      	str	r1, [r5, #20]
 8014b70:	2a24      	cmp	r2, #36	@ 0x24
 8014b72:	bf01      	itttt	eq
 8014b74:	6922      	ldreq	r2, [r4, #16]
 8014b76:	61aa      	streq	r2, [r5, #24]
 8014b78:	6961      	ldreq	r1, [r4, #20]
 8014b7a:	61e9      	streq	r1, [r5, #28]
 8014b7c:	bf19      	ittee	ne
 8014b7e:	3410      	addne	r4, #16
 8014b80:	f105 0218 	addne.w	r2, r5, #24
 8014b84:	f105 0220 	addeq.w	r2, r5, #32
 8014b88:	3418      	addeq	r4, #24
 8014b8a:	e7d5      	b.n	8014b38 <_realloc_r+0x15c>
 8014b8c:	465a      	mov	r2, fp
 8014b8e:	e7d3      	b.n	8014b38 <_realloc_r+0x15c>
 8014b90:	4621      	mov	r1, r4
 8014b92:	4658      	mov	r0, fp
 8014b94:	f7fb fe59 	bl	801084a <memmove>
 8014b98:	4b43      	ldr	r3, [pc, #268]	@ (8014ca8 <_realloc_r+0x2cc>)
 8014b9a:	e7d3      	b.n	8014b44 <_realloc_r+0x168>
 8014b9c:	45b8      	cmp	r8, r7
 8014b9e:	dc35      	bgt.n	8014c0c <_realloc_r+0x230>
 8014ba0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8014ba4:	4628      	mov	r0, r5
 8014ba6:	60d3      	str	r3, [r2, #12]
 8014ba8:	609a      	str	r2, [r3, #8]
 8014baa:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8014bae:	68eb      	ldr	r3, [r5, #12]
 8014bb0:	60d3      	str	r3, [r2, #12]
 8014bb2:	609a      	str	r2, [r3, #8]
 8014bb4:	1f32      	subs	r2, r6, #4
 8014bb6:	2a24      	cmp	r2, #36	@ 0x24
 8014bb8:	d824      	bhi.n	8014c04 <_realloc_r+0x228>
 8014bba:	2a13      	cmp	r2, #19
 8014bbc:	d908      	bls.n	8014bd0 <_realloc_r+0x1f4>
 8014bbe:	6823      	ldr	r3, [r4, #0]
 8014bc0:	60ab      	str	r3, [r5, #8]
 8014bc2:	6863      	ldr	r3, [r4, #4]
 8014bc4:	60eb      	str	r3, [r5, #12]
 8014bc6:	2a1b      	cmp	r2, #27
 8014bc8:	d80a      	bhi.n	8014be0 <_realloc_r+0x204>
 8014bca:	3408      	adds	r4, #8
 8014bcc:	f105 0010 	add.w	r0, r5, #16
 8014bd0:	6823      	ldr	r3, [r4, #0]
 8014bd2:	6003      	str	r3, [r0, #0]
 8014bd4:	6863      	ldr	r3, [r4, #4]
 8014bd6:	6043      	str	r3, [r0, #4]
 8014bd8:	68a3      	ldr	r3, [r4, #8]
 8014bda:	6083      	str	r3, [r0, #8]
 8014bdc:	46a9      	mov	r9, r5
 8014bde:	e75c      	b.n	8014a9a <_realloc_r+0xbe>
 8014be0:	68a3      	ldr	r3, [r4, #8]
 8014be2:	612b      	str	r3, [r5, #16]
 8014be4:	68e3      	ldr	r3, [r4, #12]
 8014be6:	616b      	str	r3, [r5, #20]
 8014be8:	2a24      	cmp	r2, #36	@ 0x24
 8014bea:	bf01      	itttt	eq
 8014bec:	6923      	ldreq	r3, [r4, #16]
 8014bee:	61ab      	streq	r3, [r5, #24]
 8014bf0:	6963      	ldreq	r3, [r4, #20]
 8014bf2:	61eb      	streq	r3, [r5, #28]
 8014bf4:	bf19      	ittee	ne
 8014bf6:	3410      	addne	r4, #16
 8014bf8:	f105 0018 	addne.w	r0, r5, #24
 8014bfc:	f105 0020 	addeq.w	r0, r5, #32
 8014c00:	3418      	addeq	r4, #24
 8014c02:	e7e5      	b.n	8014bd0 <_realloc_r+0x1f4>
 8014c04:	4621      	mov	r1, r4
 8014c06:	f7fb fe20 	bl	801084a <memmove>
 8014c0a:	e7e7      	b.n	8014bdc <_realloc_r+0x200>
 8014c0c:	9b01      	ldr	r3, [sp, #4]
 8014c0e:	4598      	cmp	r8, r3
 8014c10:	dc31      	bgt.n	8014c76 <_realloc_r+0x29a>
 8014c12:	4628      	mov	r0, r5
 8014c14:	68eb      	ldr	r3, [r5, #12]
 8014c16:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8014c1a:	60d3      	str	r3, [r2, #12]
 8014c1c:	609a      	str	r2, [r3, #8]
 8014c1e:	1f32      	subs	r2, r6, #4
 8014c20:	2a24      	cmp	r2, #36	@ 0x24
 8014c22:	d824      	bhi.n	8014c6e <_realloc_r+0x292>
 8014c24:	2a13      	cmp	r2, #19
 8014c26:	d908      	bls.n	8014c3a <_realloc_r+0x25e>
 8014c28:	6823      	ldr	r3, [r4, #0]
 8014c2a:	60ab      	str	r3, [r5, #8]
 8014c2c:	6863      	ldr	r3, [r4, #4]
 8014c2e:	60eb      	str	r3, [r5, #12]
 8014c30:	2a1b      	cmp	r2, #27
 8014c32:	d80a      	bhi.n	8014c4a <_realloc_r+0x26e>
 8014c34:	3408      	adds	r4, #8
 8014c36:	f105 0010 	add.w	r0, r5, #16
 8014c3a:	6823      	ldr	r3, [r4, #0]
 8014c3c:	6003      	str	r3, [r0, #0]
 8014c3e:	6863      	ldr	r3, [r4, #4]
 8014c40:	6043      	str	r3, [r0, #4]
 8014c42:	68a3      	ldr	r3, [r4, #8]
 8014c44:	6083      	str	r3, [r0, #8]
 8014c46:	9f01      	ldr	r7, [sp, #4]
 8014c48:	e7c8      	b.n	8014bdc <_realloc_r+0x200>
 8014c4a:	68a3      	ldr	r3, [r4, #8]
 8014c4c:	612b      	str	r3, [r5, #16]
 8014c4e:	68e3      	ldr	r3, [r4, #12]
 8014c50:	616b      	str	r3, [r5, #20]
 8014c52:	2a24      	cmp	r2, #36	@ 0x24
 8014c54:	bf01      	itttt	eq
 8014c56:	6923      	ldreq	r3, [r4, #16]
 8014c58:	61ab      	streq	r3, [r5, #24]
 8014c5a:	6963      	ldreq	r3, [r4, #20]
 8014c5c:	61eb      	streq	r3, [r5, #28]
 8014c5e:	bf19      	ittee	ne
 8014c60:	3410      	addne	r4, #16
 8014c62:	f105 0018 	addne.w	r0, r5, #24
 8014c66:	f105 0020 	addeq.w	r0, r5, #32
 8014c6a:	3418      	addeq	r4, #24
 8014c6c:	e7e5      	b.n	8014c3a <_realloc_r+0x25e>
 8014c6e:	4621      	mov	r1, r4
 8014c70:	f7fb fdeb 	bl	801084a <memmove>
 8014c74:	e7e7      	b.n	8014c46 <_realloc_r+0x26a>
 8014c76:	4659      	mov	r1, fp
 8014c78:	4650      	mov	r0, sl
 8014c7a:	f7fb ffb1 	bl	8010be0 <_malloc_r>
 8014c7e:	4683      	mov	fp, r0
 8014c80:	b918      	cbnz	r0, 8014c8a <_realloc_r+0x2ae>
 8014c82:	4650      	mov	r0, sl
 8014c84:	f7fc f9ec 	bl	8011060 <__malloc_unlock>
 8014c88:	e6c7      	b.n	8014a1a <_realloc_r+0x3e>
 8014c8a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014c8e:	f023 0301 	bic.w	r3, r3, #1
 8014c92:	444b      	add	r3, r9
 8014c94:	f1a0 0208 	sub.w	r2, r0, #8
 8014c98:	4293      	cmp	r3, r2
 8014c9a:	d107      	bne.n	8014cac <_realloc_r+0x2d0>
 8014c9c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8014ca0:	f027 0703 	bic.w	r7, r7, #3
 8014ca4:	4437      	add	r7, r6
 8014ca6:	e6f8      	b.n	8014a9a <_realloc_r+0xbe>
 8014ca8:	2000016c 	.word	0x2000016c
 8014cac:	1f32      	subs	r2, r6, #4
 8014cae:	2a24      	cmp	r2, #36	@ 0x24
 8014cb0:	d82d      	bhi.n	8014d0e <_realloc_r+0x332>
 8014cb2:	2a13      	cmp	r2, #19
 8014cb4:	d928      	bls.n	8014d08 <_realloc_r+0x32c>
 8014cb6:	6823      	ldr	r3, [r4, #0]
 8014cb8:	6003      	str	r3, [r0, #0]
 8014cba:	6863      	ldr	r3, [r4, #4]
 8014cbc:	6043      	str	r3, [r0, #4]
 8014cbe:	2a1b      	cmp	r2, #27
 8014cc0:	d80e      	bhi.n	8014ce0 <_realloc_r+0x304>
 8014cc2:	f104 0208 	add.w	r2, r4, #8
 8014cc6:	f100 0308 	add.w	r3, r0, #8
 8014cca:	6811      	ldr	r1, [r2, #0]
 8014ccc:	6019      	str	r1, [r3, #0]
 8014cce:	6851      	ldr	r1, [r2, #4]
 8014cd0:	6059      	str	r1, [r3, #4]
 8014cd2:	6892      	ldr	r2, [r2, #8]
 8014cd4:	609a      	str	r2, [r3, #8]
 8014cd6:	4621      	mov	r1, r4
 8014cd8:	4650      	mov	r0, sl
 8014cda:	f7fb fec1 	bl	8010a60 <_free_r>
 8014cde:	e73f      	b.n	8014b60 <_realloc_r+0x184>
 8014ce0:	68a3      	ldr	r3, [r4, #8]
 8014ce2:	6083      	str	r3, [r0, #8]
 8014ce4:	68e3      	ldr	r3, [r4, #12]
 8014ce6:	60c3      	str	r3, [r0, #12]
 8014ce8:	2a24      	cmp	r2, #36	@ 0x24
 8014cea:	bf01      	itttt	eq
 8014cec:	6923      	ldreq	r3, [r4, #16]
 8014cee:	6103      	streq	r3, [r0, #16]
 8014cf0:	6961      	ldreq	r1, [r4, #20]
 8014cf2:	6141      	streq	r1, [r0, #20]
 8014cf4:	bf19      	ittee	ne
 8014cf6:	f104 0210 	addne.w	r2, r4, #16
 8014cfa:	f100 0310 	addne.w	r3, r0, #16
 8014cfe:	f104 0218 	addeq.w	r2, r4, #24
 8014d02:	f100 0318 	addeq.w	r3, r0, #24
 8014d06:	e7e0      	b.n	8014cca <_realloc_r+0x2ee>
 8014d08:	4603      	mov	r3, r0
 8014d0a:	4622      	mov	r2, r4
 8014d0c:	e7dd      	b.n	8014cca <_realloc_r+0x2ee>
 8014d0e:	4621      	mov	r1, r4
 8014d10:	f7fb fd9b 	bl	801084a <memmove>
 8014d14:	e7df      	b.n	8014cd6 <_realloc_r+0x2fa>
 8014d16:	4637      	mov	r7, r6
 8014d18:	e6bf      	b.n	8014a9a <_realloc_r+0xbe>
 8014d1a:	431f      	orrs	r7, r3
 8014d1c:	f8c9 7004 	str.w	r7, [r9, #4]
 8014d20:	6853      	ldr	r3, [r2, #4]
 8014d22:	f043 0301 	orr.w	r3, r3, #1
 8014d26:	6053      	str	r3, [r2, #4]
 8014d28:	e6d3      	b.n	8014ad2 <_realloc_r+0xf6>
 8014d2a:	bf00      	nop

08014d2c <__ascii_wctomb>:
 8014d2c:	4603      	mov	r3, r0
 8014d2e:	4608      	mov	r0, r1
 8014d30:	b141      	cbz	r1, 8014d44 <__ascii_wctomb+0x18>
 8014d32:	2aff      	cmp	r2, #255	@ 0xff
 8014d34:	d904      	bls.n	8014d40 <__ascii_wctomb+0x14>
 8014d36:	228a      	movs	r2, #138	@ 0x8a
 8014d38:	601a      	str	r2, [r3, #0]
 8014d3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014d3e:	4770      	bx	lr
 8014d40:	700a      	strb	r2, [r1, #0]
 8014d42:	2001      	movs	r0, #1
 8014d44:	4770      	bx	lr
	...

08014d48 <_wcrtomb_r>:
 8014d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d4a:	4c09      	ldr	r4, [pc, #36]	@ (8014d70 <_wcrtomb_r+0x28>)
 8014d4c:	b085      	sub	sp, #20
 8014d4e:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 8014d52:	4605      	mov	r5, r0
 8014d54:	461e      	mov	r6, r3
 8014d56:	b909      	cbnz	r1, 8014d5c <_wcrtomb_r+0x14>
 8014d58:	460a      	mov	r2, r1
 8014d5a:	a901      	add	r1, sp, #4
 8014d5c:	47b8      	blx	r7
 8014d5e:	1c43      	adds	r3, r0, #1
 8014d60:	bf01      	itttt	eq
 8014d62:	2300      	moveq	r3, #0
 8014d64:	6033      	streq	r3, [r6, #0]
 8014d66:	238a      	moveq	r3, #138	@ 0x8a
 8014d68:	602b      	streq	r3, [r5, #0]
 8014d6a:	b005      	add	sp, #20
 8014d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d6e:	bf00      	nop
 8014d70:	20000574 	.word	0x20000574

08014d74 <__swhatbuf_r>:
 8014d74:	b570      	push	{r4, r5, r6, lr}
 8014d76:	460c      	mov	r4, r1
 8014d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d7c:	2900      	cmp	r1, #0
 8014d7e:	b096      	sub	sp, #88	@ 0x58
 8014d80:	4615      	mov	r5, r2
 8014d82:	461e      	mov	r6, r3
 8014d84:	da07      	bge.n	8014d96 <__swhatbuf_r+0x22>
 8014d86:	89a1      	ldrh	r1, [r4, #12]
 8014d88:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8014d8c:	d117      	bne.n	8014dbe <__swhatbuf_r+0x4a>
 8014d8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014d92:	4608      	mov	r0, r1
 8014d94:	e00f      	b.n	8014db6 <__swhatbuf_r+0x42>
 8014d96:	466a      	mov	r2, sp
 8014d98:	f000 f89a 	bl	8014ed0 <_fstat_r>
 8014d9c:	2800      	cmp	r0, #0
 8014d9e:	dbf2      	blt.n	8014d86 <__swhatbuf_r+0x12>
 8014da0:	9901      	ldr	r1, [sp, #4]
 8014da2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014da6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014daa:	4259      	negs	r1, r3
 8014dac:	4159      	adcs	r1, r3
 8014dae:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8014db2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014db6:	6031      	str	r1, [r6, #0]
 8014db8:	602b      	str	r3, [r5, #0]
 8014dba:	b016      	add	sp, #88	@ 0x58
 8014dbc:	bd70      	pop	{r4, r5, r6, pc}
 8014dbe:	2100      	movs	r1, #0
 8014dc0:	2340      	movs	r3, #64	@ 0x40
 8014dc2:	e7e6      	b.n	8014d92 <__swhatbuf_r+0x1e>

08014dc4 <__smakebuf_r>:
 8014dc4:	898b      	ldrh	r3, [r1, #12]
 8014dc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014dc8:	079d      	lsls	r5, r3, #30
 8014dca:	4606      	mov	r6, r0
 8014dcc:	460c      	mov	r4, r1
 8014dce:	d507      	bpl.n	8014de0 <__smakebuf_r+0x1c>
 8014dd0:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 8014dd4:	6023      	str	r3, [r4, #0]
 8014dd6:	6123      	str	r3, [r4, #16]
 8014dd8:	2301      	movs	r3, #1
 8014dda:	6163      	str	r3, [r4, #20]
 8014ddc:	b003      	add	sp, #12
 8014dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014de0:	ab01      	add	r3, sp, #4
 8014de2:	466a      	mov	r2, sp
 8014de4:	f7ff ffc6 	bl	8014d74 <__swhatbuf_r>
 8014de8:	9f00      	ldr	r7, [sp, #0]
 8014dea:	4605      	mov	r5, r0
 8014dec:	4639      	mov	r1, r7
 8014dee:	4630      	mov	r0, r6
 8014df0:	f7fb fef6 	bl	8010be0 <_malloc_r>
 8014df4:	b948      	cbnz	r0, 8014e0a <__smakebuf_r+0x46>
 8014df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014dfa:	059a      	lsls	r2, r3, #22
 8014dfc:	d4ee      	bmi.n	8014ddc <__smakebuf_r+0x18>
 8014dfe:	f023 0303 	bic.w	r3, r3, #3
 8014e02:	f043 0302 	orr.w	r3, r3, #2
 8014e06:	81a3      	strh	r3, [r4, #12]
 8014e08:	e7e2      	b.n	8014dd0 <__smakebuf_r+0xc>
 8014e0a:	89a3      	ldrh	r3, [r4, #12]
 8014e0c:	6020      	str	r0, [r4, #0]
 8014e0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014e12:	81a3      	strh	r3, [r4, #12]
 8014e14:	9b01      	ldr	r3, [sp, #4]
 8014e16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014e1a:	b15b      	cbz	r3, 8014e34 <__smakebuf_r+0x70>
 8014e1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014e20:	4630      	mov	r0, r6
 8014e22:	f000 f867 	bl	8014ef4 <_isatty_r>
 8014e26:	b128      	cbz	r0, 8014e34 <__smakebuf_r+0x70>
 8014e28:	89a3      	ldrh	r3, [r4, #12]
 8014e2a:	f023 0303 	bic.w	r3, r3, #3
 8014e2e:	f043 0301 	orr.w	r3, r3, #1
 8014e32:	81a3      	strh	r3, [r4, #12]
 8014e34:	89a3      	ldrh	r3, [r4, #12]
 8014e36:	431d      	orrs	r5, r3
 8014e38:	81a5      	strh	r5, [r4, #12]
 8014e3a:	e7cf      	b.n	8014ddc <__smakebuf_r+0x18>

08014e3c <__swbuf_r>:
 8014e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e3e:	460e      	mov	r6, r1
 8014e40:	4614      	mov	r4, r2
 8014e42:	4605      	mov	r5, r0
 8014e44:	b118      	cbz	r0, 8014e4e <__swbuf_r+0x12>
 8014e46:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8014e48:	b90b      	cbnz	r3, 8014e4e <__swbuf_r+0x12>
 8014e4a:	f7fb fc63 	bl	8010714 <__sinit>
 8014e4e:	69a3      	ldr	r3, [r4, #24]
 8014e50:	60a3      	str	r3, [r4, #8]
 8014e52:	89a3      	ldrh	r3, [r4, #12]
 8014e54:	0719      	lsls	r1, r3, #28
 8014e56:	d501      	bpl.n	8014e5c <__swbuf_r+0x20>
 8014e58:	6923      	ldr	r3, [r4, #16]
 8014e5a:	b943      	cbnz	r3, 8014e6e <__swbuf_r+0x32>
 8014e5c:	4621      	mov	r1, r4
 8014e5e:	4628      	mov	r0, r5
 8014e60:	f7fe fabc 	bl	80133dc <__swsetup_r>
 8014e64:	b118      	cbz	r0, 8014e6e <__swbuf_r+0x32>
 8014e66:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014e6a:	4638      	mov	r0, r7
 8014e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e72:	b2f6      	uxtb	r6, r6
 8014e74:	049a      	lsls	r2, r3, #18
 8014e76:	4637      	mov	r7, r6
 8014e78:	d406      	bmi.n	8014e88 <__swbuf_r+0x4c>
 8014e7a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8014e7e:	81a3      	strh	r3, [r4, #12]
 8014e80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014e82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8014e86:	6663      	str	r3, [r4, #100]	@ 0x64
 8014e88:	6823      	ldr	r3, [r4, #0]
 8014e8a:	6922      	ldr	r2, [r4, #16]
 8014e8c:	1a98      	subs	r0, r3, r2
 8014e8e:	6963      	ldr	r3, [r4, #20]
 8014e90:	4283      	cmp	r3, r0
 8014e92:	dc05      	bgt.n	8014ea0 <__swbuf_r+0x64>
 8014e94:	4621      	mov	r1, r4
 8014e96:	4628      	mov	r0, r5
 8014e98:	f7fe f92e 	bl	80130f8 <_fflush_r>
 8014e9c:	2800      	cmp	r0, #0
 8014e9e:	d1e2      	bne.n	8014e66 <__swbuf_r+0x2a>
 8014ea0:	68a3      	ldr	r3, [r4, #8]
 8014ea2:	3b01      	subs	r3, #1
 8014ea4:	60a3      	str	r3, [r4, #8]
 8014ea6:	6823      	ldr	r3, [r4, #0]
 8014ea8:	1c5a      	adds	r2, r3, #1
 8014eaa:	6022      	str	r2, [r4, #0]
 8014eac:	701e      	strb	r6, [r3, #0]
 8014eae:	6962      	ldr	r2, [r4, #20]
 8014eb0:	1c43      	adds	r3, r0, #1
 8014eb2:	429a      	cmp	r2, r3
 8014eb4:	d004      	beq.n	8014ec0 <__swbuf_r+0x84>
 8014eb6:	89a3      	ldrh	r3, [r4, #12]
 8014eb8:	07db      	lsls	r3, r3, #31
 8014eba:	d5d6      	bpl.n	8014e6a <__swbuf_r+0x2e>
 8014ebc:	2e0a      	cmp	r6, #10
 8014ebe:	d1d4      	bne.n	8014e6a <__swbuf_r+0x2e>
 8014ec0:	4621      	mov	r1, r4
 8014ec2:	4628      	mov	r0, r5
 8014ec4:	f7fe f918 	bl	80130f8 <_fflush_r>
 8014ec8:	2800      	cmp	r0, #0
 8014eca:	d0ce      	beq.n	8014e6a <__swbuf_r+0x2e>
 8014ecc:	e7cb      	b.n	8014e66 <__swbuf_r+0x2a>
	...

08014ed0 <_fstat_r>:
 8014ed0:	b538      	push	{r3, r4, r5, lr}
 8014ed2:	4d07      	ldr	r5, [pc, #28]	@ (8014ef0 <_fstat_r+0x20>)
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	4604      	mov	r4, r0
 8014ed8:	4608      	mov	r0, r1
 8014eda:	4611      	mov	r1, r2
 8014edc:	602b      	str	r3, [r5, #0]
 8014ede:	f7ec feeb 	bl	8001cb8 <_fstat>
 8014ee2:	1c43      	adds	r3, r0, #1
 8014ee4:	d102      	bne.n	8014eec <_fstat_r+0x1c>
 8014ee6:	682b      	ldr	r3, [r5, #0]
 8014ee8:	b103      	cbz	r3, 8014eec <_fstat_r+0x1c>
 8014eea:	6023      	str	r3, [r4, #0]
 8014eec:	bd38      	pop	{r3, r4, r5, pc}
 8014eee:	bf00      	nop
 8014ef0:	20008cfc 	.word	0x20008cfc

08014ef4 <_isatty_r>:
 8014ef4:	b538      	push	{r3, r4, r5, lr}
 8014ef6:	4d06      	ldr	r5, [pc, #24]	@ (8014f10 <_isatty_r+0x1c>)
 8014ef8:	2300      	movs	r3, #0
 8014efa:	4604      	mov	r4, r0
 8014efc:	4608      	mov	r0, r1
 8014efe:	602b      	str	r3, [r5, #0]
 8014f00:	f7ec feea 	bl	8001cd8 <_isatty>
 8014f04:	1c43      	adds	r3, r0, #1
 8014f06:	d102      	bne.n	8014f0e <_isatty_r+0x1a>
 8014f08:	682b      	ldr	r3, [r5, #0]
 8014f0a:	b103      	cbz	r3, 8014f0e <_isatty_r+0x1a>
 8014f0c:	6023      	str	r3, [r4, #0]
 8014f0e:	bd38      	pop	{r3, r4, r5, pc}
 8014f10:	20008cfc 	.word	0x20008cfc

08014f14 <__assert_func>:
 8014f14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014f16:	4614      	mov	r4, r2
 8014f18:	461a      	mov	r2, r3
 8014f1a:	4b09      	ldr	r3, [pc, #36]	@ (8014f40 <__assert_func+0x2c>)
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	4605      	mov	r5, r0
 8014f20:	68d8      	ldr	r0, [r3, #12]
 8014f22:	b954      	cbnz	r4, 8014f3a <__assert_func+0x26>
 8014f24:	4b07      	ldr	r3, [pc, #28]	@ (8014f44 <__assert_func+0x30>)
 8014f26:	461c      	mov	r4, r3
 8014f28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014f2c:	9100      	str	r1, [sp, #0]
 8014f2e:	462b      	mov	r3, r5
 8014f30:	4905      	ldr	r1, [pc, #20]	@ (8014f48 <__assert_func+0x34>)
 8014f32:	f000 f843 	bl	8014fbc <fiprintf>
 8014f36:	f000 f853 	bl	8014fe0 <abort>
 8014f3a:	4b04      	ldr	r3, [pc, #16]	@ (8014f4c <__assert_func+0x38>)
 8014f3c:	e7f4      	b.n	8014f28 <__assert_func+0x14>
 8014f3e:	bf00      	nop
 8014f40:	2000003c 	.word	0x2000003c
 8014f44:	08017ef3 	.word	0x08017ef3
 8014f48:	08017ec5 	.word	0x08017ec5
 8014f4c:	08017eb8 	.word	0x08017eb8

08014f50 <_calloc_r>:
 8014f50:	b538      	push	{r3, r4, r5, lr}
 8014f52:	fba1 1502 	umull	r1, r5, r1, r2
 8014f56:	b935      	cbnz	r5, 8014f66 <_calloc_r+0x16>
 8014f58:	f7fb fe42 	bl	8010be0 <_malloc_r>
 8014f5c:	4604      	mov	r4, r0
 8014f5e:	b938      	cbnz	r0, 8014f70 <_calloc_r+0x20>
 8014f60:	2400      	movs	r4, #0
 8014f62:	4620      	mov	r0, r4
 8014f64:	bd38      	pop	{r3, r4, r5, pc}
 8014f66:	f7fb fcd9 	bl	801091c <__errno>
 8014f6a:	230c      	movs	r3, #12
 8014f6c:	6003      	str	r3, [r0, #0]
 8014f6e:	e7f7      	b.n	8014f60 <_calloc_r+0x10>
 8014f70:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8014f74:	f022 0203 	bic.w	r2, r2, #3
 8014f78:	3a04      	subs	r2, #4
 8014f7a:	2a24      	cmp	r2, #36	@ 0x24
 8014f7c:	d819      	bhi.n	8014fb2 <_calloc_r+0x62>
 8014f7e:	2a13      	cmp	r2, #19
 8014f80:	d915      	bls.n	8014fae <_calloc_r+0x5e>
 8014f82:	2a1b      	cmp	r2, #27
 8014f84:	e9c0 5500 	strd	r5, r5, [r0]
 8014f88:	d806      	bhi.n	8014f98 <_calloc_r+0x48>
 8014f8a:	f100 0308 	add.w	r3, r0, #8
 8014f8e:	2200      	movs	r2, #0
 8014f90:	e9c3 2200 	strd	r2, r2, [r3]
 8014f94:	609a      	str	r2, [r3, #8]
 8014f96:	e7e4      	b.n	8014f62 <_calloc_r+0x12>
 8014f98:	2a24      	cmp	r2, #36	@ 0x24
 8014f9a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8014f9e:	bf11      	iteee	ne
 8014fa0:	f100 0310 	addne.w	r3, r0, #16
 8014fa4:	6105      	streq	r5, [r0, #16]
 8014fa6:	f100 0318 	addeq.w	r3, r0, #24
 8014faa:	6145      	streq	r5, [r0, #20]
 8014fac:	e7ef      	b.n	8014f8e <_calloc_r+0x3e>
 8014fae:	4603      	mov	r3, r0
 8014fb0:	e7ed      	b.n	8014f8e <_calloc_r+0x3e>
 8014fb2:	4629      	mov	r1, r5
 8014fb4:	f7fb fc63 	bl	801087e <memset>
 8014fb8:	e7d3      	b.n	8014f62 <_calloc_r+0x12>
	...

08014fbc <fiprintf>:
 8014fbc:	b40e      	push	{r1, r2, r3}
 8014fbe:	b503      	push	{r0, r1, lr}
 8014fc0:	4601      	mov	r1, r0
 8014fc2:	ab03      	add	r3, sp, #12
 8014fc4:	4805      	ldr	r0, [pc, #20]	@ (8014fdc <fiprintf+0x20>)
 8014fc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8014fca:	6800      	ldr	r0, [r0, #0]
 8014fcc:	9301      	str	r3, [sp, #4]
 8014fce:	f7fd faed 	bl	80125ac <_vfiprintf_r>
 8014fd2:	b002      	add	sp, #8
 8014fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8014fd8:	b003      	add	sp, #12
 8014fda:	4770      	bx	lr
 8014fdc:	2000003c 	.word	0x2000003c

08014fe0 <abort>:
 8014fe0:	b508      	push	{r3, lr}
 8014fe2:	2006      	movs	r0, #6
 8014fe4:	f000 f82c 	bl	8015040 <raise>
 8014fe8:	2001      	movs	r0, #1
 8014fea:	f7ec fe31 	bl	8001c50 <_exit>

08014fee <_raise_r>:
 8014fee:	291f      	cmp	r1, #31
 8014ff0:	b538      	push	{r3, r4, r5, lr}
 8014ff2:	4605      	mov	r5, r0
 8014ff4:	460c      	mov	r4, r1
 8014ff6:	d904      	bls.n	8015002 <_raise_r+0x14>
 8014ff8:	2316      	movs	r3, #22
 8014ffa:	6003      	str	r3, [r0, #0]
 8014ffc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015000:	bd38      	pop	{r3, r4, r5, pc}
 8015002:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8015006:	b112      	cbz	r2, 801500e <_raise_r+0x20>
 8015008:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801500c:	b94b      	cbnz	r3, 8015022 <_raise_r+0x34>
 801500e:	4628      	mov	r0, r5
 8015010:	f000 f830 	bl	8015074 <_getpid_r>
 8015014:	4622      	mov	r2, r4
 8015016:	4601      	mov	r1, r0
 8015018:	4628      	mov	r0, r5
 801501a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801501e:	f000 b817 	b.w	8015050 <_kill_r>
 8015022:	2b01      	cmp	r3, #1
 8015024:	d00a      	beq.n	801503c <_raise_r+0x4e>
 8015026:	1c59      	adds	r1, r3, #1
 8015028:	d103      	bne.n	8015032 <_raise_r+0x44>
 801502a:	2316      	movs	r3, #22
 801502c:	6003      	str	r3, [r0, #0]
 801502e:	2001      	movs	r0, #1
 8015030:	e7e6      	b.n	8015000 <_raise_r+0x12>
 8015032:	2100      	movs	r1, #0
 8015034:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015038:	4620      	mov	r0, r4
 801503a:	4798      	blx	r3
 801503c:	2000      	movs	r0, #0
 801503e:	e7df      	b.n	8015000 <_raise_r+0x12>

08015040 <raise>:
 8015040:	4b02      	ldr	r3, [pc, #8]	@ (801504c <raise+0xc>)
 8015042:	4601      	mov	r1, r0
 8015044:	6818      	ldr	r0, [r3, #0]
 8015046:	f7ff bfd2 	b.w	8014fee <_raise_r>
 801504a:	bf00      	nop
 801504c:	2000003c 	.word	0x2000003c

08015050 <_kill_r>:
 8015050:	b538      	push	{r3, r4, r5, lr}
 8015052:	4d07      	ldr	r5, [pc, #28]	@ (8015070 <_kill_r+0x20>)
 8015054:	2300      	movs	r3, #0
 8015056:	4604      	mov	r4, r0
 8015058:	4608      	mov	r0, r1
 801505a:	4611      	mov	r1, r2
 801505c:	602b      	str	r3, [r5, #0]
 801505e:	f7ec fde5 	bl	8001c2c <_kill>
 8015062:	1c43      	adds	r3, r0, #1
 8015064:	d102      	bne.n	801506c <_kill_r+0x1c>
 8015066:	682b      	ldr	r3, [r5, #0]
 8015068:	b103      	cbz	r3, 801506c <_kill_r+0x1c>
 801506a:	6023      	str	r3, [r4, #0]
 801506c:	bd38      	pop	{r3, r4, r5, pc}
 801506e:	bf00      	nop
 8015070:	20008cfc 	.word	0x20008cfc

08015074 <_getpid_r>:
 8015074:	f7ec bdd2 	b.w	8001c1c <_getpid>

08015078 <_init>:
 8015078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801507a:	bf00      	nop
 801507c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801507e:	bc08      	pop	{r3}
 8015080:	469e      	mov	lr, r3
 8015082:	4770      	bx	lr

08015084 <_fini>:
 8015084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015086:	bf00      	nop
 8015088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801508a:	bc08      	pop	{r3}
 801508c:	469e      	mov	lr, r3
 801508e:	4770      	bx	lr
