
Data_Acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013a90  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e8c  08013c60  08013c60  00014c60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016aec  08016aec  00018820  2**0
                  CONTENTS
  4 .ARM          00000008  08016aec  08016aec  00017aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016af4  08016af4  00018820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08016af4  08016af4  00017af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016afc  08016afc  00017afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006e0  20000000  08016b00  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200006e0  080171e0  000186e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000780  08017280  00018780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008534  20000820  08017320  00018820  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20008d54  08017320  00018d54  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00018820  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001dfc2  00000000  00000000  00018850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005456  00000000  00000000  00036812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001810  00000000  00000000  0003bc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000132b  00000000  00000000  0003d478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000321d3  00000000  00000000  0003e7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00024aa1  00000000  00000000  00070976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010403c  00000000  00000000  00095417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00199453  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000074c4  00000000  00000000  00199498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000050  00000000  00000000  001a095c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000820 	.word	0x20000820
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013c48 	.word	0x08013c48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000824 	.word	0x20000824
 800020c:	08013c48 	.word	0x08013c48

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ee0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ee4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d013      	beq.n	8000f18 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ef0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ef4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000ef8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d00b      	beq.n	8000f18 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f00:	e000      	b.n	8000f04 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f02:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f04:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0f9      	beq.n	8000f02 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f0e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f18:	687b      	ldr	r3, [r7, #4]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <NTP_server>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void NTP_server(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f2c:	b09c      	sub	sp, #112	@ 0x70
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6478      	str	r0, [r7, #68]	@ 0x44
 8000f32:	6439      	str	r1, [r7, #64]	@ 0x40
 8000f34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000f36:	63bb      	str	r3, [r7, #56]	@ 0x38
	printf("Request Received!\n");
 8000f38:	4850      	ldr	r0, [pc, #320]	@ (800107c <NTP_server+0x154>)
 8000f3a:	f00e fa13 	bl	800f364 <puts>
	union NtpClientPacket client_packet;
	union NtpClientResponsePacket client_response;
	struct pbuf *response_buf;
	if(p->len == 8)
 8000f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f40:	895b      	ldrh	r3, [r3, #10]
 8000f42:	2b08      	cmp	r3, #8
 8000f44:	f040 8091 	bne.w	800106a <NTP_server+0x142>
	{
//		printf("OV: %lu\n",overflow-1);
//		printf("Timer: %llu\n", 10*(uint64_t)htim2.Instance->CNT);
//		printf("Stamp: %llu\n", 10*(((uint64_t)(overflow - 1) << 32) | (uint64_t)htim2.Instance->CNT));
		pbuf_copy_partial(p, client_packet.buffer, p->len, 0);
 8000f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f4a:	895a      	ldrh	r2, [r3, #10]
 8000f4c:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8000f50:	2300      	movs	r3, #0
 8000f52:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000f54:	f005 fdca 	bl	8006aec <pbuf_copy_partial>
//		printf("Client: %llu\n", client_packet.t1);
		client_response.data.t1 = client_packet.t1;
 8000f58:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000f5c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		client_response.data.t2 = 10*(((uint64_t)(overflow - 1) << 32) | ((uint64_t)htim2.Instance->CNT));
 8000f60:	4b47      	ldr	r3, [pc, #284]	@ (8001080 <NTP_server+0x158>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	2200      	movs	r2, #0
 8000f68:	623b      	str	r3, [r7, #32]
 8000f6a:	627a      	str	r2, [r7, #36]	@ 0x24
 8000f6c:	f04f 0000 	mov.w	r0, #0
 8000f70:	f04f 0100 	mov.w	r1, #0
 8000f74:	6a3b      	ldr	r3, [r7, #32]
 8000f76:	0019      	movs	r1, r3
 8000f78:	2000      	movs	r0, #0
 8000f7a:	4b42      	ldr	r3, [pc, #264]	@ (8001084 <NTP_server+0x15c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f80:	2200      	movs	r2, #0
 8000f82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f88:	4303      	orrs	r3, r0
 8000f8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f8e:	430b      	orrs	r3, r1
 8000f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000f96:	f04f 0000 	mov.w	r0, #0
 8000f9a:	f04f 0100 	mov.w	r1, #0
 8000f9e:	0099      	lsls	r1, r3, #2
 8000fa0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000fa4:	0090      	lsls	r0, r2, #2
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000fac:	eb12 0801 	adds.w	r8, r2, r1
 8000fb0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000fb2:	eb43 0901 	adc.w	r9, r3, r1
 8000fb6:	eb18 0308 	adds.w	r3, r8, r8
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	eb49 0309 	adc.w	r3, r9, r9
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000fc6:	4642      	mov	r2, r8
 8000fc8:	464b      	mov	r3, r9
 8000fca:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		response_buf = pbuf_alloc(PBUF_TRANSPORT, 24, PBUF_RAM);
 8000fce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000fd2:	2118      	movs	r1, #24
 8000fd4:	2036      	movs	r0, #54	@ 0x36
 8000fd6:	f005 f8ab 	bl	8006130 <pbuf_alloc>
 8000fda:	66f8      	str	r0, [r7, #108]	@ 0x6c
		client_response.data.t3 = 10*(((uint64_t)(overflow - 1) << 32) | ((uint64_t)htim2.Instance->CNT));
 8000fdc:	4b28      	ldr	r3, [pc, #160]	@ (8001080 <NTP_server+0x158>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	61fa      	str	r2, [r7, #28]
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	f04f 0300 	mov.w	r3, #0
 8000ff0:	69b9      	ldr	r1, [r7, #24]
 8000ff2:	000b      	movs	r3, r1
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	4923      	ldr	r1, [pc, #140]	@ (8001084 <NTP_server+0x15c>)
 8000ff8:	6809      	ldr	r1, [r1, #0]
 8000ffa:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	6139      	str	r1, [r7, #16]
 8001000:	6178      	str	r0, [r7, #20]
 8001002:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001006:	4641      	mov	r1, r8
 8001008:	ea42 0a01 	orr.w	sl, r2, r1
 800100c:	4649      	mov	r1, r9
 800100e:	ea43 0b01 	orr.w	fp, r3, r1
 8001012:	4652      	mov	r2, sl
 8001014:	465b      	mov	r3, fp
 8001016:	f04f 0000 	mov.w	r0, #0
 800101a:	f04f 0100 	mov.w	r1, #0
 800101e:	0099      	lsls	r1, r3, #2
 8001020:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001024:	0090      	lsls	r0, r2, #2
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	eb12 040a 	adds.w	r4, r2, sl
 800102e:	eb43 050b 	adc.w	r5, r3, fp
 8001032:	1923      	adds	r3, r4, r4
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	eb45 0305 	adc.w	r3, r5, r5
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001040:	4622      	mov	r2, r4
 8001042:	462b      	mov	r3, r5
 8001044:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
		pbuf_take(response_buf, client_response.buffer, 24);
 8001048:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800104c:	2218      	movs	r2, #24
 800104e:	4619      	mov	r1, r3
 8001050:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001052:	f005 fdbd 	bl	8006bd0 <pbuf_take>
		udp_sendto(pcb, response_buf, addr, port);
 8001056:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800105a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800105c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800105e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001060:	f00b fade 	bl	800c620 <udp_sendto>
		pbuf_free(response_buf);
 8001064:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001066:	f005 fb47 	bl	80066f8 <pbuf_free>
	}
	pbuf_free(p);
 800106a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800106c:	f005 fb44 	bl	80066f8 <pbuf_free>
}
 8001070:	bf00      	nop
 8001072:	3770      	adds	r7, #112	@ 0x70
 8001074:	46bd      	mov	sp, r7
 8001076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800107a:	bf00      	nop
 800107c:	08013c60 	.word	0x08013c60
 8001080:	20000888 	.word	0x20000888
 8001084:	2000083c 	.word	0x2000083c

08001088 <_write>:

int _write(int file, char *ptr, int len)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
	int i = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
	for (i=0; i<len; i++)
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	e009      	b.n	80010b2 <_write+0x2a>
		ITM_SendChar((*ptr++));
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	60ba      	str	r2, [r7, #8]
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff16 	bl	8000ed8 <ITM_SendChar>
	for (i=0; i<len; i++)
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	dbf1      	blt.n	800109e <_write+0x16>
	return len;
 80010ba:	687b      	ldr	r3, [r7, #4]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c8:	f000 fc6e 	bl	80019a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010cc:	f000 f82e 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d0:	f000 f8e8 	bl	80012a4 <MX_GPIO_Init>
  MX_LWIP_Init();
 80010d4:	f003 fa7e 	bl	80045d4 <MX_LWIP_Init>
  MX_TIM2_Init();
 80010d8:	f000 f896 	bl	8001208 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80010dc:	480e      	ldr	r0, [pc, #56]	@ (8001118 <main+0x54>)
 80010de:	f002 fe09 	bl	8003cf4 <HAL_TIM_Base_Start_IT>
  NTP_UDP = udp_new();
 80010e2:	f00b fcfb 	bl	800cadc <udp_new>
 80010e6:	4603      	mov	r3, r0
 80010e8:	4a0c      	ldr	r2, [pc, #48]	@ (800111c <main+0x58>)
 80010ea:	6013      	str	r3, [r2, #0]
  udp_bind(NTP_UDP, IP_ADDR_ANY, 10000);
 80010ec:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <main+0x58>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80010f4:	490a      	ldr	r1, [pc, #40]	@ (8001120 <main+0x5c>)
 80010f6:	4618      	mov	r0, r3
 80010f8:	f00b fc48 	bl	800c98c <udp_bind>
  udp_recv(NTP_UDP, NTP_server, NULL);
 80010fc:	4b07      	ldr	r3, [pc, #28]	@ (800111c <main+0x58>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2200      	movs	r2, #0
 8001102:	4908      	ldr	r1, [pc, #32]	@ (8001124 <main+0x60>)
 8001104:	4618      	mov	r0, r3
 8001106:	f00b fcc9 	bl	800ca9c <udp_recv>
  printf("Program Started!\n");
 800110a:	4807      	ldr	r0, [pc, #28]	@ (8001128 <main+0x64>)
 800110c:	f00e f92a 	bl	800f364 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  MX_LWIP_Process();
 8001110:	f003 fba0 	bl	8004854 <MX_LWIP_Process>
 8001114:	e7fc      	b.n	8001110 <main+0x4c>
 8001116:	bf00      	nop
 8001118:	2000083c 	.word	0x2000083c
 800111c:	2000088c 	.word	0x2000088c
 8001120:	08016754 	.word	0x08016754
 8001124:	08000f29 	.word	0x08000f29
 8001128:	08013c74 	.word	0x08013c74

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b094      	sub	sp, #80	@ 0x50
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	2230      	movs	r2, #48	@ 0x30
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f00e f987 	bl	800f44e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001150:	f002 f876 	bl	8003240 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001154:	4b2a      	ldr	r3, [pc, #168]	@ (8001200 <SystemClock_Config+0xd4>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	4a29      	ldr	r2, [pc, #164]	@ (8001200 <SystemClock_Config+0xd4>)
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800115e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001160:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <SystemClock_Config+0xd4>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800116c:	4b25      	ldr	r3, [pc, #148]	@ (8001204 <SystemClock_Config+0xd8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a24      	ldr	r2, [pc, #144]	@ (8001204 <SystemClock_Config+0xd8>)
 8001172:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b22      	ldr	r3, [pc, #136]	@ (8001204 <SystemClock_Config+0xd8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001184:	2301      	movs	r3, #1
 8001186:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001188:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118e:	2302      	movs	r3, #2
 8001190:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001192:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001196:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001198:	2304      	movs	r3, #4
 800119a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 800119c:	23c8      	movs	r3, #200	@ 0xc8
 800119e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80011a4:	2309      	movs	r3, #9
 80011a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a8:	f107 0320 	add.w	r3, r7, #32
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 f8a7 	bl	8003300 <HAL_RCC_OscConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80011b8:	f000 f924 	bl	8001404 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011bc:	f002 f850 	bl	8003260 <HAL_PWREx_EnableOverDrive>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011c6:	f000 f91d 	bl	8001404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ca:	230f      	movs	r3, #15
 80011cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ce:	2302      	movs	r3, #2
 80011d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	2106      	movs	r1, #6
 80011e8:	4618      	mov	r0, r3
 80011ea:	f002 fb2d 	bl	8003848 <HAL_RCC_ClockConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80011f4:	f000 f906 	bl	8001404 <Error_Handler>
  }
}
 80011f8:	bf00      	nop
 80011fa:	3750      	adds	r7, #80	@ 0x50
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800
 8001204:	40007000 	.word	0x40007000

08001208 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001226:	4b1e      	ldr	r3, [pc, #120]	@ (80012a0 <MX_TIM2_Init+0x98>)
 8001228:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800122c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800122e:	4b1c      	ldr	r3, [pc, #112]	@ (80012a0 <MX_TIM2_Init+0x98>)
 8001230:	2200      	movs	r2, #0
 8001232:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b1a      	ldr	r3, [pc, #104]	@ (80012a0 <MX_TIM2_Init+0x98>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800123a:	4b19      	ldr	r3, [pc, #100]	@ (80012a0 <MX_TIM2_Init+0x98>)
 800123c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001240:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b17      	ldr	r3, [pc, #92]	@ (80012a0 <MX_TIM2_Init+0x98>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001248:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <MX_TIM2_Init+0x98>)
 800124a:	2280      	movs	r2, #128	@ 0x80
 800124c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800124e:	4814      	ldr	r0, [pc, #80]	@ (80012a0 <MX_TIM2_Init+0x98>)
 8001250:	f002 fcf8 	bl	8003c44 <HAL_TIM_Base_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800125a:	f000 f8d3 	bl	8001404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001262:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	4619      	mov	r1, r3
 800126a:	480d      	ldr	r0, [pc, #52]	@ (80012a0 <MX_TIM2_Init+0x98>)
 800126c:	f002 feda 	bl	8004024 <HAL_TIM_ConfigClockSource>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001276:	f000 f8c5 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	4619      	mov	r1, r3
 8001286:	4806      	ldr	r0, [pc, #24]	@ (80012a0 <MX_TIM2_Init+0x98>)
 8001288:	f003 f8f8 	bl	800447c <HAL_TIMEx_MasterConfigSynchronization>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001292:	f000 f8b7 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	3720      	adds	r7, #32
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000083c 	.word	0x2000083c

080012a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	@ 0x28
 80012a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ba:	4b41      	ldr	r3, [pc, #260]	@ (80013c0 <MX_GPIO_Init+0x11c>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	4a40      	ldr	r2, [pc, #256]	@ (80013c0 <MX_GPIO_Init+0x11c>)
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c6:	4b3e      	ldr	r3, [pc, #248]	@ (80013c0 <MX_GPIO_Init+0x11c>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d2:	4b3b      	ldr	r3, [pc, #236]	@ (80013c0 <MX_GPIO_Init+0x11c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a3a      	ldr	r2, [pc, #232]	@ (80013c0 <MX_GPIO_Init+0x11c>)
 80012d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b38      	ldr	r3, [pc, #224]	@ (80013c0 <MX_GPIO_Init+0x11c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	4b35      	ldr	r3, [pc, #212]	@ (80013c0 <MX_GPIO_Init+0x11c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a34      	ldr	r2, [pc, #208]	@ (80013c0 <MX_GPIO_Init+0x11c>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b32      	ldr	r3, [pc, #200]	@ (80013c0 <MX_GPIO_Init+0x11c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	4b2f      	ldr	r3, [pc, #188]	@ (80013c0 <MX_GPIO_Init+0x11c>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	4a2e      	ldr	r2, [pc, #184]	@ (80013c0 <MX_GPIO_Init+0x11c>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	6313      	str	r3, [r2, #48]	@ 0x30
 800130e:	4b2c      	ldr	r3, [pc, #176]	@ (80013c0 <MX_GPIO_Init+0x11c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800131a:	4b29      	ldr	r3, [pc, #164]	@ (80013c0 <MX_GPIO_Init+0x11c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	4a28      	ldr	r2, [pc, #160]	@ (80013c0 <MX_GPIO_Init+0x11c>)
 8001320:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30
 8001326:	4b26      	ldr	r3, [pc, #152]	@ (80013c0 <MX_GPIO_Init+0x11c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001338:	4822      	ldr	r0, [pc, #136]	@ (80013c4 <MX_GPIO_Init+0x120>)
 800133a:	f001 ff67 	bl	800320c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2140      	movs	r1, #64	@ 0x40
 8001342:	4821      	ldr	r0, [pc, #132]	@ (80013c8 <MX_GPIO_Init+0x124>)
 8001344:	f001 ff62 	bl	800320c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001348:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800134e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	481b      	ldr	r0, [pc, #108]	@ (80013cc <MX_GPIO_Init+0x128>)
 8001360:	f001 fda8 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001364:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8001368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	2301      	movs	r3, #1
 800136c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	4811      	ldr	r0, [pc, #68]	@ (80013c4 <MX_GPIO_Init+0x120>)
 800137e:	f001 fd99 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001382:	2340      	movs	r3, #64	@ 0x40
 8001384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	2301      	movs	r3, #1
 8001388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	480b      	ldr	r0, [pc, #44]	@ (80013c8 <MX_GPIO_Init+0x124>)
 800139a:	f001 fd8b 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800139e:	2380      	movs	r3, #128	@ 0x80
 80013a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	@ (80013c8 <MX_GPIO_Init+0x124>)
 80013b2:	f001 fd7f 	bl	8002eb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	@ 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40021800 	.word	0x40021800
 80013cc:	40020800 	.word	0x40020800

080013d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b07      	ldr	r3, [pc, #28]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d104      	bne.n	80013ee <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		overflow++;
 80013e4:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	4a05      	ldr	r2, [pc, #20]	@ (8001400 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80013ec:	6013      	str	r3, [r2, #0]
	}
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	2000083c 	.word	0x2000083c
 8001400:	20000888 	.word	0x20000888

08001404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <Error_Handler+0x8>

08001410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <HAL_MspInit+0x44>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	4a0e      	ldr	r2, [pc, #56]	@ (8001454 <HAL_MspInit+0x44>)
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001420:	6413      	str	r3, [r2, #64]	@ 0x40
 8001422:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <HAL_MspInit+0x44>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <HAL_MspInit+0x44>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001432:	4a08      	ldr	r2, [pc, #32]	@ (8001454 <HAL_MspInit+0x44>)
 8001434:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001438:	6453      	str	r3, [r2, #68]	@ 0x44
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <HAL_MspInit+0x44>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800

08001458 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001468:	d113      	bne.n	8001492 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800146a:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <HAL_TIM_Base_MspInit+0x44>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	4a0b      	ldr	r2, [pc, #44]	@ (800149c <HAL_TIM_Base_MspInit+0x44>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6413      	str	r3, [r2, #64]	@ 0x40
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <HAL_TIM_Base_MspInit+0x44>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	201c      	movs	r0, #28
 8001488:	f000 fbeb 	bl	8001c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800148c:	201c      	movs	r0, #28
 800148e:	f000 fc04 	bl	8001c9a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <NMI_Handler+0x4>

080014a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <HardFault_Handler+0x4>

080014b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <MemManage_Handler+0x4>

080014b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <BusFault_Handler+0x4>

080014c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <UsageFault_Handler+0x4>

080014c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f6:	f000 fa95 	bl	8001a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001504:	4802      	ldr	r0, [pc, #8]	@ (8001510 <TIM2_IRQHandler+0x10>)
 8001506:	f002 fc6d 	bl	8003de4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	2000083c 	.word	0x2000083c

08001514 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return 1;
 8001518:	2301      	movs	r3, #1
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <_kill>:

int _kill(int pid, int sig)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800152e:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <_kill+0x20>)
 8001530:	2216      	movs	r2, #22
 8001532:	601a      	str	r2, [r3, #0]
  return -1;
 8001534:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	20008b84 	.word	0x20008b84

08001548 <_exit>:

void _exit (int status)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001550:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ffe5 	bl	8001524 <_kill>
  while (1) {}    /* Make sure we hang here */
 800155a:	bf00      	nop
 800155c:	e7fd      	b.n	800155a <_exit+0x12>

0800155e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	e00a      	b.n	8001586 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001570:	f3af 8000 	nop.w
 8001574:	4601      	mov	r1, r0
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1c5a      	adds	r2, r3, #1
 800157a:	60ba      	str	r2, [r7, #8]
 800157c:	b2ca      	uxtb	r2, r1
 800157e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3301      	adds	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	dbf0      	blt.n	8001570 <_read+0x12>
  }

  return len;
 800158e:	687b      	ldr	r3, [r7, #4]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015c0:	605a      	str	r2, [r3, #4]
  return 0;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_isatty>:

int _isatty(int file)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015d8:	2301      	movs	r3, #1
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b085      	sub	sp, #20
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001600:	b480      	push	{r7}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001608:	4a14      	ldr	r2, [pc, #80]	@ (800165c <_sbrk+0x5c>)
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <_sbrk+0x60>)
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001614:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <_sbrk+0x64>)
 800161e:	4a12      	ldr	r2, [pc, #72]	@ (8001668 <_sbrk+0x68>)
 8001620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	429a      	cmp	r2, r3
 800162e:	d205      	bcs.n	800163c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001630:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <_sbrk+0x6c>)
 8001632:	220c      	movs	r2, #12
 8001634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001636:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800163a:	e009      	b.n	8001650 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800163c:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001642:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <_sbrk+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	4a06      	ldr	r2, [pc, #24]	@ (8001664 <_sbrk+0x64>)
 800164c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164e:	68fb      	ldr	r3, [r7, #12]
}
 8001650:	4618      	mov	r0, r3
 8001652:	371c      	adds	r7, #28
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	20050000 	.word	0x20050000
 8001660:	00000400 	.word	0x00000400
 8001664:	20000890 	.word	0x20000890
 8001668:	20008d58 	.word	0x20008d58
 800166c:	20008b84 	.word	0x20008b84

08001670 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001674:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <SystemInit+0x20>)
 8001676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800167a:	4a05      	ldr	r2, [pc, #20]	@ (8001690 <SystemInit+0x20>)
 800167c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001694:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001698:	480d      	ldr	r0, [pc, #52]	@ (80016d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800169a:	490e      	ldr	r1, [pc, #56]	@ (80016d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800169c:	4a0e      	ldr	r2, [pc, #56]	@ (80016d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a0:	e002      	b.n	80016a8 <LoopCopyDataInit>

080016a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a6:	3304      	adds	r3, #4

080016a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ac:	d3f9      	bcc.n	80016a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ae:	4a0b      	ldr	r2, [pc, #44]	@ (80016dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016b0:	4c0b      	ldr	r4, [pc, #44]	@ (80016e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b4:	e001      	b.n	80016ba <LoopFillZerobss>

080016b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b8:	3204      	adds	r2, #4

080016ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016bc:	d3fb      	bcc.n	80016b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016be:	f7ff ffd7 	bl	8001670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016c2:	f00d ff19 	bl	800f4f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c6:	f7ff fcfd 	bl	80010c4 <main>
  bx  lr    
 80016ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016cc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80016d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d4:	200006e0 	.word	0x200006e0
  ldr r2, =_sidata
 80016d8:	08016b00 	.word	0x08016b00
  ldr r2, =_sbss
 80016dc:	20000820 	.word	0x20000820
  ldr r4, =_ebss
 80016e0:	20008d54 	.word	0x20008d54

080016e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e4:	e7fe      	b.n	80016e4 <ADC_IRQHandler>

080016e6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00b      	beq.n	800170e <LAN8742_RegisterBusIO+0x28>
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d007      	beq.n	800170e <LAN8742_RegisterBusIO+0x28>
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <LAN8742_RegisterBusIO+0x28>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800170e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001712:	e014      	b.n	800173e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d17c      	bne.n	8001864 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2220      	movs	r2, #32
 800177c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	e01c      	b.n	80017be <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	f107 0208 	add.w	r2, r7, #8
 800178c:	2112      	movs	r1, #18
 800178e:	6978      	ldr	r0, [r7, #20]
 8001790:	4798      	blx	r3
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	da03      	bge.n	80017a0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001798:	f06f 0304 	mvn.w	r3, #4
 800179c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800179e:	e00b      	b.n	80017b8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	f003 031f 	and.w	r3, r3, #31
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d105      	bne.n	80017b8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
         break;
 80017b6:	e005      	b.n	80017c4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3301      	adds	r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2b1f      	cmp	r3, #31
 80017c2:	d9df      	bls.n	8001784 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b1f      	cmp	r3, #31
 80017ca:	d902      	bls.n	80017d2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80017cc:	f06f 0302 	mvn.w	r3, #2
 80017d0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d145      	bne.n	8001864 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6810      	ldr	r0, [r2, #0]
 80017e0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017e4:	2100      	movs	r1, #0
 80017e6:	4798      	blx	r3
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db37      	blt.n	800185e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6810      	ldr	r0, [r2, #0]
 80017f6:	f107 0208 	add.w	r2, r7, #8
 80017fa:	2100      	movs	r1, #0
 80017fc:	4798      	blx	r3
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	db28      	blt.n	8001856 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4798      	blx	r3
 800180a:	4603      	mov	r3, r0
 800180c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800180e:	e01c      	b.n	800184a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	4798      	blx	r3
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001822:	d80e      	bhi.n	8001842 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6810      	ldr	r0, [r2, #0]
 800182c:	f107 0208 	add.w	r2, r7, #8
 8001830:	2100      	movs	r1, #0
 8001832:	4798      	blx	r3
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	da07      	bge.n	800184a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800183a:	f06f 0304 	mvn.w	r3, #4
 800183e:	613b      	str	r3, [r7, #16]
                 break;
 8001840:	e010      	b.n	8001864 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001842:	f06f 0301 	mvn.w	r3, #1
 8001846:	613b      	str	r3, [r7, #16]
               break;
 8001848:	e00c      	b.n	8001864 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1dd      	bne.n	8001810 <LAN8742_Init+0xc6>
 8001854:	e006      	b.n	8001864 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001856:	f06f 0304 	mvn.w	r3, #4
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	e002      	b.n	8001864 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800185e:	f06f 0303 	mvn.w	r3, #3
 8001862:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d112      	bne.n	8001890 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	4798      	blx	r3
 8001870:	4603      	mov	r3, r0
 8001872:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001874:	bf00      	nop
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	4798      	blx	r3
 800187c:	4603      	mov	r3, r0
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001888:	d9f5      	bls.n	8001876 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001890:	693b      	ldr	r3, [r7, #16]
 }
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b084      	sub	sp, #16
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6810      	ldr	r0, [r2, #0]
 80018ae:	f107 020c 	add.w	r2, r7, #12
 80018b2:	2101      	movs	r1, #1
 80018b4:	4798      	blx	r3
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	da02      	bge.n	80018c2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018bc:	f06f 0304 	mvn.w	r3, #4
 80018c0:	e06e      	b.n	80019a0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6810      	ldr	r0, [r2, #0]
 80018ca:	f107 020c 	add.w	r2, r7, #12
 80018ce:	2101      	movs	r1, #1
 80018d0:	4798      	blx	r3
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	da02      	bge.n	80018de <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018d8:	f06f 0304 	mvn.w	r3, #4
 80018dc:	e060      	b.n	80019a0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80018e8:	2301      	movs	r3, #1
 80018ea:	e059      	b.n	80019a0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6810      	ldr	r0, [r2, #0]
 80018f4:	f107 020c 	add.w	r2, r7, #12
 80018f8:	2100      	movs	r1, #0
 80018fa:	4798      	blx	r3
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	da02      	bge.n	8001908 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001902:	f06f 0304 	mvn.w	r3, #4
 8001906:	e04b      	b.n	80019a0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d11b      	bne.n	800194a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d006      	beq.n	800192a <LAN8742_GetLinkState+0x90>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001926:	2302      	movs	r3, #2
 8001928:	e03a      	b.n	80019a0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001934:	2303      	movs	r3, #3
 8001936:	e033      	b.n	80019a0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001942:	2304      	movs	r3, #4
 8001944:	e02c      	b.n	80019a0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001946:	2305      	movs	r3, #5
 8001948:	e02a      	b.n	80019a0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6810      	ldr	r0, [r2, #0]
 8001952:	f107 020c 	add.w	r2, r7, #12
 8001956:	211f      	movs	r1, #31
 8001958:	4798      	blx	r3
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	da02      	bge.n	8001966 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001960:	f06f 0304 	mvn.w	r3, #4
 8001964:	e01c      	b.n	80019a0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001970:	2306      	movs	r3, #6
 8001972:	e015      	b.n	80019a0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 031c 	and.w	r3, r3, #28
 800197a:	2b18      	cmp	r3, #24
 800197c:	d101      	bne.n	8001982 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800197e:	2302      	movs	r3, #2
 8001980:	e00e      	b.n	80019a0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f003 031c 	and.w	r3, r3, #28
 8001988:	2b08      	cmp	r3, #8
 800198a:	d101      	bne.n	8001990 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800198c:	2303      	movs	r3, #3
 800198e:	e007      	b.n	80019a0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 031c 	and.w	r3, r3, #28
 8001996:	2b14      	cmp	r3, #20
 8001998:	d101      	bne.n	800199e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800199a:	2304      	movs	r3, #4
 800199c:	e000      	b.n	80019a0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800199e:	2305      	movs	r3, #5
    }				
  }
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ac:	2003      	movs	r0, #3
 80019ae:	f000 f94d 	bl	8001c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f000 f806 	bl	80019c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b8:	f7ff fd2a 	bl	8001410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019cc:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <HAL_InitTick+0x54>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <HAL_InitTick+0x58>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4619      	mov	r1, r3
 80019d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019da:	fbb3 f3f1 	udiv	r3, r3, r1
 80019de:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f967 	bl	8001cb6 <HAL_SYSTICK_Config>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00e      	b.n	8001a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b0f      	cmp	r3, #15
 80019f6:	d80a      	bhi.n	8001a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f8:	2200      	movs	r2, #0
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a00:	f000 f92f 	bl	8001c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a04:	4a06      	ldr	r2, [pc, #24]	@ (8001a20 <HAL_InitTick+0x5c>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e000      	b.n	8001a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000008 	.word	0x20000008
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a28:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <HAL_IncTick+0x20>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_IncTick+0x24>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	4a04      	ldr	r2, [pc, #16]	@ (8001a48 <HAL_IncTick+0x24>)
 8001a36:	6013      	str	r3, [r2, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000008 	.word	0x20000008
 8001a48:	20000894 	.word	0x20000894

08001a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a50:	4b03      	ldr	r3, [pc, #12]	@ (8001a60 <HAL_GetTick+0x14>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000894 	.word	0x20000894

08001a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a6c:	f7ff ffee 	bl	8001a4c <HAL_GetTick>
 8001a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a7c:	d005      	beq.n	8001a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <HAL_Delay+0x44>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a8a:	bf00      	nop
 8001a8c:	f7ff ffde 	bl	8001a4c <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d8f7      	bhi.n	8001a8c <HAL_Delay+0x28>
  {
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000008 	.word	0x20000008

08001aac <__NVIC_SetPriorityGrouping>:
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001abc:	4b0b      	ldr	r3, [pc, #44]	@ (8001aec <__NVIC_SetPriorityGrouping+0x40>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ad4:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ada:	4a04      	ldr	r2, [pc, #16]	@ (8001aec <__NVIC_SetPriorityGrouping+0x40>)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	60d3      	str	r3, [r2, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00
 8001af0:	05fa0000 	.word	0x05fa0000

08001af4 <__NVIC_GetPriorityGrouping>:
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af8:	4b04      	ldr	r3, [pc, #16]	@ (8001b0c <__NVIC_GetPriorityGrouping+0x18>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	f003 0307 	and.w	r3, r3, #7
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_EnableIRQ>:
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	db0b      	blt.n	8001b3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	f003 021f 	and.w	r2, r3, #31
 8001b28:	4907      	ldr	r1, [pc, #28]	@ (8001b48 <__NVIC_EnableIRQ+0x38>)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	095b      	lsrs	r3, r3, #5
 8001b30:	2001      	movs	r0, #1
 8001b32:	fa00 f202 	lsl.w	r2, r0, r2
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000e100 	.word	0xe000e100

08001b4c <__NVIC_SetPriority>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db0a      	blt.n	8001b76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	490c      	ldr	r1, [pc, #48]	@ (8001b98 <__NVIC_SetPriority+0x4c>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	0112      	lsls	r2, r2, #4
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001b74:	e00a      	b.n	8001b8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4908      	ldr	r1, [pc, #32]	@ (8001b9c <__NVIC_SetPriority+0x50>)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	3b04      	subs	r3, #4
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	440b      	add	r3, r1
 8001b8a:	761a      	strb	r2, [r3, #24]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000e100 	.word	0xe000e100
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <NVIC_EncodePriority>:
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	@ 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f1c3 0307 	rsb	r3, r3, #7
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	bf28      	it	cs
 8001bbe:	2304      	movcs	r3, #4
 8001bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d902      	bls.n	8001bd0 <NVIC_EncodePriority+0x30>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3b03      	subs	r3, #3
 8001bce:	e000      	b.n	8001bd2 <NVIC_EncodePriority+0x32>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	401a      	ands	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43d9      	mvns	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	4313      	orrs	r3, r2
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3724      	adds	r7, #36	@ 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <SysTick_Config>:
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c18:	d301      	bcc.n	8001c1e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00f      	b.n	8001c3e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c48 <SysTick_Config+0x40>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c26:	210f      	movs	r1, #15
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c2c:	f7ff ff8e 	bl	8001b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c30:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <SysTick_Config+0x40>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c36:	4b04      	ldr	r3, [pc, #16]	@ (8001c48 <SysTick_Config+0x40>)
 8001c38:	2207      	movs	r2, #7
 8001c3a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	e000e010 	.word	0xe000e010

08001c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ff29 	bl	8001aac <__NVIC_SetPriorityGrouping>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c74:	f7ff ff3e 	bl	8001af4 <__NVIC_GetPriorityGrouping>
 8001c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	68b9      	ldr	r1, [r7, #8]
 8001c7e:	6978      	ldr	r0, [r7, #20]
 8001c80:	f7ff ff8e 	bl	8001ba0 <NVIC_EncodePriority>
 8001c84:	4602      	mov	r2, r0
 8001c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff5d 	bl	8001b4c <__NVIC_SetPriority>
}
 8001c92:	bf00      	nop
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff31 	bl	8001b10 <__NVIC_EnableIRQ>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ffa2 	bl	8001c08 <SysTick_Config>
 8001cc4:	4603      	mov	r3, r0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e06a      	b.n	8001db8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d106      	bne.n	8001cfa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2223      	movs	r2, #35	@ 0x23
 8001cf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f002 ff9d 	bl	8004c34 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	4b31      	ldr	r3, [pc, #196]	@ (8001dc0 <HAL_ETH_Init+0xf0>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfe:	4a30      	ldr	r2, [pc, #192]	@ (8001dc0 <HAL_ETH_Init+0xf0>)
 8001d00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d06:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc0 <HAL_ETH_Init+0xf0>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d12:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc4 <HAL_ETH_Init+0xf4>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4a2b      	ldr	r2, [pc, #172]	@ (8001dc4 <HAL_ETH_Init+0xf4>)
 8001d18:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001d1c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d1e:	4b29      	ldr	r3, [pc, #164]	@ (8001dc4 <HAL_ETH_Init+0xf4>)
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	4927      	ldr	r1, [pc, #156]	@ (8001dc4 <HAL_ETH_Init+0xf4>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001d2c:	4b25      	ldr	r3, [pc, #148]	@ (8001dc4 <HAL_ETH_Init+0xf4>)
 8001d2e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d46:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d48:	f7ff fe80 	bl	8001a4c <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d4e:	e011      	b.n	8001d74 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001d50:	f7ff fe7c 	bl	8001a4c <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d5e:	d909      	bls.n	8001d74 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2204      	movs	r2, #4
 8001d64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	22e0      	movs	r2, #224	@ 0xe0
 8001d6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e021      	b.n	8001db8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1e4      	bne.n	8001d50 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 fdf0 	bl	800296c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 fe97 	bl	8002ac0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 feed 	bl	8002b72 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	2100      	movs	r1, #0
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 fe55 	bl	8002a50 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2210      	movs	r2, #16
 8001db2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40013800 	.word	0x40013800

08001dc8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dd6:	2b10      	cmp	r3, #16
 8001dd8:	d150      	bne.n	8001e7c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2223      	movs	r2, #35	@ 0x23
 8001dde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2204      	movs	r2, #4
 8001de6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f9fd 	bl	80021e8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f042 0208 	orr.w	r2, r2, #8
 8001dfc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e06:	2001      	movs	r0, #1
 8001e08:	f7ff fe2c 	bl	8001a64 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0204 	orr.w	r2, r2, #4
 8001e22:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f7ff fe19 	bl	8001a64 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 fc36 	bl	80026ac <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e52:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e56:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	f043 0302 	orr.w	r3, r3, #2
 8001e6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e6e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2223      	movs	r2, #35	@ 0x23
 8001e74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e000      	b.n	8001e7e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
  }
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e94:	2b23      	cmp	r3, #35	@ 0x23
 8001e96:	d14a      	bne.n	8001f2e <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2223      	movs	r2, #35	@ 0x23
 8001e9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001eb2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001eb6:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	f023 0302 	bic.w	r3, r3, #2
 8001eca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ece:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0204 	bic.w	r2, r2, #4
 8001ede:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f7ff fdbb 	bl	8001a64 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 fbd8 	bl	80026ac <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0208 	bic.w	r2, r2, #8
 8001f0a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f14:	2001      	movs	r0, #1
 8001f16:	f7ff fda5 	bl	8001a64 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2210      	movs	r2, #16
 8001f26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e000      	b.n	8001f30 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
  }
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d109      	bne.n	8001f5e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f50:	f043 0201 	orr.w	r2, r3, #1
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e07c      	b.n	8002058 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f64:	2b23      	cmp	r3, #35	@ 0x23
 8001f66:	d176      	bne.n	8002056 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	68b9      	ldr	r1, [r7, #8]
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 fe6d 	bl	8002c4c <ETH_Prepare_Tx_Descriptors>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d009      	beq.n	8001f8c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f7e:	f043 0202 	orr.w	r2, r3, #2
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e065      	b.n	8002058 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f8c:	f3bf 8f4f 	dsb	sy
}
 8001f90:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	3206      	adds	r2, #6
 8001f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f9e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	629a      	str	r2, [r3, #40]	@ 0x28
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d904      	bls.n	8001fbc <HAL_ETH_Transmit+0x84>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb6:	1f1a      	subs	r2, r3, #4
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	3106      	adds	r1, #6
 8001fc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001fcc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fd0:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001fd2:	f7ff fd3b 	bl	8001a4c <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001fd8:	e037      	b.n	800204a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d011      	beq.n	8002010 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff2:	f043 0208 	orr.w	r2, r3, #8
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e023      	b.n	8002058 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002016:	d018      	beq.n	800204a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002018:	f7ff fd18 	bl	8001a4c <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	d302      	bcc.n	800202e <HAL_ETH_Transmit+0xf6>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10d      	bne.n	800204a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002034:	f043 0204 	orr.w	r2, r3, #4
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002044:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e006      	b.n	8002058 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	dbc3      	blt.n	8001fda <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	e000      	b.n	8002058 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
  }
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d109      	bne.n	800208c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800207e:	f043 0201 	orr.w	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0a8      	b.n	80021de <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002092:	2b23      	cmp	r3, #35	@ 0x23
 8002094:	d001      	beq.n	800209a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e0a1      	b.n	80021de <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	3212      	adds	r2, #18
 80020a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020aa:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020b0:	f1c3 0304 	rsb	r3, r3, #4
 80020b4:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80020b6:	e06a      	b.n	800218e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d007      	beq.n	80020d4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	699a      	ldr	r2, [r3, #24]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	69da      	ldr	r2, [r3, #28]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d103      	bne.n	80020e8 <HAL_ETH_ReadData+0x88>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d040      	beq.n	800216a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00c      	beq.n	800212c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	0c1b      	lsrs	r3, r3, #16
 8002118:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800211c:	3b04      	subs	r3, #4
 800211e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002128:	2301      	movs	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002144:	461a      	mov	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	b29b      	uxth	r3, r3
 800214a:	f002 ff35 	bl	8004fb8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	441a      	add	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	2200      	movs	r2, #0
 8002168:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3301      	adds	r3, #1
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2b03      	cmp	r3, #3
 8002174:	d902      	bls.n	800217c <HAL_ETH_ReadData+0x11c>
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3b04      	subs	r3, #4
 800217a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	3212      	adds	r2, #18
 8002182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002186:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	3301      	adds	r3, #1
 800218c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002192:	2b00      	cmp	r3, #0
 8002194:	db06      	blt.n	80021a4 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	429a      	cmp	r2, r3
 800219c:	d202      	bcs.n	80021a4 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d089      	beq.n	80020b8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	441a      	add	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f815 	bl	80021e8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d108      	bne.n	80021dc <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	e000      	b.n	80021de <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3720      	adds	r7, #32
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80021f4:	2301      	movs	r3, #1
 80021f6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021fc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	3212      	adds	r2, #18
 8002204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002208:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800220e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002210:	e040      	b.n	8002294 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d112      	bne.n	8002240 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800221a:	f107 030c 	add.w	r3, r7, #12
 800221e:	4618      	mov	r0, r3
 8002220:	f002 fe9a 	bl	8004f58 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	74fb      	strb	r3, [r7, #19]
 800222e:	e007      	b.n	8002240 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	461a      	mov	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	461a      	mov	r2, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002240:	7cfb      	ldrb	r3, [r7, #19]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d026      	beq.n	8002294 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224a:	2b00      	cmp	r3, #0
 800224c:	d103      	bne.n	8002256 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	4a1e      	ldr	r2, [pc, #120]	@ (80022cc <ETH_UpdateDescriptor+0xe4>)
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	e003      	b.n	800225e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 800225c:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800225e:	f3bf 8f5f 	dmb	sy
}
 8002262:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	3301      	adds	r3, #1
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d902      	bls.n	8002282 <ETH_UpdateDescriptor+0x9a>
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	3b04      	subs	r3, #4
 8002280:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	3212      	adds	r2, #18
 8002288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800228c:	617b      	str	r3, [r7, #20]
      desccount--;
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	3b01      	subs	r3, #1
 8002292:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <ETH_UpdateDescriptor+0xb8>
 800229a:	7cfb      	ldrb	r3, [r7, #19]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1b8      	bne.n	8002212 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d00c      	beq.n	80022c4 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022b2:	461a      	mov	r2, r3
 80022b4:	2300      	movs	r3, #0
 80022b6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80022c4:	bf00      	nop
 80022c6:	3720      	adds	r7, #32
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	80004600 	.word	0x80004600

080022d0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f003 031c 	and.w	r3, r3, #28
 80022ec:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	02db      	lsls	r3, r3, #11
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	019b      	lsls	r3, r3, #6
 80022fe:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4313      	orrs	r3, r2
 8002306:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f023 0302 	bic.w	r3, r3, #2
 800230e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002320:	f7ff fb94 	bl	8001a4c <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002326:	e00d      	b.n	8002344 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002328:	f7ff fb90 	bl	8001a4c <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002336:	d301      	bcc.n	800233c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e010      	b.n	800235e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1ec      	bne.n	8002328 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	b29b      	uxth	r3, r3
 8002356:	461a      	mov	r2, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f003 031c 	and.w	r3, r3, #28
 8002382:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	02db      	lsls	r3, r3, #11
 8002388:	b29b      	uxth	r3, r3
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	019b      	lsls	r3, r3, #6
 8002394:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	4313      	orrs	r3, r2
 800239c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c0:	f7ff fb44 	bl	8001a4c <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023c6:	e00d      	b.n	80023e4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80023c8:	f7ff fb40 	bl	8001a4c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023d6:	d301      	bcc.n	80023dc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e009      	b.n	80023f0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1ec      	bne.n	80023c8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0d9      	b.n	80025c0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	2b00      	cmp	r3, #0
 8002418:	bf14      	ite	ne
 800241a:	2301      	movne	r3, #1
 800241c:	2300      	moveq	r3, #0
 800241e:	b2db      	uxtb	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002440:	2b00      	cmp	r3, #0
 8002442:	bf0c      	ite	eq
 8002444:	2301      	moveq	r3, #1
 8002446:	2300      	movne	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	461a      	mov	r2, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 800245c:	2b00      	cmp	r3, #0
 800245e:	bf14      	ite	ne
 8002460:	2301      	movne	r3, #1
 8002462:	2300      	moveq	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002476:	2b00      	cmp	r3, #0
 8002478:	bf0c      	ite	eq
 800247a:	2301      	moveq	r3, #1
 800247c:	2300      	movne	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf14      	ite	ne
 8002494:	2301      	movne	r3, #1
 8002496:	2300      	moveq	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	bf0c      	ite	eq
 80024ca:	2301      	moveq	r3, #1
 80024cc:	2300      	movne	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	461a      	mov	r2, r3
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	bf14      	ite	ne
 80024fe:	2301      	movne	r3, #1
 8002500:	2300      	moveq	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002522:	2b00      	cmp	r3, #0
 8002524:	bf14      	ite	ne
 8002526:	2301      	movne	r3, #1
 8002528:	2300      	moveq	r3, #0
 800252a:	b2db      	uxtb	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	bf14      	ite	ne
 8002540:	2301      	movne	r3, #1
 8002542:	2300      	moveq	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	0c1b      	lsrs	r3, r3, #16
 8002580:	b29a      	uxth	r2, r3
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf14      	ite	ne
 8002594:	2301      	movne	r3, #1
 8002596:	2300      	moveq	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf14      	ite	ne
 80025b0:	2301      	movne	r3, #1
 80025b2:	2300      	moveq	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e00b      	b.n	80025f8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025e6:	2b10      	cmp	r3, #16
 80025e8:	d105      	bne.n	80025f6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80025ea:	6839      	ldr	r1, [r7, #0]
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f883 	bl	80026f8 <ETH_SetMACConfig>

    return HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e000      	b.n	80025f8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
  }
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f023 031c 	bic.w	r3, r3, #28
 8002616:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002618:	f001 fb08 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 800261c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	4a1d      	ldr	r2, [pc, #116]	@ (8002698 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d908      	bls.n	8002638 <HAL_ETH_SetMDIOClockRange+0x38>
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	4a1c      	ldr	r2, [pc, #112]	@ (800269c <HAL_ETH_SetMDIOClockRange+0x9c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d804      	bhi.n	8002638 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f043 0308 	orr.w	r3, r3, #8
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	e027      	b.n	8002688 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	4a18      	ldr	r2, [pc, #96]	@ (800269c <HAL_ETH_SetMDIOClockRange+0x9c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d908      	bls.n	8002652 <HAL_ETH_SetMDIOClockRange+0x52>
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4a17      	ldr	r2, [pc, #92]	@ (80026a0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d204      	bcs.n	8002652 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f043 030c 	orr.w	r3, r3, #12
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	e01a      	b.n	8002688 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	4a12      	ldr	r2, [pc, #72]	@ (80026a0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d303      	bcc.n	8002662 <HAL_ETH_SetMDIOClockRange+0x62>
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	4a11      	ldr	r2, [pc, #68]	@ (80026a4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d911      	bls.n	8002686 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	4a0f      	ldr	r2, [pc, #60]	@ (80026a4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d908      	bls.n	800267c <HAL_ETH_SetMDIOClockRange+0x7c>
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	4a0e      	ldr	r2, [pc, #56]	@ (80026a8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d804      	bhi.n	800267c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f043 0304 	orr.w	r3, r3, #4
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	e005      	b.n	8002688 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f043 0310 	orr.w	r3, r3, #16
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	e000      	b.n	8002688 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002686:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	611a      	str	r2, [r3, #16]
}
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	01312cff 	.word	0x01312cff
 800269c:	02160ebf 	.word	0x02160ebf
 80026a0:	03938700 	.word	0x03938700
 80026a4:	05f5e0ff 	.word	0x05f5e0ff
 80026a8:	08f0d17f 	.word	0x08f0d17f

080026ac <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6812      	ldr	r2, [r2, #0]
 80026c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026ce:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026dc:	2001      	movs	r0, #1
 80026de:	f7ff f9c1 	bl	8001a64 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026ec:	6193      	str	r3, [r2, #24]
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4b51      	ldr	r3, [pc, #324]	@ (8002854 <ETH_SetMACConfig+0x15c>)
 800270e:	4013      	ands	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	7c1b      	ldrb	r3, [r3, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d102      	bne.n	8002720 <ETH_SetMACConfig+0x28>
 800271a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800271e:	e000      	b.n	8002722 <ETH_SetMACConfig+0x2a>
 8002720:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	7c5b      	ldrb	r3, [r3, #17]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d102      	bne.n	8002730 <ETH_SetMACConfig+0x38>
 800272a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800272e:	e000      	b.n	8002732 <ETH_SetMACConfig+0x3a>
 8002730:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002732:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002738:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	7fdb      	ldrb	r3, [r3, #31]
 800273e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002740:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002746:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	7f92      	ldrb	r2, [r2, #30]
 800274c:	2a00      	cmp	r2, #0
 800274e:	d102      	bne.n	8002756 <ETH_SetMACConfig+0x5e>
 8002750:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002754:	e000      	b.n	8002758 <ETH_SetMACConfig+0x60>
 8002756:	2200      	movs	r2, #0
                        macconf->Speed |
 8002758:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	7f1b      	ldrb	r3, [r3, #28]
 800275e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002760:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002766:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	791b      	ldrb	r3, [r3, #4]
 800276c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800276e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002776:	2a00      	cmp	r2, #0
 8002778:	d102      	bne.n	8002780 <ETH_SetMACConfig+0x88>
 800277a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800277e:	e000      	b.n	8002782 <ETH_SetMACConfig+0x8a>
 8002780:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002782:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	7bdb      	ldrb	r3, [r3, #15]
 8002788:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800278a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002790:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002798:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800279a:	4313      	orrs	r3, r2
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027b2:	2001      	movs	r0, #1
 80027b4:	f7ff f956 	bl	8001a64 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80027ce:	4013      	ands	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80027de:	2a00      	cmp	r2, #0
 80027e0:	d101      	bne.n	80027e6 <ETH_SetMACConfig+0xee>
 80027e2:	2280      	movs	r2, #128	@ 0x80
 80027e4:	e000      	b.n	80027e8 <ETH_SetMACConfig+0xf0>
 80027e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027e8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80027f6:	2a01      	cmp	r2, #1
 80027f8:	d101      	bne.n	80027fe <ETH_SetMACConfig+0x106>
 80027fa:	2208      	movs	r2, #8
 80027fc:	e000      	b.n	8002800 <ETH_SetMACConfig+0x108>
 80027fe:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002800:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002808:	2a01      	cmp	r2, #1
 800280a:	d101      	bne.n	8002810 <ETH_SetMACConfig+0x118>
 800280c:	2204      	movs	r2, #4
 800280e:	e000      	b.n	8002812 <ETH_SetMACConfig+0x11a>
 8002810:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002812:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800281a:	2a01      	cmp	r2, #1
 800281c:	d101      	bne.n	8002822 <ETH_SetMACConfig+0x12a>
 800281e:	2202      	movs	r2, #2
 8002820:	e000      	b.n	8002824 <ETH_SetMACConfig+0x12c>
 8002822:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002824:	4313      	orrs	r3, r2
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4313      	orrs	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800283c:	2001      	movs	r0, #1
 800283e:	f7ff f911 	bl	8001a64 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	619a      	str	r2, [r3, #24]
}
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	ff20810f 	.word	0xff20810f

08002858 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4b3d      	ldr	r3, [pc, #244]	@ (8002968 <ETH_SetDMAConfig+0x110>)
 8002872:	4013      	ands	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	7b1b      	ldrb	r3, [r3, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d102      	bne.n	8002884 <ETH_SetDMAConfig+0x2c>
 800287e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002882:	e000      	b.n	8002886 <ETH_SetDMAConfig+0x2e>
 8002884:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	7b5b      	ldrb	r3, [r3, #13]
 800288a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800288c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	7f52      	ldrb	r2, [r2, #29]
 8002892:	2a00      	cmp	r2, #0
 8002894:	d102      	bne.n	800289c <ETH_SetDMAConfig+0x44>
 8002896:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800289a:	e000      	b.n	800289e <ETH_SetDMAConfig+0x46>
 800289c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800289e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	7b9b      	ldrb	r3, [r3, #14]
 80028a4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80028a6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	7f1b      	ldrb	r3, [r3, #28]
 80028b2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80028b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	7f9b      	ldrb	r3, [r3, #30]
 80028ba:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80028bc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80028c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028ca:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028cc:	4313      	orrs	r3, r2
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028dc:	461a      	mov	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028ee:	2001      	movs	r0, #1
 80028f0:	f7ff f8b8 	bl	8001a64 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028fc:	461a      	mov	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	791b      	ldrb	r3, [r3, #4]
 8002906:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800290c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002912:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002918:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002920:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002922:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002928:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800292a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002930:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800293a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800293e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800294c:	2001      	movs	r0, #1
 800294e:	f7ff f889 	bl	8001a64 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800295a:	461a      	mov	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6013      	str	r3, [r2, #0]
}
 8002960:	bf00      	nop
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	f8de3f23 	.word	0xf8de3f23

0800296c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b0a6      	sub	sp, #152	@ 0x98
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002974:	2301      	movs	r3, #1
 8002976:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800297a:	2301      	movs	r3, #1
 800297c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002980:	2300      	movs	r3, #0
 8002982:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002984:	2300      	movs	r3, #0
 8002986:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800298a:	2301      	movs	r3, #1
 800298c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002990:	2300      	movs	r3, #0
 8002992:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002996:	2301      	movs	r3, #1
 8002998:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800299c:	2300      	movs	r3, #0
 800299e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80029a8:	2300      	movs	r3, #0
 80029aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80029bc:	2300      	movs	r3, #0
 80029be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80029ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80029d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80029d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80029da:	2300      	movs	r3, #0
 80029dc:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80029e0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80029e4:	4619      	mov	r1, r3
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff fe86 	bl	80026f8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80029ec:	2301      	movs	r3, #1
 80029ee:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80029f0:	2301      	movs	r3, #1
 80029f2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80029f4:	2301      	movs	r3, #1
 80029f6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80029fa:	2301      	movs	r3, #1
 80029fc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002a12:	2301      	movs	r3, #1
 8002a14:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a20:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a22:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a26:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a2c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a3c:	f107 0308 	add.w	r3, r7, #8
 8002a40:	4619      	mov	r1, r3
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff ff08 	bl	8002858 <ETH_SetDMAConfig>
}
 8002a48:	bf00      	nop
 8002a4a:	3798      	adds	r7, #152	@ 0x98
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3305      	adds	r3, #5
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	021b      	lsls	r3, r3, #8
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	3204      	adds	r2, #4
 8002a68:	7812      	ldrb	r2, [r2, #0]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	4b11      	ldr	r3, [pc, #68]	@ (8002ab8 <ETH_MACAddressConfig+0x68>)
 8002a72:	4413      	add	r3, r2
 8002a74:	461a      	mov	r2, r3
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3303      	adds	r3, #3
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	061a      	lsls	r2, r3, #24
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3302      	adds	r3, #2
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	041b      	lsls	r3, r3, #16
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	021b      	lsls	r3, r3, #8
 8002a94:	4313      	orrs	r3, r2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	7812      	ldrb	r2, [r2, #0]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <ETH_MACAddressConfig+0x6c>)
 8002aa2:	4413      	add	r3, r2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	6013      	str	r3, [r2, #0]
}
 8002aaa:	bf00      	nop
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40028040 	.word	0x40028040
 8002abc:	40028044 	.word	0x40028044

08002ac0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	e03e      	b.n	8002b4c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68d9      	ldr	r1, [r3, #12]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	440b      	add	r3, r1
 8002ade:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2200      	movs	r2, #0
 8002af6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	3206      	adds	r2, #6
 8002b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d80c      	bhi.n	8002b30 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68d9      	ldr	r1, [r3, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	440b      	add	r3, r1
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	e004      	b.n	8002b3a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	461a      	mov	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d9bd      	bls.n	8002ace <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b64:	611a      	str	r2, [r3, #16]
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b085      	sub	sp, #20
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	e046      	b.n	8002c0e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6919      	ldr	r1, [r3, #16]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	440b      	add	r3, r1
 8002b90:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2200      	movs	r2, #0
 8002bae:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002bbc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8002bc4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	3212      	adds	r2, #18
 8002bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d80c      	bhi.n	8002bfe <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6919      	ldr	r1, [r3, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	440b      	add	r3, r1
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	60da      	str	r2, [r3, #12]
 8002bfc:	e004      	b.n	8002c08 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	461a      	mov	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d9b5      	bls.n	8002b80 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c3e:	60da      	str	r2, [r3, #12]
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b08d      	sub	sp, #52	@ 0x34
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	3318      	adds	r3, #24
 8002c5c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c76:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c8e:	d007      	beq.n	8002ca0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c94:	3304      	adds	r3, #4
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e0ff      	b.n	8002ea4 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	4b7d      	ldr	r3, [pc, #500]	@ (8002eb0 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002cba:	4013      	ands	r3, r2
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	6852      	ldr	r2, [r2, #4]
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d26:	f3bf 8f5f 	dmb	sy
}
 8002d2a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002d38:	e082      	b.n	8002e40 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d006      	beq.n	8002d5a <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	e005      	b.n	8002d66 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d68:	3301      	adds	r3, #1
 8002d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d902      	bls.n	8002d78 <ETH_Prepare_Tx_Descriptors+0x12c>
 8002d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d74:	3b04      	subs	r3, #4
 8002d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d80:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d9a:	d007      	beq.n	8002dac <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da0:	3304      	adds	r3, #4
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d029      	beq.n	8002e00 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dbe:	e019      	b.n	8002df4 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002dc0:	f3bf 8f5f 	dmb	sy
}
 8002dc4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d902      	bls.n	8002de4 <ETH_Prepare_Tx_Descriptors+0x198>
 8002dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de0:	3b04      	subs	r3, #4
 8002de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dec:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df0:	3301      	adds	r3, #1
 8002df2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002df4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d3e1      	bcc.n	8002dc0 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e051      	b.n	8002ea4 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e02:	3301      	adds	r3, #1
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	461a      	mov	r2, r3
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	4b25      	ldr	r3, [pc, #148]	@ (8002eb0 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	69fa      	ldr	r2, [r7, #28]
 8002e20:	6852      	ldr	r2, [r2, #4]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e2e:	f3bf 8f5f 	dmb	sy
}
 8002e32:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f47f af78 	bne.w	8002d3a <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d006      	beq.n	8002e5e <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e005      	b.n	8002e6a <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e7a:	6979      	ldr	r1, [r7, #20]
 8002e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e7e:	3304      	adds	r3, #4
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e8a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e8c:	b672      	cpsid	i
}
 8002e8e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	4413      	add	r3, r2
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002e9e:	b662      	cpsie	i
}
 8002ea0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3734      	adds	r7, #52	@ 0x34
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	ffffe000 	.word	0xffffe000

08002eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b089      	sub	sp, #36	@ 0x24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
 8002ed2:	e175      	b.n	80031c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	f040 8164 	bne.w	80031ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d005      	beq.n	8002f0a <HAL_GPIO_Init+0x56>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d130      	bne.n	8002f6c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	2203      	movs	r2, #3
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f40:	2201      	movs	r2, #1
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 0201 	and.w	r2, r3, #1
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d017      	beq.n	8002fa8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	2203      	movs	r2, #3
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d123      	bne.n	8002ffc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	08da      	lsrs	r2, r3, #3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3208      	adds	r2, #8
 8002fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	220f      	movs	r2, #15
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	08da      	lsrs	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3208      	adds	r2, #8
 8002ff6:	69b9      	ldr	r1, [r7, #24]
 8002ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	2203      	movs	r2, #3
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 0203 	and.w	r2, r3, #3
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80be 	beq.w	80031ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800303e:	4b66      	ldr	r3, [pc, #408]	@ (80031d8 <HAL_GPIO_Init+0x324>)
 8003040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003042:	4a65      	ldr	r2, [pc, #404]	@ (80031d8 <HAL_GPIO_Init+0x324>)
 8003044:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003048:	6453      	str	r3, [r2, #68]	@ 0x44
 800304a:	4b63      	ldr	r3, [pc, #396]	@ (80031d8 <HAL_GPIO_Init+0x324>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003056:	4a61      	ldr	r2, [pc, #388]	@ (80031dc <HAL_GPIO_Init+0x328>)
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	089b      	lsrs	r3, r3, #2
 800305c:	3302      	adds	r3, #2
 800305e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	220f      	movs	r2, #15
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a58      	ldr	r2, [pc, #352]	@ (80031e0 <HAL_GPIO_Init+0x32c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d037      	beq.n	80030f2 <HAL_GPIO_Init+0x23e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a57      	ldr	r2, [pc, #348]	@ (80031e4 <HAL_GPIO_Init+0x330>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d031      	beq.n	80030ee <HAL_GPIO_Init+0x23a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a56      	ldr	r2, [pc, #344]	@ (80031e8 <HAL_GPIO_Init+0x334>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d02b      	beq.n	80030ea <HAL_GPIO_Init+0x236>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a55      	ldr	r2, [pc, #340]	@ (80031ec <HAL_GPIO_Init+0x338>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d025      	beq.n	80030e6 <HAL_GPIO_Init+0x232>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a54      	ldr	r2, [pc, #336]	@ (80031f0 <HAL_GPIO_Init+0x33c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d01f      	beq.n	80030e2 <HAL_GPIO_Init+0x22e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a53      	ldr	r2, [pc, #332]	@ (80031f4 <HAL_GPIO_Init+0x340>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d019      	beq.n	80030de <HAL_GPIO_Init+0x22a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a52      	ldr	r2, [pc, #328]	@ (80031f8 <HAL_GPIO_Init+0x344>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d013      	beq.n	80030da <HAL_GPIO_Init+0x226>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a51      	ldr	r2, [pc, #324]	@ (80031fc <HAL_GPIO_Init+0x348>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00d      	beq.n	80030d6 <HAL_GPIO_Init+0x222>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a50      	ldr	r2, [pc, #320]	@ (8003200 <HAL_GPIO_Init+0x34c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d007      	beq.n	80030d2 <HAL_GPIO_Init+0x21e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a4f      	ldr	r2, [pc, #316]	@ (8003204 <HAL_GPIO_Init+0x350>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d101      	bne.n	80030ce <HAL_GPIO_Init+0x21a>
 80030ca:	2309      	movs	r3, #9
 80030cc:	e012      	b.n	80030f4 <HAL_GPIO_Init+0x240>
 80030ce:	230a      	movs	r3, #10
 80030d0:	e010      	b.n	80030f4 <HAL_GPIO_Init+0x240>
 80030d2:	2308      	movs	r3, #8
 80030d4:	e00e      	b.n	80030f4 <HAL_GPIO_Init+0x240>
 80030d6:	2307      	movs	r3, #7
 80030d8:	e00c      	b.n	80030f4 <HAL_GPIO_Init+0x240>
 80030da:	2306      	movs	r3, #6
 80030dc:	e00a      	b.n	80030f4 <HAL_GPIO_Init+0x240>
 80030de:	2305      	movs	r3, #5
 80030e0:	e008      	b.n	80030f4 <HAL_GPIO_Init+0x240>
 80030e2:	2304      	movs	r3, #4
 80030e4:	e006      	b.n	80030f4 <HAL_GPIO_Init+0x240>
 80030e6:	2303      	movs	r3, #3
 80030e8:	e004      	b.n	80030f4 <HAL_GPIO_Init+0x240>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e002      	b.n	80030f4 <HAL_GPIO_Init+0x240>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <HAL_GPIO_Init+0x240>
 80030f2:	2300      	movs	r3, #0
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	f002 0203 	and.w	r2, r2, #3
 80030fa:	0092      	lsls	r2, r2, #2
 80030fc:	4093      	lsls	r3, r2
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4313      	orrs	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003104:	4935      	ldr	r1, [pc, #212]	@ (80031dc <HAL_GPIO_Init+0x328>)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	089b      	lsrs	r3, r3, #2
 800310a:	3302      	adds	r3, #2
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003112:	4b3d      	ldr	r3, [pc, #244]	@ (8003208 <HAL_GPIO_Init+0x354>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003136:	4a34      	ldr	r2, [pc, #208]	@ (8003208 <HAL_GPIO_Init+0x354>)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800313c:	4b32      	ldr	r3, [pc, #200]	@ (8003208 <HAL_GPIO_Init+0x354>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003160:	4a29      	ldr	r2, [pc, #164]	@ (8003208 <HAL_GPIO_Init+0x354>)
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003166:	4b28      	ldr	r3, [pc, #160]	@ (8003208 <HAL_GPIO_Init+0x354>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	43db      	mvns	r3, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4013      	ands	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800318a:	4a1f      	ldr	r2, [pc, #124]	@ (8003208 <HAL_GPIO_Init+0x354>)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003190:	4b1d      	ldr	r3, [pc, #116]	@ (8003208 <HAL_GPIO_Init+0x354>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	43db      	mvns	r3, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031b4:	4a14      	ldr	r2, [pc, #80]	@ (8003208 <HAL_GPIO_Init+0x354>)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	3301      	adds	r3, #1
 80031be:	61fb      	str	r3, [r7, #28]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	2b0f      	cmp	r3, #15
 80031c4:	f67f ae86 	bls.w	8002ed4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031c8:	bf00      	nop
 80031ca:	bf00      	nop
 80031cc:	3724      	adds	r7, #36	@ 0x24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40013800 	.word	0x40013800
 80031e0:	40020000 	.word	0x40020000
 80031e4:	40020400 	.word	0x40020400
 80031e8:	40020800 	.word	0x40020800
 80031ec:	40020c00 	.word	0x40020c00
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40021400 	.word	0x40021400
 80031f8:	40021800 	.word	0x40021800
 80031fc:	40021c00 	.word	0x40021c00
 8003200:	40022000 	.word	0x40022000
 8003204:	40022400 	.word	0x40022400
 8003208:	40013c00 	.word	0x40013c00

0800320c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	807b      	strh	r3, [r7, #2]
 8003218:	4613      	mov	r3, r2
 800321a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800321c:	787b      	ldrb	r3, [r7, #1]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003222:	887a      	ldrh	r2, [r7, #2]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003228:	e003      	b.n	8003232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800322a:	887b      	ldrh	r3, [r7, #2]
 800322c:	041a      	lsls	r2, r3, #16
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	619a      	str	r2, [r3, #24]
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003244:	4b05      	ldr	r3, [pc, #20]	@ (800325c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a04      	ldr	r2, [pc, #16]	@ (800325c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800324a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800324e:	6013      	str	r3, [r2, #0]
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40007000 	.word	0x40007000

08003260 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800326a:	4b23      	ldr	r3, [pc, #140]	@ (80032f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	4a22      	ldr	r2, [pc, #136]	@ (80032f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003274:	6413      	str	r3, [r2, #64]	@ 0x40
 8003276:	4b20      	ldr	r3, [pc, #128]	@ (80032f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003282:	4b1e      	ldr	r3, [pc, #120]	@ (80032fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1d      	ldr	r2, [pc, #116]	@ (80032fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800328c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800328e:	f7fe fbdd 	bl	8001a4c <HAL_GetTick>
 8003292:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003294:	e009      	b.n	80032aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003296:	f7fe fbd9 	bl	8001a4c <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032a4:	d901      	bls.n	80032aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e022      	b.n	80032f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032aa:	4b14      	ldr	r3, [pc, #80]	@ (80032fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b6:	d1ee      	bne.n	8003296 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032b8:	4b10      	ldr	r3, [pc, #64]	@ (80032fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a0f      	ldr	r2, [pc, #60]	@ (80032fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80032be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032c4:	f7fe fbc2 	bl	8001a4c <HAL_GetTick>
 80032c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032ca:	e009      	b.n	80032e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032cc:	f7fe fbbe 	bl	8001a4c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032da:	d901      	bls.n	80032e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e007      	b.n	80032f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032e0:	4b06      	ldr	r3, [pc, #24]	@ (80032fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032ec:	d1ee      	bne.n	80032cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40007000 	.word	0x40007000

08003300 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003308:	2300      	movs	r3, #0
 800330a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e291      	b.n	800383a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 8087 	beq.w	8003432 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003324:	4b96      	ldr	r3, [pc, #600]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 030c 	and.w	r3, r3, #12
 800332c:	2b04      	cmp	r3, #4
 800332e:	d00c      	beq.n	800334a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003330:	4b93      	ldr	r3, [pc, #588]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 030c 	and.w	r3, r3, #12
 8003338:	2b08      	cmp	r3, #8
 800333a:	d112      	bne.n	8003362 <HAL_RCC_OscConfig+0x62>
 800333c:	4b90      	ldr	r3, [pc, #576]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003344:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003348:	d10b      	bne.n	8003362 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334a:	4b8d      	ldr	r3, [pc, #564]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d06c      	beq.n	8003430 <HAL_RCC_OscConfig+0x130>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d168      	bne.n	8003430 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e26b      	b.n	800383a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800336a:	d106      	bne.n	800337a <HAL_RCC_OscConfig+0x7a>
 800336c:	4b84      	ldr	r3, [pc, #528]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a83      	ldr	r2, [pc, #524]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	e02e      	b.n	80033d8 <HAL_RCC_OscConfig+0xd8>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10c      	bne.n	800339c <HAL_RCC_OscConfig+0x9c>
 8003382:	4b7f      	ldr	r3, [pc, #508]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a7e      	ldr	r2, [pc, #504]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	4b7c      	ldr	r3, [pc, #496]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a7b      	ldr	r2, [pc, #492]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003394:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	e01d      	b.n	80033d8 <HAL_RCC_OscConfig+0xd8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0xc0>
 80033a6:	4b76      	ldr	r3, [pc, #472]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a75      	ldr	r2, [pc, #468]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80033ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	4b73      	ldr	r3, [pc, #460]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a72      	ldr	r2, [pc, #456]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e00b      	b.n	80033d8 <HAL_RCC_OscConfig+0xd8>
 80033c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80033c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a6b      	ldr	r2, [pc, #428]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80033d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d013      	beq.n	8003408 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fe fb34 	bl	8001a4c <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e8:	f7fe fb30 	bl	8001a4c <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	@ 0x64
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e21f      	b.n	800383a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	4b61      	ldr	r3, [pc, #388]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0xe8>
 8003406:	e014      	b.n	8003432 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fe fb20 	bl	8001a4c <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003410:	f7fe fb1c 	bl	8001a4c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	@ 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e20b      	b.n	800383a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003422:	4b57      	ldr	r3, [pc, #348]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x110>
 800342e:	e000      	b.n	8003432 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d069      	beq.n	8003512 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800343e:	4b50      	ldr	r3, [pc, #320]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00b      	beq.n	8003462 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800344a:	4b4d      	ldr	r3, [pc, #308]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b08      	cmp	r3, #8
 8003454:	d11c      	bne.n	8003490 <HAL_RCC_OscConfig+0x190>
 8003456:	4b4a      	ldr	r3, [pc, #296]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d116      	bne.n	8003490 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003462:	4b47      	ldr	r3, [pc, #284]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <HAL_RCC_OscConfig+0x17a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d001      	beq.n	800347a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e1df      	b.n	800383a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347a:	4b41      	ldr	r3, [pc, #260]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	493d      	ldr	r1, [pc, #244]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348e:	e040      	b.n	8003512 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d023      	beq.n	80034e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003498:	4b39      	ldr	r3, [pc, #228]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a38      	ldr	r2, [pc, #224]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fe fad2 	bl	8001a4c <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ac:	f7fe face 	bl	8001a4c <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e1bd      	b.n	800383a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034be:	4b30      	ldr	r3, [pc, #192]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4929      	ldr	r1, [pc, #164]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
 80034de:	e018      	b.n	8003512 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e0:	4b27      	ldr	r3, [pc, #156]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a26      	ldr	r2, [pc, #152]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80034e6:	f023 0301 	bic.w	r3, r3, #1
 80034ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7fe faae 	bl	8001a4c <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f4:	f7fe faaa 	bl	8001a4c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e199      	b.n	800383a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003506:	4b1e      	ldr	r3, [pc, #120]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d038      	beq.n	8003590 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d019      	beq.n	800355a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003526:	4b16      	ldr	r3, [pc, #88]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800352a:	4a15      	ldr	r2, [pc, #84]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003532:	f7fe fa8b 	bl	8001a4c <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800353a:	f7fe fa87 	bl	8001a4c <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e176      	b.n	800383a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354c:	4b0c      	ldr	r3, [pc, #48]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 800354e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f0      	beq.n	800353a <HAL_RCC_OscConfig+0x23a>
 8003558:	e01a      	b.n	8003590 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800355a:	4b09      	ldr	r3, [pc, #36]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 800355c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800355e:	4a08      	ldr	r2, [pc, #32]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003566:	f7fe fa71 	bl	8001a4c <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800356c:	e00a      	b.n	8003584 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800356e:	f7fe fa6d 	bl	8001a4c <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d903      	bls.n	8003584 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e15c      	b.n	800383a <HAL_RCC_OscConfig+0x53a>
 8003580:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003584:	4b91      	ldr	r3, [pc, #580]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 8003586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1ee      	bne.n	800356e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80a4 	beq.w	80036e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800359e:	4b8b      	ldr	r3, [pc, #556]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10d      	bne.n	80035c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80035aa:	4b88      	ldr	r3, [pc, #544]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	4a87      	ldr	r2, [pc, #540]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 80035b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80035b6:	4b85      	ldr	r3, [pc, #532]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035be:	60bb      	str	r3, [r7, #8]
 80035c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035c2:	2301      	movs	r3, #1
 80035c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c6:	4b82      	ldr	r3, [pc, #520]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d118      	bne.n	8003604 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035d2:	4b7f      	ldr	r3, [pc, #508]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a7e      	ldr	r2, [pc, #504]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80035d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035de:	f7fe fa35 	bl	8001a4c <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e6:	f7fe fa31 	bl	8001a4c <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b64      	cmp	r3, #100	@ 0x64
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e120      	b.n	800383a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f8:	4b75      	ldr	r3, [pc, #468]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d106      	bne.n	800361a <HAL_RCC_OscConfig+0x31a>
 800360c:	4b6f      	ldr	r3, [pc, #444]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003610:	4a6e      	ldr	r2, [pc, #440]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	6713      	str	r3, [r2, #112]	@ 0x70
 8003618:	e02d      	b.n	8003676 <HAL_RCC_OscConfig+0x376>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10c      	bne.n	800363c <HAL_RCC_OscConfig+0x33c>
 8003622:	4b6a      	ldr	r3, [pc, #424]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003626:	4a69      	ldr	r2, [pc, #420]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6713      	str	r3, [r2, #112]	@ 0x70
 800362e:	4b67      	ldr	r3, [pc, #412]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003632:	4a66      	ldr	r2, [pc, #408]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 8003634:	f023 0304 	bic.w	r3, r3, #4
 8003638:	6713      	str	r3, [r2, #112]	@ 0x70
 800363a:	e01c      	b.n	8003676 <HAL_RCC_OscConfig+0x376>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b05      	cmp	r3, #5
 8003642:	d10c      	bne.n	800365e <HAL_RCC_OscConfig+0x35e>
 8003644:	4b61      	ldr	r3, [pc, #388]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003648:	4a60      	ldr	r2, [pc, #384]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 800364a:	f043 0304 	orr.w	r3, r3, #4
 800364e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003650:	4b5e      	ldr	r3, [pc, #376]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003654:	4a5d      	ldr	r2, [pc, #372]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6713      	str	r3, [r2, #112]	@ 0x70
 800365c:	e00b      	b.n	8003676 <HAL_RCC_OscConfig+0x376>
 800365e:	4b5b      	ldr	r3, [pc, #364]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 8003660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003662:	4a5a      	ldr	r2, [pc, #360]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	6713      	str	r3, [r2, #112]	@ 0x70
 800366a:	4b58      	ldr	r3, [pc, #352]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366e:	4a57      	ldr	r2, [pc, #348]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 8003670:	f023 0304 	bic.w	r3, r3, #4
 8003674:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d015      	beq.n	80036aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367e:	f7fe f9e5 	bl	8001a4c <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003684:	e00a      	b.n	800369c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003686:	f7fe f9e1 	bl	8001a4c <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003694:	4293      	cmp	r3, r2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e0ce      	b.n	800383a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369c:	4b4b      	ldr	r3, [pc, #300]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ee      	beq.n	8003686 <HAL_RCC_OscConfig+0x386>
 80036a8:	e014      	b.n	80036d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036aa:	f7fe f9cf 	bl	8001a4c <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fe f9cb 	bl	8001a4c <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e0b8      	b.n	800383a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c8:	4b40      	ldr	r3, [pc, #256]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1ee      	bne.n	80036b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d105      	bne.n	80036e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036da:	4b3c      	ldr	r3, [pc, #240]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036de:	4a3b      	ldr	r2, [pc, #236]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 80036e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036e4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 80a4 	beq.w	8003838 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036f0:	4b36      	ldr	r3, [pc, #216]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 030c 	and.w	r3, r3, #12
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d06b      	beq.n	80037d4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d149      	bne.n	8003798 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003704:	4b31      	ldr	r3, [pc, #196]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a30      	ldr	r2, [pc, #192]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 800370a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800370e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7fe f99c 	bl	8001a4c <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003718:	f7fe f998 	bl	8001a4c <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e087      	b.n	800383a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372a:	4b28      	ldr	r3, [pc, #160]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f0      	bne.n	8003718 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69da      	ldr	r2, [r3, #28]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	019b      	lsls	r3, r3, #6
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	3b01      	subs	r3, #1
 8003750:	041b      	lsls	r3, r3, #16
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003758:	061b      	lsls	r3, r3, #24
 800375a:	4313      	orrs	r3, r2
 800375c:	4a1b      	ldr	r2, [pc, #108]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 800375e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003762:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003764:	4b19      	ldr	r3, [pc, #100]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a18      	ldr	r2, [pc, #96]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 800376a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800376e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003770:	f7fe f96c 	bl	8001a4c <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003778:	f7fe f968 	bl	8001a4c <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e057      	b.n	800383a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378a:	4b10      	ldr	r3, [pc, #64]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0x478>
 8003796:	e04f      	b.n	8003838 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003798:	4b0c      	ldr	r3, [pc, #48]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a0b      	ldr	r2, [pc, #44]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 800379e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a4:	f7fe f952 	bl	8001a4c <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ac:	f7fe f94e 	bl	8001a4c <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e03d      	b.n	800383a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037be:	4b03      	ldr	r3, [pc, #12]	@ (80037cc <HAL_RCC_OscConfig+0x4cc>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x4ac>
 80037ca:	e035      	b.n	8003838 <HAL_RCC_OscConfig+0x538>
 80037cc:	40023800 	.word	0x40023800
 80037d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003844 <HAL_RCC_OscConfig+0x544>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d028      	beq.n	8003834 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d121      	bne.n	8003834 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d11a      	bne.n	8003834 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003804:	4013      	ands	r3, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800380a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800380c:	4293      	cmp	r3, r2
 800380e:	d111      	bne.n	8003834 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381a:	085b      	lsrs	r3, r3, #1
 800381c:	3b01      	subs	r3, #1
 800381e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003820:	429a      	cmp	r2, r3
 8003822:	d107      	bne.n	8003834 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003830:	429a      	cmp	r2, r3
 8003832:	d001      	beq.n	8003838 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e000      	b.n	800383a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800

08003848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0d0      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003860:	4b6a      	ldr	r3, [pc, #424]	@ (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d910      	bls.n	8003890 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386e:	4b67      	ldr	r3, [pc, #412]	@ (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f023 020f 	bic.w	r2, r3, #15
 8003876:	4965      	ldr	r1, [pc, #404]	@ (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b63      	ldr	r3, [pc, #396]	@ (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0b8      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a8:	4b59      	ldr	r3, [pc, #356]	@ (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4a58      	ldr	r2, [pc, #352]	@ (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80038ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c0:	4b53      	ldr	r3, [pc, #332]	@ (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4a52      	ldr	r2, [pc, #328]	@ (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80038c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038cc:	4b50      	ldr	r3, [pc, #320]	@ (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	494d      	ldr	r1, [pc, #308]	@ (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d040      	beq.n	800396c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	4b47      	ldr	r3, [pc, #284]	@ (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d115      	bne.n	800392a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e07f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d107      	bne.n	800391a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390a:	4b41      	ldr	r3, [pc, #260]	@ (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e073      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e06b      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800392a:	4b39      	ldr	r3, [pc, #228]	@ (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f023 0203 	bic.w	r2, r3, #3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	4936      	ldr	r1, [pc, #216]	@ (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 8003938:	4313      	orrs	r3, r2
 800393a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800393c:	f7fe f886 	bl	8001a4c <HAL_GetTick>
 8003940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003942:	e00a      	b.n	800395a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003944:	f7fe f882 	bl	8001a4c <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003952:	4293      	cmp	r3, r2
 8003954:	d901      	bls.n	800395a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e053      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395a:	4b2d      	ldr	r3, [pc, #180]	@ (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 020c 	and.w	r2, r3, #12
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	429a      	cmp	r2, r3
 800396a:	d1eb      	bne.n	8003944 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800396c:	4b27      	ldr	r3, [pc, #156]	@ (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d210      	bcs.n	800399c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397a:	4b24      	ldr	r3, [pc, #144]	@ (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f023 020f 	bic.w	r2, r3, #15
 8003982:	4922      	ldr	r1, [pc, #136]	@ (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	4313      	orrs	r3, r2
 8003988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398a:	4b20      	ldr	r3, [pc, #128]	@ (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d001      	beq.n	800399c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e032      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a8:	4b19      	ldr	r3, [pc, #100]	@ (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4916      	ldr	r1, [pc, #88]	@ (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039c6:	4b12      	ldr	r3, [pc, #72]	@ (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	490e      	ldr	r1, [pc, #56]	@ (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039da:	f000 f821 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 80039de:	4602      	mov	r2, r0
 80039e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	490a      	ldr	r1, [pc, #40]	@ (8003a14 <HAL_RCC_ClockConfig+0x1cc>)
 80039ec:	5ccb      	ldrb	r3, [r1, r3]
 80039ee:	fa22 f303 	lsr.w	r3, r2, r3
 80039f2:	4a09      	ldr	r2, [pc, #36]	@ (8003a18 <HAL_RCC_ClockConfig+0x1d0>)
 80039f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039f6:	4b09      	ldr	r3, [pc, #36]	@ (8003a1c <HAL_RCC_ClockConfig+0x1d4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fd ffe2 	bl	80019c4 <HAL_InitTick>

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40023c00 	.word	0x40023c00
 8003a10:	40023800 	.word	0x40023800
 8003a14:	08016668 	.word	0x08016668
 8003a18:	20000000 	.word	0x20000000
 8003a1c:	20000004 	.word	0x20000004

08003a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a24:	b094      	sub	sp, #80	@ 0x50
 8003a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a30:	2300      	movs	r3, #0
 8003a32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a38:	4b79      	ldr	r3, [pc, #484]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 030c 	and.w	r3, r3, #12
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d00d      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0x40>
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	f200 80e1 	bhi.w	8003c0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <HAL_RCC_GetSysClockFreq+0x34>
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d003      	beq.n	8003a5a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a52:	e0db      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a54:	4b73      	ldr	r3, [pc, #460]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a58:	e0db      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a5a:	4b73      	ldr	r3, [pc, #460]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a5e:	e0d8      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a60:	4b6f      	ldr	r3, [pc, #444]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a6a:	4b6d      	ldr	r3, [pc, #436]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d063      	beq.n	8003b3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a76:	4b6a      	ldr	r3, [pc, #424]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	099b      	lsrs	r3, r3, #6
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a88:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a92:	4622      	mov	r2, r4
 8003a94:	462b      	mov	r3, r5
 8003a96:	f04f 0000 	mov.w	r0, #0
 8003a9a:	f04f 0100 	mov.w	r1, #0
 8003a9e:	0159      	lsls	r1, r3, #5
 8003aa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aa4:	0150      	lsls	r0, r2, #5
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4621      	mov	r1, r4
 8003aac:	1a51      	subs	r1, r2, r1
 8003aae:	6139      	str	r1, [r7, #16]
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ac4:	4659      	mov	r1, fp
 8003ac6:	018b      	lsls	r3, r1, #6
 8003ac8:	4651      	mov	r1, sl
 8003aca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ace:	4651      	mov	r1, sl
 8003ad0:	018a      	lsls	r2, r1, #6
 8003ad2:	4651      	mov	r1, sl
 8003ad4:	ebb2 0801 	subs.w	r8, r2, r1
 8003ad8:	4659      	mov	r1, fp
 8003ada:	eb63 0901 	sbc.w	r9, r3, r1
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003af2:	4690      	mov	r8, r2
 8003af4:	4699      	mov	r9, r3
 8003af6:	4623      	mov	r3, r4
 8003af8:	eb18 0303 	adds.w	r3, r8, r3
 8003afc:	60bb      	str	r3, [r7, #8]
 8003afe:	462b      	mov	r3, r5
 8003b00:	eb49 0303 	adc.w	r3, r9, r3
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b12:	4629      	mov	r1, r5
 8003b14:	024b      	lsls	r3, r1, #9
 8003b16:	4621      	mov	r1, r4
 8003b18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	024a      	lsls	r2, r1, #9
 8003b20:	4610      	mov	r0, r2
 8003b22:	4619      	mov	r1, r3
 8003b24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b26:	2200      	movs	r2, #0
 8003b28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b30:	f7fd f85a 	bl	8000be8 <__aeabi_uldivmod>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4613      	mov	r3, r2
 8003b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b3c:	e058      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b3e:	4b38      	ldr	r3, [pc, #224]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	099b      	lsrs	r3, r3, #6
 8003b44:	2200      	movs	r2, #0
 8003b46:	4618      	mov	r0, r3
 8003b48:	4611      	mov	r1, r2
 8003b4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b4e:	623b      	str	r3, [r7, #32]
 8003b50:	2300      	movs	r3, #0
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b58:	4642      	mov	r2, r8
 8003b5a:	464b      	mov	r3, r9
 8003b5c:	f04f 0000 	mov.w	r0, #0
 8003b60:	f04f 0100 	mov.w	r1, #0
 8003b64:	0159      	lsls	r1, r3, #5
 8003b66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b6a:	0150      	lsls	r0, r2, #5
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4641      	mov	r1, r8
 8003b72:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b76:	4649      	mov	r1, r9
 8003b78:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b90:	ebb2 040a 	subs.w	r4, r2, sl
 8003b94:	eb63 050b 	sbc.w	r5, r3, fp
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	00eb      	lsls	r3, r5, #3
 8003ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ba6:	00e2      	lsls	r2, r4, #3
 8003ba8:	4614      	mov	r4, r2
 8003baa:	461d      	mov	r5, r3
 8003bac:	4643      	mov	r3, r8
 8003bae:	18e3      	adds	r3, r4, r3
 8003bb0:	603b      	str	r3, [r7, #0]
 8003bb2:	464b      	mov	r3, r9
 8003bb4:	eb45 0303 	adc.w	r3, r5, r3
 8003bb8:	607b      	str	r3, [r7, #4]
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bc6:	4629      	mov	r1, r5
 8003bc8:	028b      	lsls	r3, r1, #10
 8003bca:	4621      	mov	r1, r4
 8003bcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bd0:	4621      	mov	r1, r4
 8003bd2:	028a      	lsls	r2, r1, #10
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bda:	2200      	movs	r2, #0
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	61fa      	str	r2, [r7, #28]
 8003be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003be4:	f7fd f800 	bl	8000be8 <__aeabi_uldivmod>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4613      	mov	r3, r2
 8003bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	0c1b      	lsrs	r3, r3, #16
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c0a:	e002      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c0c:	4b05      	ldr	r3, [pc, #20]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3750      	adds	r7, #80	@ 0x50
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c1e:	bf00      	nop
 8003c20:	40023800 	.word	0x40023800
 8003c24:	00f42400 	.word	0x00f42400
 8003c28:	007a1200 	.word	0x007a1200

08003c2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c30:	4b03      	ldr	r3, [pc, #12]	@ (8003c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c32:	681b      	ldr	r3, [r3, #0]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000000 	.word	0x20000000

08003c44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e049      	b.n	8003cea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fd fbf4 	bl	8001458 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4619      	mov	r1, r3
 8003c82:	4610      	mov	r0, r2
 8003c84:	f000 fac0 	bl	8004208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d001      	beq.n	8003d0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e054      	b.n	8003db6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a26      	ldr	r2, [pc, #152]	@ (8003dc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d022      	beq.n	8003d74 <HAL_TIM_Base_Start_IT+0x80>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d36:	d01d      	beq.n	8003d74 <HAL_TIM_Base_Start_IT+0x80>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a22      	ldr	r2, [pc, #136]	@ (8003dc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d018      	beq.n	8003d74 <HAL_TIM_Base_Start_IT+0x80>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a21      	ldr	r2, [pc, #132]	@ (8003dcc <HAL_TIM_Base_Start_IT+0xd8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d013      	beq.n	8003d74 <HAL_TIM_Base_Start_IT+0x80>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1f      	ldr	r2, [pc, #124]	@ (8003dd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d00e      	beq.n	8003d74 <HAL_TIM_Base_Start_IT+0x80>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8003dd4 <HAL_TIM_Base_Start_IT+0xe0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d009      	beq.n	8003d74 <HAL_TIM_Base_Start_IT+0x80>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1c      	ldr	r2, [pc, #112]	@ (8003dd8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d004      	beq.n	8003d74 <HAL_TIM_Base_Start_IT+0x80>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8003ddc <HAL_TIM_Base_Start_IT+0xe8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d115      	bne.n	8003da0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	4b19      	ldr	r3, [pc, #100]	@ (8003de0 <HAL_TIM_Base_Start_IT+0xec>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b06      	cmp	r3, #6
 8003d84:	d015      	beq.n	8003db2 <HAL_TIM_Base_Start_IT+0xbe>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d8c:	d011      	beq.n	8003db2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0201 	orr.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d9e:	e008      	b.n	8003db2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0201 	orr.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	e000      	b.n	8003db4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40010000 	.word	0x40010000
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40000800 	.word	0x40000800
 8003dd0:	40000c00 	.word	0x40000c00
 8003dd4:	40010400 	.word	0x40010400
 8003dd8:	40014000 	.word	0x40014000
 8003ddc:	40001800 	.word	0x40001800
 8003de0:	00010007 	.word	0x00010007

08003de4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d122      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d11b      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0202 	mvn.w	r2, #2
 8003e10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f9d0 	bl	80041cc <HAL_TIM_IC_CaptureCallback>
 8003e2c:	e005      	b.n	8003e3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f9c2 	bl	80041b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f9d3 	bl	80041e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d122      	bne.n	8003e94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d11b      	bne.n	8003e94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0204 	mvn.w	r2, #4
 8003e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2202      	movs	r2, #2
 8003e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f9a6 	bl	80041cc <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f998 	bl	80041b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f9a9 	bl	80041e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d122      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d11b      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0208 	mvn.w	r2, #8
 8003eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f97c 	bl	80041cc <HAL_TIM_IC_CaptureCallback>
 8003ed4:	e005      	b.n	8003ee2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f96e 	bl	80041b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f97f 	bl	80041e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0310 	and.w	r3, r3, #16
 8003ef2:	2b10      	cmp	r3, #16
 8003ef4:	d122      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b10      	cmp	r3, #16
 8003f02:	d11b      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0210 	mvn.w	r2, #16
 8003f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2208      	movs	r2, #8
 8003f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f952 	bl	80041cc <HAL_TIM_IC_CaptureCallback>
 8003f28:	e005      	b.n	8003f36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f944 	bl	80041b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f955 	bl	80041e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d10e      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d107      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0201 	mvn.w	r2, #1
 8003f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fd fa34 	bl	80013d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f72:	2b80      	cmp	r3, #128	@ 0x80
 8003f74:	d10e      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f80:	2b80      	cmp	r3, #128	@ 0x80
 8003f82:	d107      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fb0c 	bl	80045ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fa2:	d10e      	bne.n	8003fc2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fae:	2b80      	cmp	r3, #128	@ 0x80
 8003fb0:	d107      	bne.n	8003fc2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 faff 	bl	80045c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fcc:	2b40      	cmp	r3, #64	@ 0x40
 8003fce:	d10e      	bne.n	8003fee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fda:	2b40      	cmp	r3, #64	@ 0x40
 8003fdc:	d107      	bne.n	8003fee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f903 	bl	80041f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f003 0320 	and.w	r3, r3, #32
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d10e      	bne.n	800401a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b20      	cmp	r3, #32
 8004008:	d107      	bne.n	800401a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f06f 0220 	mvn.w	r2, #32
 8004012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 fabf 	bl	8004598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800401a:	bf00      	nop
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <HAL_TIM_ConfigClockSource+0x1c>
 800403c:	2302      	movs	r3, #2
 800403e:	e0b4      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x186>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	4b56      	ldr	r3, [pc, #344]	@ (80041b4 <HAL_TIM_ConfigClockSource+0x190>)
 800405c:	4013      	ands	r3, r2
 800405e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004066:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004078:	d03e      	beq.n	80040f8 <HAL_TIM_ConfigClockSource+0xd4>
 800407a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800407e:	f200 8087 	bhi.w	8004190 <HAL_TIM_ConfigClockSource+0x16c>
 8004082:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004086:	f000 8086 	beq.w	8004196 <HAL_TIM_ConfigClockSource+0x172>
 800408a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800408e:	d87f      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x16c>
 8004090:	2b70      	cmp	r3, #112	@ 0x70
 8004092:	d01a      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0xa6>
 8004094:	2b70      	cmp	r3, #112	@ 0x70
 8004096:	d87b      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x16c>
 8004098:	2b60      	cmp	r3, #96	@ 0x60
 800409a:	d050      	beq.n	800413e <HAL_TIM_ConfigClockSource+0x11a>
 800409c:	2b60      	cmp	r3, #96	@ 0x60
 800409e:	d877      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x16c>
 80040a0:	2b50      	cmp	r3, #80	@ 0x50
 80040a2:	d03c      	beq.n	800411e <HAL_TIM_ConfigClockSource+0xfa>
 80040a4:	2b50      	cmp	r3, #80	@ 0x50
 80040a6:	d873      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x16c>
 80040a8:	2b40      	cmp	r3, #64	@ 0x40
 80040aa:	d058      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x13a>
 80040ac:	2b40      	cmp	r3, #64	@ 0x40
 80040ae:	d86f      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x16c>
 80040b0:	2b30      	cmp	r3, #48	@ 0x30
 80040b2:	d064      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x15a>
 80040b4:	2b30      	cmp	r3, #48	@ 0x30
 80040b6:	d86b      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x16c>
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d060      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x15a>
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d867      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x16c>
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d05c      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x15a>
 80040c4:	2b10      	cmp	r3, #16
 80040c6:	d05a      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x15a>
 80040c8:	e062      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040da:	f000 f9af 	bl	800443c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80040ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	609a      	str	r2, [r3, #8]
      break;
 80040f6:	e04f      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004108:	f000 f998 	bl	800443c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800411a:	609a      	str	r2, [r3, #8]
      break;
 800411c:	e03c      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800412a:	461a      	mov	r2, r3
 800412c:	f000 f90c 	bl	8004348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2150      	movs	r1, #80	@ 0x50
 8004136:	4618      	mov	r0, r3
 8004138:	f000 f965 	bl	8004406 <TIM_ITRx_SetConfig>
      break;
 800413c:	e02c      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800414a:	461a      	mov	r2, r3
 800414c:	f000 f92b 	bl	80043a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2160      	movs	r1, #96	@ 0x60
 8004156:	4618      	mov	r0, r3
 8004158:	f000 f955 	bl	8004406 <TIM_ITRx_SetConfig>
      break;
 800415c:	e01c      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800416a:	461a      	mov	r2, r3
 800416c:	f000 f8ec 	bl	8004348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2140      	movs	r1, #64	@ 0x40
 8004176:	4618      	mov	r0, r3
 8004178:	f000 f945 	bl	8004406 <TIM_ITRx_SetConfig>
      break;
 800417c:	e00c      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4619      	mov	r1, r3
 8004188:	4610      	mov	r0, r2
 800418a:	f000 f93c 	bl	8004406 <TIM_ITRx_SetConfig>
      break;
 800418e:	e003      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]
      break;
 8004194:	e000      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004196:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	fffeff88 	.word	0xfffeff88

080041b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a40      	ldr	r2, [pc, #256]	@ (800431c <TIM_Base_SetConfig+0x114>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d013      	beq.n	8004248 <TIM_Base_SetConfig+0x40>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004226:	d00f      	beq.n	8004248 <TIM_Base_SetConfig+0x40>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a3d      	ldr	r2, [pc, #244]	@ (8004320 <TIM_Base_SetConfig+0x118>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d00b      	beq.n	8004248 <TIM_Base_SetConfig+0x40>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a3c      	ldr	r2, [pc, #240]	@ (8004324 <TIM_Base_SetConfig+0x11c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d007      	beq.n	8004248 <TIM_Base_SetConfig+0x40>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a3b      	ldr	r2, [pc, #236]	@ (8004328 <TIM_Base_SetConfig+0x120>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d003      	beq.n	8004248 <TIM_Base_SetConfig+0x40>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a3a      	ldr	r2, [pc, #232]	@ (800432c <TIM_Base_SetConfig+0x124>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d108      	bne.n	800425a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800424e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a2f      	ldr	r2, [pc, #188]	@ (800431c <TIM_Base_SetConfig+0x114>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d02b      	beq.n	80042ba <TIM_Base_SetConfig+0xb2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004268:	d027      	beq.n	80042ba <TIM_Base_SetConfig+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a2c      	ldr	r2, [pc, #176]	@ (8004320 <TIM_Base_SetConfig+0x118>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d023      	beq.n	80042ba <TIM_Base_SetConfig+0xb2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a2b      	ldr	r2, [pc, #172]	@ (8004324 <TIM_Base_SetConfig+0x11c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d01f      	beq.n	80042ba <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a2a      	ldr	r2, [pc, #168]	@ (8004328 <TIM_Base_SetConfig+0x120>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d01b      	beq.n	80042ba <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a29      	ldr	r2, [pc, #164]	@ (800432c <TIM_Base_SetConfig+0x124>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d017      	beq.n	80042ba <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a28      	ldr	r2, [pc, #160]	@ (8004330 <TIM_Base_SetConfig+0x128>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d013      	beq.n	80042ba <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a27      	ldr	r2, [pc, #156]	@ (8004334 <TIM_Base_SetConfig+0x12c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00f      	beq.n	80042ba <TIM_Base_SetConfig+0xb2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a26      	ldr	r2, [pc, #152]	@ (8004338 <TIM_Base_SetConfig+0x130>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d00b      	beq.n	80042ba <TIM_Base_SetConfig+0xb2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a25      	ldr	r2, [pc, #148]	@ (800433c <TIM_Base_SetConfig+0x134>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d007      	beq.n	80042ba <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a24      	ldr	r2, [pc, #144]	@ (8004340 <TIM_Base_SetConfig+0x138>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d003      	beq.n	80042ba <TIM_Base_SetConfig+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a23      	ldr	r2, [pc, #140]	@ (8004344 <TIM_Base_SetConfig+0x13c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d108      	bne.n	80042cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a0a      	ldr	r2, [pc, #40]	@ (800431c <TIM_Base_SetConfig+0x114>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d003      	beq.n	8004300 <TIM_Base_SetConfig+0xf8>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a0c      	ldr	r2, [pc, #48]	@ (800432c <TIM_Base_SetConfig+0x124>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d103      	bne.n	8004308 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	615a      	str	r2, [r3, #20]
}
 800430e:	bf00      	nop
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40010000 	.word	0x40010000
 8004320:	40000400 	.word	0x40000400
 8004324:	40000800 	.word	0x40000800
 8004328:	40000c00 	.word	0x40000c00
 800432c:	40010400 	.word	0x40010400
 8004330:	40014000 	.word	0x40014000
 8004334:	40014400 	.word	0x40014400
 8004338:	40014800 	.word	0x40014800
 800433c:	40001800 	.word	0x40001800
 8004340:	40001c00 	.word	0x40001c00
 8004344:	40002000 	.word	0x40002000

08004348 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	f023 0201 	bic.w	r2, r3, #1
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f023 030a 	bic.w	r3, r3, #10
 8004384:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	621a      	str	r2, [r3, #32]
}
 800439a:	bf00      	nop
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b087      	sub	sp, #28
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	f023 0210 	bic.w	r2, r3, #16
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	031b      	lsls	r3, r3, #12
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	621a      	str	r2, [r3, #32]
}
 80043fa:	bf00      	nop
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004406:	b480      	push	{r7}
 8004408:	b085      	sub	sp, #20
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800441c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	f043 0307 	orr.w	r3, r3, #7
 8004428:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	609a      	str	r2, [r3, #8]
}
 8004430:	bf00      	nop
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
 8004448:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004456:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	021a      	lsls	r2, r3, #8
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	431a      	orrs	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4313      	orrs	r3, r2
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	609a      	str	r2, [r3, #8]
}
 8004470:	bf00      	nop
 8004472:	371c      	adds	r7, #28
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004490:	2302      	movs	r3, #2
 8004492:	e06d      	b.n	8004570 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a30      	ldr	r2, [pc, #192]	@ (800457c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d004      	beq.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a2f      	ldr	r2, [pc, #188]	@ (8004580 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d108      	bne.n	80044da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80044ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a20      	ldr	r2, [pc, #128]	@ (800457c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d022      	beq.n	8004544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004506:	d01d      	beq.n	8004544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a1d      	ldr	r2, [pc, #116]	@ (8004584 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d018      	beq.n	8004544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a1c      	ldr	r2, [pc, #112]	@ (8004588 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d013      	beq.n	8004544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a1a      	ldr	r2, [pc, #104]	@ (800458c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d00e      	beq.n	8004544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a15      	ldr	r2, [pc, #84]	@ (8004580 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d009      	beq.n	8004544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a16      	ldr	r2, [pc, #88]	@ (8004590 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d004      	beq.n	8004544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a15      	ldr	r2, [pc, #84]	@ (8004594 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d10c      	bne.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800454a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	4313      	orrs	r3, r2
 8004554:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	40010000 	.word	0x40010000
 8004580:	40010400 	.word	0x40010400
 8004584:	40000400 	.word	0x40000400
 8004588:	40000800 	.word	0x40000800
 800458c:	40000c00 	.word	0x40000c00
 8004590:	40014000 	.word	0x40014000
 8004594:	40001800 	.word	0x40001800

08004598 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80045da:	4b87      	ldr	r3, [pc, #540]	@ (80047f8 <MX_LWIP_Init+0x224>)
 80045dc:	22c0      	movs	r2, #192	@ 0xc0
 80045de:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80045e0:	4b85      	ldr	r3, [pc, #532]	@ (80047f8 <MX_LWIP_Init+0x224>)
 80045e2:	22a8      	movs	r2, #168	@ 0xa8
 80045e4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80045e6:	4b84      	ldr	r3, [pc, #528]	@ (80047f8 <MX_LWIP_Init+0x224>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 9;
 80045ec:	4b82      	ldr	r3, [pc, #520]	@ (80047f8 <MX_LWIP_Init+0x224>)
 80045ee:	2209      	movs	r2, #9
 80045f0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80045f2:	4b82      	ldr	r3, [pc, #520]	@ (80047fc <MX_LWIP_Init+0x228>)
 80045f4:	22ff      	movs	r2, #255	@ 0xff
 80045f6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80045f8:	4b80      	ldr	r3, [pc, #512]	@ (80047fc <MX_LWIP_Init+0x228>)
 80045fa:	22ff      	movs	r2, #255	@ 0xff
 80045fc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80045fe:	4b7f      	ldr	r3, [pc, #508]	@ (80047fc <MX_LWIP_Init+0x228>)
 8004600:	22ff      	movs	r2, #255	@ 0xff
 8004602:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004604:	4b7d      	ldr	r3, [pc, #500]	@ (80047fc <MX_LWIP_Init+0x228>)
 8004606:	2200      	movs	r2, #0
 8004608:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800460a:	4b7d      	ldr	r3, [pc, #500]	@ (8004800 <MX_LWIP_Init+0x22c>)
 800460c:	22c0      	movs	r2, #192	@ 0xc0
 800460e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004610:	4b7b      	ldr	r3, [pc, #492]	@ (8004800 <MX_LWIP_Init+0x22c>)
 8004612:	22a8      	movs	r2, #168	@ 0xa8
 8004614:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004616:	4b7a      	ldr	r3, [pc, #488]	@ (8004800 <MX_LWIP_Init+0x22c>)
 8004618:	2201      	movs	r2, #1
 800461a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800461c:	4b78      	ldr	r3, [pc, #480]	@ (8004800 <MX_LWIP_Init+0x22c>)
 800461e:	2201      	movs	r2, #1
 8004620:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8004622:	f000 fd39 	bl	8005098 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004626:	4b74      	ldr	r3, [pc, #464]	@ (80047f8 <MX_LWIP_Init+0x224>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	061a      	lsls	r2, r3, #24
 800462c:	4b72      	ldr	r3, [pc, #456]	@ (80047f8 <MX_LWIP_Init+0x224>)
 800462e:	785b      	ldrb	r3, [r3, #1]
 8004630:	041b      	lsls	r3, r3, #16
 8004632:	431a      	orrs	r2, r3
 8004634:	4b70      	ldr	r3, [pc, #448]	@ (80047f8 <MX_LWIP_Init+0x224>)
 8004636:	789b      	ldrb	r3, [r3, #2]
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	4313      	orrs	r3, r2
 800463c:	4a6e      	ldr	r2, [pc, #440]	@ (80047f8 <MX_LWIP_Init+0x224>)
 800463e:	78d2      	ldrb	r2, [r2, #3]
 8004640:	4313      	orrs	r3, r2
 8004642:	061a      	lsls	r2, r3, #24
 8004644:	4b6c      	ldr	r3, [pc, #432]	@ (80047f8 <MX_LWIP_Init+0x224>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	0619      	lsls	r1, r3, #24
 800464a:	4b6b      	ldr	r3, [pc, #428]	@ (80047f8 <MX_LWIP_Init+0x224>)
 800464c:	785b      	ldrb	r3, [r3, #1]
 800464e:	041b      	lsls	r3, r3, #16
 8004650:	4319      	orrs	r1, r3
 8004652:	4b69      	ldr	r3, [pc, #420]	@ (80047f8 <MX_LWIP_Init+0x224>)
 8004654:	789b      	ldrb	r3, [r3, #2]
 8004656:	021b      	lsls	r3, r3, #8
 8004658:	430b      	orrs	r3, r1
 800465a:	4967      	ldr	r1, [pc, #412]	@ (80047f8 <MX_LWIP_Init+0x224>)
 800465c:	78c9      	ldrb	r1, [r1, #3]
 800465e:	430b      	orrs	r3, r1
 8004660:	021b      	lsls	r3, r3, #8
 8004662:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004666:	431a      	orrs	r2, r3
 8004668:	4b63      	ldr	r3, [pc, #396]	@ (80047f8 <MX_LWIP_Init+0x224>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	0619      	lsls	r1, r3, #24
 800466e:	4b62      	ldr	r3, [pc, #392]	@ (80047f8 <MX_LWIP_Init+0x224>)
 8004670:	785b      	ldrb	r3, [r3, #1]
 8004672:	041b      	lsls	r3, r3, #16
 8004674:	4319      	orrs	r1, r3
 8004676:	4b60      	ldr	r3, [pc, #384]	@ (80047f8 <MX_LWIP_Init+0x224>)
 8004678:	789b      	ldrb	r3, [r3, #2]
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	430b      	orrs	r3, r1
 800467e:	495e      	ldr	r1, [pc, #376]	@ (80047f8 <MX_LWIP_Init+0x224>)
 8004680:	78c9      	ldrb	r1, [r1, #3]
 8004682:	430b      	orrs	r3, r1
 8004684:	0a1b      	lsrs	r3, r3, #8
 8004686:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800468a:	431a      	orrs	r2, r3
 800468c:	4b5a      	ldr	r3, [pc, #360]	@ (80047f8 <MX_LWIP_Init+0x224>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	0619      	lsls	r1, r3, #24
 8004692:	4b59      	ldr	r3, [pc, #356]	@ (80047f8 <MX_LWIP_Init+0x224>)
 8004694:	785b      	ldrb	r3, [r3, #1]
 8004696:	041b      	lsls	r3, r3, #16
 8004698:	4319      	orrs	r1, r3
 800469a:	4b57      	ldr	r3, [pc, #348]	@ (80047f8 <MX_LWIP_Init+0x224>)
 800469c:	789b      	ldrb	r3, [r3, #2]
 800469e:	021b      	lsls	r3, r3, #8
 80046a0:	430b      	orrs	r3, r1
 80046a2:	4955      	ldr	r1, [pc, #340]	@ (80047f8 <MX_LWIP_Init+0x224>)
 80046a4:	78c9      	ldrb	r1, [r1, #3]
 80046a6:	430b      	orrs	r3, r1
 80046a8:	0e1b      	lsrs	r3, r3, #24
 80046aa:	4313      	orrs	r3, r2
 80046ac:	4a55      	ldr	r2, [pc, #340]	@ (8004804 <MX_LWIP_Init+0x230>)
 80046ae:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80046b0:	4b52      	ldr	r3, [pc, #328]	@ (80047fc <MX_LWIP_Init+0x228>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	061a      	lsls	r2, r3, #24
 80046b6:	4b51      	ldr	r3, [pc, #324]	@ (80047fc <MX_LWIP_Init+0x228>)
 80046b8:	785b      	ldrb	r3, [r3, #1]
 80046ba:	041b      	lsls	r3, r3, #16
 80046bc:	431a      	orrs	r2, r3
 80046be:	4b4f      	ldr	r3, [pc, #316]	@ (80047fc <MX_LWIP_Init+0x228>)
 80046c0:	789b      	ldrb	r3, [r3, #2]
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	4313      	orrs	r3, r2
 80046c6:	4a4d      	ldr	r2, [pc, #308]	@ (80047fc <MX_LWIP_Init+0x228>)
 80046c8:	78d2      	ldrb	r2, [r2, #3]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	061a      	lsls	r2, r3, #24
 80046ce:	4b4b      	ldr	r3, [pc, #300]	@ (80047fc <MX_LWIP_Init+0x228>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	0619      	lsls	r1, r3, #24
 80046d4:	4b49      	ldr	r3, [pc, #292]	@ (80047fc <MX_LWIP_Init+0x228>)
 80046d6:	785b      	ldrb	r3, [r3, #1]
 80046d8:	041b      	lsls	r3, r3, #16
 80046da:	4319      	orrs	r1, r3
 80046dc:	4b47      	ldr	r3, [pc, #284]	@ (80047fc <MX_LWIP_Init+0x228>)
 80046de:	789b      	ldrb	r3, [r3, #2]
 80046e0:	021b      	lsls	r3, r3, #8
 80046e2:	430b      	orrs	r3, r1
 80046e4:	4945      	ldr	r1, [pc, #276]	@ (80047fc <MX_LWIP_Init+0x228>)
 80046e6:	78c9      	ldrb	r1, [r1, #3]
 80046e8:	430b      	orrs	r3, r1
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80046f0:	431a      	orrs	r2, r3
 80046f2:	4b42      	ldr	r3, [pc, #264]	@ (80047fc <MX_LWIP_Init+0x228>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	0619      	lsls	r1, r3, #24
 80046f8:	4b40      	ldr	r3, [pc, #256]	@ (80047fc <MX_LWIP_Init+0x228>)
 80046fa:	785b      	ldrb	r3, [r3, #1]
 80046fc:	041b      	lsls	r3, r3, #16
 80046fe:	4319      	orrs	r1, r3
 8004700:	4b3e      	ldr	r3, [pc, #248]	@ (80047fc <MX_LWIP_Init+0x228>)
 8004702:	789b      	ldrb	r3, [r3, #2]
 8004704:	021b      	lsls	r3, r3, #8
 8004706:	430b      	orrs	r3, r1
 8004708:	493c      	ldr	r1, [pc, #240]	@ (80047fc <MX_LWIP_Init+0x228>)
 800470a:	78c9      	ldrb	r1, [r1, #3]
 800470c:	430b      	orrs	r3, r1
 800470e:	0a1b      	lsrs	r3, r3, #8
 8004710:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004714:	431a      	orrs	r2, r3
 8004716:	4b39      	ldr	r3, [pc, #228]	@ (80047fc <MX_LWIP_Init+0x228>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	0619      	lsls	r1, r3, #24
 800471c:	4b37      	ldr	r3, [pc, #220]	@ (80047fc <MX_LWIP_Init+0x228>)
 800471e:	785b      	ldrb	r3, [r3, #1]
 8004720:	041b      	lsls	r3, r3, #16
 8004722:	4319      	orrs	r1, r3
 8004724:	4b35      	ldr	r3, [pc, #212]	@ (80047fc <MX_LWIP_Init+0x228>)
 8004726:	789b      	ldrb	r3, [r3, #2]
 8004728:	021b      	lsls	r3, r3, #8
 800472a:	430b      	orrs	r3, r1
 800472c:	4933      	ldr	r1, [pc, #204]	@ (80047fc <MX_LWIP_Init+0x228>)
 800472e:	78c9      	ldrb	r1, [r1, #3]
 8004730:	430b      	orrs	r3, r1
 8004732:	0e1b      	lsrs	r3, r3, #24
 8004734:	4313      	orrs	r3, r2
 8004736:	4a34      	ldr	r2, [pc, #208]	@ (8004808 <MX_LWIP_Init+0x234>)
 8004738:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800473a:	4b31      	ldr	r3, [pc, #196]	@ (8004800 <MX_LWIP_Init+0x22c>)
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	061a      	lsls	r2, r3, #24
 8004740:	4b2f      	ldr	r3, [pc, #188]	@ (8004800 <MX_LWIP_Init+0x22c>)
 8004742:	785b      	ldrb	r3, [r3, #1]
 8004744:	041b      	lsls	r3, r3, #16
 8004746:	431a      	orrs	r2, r3
 8004748:	4b2d      	ldr	r3, [pc, #180]	@ (8004800 <MX_LWIP_Init+0x22c>)
 800474a:	789b      	ldrb	r3, [r3, #2]
 800474c:	021b      	lsls	r3, r3, #8
 800474e:	4313      	orrs	r3, r2
 8004750:	4a2b      	ldr	r2, [pc, #172]	@ (8004800 <MX_LWIP_Init+0x22c>)
 8004752:	78d2      	ldrb	r2, [r2, #3]
 8004754:	4313      	orrs	r3, r2
 8004756:	061a      	lsls	r2, r3, #24
 8004758:	4b29      	ldr	r3, [pc, #164]	@ (8004800 <MX_LWIP_Init+0x22c>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	0619      	lsls	r1, r3, #24
 800475e:	4b28      	ldr	r3, [pc, #160]	@ (8004800 <MX_LWIP_Init+0x22c>)
 8004760:	785b      	ldrb	r3, [r3, #1]
 8004762:	041b      	lsls	r3, r3, #16
 8004764:	4319      	orrs	r1, r3
 8004766:	4b26      	ldr	r3, [pc, #152]	@ (8004800 <MX_LWIP_Init+0x22c>)
 8004768:	789b      	ldrb	r3, [r3, #2]
 800476a:	021b      	lsls	r3, r3, #8
 800476c:	430b      	orrs	r3, r1
 800476e:	4924      	ldr	r1, [pc, #144]	@ (8004800 <MX_LWIP_Init+0x22c>)
 8004770:	78c9      	ldrb	r1, [r1, #3]
 8004772:	430b      	orrs	r3, r1
 8004774:	021b      	lsls	r3, r3, #8
 8004776:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800477a:	431a      	orrs	r2, r3
 800477c:	4b20      	ldr	r3, [pc, #128]	@ (8004800 <MX_LWIP_Init+0x22c>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	0619      	lsls	r1, r3, #24
 8004782:	4b1f      	ldr	r3, [pc, #124]	@ (8004800 <MX_LWIP_Init+0x22c>)
 8004784:	785b      	ldrb	r3, [r3, #1]
 8004786:	041b      	lsls	r3, r3, #16
 8004788:	4319      	orrs	r1, r3
 800478a:	4b1d      	ldr	r3, [pc, #116]	@ (8004800 <MX_LWIP_Init+0x22c>)
 800478c:	789b      	ldrb	r3, [r3, #2]
 800478e:	021b      	lsls	r3, r3, #8
 8004790:	430b      	orrs	r3, r1
 8004792:	491b      	ldr	r1, [pc, #108]	@ (8004800 <MX_LWIP_Init+0x22c>)
 8004794:	78c9      	ldrb	r1, [r1, #3]
 8004796:	430b      	orrs	r3, r1
 8004798:	0a1b      	lsrs	r3, r3, #8
 800479a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800479e:	431a      	orrs	r2, r3
 80047a0:	4b17      	ldr	r3, [pc, #92]	@ (8004800 <MX_LWIP_Init+0x22c>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	0619      	lsls	r1, r3, #24
 80047a6:	4b16      	ldr	r3, [pc, #88]	@ (8004800 <MX_LWIP_Init+0x22c>)
 80047a8:	785b      	ldrb	r3, [r3, #1]
 80047aa:	041b      	lsls	r3, r3, #16
 80047ac:	4319      	orrs	r1, r3
 80047ae:	4b14      	ldr	r3, [pc, #80]	@ (8004800 <MX_LWIP_Init+0x22c>)
 80047b0:	789b      	ldrb	r3, [r3, #2]
 80047b2:	021b      	lsls	r3, r3, #8
 80047b4:	430b      	orrs	r3, r1
 80047b6:	4912      	ldr	r1, [pc, #72]	@ (8004800 <MX_LWIP_Init+0x22c>)
 80047b8:	78c9      	ldrb	r1, [r1, #3]
 80047ba:	430b      	orrs	r3, r1
 80047bc:	0e1b      	lsrs	r3, r3, #24
 80047be:	4313      	orrs	r3, r2
 80047c0:	4a12      	ldr	r2, [pc, #72]	@ (800480c <MX_LWIP_Init+0x238>)
 80047c2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80047c4:	4b12      	ldr	r3, [pc, #72]	@ (8004810 <MX_LWIP_Init+0x23c>)
 80047c6:	9302      	str	r3, [sp, #8]
 80047c8:	4b12      	ldr	r3, [pc, #72]	@ (8004814 <MX_LWIP_Init+0x240>)
 80047ca:	9301      	str	r3, [sp, #4]
 80047cc:	2300      	movs	r3, #0
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	4b0e      	ldr	r3, [pc, #56]	@ (800480c <MX_LWIP_Init+0x238>)
 80047d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004808 <MX_LWIP_Init+0x234>)
 80047d4:	490b      	ldr	r1, [pc, #44]	@ (8004804 <MX_LWIP_Init+0x230>)
 80047d6:	4810      	ldr	r0, [pc, #64]	@ (8004818 <MX_LWIP_Init+0x244>)
 80047d8:	f001 f94a 	bl	8005a70 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80047dc:	480e      	ldr	r0, [pc, #56]	@ (8004818 <MX_LWIP_Init+0x244>)
 80047de:	f001 faf9 	bl	8005dd4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80047e2:	480d      	ldr	r0, [pc, #52]	@ (8004818 <MX_LWIP_Init+0x244>)
 80047e4:	f001 fb06 	bl	8005df4 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80047e8:	490c      	ldr	r1, [pc, #48]	@ (800481c <MX_LWIP_Init+0x248>)
 80047ea:	480b      	ldr	r0, [pc, #44]	@ (8004818 <MX_LWIP_Init+0x244>)
 80047ec:	f001 fc04 	bl	8005ff8 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80047f0:	bf00      	nop
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	200008dc 	.word	0x200008dc
 80047fc:	200008e0 	.word	0x200008e0
 8004800:	200008e4 	.word	0x200008e4
 8004804:	200008d0 	.word	0x200008d0
 8004808:	200008d4 	.word	0x200008d4
 800480c:	200008d8 	.word	0x200008d8
 8004810:	0800ef4d 	.word	0x0800ef4d
 8004814:	08004b95 	.word	0x08004b95
 8004818:	2000089c 	.word	0x2000089c
 800481c:	08004871 	.word	0x08004871

08004820 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8004828:	f7fd f910 	bl	8001a4c <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	4b08      	ldr	r3, [pc, #32]	@ (8004850 <Ethernet_Link_Periodic_Handle+0x30>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b63      	cmp	r3, #99	@ 0x63
 8004836:	d907      	bls.n	8004848 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8004838:	f7fd f908 	bl	8001a4c <HAL_GetTick>
 800483c:	4603      	mov	r3, r0
 800483e:	4a04      	ldr	r2, [pc, #16]	@ (8004850 <Ethernet_Link_Periodic_Handle+0x30>)
 8004840:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fafc 	bl	8004e40 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8004848:	bf00      	nop
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	20000898 	.word	0x20000898

08004854 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004858:	4804      	ldr	r0, [pc, #16]	@ (800486c <MX_LWIP_Process+0x18>)
 800485a:	f000 f97b 	bl	8004b54 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800485e:	f007 fcdb 	bl	800c218 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8004862:	4802      	ldr	r0, [pc, #8]	@ (800486c <MX_LWIP_Process+0x18>)
 8004864:	f7ff ffdc 	bl	8004820 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004868:	bf00      	nop
 800486a:	bd80      	pop	{r7, pc}
 800486c:	2000089c 	.word	0x2000089c

08004870 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <SCB_InvalidateDCache_by_Addr>:
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8004896:	2320      	movs	r3, #32
 8004898:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800489a:	f3bf 8f4f 	dsb	sy
}
 800489e:	bf00      	nop
    while (op_size > 0) {
 80048a0:	e00b      	b.n	80048ba <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80048a2:	4a0d      	ldr	r2, [pc, #52]	@ (80048d8 <SCB_InvalidateDCache_by_Addr+0x54>)
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4413      	add	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	dcf0      	bgt.n	80048a2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80048c0:	f3bf 8f4f 	dsb	sy
}
 80048c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80048c6:	f3bf 8f6f 	isb	sy
}
 80048ca:	bf00      	nop
}
 80048cc:	bf00      	nop
 80048ce:	371c      	adds	r7, #28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	e000ed00 	.word	0xe000ed00

080048dc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80048e4:	2300      	movs	r3, #0
 80048e6:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80048e8:	4b44      	ldr	r3, [pc, #272]	@ (80049fc <low_level_init+0x120>)
 80048ea:	4a45      	ldr	r2, [pc, #276]	@ (8004a00 <low_level_init+0x124>)
 80048ec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80048ee:	2300      	movs	r3, #0
 80048f0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80048f2:	2380      	movs	r3, #128	@ 0x80
 80048f4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80048f6:	23e1      	movs	r3, #225	@ 0xe1
 80048f8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80048fa:	2300      	movs	r3, #0
 80048fc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80048fe:	2300      	movs	r3, #0
 8004900:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004902:	2300      	movs	r3, #0
 8004904:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004906:	4a3d      	ldr	r2, [pc, #244]	@ (80049fc <low_level_init+0x120>)
 8004908:	f107 0308 	add.w	r3, r7, #8
 800490c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800490e:	4b3b      	ldr	r3, [pc, #236]	@ (80049fc <low_level_init+0x120>)
 8004910:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004914:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004916:	4b39      	ldr	r3, [pc, #228]	@ (80049fc <low_level_init+0x120>)
 8004918:	4a3a      	ldr	r2, [pc, #232]	@ (8004a04 <low_level_init+0x128>)
 800491a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800491c:	4b37      	ldr	r3, [pc, #220]	@ (80049fc <low_level_init+0x120>)
 800491e:	4a3a      	ldr	r2, [pc, #232]	@ (8004a08 <low_level_init+0x12c>)
 8004920:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004922:	4b36      	ldr	r3, [pc, #216]	@ (80049fc <low_level_init+0x120>)
 8004924:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004928:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800492a:	4834      	ldr	r0, [pc, #208]	@ (80049fc <low_level_init+0x120>)
 800492c:	f7fd f9d0 	bl	8001cd0 <HAL_ETH_Init>
 8004930:	4603      	mov	r3, r0
 8004932:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004934:	2238      	movs	r2, #56	@ 0x38
 8004936:	2100      	movs	r1, #0
 8004938:	4834      	ldr	r0, [pc, #208]	@ (8004a0c <low_level_init+0x130>)
 800493a:	f00a fd88 	bl	800f44e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800493e:	4b33      	ldr	r3, [pc, #204]	@ (8004a0c <low_level_init+0x130>)
 8004940:	2221      	movs	r2, #33	@ 0x21
 8004942:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004944:	4b31      	ldr	r3, [pc, #196]	@ (8004a0c <low_level_init+0x130>)
 8004946:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800494a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800494c:	4b2f      	ldr	r3, [pc, #188]	@ (8004a0c <low_level_init+0x130>)
 800494e:	2200      	movs	r2, #0
 8004950:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004952:	482f      	ldr	r0, [pc, #188]	@ (8004a10 <low_level_init+0x134>)
 8004954:	f000 ff54 	bl	8005800 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2206      	movs	r2, #6
 800495c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004960:	4b26      	ldr	r3, [pc, #152]	@ (80049fc <low_level_init+0x120>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	781a      	ldrb	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800496c:	4b23      	ldr	r3, [pc, #140]	@ (80049fc <low_level_init+0x120>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	785a      	ldrb	r2, [r3, #1]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004978:	4b20      	ldr	r3, [pc, #128]	@ (80049fc <low_level_init+0x120>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	789a      	ldrb	r2, [r3, #2]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004984:	4b1d      	ldr	r3, [pc, #116]	@ (80049fc <low_level_init+0x120>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	78da      	ldrb	r2, [r3, #3]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004990:	4b1a      	ldr	r3, [pc, #104]	@ (80049fc <low_level_init+0x120>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	791a      	ldrb	r2, [r3, #4]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800499c:	4b17      	ldr	r3, [pc, #92]	@ (80049fc <low_level_init+0x120>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	795a      	ldrb	r2, [r3, #5]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80049ae:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80049b6:	f043 030a 	orr.w	r3, r3, #10
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80049c2:	4914      	ldr	r1, [pc, #80]	@ (8004a14 <low_level_init+0x138>)
 80049c4:	4814      	ldr	r0, [pc, #80]	@ (8004a18 <low_level_init+0x13c>)
 80049c6:	f7fc fe8e 	bl	80016e6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80049ca:	4813      	ldr	r0, [pc, #76]	@ (8004a18 <low_level_init+0x13c>)
 80049cc:	f7fc febd 	bl	800174a <LAN8742_Init>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d006      	beq.n	80049e4 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f001 fade 	bl	8005f98 <netif_set_link_down>
    netif_set_down(netif);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f001 fa75 	bl	8005ecc <netif_set_down>
 80049e2:	e008      	b.n	80049f6 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d103      	bne.n	80049f2 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fa28 	bl	8004e40 <ethernet_link_check_state>
 80049f0:	e001      	b.n	80049f6 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 80049f2:	f7fc fd07 	bl	8001404 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	20005274 	.word	0x20005274
 8004a00:	40028000 	.word	0x40028000
 8004a04:	20000780 	.word	0x20000780
 8004a08:	200006e0 	.word	0x200006e0
 8004a0c:	20005324 	.word	0x20005324
 8004a10:	08016678 	.word	0x08016678
 8004a14:	2000000c 	.word	0x2000000c
 8004a18:	2000535c 	.word	0x2000535c

08004a1c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b092      	sub	sp, #72	@ 0x48
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004a34:	f107 030c 	add.w	r3, r7, #12
 8004a38:	2230      	movs	r2, #48	@ 0x30
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f00a fd06 	bl	800f44e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004a42:	f107 030c 	add.w	r3, r7, #12
 8004a46:	2230      	movs	r2, #48	@ 0x30
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f00a fcff 	bl	800f44e <memset>

  for(q = p; q != NULL; q = q->next)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a54:	e045      	b.n	8004ae2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004a56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d902      	bls.n	8004a62 <low_level_output+0x46>
      return ERR_IF;
 8004a5c:	f06f 030b 	mvn.w	r3, #11
 8004a60:	e055      	b.n	8004b0e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8004a62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a64:	6859      	ldr	r1, [r3, #4]
 8004a66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a68:	4613      	mov	r3, r2
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	4413      	add	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	3348      	adds	r3, #72	@ 0x48
 8004a72:	443b      	add	r3, r7
 8004a74:	3b3c      	subs	r3, #60	@ 0x3c
 8004a76:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004a78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a7a:	895b      	ldrh	r3, [r3, #10]
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a80:	4613      	mov	r3, r2
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	4413      	add	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	3348      	adds	r3, #72	@ 0x48
 8004a8a:	443b      	add	r3, r7
 8004a8c:	3b38      	subs	r3, #56	@ 0x38
 8004a8e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d011      	beq.n	8004aba <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004a96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a98:	1e5a      	subs	r2, r3, #1
 8004a9a:	f107 000c 	add.w	r0, r7, #12
 8004a9e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	440b      	add	r3, r1
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	18c1      	adds	r1, r0, r3
 8004aaa:	4613      	mov	r3, r2
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	4413      	add	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	3348      	adds	r3, #72	@ 0x48
 8004ab4:	443b      	add	r3, r7
 8004ab6:	3b34      	subs	r3, #52	@ 0x34
 8004ab8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004aba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d109      	bne.n	8004ad6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004ac2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	4413      	add	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	3348      	adds	r3, #72	@ 0x48
 8004ace:	443b      	add	r3, r7
 8004ad0:	3b34      	subs	r3, #52	@ 0x34
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004ad6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ad8:	3301      	adds	r3, #1
 8004ada:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1b6      	bne.n	8004a56 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	891b      	ldrh	r3, [r3, #8]
 8004aec:	461a      	mov	r2, r3
 8004aee:	4b0a      	ldr	r3, [pc, #40]	@ (8004b18 <low_level_output+0xfc>)
 8004af0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004af2:	4a09      	ldr	r2, [pc, #36]	@ (8004b18 <low_level_output+0xfc>)
 8004af4:	f107 030c 	add.w	r3, r7, #12
 8004af8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004afa:	4a07      	ldr	r2, [pc, #28]	@ (8004b18 <low_level_output+0xfc>)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004b00:	2214      	movs	r2, #20
 8004b02:	4905      	ldr	r1, [pc, #20]	@ (8004b18 <low_level_output+0xfc>)
 8004b04:	4805      	ldr	r0, [pc, #20]	@ (8004b1c <low_level_output+0x100>)
 8004b06:	f7fd fa17 	bl	8001f38 <HAL_ETH_Transmit>

  return errval;
 8004b0a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3748      	adds	r7, #72	@ 0x48
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	20005324 	.word	0x20005324
 8004b1c:	20005274 	.word	0x20005274

08004b20 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004b2c:	4b07      	ldr	r3, [pc, #28]	@ (8004b4c <low_level_input+0x2c>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d105      	bne.n	8004b40 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004b34:	f107 030c 	add.w	r3, r7, #12
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4805      	ldr	r0, [pc, #20]	@ (8004b50 <low_level_input+0x30>)
 8004b3c:	f7fd fa90 	bl	8002060 <HAL_ETH_ReadData>
  }

  return p;
 8004b40:	68fb      	ldr	r3, [r7, #12]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	20005270 	.word	0x20005270
 8004b50:	20005274 	.word	0x20005274

08004b54 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff ffdd 	bl	8004b20 <low_level_input>
 8004b66:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	4798      	blx	r3
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f001 fdba 	bl	80066f8 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1ea      	bne.n	8004b60 <ethernetif_input+0xc>
}
 8004b8a:	bf00      	nop
 8004b8c:	bf00      	nop
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <ethernetif_init+0x1c>
 8004ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8004bdc <ethernetif_init+0x48>)
 8004ba4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8004ba8:	490d      	ldr	r1, [pc, #52]	@ (8004be0 <ethernetif_init+0x4c>)
 8004baa:	480e      	ldr	r0, [pc, #56]	@ (8004be4 <ethernetif_init+0x50>)
 8004bac:	f00a fb82 	bl	800f2b4 <printf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2273      	movs	r2, #115	@ 0x73
 8004bb4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2274      	movs	r2, #116	@ 0x74
 8004bbc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a09      	ldr	r2, [pc, #36]	@ (8004be8 <ethernetif_init+0x54>)
 8004bc4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a08      	ldr	r2, [pc, #32]	@ (8004bec <ethernetif_init+0x58>)
 8004bca:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff fe85 	bl	80048dc <low_level_init>

  return ERR_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	08013c88 	.word	0x08013c88
 8004be0:	08013ca4 	.word	0x08013ca4
 8004be4:	08013cb4 	.word	0x08013cb4
 8004be8:	0800d405 	.word	0x0800d405
 8004bec:	08004a1d 	.word	0x08004a1d

08004bf0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004bfc:	68f9      	ldr	r1, [r7, #12]
 8004bfe:	4807      	ldr	r0, [pc, #28]	@ (8004c1c <pbuf_free_custom+0x2c>)
 8004c00:	f000 fee0 	bl	80059c4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004c04:	4b06      	ldr	r3, [pc, #24]	@ (8004c20 <pbuf_free_custom+0x30>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d102      	bne.n	8004c12 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004c0c:	4b04      	ldr	r3, [pc, #16]	@ (8004c20 <pbuf_free_custom+0x30>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	701a      	strb	r2, [r3, #0]
  }
}
 8004c12:	bf00      	nop
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	08016678 	.word	0x08016678
 8004c20:	20005270 	.word	0x20005270

08004c24 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004c28:	f7fc ff10 	bl	8001a4c <HAL_GetTick>
 8004c2c:	4603      	mov	r3, r0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	bd80      	pop	{r7, pc}
	...

08004c34 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08e      	sub	sp, #56	@ 0x38
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	605a      	str	r2, [r3, #4]
 8004c46:	609a      	str	r2, [r3, #8]
 8004c48:	60da      	str	r2, [r3, #12]
 8004c4a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a4e      	ldr	r2, [pc, #312]	@ (8004d8c <HAL_ETH_MspInit+0x158>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	f040 8096 	bne.w	8004d84 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004c58:	4b4d      	ldr	r3, [pc, #308]	@ (8004d90 <HAL_ETH_MspInit+0x15c>)
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5c:	4a4c      	ldr	r2, [pc, #304]	@ (8004d90 <HAL_ETH_MspInit+0x15c>)
 8004c5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c62:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c64:	4b4a      	ldr	r3, [pc, #296]	@ (8004d90 <HAL_ETH_MspInit+0x15c>)
 8004c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c6c:	623b      	str	r3, [r7, #32]
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	4b47      	ldr	r3, [pc, #284]	@ (8004d90 <HAL_ETH_MspInit+0x15c>)
 8004c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c74:	4a46      	ldr	r2, [pc, #280]	@ (8004d90 <HAL_ETH_MspInit+0x15c>)
 8004c76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c7c:	4b44      	ldr	r3, [pc, #272]	@ (8004d90 <HAL_ETH_MspInit+0x15c>)
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c84:	61fb      	str	r3, [r7, #28]
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	4b41      	ldr	r3, [pc, #260]	@ (8004d90 <HAL_ETH_MspInit+0x15c>)
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8c:	4a40      	ldr	r2, [pc, #256]	@ (8004d90 <HAL_ETH_MspInit+0x15c>)
 8004c8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004c92:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c94:	4b3e      	ldr	r3, [pc, #248]	@ (8004d90 <HAL_ETH_MspInit+0x15c>)
 8004c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ca0:	4b3b      	ldr	r3, [pc, #236]	@ (8004d90 <HAL_ETH_MspInit+0x15c>)
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca4:	4a3a      	ldr	r2, [pc, #232]	@ (8004d90 <HAL_ETH_MspInit+0x15c>)
 8004ca6:	f043 0304 	orr.w	r3, r3, #4
 8004caa:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cac:	4b38      	ldr	r3, [pc, #224]	@ (8004d90 <HAL_ETH_MspInit+0x15c>)
 8004cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cb8:	4b35      	ldr	r3, [pc, #212]	@ (8004d90 <HAL_ETH_MspInit+0x15c>)
 8004cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbc:	4a34      	ldr	r2, [pc, #208]	@ (8004d90 <HAL_ETH_MspInit+0x15c>)
 8004cbe:	f043 0301 	orr.w	r3, r3, #1
 8004cc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cc4:	4b32      	ldr	r3, [pc, #200]	@ (8004d90 <HAL_ETH_MspInit+0x15c>)
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cd0:	4b2f      	ldr	r3, [pc, #188]	@ (8004d90 <HAL_ETH_MspInit+0x15c>)
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd4:	4a2e      	ldr	r2, [pc, #184]	@ (8004d90 <HAL_ETH_MspInit+0x15c>)
 8004cd6:	f043 0302 	orr.w	r3, r3, #2
 8004cda:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8004d90 <HAL_ETH_MspInit+0x15c>)
 8004cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004ce8:	4b29      	ldr	r3, [pc, #164]	@ (8004d90 <HAL_ETH_MspInit+0x15c>)
 8004cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cec:	4a28      	ldr	r2, [pc, #160]	@ (8004d90 <HAL_ETH_MspInit+0x15c>)
 8004cee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cf4:	4b26      	ldr	r3, [pc, #152]	@ (8004d90 <HAL_ETH_MspInit+0x15c>)
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004d00:	2332      	movs	r3, #50	@ 0x32
 8004d02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d04:	2302      	movs	r3, #2
 8004d06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d10:	230b      	movs	r3, #11
 8004d12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d18:	4619      	mov	r1, r3
 8004d1a:	481e      	ldr	r0, [pc, #120]	@ (8004d94 <HAL_ETH_MspInit+0x160>)
 8004d1c:	f7fe f8ca 	bl	8002eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004d20:	2386      	movs	r3, #134	@ 0x86
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d24:	2302      	movs	r3, #2
 8004d26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d30:	230b      	movs	r3, #11
 8004d32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4817      	ldr	r0, [pc, #92]	@ (8004d98 <HAL_ETH_MspInit+0x164>)
 8004d3c:	f7fe f8ba 	bl	8002eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004d40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004d44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d46:	2302      	movs	r3, #2
 8004d48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d52:	230b      	movs	r3, #11
 8004d54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	480f      	ldr	r0, [pc, #60]	@ (8004d9c <HAL_ETH_MspInit+0x168>)
 8004d5e:	f7fe f8a9 	bl	8002eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004d62:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8004d66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d70:	2303      	movs	r3, #3
 8004d72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d74:	230b      	movs	r3, #11
 8004d76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004d78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4808      	ldr	r0, [pc, #32]	@ (8004da0 <HAL_ETH_MspInit+0x16c>)
 8004d80:	f7fe f898 	bl	8002eb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004d84:	bf00      	nop
 8004d86:	3738      	adds	r7, #56	@ 0x38
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40028000 	.word	0x40028000
 8004d90:	40023800 	.word	0x40023800
 8004d94:	40020800 	.word	0x40020800
 8004d98:	40020000 	.word	0x40020000
 8004d9c:	40020400 	.word	0x40020400
 8004da0:	40021800 	.word	0x40021800

08004da4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004da8:	4802      	ldr	r0, [pc, #8]	@ (8004db4 <ETH_PHY_IO_Init+0x10>)
 8004daa:	f7fd fc29 	bl	8002600 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20005274 	.word	0x20005274

08004db8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
  return 0;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	68f9      	ldr	r1, [r7, #12]
 8004dda:	4807      	ldr	r0, [pc, #28]	@ (8004df8 <ETH_PHY_IO_ReadReg+0x30>)
 8004ddc:	f7fd fa78 	bl	80022d0 <HAL_ETH_ReadPHYRegister>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004de6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004dea:	e000      	b.n	8004dee <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20005274 	.word	0x20005274

08004dfc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	68f9      	ldr	r1, [r7, #12]
 8004e0e:	4807      	ldr	r0, [pc, #28]	@ (8004e2c <ETH_PHY_IO_WriteReg+0x30>)
 8004e10:	f7fd faa9 	bl	8002366 <HAL_ETH_WritePHYRegister>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004e1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e1e:	e000      	b.n	8004e22 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20005274 	.word	0x20005274

08004e30 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004e34:	f7fc fe0a 	bl	8001a4c <HAL_GetTick>
 8004e38:	4603      	mov	r3, r0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b0a0      	sub	sp, #128	@ 0x80
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004e48:	f107 030c 	add.w	r3, r7, #12
 8004e4c:	2264      	movs	r2, #100	@ 0x64
 8004e4e:	2100      	movs	r1, #0
 8004e50:	4618      	mov	r0, r3
 8004e52:	f00a fafc 	bl	800f44e <memset>
  int32_t PHYLinkState = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e5e:	2300      	movs	r3, #0
 8004e60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e62:	2300      	movs	r3, #0
 8004e64:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004e66:	483a      	ldr	r0, [pc, #232]	@ (8004f50 <ethernet_link_check_state+0x110>)
 8004e68:	f7fc fd17 	bl	800189a <LAN8742_GetLinkState>
 8004e6c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004e74:	089b      	lsrs	r3, r3, #2
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00c      	beq.n	8004e9a <ethernet_link_check_state+0x5a>
 8004e80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	dc09      	bgt.n	8004e9a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8004e86:	4833      	ldr	r0, [pc, #204]	@ (8004f54 <ethernet_link_check_state+0x114>)
 8004e88:	f7fc fffd 	bl	8001e86 <HAL_ETH_Stop>
    netif_set_down(netif);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f001 f81d 	bl	8005ecc <netif_set_down>
    netif_set_link_down(netif);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f001 f880 	bl	8005f98 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004e98:	e055      	b.n	8004f46 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d14e      	bne.n	8004f46 <ethernet_link_check_state+0x106>
 8004ea8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	dd4b      	ble.n	8004f46 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004eae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004eb0:	3b02      	subs	r3, #2
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d82a      	bhi.n	8004f0c <ethernet_link_check_state+0xcc>
 8004eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ebc <ethernet_link_check_state+0x7c>)
 8004eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebc:	08004ecd 	.word	0x08004ecd
 8004ec0:	08004edf 	.word	0x08004edf
 8004ec4:	08004eef 	.word	0x08004eef
 8004ec8:	08004eff 	.word	0x08004eff
      duplex = ETH_FULLDUPLEX_MODE;
 8004ecc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ed0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004ed2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004ed6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004edc:	e017      	b.n	8004f0e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004ee2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004ee6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004eec:	e00f      	b.n	8004f0e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004eee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ef2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004efc:	e007      	b.n	8004f0e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004efe:	2300      	movs	r3, #0
 8004f00:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004f02:	2300      	movs	r3, #0
 8004f04:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004f06:	2301      	movs	r3, #1
 8004f08:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004f0a:	e000      	b.n	8004f0e <ethernet_link_check_state+0xce>
      break;
 8004f0c:	bf00      	nop
    if(linkchanged)
 8004f0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d018      	beq.n	8004f46 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004f14:	f107 030c 	add.w	r3, r7, #12
 8004f18:	4619      	mov	r1, r3
 8004f1a:	480e      	ldr	r0, [pc, #56]	@ (8004f54 <ethernet_link_check_state+0x114>)
 8004f1c:	f7fd fa6c 	bl	80023f8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004f20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f22:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8004f24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f26:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004f28:	f107 030c 	add.w	r3, r7, #12
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4809      	ldr	r0, [pc, #36]	@ (8004f54 <ethernet_link_check_state+0x114>)
 8004f30:	f7fd fb4c 	bl	80025cc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004f34:	4807      	ldr	r0, [pc, #28]	@ (8004f54 <ethernet_link_check_state+0x114>)
 8004f36:	f7fc ff47 	bl	8001dc8 <HAL_ETH_Start>
      netif_set_up(netif);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 ff5a 	bl	8005df4 <netif_set_up>
      netif_set_link_up(netif);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 fff5 	bl	8005f30 <netif_set_link_up>
}
 8004f46:	bf00      	nop
 8004f48:	3780      	adds	r7, #128	@ 0x80
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	2000535c 	.word	0x2000535c
 8004f54:	20005274 	.word	0x20005274

08004f58 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004f60:	4812      	ldr	r0, [pc, #72]	@ (8004fac <HAL_ETH_RxAllocateCallback+0x54>)
 8004f62:	f000 fcc1 	bl	80058e8 <memp_malloc_pool>
 8004f66:	60f8      	str	r0, [r7, #12]
  if (p)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d014      	beq.n	8004f98 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f103 0220 	add.w	r2, r3, #32
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4a0d      	ldr	r2, [pc, #52]	@ (8004fb0 <HAL_ETH_RxAllocateCallback+0x58>)
 8004f7c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004f86:	9201      	str	r2, [sp, #4]
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2241      	movs	r2, #65	@ 0x41
 8004f8e:	2100      	movs	r1, #0
 8004f90:	2000      	movs	r0, #0
 8004f92:	f001 f9f7 	bl	8006384 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004f96:	e005      	b.n	8004fa4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004f98:	4b06      	ldr	r3, [pc, #24]	@ (8004fb4 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]
}
 8004fa4:	bf00      	nop
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	08016678 	.word	0x08016678
 8004fb0:	08004bf1 	.word	0x08004bf1
 8004fb4:	20005270 	.word	0x20005270

08004fb8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
 8004fc4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3b20      	subs	r3, #32
 8004fd6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	887a      	ldrh	r2, [r7, #2]
 8004fe8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d103      	bne.n	8004ffa <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	e003      	b.n	8005002 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69fa      	ldr	r2, [r7, #28]
 8005000:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	61fb      	str	r3, [r7, #28]
 800500e:	e009      	b.n	8005024 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	891a      	ldrh	r2, [r3, #8]
 8005014:	887b      	ldrh	r3, [r7, #2]
 8005016:	4413      	add	r3, r2
 8005018:	b29a      	uxth	r2, r3
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	61fb      	str	r3, [r7, #28]
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f2      	bne.n	8005010 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800502a:	887b      	ldrh	r3, [r7, #2]
 800502c:	4619      	mov	r1, r3
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff fc28 	bl	8004884 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005034:	bf00      	nop
 8005036:	3720      	adds	r7, #32
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	4603      	mov	r3, r0
 8005044:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	b21a      	sxth	r2, r3
 800504c:	88fb      	ldrh	r3, [r7, #6]
 800504e:	0a1b      	lsrs	r3, r3, #8
 8005050:	b29b      	uxth	r3, r3
 8005052:	b21b      	sxth	r3, r3
 8005054:	4313      	orrs	r3, r2
 8005056:	b21b      	sxth	r3, r3
 8005058:	b29b      	uxth	r3, r3
}
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	061a      	lsls	r2, r3, #24
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	021b      	lsls	r3, r3, #8
 8005076:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	0a1b      	lsrs	r3, r3, #8
 8005080:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005084:	431a      	orrs	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	0e1b      	lsrs	r3, r3, #24
 800508a:	4313      	orrs	r3, r2
}
 800508c:	4618      	mov	r0, r3
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800509e:	2300      	movs	r3, #0
 80050a0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80050a2:	f000 f8d5 	bl	8005250 <mem_init>
  memp_init();
 80050a6:	f000 fbdb 	bl	8005860 <memp_init>
  pbuf_init();
  netif_init();
 80050aa:	f000 fcd9 	bl	8005a60 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80050ae:	f007 f8f5 	bl	800c29c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80050b2:	f001 fe51 	bl	8006d58 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80050b6:	f007 f867 	bl	800c188 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80050ba:	bf00      	nop
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80050ce:	4b05      	ldr	r3, [pc, #20]	@ (80050e4 <ptr_to_mem+0x20>)
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	88fb      	ldrh	r3, [r7, #6]
 80050d4:	4413      	add	r3, r2
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	200059e8 	.word	0x200059e8

080050e8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80050f0:	4b05      	ldr	r3, [pc, #20]	@ (8005108 <mem_to_ptr+0x20>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	b29b      	uxth	r3, r3
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	200059e8 	.word	0x200059e8

0800510c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800510c:	b590      	push	{r4, r7, lr}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005114:	4b45      	ldr	r3, [pc, #276]	@ (800522c <plug_holes+0x120>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	429a      	cmp	r2, r3
 800511c:	d206      	bcs.n	800512c <plug_holes+0x20>
 800511e:	4b44      	ldr	r3, [pc, #272]	@ (8005230 <plug_holes+0x124>)
 8005120:	f240 12df 	movw	r2, #479	@ 0x1df
 8005124:	4943      	ldr	r1, [pc, #268]	@ (8005234 <plug_holes+0x128>)
 8005126:	4844      	ldr	r0, [pc, #272]	@ (8005238 <plug_holes+0x12c>)
 8005128:	f00a f8c4 	bl	800f2b4 <printf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800512c:	4b43      	ldr	r3, [pc, #268]	@ (800523c <plug_holes+0x130>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	429a      	cmp	r2, r3
 8005134:	d306      	bcc.n	8005144 <plug_holes+0x38>
 8005136:	4b3e      	ldr	r3, [pc, #248]	@ (8005230 <plug_holes+0x124>)
 8005138:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800513c:	4940      	ldr	r1, [pc, #256]	@ (8005240 <plug_holes+0x134>)
 800513e:	483e      	ldr	r0, [pc, #248]	@ (8005238 <plug_holes+0x12c>)
 8005140:	f00a f8b8 	bl	800f2b4 <printf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	791b      	ldrb	r3, [r3, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d006      	beq.n	800515a <plug_holes+0x4e>
 800514c:	4b38      	ldr	r3, [pc, #224]	@ (8005230 <plug_holes+0x124>)
 800514e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8005152:	493c      	ldr	r1, [pc, #240]	@ (8005244 <plug_holes+0x138>)
 8005154:	4838      	ldr	r0, [pc, #224]	@ (8005238 <plug_holes+0x12c>)
 8005156:	f00a f8ad 	bl	800f2b4 <printf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005162:	d906      	bls.n	8005172 <plug_holes+0x66>
 8005164:	4b32      	ldr	r3, [pc, #200]	@ (8005230 <plug_holes+0x124>)
 8005166:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800516a:	4937      	ldr	r1, [pc, #220]	@ (8005248 <plug_holes+0x13c>)
 800516c:	4832      	ldr	r0, [pc, #200]	@ (8005238 <plug_holes+0x12c>)
 800516e:	f00a f8a1 	bl	800f2b4 <printf>

  nmem = ptr_to_mem(mem->next);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f7ff ffa4 	bl	80050c4 <ptr_to_mem>
 800517c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	429a      	cmp	r2, r3
 8005184:	d024      	beq.n	80051d0 <plug_holes+0xc4>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	791b      	ldrb	r3, [r3, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d120      	bne.n	80051d0 <plug_holes+0xc4>
 800518e:	4b2b      	ldr	r3, [pc, #172]	@ (800523c <plug_holes+0x130>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	429a      	cmp	r2, r3
 8005196:	d01b      	beq.n	80051d0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005198:	4b2c      	ldr	r3, [pc, #176]	@ (800524c <plug_holes+0x140>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d102      	bne.n	80051a8 <plug_holes+0x9c>
      lfree = mem;
 80051a2:	4a2a      	ldr	r2, [pc, #168]	@ (800524c <plug_holes+0x140>)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	881a      	ldrh	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80051b8:	d00a      	beq.n	80051d0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f7ff ff80 	bl	80050c4 <ptr_to_mem>
 80051c4:	4604      	mov	r4, r0
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7ff ff8e 	bl	80050e8 <mem_to_ptr>
 80051cc:	4603      	mov	r3, r0
 80051ce:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	885b      	ldrh	r3, [r3, #2]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff ff75 	bl	80050c4 <ptr_to_mem>
 80051da:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d01f      	beq.n	8005224 <plug_holes+0x118>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	791b      	ldrb	r3, [r3, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d11b      	bne.n	8005224 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80051ec:	4b17      	ldr	r3, [pc, #92]	@ (800524c <plug_holes+0x140>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d102      	bne.n	80051fc <plug_holes+0xf0>
      lfree = pmem;
 80051f6:	4a15      	ldr	r2, [pc, #84]	@ (800524c <plug_holes+0x140>)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	881a      	ldrh	r2, [r3, #0]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800520c:	d00a      	beq.n	8005224 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	4618      	mov	r0, r3
 8005214:	f7ff ff56 	bl	80050c4 <ptr_to_mem>
 8005218:	4604      	mov	r4, r0
 800521a:	68b8      	ldr	r0, [r7, #8]
 800521c:	f7ff ff64 	bl	80050e8 <mem_to_ptr>
 8005220:	4603      	mov	r3, r0
 8005222:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005224:	bf00      	nop
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	bd90      	pop	{r4, r7, pc}
 800522c:	200059e8 	.word	0x200059e8
 8005230:	08013cdc 	.word	0x08013cdc
 8005234:	08013d0c 	.word	0x08013d0c
 8005238:	08013d24 	.word	0x08013d24
 800523c:	200059ec 	.word	0x200059ec
 8005240:	08013d4c 	.word	0x08013d4c
 8005244:	08013d68 	.word	0x08013d68
 8005248:	08013d84 	.word	0x08013d84
 800524c:	200059f0 	.word	0x200059f0

08005250 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005256:	4b18      	ldr	r3, [pc, #96]	@ (80052b8 <mem_init+0x68>)
 8005258:	3303      	adds	r3, #3
 800525a:	f023 0303 	bic.w	r3, r3, #3
 800525e:	461a      	mov	r2, r3
 8005260:	4b16      	ldr	r3, [pc, #88]	@ (80052bc <mem_init+0x6c>)
 8005262:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005264:	4b15      	ldr	r3, [pc, #84]	@ (80052bc <mem_init+0x6c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8005270:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800527e:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8005282:	f7ff ff1f 	bl	80050c4 <ptr_to_mem>
 8005286:	4603      	mov	r3, r0
 8005288:	4a0d      	ldr	r2, [pc, #52]	@ (80052c0 <mem_init+0x70>)
 800528a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800528c:	4b0c      	ldr	r3, [pc, #48]	@ (80052c0 <mem_init+0x70>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2201      	movs	r2, #1
 8005292:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005294:	4b0a      	ldr	r3, [pc, #40]	@ (80052c0 <mem_init+0x70>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800529c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800529e:	4b08      	ldr	r3, [pc, #32]	@ (80052c0 <mem_init+0x70>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80052a6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80052a8:	4b04      	ldr	r3, [pc, #16]	@ (80052bc <mem_init+0x6c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a05      	ldr	r2, [pc, #20]	@ (80052c4 <mem_init+0x74>)
 80052ae:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80052b0:	bf00      	nop
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	20005394 	.word	0x20005394
 80052bc:	200059e8 	.word	0x200059e8
 80052c0:	200059ec 	.word	0x200059ec
 80052c4:	200059f0 	.word	0x200059f0

080052c8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff ff09 	bl	80050e8 <mem_to_ptr>
 80052d6:	4603      	mov	r3, r0
 80052d8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff fef0 	bl	80050c4 <ptr_to_mem>
 80052e4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	885b      	ldrh	r3, [r3, #2]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7ff feea 	bl	80050c4 <ptr_to_mem>
 80052f0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80052fa:	d818      	bhi.n	800532e <mem_link_valid+0x66>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	885b      	ldrh	r3, [r3, #2]
 8005300:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005304:	d813      	bhi.n	800532e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800530a:	8afa      	ldrh	r2, [r7, #22]
 800530c:	429a      	cmp	r2, r3
 800530e:	d004      	beq.n	800531a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	8afa      	ldrh	r2, [r7, #22]
 8005316:	429a      	cmp	r2, r3
 8005318:	d109      	bne.n	800532e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800531a:	4b08      	ldr	r3, [pc, #32]	@ (800533c <mem_link_valid+0x74>)
 800531c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	429a      	cmp	r2, r3
 8005322:	d006      	beq.n	8005332 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	885b      	ldrh	r3, [r3, #2]
 8005328:	8afa      	ldrh	r2, [r7, #22]
 800532a:	429a      	cmp	r2, r3
 800532c:	d001      	beq.n	8005332 <mem_link_valid+0x6a>
    return 0;
 800532e:	2300      	movs	r3, #0
 8005330:	e000      	b.n	8005334 <mem_link_valid+0x6c>
  }
  return 1;
 8005332:	2301      	movs	r3, #1
}
 8005334:	4618      	mov	r0, r3
 8005336:	3718      	adds	r7, #24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	200059ec 	.word	0x200059ec

08005340 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d04c      	beq.n	80053e8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f003 0303 	and.w	r3, r3, #3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d007      	beq.n	8005368 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005358:	4b25      	ldr	r3, [pc, #148]	@ (80053f0 <mem_free+0xb0>)
 800535a:	f240 2273 	movw	r2, #627	@ 0x273
 800535e:	4925      	ldr	r1, [pc, #148]	@ (80053f4 <mem_free+0xb4>)
 8005360:	4825      	ldr	r0, [pc, #148]	@ (80053f8 <mem_free+0xb8>)
 8005362:	f009 ffa7 	bl	800f2b4 <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005366:	e040      	b.n	80053ea <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3b08      	subs	r3, #8
 800536c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800536e:	4b23      	ldr	r3, [pc, #140]	@ (80053fc <mem_free+0xbc>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	429a      	cmp	r2, r3
 8005376:	d306      	bcc.n	8005386 <mem_free+0x46>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f103 020c 	add.w	r2, r3, #12
 800537e:	4b20      	ldr	r3, [pc, #128]	@ (8005400 <mem_free+0xc0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d907      	bls.n	8005396 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005386:	4b1a      	ldr	r3, [pc, #104]	@ (80053f0 <mem_free+0xb0>)
 8005388:	f240 227f 	movw	r2, #639	@ 0x27f
 800538c:	491d      	ldr	r1, [pc, #116]	@ (8005404 <mem_free+0xc4>)
 800538e:	481a      	ldr	r0, [pc, #104]	@ (80053f8 <mem_free+0xb8>)
 8005390:	f009 ff90 	bl	800f2b4 <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005394:	e029      	b.n	80053ea <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	791b      	ldrb	r3, [r3, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d107      	bne.n	80053ae <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800539e:	4b14      	ldr	r3, [pc, #80]	@ (80053f0 <mem_free+0xb0>)
 80053a0:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80053a4:	4918      	ldr	r1, [pc, #96]	@ (8005408 <mem_free+0xc8>)
 80053a6:	4814      	ldr	r0, [pc, #80]	@ (80053f8 <mem_free+0xb8>)
 80053a8:	f009 ff84 	bl	800f2b4 <printf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80053ac:	e01d      	b.n	80053ea <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f7ff ff8a 	bl	80052c8 <mem_link_valid>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d107      	bne.n	80053ca <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80053ba:	4b0d      	ldr	r3, [pc, #52]	@ (80053f0 <mem_free+0xb0>)
 80053bc:	f240 2295 	movw	r2, #661	@ 0x295
 80053c0:	4912      	ldr	r1, [pc, #72]	@ (800540c <mem_free+0xcc>)
 80053c2:	480d      	ldr	r0, [pc, #52]	@ (80053f8 <mem_free+0xb8>)
 80053c4:	f009 ff76 	bl	800f2b4 <printf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80053c8:	e00f      	b.n	80053ea <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80053d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005410 <mem_free+0xd0>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d202      	bcs.n	80053e0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80053da:	4a0d      	ldr	r2, [pc, #52]	@ (8005410 <mem_free+0xd0>)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f7ff fe93 	bl	800510c <plug_holes>
 80053e6:	e000      	b.n	80053ea <mem_free+0xaa>
    return;
 80053e8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	08013cdc 	.word	0x08013cdc
 80053f4:	08013db0 	.word	0x08013db0
 80053f8:	08013d24 	.word	0x08013d24
 80053fc:	200059e8 	.word	0x200059e8
 8005400:	200059ec 	.word	0x200059ec
 8005404:	08013dd4 	.word	0x08013dd4
 8005408:	08013df0 	.word	0x08013df0
 800540c:	08013e18 	.word	0x08013e18
 8005410:	200059f0 	.word	0x200059f0

08005414 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	460b      	mov	r3, r1
 800541e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005420:	887b      	ldrh	r3, [r7, #2]
 8005422:	3303      	adds	r3, #3
 8005424:	b29b      	uxth	r3, r3
 8005426:	f023 0303 	bic.w	r3, r3, #3
 800542a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800542c:	8bfb      	ldrh	r3, [r7, #30]
 800542e:	2b0b      	cmp	r3, #11
 8005430:	d801      	bhi.n	8005436 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005432:	230c      	movs	r3, #12
 8005434:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005436:	8bfb      	ldrh	r3, [r7, #30]
 8005438:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800543c:	d803      	bhi.n	8005446 <mem_trim+0x32>
 800543e:	8bfa      	ldrh	r2, [r7, #30]
 8005440:	887b      	ldrh	r3, [r7, #2]
 8005442:	429a      	cmp	r2, r3
 8005444:	d201      	bcs.n	800544a <mem_trim+0x36>
    return NULL;
 8005446:	2300      	movs	r3, #0
 8005448:	e0cc      	b.n	80055e4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800544a:	4b68      	ldr	r3, [pc, #416]	@ (80055ec <mem_trim+0x1d8>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	429a      	cmp	r2, r3
 8005452:	d304      	bcc.n	800545e <mem_trim+0x4a>
 8005454:	4b66      	ldr	r3, [pc, #408]	@ (80055f0 <mem_trim+0x1dc>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	429a      	cmp	r2, r3
 800545c:	d306      	bcc.n	800546c <mem_trim+0x58>
 800545e:	4b65      	ldr	r3, [pc, #404]	@ (80055f4 <mem_trim+0x1e0>)
 8005460:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8005464:	4964      	ldr	r1, [pc, #400]	@ (80055f8 <mem_trim+0x1e4>)
 8005466:	4865      	ldr	r0, [pc, #404]	@ (80055fc <mem_trim+0x1e8>)
 8005468:	f009 ff24 	bl	800f2b4 <printf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800546c:	4b5f      	ldr	r3, [pc, #380]	@ (80055ec <mem_trim+0x1d8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	429a      	cmp	r2, r3
 8005474:	d304      	bcc.n	8005480 <mem_trim+0x6c>
 8005476:	4b5e      	ldr	r3, [pc, #376]	@ (80055f0 <mem_trim+0x1dc>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	429a      	cmp	r2, r3
 800547e:	d301      	bcc.n	8005484 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	e0af      	b.n	80055e4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3b08      	subs	r3, #8
 8005488:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800548a:	69b8      	ldr	r0, [r7, #24]
 800548c:	f7ff fe2c 	bl	80050e8 <mem_to_ptr>
 8005490:	4603      	mov	r3, r0
 8005492:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	881a      	ldrh	r2, [r3, #0]
 8005498:	8afb      	ldrh	r3, [r7, #22]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	b29b      	uxth	r3, r3
 800549e:	3b08      	subs	r3, #8
 80054a0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80054a2:	8bfa      	ldrh	r2, [r7, #30]
 80054a4:	8abb      	ldrh	r3, [r7, #20]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d906      	bls.n	80054b8 <mem_trim+0xa4>
 80054aa:	4b52      	ldr	r3, [pc, #328]	@ (80055f4 <mem_trim+0x1e0>)
 80054ac:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80054b0:	4953      	ldr	r1, [pc, #332]	@ (8005600 <mem_trim+0x1ec>)
 80054b2:	4852      	ldr	r0, [pc, #328]	@ (80055fc <mem_trim+0x1e8>)
 80054b4:	f009 fefe 	bl	800f2b4 <printf>
  if (newsize > size) {
 80054b8:	8bfa      	ldrh	r2, [r7, #30]
 80054ba:	8abb      	ldrh	r3, [r7, #20]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d901      	bls.n	80054c4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80054c0:	2300      	movs	r3, #0
 80054c2:	e08f      	b.n	80055e4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80054c4:	8bfa      	ldrh	r2, [r7, #30]
 80054c6:	8abb      	ldrh	r3, [r7, #20]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d101      	bne.n	80054d0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	e089      	b.n	80055e4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff fdf5 	bl	80050c4 <ptr_to_mem>
 80054da:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	791b      	ldrb	r3, [r3, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d13f      	bne.n	8005564 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80054ec:	d106      	bne.n	80054fc <mem_trim+0xe8>
 80054ee:	4b41      	ldr	r3, [pc, #260]	@ (80055f4 <mem_trim+0x1e0>)
 80054f0:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80054f4:	4943      	ldr	r1, [pc, #268]	@ (8005604 <mem_trim+0x1f0>)
 80054f6:	4841      	ldr	r0, [pc, #260]	@ (80055fc <mem_trim+0x1e8>)
 80054f8:	f009 fedc 	bl	800f2b4 <printf>
    /* remember the old next pointer */
    next = mem2->next;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005502:	8afa      	ldrh	r2, [r7, #22]
 8005504:	8bfb      	ldrh	r3, [r7, #30]
 8005506:	4413      	add	r3, r2
 8005508:	b29b      	uxth	r3, r3
 800550a:	3308      	adds	r3, #8
 800550c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800550e:	4b3e      	ldr	r3, [pc, #248]	@ (8005608 <mem_trim+0x1f4>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	429a      	cmp	r2, r3
 8005516:	d106      	bne.n	8005526 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005518:	89fb      	ldrh	r3, [r7, #14]
 800551a:	4618      	mov	r0, r3
 800551c:	f7ff fdd2 	bl	80050c4 <ptr_to_mem>
 8005520:	4603      	mov	r3, r0
 8005522:	4a39      	ldr	r2, [pc, #228]	@ (8005608 <mem_trim+0x1f4>)
 8005524:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005526:	89fb      	ldrh	r3, [r7, #14]
 8005528:	4618      	mov	r0, r3
 800552a:	f7ff fdcb 	bl	80050c4 <ptr_to_mem>
 800552e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	2200      	movs	r2, #0
 8005534:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	89ba      	ldrh	r2, [r7, #12]
 800553a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	8afa      	ldrh	r2, [r7, #22]
 8005540:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	89fa      	ldrh	r2, [r7, #14]
 8005546:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005550:	d047      	beq.n	80055e2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff fdb4 	bl	80050c4 <ptr_to_mem>
 800555c:	4602      	mov	r2, r0
 800555e:	89fb      	ldrh	r3, [r7, #14]
 8005560:	8053      	strh	r3, [r2, #2]
 8005562:	e03e      	b.n	80055e2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005564:	8bfb      	ldrh	r3, [r7, #30]
 8005566:	f103 0214 	add.w	r2, r3, #20
 800556a:	8abb      	ldrh	r3, [r7, #20]
 800556c:	429a      	cmp	r2, r3
 800556e:	d838      	bhi.n	80055e2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005570:	8afa      	ldrh	r2, [r7, #22]
 8005572:	8bfb      	ldrh	r3, [r7, #30]
 8005574:	4413      	add	r3, r2
 8005576:	b29b      	uxth	r3, r3
 8005578:	3308      	adds	r3, #8
 800557a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005584:	d106      	bne.n	8005594 <mem_trim+0x180>
 8005586:	4b1b      	ldr	r3, [pc, #108]	@ (80055f4 <mem_trim+0x1e0>)
 8005588:	f240 3216 	movw	r2, #790	@ 0x316
 800558c:	491d      	ldr	r1, [pc, #116]	@ (8005604 <mem_trim+0x1f0>)
 800558e:	481b      	ldr	r0, [pc, #108]	@ (80055fc <mem_trim+0x1e8>)
 8005590:	f009 fe90 	bl	800f2b4 <printf>
    mem2 = ptr_to_mem(ptr2);
 8005594:	89fb      	ldrh	r3, [r7, #14]
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff fd94 	bl	80050c4 <ptr_to_mem>
 800559c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800559e:	4b1a      	ldr	r3, [pc, #104]	@ (8005608 <mem_trim+0x1f4>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d202      	bcs.n	80055ae <mem_trim+0x19a>
      lfree = mem2;
 80055a8:	4a17      	ldr	r2, [pc, #92]	@ (8005608 <mem_trim+0x1f4>)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	2200      	movs	r2, #0
 80055b2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	881a      	ldrh	r2, [r3, #0]
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	8afa      	ldrh	r2, [r7, #22]
 80055c0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	89fa      	ldrh	r2, [r7, #14]
 80055c6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80055d0:	d007      	beq.n	80055e2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff fd74 	bl	80050c4 <ptr_to_mem>
 80055dc:	4602      	mov	r2, r0
 80055de:	89fb      	ldrh	r3, [r7, #14]
 80055e0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80055e2:	687b      	ldr	r3, [r7, #4]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3720      	adds	r7, #32
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	200059e8 	.word	0x200059e8
 80055f0:	200059ec 	.word	0x200059ec
 80055f4:	08013cdc 	.word	0x08013cdc
 80055f8:	08013e4c 	.word	0x08013e4c
 80055fc:	08013d24 	.word	0x08013d24
 8005600:	08013e64 	.word	0x08013e64
 8005604:	08013e84 	.word	0x08013e84
 8005608:	200059f0 	.word	0x200059f0

0800560c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af00      	add	r7, sp, #0
 8005612:	4603      	mov	r3, r0
 8005614:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005616:	88fb      	ldrh	r3, [r7, #6]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <mem_malloc+0x14>
    return NULL;
 800561c:	2300      	movs	r3, #0
 800561e:	e0d9      	b.n	80057d4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005620:	88fb      	ldrh	r3, [r7, #6]
 8005622:	3303      	adds	r3, #3
 8005624:	b29b      	uxth	r3, r3
 8005626:	f023 0303 	bic.w	r3, r3, #3
 800562a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800562c:	8bbb      	ldrh	r3, [r7, #28]
 800562e:	2b0b      	cmp	r3, #11
 8005630:	d801      	bhi.n	8005636 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005632:	230c      	movs	r3, #12
 8005634:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005636:	8bbb      	ldrh	r3, [r7, #28]
 8005638:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800563c:	d803      	bhi.n	8005646 <mem_malloc+0x3a>
 800563e:	8bba      	ldrh	r2, [r7, #28]
 8005640:	88fb      	ldrh	r3, [r7, #6]
 8005642:	429a      	cmp	r2, r3
 8005644:	d201      	bcs.n	800564a <mem_malloc+0x3e>
    return NULL;
 8005646:	2300      	movs	r3, #0
 8005648:	e0c4      	b.n	80057d4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800564a:	4b64      	ldr	r3, [pc, #400]	@ (80057dc <mem_malloc+0x1d0>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff fd4a 	bl	80050e8 <mem_to_ptr>
 8005654:	4603      	mov	r3, r0
 8005656:	83fb      	strh	r3, [r7, #30]
 8005658:	e0b4      	b.n	80057c4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800565a:	8bfb      	ldrh	r3, [r7, #30]
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff fd31 	bl	80050c4 <ptr_to_mem>
 8005662:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	791b      	ldrb	r3, [r3, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	f040 80a4 	bne.w	80057b6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	8bfb      	ldrh	r3, [r7, #30]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	f1a3 0208 	sub.w	r2, r3, #8
 800567c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800567e:	429a      	cmp	r2, r3
 8005680:	f0c0 8099 	bcc.w	80057b6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	8bfb      	ldrh	r3, [r7, #30]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	f1a3 0208 	sub.w	r2, r3, #8
 8005692:	8bbb      	ldrh	r3, [r7, #28]
 8005694:	3314      	adds	r3, #20
 8005696:	429a      	cmp	r2, r3
 8005698:	d333      	bcc.n	8005702 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800569a:	8bfa      	ldrh	r2, [r7, #30]
 800569c:	8bbb      	ldrh	r3, [r7, #28]
 800569e:	4413      	add	r3, r2
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3308      	adds	r3, #8
 80056a4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80056a6:	8a7b      	ldrh	r3, [r7, #18]
 80056a8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80056ac:	d106      	bne.n	80056bc <mem_malloc+0xb0>
 80056ae:	4b4c      	ldr	r3, [pc, #304]	@ (80057e0 <mem_malloc+0x1d4>)
 80056b0:	f240 3287 	movw	r2, #903	@ 0x387
 80056b4:	494b      	ldr	r1, [pc, #300]	@ (80057e4 <mem_malloc+0x1d8>)
 80056b6:	484c      	ldr	r0, [pc, #304]	@ (80057e8 <mem_malloc+0x1dc>)
 80056b8:	f009 fdfc 	bl	800f2b4 <printf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80056bc:	8a7b      	ldrh	r3, [r7, #18]
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff fd00 	bl	80050c4 <ptr_to_mem>
 80056c4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	881a      	ldrh	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8bfa      	ldrh	r2, [r7, #30]
 80056d8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	8a7a      	ldrh	r2, [r7, #18]
 80056de:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2201      	movs	r2, #1
 80056e4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80056ee:	d00b      	beq.n	8005708 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff fce5 	bl	80050c4 <ptr_to_mem>
 80056fa:	4602      	mov	r2, r0
 80056fc:	8a7b      	ldrh	r3, [r7, #18]
 80056fe:	8053      	strh	r3, [r2, #2]
 8005700:	e002      	b.n	8005708 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2201      	movs	r2, #1
 8005706:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005708:	4b34      	ldr	r3, [pc, #208]	@ (80057dc <mem_malloc+0x1d0>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	429a      	cmp	r2, r3
 8005710:	d127      	bne.n	8005762 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005712:	4b32      	ldr	r3, [pc, #200]	@ (80057dc <mem_malloc+0x1d0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005718:	e005      	b.n	8005726 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff fcd0 	bl	80050c4 <ptr_to_mem>
 8005724:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	791b      	ldrb	r3, [r3, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d004      	beq.n	8005738 <mem_malloc+0x12c>
 800572e:	4b2f      	ldr	r3, [pc, #188]	@ (80057ec <mem_malloc+0x1e0>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	429a      	cmp	r2, r3
 8005736:	d1f0      	bne.n	800571a <mem_malloc+0x10e>
          }
          lfree = cur;
 8005738:	4a28      	ldr	r2, [pc, #160]	@ (80057dc <mem_malloc+0x1d0>)
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800573e:	4b27      	ldr	r3, [pc, #156]	@ (80057dc <mem_malloc+0x1d0>)
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	4b2a      	ldr	r3, [pc, #168]	@ (80057ec <mem_malloc+0x1e0>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d00b      	beq.n	8005762 <mem_malloc+0x156>
 800574a:	4b24      	ldr	r3, [pc, #144]	@ (80057dc <mem_malloc+0x1d0>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	791b      	ldrb	r3, [r3, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d006      	beq.n	8005762 <mem_malloc+0x156>
 8005754:	4b22      	ldr	r3, [pc, #136]	@ (80057e0 <mem_malloc+0x1d4>)
 8005756:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800575a:	4925      	ldr	r1, [pc, #148]	@ (80057f0 <mem_malloc+0x1e4>)
 800575c:	4822      	ldr	r0, [pc, #136]	@ (80057e8 <mem_malloc+0x1dc>)
 800575e:	f009 fda9 	bl	800f2b4 <printf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005762:	8bba      	ldrh	r2, [r7, #28]
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	4413      	add	r3, r2
 8005768:	3308      	adds	r3, #8
 800576a:	4a20      	ldr	r2, [pc, #128]	@ (80057ec <mem_malloc+0x1e0>)
 800576c:	6812      	ldr	r2, [r2, #0]
 800576e:	4293      	cmp	r3, r2
 8005770:	d906      	bls.n	8005780 <mem_malloc+0x174>
 8005772:	4b1b      	ldr	r3, [pc, #108]	@ (80057e0 <mem_malloc+0x1d4>)
 8005774:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8005778:	491e      	ldr	r1, [pc, #120]	@ (80057f4 <mem_malloc+0x1e8>)
 800577a:	481b      	ldr	r0, [pc, #108]	@ (80057e8 <mem_malloc+0x1dc>)
 800577c:	f009 fd9a 	bl	800f2b4 <printf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d006      	beq.n	8005798 <mem_malloc+0x18c>
 800578a:	4b15      	ldr	r3, [pc, #84]	@ (80057e0 <mem_malloc+0x1d4>)
 800578c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8005790:	4919      	ldr	r1, [pc, #100]	@ (80057f8 <mem_malloc+0x1ec>)
 8005792:	4815      	ldr	r0, [pc, #84]	@ (80057e8 <mem_malloc+0x1dc>)
 8005794:	f009 fd8e 	bl	800f2b4 <printf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f003 0303 	and.w	r3, r3, #3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d006      	beq.n	80057b0 <mem_malloc+0x1a4>
 80057a2:	4b0f      	ldr	r3, [pc, #60]	@ (80057e0 <mem_malloc+0x1d4>)
 80057a4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80057a8:	4914      	ldr	r1, [pc, #80]	@ (80057fc <mem_malloc+0x1f0>)
 80057aa:	480f      	ldr	r0, [pc, #60]	@ (80057e8 <mem_malloc+0x1dc>)
 80057ac:	f009 fd82 	bl	800f2b4 <printf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	3308      	adds	r3, #8
 80057b4:	e00e      	b.n	80057d4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80057b6:	8bfb      	ldrh	r3, [r7, #30]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff fc83 	bl	80050c4 <ptr_to_mem>
 80057be:	4603      	mov	r3, r0
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80057c4:	8bfa      	ldrh	r2, [r7, #30]
 80057c6:	8bbb      	ldrh	r3, [r7, #28]
 80057c8:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 80057cc:	429a      	cmp	r2, r3
 80057ce:	f4ff af44 	bcc.w	800565a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3720      	adds	r7, #32
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	200059f0 	.word	0x200059f0
 80057e0:	08013cdc 	.word	0x08013cdc
 80057e4:	08013e84 	.word	0x08013e84
 80057e8:	08013d24 	.word	0x08013d24
 80057ec:	200059ec 	.word	0x200059ec
 80057f0:	08013e98 	.word	0x08013e98
 80057f4:	08013eb4 	.word	0x08013eb4
 80057f8:	08013ee4 	.word	0x08013ee4
 80057fc:	08013f14 	.word	0x08013f14

08005800 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	3303      	adds	r3, #3
 8005816:	f023 0303 	bic.w	r3, r3, #3
 800581a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800581c:	2300      	movs	r3, #0
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	e011      	b.n	8005846 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	461a      	mov	r2, r3
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	4413      	add	r3, r2
 800583e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3301      	adds	r3, #1
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	885b      	ldrh	r3, [r3, #2]
 800584a:	461a      	mov	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4293      	cmp	r3, r2
 8005850:	dbe7      	blt.n	8005822 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005852:	bf00      	nop
 8005854:	bf00      	nop
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005866:	2300      	movs	r3, #0
 8005868:	80fb      	strh	r3, [r7, #6]
 800586a:	e009      	b.n	8005880 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800586c:	88fb      	ldrh	r3, [r7, #6]
 800586e:	4a08      	ldr	r2, [pc, #32]	@ (8005890 <memp_init+0x30>)
 8005870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff ffc3 	bl	8005800 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800587a:	88fb      	ldrh	r3, [r7, #6]
 800587c:	3301      	adds	r3, #1
 800587e:	80fb      	strh	r3, [r7, #6]
 8005880:	88fb      	ldrh	r3, [r7, #6]
 8005882:	2b08      	cmp	r3, #8
 8005884:	d9f2      	bls.n	800586c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005886:	bf00      	nop
 8005888:	bf00      	nop
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	080166f0 	.word	0x080166f0

08005894 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d012      	beq.n	80058d0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	6812      	ldr	r2, [r2, #0]
 80058b2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d006      	beq.n	80058cc <do_memp_malloc_pool+0x38>
 80058be:	4b07      	ldr	r3, [pc, #28]	@ (80058dc <do_memp_malloc_pool+0x48>)
 80058c0:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80058c4:	4906      	ldr	r1, [pc, #24]	@ (80058e0 <do_memp_malloc_pool+0x4c>)
 80058c6:	4807      	ldr	r0, [pc, #28]	@ (80058e4 <do_memp_malloc_pool+0x50>)
 80058c8:	f009 fcf4 	bl	800f2b4 <printf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	e000      	b.n	80058d2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	08013f38 	.word	0x08013f38
 80058e0:	08013f68 	.word	0x08013f68
 80058e4:	08013f8c 	.word	0x08013f8c

080058e8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d106      	bne.n	8005904 <memp_malloc_pool+0x1c>
 80058f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005920 <memp_malloc_pool+0x38>)
 80058f8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80058fc:	4909      	ldr	r1, [pc, #36]	@ (8005924 <memp_malloc_pool+0x3c>)
 80058fe:	480a      	ldr	r0, [pc, #40]	@ (8005928 <memp_malloc_pool+0x40>)
 8005900:	f009 fcd8 	bl	800f2b4 <printf>
  if (desc == NULL) {
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <memp_malloc_pool+0x26>
    return NULL;
 800590a:	2300      	movs	r3, #0
 800590c:	e003      	b.n	8005916 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff ffc0 	bl	8005894 <do_memp_malloc_pool>
 8005914:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	08013f38 	.word	0x08013f38
 8005924:	08013fb4 	.word	0x08013fb4
 8005928:	08013f8c 	.word	0x08013f8c

0800592c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	4603      	mov	r3, r0
 8005934:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005936:	79fb      	ldrb	r3, [r7, #7]
 8005938:	2b08      	cmp	r3, #8
 800593a:	d908      	bls.n	800594e <memp_malloc+0x22>
 800593c:	4b0a      	ldr	r3, [pc, #40]	@ (8005968 <memp_malloc+0x3c>)
 800593e:	f240 1257 	movw	r2, #343	@ 0x157
 8005942:	490a      	ldr	r1, [pc, #40]	@ (800596c <memp_malloc+0x40>)
 8005944:	480a      	ldr	r0, [pc, #40]	@ (8005970 <memp_malloc+0x44>)
 8005946:	f009 fcb5 	bl	800f2b4 <printf>
 800594a:	2300      	movs	r3, #0
 800594c:	e008      	b.n	8005960 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	4a08      	ldr	r2, [pc, #32]	@ (8005974 <memp_malloc+0x48>)
 8005952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005956:	4618      	mov	r0, r3
 8005958:	f7ff ff9c 	bl	8005894 <do_memp_malloc_pool>
 800595c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800595e:	68fb      	ldr	r3, [r7, #12]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	08013f38 	.word	0x08013f38
 800596c:	08013fc8 	.word	0x08013fc8
 8005970:	08013f8c 	.word	0x08013f8c
 8005974:	080166f0 	.word	0x080166f0

08005978 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	f003 0303 	and.w	r3, r3, #3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d006      	beq.n	800599a <do_memp_free_pool+0x22>
 800598c:	4b0a      	ldr	r3, [pc, #40]	@ (80059b8 <do_memp_free_pool+0x40>)
 800598e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8005992:	490a      	ldr	r1, [pc, #40]	@ (80059bc <do_memp_free_pool+0x44>)
 8005994:	480a      	ldr	r0, [pc, #40]	@ (80059c0 <do_memp_free_pool+0x48>)
 8005996:	f009 fc8d 	bl	800f2b4 <printf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80059b0:	bf00      	nop
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	08013f38 	.word	0x08013f38
 80059bc:	08013fe8 	.word	0x08013fe8
 80059c0:	08013f8c 	.word	0x08013f8c

080059c4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d106      	bne.n	80059e2 <memp_free_pool+0x1e>
 80059d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005a00 <memp_free_pool+0x3c>)
 80059d6:	f240 1295 	movw	r2, #405	@ 0x195
 80059da:	490a      	ldr	r1, [pc, #40]	@ (8005a04 <memp_free_pool+0x40>)
 80059dc:	480a      	ldr	r0, [pc, #40]	@ (8005a08 <memp_free_pool+0x44>)
 80059de:	f009 fc69 	bl	800f2b4 <printf>
  if ((desc == NULL) || (mem == NULL)) {
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <memp_free_pool+0x34>
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d004      	beq.n	80059f8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80059ee:	6839      	ldr	r1, [r7, #0]
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f7ff ffc1 	bl	8005978 <do_memp_free_pool>
 80059f6:	e000      	b.n	80059fa <memp_free_pool+0x36>
    return;
 80059f8:	bf00      	nop
}
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	08013f38 	.word	0x08013f38
 8005a04:	08013fb4 	.word	0x08013fb4
 8005a08:	08013f8c 	.word	0x08013f8c

08005a0c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	4603      	mov	r3, r0
 8005a14:	6039      	str	r1, [r7, #0]
 8005a16:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005a18:	79fb      	ldrb	r3, [r7, #7]
 8005a1a:	2b08      	cmp	r3, #8
 8005a1c:	d907      	bls.n	8005a2e <memp_free+0x22>
 8005a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a50 <memp_free+0x44>)
 8005a20:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8005a24:	490b      	ldr	r1, [pc, #44]	@ (8005a54 <memp_free+0x48>)
 8005a26:	480c      	ldr	r0, [pc, #48]	@ (8005a58 <memp_free+0x4c>)
 8005a28:	f009 fc44 	bl	800f2b4 <printf>
 8005a2c:	e00c      	b.n	8005a48 <memp_free+0x3c>

  if (mem == NULL) {
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d008      	beq.n	8005a46 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005a34:	79fb      	ldrb	r3, [r7, #7]
 8005a36:	4a09      	ldr	r2, [pc, #36]	@ (8005a5c <memp_free+0x50>)
 8005a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a3c:	6839      	ldr	r1, [r7, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff ff9a 	bl	8005978 <do_memp_free_pool>
 8005a44:	e000      	b.n	8005a48 <memp_free+0x3c>
    return;
 8005a46:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	08013f38 	.word	0x08013f38
 8005a54:	08014008 	.word	0x08014008
 8005a58:	08013f8c 	.word	0x08013f8c
 8005a5c:	080166f0 	.word	0x080166f0

08005a60 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005a60:	b480      	push	{r7}
 8005a62:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005a64:	bf00      	nop
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
	...

08005a70 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
 8005a7c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d108      	bne.n	8005a96 <netif_add+0x26>
 8005a84:	4b57      	ldr	r3, [pc, #348]	@ (8005be4 <netif_add+0x174>)
 8005a86:	f240 1227 	movw	r2, #295	@ 0x127
 8005a8a:	4957      	ldr	r1, [pc, #348]	@ (8005be8 <netif_add+0x178>)
 8005a8c:	4857      	ldr	r0, [pc, #348]	@ (8005bec <netif_add+0x17c>)
 8005a8e:	f009 fc11 	bl	800f2b4 <printf>
 8005a92:	2300      	movs	r3, #0
 8005a94:	e0a2      	b.n	8005bdc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d108      	bne.n	8005aae <netif_add+0x3e>
 8005a9c:	4b51      	ldr	r3, [pc, #324]	@ (8005be4 <netif_add+0x174>)
 8005a9e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8005aa2:	4953      	ldr	r1, [pc, #332]	@ (8005bf0 <netif_add+0x180>)
 8005aa4:	4851      	ldr	r0, [pc, #324]	@ (8005bec <netif_add+0x17c>)
 8005aa6:	f009 fc05 	bl	800f2b4 <printf>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	e096      	b.n	8005bdc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005ab4:	4b4f      	ldr	r3, [pc, #316]	@ (8005bf4 <netif_add+0x184>)
 8005ab6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005abe:	4b4d      	ldr	r3, [pc, #308]	@ (8005bf4 <netif_add+0x184>)
 8005ac0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8005bf4 <netif_add+0x184>)
 8005aca:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4a45      	ldr	r2, [pc, #276]	@ (8005bf8 <netif_add+0x188>)
 8005ae2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6a3a      	ldr	r2, [r7, #32]
 8005afc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005afe:	4b3f      	ldr	r3, [pc, #252]	@ (8005bfc <netif_add+0x18c>)
 8005b00:	781a      	ldrb	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b0c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 f913 	bl	8005d40 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	4798      	blx	r3
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <netif_add+0xba>
    return NULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	e058      	b.n	8005bdc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005b30:	2bff      	cmp	r3, #255	@ 0xff
 8005b32:	d103      	bne.n	8005b3c <netif_add+0xcc>
        netif->num = 0;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005b40:	4b2f      	ldr	r3, [pc, #188]	@ (8005c00 <netif_add+0x190>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	617b      	str	r3, [r7, #20]
 8005b46:	e02b      	b.n	8005ba0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d106      	bne.n	8005b5e <netif_add+0xee>
 8005b50:	4b24      	ldr	r3, [pc, #144]	@ (8005be4 <netif_add+0x174>)
 8005b52:	f240 128b 	movw	r2, #395	@ 0x18b
 8005b56:	492b      	ldr	r1, [pc, #172]	@ (8005c04 <netif_add+0x194>)
 8005b58:	4824      	ldr	r0, [pc, #144]	@ (8005bec <netif_add+0x17c>)
 8005b5a:	f009 fbab 	bl	800f2b4 <printf>
        num_netifs++;
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	3301      	adds	r3, #1
 8005b62:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	2bff      	cmp	r3, #255	@ 0xff
 8005b68:	dd06      	ble.n	8005b78 <netif_add+0x108>
 8005b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8005be4 <netif_add+0x174>)
 8005b6c:	f240 128d 	movw	r2, #397	@ 0x18d
 8005b70:	4925      	ldr	r1, [pc, #148]	@ (8005c08 <netif_add+0x198>)
 8005b72:	481e      	ldr	r0, [pc, #120]	@ (8005bec <netif_add+0x17c>)
 8005b74:	f009 fb9e 	bl	800f2b4 <printf>
        if (netif2->num == netif->num) {
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d108      	bne.n	8005b9a <netif_add+0x12a>
          netif->num++;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005b8e:	3301      	adds	r3, #1
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8005b98:	e005      	b.n	8005ba6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	617b      	str	r3, [r7, #20]
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1d0      	bne.n	8005b48 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1be      	bne.n	8005b2a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005bb2:	2bfe      	cmp	r3, #254	@ 0xfe
 8005bb4:	d103      	bne.n	8005bbe <netif_add+0x14e>
    netif_num = 0;
 8005bb6:	4b11      	ldr	r3, [pc, #68]	@ (8005bfc <netif_add+0x18c>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	e006      	b.n	8005bcc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8005bfc <netif_add+0x18c>)
 8005bca:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8005c00 <netif_add+0x190>)
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8005c00 <netif_add+0x190>)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005bda:	68fb      	ldr	r3, [r7, #12]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3718      	adds	r7, #24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	08014024 	.word	0x08014024
 8005be8:	080140b8 	.word	0x080140b8
 8005bec:	08014074 	.word	0x08014074
 8005bf0:	080140d4 	.word	0x080140d4
 8005bf4:	08016754 	.word	0x08016754
 8005bf8:	0800601b 	.word	0x0800601b
 8005bfc:	200088e8 	.word	0x200088e8
 8005c00:	200088e0 	.word	0x200088e0
 8005c04:	080140f8 	.word	0x080140f8
 8005c08:	0801410c 	.word	0x0801410c

08005c0c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005c16:	6839      	ldr	r1, [r7, #0]
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f002 fbe7 	bl	80083ec <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f006 ff73 	bl	800cb0c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005c26:	bf00      	nop
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
	...

08005c30 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <netif_do_set_ipaddr+0x20>
 8005c42:	4b1d      	ldr	r3, [pc, #116]	@ (8005cb8 <netif_do_set_ipaddr+0x88>)
 8005c44:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8005c48:	491c      	ldr	r1, [pc, #112]	@ (8005cbc <netif_do_set_ipaddr+0x8c>)
 8005c4a:	481d      	ldr	r0, [pc, #116]	@ (8005cc0 <netif_do_set_ipaddr+0x90>)
 8005c4c:	f009 fb32 	bl	800f2b4 <printf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <netif_do_set_ipaddr+0x34>
 8005c56:	4b18      	ldr	r3, [pc, #96]	@ (8005cb8 <netif_do_set_ipaddr+0x88>)
 8005c58:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8005c5c:	4917      	ldr	r1, [pc, #92]	@ (8005cbc <netif_do_set_ipaddr+0x8c>)
 8005c5e:	4818      	ldr	r0, [pc, #96]	@ (8005cc0 <netif_do_set_ipaddr+0x90>)
 8005c60:	f009 fb28 	bl	800f2b4 <printf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d01c      	beq.n	8005cac <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005c82:	f107 0314 	add.w	r3, r7, #20
 8005c86:	4619      	mov	r1, r3
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7ff ffbf 	bl	8005c0c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <netif_do_set_ipaddr+0x6a>
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	e000      	b.n	8005c9c <netif_do_set_ipaddr+0x6c>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 f8d2 	bl	8005e4c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e000      	b.n	8005cae <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	08014024 	.word	0x08014024
 8005cbc:	0801413c 	.word	0x0801413c
 8005cc0:	08014074 	.word	0x08014074

08005cc4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3308      	adds	r3, #8
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d00a      	beq.n	8005cf4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <netif_do_set_netmask+0x26>
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	e000      	b.n	8005cec <netif_do_set_netmask+0x28>
 8005cea:	2300      	movs	r3, #0
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e000      	b.n	8005cf6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b085      	sub	sp, #20
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	330c      	adds	r3, #12
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d00a      	beq.n	8005d32 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <netif_do_set_gw+0x26>
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	e000      	b.n	8005d2a <netif_do_set_gw+0x28>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e000      	b.n	8005d34 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b088      	sub	sp, #32
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8005dd0 <netif_set_addr+0x90>)
 8005d5e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005d66:	4b1a      	ldr	r3, [pc, #104]	@ (8005dd0 <netif_set_addr+0x90>)
 8005d68:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005d70:	4b17      	ldr	r3, [pc, #92]	@ (8005dd0 <netif_set_addr+0x90>)
 8005d72:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <netif_set_addr+0x42>
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <netif_set_addr+0x46>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e000      	b.n	8005d88 <netif_set_addr+0x48>
 8005d86:	2300      	movs	r3, #0
 8005d88:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d006      	beq.n	8005d9e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005d90:	f107 0310 	add.w	r3, r7, #16
 8005d94:	461a      	mov	r2, r3
 8005d96:	68b9      	ldr	r1, [r7, #8]
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f7ff ff49 	bl	8005c30 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005d9e:	69fa      	ldr	r2, [r7, #28]
 8005da0:	6879      	ldr	r1, [r7, #4]
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f7ff ff8e 	bl	8005cc4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	6839      	ldr	r1, [r7, #0]
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f7ff ffa8 	bl	8005d02 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d106      	bne.n	8005dc6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005db8:	f107 0310 	add.w	r3, r7, #16
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	68b9      	ldr	r1, [r7, #8]
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f7ff ff35 	bl	8005c30 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005dc6:	bf00      	nop
 8005dc8:	3720      	adds	r7, #32
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	08016754 	.word	0x08016754

08005dd4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005ddc:	4a04      	ldr	r2, [pc, #16]	@ (8005df0 <netif_set_default+0x1c>)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	200088e4 	.word	0x200088e4

08005df4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d107      	bne.n	8005e12 <netif_set_up+0x1e>
 8005e02:	4b0f      	ldr	r3, [pc, #60]	@ (8005e40 <netif_set_up+0x4c>)
 8005e04:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8005e08:	490e      	ldr	r1, [pc, #56]	@ (8005e44 <netif_set_up+0x50>)
 8005e0a:	480f      	ldr	r0, [pc, #60]	@ (8005e48 <netif_set_up+0x54>)
 8005e0c:	f009 fa52 	bl	800f2b4 <printf>
 8005e10:	e013      	b.n	8005e3a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10c      	bne.n	8005e3a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005e26:	f043 0301 	orr.w	r3, r3, #1
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005e32:	2103      	movs	r1, #3
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f809 	bl	8005e4c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005e3a:	3708      	adds	r7, #8
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	08014024 	.word	0x08014024
 8005e44:	080141ac 	.word	0x080141ac
 8005e48:	08014074 	.word	0x08014074

08005e4c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	460b      	mov	r3, r1
 8005e56:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <netif_issue_reports+0x20>
 8005e5e:	4b18      	ldr	r3, [pc, #96]	@ (8005ec0 <netif_issue_reports+0x74>)
 8005e60:	f240 326d 	movw	r2, #877	@ 0x36d
 8005e64:	4917      	ldr	r1, [pc, #92]	@ (8005ec4 <netif_issue_reports+0x78>)
 8005e66:	4818      	ldr	r0, [pc, #96]	@ (8005ec8 <netif_issue_reports+0x7c>)
 8005e68:	f009 fa24 	bl	800f2b4 <printf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005e72:	f003 0304 	and.w	r3, r3, #4
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d01e      	beq.n	8005eb8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005e80:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d017      	beq.n	8005eb8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005e88:	78fb      	ldrb	r3, [r7, #3]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d013      	beq.n	8005eba <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	3304      	adds	r3, #4
 8005e96:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00e      	beq.n	8005eba <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d007      	beq.n	8005eba <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	3304      	adds	r3, #4
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f007 fd95 	bl	800d9e0 <etharp_request>
 8005eb6:	e000      	b.n	8005eba <netif_issue_reports+0x6e>
    return;
 8005eb8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	08014024 	.word	0x08014024
 8005ec4:	080141c8 	.word	0x080141c8
 8005ec8:	08014074 	.word	0x08014074

08005ecc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d107      	bne.n	8005eea <netif_set_down+0x1e>
 8005eda:	4b12      	ldr	r3, [pc, #72]	@ (8005f24 <netif_set_down+0x58>)
 8005edc:	f240 329b 	movw	r2, #923	@ 0x39b
 8005ee0:	4911      	ldr	r1, [pc, #68]	@ (8005f28 <netif_set_down+0x5c>)
 8005ee2:	4812      	ldr	r0, [pc, #72]	@ (8005f2c <netif_set_down+0x60>)
 8005ee4:	f009 f9e6 	bl	800f2b4 <printf>
 8005ee8:	e019      	b.n	8005f1e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d012      	beq.n	8005f1e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005efe:	f023 0301 	bic.w	r3, r3, #1
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005f10:	f003 0308 	and.w	r3, r3, #8
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f007 f91f 	bl	800d15c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	08014024 	.word	0x08014024
 8005f28:	080141ec 	.word	0x080141ec
 8005f2c:	08014074 	.word	0x08014074

08005f30 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d107      	bne.n	8005f4e <netif_set_link_up+0x1e>
 8005f3e:	4b13      	ldr	r3, [pc, #76]	@ (8005f8c <netif_set_link_up+0x5c>)
 8005f40:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8005f44:	4912      	ldr	r1, [pc, #72]	@ (8005f90 <netif_set_link_up+0x60>)
 8005f46:	4813      	ldr	r0, [pc, #76]	@ (8005f94 <netif_set_link_up+0x64>)
 8005f48:	f009 f9b4 	bl	800f2b4 <printf>
 8005f4c:	e01b      	b.n	8005f86 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d114      	bne.n	8005f86 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005f62:	f043 0304 	orr.w	r3, r3, #4
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005f6e:	2103      	movs	r1, #3
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7ff ff6b 	bl	8005e4c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <netif_set_link_up+0x56>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	08014024 	.word	0x08014024
 8005f90:	0801420c 	.word	0x0801420c
 8005f94:	08014074 	.word	0x08014074

08005f98 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d107      	bne.n	8005fb6 <netif_set_link_down+0x1e>
 8005fa6:	4b11      	ldr	r3, [pc, #68]	@ (8005fec <netif_set_link_down+0x54>)
 8005fa8:	f240 4206 	movw	r2, #1030	@ 0x406
 8005fac:	4910      	ldr	r1, [pc, #64]	@ (8005ff0 <netif_set_link_down+0x58>)
 8005fae:	4811      	ldr	r0, [pc, #68]	@ (8005ff4 <netif_set_link_down+0x5c>)
 8005fb0:	f009 f980 	bl	800f2b4 <printf>
 8005fb4:	e017      	b.n	8005fe6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d010      	beq.n	8005fe6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005fca:	f023 0304 	bic.w	r3, r3, #4
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <netif_set_link_down+0x4e>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	08014024 	.word	0x08014024
 8005ff0:	08014230 	.word	0x08014230
 8005ff4:	08014074 	.word	0x08014074

08005ff8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	61da      	str	r2, [r3, #28]
  }
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800601a:	b480      	push	{r7}
 800601c:	b085      	sub	sp, #20
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006026:	f06f 030b 	mvn.w	r3, #11
}
 800602a:	4618      	mov	r0, r3
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
	...

08006038 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	4603      	mov	r3, r0
 8006040:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006042:	79fb      	ldrb	r3, [r7, #7]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d013      	beq.n	8006070 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006048:	4b0d      	ldr	r3, [pc, #52]	@ (8006080 <netif_get_by_index+0x48>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	60fb      	str	r3, [r7, #12]
 800604e:	e00c      	b.n	800606a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006056:	3301      	adds	r3, #1
 8006058:	b2db      	uxtb	r3, r3
 800605a:	79fa      	ldrb	r2, [r7, #7]
 800605c:	429a      	cmp	r2, r3
 800605e:	d101      	bne.n	8006064 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	e006      	b.n	8006072 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1ef      	bne.n	8006050 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	200088e0 	.word	0x200088e0

08006084 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800608a:	4b0c      	ldr	r3, [pc, #48]	@ (80060bc <pbuf_free_ooseq+0x38>)
 800608c:	2200      	movs	r2, #0
 800608e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006090:	4b0b      	ldr	r3, [pc, #44]	@ (80060c0 <pbuf_free_ooseq+0x3c>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	607b      	str	r3, [r7, #4]
 8006096:	e00a      	b.n	80060ae <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800609c:	2b00      	cmp	r3, #0
 800609e:	d003      	beq.n	80060a8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f002 f9e1 	bl	8008468 <tcp_free_ooseq>
      return;
 80060a6:	e005      	b.n	80060b4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	607b      	str	r3, [r7, #4]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1f1      	bne.n	8006098 <pbuf_free_ooseq+0x14>
    }
  }
}
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	200088e9 	.word	0x200088e9
 80060c0:	200088f8 	.word	0x200088f8

080060c4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80060c4:	b480      	push	{r7}
 80060c6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80060c8:	4b03      	ldr	r3, [pc, #12]	@ (80060d8 <pbuf_pool_is_empty+0x14>)
 80060ca:	2201      	movs	r2, #1
 80060cc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80060ce:	bf00      	nop
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	200088e9 	.word	0x200088e9

080060dc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	4611      	mov	r1, r2
 80060e8:	461a      	mov	r2, r3
 80060ea:	460b      	mov	r3, r1
 80060ec:	80fb      	strh	r3, [r7, #6]
 80060ee:	4613      	mov	r3, r2
 80060f0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	88fa      	ldrh	r2, [r7, #6]
 8006102:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	88ba      	ldrh	r2, [r7, #4]
 8006108:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800610a:	8b3b      	ldrh	r3, [r7, #24]
 800610c:	b2da      	uxtb	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	7f3a      	ldrb	r2, [r7, #28]
 8006116:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2201      	movs	r2, #1
 800611c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	73da      	strb	r2, [r3, #15]
}
 8006124:	bf00      	nop
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08c      	sub	sp, #48	@ 0x30
 8006134:	af02      	add	r7, sp, #8
 8006136:	4603      	mov	r3, r0
 8006138:	71fb      	strb	r3, [r7, #7]
 800613a:	460b      	mov	r3, r1
 800613c:	80bb      	strh	r3, [r7, #4]
 800613e:	4613      	mov	r3, r2
 8006140:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006142:	79fb      	ldrb	r3, [r7, #7]
 8006144:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006146:	887b      	ldrh	r3, [r7, #2]
 8006148:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800614c:	d07f      	beq.n	800624e <pbuf_alloc+0x11e>
 800614e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8006152:	f300 80c8 	bgt.w	80062e6 <pbuf_alloc+0x1b6>
 8006156:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800615a:	d010      	beq.n	800617e <pbuf_alloc+0x4e>
 800615c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8006160:	f300 80c1 	bgt.w	80062e6 <pbuf_alloc+0x1b6>
 8006164:	2b01      	cmp	r3, #1
 8006166:	d002      	beq.n	800616e <pbuf_alloc+0x3e>
 8006168:	2b41      	cmp	r3, #65	@ 0x41
 800616a:	f040 80bc 	bne.w	80062e6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800616e:	887a      	ldrh	r2, [r7, #2]
 8006170:	88bb      	ldrh	r3, [r7, #4]
 8006172:	4619      	mov	r1, r3
 8006174:	2000      	movs	r0, #0
 8006176:	f000 f8d1 	bl	800631c <pbuf_alloc_reference>
 800617a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800617c:	e0bd      	b.n	80062fa <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800617e:	2300      	movs	r3, #0
 8006180:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8006182:	2300      	movs	r3, #0
 8006184:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006186:	88bb      	ldrh	r3, [r7, #4]
 8006188:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800618a:	2008      	movs	r0, #8
 800618c:	f7ff fbce 	bl	800592c <memp_malloc>
 8006190:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d109      	bne.n	80061ac <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8006198:	f7ff ff94 	bl	80060c4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800619c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80061a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80061a4:	f000 faa8 	bl	80066f8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80061a8:	2300      	movs	r3, #0
 80061aa:	e0a7      	b.n	80062fc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80061ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80061ae:	3303      	adds	r3, #3
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	f023 0303 	bic.w	r3, r3, #3
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80061bc:	b29b      	uxth	r3, r3
 80061be:	8b7a      	ldrh	r2, [r7, #26]
 80061c0:	4293      	cmp	r3, r2
 80061c2:	bf28      	it	cs
 80061c4:	4613      	movcs	r3, r2
 80061c6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80061c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80061ca:	3310      	adds	r3, #16
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	4413      	add	r3, r2
 80061d0:	3303      	adds	r3, #3
 80061d2:	f023 0303 	bic.w	r3, r3, #3
 80061d6:	4618      	mov	r0, r3
 80061d8:	89f9      	ldrh	r1, [r7, #14]
 80061da:	8b7a      	ldrh	r2, [r7, #26]
 80061dc:	2300      	movs	r3, #0
 80061de:	9301      	str	r3, [sp, #4]
 80061e0:	887b      	ldrh	r3, [r7, #2]
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	460b      	mov	r3, r1
 80061e6:	4601      	mov	r1, r0
 80061e8:	6938      	ldr	r0, [r7, #16]
 80061ea:	f7ff ff77 	bl	80060dc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d006      	beq.n	8006208 <pbuf_alloc+0xd8>
 80061fa:	4b42      	ldr	r3, [pc, #264]	@ (8006304 <pbuf_alloc+0x1d4>)
 80061fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006200:	4941      	ldr	r1, [pc, #260]	@ (8006308 <pbuf_alloc+0x1d8>)
 8006202:	4842      	ldr	r0, [pc, #264]	@ (800630c <pbuf_alloc+0x1dc>)
 8006204:	f009 f856 	bl	800f2b4 <printf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006208:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800620a:	3303      	adds	r3, #3
 800620c:	f023 0303 	bic.w	r3, r3, #3
 8006210:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8006214:	d106      	bne.n	8006224 <pbuf_alloc+0xf4>
 8006216:	4b3b      	ldr	r3, [pc, #236]	@ (8006304 <pbuf_alloc+0x1d4>)
 8006218:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800621c:	493c      	ldr	r1, [pc, #240]	@ (8006310 <pbuf_alloc+0x1e0>)
 800621e:	483b      	ldr	r0, [pc, #236]	@ (800630c <pbuf_alloc+0x1dc>)
 8006220:	f009 f848 	bl	800f2b4 <printf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006226:	2b00      	cmp	r3, #0
 8006228:	d102      	bne.n	8006230 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	627b      	str	r3, [r7, #36]	@ 0x24
 800622e:	e002      	b.n	8006236 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800623a:	8b7a      	ldrh	r2, [r7, #26]
 800623c:	89fb      	ldrh	r3, [r7, #14]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006242:	2300      	movs	r3, #0
 8006244:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8006246:	8b7b      	ldrh	r3, [r7, #26]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d19e      	bne.n	800618a <pbuf_alloc+0x5a>
      break;
 800624c:	e055      	b.n	80062fa <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800624e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006250:	3303      	adds	r3, #3
 8006252:	b29b      	uxth	r3, r3
 8006254:	f023 0303 	bic.w	r3, r3, #3
 8006258:	b29a      	uxth	r2, r3
 800625a:	88bb      	ldrh	r3, [r7, #4]
 800625c:	3303      	adds	r3, #3
 800625e:	b29b      	uxth	r3, r3
 8006260:	f023 0303 	bic.w	r3, r3, #3
 8006264:	b29b      	uxth	r3, r3
 8006266:	4413      	add	r3, r2
 8006268:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800626a:	8b3b      	ldrh	r3, [r7, #24]
 800626c:	3310      	adds	r3, #16
 800626e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006270:	8b3a      	ldrh	r2, [r7, #24]
 8006272:	88bb      	ldrh	r3, [r7, #4]
 8006274:	3303      	adds	r3, #3
 8006276:	f023 0303 	bic.w	r3, r3, #3
 800627a:	429a      	cmp	r2, r3
 800627c:	d306      	bcc.n	800628c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800627e:	8afa      	ldrh	r2, [r7, #22]
 8006280:	88bb      	ldrh	r3, [r7, #4]
 8006282:	3303      	adds	r3, #3
 8006284:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006288:	429a      	cmp	r2, r3
 800628a:	d201      	bcs.n	8006290 <pbuf_alloc+0x160>
        return NULL;
 800628c:	2300      	movs	r3, #0
 800628e:	e035      	b.n	80062fc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006290:	8afb      	ldrh	r3, [r7, #22]
 8006292:	4618      	mov	r0, r3
 8006294:	f7ff f9ba 	bl	800560c <mem_malloc>
 8006298:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <pbuf_alloc+0x174>
        return NULL;
 80062a0:	2300      	movs	r3, #0
 80062a2:	e02b      	b.n	80062fc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80062a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80062a6:	3310      	adds	r3, #16
 80062a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062aa:	4413      	add	r3, r2
 80062ac:	3303      	adds	r3, #3
 80062ae:	f023 0303 	bic.w	r3, r3, #3
 80062b2:	4618      	mov	r0, r3
 80062b4:	88b9      	ldrh	r1, [r7, #4]
 80062b6:	88ba      	ldrh	r2, [r7, #4]
 80062b8:	2300      	movs	r3, #0
 80062ba:	9301      	str	r3, [sp, #4]
 80062bc:	887b      	ldrh	r3, [r7, #2]
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	460b      	mov	r3, r1
 80062c2:	4601      	mov	r1, r0
 80062c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80062c6:	f7ff ff09 	bl	80060dc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80062ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d010      	beq.n	80062f8 <pbuf_alloc+0x1c8>
 80062d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006304 <pbuf_alloc+0x1d4>)
 80062d8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80062dc:	490d      	ldr	r1, [pc, #52]	@ (8006314 <pbuf_alloc+0x1e4>)
 80062de:	480b      	ldr	r0, [pc, #44]	@ (800630c <pbuf_alloc+0x1dc>)
 80062e0:	f008 ffe8 	bl	800f2b4 <printf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80062e4:	e008      	b.n	80062f8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80062e6:	4b07      	ldr	r3, [pc, #28]	@ (8006304 <pbuf_alloc+0x1d4>)
 80062e8:	f240 1227 	movw	r2, #295	@ 0x127
 80062ec:	490a      	ldr	r1, [pc, #40]	@ (8006318 <pbuf_alloc+0x1e8>)
 80062ee:	4807      	ldr	r0, [pc, #28]	@ (800630c <pbuf_alloc+0x1dc>)
 80062f0:	f008 ffe0 	bl	800f2b4 <printf>
      return NULL;
 80062f4:	2300      	movs	r3, #0
 80062f6:	e001      	b.n	80062fc <pbuf_alloc+0x1cc>
      break;
 80062f8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80062fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3728      	adds	r7, #40	@ 0x28
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	08014254 	.word	0x08014254
 8006308:	08014284 	.word	0x08014284
 800630c:	080142b4 	.word	0x080142b4
 8006310:	080142dc 	.word	0x080142dc
 8006314:	08014310 	.word	0x08014310
 8006318:	0801433c 	.word	0x0801433c

0800631c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af02      	add	r7, sp, #8
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	807b      	strh	r3, [r7, #2]
 8006328:	4613      	mov	r3, r2
 800632a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800632c:	883b      	ldrh	r3, [r7, #0]
 800632e:	2b41      	cmp	r3, #65	@ 0x41
 8006330:	d009      	beq.n	8006346 <pbuf_alloc_reference+0x2a>
 8006332:	883b      	ldrh	r3, [r7, #0]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d006      	beq.n	8006346 <pbuf_alloc_reference+0x2a>
 8006338:	4b0f      	ldr	r3, [pc, #60]	@ (8006378 <pbuf_alloc_reference+0x5c>)
 800633a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800633e:	490f      	ldr	r1, [pc, #60]	@ (800637c <pbuf_alloc_reference+0x60>)
 8006340:	480f      	ldr	r0, [pc, #60]	@ (8006380 <pbuf_alloc_reference+0x64>)
 8006342:	f008 ffb7 	bl	800f2b4 <printf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006346:	2007      	movs	r0, #7
 8006348:	f7ff faf0 	bl	800592c <memp_malloc>
 800634c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006354:	2300      	movs	r3, #0
 8006356:	e00b      	b.n	8006370 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006358:	8879      	ldrh	r1, [r7, #2]
 800635a:	887a      	ldrh	r2, [r7, #2]
 800635c:	2300      	movs	r3, #0
 800635e:	9301      	str	r3, [sp, #4]
 8006360:	883b      	ldrh	r3, [r7, #0]
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	460b      	mov	r3, r1
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f7ff feb7 	bl	80060dc <pbuf_init_alloced_pbuf>
  return p;
 800636e:	68fb      	ldr	r3, [r7, #12]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	08014254 	.word	0x08014254
 800637c:	08014358 	.word	0x08014358
 8006380:	080142b4 	.word	0x080142b4

08006384 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b088      	sub	sp, #32
 8006388:	af02      	add	r7, sp, #8
 800638a:	607b      	str	r3, [r7, #4]
 800638c:	4603      	mov	r3, r0
 800638e:	73fb      	strb	r3, [r7, #15]
 8006390:	460b      	mov	r3, r1
 8006392:	81bb      	strh	r3, [r7, #12]
 8006394:	4613      	mov	r3, r2
 8006396:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800639c:	8a7b      	ldrh	r3, [r7, #18]
 800639e:	3303      	adds	r3, #3
 80063a0:	f023 0203 	bic.w	r2, r3, #3
 80063a4:	89bb      	ldrh	r3, [r7, #12]
 80063a6:	441a      	add	r2, r3
 80063a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d901      	bls.n	80063b2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	e018      	b.n	80063e4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d007      	beq.n	80063c8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80063b8:	8a7b      	ldrh	r3, [r7, #18]
 80063ba:	3303      	adds	r3, #3
 80063bc:	f023 0303 	bic.w	r3, r3, #3
 80063c0:	6a3a      	ldr	r2, [r7, #32]
 80063c2:	4413      	add	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]
 80063c6:	e001      	b.n	80063cc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80063c8:	2300      	movs	r3, #0
 80063ca:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	89b9      	ldrh	r1, [r7, #12]
 80063d0:	89ba      	ldrh	r2, [r7, #12]
 80063d2:	2302      	movs	r3, #2
 80063d4:	9301      	str	r3, [sp, #4]
 80063d6:	897b      	ldrh	r3, [r7, #10]
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	460b      	mov	r3, r1
 80063dc:	6979      	ldr	r1, [r7, #20]
 80063de:	f7ff fe7d 	bl	80060dc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80063e2:	687b      	ldr	r3, [r7, #4]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	460b      	mov	r3, r1
 80063f6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <pbuf_realloc+0x20>
 80063fe:	4b3a      	ldr	r3, [pc, #232]	@ (80064e8 <pbuf_realloc+0xfc>)
 8006400:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8006404:	4939      	ldr	r1, [pc, #228]	@ (80064ec <pbuf_realloc+0x100>)
 8006406:	483a      	ldr	r0, [pc, #232]	@ (80064f0 <pbuf_realloc+0x104>)
 8006408:	f008 ff54 	bl	800f2b4 <printf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	891b      	ldrh	r3, [r3, #8]
 8006410:	887a      	ldrh	r2, [r7, #2]
 8006412:	429a      	cmp	r2, r3
 8006414:	d263      	bcs.n	80064de <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	891a      	ldrh	r2, [r3, #8]
 800641a:	887b      	ldrh	r3, [r7, #2]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006420:	887b      	ldrh	r3, [r7, #2]
 8006422:	817b      	strh	r3, [r7, #10]
  q = p;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006428:	e018      	b.n	800645c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	895b      	ldrh	r3, [r3, #10]
 800642e:	897a      	ldrh	r2, [r7, #10]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	891a      	ldrh	r2, [r3, #8]
 8006438:	893b      	ldrh	r3, [r7, #8]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	b29a      	uxth	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d106      	bne.n	800645c <pbuf_realloc+0x70>
 800644e:	4b26      	ldr	r3, [pc, #152]	@ (80064e8 <pbuf_realloc+0xfc>)
 8006450:	f240 12af 	movw	r2, #431	@ 0x1af
 8006454:	4927      	ldr	r1, [pc, #156]	@ (80064f4 <pbuf_realloc+0x108>)
 8006456:	4826      	ldr	r0, [pc, #152]	@ (80064f0 <pbuf_realloc+0x104>)
 8006458:	f008 ff2c 	bl	800f2b4 <printf>
  while (rem_len > q->len) {
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	895b      	ldrh	r3, [r3, #10]
 8006460:	897a      	ldrh	r2, [r7, #10]
 8006462:	429a      	cmp	r2, r3
 8006464:	d8e1      	bhi.n	800642a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	7b1b      	ldrb	r3, [r3, #12]
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	2b00      	cmp	r3, #0
 8006470:	d121      	bne.n	80064b6 <pbuf_realloc+0xca>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	895b      	ldrh	r3, [r3, #10]
 8006476:	897a      	ldrh	r2, [r7, #10]
 8006478:	429a      	cmp	r2, r3
 800647a:	d01c      	beq.n	80064b6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	7b5b      	ldrb	r3, [r3, #13]
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d116      	bne.n	80064b6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	b29a      	uxth	r2, r3
 8006492:	897b      	ldrh	r3, [r7, #10]
 8006494:	4413      	add	r3, r2
 8006496:	b29b      	uxth	r3, r3
 8006498:	4619      	mov	r1, r3
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f7fe ffba 	bl	8005414 <mem_trim>
 80064a0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d106      	bne.n	80064b6 <pbuf_realloc+0xca>
 80064a8:	4b0f      	ldr	r3, [pc, #60]	@ (80064e8 <pbuf_realloc+0xfc>)
 80064aa:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80064ae:	4912      	ldr	r1, [pc, #72]	@ (80064f8 <pbuf_realloc+0x10c>)
 80064b0:	480f      	ldr	r0, [pc, #60]	@ (80064f0 <pbuf_realloc+0x104>)
 80064b2:	f008 feff 	bl	800f2b4 <printf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	897a      	ldrh	r2, [r7, #10]
 80064ba:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	895a      	ldrh	r2, [r3, #10]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d004      	beq.n	80064d6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f000 f911 	bl	80066f8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	e000      	b.n	80064e0 <pbuf_realloc+0xf4>
    return;
 80064de:	bf00      	nop

}
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	08014254 	.word	0x08014254
 80064ec:	0801436c 	.word	0x0801436c
 80064f0:	080142b4 	.word	0x080142b4
 80064f4:	08014384 	.word	0x08014384
 80064f8:	0801439c 	.word	0x0801439c

080064fc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	4613      	mov	r3, r2
 8006508:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d106      	bne.n	800651e <pbuf_add_header_impl+0x22>
 8006510:	4b2b      	ldr	r3, [pc, #172]	@ (80065c0 <pbuf_add_header_impl+0xc4>)
 8006512:	f240 12df 	movw	r2, #479	@ 0x1df
 8006516:	492b      	ldr	r1, [pc, #172]	@ (80065c4 <pbuf_add_header_impl+0xc8>)
 8006518:	482b      	ldr	r0, [pc, #172]	@ (80065c8 <pbuf_add_header_impl+0xcc>)
 800651a:	f008 fecb 	bl	800f2b4 <printf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <pbuf_add_header_impl+0x30>
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800652a:	d301      	bcc.n	8006530 <pbuf_add_header_impl+0x34>
    return 1;
 800652c:	2301      	movs	r3, #1
 800652e:	e043      	b.n	80065b8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <pbuf_add_header_impl+0x3e>
    return 0;
 8006536:	2300      	movs	r3, #0
 8006538:	e03e      	b.n	80065b8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	891a      	ldrh	r2, [r3, #8]
 8006542:	8a7b      	ldrh	r3, [r7, #18]
 8006544:	4413      	add	r3, r2
 8006546:	b29b      	uxth	r3, r3
 8006548:	8a7a      	ldrh	r2, [r7, #18]
 800654a:	429a      	cmp	r2, r3
 800654c:	d901      	bls.n	8006552 <pbuf_add_header_impl+0x56>
    return 1;
 800654e:	2301      	movs	r3, #1
 8006550:	e032      	b.n	80065b8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	7b1b      	ldrb	r3, [r3, #12]
 8006556:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006558:	8a3b      	ldrh	r3, [r7, #16]
 800655a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00c      	beq.n	800657c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	425b      	negs	r3, r3
 800656a:	4413      	add	r3, r2
 800656c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3310      	adds	r3, #16
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	429a      	cmp	r2, r3
 8006576:	d20d      	bcs.n	8006594 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006578:	2301      	movs	r3, #1
 800657a:	e01d      	b.n	80065b8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800657c:	79fb      	ldrb	r3, [r7, #7]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d006      	beq.n	8006590 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	425b      	negs	r3, r3
 800658a:	4413      	add	r3, r2
 800658c:	617b      	str	r3, [r7, #20]
 800658e:	e001      	b.n	8006594 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006590:	2301      	movs	r3, #1
 8006592:	e011      	b.n	80065b8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	895a      	ldrh	r2, [r3, #10]
 800659e:	8a7b      	ldrh	r3, [r7, #18]
 80065a0:	4413      	add	r3, r2
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	891a      	ldrh	r2, [r3, #8]
 80065ac:	8a7b      	ldrh	r3, [r7, #18]
 80065ae:	4413      	add	r3, r2
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	811a      	strh	r2, [r3, #8]


  return 0;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3718      	adds	r7, #24
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	08014254 	.word	0x08014254
 80065c4:	080143b8 	.word	0x080143b8
 80065c8:	080142b4 	.word	0x080142b4

080065cc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80065d6:	2200      	movs	r2, #0
 80065d8:	6839      	ldr	r1, [r7, #0]
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7ff ff8e 	bl	80064fc <pbuf_add_header_impl>
 80065e0:	4603      	mov	r3, r0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
	...

080065ec <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d106      	bne.n	800660a <pbuf_remove_header+0x1e>
 80065fc:	4b20      	ldr	r3, [pc, #128]	@ (8006680 <pbuf_remove_header+0x94>)
 80065fe:	f240 224b 	movw	r2, #587	@ 0x24b
 8006602:	4920      	ldr	r1, [pc, #128]	@ (8006684 <pbuf_remove_header+0x98>)
 8006604:	4820      	ldr	r0, [pc, #128]	@ (8006688 <pbuf_remove_header+0x9c>)
 8006606:	f008 fe55 	bl	800f2b4 <printf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d003      	beq.n	8006618 <pbuf_remove_header+0x2c>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006616:	d301      	bcc.n	800661c <pbuf_remove_header+0x30>
    return 1;
 8006618:	2301      	movs	r3, #1
 800661a:	e02c      	b.n	8006676 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <pbuf_remove_header+0x3a>
    return 0;
 8006622:	2300      	movs	r3, #0
 8006624:	e027      	b.n	8006676 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	895b      	ldrh	r3, [r3, #10]
 800662e:	89fa      	ldrh	r2, [r7, #14]
 8006630:	429a      	cmp	r2, r3
 8006632:	d908      	bls.n	8006646 <pbuf_remove_header+0x5a>
 8006634:	4b12      	ldr	r3, [pc, #72]	@ (8006680 <pbuf_remove_header+0x94>)
 8006636:	f240 2255 	movw	r2, #597	@ 0x255
 800663a:	4914      	ldr	r1, [pc, #80]	@ (800668c <pbuf_remove_header+0xa0>)
 800663c:	4812      	ldr	r0, [pc, #72]	@ (8006688 <pbuf_remove_header+0x9c>)
 800663e:	f008 fe39 	bl	800f2b4 <printf>
 8006642:	2301      	movs	r3, #1
 8006644:	e017      	b.n	8006676 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	441a      	add	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	895a      	ldrh	r2, [r3, #10]
 800665c:	89fb      	ldrh	r3, [r7, #14]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	b29a      	uxth	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	891a      	ldrh	r2, [r3, #8]
 800666a:	89fb      	ldrh	r3, [r7, #14]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	b29a      	uxth	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	08014254 	.word	0x08014254
 8006684:	080143b8 	.word	0x080143b8
 8006688:	080142b4 	.word	0x080142b4
 800668c:	080143c4 	.word	0x080143c4

08006690 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	807b      	strh	r3, [r7, #2]
 800669c:	4613      	mov	r3, r2
 800669e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80066a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	da08      	bge.n	80066ba <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80066a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80066ac:	425b      	negs	r3, r3
 80066ae:	4619      	mov	r1, r3
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7ff ff9b 	bl	80065ec <pbuf_remove_header>
 80066b6:	4603      	mov	r3, r0
 80066b8:	e007      	b.n	80066ca <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80066ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80066be:	787a      	ldrb	r2, [r7, #1]
 80066c0:	4619      	mov	r1, r3
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7ff ff1a 	bl	80064fc <pbuf_add_header_impl>
 80066c8:	4603      	mov	r3, r0
  }
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b082      	sub	sp, #8
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	460b      	mov	r3, r1
 80066dc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80066de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80066e2:	2201      	movs	r2, #1
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7ff ffd2 	bl	8006690 <pbuf_header_impl>
 80066ec:	4603      	mov	r3, r0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
	...

080066f8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10b      	bne.n	800671e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d106      	bne.n	800671a <pbuf_free+0x22>
 800670c:	4b38      	ldr	r3, [pc, #224]	@ (80067f0 <pbuf_free+0xf8>)
 800670e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8006712:	4938      	ldr	r1, [pc, #224]	@ (80067f4 <pbuf_free+0xfc>)
 8006714:	4838      	ldr	r0, [pc, #224]	@ (80067f8 <pbuf_free+0x100>)
 8006716:	f008 fdcd 	bl	800f2b4 <printf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800671a:	2300      	movs	r3, #0
 800671c:	e063      	b.n	80067e6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800671e:	2300      	movs	r3, #0
 8006720:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006722:	e05c      	b.n	80067de <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	7b9b      	ldrb	r3, [r3, #14]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d106      	bne.n	800673a <pbuf_free+0x42>
 800672c:	4b30      	ldr	r3, [pc, #192]	@ (80067f0 <pbuf_free+0xf8>)
 800672e:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8006732:	4932      	ldr	r1, [pc, #200]	@ (80067fc <pbuf_free+0x104>)
 8006734:	4830      	ldr	r0, [pc, #192]	@ (80067f8 <pbuf_free+0x100>)
 8006736:	f008 fdbd 	bl	800f2b4 <printf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	7b9b      	ldrb	r3, [r3, #14]
 800673e:	3b01      	subs	r3, #1
 8006740:	b2da      	uxtb	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	739a      	strb	r2, [r3, #14]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	7b9b      	ldrb	r3, [r3, #14]
 800674a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800674c:	7dbb      	ldrb	r3, [r7, #22]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d143      	bne.n	80067da <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	7b1b      	ldrb	r3, [r3, #12]
 800675c:	f003 030f 	and.w	r3, r3, #15
 8006760:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	7b5b      	ldrb	r3, [r3, #13]
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b00      	cmp	r3, #0
 800676c:	d011      	beq.n	8006792 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d106      	bne.n	8006788 <pbuf_free+0x90>
 800677a:	4b1d      	ldr	r3, [pc, #116]	@ (80067f0 <pbuf_free+0xf8>)
 800677c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8006780:	491f      	ldr	r1, [pc, #124]	@ (8006800 <pbuf_free+0x108>)
 8006782:	481d      	ldr	r0, [pc, #116]	@ (80067f8 <pbuf_free+0x100>)
 8006784:	f008 fd96 	bl	800f2b4 <printf>
        pc->custom_free_function(p);
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	4798      	blx	r3
 8006790:	e01d      	b.n	80067ce <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006792:	7bfb      	ldrb	r3, [r7, #15]
 8006794:	2b02      	cmp	r3, #2
 8006796:	d104      	bne.n	80067a2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	2008      	movs	r0, #8
 800679c:	f7ff f936 	bl	8005a0c <memp_free>
 80067a0:	e015      	b.n	80067ce <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d104      	bne.n	80067b2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80067a8:	6879      	ldr	r1, [r7, #4]
 80067aa:	2007      	movs	r0, #7
 80067ac:	f7ff f92e 	bl	8005a0c <memp_free>
 80067b0:	e00d      	b.n	80067ce <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d103      	bne.n	80067c0 <pbuf_free+0xc8>
          mem_free(p);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7fe fdc1 	bl	8005340 <mem_free>
 80067be:	e006      	b.n	80067ce <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80067c0:	4b0b      	ldr	r3, [pc, #44]	@ (80067f0 <pbuf_free+0xf8>)
 80067c2:	f240 320f 	movw	r2, #783	@ 0x30f
 80067c6:	490f      	ldr	r1, [pc, #60]	@ (8006804 <pbuf_free+0x10c>)
 80067c8:	480b      	ldr	r0, [pc, #44]	@ (80067f8 <pbuf_free+0x100>)
 80067ca:	f008 fd73 	bl	800f2b4 <printf>
        }
      }
      count++;
 80067ce:	7dfb      	ldrb	r3, [r7, #23]
 80067d0:	3301      	adds	r3, #1
 80067d2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	607b      	str	r3, [r7, #4]
 80067d8:	e001      	b.n	80067de <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80067da:	2300      	movs	r3, #0
 80067dc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d19f      	bne.n	8006724 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80067e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	08014254 	.word	0x08014254
 80067f4:	080143b8 	.word	0x080143b8
 80067f8:	080142b4 	.word	0x080142b4
 80067fc:	080143e4 	.word	0x080143e4
 8006800:	080143fc 	.word	0x080143fc
 8006804:	08014420 	.word	0x08014420

08006808 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006810:	2300      	movs	r3, #0
 8006812:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006814:	e005      	b.n	8006822 <pbuf_clen+0x1a>
    ++len;
 8006816:	89fb      	ldrh	r3, [r7, #14]
 8006818:	3301      	adds	r3, #1
 800681a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1f6      	bne.n	8006816 <pbuf_clen+0xe>
  }
  return len;
 8006828:	89fb      	ldrh	r3, [r7, #14]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
	...

08006838 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d010      	beq.n	8006868 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	7b9b      	ldrb	r3, [r3, #14]
 800684a:	3301      	adds	r3, #1
 800684c:	b2da      	uxtb	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	7b9b      	ldrb	r3, [r3, #14]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <pbuf_ref+0x30>
 800685a:	4b05      	ldr	r3, [pc, #20]	@ (8006870 <pbuf_ref+0x38>)
 800685c:	f240 3242 	movw	r2, #834	@ 0x342
 8006860:	4904      	ldr	r1, [pc, #16]	@ (8006874 <pbuf_ref+0x3c>)
 8006862:	4805      	ldr	r0, [pc, #20]	@ (8006878 <pbuf_ref+0x40>)
 8006864:	f008 fd26 	bl	800f2b4 <printf>
  }
}
 8006868:	bf00      	nop
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	08014254 	.word	0x08014254
 8006874:	08014434 	.word	0x08014434
 8006878:	080142b4 	.word	0x080142b4

0800687c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <pbuf_cat+0x16>
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d107      	bne.n	80068a2 <pbuf_cat+0x26>
 8006892:	4b20      	ldr	r3, [pc, #128]	@ (8006914 <pbuf_cat+0x98>)
 8006894:	f240 3259 	movw	r2, #857	@ 0x359
 8006898:	491f      	ldr	r1, [pc, #124]	@ (8006918 <pbuf_cat+0x9c>)
 800689a:	4820      	ldr	r0, [pc, #128]	@ (800691c <pbuf_cat+0xa0>)
 800689c:	f008 fd0a 	bl	800f2b4 <printf>
 80068a0:	e034      	b.n	800690c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	60fb      	str	r3, [r7, #12]
 80068a6:	e00a      	b.n	80068be <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	891a      	ldrh	r2, [r3, #8]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	891b      	ldrh	r3, [r3, #8]
 80068b0:	4413      	add	r3, r2
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1f0      	bne.n	80068a8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	891a      	ldrh	r2, [r3, #8]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	895b      	ldrh	r3, [r3, #10]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d006      	beq.n	80068e0 <pbuf_cat+0x64>
 80068d2:	4b10      	ldr	r3, [pc, #64]	@ (8006914 <pbuf_cat+0x98>)
 80068d4:	f240 3262 	movw	r2, #866	@ 0x362
 80068d8:	4911      	ldr	r1, [pc, #68]	@ (8006920 <pbuf_cat+0xa4>)
 80068da:	4810      	ldr	r0, [pc, #64]	@ (800691c <pbuf_cat+0xa0>)
 80068dc:	f008 fcea 	bl	800f2b4 <printf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d006      	beq.n	80068f6 <pbuf_cat+0x7a>
 80068e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006914 <pbuf_cat+0x98>)
 80068ea:	f240 3263 	movw	r2, #867	@ 0x363
 80068ee:	490d      	ldr	r1, [pc, #52]	@ (8006924 <pbuf_cat+0xa8>)
 80068f0:	480a      	ldr	r0, [pc, #40]	@ (800691c <pbuf_cat+0xa0>)
 80068f2:	f008 fcdf 	bl	800f2b4 <printf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	891a      	ldrh	r2, [r3, #8]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	891b      	ldrh	r3, [r3, #8]
 80068fe:	4413      	add	r3, r2
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	08014254 	.word	0x08014254
 8006918:	08014448 	.word	0x08014448
 800691c:	080142b4 	.word	0x080142b4
 8006920:	08014480 	.word	0x08014480
 8006924:	080144b0 	.word	0x080144b0

08006928 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff ffa1 	bl	800687c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800693a:	6838      	ldr	r0, [r7, #0]
 800693c:	f7ff ff7c 	bl	8006838 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006940:	bf00      	nop
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006952:	2300      	movs	r3, #0
 8006954:	617b      	str	r3, [r7, #20]
 8006956:	2300      	movs	r3, #0
 8006958:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d008      	beq.n	8006972 <pbuf_copy+0x2a>
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d005      	beq.n	8006972 <pbuf_copy+0x2a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	891a      	ldrh	r2, [r3, #8]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	891b      	ldrh	r3, [r3, #8]
 800696e:	429a      	cmp	r2, r3
 8006970:	d209      	bcs.n	8006986 <pbuf_copy+0x3e>
 8006972:	4b57      	ldr	r3, [pc, #348]	@ (8006ad0 <pbuf_copy+0x188>)
 8006974:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8006978:	4956      	ldr	r1, [pc, #344]	@ (8006ad4 <pbuf_copy+0x18c>)
 800697a:	4857      	ldr	r0, [pc, #348]	@ (8006ad8 <pbuf_copy+0x190>)
 800697c:	f008 fc9a 	bl	800f2b4 <printf>
 8006980:	f06f 030f 	mvn.w	r3, #15
 8006984:	e09f      	b.n	8006ac6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	895b      	ldrh	r3, [r3, #10]
 800698a:	461a      	mov	r2, r3
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	1ad2      	subs	r2, r2, r3
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	895b      	ldrh	r3, [r3, #10]
 8006994:	4619      	mov	r1, r3
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	1acb      	subs	r3, r1, r3
 800699a:	429a      	cmp	r2, r3
 800699c:	d306      	bcc.n	80069ac <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	895b      	ldrh	r3, [r3, #10]
 80069a2:	461a      	mov	r2, r3
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	e005      	b.n	80069b8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	895b      	ldrh	r3, [r3, #10]
 80069b0:	461a      	mov	r2, r3
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	18d0      	adds	r0, r2, r3
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	4413      	add	r3, r2
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4619      	mov	r1, r3
 80069cc:	f008 fdbc 	bl	800f548 <memcpy>
    offset_to += len;
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	4413      	add	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4413      	add	r3, r2
 80069de:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	895b      	ldrh	r3, [r3, #10]
 80069e4:	461a      	mov	r2, r3
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d906      	bls.n	80069fa <pbuf_copy+0xb2>
 80069ec:	4b38      	ldr	r3, [pc, #224]	@ (8006ad0 <pbuf_copy+0x188>)
 80069ee:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80069f2:	493a      	ldr	r1, [pc, #232]	@ (8006adc <pbuf_copy+0x194>)
 80069f4:	4838      	ldr	r0, [pc, #224]	@ (8006ad8 <pbuf_copy+0x190>)
 80069f6:	f008 fc5d 	bl	800f2b4 <printf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	895b      	ldrh	r3, [r3, #10]
 80069fe:	461a      	mov	r2, r3
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d906      	bls.n	8006a14 <pbuf_copy+0xcc>
 8006a06:	4b32      	ldr	r3, [pc, #200]	@ (8006ad0 <pbuf_copy+0x188>)
 8006a08:	f240 32da 	movw	r2, #986	@ 0x3da
 8006a0c:	4934      	ldr	r1, [pc, #208]	@ (8006ae0 <pbuf_copy+0x198>)
 8006a0e:	4832      	ldr	r0, [pc, #200]	@ (8006ad8 <pbuf_copy+0x190>)
 8006a10:	f008 fc50 	bl	800f2b4 <printf>
    if (offset_from >= p_from->len) {
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	895b      	ldrh	r3, [r3, #10]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d304      	bcc.n	8006a2a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006a20:	2300      	movs	r3, #0
 8006a22:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	895b      	ldrh	r3, [r3, #10]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d114      	bne.n	8006a60 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006a36:	2300      	movs	r3, #0
 8006a38:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10c      	bne.n	8006a60 <pbuf_copy+0x118>
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d009      	beq.n	8006a60 <pbuf_copy+0x118>
 8006a4c:	4b20      	ldr	r3, [pc, #128]	@ (8006ad0 <pbuf_copy+0x188>)
 8006a4e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8006a52:	4924      	ldr	r1, [pc, #144]	@ (8006ae4 <pbuf_copy+0x19c>)
 8006a54:	4820      	ldr	r0, [pc, #128]	@ (8006ad8 <pbuf_copy+0x190>)
 8006a56:	f008 fc2d 	bl	800f2b4 <printf>
 8006a5a:	f06f 030f 	mvn.w	r3, #15
 8006a5e:	e032      	b.n	8006ac6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d013      	beq.n	8006a8e <pbuf_copy+0x146>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	895a      	ldrh	r2, [r3, #10]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	891b      	ldrh	r3, [r3, #8]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d10d      	bne.n	8006a8e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d009      	beq.n	8006a8e <pbuf_copy+0x146>
 8006a7a:	4b15      	ldr	r3, [pc, #84]	@ (8006ad0 <pbuf_copy+0x188>)
 8006a7c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8006a80:	4919      	ldr	r1, [pc, #100]	@ (8006ae8 <pbuf_copy+0x1a0>)
 8006a82:	4815      	ldr	r0, [pc, #84]	@ (8006ad8 <pbuf_copy+0x190>)
 8006a84:	f008 fc16 	bl	800f2b4 <printf>
 8006a88:	f06f 0305 	mvn.w	r3, #5
 8006a8c:	e01b      	b.n	8006ac6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d013      	beq.n	8006abc <pbuf_copy+0x174>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	895a      	ldrh	r2, [r3, #10]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	891b      	ldrh	r3, [r3, #8]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d10d      	bne.n	8006abc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d009      	beq.n	8006abc <pbuf_copy+0x174>
 8006aa8:	4b09      	ldr	r3, [pc, #36]	@ (8006ad0 <pbuf_copy+0x188>)
 8006aaa:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8006aae:	490e      	ldr	r1, [pc, #56]	@ (8006ae8 <pbuf_copy+0x1a0>)
 8006ab0:	4809      	ldr	r0, [pc, #36]	@ (8006ad8 <pbuf_copy+0x190>)
 8006ab2:	f008 fbff 	bl	800f2b4 <printf>
 8006ab6:	f06f 0305 	mvn.w	r3, #5
 8006aba:	e004      	b.n	8006ac6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f47f af61 	bne.w	8006986 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3718      	adds	r7, #24
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	08014254 	.word	0x08014254
 8006ad4:	080144fc 	.word	0x080144fc
 8006ad8:	080142b4 	.word	0x080142b4
 8006adc:	0801452c 	.word	0x0801452c
 8006ae0:	08014544 	.word	0x08014544
 8006ae4:	08014560 	.word	0x08014560
 8006ae8:	08014570 	.word	0x08014570

08006aec <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b088      	sub	sp, #32
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	4611      	mov	r1, r2
 8006af8:	461a      	mov	r2, r3
 8006afa:	460b      	mov	r3, r1
 8006afc:	80fb      	strh	r3, [r7, #6]
 8006afe:	4613      	mov	r3, r2
 8006b00:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006b02:	2300      	movs	r3, #0
 8006b04:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006b06:	2300      	movs	r3, #0
 8006b08:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d108      	bne.n	8006b22 <pbuf_copy_partial+0x36>
 8006b10:	4b2b      	ldr	r3, [pc, #172]	@ (8006bc0 <pbuf_copy_partial+0xd4>)
 8006b12:	f240 420a 	movw	r2, #1034	@ 0x40a
 8006b16:	492b      	ldr	r1, [pc, #172]	@ (8006bc4 <pbuf_copy_partial+0xd8>)
 8006b18:	482b      	ldr	r0, [pc, #172]	@ (8006bc8 <pbuf_copy_partial+0xdc>)
 8006b1a:	f008 fbcb 	bl	800f2b4 <printf>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	e04a      	b.n	8006bb8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d108      	bne.n	8006b3a <pbuf_copy_partial+0x4e>
 8006b28:	4b25      	ldr	r3, [pc, #148]	@ (8006bc0 <pbuf_copy_partial+0xd4>)
 8006b2a:	f240 420b 	movw	r2, #1035	@ 0x40b
 8006b2e:	4927      	ldr	r1, [pc, #156]	@ (8006bcc <pbuf_copy_partial+0xe0>)
 8006b30:	4825      	ldr	r0, [pc, #148]	@ (8006bc8 <pbuf_copy_partial+0xdc>)
 8006b32:	f008 fbbf 	bl	800f2b4 <printf>
 8006b36:	2300      	movs	r3, #0
 8006b38:	e03e      	b.n	8006bb8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	61fb      	str	r3, [r7, #28]
 8006b3e:	e034      	b.n	8006baa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006b40:	88bb      	ldrh	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00a      	beq.n	8006b5c <pbuf_copy_partial+0x70>
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	895b      	ldrh	r3, [r3, #10]
 8006b4a:	88ba      	ldrh	r2, [r7, #4]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d305      	bcc.n	8006b5c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	895b      	ldrh	r3, [r3, #10]
 8006b54:	88ba      	ldrh	r2, [r7, #4]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	80bb      	strh	r3, [r7, #4]
 8006b5a:	e023      	b.n	8006ba4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	895a      	ldrh	r2, [r3, #10]
 8006b60:	88bb      	ldrh	r3, [r7, #4]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006b66:	8b3a      	ldrh	r2, [r7, #24]
 8006b68:	88fb      	ldrh	r3, [r7, #6]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d901      	bls.n	8006b72 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006b6e:	88fb      	ldrh	r3, [r7, #6]
 8006b70:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006b72:	8b7b      	ldrh	r3, [r7, #26]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	18d0      	adds	r0, r2, r3
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	88bb      	ldrh	r3, [r7, #4]
 8006b7e:	4413      	add	r3, r2
 8006b80:	8b3a      	ldrh	r2, [r7, #24]
 8006b82:	4619      	mov	r1, r3
 8006b84:	f008 fce0 	bl	800f548 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006b88:	8afa      	ldrh	r2, [r7, #22]
 8006b8a:	8b3b      	ldrh	r3, [r7, #24]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006b90:	8b7a      	ldrh	r2, [r7, #26]
 8006b92:	8b3b      	ldrh	r3, [r7, #24]
 8006b94:	4413      	add	r3, r2
 8006b96:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006b98:	88fa      	ldrh	r2, [r7, #6]
 8006b9a:	8b3b      	ldrh	r3, [r7, #24]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	61fb      	str	r3, [r7, #28]
 8006baa:	88fb      	ldrh	r3, [r7, #6]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <pbuf_copy_partial+0xca>
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1c4      	bne.n	8006b40 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006bb6:	8afb      	ldrh	r3, [r7, #22]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3720      	adds	r7, #32
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	08014254 	.word	0x08014254
 8006bc4:	0801459c 	.word	0x0801459c
 8006bc8:	080142b4 	.word	0x080142b4
 8006bcc:	080145bc 	.word	0x080145bc

08006bd0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b088      	sub	sp, #32
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8006bde:	88fb      	ldrh	r3, [r7, #6]
 8006be0:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8006be2:	2300      	movs	r3, #0
 8006be4:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d109      	bne.n	8006c00 <pbuf_take+0x30>
 8006bec:	4b3a      	ldr	r3, [pc, #232]	@ (8006cd8 <pbuf_take+0x108>)
 8006bee:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8006bf2:	493a      	ldr	r1, [pc, #232]	@ (8006cdc <pbuf_take+0x10c>)
 8006bf4:	483a      	ldr	r0, [pc, #232]	@ (8006ce0 <pbuf_take+0x110>)
 8006bf6:	f008 fb5d 	bl	800f2b4 <printf>
 8006bfa:	f06f 030f 	mvn.w	r3, #15
 8006bfe:	e067      	b.n	8006cd0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d109      	bne.n	8006c1a <pbuf_take+0x4a>
 8006c06:	4b34      	ldr	r3, [pc, #208]	@ (8006cd8 <pbuf_take+0x108>)
 8006c08:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 8006c0c:	4935      	ldr	r1, [pc, #212]	@ (8006ce4 <pbuf_take+0x114>)
 8006c0e:	4834      	ldr	r0, [pc, #208]	@ (8006ce0 <pbuf_take+0x110>)
 8006c10:	f008 fb50 	bl	800f2b4 <printf>
 8006c14:	f06f 030f 	mvn.w	r3, #15
 8006c18:	e05a      	b.n	8006cd0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	891b      	ldrh	r3, [r3, #8]
 8006c1e:	88fa      	ldrh	r2, [r7, #6]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d909      	bls.n	8006c38 <pbuf_take+0x68>
 8006c24:	4b2c      	ldr	r3, [pc, #176]	@ (8006cd8 <pbuf_take+0x108>)
 8006c26:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 8006c2a:	492f      	ldr	r1, [pc, #188]	@ (8006ce8 <pbuf_take+0x118>)
 8006c2c:	482c      	ldr	r0, [pc, #176]	@ (8006ce0 <pbuf_take+0x110>)
 8006c2e:	f008 fb41 	bl	800f2b4 <printf>
 8006c32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c36:	e04b      	b.n	8006cd0 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d007      	beq.n	8006c4e <pbuf_take+0x7e>
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d004      	beq.n	8006c4e <pbuf_take+0x7e>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	891b      	ldrh	r3, [r3, #8]
 8006c48:	88fa      	ldrh	r2, [r7, #6]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d902      	bls.n	8006c54 <pbuf_take+0x84>
    return ERR_ARG;
 8006c4e:	f06f 030f 	mvn.w	r3, #15
 8006c52:	e03d      	b.n	8006cd0 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	61fb      	str	r3, [r7, #28]
 8006c58:	e028      	b.n	8006cac <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d106      	bne.n	8006c6e <pbuf_take+0x9e>
 8006c60:	4b1d      	ldr	r3, [pc, #116]	@ (8006cd8 <pbuf_take+0x108>)
 8006c62:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8006c66:	4921      	ldr	r1, [pc, #132]	@ (8006cec <pbuf_take+0x11c>)
 8006c68:	481d      	ldr	r0, [pc, #116]	@ (8006ce0 <pbuf_take+0x110>)
 8006c6a:	f008 fb23 	bl	800f2b4 <printf>
    buf_copy_len = total_copy_len;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	895b      	ldrh	r3, [r3, #10]
 8006c76:	461a      	mov	r2, r3
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d902      	bls.n	8006c84 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	895b      	ldrh	r3, [r3, #10]
 8006c82:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	6858      	ldr	r0, [r3, #4]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	69ba      	ldr	r2, [r7, #24]
 8006c90:	4619      	mov	r1, r3
 8006c92:	f008 fc59 	bl	800f548 <memcpy>
    total_copy_len -= buf_copy_len;
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	61fb      	str	r3, [r7, #28]
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1d3      	bne.n	8006c5a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d103      	bne.n	8006cc0 <pbuf_take+0xf0>
 8006cb8:	88fb      	ldrh	r3, [r7, #6]
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d006      	beq.n	8006cce <pbuf_take+0xfe>
 8006cc0:	4b05      	ldr	r3, [pc, #20]	@ (8006cd8 <pbuf_take+0x108>)
 8006cc2:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8006cc6:	490a      	ldr	r1, [pc, #40]	@ (8006cf0 <pbuf_take+0x120>)
 8006cc8:	4805      	ldr	r0, [pc, #20]	@ (8006ce0 <pbuf_take+0x110>)
 8006cca:	f008 faf3 	bl	800f2b4 <printf>
  return ERR_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3720      	adds	r7, #32
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	08014254 	.word	0x08014254
 8006cdc:	0801462c 	.word	0x0801462c
 8006ce0:	080142b4 	.word	0x080142b4
 8006ce4:	08014644 	.word	0x08014644
 8006ce8:	08014660 	.word	0x08014660
 8006cec:	08014680 	.word	0x08014680
 8006cf0:	08014698 	.word	0x08014698

08006cf4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	603a      	str	r2, [r7, #0]
 8006cfe:	71fb      	strb	r3, [r7, #7]
 8006d00:	460b      	mov	r3, r1
 8006d02:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	8919      	ldrh	r1, [r3, #8]
 8006d08:	88ba      	ldrh	r2, [r7, #4]
 8006d0a:	79fb      	ldrb	r3, [r7, #7]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff fa0f 	bl	8006130 <pbuf_alloc>
 8006d12:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <pbuf_clone+0x2a>
    return NULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e011      	b.n	8006d42 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f7ff fe11 	bl	8006948 <pbuf_copy>
 8006d26:	4603      	mov	r3, r0
 8006d28:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006d2a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d006      	beq.n	8006d40 <pbuf_clone+0x4c>
 8006d32:	4b06      	ldr	r3, [pc, #24]	@ (8006d4c <pbuf_clone+0x58>)
 8006d34:	f240 5224 	movw	r2, #1316	@ 0x524
 8006d38:	4905      	ldr	r1, [pc, #20]	@ (8006d50 <pbuf_clone+0x5c>)
 8006d3a:	4806      	ldr	r0, [pc, #24]	@ (8006d54 <pbuf_clone+0x60>)
 8006d3c:	f008 faba 	bl	800f2b4 <printf>
  return q;
 8006d40:	68fb      	ldr	r3, [r7, #12]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	08014254 	.word	0x08014254
 8006d50:	080146c8 	.word	0x080146c8
 8006d54:	080142b4 	.word	0x080142b4

08006d58 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006d5c:	f008 f9cc 	bl	800f0f8 <rand>
 8006d60:	4603      	mov	r3, r0
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	4b01      	ldr	r3, [pc, #4]	@ (8006d78 <tcp_init+0x20>)
 8006d72:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006d74:	bf00      	nop
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	20000020 	.word	0x20000020

08006d7c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	7d1b      	ldrb	r3, [r3, #20]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d105      	bne.n	8006d98 <tcp_free+0x1c>
 8006d8c:	4b06      	ldr	r3, [pc, #24]	@ (8006da8 <tcp_free+0x2c>)
 8006d8e:	22d4      	movs	r2, #212	@ 0xd4
 8006d90:	4906      	ldr	r1, [pc, #24]	@ (8006dac <tcp_free+0x30>)
 8006d92:	4807      	ldr	r0, [pc, #28]	@ (8006db0 <tcp_free+0x34>)
 8006d94:	f008 fa8e 	bl	800f2b4 <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006d98:	6879      	ldr	r1, [r7, #4]
 8006d9a:	2001      	movs	r0, #1
 8006d9c:	f7fe fe36 	bl	8005a0c <memp_free>
}
 8006da0:	bf00      	nop
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	08014754 	.word	0x08014754
 8006dac:	08014784 	.word	0x08014784
 8006db0:	08014798 	.word	0x08014798

08006db4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	7d1b      	ldrb	r3, [r3, #20]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d105      	bne.n	8006dd0 <tcp_free_listen+0x1c>
 8006dc4:	4b06      	ldr	r3, [pc, #24]	@ (8006de0 <tcp_free_listen+0x2c>)
 8006dc6:	22df      	movs	r2, #223	@ 0xdf
 8006dc8:	4906      	ldr	r1, [pc, #24]	@ (8006de4 <tcp_free_listen+0x30>)
 8006dca:	4807      	ldr	r0, [pc, #28]	@ (8006de8 <tcp_free_listen+0x34>)
 8006dcc:	f008 fa72 	bl	800f2b4 <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006dd0:	6879      	ldr	r1, [r7, #4]
 8006dd2:	2002      	movs	r0, #2
 8006dd4:	f7fe fe1a 	bl	8005a0c <memp_free>
}
 8006dd8:	bf00      	nop
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	08014754 	.word	0x08014754
 8006de4:	080147c0 	.word	0x080147c0
 8006de8:	08014798 	.word	0x08014798

08006dec <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006df0:	f000 fea4 	bl	8007b3c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006df4:	4b07      	ldr	r3, [pc, #28]	@ (8006e14 <tcp_tmr+0x28>)
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	b2da      	uxtb	r2, r3
 8006dfc:	4b05      	ldr	r3, [pc, #20]	@ (8006e14 <tcp_tmr+0x28>)
 8006dfe:	701a      	strb	r2, [r3, #0]
 8006e00:	4b04      	ldr	r3, [pc, #16]	@ (8006e14 <tcp_tmr+0x28>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	f003 0301 	and.w	r3, r3, #1
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006e0c:	f000 fb54 	bl	80074b8 <tcp_slowtmr>
  }
}
 8006e10:	bf00      	nop
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	20008901 	.word	0x20008901

08006e18 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d105      	bne.n	8006e34 <tcp_remove_listener+0x1c>
 8006e28:	4b0d      	ldr	r3, [pc, #52]	@ (8006e60 <tcp_remove_listener+0x48>)
 8006e2a:	22ff      	movs	r2, #255	@ 0xff
 8006e2c:	490d      	ldr	r1, [pc, #52]	@ (8006e64 <tcp_remove_listener+0x4c>)
 8006e2e:	480e      	ldr	r0, [pc, #56]	@ (8006e68 <tcp_remove_listener+0x50>)
 8006e30:	f008 fa40 	bl	800f2b4 <printf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	e00a      	b.n	8006e50 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d102      	bne.n	8006e4a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	60fb      	str	r3, [r7, #12]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1f1      	bne.n	8006e3a <tcp_remove_listener+0x22>
    }
  }
}
 8006e56:	bf00      	nop
 8006e58:	bf00      	nop
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	08014754 	.word	0x08014754
 8006e64:	080147dc 	.word	0x080147dc
 8006e68:	08014798 	.word	0x08014798

08006e6c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d106      	bne.n	8006e88 <tcp_listen_closed+0x1c>
 8006e7a:	4b14      	ldr	r3, [pc, #80]	@ (8006ecc <tcp_listen_closed+0x60>)
 8006e7c:	f240 1211 	movw	r2, #273	@ 0x111
 8006e80:	4913      	ldr	r1, [pc, #76]	@ (8006ed0 <tcp_listen_closed+0x64>)
 8006e82:	4814      	ldr	r0, [pc, #80]	@ (8006ed4 <tcp_listen_closed+0x68>)
 8006e84:	f008 fa16 	bl	800f2b4 <printf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	7d1b      	ldrb	r3, [r3, #20]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d006      	beq.n	8006e9e <tcp_listen_closed+0x32>
 8006e90:	4b0e      	ldr	r3, [pc, #56]	@ (8006ecc <tcp_listen_closed+0x60>)
 8006e92:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8006e96:	4910      	ldr	r1, [pc, #64]	@ (8006ed8 <tcp_listen_closed+0x6c>)
 8006e98:	480e      	ldr	r0, [pc, #56]	@ (8006ed4 <tcp_listen_closed+0x68>)
 8006e9a:	f008 fa0b 	bl	800f2b4 <printf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	60fb      	str	r3, [r7, #12]
 8006ea2:	e00b      	b.n	8006ebc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8006edc <tcp_listen_closed+0x70>)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6879      	ldr	r1, [r7, #4]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7ff ffb1 	bl	8006e18 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	60fb      	str	r3, [r7, #12]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d9f0      	bls.n	8006ea4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006ec2:	bf00      	nop
 8006ec4:	bf00      	nop
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	08014754 	.word	0x08014754
 8006ed0:	08014804 	.word	0x08014804
 8006ed4:	08014798 	.word	0x08014798
 8006ed8:	08014810 	.word	0x08014810
 8006edc:	0801672c 	.word	0x0801672c

08006ee0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006ee0:	b5b0      	push	{r4, r5, r7, lr}
 8006ee2:	b088      	sub	sp, #32
 8006ee4:	af04      	add	r7, sp, #16
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <tcp_close_shutdown+0x20>
 8006ef2:	4b63      	ldr	r3, [pc, #396]	@ (8007080 <tcp_close_shutdown+0x1a0>)
 8006ef4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8006ef8:	4962      	ldr	r1, [pc, #392]	@ (8007084 <tcp_close_shutdown+0x1a4>)
 8006efa:	4863      	ldr	r0, [pc, #396]	@ (8007088 <tcp_close_shutdown+0x1a8>)
 8006efc:	f008 f9da 	bl	800f2b4 <printf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d066      	beq.n	8006fd4 <tcp_close_shutdown+0xf4>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	7d1b      	ldrb	r3, [r3, #20]
 8006f0a:	2b04      	cmp	r3, #4
 8006f0c:	d003      	beq.n	8006f16 <tcp_close_shutdown+0x36>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	7d1b      	ldrb	r3, [r3, #20]
 8006f12:	2b07      	cmp	r3, #7
 8006f14:	d15e      	bne.n	8006fd4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d104      	bne.n	8006f28 <tcp_close_shutdown+0x48>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f22:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006f26:	d055      	beq.n	8006fd4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	8b5b      	ldrh	r3, [r3, #26]
 8006f2c:	f003 0310 	and.w	r3, r3, #16
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d106      	bne.n	8006f42 <tcp_close_shutdown+0x62>
 8006f34:	4b52      	ldr	r3, [pc, #328]	@ (8007080 <tcp_close_shutdown+0x1a0>)
 8006f36:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8006f3a:	4954      	ldr	r1, [pc, #336]	@ (800708c <tcp_close_shutdown+0x1ac>)
 8006f3c:	4852      	ldr	r0, [pc, #328]	@ (8007088 <tcp_close_shutdown+0x1a8>)
 8006f3e:	f008 f9b9 	bl	800f2b4 <printf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006f4a:	687d      	ldr	r5, [r7, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3304      	adds	r3, #4
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	8ad2      	ldrh	r2, [r2, #22]
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	8b09      	ldrh	r1, [r1, #24]
 8006f58:	9102      	str	r1, [sp, #8]
 8006f5a:	9201      	str	r2, [sp, #4]
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	462b      	mov	r3, r5
 8006f60:	4622      	mov	r2, r4
 8006f62:	4601      	mov	r1, r0
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f004 fe8d 	bl	800bc84 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 f8c8 	bl	8008100 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006f70:	4b47      	ldr	r3, [pc, #284]	@ (8007090 <tcp_close_shutdown+0x1b0>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d105      	bne.n	8006f86 <tcp_close_shutdown+0xa6>
 8006f7a:	4b45      	ldr	r3, [pc, #276]	@ (8007090 <tcp_close_shutdown+0x1b0>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	4a43      	ldr	r2, [pc, #268]	@ (8007090 <tcp_close_shutdown+0x1b0>)
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	e013      	b.n	8006fae <tcp_close_shutdown+0xce>
 8006f86:	4b42      	ldr	r3, [pc, #264]	@ (8007090 <tcp_close_shutdown+0x1b0>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	e00c      	b.n	8006fa8 <tcp_close_shutdown+0xc8>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d104      	bne.n	8006fa2 <tcp_close_shutdown+0xc2>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	60da      	str	r2, [r3, #12]
 8006fa0:	e005      	b.n	8006fae <tcp_close_shutdown+0xce>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	60fb      	str	r3, [r7, #12]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1ef      	bne.n	8006f8e <tcp_close_shutdown+0xae>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	60da      	str	r2, [r3, #12]
 8006fb4:	4b37      	ldr	r3, [pc, #220]	@ (8007094 <tcp_close_shutdown+0x1b4>)
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006fba:	4b37      	ldr	r3, [pc, #220]	@ (8007098 <tcp_close_shutdown+0x1b8>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d102      	bne.n	8006fca <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006fc4:	f003 fd5c 	bl	800aa80 <tcp_trigger_input_pcb_close>
 8006fc8:	e002      	b.n	8006fd0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7ff fed6 	bl	8006d7c <tcp_free>
      }
      return ERR_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	e050      	b.n	8007076 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	7d1b      	ldrb	r3, [r3, #20]
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d03b      	beq.n	8007054 <tcp_close_shutdown+0x174>
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	dc44      	bgt.n	800706a <tcp_close_shutdown+0x18a>
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <tcp_close_shutdown+0x10a>
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d02a      	beq.n	800703e <tcp_close_shutdown+0x15e>
 8006fe8:	e03f      	b.n	800706a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	8adb      	ldrh	r3, [r3, #22]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d021      	beq.n	8007036 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800709c <tcp_close_shutdown+0x1bc>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d105      	bne.n	8007008 <tcp_close_shutdown+0x128>
 8006ffc:	4b27      	ldr	r3, [pc, #156]	@ (800709c <tcp_close_shutdown+0x1bc>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	4a26      	ldr	r2, [pc, #152]	@ (800709c <tcp_close_shutdown+0x1bc>)
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	e013      	b.n	8007030 <tcp_close_shutdown+0x150>
 8007008:	4b24      	ldr	r3, [pc, #144]	@ (800709c <tcp_close_shutdown+0x1bc>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	60bb      	str	r3, [r7, #8]
 800700e:	e00c      	b.n	800702a <tcp_close_shutdown+0x14a>
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	429a      	cmp	r2, r3
 8007018:	d104      	bne.n	8007024 <tcp_close_shutdown+0x144>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	60da      	str	r2, [r3, #12]
 8007022:	e005      	b.n	8007030 <tcp_close_shutdown+0x150>
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	60bb      	str	r3, [r7, #8]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1ef      	bne.n	8007010 <tcp_close_shutdown+0x130>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7ff fea0 	bl	8006d7c <tcp_free>
      break;
 800703c:	e01a      	b.n	8007074 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7ff ff14 	bl	8006e6c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007044:	6879      	ldr	r1, [r7, #4]
 8007046:	4816      	ldr	r0, [pc, #88]	@ (80070a0 <tcp_close_shutdown+0x1c0>)
 8007048:	f001 f8aa 	bl	80081a0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f7ff feb1 	bl	8006db4 <tcp_free_listen>
      break;
 8007052:	e00f      	b.n	8007074 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007054:	6879      	ldr	r1, [r7, #4]
 8007056:	480e      	ldr	r0, [pc, #56]	@ (8007090 <tcp_close_shutdown+0x1b0>)
 8007058:	f001 f8a2 	bl	80081a0 <tcp_pcb_remove>
 800705c:	4b0d      	ldr	r3, [pc, #52]	@ (8007094 <tcp_close_shutdown+0x1b4>)
 800705e:	2201      	movs	r2, #1
 8007060:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff fe8a 	bl	8006d7c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007068:	e004      	b.n	8007074 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f81a 	bl	80070a4 <tcp_close_shutdown_fin>
 8007070:	4603      	mov	r3, r0
 8007072:	e000      	b.n	8007076 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bdb0      	pop	{r4, r5, r7, pc}
 800707e:	bf00      	nop
 8007080:	08014754 	.word	0x08014754
 8007084:	08014828 	.word	0x08014828
 8007088:	08014798 	.word	0x08014798
 800708c:	08014848 	.word	0x08014848
 8007090:	200088f8 	.word	0x200088f8
 8007094:	20008900 	.word	0x20008900
 8007098:	20008938 	.word	0x20008938
 800709c:	200088f0 	.word	0x200088f0
 80070a0:	200088f4 	.word	0x200088f4

080070a4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d106      	bne.n	80070c0 <tcp_close_shutdown_fin+0x1c>
 80070b2:	4b2e      	ldr	r3, [pc, #184]	@ (800716c <tcp_close_shutdown_fin+0xc8>)
 80070b4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80070b8:	492d      	ldr	r1, [pc, #180]	@ (8007170 <tcp_close_shutdown_fin+0xcc>)
 80070ba:	482e      	ldr	r0, [pc, #184]	@ (8007174 <tcp_close_shutdown_fin+0xd0>)
 80070bc:	f008 f8fa 	bl	800f2b4 <printf>

  switch (pcb->state) {
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	7d1b      	ldrb	r3, [r3, #20]
 80070c4:	2b07      	cmp	r3, #7
 80070c6:	d020      	beq.n	800710a <tcp_close_shutdown_fin+0x66>
 80070c8:	2b07      	cmp	r3, #7
 80070ca:	dc2b      	bgt.n	8007124 <tcp_close_shutdown_fin+0x80>
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d002      	beq.n	80070d6 <tcp_close_shutdown_fin+0x32>
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	d00d      	beq.n	80070f0 <tcp_close_shutdown_fin+0x4c>
 80070d4:	e026      	b.n	8007124 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f003 fee2 	bl	800aea0 <tcp_send_fin>
 80070dc:	4603      	mov	r3, r0
 80070de:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80070e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d11f      	bne.n	8007128 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2205      	movs	r2, #5
 80070ec:	751a      	strb	r2, [r3, #20]
      }
      break;
 80070ee:	e01b      	b.n	8007128 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f003 fed5 	bl	800aea0 <tcp_send_fin>
 80070f6:	4603      	mov	r3, r0
 80070f8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80070fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d114      	bne.n	800712c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2205      	movs	r2, #5
 8007106:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007108:	e010      	b.n	800712c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f003 fec8 	bl	800aea0 <tcp_send_fin>
 8007110:	4603      	mov	r3, r0
 8007112:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d109      	bne.n	8007130 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2209      	movs	r2, #9
 8007120:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007122:	e005      	b.n	8007130 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	e01c      	b.n	8007162 <tcp_close_shutdown_fin+0xbe>
      break;
 8007128:	bf00      	nop
 800712a:	e002      	b.n	8007132 <tcp_close_shutdown_fin+0x8e>
      break;
 800712c:	bf00      	nop
 800712e:	e000      	b.n	8007132 <tcp_close_shutdown_fin+0x8e>
      break;
 8007130:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d103      	bne.n	8007142 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f003 ffee 	bl	800b11c <tcp_output>
 8007140:	e00d      	b.n	800715e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8007142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007146:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800714a:	d108      	bne.n	800715e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8b5b      	ldrh	r3, [r3, #26]
 8007150:	f043 0308 	orr.w	r3, r3, #8
 8007154:	b29a      	uxth	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	e001      	b.n	8007162 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800715e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	08014754 	.word	0x08014754
 8007170:	08014804 	.word	0x08014804
 8007174:	08014798 	.word	0x08014798

08007178 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d109      	bne.n	800719a <tcp_close+0x22>
 8007186:	4b0f      	ldr	r3, [pc, #60]	@ (80071c4 <tcp_close+0x4c>)
 8007188:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800718c:	490e      	ldr	r1, [pc, #56]	@ (80071c8 <tcp_close+0x50>)
 800718e:	480f      	ldr	r0, [pc, #60]	@ (80071cc <tcp_close+0x54>)
 8007190:	f008 f890 	bl	800f2b4 <printf>
 8007194:	f06f 030f 	mvn.w	r3, #15
 8007198:	e00f      	b.n	80071ba <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	7d1b      	ldrb	r3, [r3, #20]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d006      	beq.n	80071b0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	8b5b      	ldrh	r3, [r3, #26]
 80071a6:	f043 0310 	orr.w	r3, r3, #16
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80071b0:	2101      	movs	r1, #1
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7ff fe94 	bl	8006ee0 <tcp_close_shutdown>
 80071b8:	4603      	mov	r3, r0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	08014754 	.word	0x08014754
 80071c8:	08014864 	.word	0x08014864
 80071cc:	08014798 	.word	0x08014798

080071d0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08e      	sub	sp, #56	@ 0x38
 80071d4:	af04      	add	r7, sp, #16
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d107      	bne.n	80071f0 <tcp_abandon+0x20>
 80071e0:	4b52      	ldr	r3, [pc, #328]	@ (800732c <tcp_abandon+0x15c>)
 80071e2:	f240 223d 	movw	r2, #573	@ 0x23d
 80071e6:	4952      	ldr	r1, [pc, #328]	@ (8007330 <tcp_abandon+0x160>)
 80071e8:	4852      	ldr	r0, [pc, #328]	@ (8007334 <tcp_abandon+0x164>)
 80071ea:	f008 f863 	bl	800f2b4 <printf>
 80071ee:	e099      	b.n	8007324 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	7d1b      	ldrb	r3, [r3, #20]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d106      	bne.n	8007206 <tcp_abandon+0x36>
 80071f8:	4b4c      	ldr	r3, [pc, #304]	@ (800732c <tcp_abandon+0x15c>)
 80071fa:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80071fe:	494e      	ldr	r1, [pc, #312]	@ (8007338 <tcp_abandon+0x168>)
 8007200:	484c      	ldr	r0, [pc, #304]	@ (8007334 <tcp_abandon+0x164>)
 8007202:	f008 f857 	bl	800f2b4 <printf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	7d1b      	ldrb	r3, [r3, #20]
 800720a:	2b0a      	cmp	r3, #10
 800720c:	d107      	bne.n	800721e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800720e:	6879      	ldr	r1, [r7, #4]
 8007210:	484a      	ldr	r0, [pc, #296]	@ (800733c <tcp_abandon+0x16c>)
 8007212:	f000 ffc5 	bl	80081a0 <tcp_pcb_remove>
    tcp_free(pcb);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7ff fdb0 	bl	8006d7c <tcp_free>
 800721c:	e082      	b.n	8007324 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800721e:	2300      	movs	r3, #0
 8007220:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8007222:	2300      	movs	r3, #0
 8007224:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800722a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007230:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007238:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	7d1b      	ldrb	r3, [r3, #20]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d126      	bne.n	8007296 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	8adb      	ldrh	r3, [r3, #22]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d02e      	beq.n	80072ae <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007250:	4b3b      	ldr	r3, [pc, #236]	@ (8007340 <tcp_abandon+0x170>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	429a      	cmp	r2, r3
 8007258:	d105      	bne.n	8007266 <tcp_abandon+0x96>
 800725a:	4b39      	ldr	r3, [pc, #228]	@ (8007340 <tcp_abandon+0x170>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	4a37      	ldr	r2, [pc, #220]	@ (8007340 <tcp_abandon+0x170>)
 8007262:	6013      	str	r3, [r2, #0]
 8007264:	e013      	b.n	800728e <tcp_abandon+0xbe>
 8007266:	4b36      	ldr	r3, [pc, #216]	@ (8007340 <tcp_abandon+0x170>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	61fb      	str	r3, [r7, #28]
 800726c:	e00c      	b.n	8007288 <tcp_abandon+0xb8>
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	429a      	cmp	r2, r3
 8007276:	d104      	bne.n	8007282 <tcp_abandon+0xb2>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	60da      	str	r2, [r3, #12]
 8007280:	e005      	b.n	800728e <tcp_abandon+0xbe>
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	61fb      	str	r3, [r7, #28]
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1ef      	bne.n	800726e <tcp_abandon+0x9e>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	60da      	str	r2, [r3, #12]
 8007294:	e00b      	b.n	80072ae <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	8adb      	ldrh	r3, [r3, #22]
 800729e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80072a0:	6879      	ldr	r1, [r7, #4]
 80072a2:	4828      	ldr	r0, [pc, #160]	@ (8007344 <tcp_abandon+0x174>)
 80072a4:	f000 ff7c 	bl	80081a0 <tcp_pcb_remove>
 80072a8:	4b27      	ldr	r3, [pc, #156]	@ (8007348 <tcp_abandon+0x178>)
 80072aa:	2201      	movs	r2, #1
 80072ac:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d004      	beq.n	80072c0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 fd1e 	bl	8007cfc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d004      	beq.n	80072d2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fd15 	bl	8007cfc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d004      	beq.n	80072e4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072de:	4618      	mov	r0, r3
 80072e0:	f000 fd0c 	bl	8007cfc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80072e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00e      	beq.n	8007308 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3304      	adds	r3, #4
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	8b12      	ldrh	r2, [r2, #24]
 80072f4:	9202      	str	r2, [sp, #8]
 80072f6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80072f8:	9201      	str	r2, [sp, #4]
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	460b      	mov	r3, r1
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	69b9      	ldr	r1, [r7, #24]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f004 fcbe 	bl	800bc84 <tcp_rst>
    }
    last_state = pcb->state;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	7d1b      	ldrb	r3, [r3, #20]
 800730c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff fd34 	bl	8006d7c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d004      	beq.n	8007324 <tcp_abandon+0x154>
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	f06f 010c 	mvn.w	r1, #12
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	4798      	blx	r3
  }
}
 8007324:	3728      	adds	r7, #40	@ 0x28
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	08014754 	.word	0x08014754
 8007330:	08014898 	.word	0x08014898
 8007334:	08014798 	.word	0x08014798
 8007338:	080148b4 	.word	0x080148b4
 800733c:	200088fc 	.word	0x200088fc
 8007340:	200088f0 	.word	0x200088f0
 8007344:	200088f8 	.word	0x200088f8
 8007348:	20008900 	.word	0x20008900

0800734c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007354:	2101      	movs	r1, #1
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7ff ff3a 	bl	80071d0 <tcp_abandon>
}
 800735c:	bf00      	nop
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d106      	bne.n	8007380 <tcp_update_rcv_ann_wnd+0x1c>
 8007372:	4b25      	ldr	r3, [pc, #148]	@ (8007408 <tcp_update_rcv_ann_wnd+0xa4>)
 8007374:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8007378:	4924      	ldr	r1, [pc, #144]	@ (800740c <tcp_update_rcv_ann_wnd+0xa8>)
 800737a:	4825      	ldr	r0, [pc, #148]	@ (8007410 <tcp_update_rcv_ann_wnd+0xac>)
 800737c:	f007 ff9a 	bl	800f2b4 <printf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007388:	4413      	add	r3, r2
 800738a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8007394:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8007398:	bf28      	it	cs
 800739a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800739e:	b292      	uxth	r2, r2
 80073a0:	4413      	add	r3, r2
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	db08      	blt.n	80073bc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	e020      	b.n	80073fe <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	dd03      	ble.n	80073d2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80073d0:	e014      	b.n	80073fc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073e4:	d306      	bcc.n	80073f4 <tcp_update_rcv_ann_wnd+0x90>
 80073e6:	4b08      	ldr	r3, [pc, #32]	@ (8007408 <tcp_update_rcv_ann_wnd+0xa4>)
 80073e8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80073ec:	4909      	ldr	r1, [pc, #36]	@ (8007414 <tcp_update_rcv_ann_wnd+0xb0>)
 80073ee:	4808      	ldr	r0, [pc, #32]	@ (8007410 <tcp_update_rcv_ann_wnd+0xac>)
 80073f0:	f007 ff60 	bl	800f2b4 <printf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80073fc:	2300      	movs	r3, #0
  }
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	08014754 	.word	0x08014754
 800740c:	080149b0 	.word	0x080149b0
 8007410:	08014798 	.word	0x08014798
 8007414:	080149d4 	.word	0x080149d4

08007418 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d107      	bne.n	800743a <tcp_recved+0x22>
 800742a:	4b1f      	ldr	r3, [pc, #124]	@ (80074a8 <tcp_recved+0x90>)
 800742c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8007430:	491e      	ldr	r1, [pc, #120]	@ (80074ac <tcp_recved+0x94>)
 8007432:	481f      	ldr	r0, [pc, #124]	@ (80074b0 <tcp_recved+0x98>)
 8007434:	f007 ff3e 	bl	800f2b4 <printf>
 8007438:	e032      	b.n	80074a0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	7d1b      	ldrb	r3, [r3, #20]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d106      	bne.n	8007450 <tcp_recved+0x38>
 8007442:	4b19      	ldr	r3, [pc, #100]	@ (80074a8 <tcp_recved+0x90>)
 8007444:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8007448:	491a      	ldr	r1, [pc, #104]	@ (80074b4 <tcp_recved+0x9c>)
 800744a:	4819      	ldr	r0, [pc, #100]	@ (80074b0 <tcp_recved+0x98>)
 800744c:	f007 ff32 	bl	800f2b4 <printf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8007454:	887b      	ldrh	r3, [r7, #2]
 8007456:	4413      	add	r3, r2
 8007458:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800745a:	89fb      	ldrh	r3, [r7, #14]
 800745c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007460:	d804      	bhi.n	800746c <tcp_recved+0x54>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007466:	89fa      	ldrh	r2, [r7, #14]
 8007468:	429a      	cmp	r2, r3
 800746a:	d204      	bcs.n	8007476 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8007472:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007474:	e002      	b.n	800747c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	89fa      	ldrh	r2, [r7, #14]
 800747a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7ff ff71 	bl	8007364 <tcp_update_rcv_ann_wnd>
 8007482:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800748a:	d309      	bcc.n	80074a0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	8b5b      	ldrh	r3, [r3, #26]
 8007490:	f043 0302 	orr.w	r3, r3, #2
 8007494:	b29a      	uxth	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f003 fe3e 	bl	800b11c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	08014754 	.word	0x08014754
 80074ac:	080149f0 	.word	0x080149f0
 80074b0:	08014798 	.word	0x08014798
 80074b4:	08014a08 	.word	0x08014a08

080074b8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80074b8:	b5b0      	push	{r4, r5, r7, lr}
 80074ba:	b090      	sub	sp, #64	@ 0x40
 80074bc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80074c4:	4b95      	ldr	r3, [pc, #596]	@ (800771c <tcp_slowtmr+0x264>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3301      	adds	r3, #1
 80074ca:	4a94      	ldr	r2, [pc, #592]	@ (800771c <tcp_slowtmr+0x264>)
 80074cc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80074ce:	4b94      	ldr	r3, [pc, #592]	@ (8007720 <tcp_slowtmr+0x268>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	3301      	adds	r3, #1
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	4b92      	ldr	r3, [pc, #584]	@ (8007720 <tcp_slowtmr+0x268>)
 80074d8:	701a      	strb	r2, [r3, #0]
 80074da:	e000      	b.n	80074de <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80074dc:	bf00      	nop
  prev = NULL;
 80074de:	2300      	movs	r3, #0
 80074e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80074e2:	4b90      	ldr	r3, [pc, #576]	@ (8007724 <tcp_slowtmr+0x26c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80074e8:	e29d      	b.n	8007a26 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80074ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ec:	7d1b      	ldrb	r3, [r3, #20]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d106      	bne.n	8007500 <tcp_slowtmr+0x48>
 80074f2:	4b8d      	ldr	r3, [pc, #564]	@ (8007728 <tcp_slowtmr+0x270>)
 80074f4:	f240 42be 	movw	r2, #1214	@ 0x4be
 80074f8:	498c      	ldr	r1, [pc, #560]	@ (800772c <tcp_slowtmr+0x274>)
 80074fa:	488d      	ldr	r0, [pc, #564]	@ (8007730 <tcp_slowtmr+0x278>)
 80074fc:	f007 feda 	bl	800f2b4 <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007502:	7d1b      	ldrb	r3, [r3, #20]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d106      	bne.n	8007516 <tcp_slowtmr+0x5e>
 8007508:	4b87      	ldr	r3, [pc, #540]	@ (8007728 <tcp_slowtmr+0x270>)
 800750a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800750e:	4989      	ldr	r1, [pc, #548]	@ (8007734 <tcp_slowtmr+0x27c>)
 8007510:	4887      	ldr	r0, [pc, #540]	@ (8007730 <tcp_slowtmr+0x278>)
 8007512:	f007 fecf 	bl	800f2b4 <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007518:	7d1b      	ldrb	r3, [r3, #20]
 800751a:	2b0a      	cmp	r3, #10
 800751c:	d106      	bne.n	800752c <tcp_slowtmr+0x74>
 800751e:	4b82      	ldr	r3, [pc, #520]	@ (8007728 <tcp_slowtmr+0x270>)
 8007520:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8007524:	4984      	ldr	r1, [pc, #528]	@ (8007738 <tcp_slowtmr+0x280>)
 8007526:	4882      	ldr	r0, [pc, #520]	@ (8007730 <tcp_slowtmr+0x278>)
 8007528:	f007 fec4 	bl	800f2b4 <printf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800752c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800752e:	7f9a      	ldrb	r2, [r3, #30]
 8007530:	4b7b      	ldr	r3, [pc, #492]	@ (8007720 <tcp_slowtmr+0x268>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	429a      	cmp	r2, r3
 8007536:	d105      	bne.n	8007544 <tcp_slowtmr+0x8c>
      prev = pcb;
 8007538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800753a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800753c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8007542:	e270      	b.n	8007a26 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8007544:	4b76      	ldr	r3, [pc, #472]	@ (8007720 <tcp_slowtmr+0x268>)
 8007546:	781a      	ldrb	r2, [r3, #0]
 8007548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800754a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800754c:	2300      	movs	r3, #0
 800754e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8007552:	2300      	movs	r3, #0
 8007554:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800755a:	7d1b      	ldrb	r3, [r3, #20]
 800755c:	2b02      	cmp	r3, #2
 800755e:	d10a      	bne.n	8007576 <tcp_slowtmr+0xbe>
 8007560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007562:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007566:	2b05      	cmp	r3, #5
 8007568:	d905      	bls.n	8007576 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800756a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800756e:	3301      	adds	r3, #1
 8007570:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007574:	e11e      	b.n	80077b4 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007578:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800757c:	2b0b      	cmp	r3, #11
 800757e:	d905      	bls.n	800758c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8007580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007584:	3301      	adds	r3, #1
 8007586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800758a:	e113      	b.n	80077b4 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800758c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800758e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007592:	2b00      	cmp	r3, #0
 8007594:	d075      	beq.n	8007682 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800759a:	2b00      	cmp	r3, #0
 800759c:	d006      	beq.n	80075ac <tcp_slowtmr+0xf4>
 800759e:	4b62      	ldr	r3, [pc, #392]	@ (8007728 <tcp_slowtmr+0x270>)
 80075a0:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80075a4:	4965      	ldr	r1, [pc, #404]	@ (800773c <tcp_slowtmr+0x284>)
 80075a6:	4862      	ldr	r0, [pc, #392]	@ (8007730 <tcp_slowtmr+0x278>)
 80075a8:	f007 fe84 	bl	800f2b4 <printf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80075ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d106      	bne.n	80075c2 <tcp_slowtmr+0x10a>
 80075b4:	4b5c      	ldr	r3, [pc, #368]	@ (8007728 <tcp_slowtmr+0x270>)
 80075b6:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80075ba:	4961      	ldr	r1, [pc, #388]	@ (8007740 <tcp_slowtmr+0x288>)
 80075bc:	485c      	ldr	r0, [pc, #368]	@ (8007730 <tcp_slowtmr+0x278>)
 80075be:	f007 fe79 	bl	800f2b4 <printf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80075c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80075c8:	2b0b      	cmp	r3, #11
 80075ca:	d905      	bls.n	80075d8 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80075cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075d0:	3301      	adds	r3, #1
 80075d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80075d6:	e0ed      	b.n	80077b4 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80075d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075da:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80075de:	3b01      	subs	r3, #1
 80075e0:	4a58      	ldr	r2, [pc, #352]	@ (8007744 <tcp_slowtmr+0x28c>)
 80075e2:	5cd3      	ldrb	r3, [r2, r3]
 80075e4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80075e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80075ec:	7c7a      	ldrb	r2, [r7, #17]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d907      	bls.n	8007602 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80075f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80075f8:	3301      	adds	r3, #1
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075fe:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8007602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007604:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007608:	7c7a      	ldrb	r2, [r7, #17]
 800760a:	429a      	cmp	r2, r3
 800760c:	f200 80d2 	bhi.w	80077b4 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8007610:	2301      	movs	r3, #1
 8007612:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8007614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007616:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800761a:	2b00      	cmp	r3, #0
 800761c:	d108      	bne.n	8007630 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800761e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007620:	f004 fc24 	bl	800be6c <tcp_zero_window_probe>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d014      	beq.n	8007654 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800762a:	2300      	movs	r3, #0
 800762c:	623b      	str	r3, [r7, #32]
 800762e:	e011      	b.n	8007654 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007632:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007636:	4619      	mov	r1, r3
 8007638:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800763a:	f003 fae9 	bl	800ac10 <tcp_split_unsent_seg>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d107      	bne.n	8007654 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8007644:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007646:	f003 fd69 	bl	800b11c <tcp_output>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8007650:	2300      	movs	r3, #0
 8007652:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 80ac 	beq.w	80077b4 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800765c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800765e:	2200      	movs	r2, #0
 8007660:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007666:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800766a:	2b06      	cmp	r3, #6
 800766c:	f200 80a2 	bhi.w	80077b4 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8007670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007672:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007676:	3301      	adds	r3, #1
 8007678:	b2da      	uxtb	r2, r3
 800767a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800767c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8007680:	e098      	b.n	80077b4 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007684:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007688:	2b00      	cmp	r3, #0
 800768a:	db0f      	blt.n	80076ac <tcp_slowtmr+0x1f4>
 800768c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800768e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007692:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007696:	4293      	cmp	r3, r2
 8007698:	d008      	beq.n	80076ac <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800769a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800769c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	3301      	adds	r3, #1
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	b21a      	sxth	r2, r3
 80076a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076aa:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80076ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ae:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80076b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80076b8:	429a      	cmp	r2, r3
 80076ba:	db7b      	blt.n	80077b4 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80076bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80076be:	f004 f821 	bl	800b704 <tcp_rexmit_rto_prepare>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d007      	beq.n	80076d8 <tcp_slowtmr+0x220>
 80076c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d171      	bne.n	80077b4 <tcp_slowtmr+0x2fc>
 80076d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d06d      	beq.n	80077b4 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80076d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076da:	7d1b      	ldrb	r3, [r3, #20]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d03a      	beq.n	8007756 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80076e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076e6:	2b0c      	cmp	r3, #12
 80076e8:	bf28      	it	cs
 80076ea:	230c      	movcs	r3, #12
 80076ec:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80076ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80076f4:	10db      	asrs	r3, r3, #3
 80076f6:	b21b      	sxth	r3, r3
 80076f8:	461a      	mov	r2, r3
 80076fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8007700:	4413      	add	r3, r2
 8007702:	7efa      	ldrb	r2, [r7, #27]
 8007704:	4910      	ldr	r1, [pc, #64]	@ (8007748 <tcp_slowtmr+0x290>)
 8007706:	5c8a      	ldrb	r2, [r1, r2]
 8007708:	4093      	lsls	r3, r2
 800770a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8007712:	4293      	cmp	r3, r2
 8007714:	dc1a      	bgt.n	800774c <tcp_slowtmr+0x294>
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	b21a      	sxth	r2, r3
 800771a:	e019      	b.n	8007750 <tcp_slowtmr+0x298>
 800771c:	200088ec 	.word	0x200088ec
 8007720:	20008902 	.word	0x20008902
 8007724:	200088f8 	.word	0x200088f8
 8007728:	08014754 	.word	0x08014754
 800772c:	08014a98 	.word	0x08014a98
 8007730:	08014798 	.word	0x08014798
 8007734:	08014ac4 	.word	0x08014ac4
 8007738:	08014af0 	.word	0x08014af0
 800773c:	08014b20 	.word	0x08014b20
 8007740:	08014b54 	.word	0x08014b54
 8007744:	08016724 	.word	0x08016724
 8007748:	08016714 	.word	0x08016714
 800774c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007752:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8007756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007758:	2200      	movs	r2, #0
 800775a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800775c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8007762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007764:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007768:	4293      	cmp	r3, r2
 800776a:	bf28      	it	cs
 800776c:	4613      	movcs	r3, r2
 800776e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007770:	8a7b      	ldrh	r3, [r7, #18]
 8007772:	085b      	lsrs	r3, r3, #1
 8007774:	b29a      	uxth	r2, r3
 8007776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007778:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800777c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800777e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8007782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007784:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007786:	005b      	lsls	r3, r3, #1
 8007788:	b29b      	uxth	r3, r3
 800778a:	429a      	cmp	r2, r3
 800778c:	d206      	bcs.n	800779c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800778e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007790:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	b29a      	uxth	r2, r3
 8007796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007798:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800779c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800779e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80077a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80077a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a8:	2200      	movs	r2, #0
 80077aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80077ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077b0:	f004 f818 	bl	800b7e4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80077b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b6:	7d1b      	ldrb	r3, [r3, #20]
 80077b8:	2b06      	cmp	r3, #6
 80077ba:	d111      	bne.n	80077e0 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80077bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077be:	8b5b      	ldrh	r3, [r3, #26]
 80077c0:	f003 0310 	and.w	r3, r3, #16
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00b      	beq.n	80077e0 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077c8:	4b9c      	ldr	r3, [pc, #624]	@ (8007a3c <tcp_slowtmr+0x584>)
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ce:	6a1b      	ldr	r3, [r3, #32]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	2b28      	cmp	r3, #40	@ 0x28
 80077d4:	d904      	bls.n	80077e0 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80077d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077da:	3301      	adds	r3, #1
 80077dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80077e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e2:	7a5b      	ldrb	r3, [r3, #9]
 80077e4:	f003 0308 	and.w	r3, r3, #8
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d04a      	beq.n	8007882 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80077ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ee:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80077f0:	2b04      	cmp	r3, #4
 80077f2:	d003      	beq.n	80077fc <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80077f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80077f8:	2b07      	cmp	r3, #7
 80077fa:	d142      	bne.n	8007882 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077fc:	4b8f      	ldr	r3, [pc, #572]	@ (8007a3c <tcp_slowtmr+0x584>)
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007802:	6a1b      	ldr	r3, [r3, #32]
 8007804:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007808:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800780c:	4b8c      	ldr	r3, [pc, #560]	@ (8007a40 <tcp_slowtmr+0x588>)
 800780e:	440b      	add	r3, r1
 8007810:	498c      	ldr	r1, [pc, #560]	@ (8007a44 <tcp_slowtmr+0x58c>)
 8007812:	fba1 1303 	umull	r1, r3, r1, r3
 8007816:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007818:	429a      	cmp	r2, r3
 800781a:	d90a      	bls.n	8007832 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800781c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007820:	3301      	adds	r3, #1
 8007822:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8007826:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800782a:	3301      	adds	r3, #1
 800782c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007830:	e027      	b.n	8007882 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007832:	4b82      	ldr	r3, [pc, #520]	@ (8007a3c <tcp_slowtmr+0x584>)
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800783c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800783e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8007842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007844:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8007848:	4618      	mov	r0, r3
 800784a:	4b7f      	ldr	r3, [pc, #508]	@ (8007a48 <tcp_slowtmr+0x590>)
 800784c:	fb00 f303 	mul.w	r3, r0, r3
 8007850:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007852:	497c      	ldr	r1, [pc, #496]	@ (8007a44 <tcp_slowtmr+0x58c>)
 8007854:	fba1 1303 	umull	r1, r3, r1, r3
 8007858:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800785a:	429a      	cmp	r2, r3
 800785c:	d911      	bls.n	8007882 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800785e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007860:	f004 fac4 	bl	800bdec <tcp_keepalive>
 8007864:	4603      	mov	r3, r0
 8007866:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800786a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800786e:	2b00      	cmp	r3, #0
 8007870:	d107      	bne.n	8007882 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8007872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007874:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8007878:	3301      	adds	r3, #1
 800787a:	b2da      	uxtb	r2, r3
 800787c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8007882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007886:	2b00      	cmp	r3, #0
 8007888:	d011      	beq.n	80078ae <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800788a:	4b6c      	ldr	r3, [pc, #432]	@ (8007a3c <tcp_slowtmr+0x584>)
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	1ad2      	subs	r2, r2, r3
 8007894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007896:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800789a:	4619      	mov	r1, r3
 800789c:	460b      	mov	r3, r1
 800789e:	005b      	lsls	r3, r3, #1
 80078a0:	440b      	add	r3, r1
 80078a2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d302      	bcc.n	80078ae <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 80078a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80078aa:	f000 fddd 	bl	8008468 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80078ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b0:	7d1b      	ldrb	r3, [r3, #20]
 80078b2:	2b03      	cmp	r3, #3
 80078b4:	d10b      	bne.n	80078ce <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80078b6:	4b61      	ldr	r3, [pc, #388]	@ (8007a3c <tcp_slowtmr+0x584>)
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	2b28      	cmp	r3, #40	@ 0x28
 80078c2:	d904      	bls.n	80078ce <tcp_slowtmr+0x416>
        ++pcb_remove;
 80078c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078c8:	3301      	adds	r3, #1
 80078ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80078ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d0:	7d1b      	ldrb	r3, [r3, #20]
 80078d2:	2b09      	cmp	r3, #9
 80078d4:	d10b      	bne.n	80078ee <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80078d6:	4b59      	ldr	r3, [pc, #356]	@ (8007a3c <tcp_slowtmr+0x584>)
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	2bf0      	cmp	r3, #240	@ 0xf0
 80078e2:	d904      	bls.n	80078ee <tcp_slowtmr+0x436>
        ++pcb_remove;
 80078e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078e8:	3301      	adds	r3, #1
 80078ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80078ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d060      	beq.n	80079b8 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80078f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078fc:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80078fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007900:	f000 fbfe 	bl	8008100 <tcp_pcb_purge>
      if (prev != NULL) {
 8007904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007906:	2b00      	cmp	r3, #0
 8007908:	d010      	beq.n	800792c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800790a:	4b50      	ldr	r3, [pc, #320]	@ (8007a4c <tcp_slowtmr+0x594>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007910:	429a      	cmp	r2, r3
 8007912:	d106      	bne.n	8007922 <tcp_slowtmr+0x46a>
 8007914:	4b4e      	ldr	r3, [pc, #312]	@ (8007a50 <tcp_slowtmr+0x598>)
 8007916:	f240 526d 	movw	r2, #1389	@ 0x56d
 800791a:	494e      	ldr	r1, [pc, #312]	@ (8007a54 <tcp_slowtmr+0x59c>)
 800791c:	484e      	ldr	r0, [pc, #312]	@ (8007a58 <tcp_slowtmr+0x5a0>)
 800791e:	f007 fcc9 	bl	800f2b4 <printf>
        prev->next = pcb->next;
 8007922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007924:	68da      	ldr	r2, [r3, #12]
 8007926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007928:	60da      	str	r2, [r3, #12]
 800792a:	e00f      	b.n	800794c <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800792c:	4b47      	ldr	r3, [pc, #284]	@ (8007a4c <tcp_slowtmr+0x594>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007932:	429a      	cmp	r2, r3
 8007934:	d006      	beq.n	8007944 <tcp_slowtmr+0x48c>
 8007936:	4b46      	ldr	r3, [pc, #280]	@ (8007a50 <tcp_slowtmr+0x598>)
 8007938:	f240 5271 	movw	r2, #1393	@ 0x571
 800793c:	4947      	ldr	r1, [pc, #284]	@ (8007a5c <tcp_slowtmr+0x5a4>)
 800793e:	4846      	ldr	r0, [pc, #280]	@ (8007a58 <tcp_slowtmr+0x5a0>)
 8007940:	f007 fcb8 	bl	800f2b4 <printf>
        tcp_active_pcbs = pcb->next;
 8007944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	4a40      	ldr	r2, [pc, #256]	@ (8007a4c <tcp_slowtmr+0x594>)
 800794a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800794c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007950:	2b00      	cmp	r3, #0
 8007952:	d013      	beq.n	800797c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007956:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800795a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800795c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800795e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007960:	3304      	adds	r3, #4
 8007962:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007964:	8ad2      	ldrh	r2, [r2, #22]
 8007966:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007968:	8b09      	ldrh	r1, [r1, #24]
 800796a:	9102      	str	r1, [sp, #8]
 800796c:	9201      	str	r2, [sp, #4]
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	462b      	mov	r3, r5
 8007972:	4622      	mov	r2, r4
 8007974:	4601      	mov	r1, r0
 8007976:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007978:	f004 f984 	bl	800bc84 <tcp_rst>
      err_arg = pcb->callback_arg;
 800797c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007984:	7d1b      	ldrb	r3, [r3, #20]
 8007986:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800798a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800798c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8007992:	6838      	ldr	r0, [r7, #0]
 8007994:	f7ff f9f2 	bl	8006d7c <tcp_free>
      tcp_active_pcbs_changed = 0;
 8007998:	4b31      	ldr	r3, [pc, #196]	@ (8007a60 <tcp_slowtmr+0x5a8>)
 800799a:	2200      	movs	r2, #0
 800799c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d004      	beq.n	80079ae <tcp_slowtmr+0x4f6>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f06f 010c 	mvn.w	r1, #12
 80079aa:	68b8      	ldr	r0, [r7, #8]
 80079ac:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80079ae:	4b2c      	ldr	r3, [pc, #176]	@ (8007a60 <tcp_slowtmr+0x5a8>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d037      	beq.n	8007a26 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80079b6:	e592      	b.n	80074de <tcp_slowtmr+0x26>
      prev = pcb;
 80079b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80079bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80079c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c4:	7f1b      	ldrb	r3, [r3, #28]
 80079c6:	3301      	adds	r3, #1
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079cc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80079ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d0:	7f1a      	ldrb	r2, [r3, #28]
 80079d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d4:	7f5b      	ldrb	r3, [r3, #29]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d325      	bcc.n	8007a26 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80079da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079dc:	2200      	movs	r2, #0
 80079de:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80079e0:	4b1f      	ldr	r3, [pc, #124]	@ (8007a60 <tcp_slowtmr+0x5a8>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80079e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00b      	beq.n	8007a08 <tcp_slowtmr+0x550>
 80079f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079f8:	6912      	ldr	r2, [r2, #16]
 80079fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079fc:	4610      	mov	r0, r2
 80079fe:	4798      	blx	r3
 8007a00:	4603      	mov	r3, r0
 8007a02:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8007a06:	e002      	b.n	8007a0e <tcp_slowtmr+0x556>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8007a0e:	4b14      	ldr	r3, [pc, #80]	@ (8007a60 <tcp_slowtmr+0x5a8>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f47f ad62 	bne.w	80074dc <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007a18:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d102      	bne.n	8007a26 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8007a20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a22:	f003 fb7b 	bl	800b11c <tcp_output>
  while (pcb != NULL) {
 8007a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f47f ad5e 	bne.w	80074ea <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8007a32:	4b0c      	ldr	r3, [pc, #48]	@ (8007a64 <tcp_slowtmr+0x5ac>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007a38:	e069      	b.n	8007b0e <tcp_slowtmr+0x656>
 8007a3a:	bf00      	nop
 8007a3c:	200088ec 	.word	0x200088ec
 8007a40:	000a4cb8 	.word	0x000a4cb8
 8007a44:	10624dd3 	.word	0x10624dd3
 8007a48:	000124f8 	.word	0x000124f8
 8007a4c:	200088f8 	.word	0x200088f8
 8007a50:	08014754 	.word	0x08014754
 8007a54:	08014b8c 	.word	0x08014b8c
 8007a58:	08014798 	.word	0x08014798
 8007a5c:	08014bb8 	.word	0x08014bb8
 8007a60:	20008900 	.word	0x20008900
 8007a64:	200088fc 	.word	0x200088fc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6a:	7d1b      	ldrb	r3, [r3, #20]
 8007a6c:	2b0a      	cmp	r3, #10
 8007a6e:	d006      	beq.n	8007a7e <tcp_slowtmr+0x5c6>
 8007a70:	4b2b      	ldr	r3, [pc, #172]	@ (8007b20 <tcp_slowtmr+0x668>)
 8007a72:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8007a76:	492b      	ldr	r1, [pc, #172]	@ (8007b24 <tcp_slowtmr+0x66c>)
 8007a78:	482b      	ldr	r0, [pc, #172]	@ (8007b28 <tcp_slowtmr+0x670>)
 8007a7a:	f007 fc1b 	bl	800f2b4 <printf>
    pcb_remove = 0;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007a84:	4b29      	ldr	r3, [pc, #164]	@ (8007b2c <tcp_slowtmr+0x674>)
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a8a:	6a1b      	ldr	r3, [r3, #32]
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	2bf0      	cmp	r3, #240	@ 0xf0
 8007a90:	d904      	bls.n	8007a9c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8007a92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a96:	3301      	adds	r3, #1
 8007a98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d02f      	beq.n	8007b04 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007aa4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007aa6:	f000 fb2b 	bl	8008100 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d010      	beq.n	8007ad2 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8007b30 <tcp_slowtmr+0x678>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d106      	bne.n	8007ac8 <tcp_slowtmr+0x610>
 8007aba:	4b19      	ldr	r3, [pc, #100]	@ (8007b20 <tcp_slowtmr+0x668>)
 8007abc:	f240 52af 	movw	r2, #1455	@ 0x5af
 8007ac0:	491c      	ldr	r1, [pc, #112]	@ (8007b34 <tcp_slowtmr+0x67c>)
 8007ac2:	4819      	ldr	r0, [pc, #100]	@ (8007b28 <tcp_slowtmr+0x670>)
 8007ac4:	f007 fbf6 	bl	800f2b4 <printf>
        prev->next = pcb->next;
 8007ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aca:	68da      	ldr	r2, [r3, #12]
 8007acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ace:	60da      	str	r2, [r3, #12]
 8007ad0:	e00f      	b.n	8007af2 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007ad2:	4b17      	ldr	r3, [pc, #92]	@ (8007b30 <tcp_slowtmr+0x678>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d006      	beq.n	8007aea <tcp_slowtmr+0x632>
 8007adc:	4b10      	ldr	r3, [pc, #64]	@ (8007b20 <tcp_slowtmr+0x668>)
 8007ade:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8007ae2:	4915      	ldr	r1, [pc, #84]	@ (8007b38 <tcp_slowtmr+0x680>)
 8007ae4:	4810      	ldr	r0, [pc, #64]	@ (8007b28 <tcp_slowtmr+0x670>)
 8007ae6:	f007 fbe5 	bl	800f2b4 <printf>
        tcp_tw_pcbs = pcb->next;
 8007aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	4a10      	ldr	r2, [pc, #64]	@ (8007b30 <tcp_slowtmr+0x678>)
 8007af0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8007afc:	69f8      	ldr	r0, [r7, #28]
 8007afe:	f7ff f93d 	bl	8006d7c <tcp_free>
 8007b02:	e004      	b.n	8007b0e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8007b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b06:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1a9      	bne.n	8007a68 <tcp_slowtmr+0x5b0>
    }
  }
}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop
 8007b18:	3730      	adds	r7, #48	@ 0x30
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	08014754 	.word	0x08014754
 8007b24:	08014be4 	.word	0x08014be4
 8007b28:	08014798 	.word	0x08014798
 8007b2c:	200088ec 	.word	0x200088ec
 8007b30:	200088fc 	.word	0x200088fc
 8007b34:	08014c14 	.word	0x08014c14
 8007b38:	08014c3c 	.word	0x08014c3c

08007b3c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007b42:	4b2d      	ldr	r3, [pc, #180]	@ (8007bf8 <tcp_fasttmr+0xbc>)
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	3301      	adds	r3, #1
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8007bf8 <tcp_fasttmr+0xbc>)
 8007b4c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8007bfc <tcp_fasttmr+0xc0>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007b54:	e048      	b.n	8007be8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	7f9a      	ldrb	r2, [r3, #30]
 8007b5a:	4b27      	ldr	r3, [pc, #156]	@ (8007bf8 <tcp_fasttmr+0xbc>)
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d03f      	beq.n	8007be2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007b62:	4b25      	ldr	r3, [pc, #148]	@ (8007bf8 <tcp_fasttmr+0xbc>)
 8007b64:	781a      	ldrb	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	8b5b      	ldrh	r3, [r3, #26]
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d010      	beq.n	8007b98 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	8b5b      	ldrh	r3, [r3, #26]
 8007b7a:	f043 0302 	orr.w	r3, r3, #2
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f003 fac9 	bl	800b11c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	8b5b      	ldrh	r3, [r3, #26]
 8007b8e:	f023 0303 	bic.w	r3, r3, #3
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	8b5b      	ldrh	r3, [r3, #26]
 8007b9c:	f003 0308 	and.w	r3, r3, #8
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d009      	beq.n	8007bb8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	8b5b      	ldrh	r3, [r3, #26]
 8007ba8:	f023 0308 	bic.w	r3, r3, #8
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7ff fa76 	bl	80070a4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00a      	beq.n	8007bdc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8007c00 <tcp_fasttmr+0xc4>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f819 	bl	8007c04 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8007c00 <tcp_fasttmr+0xc4>)
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d000      	beq.n	8007bdc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007bda:	e7b8      	b.n	8007b4e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	607b      	str	r3, [r7, #4]
 8007be0:	e002      	b.n	8007be8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1b3      	bne.n	8007b56 <tcp_fasttmr+0x1a>
    }
  }
}
 8007bee:	bf00      	nop
 8007bf0:	bf00      	nop
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	20008902 	.word	0x20008902
 8007bfc:	200088f8 	.word	0x200088f8
 8007c00:	20008900 	.word	0x20008900

08007c04 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007c04:	b590      	push	{r4, r7, lr}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d109      	bne.n	8007c26 <tcp_process_refused_data+0x22>
 8007c12:	4b37      	ldr	r3, [pc, #220]	@ (8007cf0 <tcp_process_refused_data+0xec>)
 8007c14:	f240 6209 	movw	r2, #1545	@ 0x609
 8007c18:	4936      	ldr	r1, [pc, #216]	@ (8007cf4 <tcp_process_refused_data+0xf0>)
 8007c1a:	4837      	ldr	r0, [pc, #220]	@ (8007cf8 <tcp_process_refused_data+0xf4>)
 8007c1c:	f007 fb4a 	bl	800f2b4 <printf>
 8007c20:	f06f 030f 	mvn.w	r3, #15
 8007c24:	e060      	b.n	8007ce8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c2a:	7b5b      	ldrb	r3, [r3, #13]
 8007c2c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c32:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00b      	beq.n	8007c5c <tcp_process_refused_data+0x58>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6918      	ldr	r0, [r3, #16]
 8007c4e:	2300      	movs	r3, #0
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	6879      	ldr	r1, [r7, #4]
 8007c54:	47a0      	blx	r4
 8007c56:	4603      	mov	r3, r0
 8007c58:	73fb      	strb	r3, [r7, #15]
 8007c5a:	e007      	b.n	8007c6c <tcp_process_refused_data+0x68>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	6879      	ldr	r1, [r7, #4]
 8007c62:	2000      	movs	r0, #0
 8007c64:	f000 f8a4 	bl	8007db0 <tcp_recv_null>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d12a      	bne.n	8007cca <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007c74:	7bbb      	ldrb	r3, [r7, #14]
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d033      	beq.n	8007ce6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c82:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007c86:	d005      	beq.n	8007c94 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00b      	beq.n	8007cb6 <tcp_process_refused_data+0xb2>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6918      	ldr	r0, [r3, #16]
 8007ca8:	2300      	movs	r3, #0
 8007caa:	2200      	movs	r2, #0
 8007cac:	6879      	ldr	r1, [r7, #4]
 8007cae:	47a0      	blx	r4
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	73fb      	strb	r3, [r7, #15]
 8007cb4:	e001      	b.n	8007cba <tcp_process_refused_data+0xb6>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cbe:	f113 0f0d 	cmn.w	r3, #13
 8007cc2:	d110      	bne.n	8007ce6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007cc4:	f06f 030c 	mvn.w	r3, #12
 8007cc8:	e00e      	b.n	8007ce8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cce:	f113 0f0d 	cmn.w	r3, #13
 8007cd2:	d102      	bne.n	8007cda <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007cd4:	f06f 030c 	mvn.w	r3, #12
 8007cd8:	e006      	b.n	8007ce8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8007ce0:	f06f 0304 	mvn.w	r3, #4
 8007ce4:	e000      	b.n	8007ce8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd90      	pop	{r4, r7, pc}
 8007cf0:	08014754 	.word	0x08014754
 8007cf4:	08014c64 	.word	0x08014c64
 8007cf8:	08014798 	.word	0x08014798

08007cfc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007d04:	e007      	b.n	8007d16 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f80a 	bl	8007d26 <tcp_seg_free>
    seg = next;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1f4      	bne.n	8007d06 <tcp_segs_free+0xa>
  }
}
 8007d1c:	bf00      	nop
 8007d1e:	bf00      	nop
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b082      	sub	sp, #8
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00c      	beq.n	8007d4e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d004      	beq.n	8007d46 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe fcd9 	bl	80066f8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	2003      	movs	r0, #3
 8007d4a:	f7fd fe5f 	bl	8005a0c <memp_free>
  }
}
 8007d4e:	bf00      	nop
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
	...

08007d58 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d106      	bne.n	8007d74 <tcp_seg_copy+0x1c>
 8007d66:	4b0f      	ldr	r3, [pc, #60]	@ (8007da4 <tcp_seg_copy+0x4c>)
 8007d68:	f240 6282 	movw	r2, #1666	@ 0x682
 8007d6c:	490e      	ldr	r1, [pc, #56]	@ (8007da8 <tcp_seg_copy+0x50>)
 8007d6e:	480f      	ldr	r0, [pc, #60]	@ (8007dac <tcp_seg_copy+0x54>)
 8007d70:	f007 faa0 	bl	800f2b4 <printf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007d74:	2003      	movs	r0, #3
 8007d76:	f7fd fdd9 	bl	800592c <memp_malloc>
 8007d7a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <tcp_seg_copy+0x2e>
    return NULL;
 8007d82:	2300      	movs	r3, #0
 8007d84:	e00a      	b.n	8007d9c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007d86:	2210      	movs	r2, #16
 8007d88:	6879      	ldr	r1, [r7, #4]
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f007 fbdc 	bl	800f548 <memcpy>
  pbuf_ref(cseg->p);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7fe fd4f 	bl	8006838 <pbuf_ref>
  return cseg;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	08014754 	.word	0x08014754
 8007da8:	08014ca8 	.word	0x08014ca8
 8007dac:	08014798 	.word	0x08014798

08007db0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
 8007dbc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d109      	bne.n	8007dd8 <tcp_recv_null+0x28>
 8007dc4:	4b12      	ldr	r3, [pc, #72]	@ (8007e10 <tcp_recv_null+0x60>)
 8007dc6:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8007dca:	4912      	ldr	r1, [pc, #72]	@ (8007e14 <tcp_recv_null+0x64>)
 8007dcc:	4812      	ldr	r0, [pc, #72]	@ (8007e18 <tcp_recv_null+0x68>)
 8007dce:	f007 fa71 	bl	800f2b4 <printf>
 8007dd2:	f06f 030f 	mvn.w	r3, #15
 8007dd6:	e016      	b.n	8007e06 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d009      	beq.n	8007df2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	891b      	ldrh	r3, [r3, #8]
 8007de2:	4619      	mov	r1, r3
 8007de4:	68b8      	ldr	r0, [r7, #8]
 8007de6:	f7ff fb17 	bl	8007418 <tcp_recved>
    pbuf_free(p);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7fe fc84 	bl	80066f8 <pbuf_free>
 8007df0:	e008      	b.n	8007e04 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007df2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d104      	bne.n	8007e04 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007dfa:	68b8      	ldr	r0, [r7, #8]
 8007dfc:	f7ff f9bc 	bl	8007178 <tcp_close>
 8007e00:	4603      	mov	r3, r0
 8007e02:	e000      	b.n	8007e06 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	08014754 	.word	0x08014754
 8007e14:	08014cc4 	.word	0x08014cc4
 8007e18:	08014798 	.word	0x08014798

08007e1c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	4603      	mov	r3, r0
 8007e24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	db01      	blt.n	8007e32 <tcp_kill_prio+0x16>
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	e000      	b.n	8007e34 <tcp_kill_prio+0x18>
 8007e32:	237f      	movs	r3, #127	@ 0x7f
 8007e34:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007e36:	7afb      	ldrb	r3, [r7, #11]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d034      	beq.n	8007ea6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007e3c:	7afb      	ldrb	r3, [r7, #11]
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007e42:	2300      	movs	r3, #0
 8007e44:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007e46:	2300      	movs	r3, #0
 8007e48:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e4a:	4b19      	ldr	r3, [pc, #100]	@ (8007eb0 <tcp_kill_prio+0x94>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	617b      	str	r3, [r7, #20]
 8007e50:	e01f      	b.n	8007e92 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	7d5b      	ldrb	r3, [r3, #21]
 8007e56:	7afa      	ldrb	r2, [r7, #11]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d80c      	bhi.n	8007e76 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007e60:	7afa      	ldrb	r2, [r7, #11]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d112      	bne.n	8007e8c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007e66:	4b13      	ldr	r3, [pc, #76]	@ (8007eb4 <tcp_kill_prio+0x98>)
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d80a      	bhi.n	8007e8c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007e76:	4b0f      	ldr	r3, [pc, #60]	@ (8007eb4 <tcp_kill_prio+0x98>)
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	7d5b      	ldrb	r3, [r3, #21]
 8007e8a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	617b      	str	r3, [r7, #20]
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1dc      	bne.n	8007e52 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d004      	beq.n	8007ea8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007e9e:	6938      	ldr	r0, [r7, #16]
 8007ea0:	f7ff fa54 	bl	800734c <tcp_abort>
 8007ea4:	e000      	b.n	8007ea8 <tcp_kill_prio+0x8c>
    return;
 8007ea6:	bf00      	nop
  }
}
 8007ea8:	3718      	adds	r7, #24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	200088f8 	.word	0x200088f8
 8007eb4:	200088ec 	.word	0x200088ec

08007eb8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007ec2:	79fb      	ldrb	r3, [r7, #7]
 8007ec4:	2b08      	cmp	r3, #8
 8007ec6:	d009      	beq.n	8007edc <tcp_kill_state+0x24>
 8007ec8:	79fb      	ldrb	r3, [r7, #7]
 8007eca:	2b09      	cmp	r3, #9
 8007ecc:	d006      	beq.n	8007edc <tcp_kill_state+0x24>
 8007ece:	4b1a      	ldr	r3, [pc, #104]	@ (8007f38 <tcp_kill_state+0x80>)
 8007ed0:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8007ed4:	4919      	ldr	r1, [pc, #100]	@ (8007f3c <tcp_kill_state+0x84>)
 8007ed6:	481a      	ldr	r0, [pc, #104]	@ (8007f40 <tcp_kill_state+0x88>)
 8007ed8:	f007 f9ec 	bl	800f2b4 <printf>

  inactivity = 0;
 8007edc:	2300      	movs	r3, #0
 8007ede:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ee4:	4b17      	ldr	r3, [pc, #92]	@ (8007f44 <tcp_kill_state+0x8c>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	617b      	str	r3, [r7, #20]
 8007eea:	e017      	b.n	8007f1c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	7d1b      	ldrb	r3, [r3, #20]
 8007ef0:	79fa      	ldrb	r2, [r7, #7]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d10f      	bne.n	8007f16 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007ef6:	4b14      	ldr	r3, [pc, #80]	@ (8007f48 <tcp_kill_state+0x90>)
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	1ad3      	subs	r3, r2, r3
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d807      	bhi.n	8007f16 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007f06:	4b10      	ldr	r3, [pc, #64]	@ (8007f48 <tcp_kill_state+0x90>)
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	617b      	str	r3, [r7, #20]
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1e4      	bne.n	8007eec <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d003      	beq.n	8007f30 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007f28:	2100      	movs	r1, #0
 8007f2a:	6938      	ldr	r0, [r7, #16]
 8007f2c:	f7ff f950 	bl	80071d0 <tcp_abandon>
  }
}
 8007f30:	bf00      	nop
 8007f32:	3718      	adds	r7, #24
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	08014754 	.word	0x08014754
 8007f3c:	08014ce0 	.word	0x08014ce0
 8007f40:	08014798 	.word	0x08014798
 8007f44:	200088f8 	.word	0x200088f8
 8007f48:	200088ec 	.word	0x200088ec

08007f4c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007f52:	2300      	movs	r3, #0
 8007f54:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007f56:	2300      	movs	r3, #0
 8007f58:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f5a:	4b12      	ldr	r3, [pc, #72]	@ (8007fa4 <tcp_kill_timewait+0x58>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	60fb      	str	r3, [r7, #12]
 8007f60:	e012      	b.n	8007f88 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007f62:	4b11      	ldr	r3, [pc, #68]	@ (8007fa8 <tcp_kill_timewait+0x5c>)
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d807      	bhi.n	8007f82 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007f72:	4b0d      	ldr	r3, [pc, #52]	@ (8007fa8 <tcp_kill_timewait+0x5c>)
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	60fb      	str	r3, [r7, #12]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1e9      	bne.n	8007f62 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d002      	beq.n	8007f9a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007f94:	68b8      	ldr	r0, [r7, #8]
 8007f96:	f7ff f9d9 	bl	800734c <tcp_abort>
  }
}
 8007f9a:	bf00      	nop
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	200088fc 	.word	0x200088fc
 8007fa8:	200088ec 	.word	0x200088ec

08007fac <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007fb2:	4b10      	ldr	r3, [pc, #64]	@ (8007ff4 <tcp_handle_closepend+0x48>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007fb8:	e014      	b.n	8007fe4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	8b5b      	ldrh	r3, [r3, #26]
 8007fc4:	f003 0308 	and.w	r3, r3, #8
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d009      	beq.n	8007fe0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	8b5b      	ldrh	r3, [r3, #26]
 8007fd0:	f023 0308 	bic.w	r3, r3, #8
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7ff f862 	bl	80070a4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1e7      	bne.n	8007fba <tcp_handle_closepend+0xe>
  }
}
 8007fea:	bf00      	nop
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	200088f8 	.word	0x200088f8

08007ff8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	4603      	mov	r3, r0
 8008000:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008002:	2001      	movs	r0, #1
 8008004:	f7fd fc92 	bl	800592c <memp_malloc>
 8008008:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d126      	bne.n	800805e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008010:	f7ff ffcc 	bl	8007fac <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008014:	f7ff ff9a 	bl	8007f4c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008018:	2001      	movs	r0, #1
 800801a:	f7fd fc87 	bl	800592c <memp_malloc>
 800801e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d11b      	bne.n	800805e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008026:	2009      	movs	r0, #9
 8008028:	f7ff ff46 	bl	8007eb8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800802c:	2001      	movs	r0, #1
 800802e:	f7fd fc7d 	bl	800592c <memp_malloc>
 8008032:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d111      	bne.n	800805e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800803a:	2008      	movs	r0, #8
 800803c:	f7ff ff3c 	bl	8007eb8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008040:	2001      	movs	r0, #1
 8008042:	f7fd fc73 	bl	800592c <memp_malloc>
 8008046:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d107      	bne.n	800805e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800804e:	79fb      	ldrb	r3, [r7, #7]
 8008050:	4618      	mov	r0, r3
 8008052:	f7ff fee3 	bl	8007e1c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008056:	2001      	movs	r0, #1
 8008058:	f7fd fc68 	bl	800592c <memp_malloc>
 800805c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d03f      	beq.n	80080e4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008064:	229c      	movs	r2, #156	@ 0x9c
 8008066:	2100      	movs	r1, #0
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f007 f9f0 	bl	800f44e <memset>
    pcb->prio = prio;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	79fa      	ldrb	r2, [r7, #7]
 8008072:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800807a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8008084:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	22ff      	movs	r2, #255	@ 0xff
 8008092:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800809a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2206      	movs	r2, #6
 80080a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2206      	movs	r2, #6
 80080a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80080b0:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80080ba:	4b0d      	ldr	r3, [pc, #52]	@ (80080f0 <tcp_alloc+0xf8>)
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80080c2:	4b0c      	ldr	r3, [pc, #48]	@ (80080f4 <tcp_alloc+0xfc>)
 80080c4:	781a      	ldrb	r2, [r3, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80080d0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	4a08      	ldr	r2, [pc, #32]	@ (80080f8 <tcp_alloc+0x100>)
 80080d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	4a07      	ldr	r2, [pc, #28]	@ (80080fc <tcp_alloc+0x104>)
 80080e0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80080e4:	68fb      	ldr	r3, [r7, #12]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	200088ec 	.word	0x200088ec
 80080f4:	20008902 	.word	0x20008902
 80080f8:	08007db1 	.word	0x08007db1
 80080fc:	006ddd00 	.word	0x006ddd00

08008100 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d107      	bne.n	800811e <tcp_pcb_purge+0x1e>
 800810e:	4b21      	ldr	r3, [pc, #132]	@ (8008194 <tcp_pcb_purge+0x94>)
 8008110:	f640 0251 	movw	r2, #2129	@ 0x851
 8008114:	4920      	ldr	r1, [pc, #128]	@ (8008198 <tcp_pcb_purge+0x98>)
 8008116:	4821      	ldr	r0, [pc, #132]	@ (800819c <tcp_pcb_purge+0x9c>)
 8008118:	f007 f8cc 	bl	800f2b4 <printf>
 800811c:	e037      	b.n	800818e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	7d1b      	ldrb	r3, [r3, #20]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d033      	beq.n	800818e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800812a:	2b0a      	cmp	r3, #10
 800812c:	d02f      	beq.n	800818e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008132:	2b01      	cmp	r3, #1
 8008134:	d02b      	beq.n	800818e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800813a:	2b00      	cmp	r3, #0
 800813c:	d007      	beq.n	800814e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe fad8 	bl	80066f8 <pbuf_free>
      pcb->refused_data = NULL;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008152:	2b00      	cmp	r3, #0
 8008154:	d002      	beq.n	800815c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f986 	bl	8008468 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008162:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008168:	4618      	mov	r0, r3
 800816a:	f7ff fdc7 	bl	8007cfc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008172:	4618      	mov	r0, r3
 8008174:	f7ff fdc2 	bl	8007cfc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	08014754 	.word	0x08014754
 8008198:	08014da0 	.word	0x08014da0
 800819c:	08014798 	.word	0x08014798

080081a0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d106      	bne.n	80081be <tcp_pcb_remove+0x1e>
 80081b0:	4b3e      	ldr	r3, [pc, #248]	@ (80082ac <tcp_pcb_remove+0x10c>)
 80081b2:	f640 0283 	movw	r2, #2179	@ 0x883
 80081b6:	493e      	ldr	r1, [pc, #248]	@ (80082b0 <tcp_pcb_remove+0x110>)
 80081b8:	483e      	ldr	r0, [pc, #248]	@ (80082b4 <tcp_pcb_remove+0x114>)
 80081ba:	f007 f87b 	bl	800f2b4 <printf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d106      	bne.n	80081d2 <tcp_pcb_remove+0x32>
 80081c4:	4b39      	ldr	r3, [pc, #228]	@ (80082ac <tcp_pcb_remove+0x10c>)
 80081c6:	f640 0284 	movw	r2, #2180	@ 0x884
 80081ca:	493b      	ldr	r1, [pc, #236]	@ (80082b8 <tcp_pcb_remove+0x118>)
 80081cc:	4839      	ldr	r0, [pc, #228]	@ (80082b4 <tcp_pcb_remove+0x114>)
 80081ce:	f007 f871 	bl	800f2b4 <printf>

  TCP_RMV(pcblist, pcb);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d105      	bne.n	80081e8 <tcp_pcb_remove+0x48>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68da      	ldr	r2, [r3, #12]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	e013      	b.n	8008210 <tcp_pcb_remove+0x70>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	60fb      	str	r3, [r7, #12]
 80081ee:	e00c      	b.n	800820a <tcp_pcb_remove+0x6a>
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	683a      	ldr	r2, [r7, #0]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d104      	bne.n	8008204 <tcp_pcb_remove+0x64>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	68da      	ldr	r2, [r3, #12]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	60da      	str	r2, [r3, #12]
 8008202:	e005      	b.n	8008210 <tcp_pcb_remove+0x70>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	60fb      	str	r3, [r7, #12]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1ef      	bne.n	80081f0 <tcp_pcb_remove+0x50>
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2200      	movs	r2, #0
 8008214:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008216:	6838      	ldr	r0, [r7, #0]
 8008218:	f7ff ff72 	bl	8008100 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	7d1b      	ldrb	r3, [r3, #20]
 8008220:	2b0a      	cmp	r3, #10
 8008222:	d013      	beq.n	800824c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008228:	2b01      	cmp	r3, #1
 800822a:	d00f      	beq.n	800824c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	8b5b      	ldrh	r3, [r3, #26]
 8008230:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008234:	2b00      	cmp	r3, #0
 8008236:	d009      	beq.n	800824c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	8b5b      	ldrh	r3, [r3, #26]
 800823c:	f043 0302 	orr.w	r3, r3, #2
 8008240:	b29a      	uxth	r2, r3
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008246:	6838      	ldr	r0, [r7, #0]
 8008248:	f002 ff68 	bl	800b11c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	7d1b      	ldrb	r3, [r3, #20]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d020      	beq.n	8008296 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008258:	2b00      	cmp	r3, #0
 800825a:	d006      	beq.n	800826a <tcp_pcb_remove+0xca>
 800825c:	4b13      	ldr	r3, [pc, #76]	@ (80082ac <tcp_pcb_remove+0x10c>)
 800825e:	f640 0293 	movw	r2, #2195	@ 0x893
 8008262:	4916      	ldr	r1, [pc, #88]	@ (80082bc <tcp_pcb_remove+0x11c>)
 8008264:	4813      	ldr	r0, [pc, #76]	@ (80082b4 <tcp_pcb_remove+0x114>)
 8008266:	f007 f825 	bl	800f2b4 <printf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800826e:	2b00      	cmp	r3, #0
 8008270:	d006      	beq.n	8008280 <tcp_pcb_remove+0xe0>
 8008272:	4b0e      	ldr	r3, [pc, #56]	@ (80082ac <tcp_pcb_remove+0x10c>)
 8008274:	f640 0294 	movw	r2, #2196	@ 0x894
 8008278:	4911      	ldr	r1, [pc, #68]	@ (80082c0 <tcp_pcb_remove+0x120>)
 800827a:	480e      	ldr	r0, [pc, #56]	@ (80082b4 <tcp_pcb_remove+0x114>)
 800827c:	f007 f81a 	bl	800f2b4 <printf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008284:	2b00      	cmp	r3, #0
 8008286:	d006      	beq.n	8008296 <tcp_pcb_remove+0xf6>
 8008288:	4b08      	ldr	r3, [pc, #32]	@ (80082ac <tcp_pcb_remove+0x10c>)
 800828a:	f640 0296 	movw	r2, #2198	@ 0x896
 800828e:	490d      	ldr	r1, [pc, #52]	@ (80082c4 <tcp_pcb_remove+0x124>)
 8008290:	4808      	ldr	r0, [pc, #32]	@ (80082b4 <tcp_pcb_remove+0x114>)
 8008292:	f007 f80f 	bl	800f2b4 <printf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2200      	movs	r2, #0
 800829a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	2200      	movs	r2, #0
 80082a0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80082a2:	bf00      	nop
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	08014754 	.word	0x08014754
 80082b0:	08014dbc 	.word	0x08014dbc
 80082b4:	08014798 	.word	0x08014798
 80082b8:	08014dd8 	.word	0x08014dd8
 80082bc:	08014df8 	.word	0x08014df8
 80082c0:	08014e10 	.word	0x08014e10
 80082c4:	08014e2c 	.word	0x08014e2c

080082c8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d106      	bne.n	80082e4 <tcp_next_iss+0x1c>
 80082d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008300 <tcp_next_iss+0x38>)
 80082d8:	f640 02af 	movw	r2, #2223	@ 0x8af
 80082dc:	4909      	ldr	r1, [pc, #36]	@ (8008304 <tcp_next_iss+0x3c>)
 80082de:	480a      	ldr	r0, [pc, #40]	@ (8008308 <tcp_next_iss+0x40>)
 80082e0:	f006 ffe8 	bl	800f2b4 <printf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80082e4:	4b09      	ldr	r3, [pc, #36]	@ (800830c <tcp_next_iss+0x44>)
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	4b09      	ldr	r3, [pc, #36]	@ (8008310 <tcp_next_iss+0x48>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4413      	add	r3, r2
 80082ee:	4a07      	ldr	r2, [pc, #28]	@ (800830c <tcp_next_iss+0x44>)
 80082f0:	6013      	str	r3, [r2, #0]
  return iss;
 80082f2:	4b06      	ldr	r3, [pc, #24]	@ (800830c <tcp_next_iss+0x44>)
 80082f4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	08014754 	.word	0x08014754
 8008304:	08014e44 	.word	0x08014e44
 8008308:	08014798 	.word	0x08014798
 800830c:	20000024 	.word	0x20000024
 8008310:	200088ec 	.word	0x200088ec

08008314 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
 800831a:	4603      	mov	r3, r0
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d106      	bne.n	8008336 <tcp_eff_send_mss_netif+0x22>
 8008328:	4b14      	ldr	r3, [pc, #80]	@ (800837c <tcp_eff_send_mss_netif+0x68>)
 800832a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800832e:	4914      	ldr	r1, [pc, #80]	@ (8008380 <tcp_eff_send_mss_netif+0x6c>)
 8008330:	4814      	ldr	r0, [pc, #80]	@ (8008384 <tcp_eff_send_mss_netif+0x70>)
 8008332:	f006 ffbf 	bl	800f2b4 <printf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d101      	bne.n	8008340 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800833c:	89fb      	ldrh	r3, [r7, #14]
 800833e:	e019      	b.n	8008374 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008344:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008346:	8afb      	ldrh	r3, [r7, #22]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d012      	beq.n	8008372 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800834c:	2328      	movs	r3, #40	@ 0x28
 800834e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008350:	8afa      	ldrh	r2, [r7, #22]
 8008352:	8abb      	ldrh	r3, [r7, #20]
 8008354:	429a      	cmp	r2, r3
 8008356:	d904      	bls.n	8008362 <tcp_eff_send_mss_netif+0x4e>
 8008358:	8afa      	ldrh	r2, [r7, #22]
 800835a:	8abb      	ldrh	r3, [r7, #20]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	b29b      	uxth	r3, r3
 8008360:	e000      	b.n	8008364 <tcp_eff_send_mss_netif+0x50>
 8008362:	2300      	movs	r3, #0
 8008364:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008366:	8a7a      	ldrh	r2, [r7, #18]
 8008368:	89fb      	ldrh	r3, [r7, #14]
 800836a:	4293      	cmp	r3, r2
 800836c:	bf28      	it	cs
 800836e:	4613      	movcs	r3, r2
 8008370:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008372:	89fb      	ldrh	r3, [r7, #14]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3718      	adds	r7, #24
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	08014754 	.word	0x08014754
 8008380:	08014e60 	.word	0x08014e60
 8008384:	08014798 	.word	0x08014798

08008388 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d119      	bne.n	80083d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800839c:	4b10      	ldr	r3, [pc, #64]	@ (80083e0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800839e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80083a2:	4910      	ldr	r1, [pc, #64]	@ (80083e4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80083a4:	4810      	ldr	r0, [pc, #64]	@ (80083e8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80083a6:	f006 ff85 	bl	800f2b4 <printf>

  while (pcb != NULL) {
 80083aa:	e011      	b.n	80083d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d108      	bne.n	80083ca <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f7fe ffc4 	bl	800734c <tcp_abort>
      pcb = next;
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	60fb      	str	r3, [r7, #12]
 80083c8:	e002      	b.n	80083d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1ea      	bne.n	80083ac <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80083d6:	bf00      	nop
 80083d8:	bf00      	nop
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	08014754 	.word	0x08014754
 80083e4:	08014e88 	.word	0x08014e88
 80083e8:	08014798 	.word	0x08014798

080083ec <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d02a      	beq.n	8008452 <tcp_netif_ip_addr_changed+0x66>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d026      	beq.n	8008452 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008404:	4b15      	ldr	r3, [pc, #84]	@ (800845c <tcp_netif_ip_addr_changed+0x70>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f7ff ffbc 	bl	8008388 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008410:	4b13      	ldr	r3, [pc, #76]	@ (8008460 <tcp_netif_ip_addr_changed+0x74>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7ff ffb6 	bl	8008388 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d017      	beq.n	8008452 <tcp_netif_ip_addr_changed+0x66>
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d013      	beq.n	8008452 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800842a:	4b0e      	ldr	r3, [pc, #56]	@ (8008464 <tcp_netif_ip_addr_changed+0x78>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	60fb      	str	r3, [r7, #12]
 8008430:	e00c      	b.n	800844c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	429a      	cmp	r2, r3
 800843c:	d103      	bne.n	8008446 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	60fb      	str	r3, [r7, #12]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1ef      	bne.n	8008432 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008452:	bf00      	nop
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	200088f8 	.word	0x200088f8
 8008460:	200088f0 	.word	0x200088f0
 8008464:	200088f4 	.word	0x200088f4

08008468 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008474:	2b00      	cmp	r3, #0
 8008476:	d007      	beq.n	8008488 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800847c:	4618      	mov	r0, r3
 800847e:	f7ff fc3d 	bl	8007cfc <tcp_segs_free>
    pcb->ooseq = NULL;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008490:	b590      	push	{r4, r7, lr}
 8008492:	b08d      	sub	sp, #52	@ 0x34
 8008494:	af04      	add	r7, sp, #16
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d105      	bne.n	80084ac <tcp_input+0x1c>
 80084a0:	4b9b      	ldr	r3, [pc, #620]	@ (8008710 <tcp_input+0x280>)
 80084a2:	2283      	movs	r2, #131	@ 0x83
 80084a4:	499b      	ldr	r1, [pc, #620]	@ (8008714 <tcp_input+0x284>)
 80084a6:	489c      	ldr	r0, [pc, #624]	@ (8008718 <tcp_input+0x288>)
 80084a8:	f006 ff04 	bl	800f2b4 <printf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	4a9a      	ldr	r2, [pc, #616]	@ (800871c <tcp_input+0x28c>)
 80084b2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	895b      	ldrh	r3, [r3, #10]
 80084b8:	2b13      	cmp	r3, #19
 80084ba:	f240 83d1 	bls.w	8008c60 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80084be:	4b98      	ldr	r3, [pc, #608]	@ (8008720 <tcp_input+0x290>)
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	4a97      	ldr	r2, [pc, #604]	@ (8008720 <tcp_input+0x290>)
 80084c4:	6812      	ldr	r2, [r2, #0]
 80084c6:	4611      	mov	r1, r2
 80084c8:	4618      	mov	r0, r3
 80084ca:	f005 febf 	bl	800e24c <ip4_addr_isbroadcast_u32>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f040 83c7 	bne.w	8008c64 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80084d6:	4b92      	ldr	r3, [pc, #584]	@ (8008720 <tcp_input+0x290>)
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80084de:	2be0      	cmp	r3, #224	@ 0xe0
 80084e0:	f000 83c0 	beq.w	8008c64 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80084e4:	4b8d      	ldr	r3, [pc, #564]	@ (800871c <tcp_input+0x28c>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	899b      	ldrh	r3, [r3, #12]
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fc fda5 	bl	800503c <lwip_htons>
 80084f2:	4603      	mov	r3, r0
 80084f4:	0b1b      	lsrs	r3, r3, #12
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80084fe:	7cbb      	ldrb	r3, [r7, #18]
 8008500:	2b13      	cmp	r3, #19
 8008502:	f240 83b1 	bls.w	8008c68 <tcp_input+0x7d8>
 8008506:	7cbb      	ldrb	r3, [r7, #18]
 8008508:	b29a      	uxth	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	891b      	ldrh	r3, [r3, #8]
 800850e:	429a      	cmp	r2, r3
 8008510:	f200 83aa 	bhi.w	8008c68 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008514:	7cbb      	ldrb	r3, [r7, #18]
 8008516:	b29b      	uxth	r3, r3
 8008518:	3b14      	subs	r3, #20
 800851a:	b29a      	uxth	r2, r3
 800851c:	4b81      	ldr	r3, [pc, #516]	@ (8008724 <tcp_input+0x294>)
 800851e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008520:	4b81      	ldr	r3, [pc, #516]	@ (8008728 <tcp_input+0x298>)
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	895a      	ldrh	r2, [r3, #10]
 800852a:	7cbb      	ldrb	r3, [r7, #18]
 800852c:	b29b      	uxth	r3, r3
 800852e:	429a      	cmp	r2, r3
 8008530:	d309      	bcc.n	8008546 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008532:	4b7c      	ldr	r3, [pc, #496]	@ (8008724 <tcp_input+0x294>)
 8008534:	881a      	ldrh	r2, [r3, #0]
 8008536:	4b7d      	ldr	r3, [pc, #500]	@ (800872c <tcp_input+0x29c>)
 8008538:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800853a:	7cbb      	ldrb	r3, [r7, #18]
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7fe f854 	bl	80065ec <pbuf_remove_header>
 8008544:	e04e      	b.n	80085e4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d105      	bne.n	800855a <tcp_input+0xca>
 800854e:	4b70      	ldr	r3, [pc, #448]	@ (8008710 <tcp_input+0x280>)
 8008550:	22c2      	movs	r2, #194	@ 0xc2
 8008552:	4977      	ldr	r1, [pc, #476]	@ (8008730 <tcp_input+0x2a0>)
 8008554:	4870      	ldr	r0, [pc, #448]	@ (8008718 <tcp_input+0x288>)
 8008556:	f006 fead 	bl	800f2b4 <printf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800855a:	2114      	movs	r1, #20
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f7fe f845 	bl	80065ec <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	895a      	ldrh	r2, [r3, #10]
 8008566:	4b71      	ldr	r3, [pc, #452]	@ (800872c <tcp_input+0x29c>)
 8008568:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800856a:	4b6e      	ldr	r3, [pc, #440]	@ (8008724 <tcp_input+0x294>)
 800856c:	881a      	ldrh	r2, [r3, #0]
 800856e:	4b6f      	ldr	r3, [pc, #444]	@ (800872c <tcp_input+0x29c>)
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008576:	4b6d      	ldr	r3, [pc, #436]	@ (800872c <tcp_input+0x29c>)
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7fe f835 	bl	80065ec <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	895b      	ldrh	r3, [r3, #10]
 8008588:	8a3a      	ldrh	r2, [r7, #16]
 800858a:	429a      	cmp	r2, r3
 800858c:	f200 836e 	bhi.w	8008c6c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	4a64      	ldr	r2, [pc, #400]	@ (8008728 <tcp_input+0x298>)
 8008598:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	8a3a      	ldrh	r2, [r7, #16]
 80085a0:	4611      	mov	r1, r2
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe f822 	bl	80065ec <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	891a      	ldrh	r2, [r3, #8]
 80085ac:	8a3b      	ldrh	r3, [r7, #16]
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	895b      	ldrh	r3, [r3, #10]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d005      	beq.n	80085ca <tcp_input+0x13a>
 80085be:	4b54      	ldr	r3, [pc, #336]	@ (8008710 <tcp_input+0x280>)
 80085c0:	22df      	movs	r2, #223	@ 0xdf
 80085c2:	495c      	ldr	r1, [pc, #368]	@ (8008734 <tcp_input+0x2a4>)
 80085c4:	4854      	ldr	r0, [pc, #336]	@ (8008718 <tcp_input+0x288>)
 80085c6:	f006 fe75 	bl	800f2b4 <printf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	891a      	ldrh	r2, [r3, #8]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	891b      	ldrh	r3, [r3, #8]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d005      	beq.n	80085e4 <tcp_input+0x154>
 80085d8:	4b4d      	ldr	r3, [pc, #308]	@ (8008710 <tcp_input+0x280>)
 80085da:	22e0      	movs	r2, #224	@ 0xe0
 80085dc:	4956      	ldr	r1, [pc, #344]	@ (8008738 <tcp_input+0x2a8>)
 80085de:	484e      	ldr	r0, [pc, #312]	@ (8008718 <tcp_input+0x288>)
 80085e0:	f006 fe68 	bl	800f2b4 <printf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80085e4:	4b4d      	ldr	r3, [pc, #308]	@ (800871c <tcp_input+0x28c>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	4a4b      	ldr	r2, [pc, #300]	@ (800871c <tcp_input+0x28c>)
 80085ee:	6814      	ldr	r4, [r2, #0]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fc fd23 	bl	800503c <lwip_htons>
 80085f6:	4603      	mov	r3, r0
 80085f8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80085fa:	4b48      	ldr	r3, [pc, #288]	@ (800871c <tcp_input+0x28c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	885b      	ldrh	r3, [r3, #2]
 8008600:	b29b      	uxth	r3, r3
 8008602:	4a46      	ldr	r2, [pc, #280]	@ (800871c <tcp_input+0x28c>)
 8008604:	6814      	ldr	r4, [r2, #0]
 8008606:	4618      	mov	r0, r3
 8008608:	f7fc fd18 	bl	800503c <lwip_htons>
 800860c:	4603      	mov	r3, r0
 800860e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008610:	4b42      	ldr	r3, [pc, #264]	@ (800871c <tcp_input+0x28c>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	4a41      	ldr	r2, [pc, #260]	@ (800871c <tcp_input+0x28c>)
 8008618:	6814      	ldr	r4, [r2, #0]
 800861a:	4618      	mov	r0, r3
 800861c:	f7fc fd23 	bl	8005066 <lwip_htonl>
 8008620:	4603      	mov	r3, r0
 8008622:	6063      	str	r3, [r4, #4]
 8008624:	6863      	ldr	r3, [r4, #4]
 8008626:	4a45      	ldr	r2, [pc, #276]	@ (800873c <tcp_input+0x2ac>)
 8008628:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800862a:	4b3c      	ldr	r3, [pc, #240]	@ (800871c <tcp_input+0x28c>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	4a3a      	ldr	r2, [pc, #232]	@ (800871c <tcp_input+0x28c>)
 8008632:	6814      	ldr	r4, [r2, #0]
 8008634:	4618      	mov	r0, r3
 8008636:	f7fc fd16 	bl	8005066 <lwip_htonl>
 800863a:	4603      	mov	r3, r0
 800863c:	60a3      	str	r3, [r4, #8]
 800863e:	68a3      	ldr	r3, [r4, #8]
 8008640:	4a3f      	ldr	r2, [pc, #252]	@ (8008740 <tcp_input+0x2b0>)
 8008642:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008644:	4b35      	ldr	r3, [pc, #212]	@ (800871c <tcp_input+0x28c>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	89db      	ldrh	r3, [r3, #14]
 800864a:	b29b      	uxth	r3, r3
 800864c:	4a33      	ldr	r2, [pc, #204]	@ (800871c <tcp_input+0x28c>)
 800864e:	6814      	ldr	r4, [r2, #0]
 8008650:	4618      	mov	r0, r3
 8008652:	f7fc fcf3 	bl	800503c <lwip_htons>
 8008656:	4603      	mov	r3, r0
 8008658:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800865a:	4b30      	ldr	r3, [pc, #192]	@ (800871c <tcp_input+0x28c>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	899b      	ldrh	r3, [r3, #12]
 8008660:	b29b      	uxth	r3, r3
 8008662:	4618      	mov	r0, r3
 8008664:	f7fc fcea 	bl	800503c <lwip_htons>
 8008668:	4603      	mov	r3, r0
 800866a:	b2db      	uxtb	r3, r3
 800866c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008670:	b2da      	uxtb	r2, r3
 8008672:	4b34      	ldr	r3, [pc, #208]	@ (8008744 <tcp_input+0x2b4>)
 8008674:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	891a      	ldrh	r2, [r3, #8]
 800867a:	4b33      	ldr	r3, [pc, #204]	@ (8008748 <tcp_input+0x2b8>)
 800867c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800867e:	4b31      	ldr	r3, [pc, #196]	@ (8008744 <tcp_input+0x2b4>)
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	f003 0303 	and.w	r3, r3, #3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00c      	beq.n	80086a4 <tcp_input+0x214>
    tcplen++;
 800868a:	4b2f      	ldr	r3, [pc, #188]	@ (8008748 <tcp_input+0x2b8>)
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	3301      	adds	r3, #1
 8008690:	b29a      	uxth	r2, r3
 8008692:	4b2d      	ldr	r3, [pc, #180]	@ (8008748 <tcp_input+0x2b8>)
 8008694:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	891a      	ldrh	r2, [r3, #8]
 800869a:	4b2b      	ldr	r3, [pc, #172]	@ (8008748 <tcp_input+0x2b8>)
 800869c:	881b      	ldrh	r3, [r3, #0]
 800869e:	429a      	cmp	r2, r3
 80086a0:	f200 82e6 	bhi.w	8008c70 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80086a4:	2300      	movs	r3, #0
 80086a6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80086a8:	4b28      	ldr	r3, [pc, #160]	@ (800874c <tcp_input+0x2bc>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	61fb      	str	r3, [r7, #28]
 80086ae:	e09d      	b.n	80087ec <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	7d1b      	ldrb	r3, [r3, #20]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d105      	bne.n	80086c4 <tcp_input+0x234>
 80086b8:	4b15      	ldr	r3, [pc, #84]	@ (8008710 <tcp_input+0x280>)
 80086ba:	22fb      	movs	r2, #251	@ 0xfb
 80086bc:	4924      	ldr	r1, [pc, #144]	@ (8008750 <tcp_input+0x2c0>)
 80086be:	4816      	ldr	r0, [pc, #88]	@ (8008718 <tcp_input+0x288>)
 80086c0:	f006 fdf8 	bl	800f2b4 <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	7d1b      	ldrb	r3, [r3, #20]
 80086c8:	2b0a      	cmp	r3, #10
 80086ca:	d105      	bne.n	80086d8 <tcp_input+0x248>
 80086cc:	4b10      	ldr	r3, [pc, #64]	@ (8008710 <tcp_input+0x280>)
 80086ce:	22fc      	movs	r2, #252	@ 0xfc
 80086d0:	4920      	ldr	r1, [pc, #128]	@ (8008754 <tcp_input+0x2c4>)
 80086d2:	4811      	ldr	r0, [pc, #68]	@ (8008718 <tcp_input+0x288>)
 80086d4:	f006 fdee 	bl	800f2b4 <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	7d1b      	ldrb	r3, [r3, #20]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d105      	bne.n	80086ec <tcp_input+0x25c>
 80086e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008710 <tcp_input+0x280>)
 80086e2:	22fd      	movs	r2, #253	@ 0xfd
 80086e4:	491c      	ldr	r1, [pc, #112]	@ (8008758 <tcp_input+0x2c8>)
 80086e6:	480c      	ldr	r0, [pc, #48]	@ (8008718 <tcp_input+0x288>)
 80086e8:	f006 fde4 	bl	800f2b4 <printf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	7a1b      	ldrb	r3, [r3, #8]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d033      	beq.n	800875c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	7a1a      	ldrb	r2, [r3, #8]
 80086f8:	4b09      	ldr	r3, [pc, #36]	@ (8008720 <tcp_input+0x290>)
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008700:	3301      	adds	r3, #1
 8008702:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008704:	429a      	cmp	r2, r3
 8008706:	d029      	beq.n	800875c <tcp_input+0x2cc>
      prev = pcb;
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	61bb      	str	r3, [r7, #24]
      continue;
 800870c:	e06b      	b.n	80087e6 <tcp_input+0x356>
 800870e:	bf00      	nop
 8008710:	08014ebc 	.word	0x08014ebc
 8008714:	08014ef0 	.word	0x08014ef0
 8008718:	08014f08 	.word	0x08014f08
 800871c:	20008914 	.word	0x20008914
 8008720:	2000537c 	.word	0x2000537c
 8008724:	20008918 	.word	0x20008918
 8008728:	2000891c 	.word	0x2000891c
 800872c:	2000891a 	.word	0x2000891a
 8008730:	08014f30 	.word	0x08014f30
 8008734:	08014f40 	.word	0x08014f40
 8008738:	08014f4c 	.word	0x08014f4c
 800873c:	20008924 	.word	0x20008924
 8008740:	20008928 	.word	0x20008928
 8008744:	20008930 	.word	0x20008930
 8008748:	2000892e 	.word	0x2000892e
 800874c:	200088f8 	.word	0x200088f8
 8008750:	08014f6c 	.word	0x08014f6c
 8008754:	08014f94 	.word	0x08014f94
 8008758:	08014fc0 	.word	0x08014fc0
    }

    if (pcb->remote_port == tcphdr->src &&
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	8b1a      	ldrh	r2, [r3, #24]
 8008760:	4b72      	ldr	r3, [pc, #456]	@ (800892c <tcp_input+0x49c>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	881b      	ldrh	r3, [r3, #0]
 8008766:	b29b      	uxth	r3, r3
 8008768:	429a      	cmp	r2, r3
 800876a:	d13a      	bne.n	80087e2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	8ada      	ldrh	r2, [r3, #22]
 8008770:	4b6e      	ldr	r3, [pc, #440]	@ (800892c <tcp_input+0x49c>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	885b      	ldrh	r3, [r3, #2]
 8008776:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008778:	429a      	cmp	r2, r3
 800877a:	d132      	bne.n	80087e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	685a      	ldr	r2, [r3, #4]
 8008780:	4b6b      	ldr	r3, [pc, #428]	@ (8008930 <tcp_input+0x4a0>)
 8008782:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008784:	429a      	cmp	r2, r3
 8008786:	d12c      	bne.n	80087e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	4b68      	ldr	r3, [pc, #416]	@ (8008930 <tcp_input+0x4a0>)
 800878e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008790:	429a      	cmp	r2, r3
 8008792:	d126      	bne.n	80087e2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	69fa      	ldr	r2, [r7, #28]
 800879a:	429a      	cmp	r2, r3
 800879c:	d106      	bne.n	80087ac <tcp_input+0x31c>
 800879e:	4b65      	ldr	r3, [pc, #404]	@ (8008934 <tcp_input+0x4a4>)
 80087a0:	f240 120d 	movw	r2, #269	@ 0x10d
 80087a4:	4964      	ldr	r1, [pc, #400]	@ (8008938 <tcp_input+0x4a8>)
 80087a6:	4865      	ldr	r0, [pc, #404]	@ (800893c <tcp_input+0x4ac>)
 80087a8:	f006 fd84 	bl	800f2b4 <printf>
      if (prev != NULL) {
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00a      	beq.n	80087c8 <tcp_input+0x338>
        prev->next = pcb->next;
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	68da      	ldr	r2, [r3, #12]
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80087ba:	4b61      	ldr	r3, [pc, #388]	@ (8008940 <tcp_input+0x4b0>)
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80087c2:	4a5f      	ldr	r2, [pc, #380]	@ (8008940 <tcp_input+0x4b0>)
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	69fa      	ldr	r2, [r7, #28]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d111      	bne.n	80087f6 <tcp_input+0x366>
 80087d2:	4b58      	ldr	r3, [pc, #352]	@ (8008934 <tcp_input+0x4a4>)
 80087d4:	f240 1215 	movw	r2, #277	@ 0x115
 80087d8:	495a      	ldr	r1, [pc, #360]	@ (8008944 <tcp_input+0x4b4>)
 80087da:	4858      	ldr	r0, [pc, #352]	@ (800893c <tcp_input+0x4ac>)
 80087dc:	f006 fd6a 	bl	800f2b4 <printf>
      break;
 80087e0:	e009      	b.n	80087f6 <tcp_input+0x366>
    }
    prev = pcb;
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	61fb      	str	r3, [r7, #28]
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f47f af5e 	bne.w	80086b0 <tcp_input+0x220>
 80087f4:	e000      	b.n	80087f8 <tcp_input+0x368>
      break;
 80087f6:	bf00      	nop
  }

  if (pcb == NULL) {
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f040 80aa 	bne.w	8008954 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008800:	4b51      	ldr	r3, [pc, #324]	@ (8008948 <tcp_input+0x4b8>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	61fb      	str	r3, [r7, #28]
 8008806:	e03f      	b.n	8008888 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	7d1b      	ldrb	r3, [r3, #20]
 800880c:	2b0a      	cmp	r3, #10
 800880e:	d006      	beq.n	800881e <tcp_input+0x38e>
 8008810:	4b48      	ldr	r3, [pc, #288]	@ (8008934 <tcp_input+0x4a4>)
 8008812:	f240 121f 	movw	r2, #287	@ 0x11f
 8008816:	494d      	ldr	r1, [pc, #308]	@ (800894c <tcp_input+0x4bc>)
 8008818:	4848      	ldr	r0, [pc, #288]	@ (800893c <tcp_input+0x4ac>)
 800881a:	f006 fd4b 	bl	800f2b4 <printf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	7a1b      	ldrb	r3, [r3, #8]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d009      	beq.n	800883a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	7a1a      	ldrb	r2, [r3, #8]
 800882a:	4b41      	ldr	r3, [pc, #260]	@ (8008930 <tcp_input+0x4a0>)
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008832:	3301      	adds	r3, #1
 8008834:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008836:	429a      	cmp	r2, r3
 8008838:	d122      	bne.n	8008880 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	8b1a      	ldrh	r2, [r3, #24]
 800883e:	4b3b      	ldr	r3, [pc, #236]	@ (800892c <tcp_input+0x49c>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	b29b      	uxth	r3, r3
 8008846:	429a      	cmp	r2, r3
 8008848:	d11b      	bne.n	8008882 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	8ada      	ldrh	r2, [r3, #22]
 800884e:	4b37      	ldr	r3, [pc, #220]	@ (800892c <tcp_input+0x49c>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	885b      	ldrh	r3, [r3, #2]
 8008854:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008856:	429a      	cmp	r2, r3
 8008858:	d113      	bne.n	8008882 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	4b34      	ldr	r3, [pc, #208]	@ (8008930 <tcp_input+0x4a0>)
 8008860:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008862:	429a      	cmp	r2, r3
 8008864:	d10d      	bne.n	8008882 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	4b31      	ldr	r3, [pc, #196]	@ (8008930 <tcp_input+0x4a0>)
 800886c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800886e:	429a      	cmp	r2, r3
 8008870:	d107      	bne.n	8008882 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008872:	69f8      	ldr	r0, [r7, #28]
 8008874:	f000 fb56 	bl	8008f24 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7fd ff3d 	bl	80066f8 <pbuf_free>
        return;
 800887e:	e1fd      	b.n	8008c7c <tcp_input+0x7ec>
        continue;
 8008880:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	61fb      	str	r3, [r7, #28]
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1bc      	bne.n	8008808 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800888e:	2300      	movs	r3, #0
 8008890:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008892:	4b2f      	ldr	r3, [pc, #188]	@ (8008950 <tcp_input+0x4c0>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	617b      	str	r3, [r7, #20]
 8008898:	e02a      	b.n	80088f0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	7a1b      	ldrb	r3, [r3, #8]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00c      	beq.n	80088bc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	7a1a      	ldrb	r2, [r3, #8]
 80088a6:	4b22      	ldr	r3, [pc, #136]	@ (8008930 <tcp_input+0x4a0>)
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80088ae:	3301      	adds	r3, #1
 80088b0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d002      	beq.n	80088bc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	61bb      	str	r3, [r7, #24]
        continue;
 80088ba:	e016      	b.n	80088ea <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	8ada      	ldrh	r2, [r3, #22]
 80088c0:	4b1a      	ldr	r3, [pc, #104]	@ (800892c <tcp_input+0x49c>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	885b      	ldrh	r3, [r3, #2]
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d10c      	bne.n	80088e6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	4b17      	ldr	r3, [pc, #92]	@ (8008930 <tcp_input+0x4a0>)
 80088d2:	695b      	ldr	r3, [r3, #20]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d00f      	beq.n	80088f8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00d      	beq.n	80088fa <tcp_input+0x46a>
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d009      	beq.n	80088fa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	617b      	str	r3, [r7, #20]
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1d1      	bne.n	800889a <tcp_input+0x40a>
 80088f6:	e000      	b.n	80088fa <tcp_input+0x46a>
            break;
 80088f8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d029      	beq.n	8008954 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00a      	beq.n	800891c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	68da      	ldr	r2, [r3, #12]
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800890e:	4b10      	ldr	r3, [pc, #64]	@ (8008950 <tcp_input+0x4c0>)
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008916:	4a0e      	ldr	r2, [pc, #56]	@ (8008950 <tcp_input+0x4c0>)
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800891c:	6978      	ldr	r0, [r7, #20]
 800891e:	f000 fa03 	bl	8008d28 <tcp_listen_input>
      }
      pbuf_free(p);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7fd fee8 	bl	80066f8 <pbuf_free>
      return;
 8008928:	e1a8      	b.n	8008c7c <tcp_input+0x7ec>
 800892a:	bf00      	nop
 800892c:	20008914 	.word	0x20008914
 8008930:	2000537c 	.word	0x2000537c
 8008934:	08014ebc 	.word	0x08014ebc
 8008938:	08014fe8 	.word	0x08014fe8
 800893c:	08014f08 	.word	0x08014f08
 8008940:	200088f8 	.word	0x200088f8
 8008944:	08015014 	.word	0x08015014
 8008948:	200088fc 	.word	0x200088fc
 800894c:	08015040 	.word	0x08015040
 8008950:	200088f4 	.word	0x200088f4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	2b00      	cmp	r3, #0
 8008958:	f000 8158 	beq.w	8008c0c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800895c:	4b95      	ldr	r3, [pc, #596]	@ (8008bb4 <tcp_input+0x724>)
 800895e:	2200      	movs	r2, #0
 8008960:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	891a      	ldrh	r2, [r3, #8]
 8008966:	4b93      	ldr	r3, [pc, #588]	@ (8008bb4 <tcp_input+0x724>)
 8008968:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800896a:	4a92      	ldr	r2, [pc, #584]	@ (8008bb4 <tcp_input+0x724>)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008970:	4b91      	ldr	r3, [pc, #580]	@ (8008bb8 <tcp_input+0x728>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a8f      	ldr	r2, [pc, #572]	@ (8008bb4 <tcp_input+0x724>)
 8008976:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008978:	4b90      	ldr	r3, [pc, #576]	@ (8008bbc <tcp_input+0x72c>)
 800897a:	2200      	movs	r2, #0
 800897c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800897e:	4b90      	ldr	r3, [pc, #576]	@ (8008bc0 <tcp_input+0x730>)
 8008980:	2200      	movs	r2, #0
 8008982:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008984:	4b8f      	ldr	r3, [pc, #572]	@ (8008bc4 <tcp_input+0x734>)
 8008986:	2200      	movs	r2, #0
 8008988:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800898a:	4b8f      	ldr	r3, [pc, #572]	@ (8008bc8 <tcp_input+0x738>)
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	f003 0308 	and.w	r3, r3, #8
 8008992:	2b00      	cmp	r3, #0
 8008994:	d006      	beq.n	80089a4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	7b5b      	ldrb	r3, [r3, #13]
 800899a:	f043 0301 	orr.w	r3, r3, #1
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d017      	beq.n	80089dc <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80089ac:	69f8      	ldr	r0, [r7, #28]
 80089ae:	f7ff f929 	bl	8007c04 <tcp_process_refused_data>
 80089b2:	4603      	mov	r3, r0
 80089b4:	f113 0f0d 	cmn.w	r3, #13
 80089b8:	d007      	beq.n	80089ca <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00c      	beq.n	80089dc <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80089c2:	4b82      	ldr	r3, [pc, #520]	@ (8008bcc <tcp_input+0x73c>)
 80089c4:	881b      	ldrh	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d008      	beq.n	80089dc <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f040 80e3 	bne.w	8008b9a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80089d4:	69f8      	ldr	r0, [r7, #28]
 80089d6:	f003 f9a7 	bl	800bd28 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80089da:	e0de      	b.n	8008b9a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80089dc:	4a7c      	ldr	r2, [pc, #496]	@ (8008bd0 <tcp_input+0x740>)
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80089e2:	69f8      	ldr	r0, [r7, #28]
 80089e4:	f000 fb18 	bl	8009018 <tcp_process>
 80089e8:	4603      	mov	r3, r0
 80089ea:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80089ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80089f0:	f113 0f0d 	cmn.w	r3, #13
 80089f4:	f000 80d3 	beq.w	8008b9e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80089f8:	4b71      	ldr	r3, [pc, #452]	@ (8008bc0 <tcp_input+0x730>)
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	f003 0308 	and.w	r3, r3, #8
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d015      	beq.n	8008a30 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d008      	beq.n	8008a20 <tcp_input+0x590>
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a14:	69fa      	ldr	r2, [r7, #28]
 8008a16:	6912      	ldr	r2, [r2, #16]
 8008a18:	f06f 010d 	mvn.w	r1, #13
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008a20:	69f9      	ldr	r1, [r7, #28]
 8008a22:	486c      	ldr	r0, [pc, #432]	@ (8008bd4 <tcp_input+0x744>)
 8008a24:	f7ff fbbc 	bl	80081a0 <tcp_pcb_remove>
        tcp_free(pcb);
 8008a28:	69f8      	ldr	r0, [r7, #28]
 8008a2a:	f7fe f9a7 	bl	8006d7c <tcp_free>
 8008a2e:	e0da      	b.n	8008be6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008a34:	4b63      	ldr	r3, [pc, #396]	@ (8008bc4 <tcp_input+0x734>)
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d01d      	beq.n	8008a78 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008a3c:	4b61      	ldr	r3, [pc, #388]	@ (8008bc4 <tcp_input+0x734>)
 8008a3e:	881b      	ldrh	r3, [r3, #0]
 8008a40:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00a      	beq.n	8008a62 <tcp_input+0x5d2>
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a52:	69fa      	ldr	r2, [r7, #28]
 8008a54:	6910      	ldr	r0, [r2, #16]
 8008a56:	89fa      	ldrh	r2, [r7, #14]
 8008a58:	69f9      	ldr	r1, [r7, #28]
 8008a5a:	4798      	blx	r3
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	74fb      	strb	r3, [r7, #19]
 8008a60:	e001      	b.n	8008a66 <tcp_input+0x5d6>
 8008a62:	2300      	movs	r3, #0
 8008a64:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008a66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a6a:	f113 0f0d 	cmn.w	r3, #13
 8008a6e:	f000 8098 	beq.w	8008ba2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008a72:	4b54      	ldr	r3, [pc, #336]	@ (8008bc4 <tcp_input+0x734>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008a78:	69f8      	ldr	r0, [r7, #28]
 8008a7a:	f000 f915 	bl	8008ca8 <tcp_input_delayed_close>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f040 8090 	bne.w	8008ba6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008a86:	4b4d      	ldr	r3, [pc, #308]	@ (8008bbc <tcp_input+0x72c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d041      	beq.n	8008b12 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d006      	beq.n	8008aa4 <tcp_input+0x614>
 8008a96:	4b50      	ldr	r3, [pc, #320]	@ (8008bd8 <tcp_input+0x748>)
 8008a98:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8008a9c:	494f      	ldr	r1, [pc, #316]	@ (8008bdc <tcp_input+0x74c>)
 8008a9e:	4850      	ldr	r0, [pc, #320]	@ (8008be0 <tcp_input+0x750>)
 8008aa0:	f006 fc08 	bl	800f2b4 <printf>
          if (pcb->flags & TF_RXCLOSED) {
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	8b5b      	ldrh	r3, [r3, #26]
 8008aa8:	f003 0310 	and.w	r3, r3, #16
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d008      	beq.n	8008ac2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008ab0:	4b42      	ldr	r3, [pc, #264]	@ (8008bbc <tcp_input+0x72c>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fd fe1f 	bl	80066f8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008aba:	69f8      	ldr	r0, [r7, #28]
 8008abc:	f7fe fc46 	bl	800734c <tcp_abort>
            goto aborted;
 8008ac0:	e091      	b.n	8008be6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00c      	beq.n	8008ae6 <tcp_input+0x656>
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	6918      	ldr	r0, [r3, #16]
 8008ad6:	4b39      	ldr	r3, [pc, #228]	@ (8008bbc <tcp_input+0x72c>)
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	2300      	movs	r3, #0
 8008adc:	69f9      	ldr	r1, [r7, #28]
 8008ade:	47a0      	blx	r4
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	74fb      	strb	r3, [r7, #19]
 8008ae4:	e008      	b.n	8008af8 <tcp_input+0x668>
 8008ae6:	4b35      	ldr	r3, [pc, #212]	@ (8008bbc <tcp_input+0x72c>)
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	2300      	movs	r3, #0
 8008aec:	69f9      	ldr	r1, [r7, #28]
 8008aee:	2000      	movs	r0, #0
 8008af0:	f7ff f95e 	bl	8007db0 <tcp_recv_null>
 8008af4:	4603      	mov	r3, r0
 8008af6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008af8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008afc:	f113 0f0d 	cmn.w	r3, #13
 8008b00:	d053      	beq.n	8008baa <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008b02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d003      	beq.n	8008b12 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8008bbc <tcp_input+0x72c>)
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008b12:	4b2b      	ldr	r3, [pc, #172]	@ (8008bc0 <tcp_input+0x730>)
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	f003 0320 	and.w	r3, r3, #32
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d030      	beq.n	8008b80 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d009      	beq.n	8008b3a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b2a:	7b5a      	ldrb	r2, [r3, #13]
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b30:	f042 0220 	orr.w	r2, r2, #32
 8008b34:	b2d2      	uxtb	r2, r2
 8008b36:	735a      	strb	r2, [r3, #13]
 8008b38:	e022      	b.n	8008b80 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b3e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008b42:	d005      	beq.n	8008b50 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b48:	3301      	adds	r3, #1
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00b      	beq.n	8008b72 <tcp_input+0x6e2>
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	6918      	ldr	r0, [r3, #16]
 8008b64:	2300      	movs	r3, #0
 8008b66:	2200      	movs	r2, #0
 8008b68:	69f9      	ldr	r1, [r7, #28]
 8008b6a:	47a0      	blx	r4
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	74fb      	strb	r3, [r7, #19]
 8008b70:	e001      	b.n	8008b76 <tcp_input+0x6e6>
 8008b72:	2300      	movs	r3, #0
 8008b74:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008b76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008b7a:	f113 0f0d 	cmn.w	r3, #13
 8008b7e:	d016      	beq.n	8008bae <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008b80:	4b13      	ldr	r3, [pc, #76]	@ (8008bd0 <tcp_input+0x740>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008b86:	69f8      	ldr	r0, [r7, #28]
 8008b88:	f000 f88e 	bl	8008ca8 <tcp_input_delayed_close>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d128      	bne.n	8008be4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008b92:	69f8      	ldr	r0, [r7, #28]
 8008b94:	f002 fac2 	bl	800b11c <tcp_output>
 8008b98:	e025      	b.n	8008be6 <tcp_input+0x756>
        goto aborted;
 8008b9a:	bf00      	nop
 8008b9c:	e023      	b.n	8008be6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008b9e:	bf00      	nop
 8008ba0:	e021      	b.n	8008be6 <tcp_input+0x756>
              goto aborted;
 8008ba2:	bf00      	nop
 8008ba4:	e01f      	b.n	8008be6 <tcp_input+0x756>
          goto aborted;
 8008ba6:	bf00      	nop
 8008ba8:	e01d      	b.n	8008be6 <tcp_input+0x756>
            goto aborted;
 8008baa:	bf00      	nop
 8008bac:	e01b      	b.n	8008be6 <tcp_input+0x756>
              goto aborted;
 8008bae:	bf00      	nop
 8008bb0:	e019      	b.n	8008be6 <tcp_input+0x756>
 8008bb2:	bf00      	nop
 8008bb4:	20008904 	.word	0x20008904
 8008bb8:	20008914 	.word	0x20008914
 8008bbc:	20008934 	.word	0x20008934
 8008bc0:	20008931 	.word	0x20008931
 8008bc4:	2000892c 	.word	0x2000892c
 8008bc8:	20008930 	.word	0x20008930
 8008bcc:	2000892e 	.word	0x2000892e
 8008bd0:	20008938 	.word	0x20008938
 8008bd4:	200088f8 	.word	0x200088f8
 8008bd8:	08014ebc 	.word	0x08014ebc
 8008bdc:	08015070 	.word	0x08015070
 8008be0:	08014f08 	.word	0x08014f08
          goto aborted;
 8008be4:	bf00      	nop
    tcp_input_pcb = NULL;
 8008be6:	4b27      	ldr	r3, [pc, #156]	@ (8008c84 <tcp_input+0x7f4>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008bec:	4b26      	ldr	r3, [pc, #152]	@ (8008c88 <tcp_input+0x7f8>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008bf2:	4b26      	ldr	r3, [pc, #152]	@ (8008c8c <tcp_input+0x7fc>)
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d03f      	beq.n	8008c7a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8008bfa:	4b24      	ldr	r3, [pc, #144]	@ (8008c8c <tcp_input+0x7fc>)
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fd fd7a 	bl	80066f8 <pbuf_free>
      inseg.p = NULL;
 8008c04:	4b21      	ldr	r3, [pc, #132]	@ (8008c8c <tcp_input+0x7fc>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008c0a:	e036      	b.n	8008c7a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008c0c:	4b20      	ldr	r3, [pc, #128]	@ (8008c90 <tcp_input+0x800>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	899b      	ldrh	r3, [r3, #12]
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7fc fa11 	bl	800503c <lwip_htons>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	f003 0304 	and.w	r3, r3, #4
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d118      	bne.n	8008c58 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c26:	4b1b      	ldr	r3, [pc, #108]	@ (8008c94 <tcp_input+0x804>)
 8008c28:	6819      	ldr	r1, [r3, #0]
 8008c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8008c98 <tcp_input+0x808>)
 8008c2c:	881b      	ldrh	r3, [r3, #0]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	4b1a      	ldr	r3, [pc, #104]	@ (8008c9c <tcp_input+0x80c>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c36:	4b16      	ldr	r3, [pc, #88]	@ (8008c90 <tcp_input+0x800>)
 8008c38:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c3a:	885b      	ldrh	r3, [r3, #2]
 8008c3c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c3e:	4a14      	ldr	r2, [pc, #80]	@ (8008c90 <tcp_input+0x800>)
 8008c40:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c42:	8812      	ldrh	r2, [r2, #0]
 8008c44:	b292      	uxth	r2, r2
 8008c46:	9202      	str	r2, [sp, #8]
 8008c48:	9301      	str	r3, [sp, #4]
 8008c4a:	4b15      	ldr	r3, [pc, #84]	@ (8008ca0 <tcp_input+0x810>)
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	4b15      	ldr	r3, [pc, #84]	@ (8008ca4 <tcp_input+0x814>)
 8008c50:	4602      	mov	r2, r0
 8008c52:	2000      	movs	r0, #0
 8008c54:	f003 f816 	bl	800bc84 <tcp_rst>
    pbuf_free(p);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7fd fd4d 	bl	80066f8 <pbuf_free>
  return;
 8008c5e:	e00c      	b.n	8008c7a <tcp_input+0x7ea>
    goto dropped;
 8008c60:	bf00      	nop
 8008c62:	e006      	b.n	8008c72 <tcp_input+0x7e2>
    goto dropped;
 8008c64:	bf00      	nop
 8008c66:	e004      	b.n	8008c72 <tcp_input+0x7e2>
    goto dropped;
 8008c68:	bf00      	nop
 8008c6a:	e002      	b.n	8008c72 <tcp_input+0x7e2>
      goto dropped;
 8008c6c:	bf00      	nop
 8008c6e:	e000      	b.n	8008c72 <tcp_input+0x7e2>
      goto dropped;
 8008c70:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7fd fd40 	bl	80066f8 <pbuf_free>
 8008c78:	e000      	b.n	8008c7c <tcp_input+0x7ec>
  return;
 8008c7a:	bf00      	nop
}
 8008c7c:	3724      	adds	r7, #36	@ 0x24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd90      	pop	{r4, r7, pc}
 8008c82:	bf00      	nop
 8008c84:	20008938 	.word	0x20008938
 8008c88:	20008934 	.word	0x20008934
 8008c8c:	20008904 	.word	0x20008904
 8008c90:	20008914 	.word	0x20008914
 8008c94:	20008928 	.word	0x20008928
 8008c98:	2000892e 	.word	0x2000892e
 8008c9c:	20008924 	.word	0x20008924
 8008ca0:	2000538c 	.word	0x2000538c
 8008ca4:	20005390 	.word	0x20005390

08008ca8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d106      	bne.n	8008cc4 <tcp_input_delayed_close+0x1c>
 8008cb6:	4b17      	ldr	r3, [pc, #92]	@ (8008d14 <tcp_input_delayed_close+0x6c>)
 8008cb8:	f240 225a 	movw	r2, #602	@ 0x25a
 8008cbc:	4916      	ldr	r1, [pc, #88]	@ (8008d18 <tcp_input_delayed_close+0x70>)
 8008cbe:	4817      	ldr	r0, [pc, #92]	@ (8008d1c <tcp_input_delayed_close+0x74>)
 8008cc0:	f006 faf8 	bl	800f2b4 <printf>

  if (recv_flags & TF_CLOSED) {
 8008cc4:	4b16      	ldr	r3, [pc, #88]	@ (8008d20 <tcp_input_delayed_close+0x78>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	f003 0310 	and.w	r3, r3, #16
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d01c      	beq.n	8008d0a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	8b5b      	ldrh	r3, [r3, #26]
 8008cd4:	f003 0310 	and.w	r3, r3, #16
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10d      	bne.n	8008cf8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d008      	beq.n	8008cf8 <tcp_input_delayed_close+0x50>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	6912      	ldr	r2, [r2, #16]
 8008cf0:	f06f 010e 	mvn.w	r1, #14
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008cf8:	6879      	ldr	r1, [r7, #4]
 8008cfa:	480a      	ldr	r0, [pc, #40]	@ (8008d24 <tcp_input_delayed_close+0x7c>)
 8008cfc:	f7ff fa50 	bl	80081a0 <tcp_pcb_remove>
    tcp_free(pcb);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7fe f83b 	bl	8006d7c <tcp_free>
    return 1;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e000      	b.n	8008d0c <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	08014ebc 	.word	0x08014ebc
 8008d18:	0801508c 	.word	0x0801508c
 8008d1c:	08014f08 	.word	0x08014f08
 8008d20:	20008931 	.word	0x20008931
 8008d24:	200088f8 	.word	0x200088f8

08008d28 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008d28:	b590      	push	{r4, r7, lr}
 8008d2a:	b08b      	sub	sp, #44	@ 0x2c
 8008d2c:	af04      	add	r7, sp, #16
 8008d2e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008d30:	4b6f      	ldr	r3, [pc, #444]	@ (8008ef0 <tcp_listen_input+0x1c8>)
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	f003 0304 	and.w	r3, r3, #4
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f040 80d2 	bne.w	8008ee2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d106      	bne.n	8008d52 <tcp_listen_input+0x2a>
 8008d44:	4b6b      	ldr	r3, [pc, #428]	@ (8008ef4 <tcp_listen_input+0x1cc>)
 8008d46:	f240 2281 	movw	r2, #641	@ 0x281
 8008d4a:	496b      	ldr	r1, [pc, #428]	@ (8008ef8 <tcp_listen_input+0x1d0>)
 8008d4c:	486b      	ldr	r0, [pc, #428]	@ (8008efc <tcp_listen_input+0x1d4>)
 8008d4e:	f006 fab1 	bl	800f2b4 <printf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008d52:	4b67      	ldr	r3, [pc, #412]	@ (8008ef0 <tcp_listen_input+0x1c8>)
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	f003 0310 	and.w	r3, r3, #16
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d019      	beq.n	8008d92 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d5e:	4b68      	ldr	r3, [pc, #416]	@ (8008f00 <tcp_listen_input+0x1d8>)
 8008d60:	6819      	ldr	r1, [r3, #0]
 8008d62:	4b68      	ldr	r3, [pc, #416]	@ (8008f04 <tcp_listen_input+0x1dc>)
 8008d64:	881b      	ldrh	r3, [r3, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	4b67      	ldr	r3, [pc, #412]	@ (8008f08 <tcp_listen_input+0x1e0>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d6e:	4b67      	ldr	r3, [pc, #412]	@ (8008f0c <tcp_listen_input+0x1e4>)
 8008d70:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d72:	885b      	ldrh	r3, [r3, #2]
 8008d74:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d76:	4a65      	ldr	r2, [pc, #404]	@ (8008f0c <tcp_listen_input+0x1e4>)
 8008d78:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d7a:	8812      	ldrh	r2, [r2, #0]
 8008d7c:	b292      	uxth	r2, r2
 8008d7e:	9202      	str	r2, [sp, #8]
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	4b63      	ldr	r3, [pc, #396]	@ (8008f10 <tcp_listen_input+0x1e8>)
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	4b63      	ldr	r3, [pc, #396]	@ (8008f14 <tcp_listen_input+0x1ec>)
 8008d88:	4602      	mov	r2, r0
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f002 ff7a 	bl	800bc84 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008d90:	e0a9      	b.n	8008ee6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008d92:	4b57      	ldr	r3, [pc, #348]	@ (8008ef0 <tcp_listen_input+0x1c8>)
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	f003 0302 	and.w	r3, r3, #2
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f000 80a3 	beq.w	8008ee6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	7d5b      	ldrb	r3, [r3, #21]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7ff f927 	bl	8007ff8 <tcp_alloc>
 8008daa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d111      	bne.n	8008dd6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00a      	beq.n	8008dd0 <tcp_listen_input+0xa8>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	6910      	ldr	r0, [r2, #16]
 8008dc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	4798      	blx	r3
 8008dca:	4603      	mov	r3, r0
 8008dcc:	73bb      	strb	r3, [r7, #14]
      return;
 8008dce:	e08b      	b.n	8008ee8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008dd0:	23f0      	movs	r3, #240	@ 0xf0
 8008dd2:	73bb      	strb	r3, [r7, #14]
      return;
 8008dd4:	e088      	b.n	8008ee8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008dd6:	4b50      	ldr	r3, [pc, #320]	@ (8008f18 <tcp_listen_input+0x1f0>)
 8008dd8:	695a      	ldr	r2, [r3, #20]
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008dde:	4b4e      	ldr	r3, [pc, #312]	@ (8008f18 <tcp_listen_input+0x1f0>)
 8008de0:	691a      	ldr	r2, [r3, #16]
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	8ada      	ldrh	r2, [r3, #22]
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008dee:	4b47      	ldr	r3, [pc, #284]	@ (8008f0c <tcp_listen_input+0x1e4>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	881b      	ldrh	r3, [r3, #0]
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	2203      	movs	r2, #3
 8008dfe:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008e00:	4b41      	ldr	r3, [pc, #260]	@ (8008f08 <tcp_listen_input+0x1e0>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	1c5a      	adds	r2, r3, #1
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8008e12:	6978      	ldr	r0, [r7, #20]
 8008e14:	f7ff fa58 	bl	80082c8 <tcp_next_iss>
 8008e18:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	693a      	ldr	r2, [r7, #16]
 8008e30:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008e32:	4b35      	ldr	r3, [pc, #212]	@ (8008f08 <tcp_listen_input+0x1e0>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	1e5a      	subs	r2, r3, #1
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	691a      	ldr	r2, [r3, #16]
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	7a5b      	ldrb	r3, [r3, #9]
 8008e4e:	f003 030c 	and.w	r3, r3, #12
 8008e52:	b2da      	uxtb	r2, r3
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	7a1a      	ldrb	r2, [r3, #8]
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008e60:	4b2e      	ldr	r3, [pc, #184]	@ (8008f1c <tcp_listen_input+0x1f4>)
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	60da      	str	r2, [r3, #12]
 8008e68:	4a2c      	ldr	r2, [pc, #176]	@ (8008f1c <tcp_listen_input+0x1f4>)
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	6013      	str	r3, [r2, #0]
 8008e6e:	f003 f8cb 	bl	800c008 <tcp_timer_needed>
 8008e72:	4b2b      	ldr	r3, [pc, #172]	@ (8008f20 <tcp_listen_input+0x1f8>)
 8008e74:	2201      	movs	r2, #1
 8008e76:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008e78:	6978      	ldr	r0, [r7, #20]
 8008e7a:	f001 fd8b 	bl	800a994 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008e7e:	4b23      	ldr	r3, [pc, #140]	@ (8008f0c <tcp_listen_input+0x1e4>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	89db      	ldrh	r3, [r3, #14]
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f004 ff3d 	bl	800dd20 <ip4_route>
 8008ea6:	4601      	mov	r1, r0
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	3304      	adds	r3, #4
 8008eac:	461a      	mov	r2, r3
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f7ff fa30 	bl	8008314 <tcp_eff_send_mss_netif>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008ebc:	2112      	movs	r1, #18
 8008ebe:	6978      	ldr	r0, [r7, #20]
 8008ec0:	f002 f83e 	bl	800af40 <tcp_enqueue_flags>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d004      	beq.n	8008eda <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	6978      	ldr	r0, [r7, #20]
 8008ed4:	f7fe f97c 	bl	80071d0 <tcp_abandon>
      return;
 8008ed8:	e006      	b.n	8008ee8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008eda:	6978      	ldr	r0, [r7, #20]
 8008edc:	f002 f91e 	bl	800b11c <tcp_output>
  return;
 8008ee0:	e001      	b.n	8008ee6 <tcp_listen_input+0x1be>
    return;
 8008ee2:	bf00      	nop
 8008ee4:	e000      	b.n	8008ee8 <tcp_listen_input+0x1c0>
  return;
 8008ee6:	bf00      	nop
}
 8008ee8:	371c      	adds	r7, #28
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd90      	pop	{r4, r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20008930 	.word	0x20008930
 8008ef4:	08014ebc 	.word	0x08014ebc
 8008ef8:	080150b4 	.word	0x080150b4
 8008efc:	08014f08 	.word	0x08014f08
 8008f00:	20008928 	.word	0x20008928
 8008f04:	2000892e 	.word	0x2000892e
 8008f08:	20008924 	.word	0x20008924
 8008f0c:	20008914 	.word	0x20008914
 8008f10:	2000538c 	.word	0x2000538c
 8008f14:	20005390 	.word	0x20005390
 8008f18:	2000537c 	.word	0x2000537c
 8008f1c:	200088f8 	.word	0x200088f8
 8008f20:	20008900 	.word	0x20008900

08008f24 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af04      	add	r7, sp, #16
 8008f2a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8008fec <tcp_timewait_input+0xc8>)
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	f003 0304 	and.w	r3, r3, #4
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d153      	bne.n	8008fe0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d106      	bne.n	8008f4c <tcp_timewait_input+0x28>
 8008f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8008ff0 <tcp_timewait_input+0xcc>)
 8008f40:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8008f44:	492b      	ldr	r1, [pc, #172]	@ (8008ff4 <tcp_timewait_input+0xd0>)
 8008f46:	482c      	ldr	r0, [pc, #176]	@ (8008ff8 <tcp_timewait_input+0xd4>)
 8008f48:	f006 f9b4 	bl	800f2b4 <printf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008f4c:	4b27      	ldr	r3, [pc, #156]	@ (8008fec <tcp_timewait_input+0xc8>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	f003 0302 	and.w	r3, r3, #2
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d02a      	beq.n	8008fae <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008f58:	4b28      	ldr	r3, [pc, #160]	@ (8008ffc <tcp_timewait_input+0xd8>)
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	db2d      	blt.n	8008fc2 <tcp_timewait_input+0x9e>
 8008f66:	4b25      	ldr	r3, [pc, #148]	@ (8008ffc <tcp_timewait_input+0xd8>)
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f6e:	6879      	ldr	r1, [r7, #4]
 8008f70:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008f72:	440b      	add	r3, r1
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	dc23      	bgt.n	8008fc2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f7a:	4b21      	ldr	r3, [pc, #132]	@ (8009000 <tcp_timewait_input+0xdc>)
 8008f7c:	6819      	ldr	r1, [r3, #0]
 8008f7e:	4b21      	ldr	r3, [pc, #132]	@ (8009004 <tcp_timewait_input+0xe0>)
 8008f80:	881b      	ldrh	r3, [r3, #0]
 8008f82:	461a      	mov	r2, r3
 8008f84:	4b1d      	ldr	r3, [pc, #116]	@ (8008ffc <tcp_timewait_input+0xd8>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8009008 <tcp_timewait_input+0xe4>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f8e:	885b      	ldrh	r3, [r3, #2]
 8008f90:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f92:	4a1d      	ldr	r2, [pc, #116]	@ (8009008 <tcp_timewait_input+0xe4>)
 8008f94:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f96:	8812      	ldrh	r2, [r2, #0]
 8008f98:	b292      	uxth	r2, r2
 8008f9a:	9202      	str	r2, [sp, #8]
 8008f9c:	9301      	str	r3, [sp, #4]
 8008f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800900c <tcp_timewait_input+0xe8>)
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8009010 <tcp_timewait_input+0xec>)
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f002 fe6c 	bl	800bc84 <tcp_rst>
      return;
 8008fac:	e01b      	b.n	8008fe6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008fae:	4b0f      	ldr	r3, [pc, #60]	@ (8008fec <tcp_timewait_input+0xc8>)
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d003      	beq.n	8008fc2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008fba:	4b16      	ldr	r3, [pc, #88]	@ (8009014 <tcp_timewait_input+0xf0>)
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008fc2:	4b10      	ldr	r3, [pc, #64]	@ (8009004 <tcp_timewait_input+0xe0>)
 8008fc4:	881b      	ldrh	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00c      	beq.n	8008fe4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	8b5b      	ldrh	r3, [r3, #26]
 8008fce:	f043 0302 	orr.w	r3, r3, #2
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f002 f89f 	bl	800b11c <tcp_output>
  }
  return;
 8008fde:	e001      	b.n	8008fe4 <tcp_timewait_input+0xc0>
    return;
 8008fe0:	bf00      	nop
 8008fe2:	e000      	b.n	8008fe6 <tcp_timewait_input+0xc2>
  return;
 8008fe4:	bf00      	nop
}
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	20008930 	.word	0x20008930
 8008ff0:	08014ebc 	.word	0x08014ebc
 8008ff4:	080150d4 	.word	0x080150d4
 8008ff8:	08014f08 	.word	0x08014f08
 8008ffc:	20008924 	.word	0x20008924
 8009000:	20008928 	.word	0x20008928
 8009004:	2000892e 	.word	0x2000892e
 8009008:	20008914 	.word	0x20008914
 800900c:	2000538c 	.word	0x2000538c
 8009010:	20005390 	.word	0x20005390
 8009014:	200088ec 	.word	0x200088ec

08009018 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009018:	b590      	push	{r4, r7, lr}
 800901a:	b08d      	sub	sp, #52	@ 0x34
 800901c:	af04      	add	r7, sp, #16
 800901e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009020:	2300      	movs	r3, #0
 8009022:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d106      	bne.n	800903c <tcp_process+0x24>
 800902e:	4b9d      	ldr	r3, [pc, #628]	@ (80092a4 <tcp_process+0x28c>)
 8009030:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8009034:	499c      	ldr	r1, [pc, #624]	@ (80092a8 <tcp_process+0x290>)
 8009036:	489d      	ldr	r0, [pc, #628]	@ (80092ac <tcp_process+0x294>)
 8009038:	f006 f93c 	bl	800f2b4 <printf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800903c:	4b9c      	ldr	r3, [pc, #624]	@ (80092b0 <tcp_process+0x298>)
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	f003 0304 	and.w	r3, r3, #4
 8009044:	2b00      	cmp	r3, #0
 8009046:	d04e      	beq.n	80090e6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	7d1b      	ldrb	r3, [r3, #20]
 800904c:	2b02      	cmp	r3, #2
 800904e:	d108      	bne.n	8009062 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009054:	4b97      	ldr	r3, [pc, #604]	@ (80092b4 <tcp_process+0x29c>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	429a      	cmp	r2, r3
 800905a:	d123      	bne.n	80090a4 <tcp_process+0x8c>
        acceptable = 1;
 800905c:	2301      	movs	r3, #1
 800905e:	76fb      	strb	r3, [r7, #27]
 8009060:	e020      	b.n	80090a4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009066:	4b94      	ldr	r3, [pc, #592]	@ (80092b8 <tcp_process+0x2a0>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	429a      	cmp	r2, r3
 800906c:	d102      	bne.n	8009074 <tcp_process+0x5c>
        acceptable = 1;
 800906e:	2301      	movs	r3, #1
 8009070:	76fb      	strb	r3, [r7, #27]
 8009072:	e017      	b.n	80090a4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009074:	4b90      	ldr	r3, [pc, #576]	@ (80092b8 <tcp_process+0x2a0>)
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	2b00      	cmp	r3, #0
 8009080:	db10      	blt.n	80090a4 <tcp_process+0x8c>
 8009082:	4b8d      	ldr	r3, [pc, #564]	@ (80092b8 <tcp_process+0x2a0>)
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800908a:	6879      	ldr	r1, [r7, #4]
 800908c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800908e:	440b      	add	r3, r1
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	2b00      	cmp	r3, #0
 8009094:	dc06      	bgt.n	80090a4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	8b5b      	ldrh	r3, [r3, #26]
 800909a:	f043 0302 	orr.w	r3, r3, #2
 800909e:	b29a      	uxth	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80090a4:	7efb      	ldrb	r3, [r7, #27]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d01b      	beq.n	80090e2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	7d1b      	ldrb	r3, [r3, #20]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d106      	bne.n	80090c0 <tcp_process+0xa8>
 80090b2:	4b7c      	ldr	r3, [pc, #496]	@ (80092a4 <tcp_process+0x28c>)
 80090b4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80090b8:	4980      	ldr	r1, [pc, #512]	@ (80092bc <tcp_process+0x2a4>)
 80090ba:	487c      	ldr	r0, [pc, #496]	@ (80092ac <tcp_process+0x294>)
 80090bc:	f006 f8fa 	bl	800f2b4 <printf>
      recv_flags |= TF_RESET;
 80090c0:	4b7f      	ldr	r3, [pc, #508]	@ (80092c0 <tcp_process+0x2a8>)
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	f043 0308 	orr.w	r3, r3, #8
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	4b7d      	ldr	r3, [pc, #500]	@ (80092c0 <tcp_process+0x2a8>)
 80090cc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	8b5b      	ldrh	r3, [r3, #26]
 80090d2:	f023 0301 	bic.w	r3, r3, #1
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80090dc:	f06f 030d 	mvn.w	r3, #13
 80090e0:	e37a      	b.n	80097d8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	e378      	b.n	80097d8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80090e6:	4b72      	ldr	r3, [pc, #456]	@ (80092b0 <tcp_process+0x298>)
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	f003 0302 	and.w	r3, r3, #2
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d010      	beq.n	8009114 <tcp_process+0xfc>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	7d1b      	ldrb	r3, [r3, #20]
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d00c      	beq.n	8009114 <tcp_process+0xfc>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	7d1b      	ldrb	r3, [r3, #20]
 80090fe:	2b03      	cmp	r3, #3
 8009100:	d008      	beq.n	8009114 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	8b5b      	ldrh	r3, [r3, #26]
 8009106:	f043 0302 	orr.w	r3, r3, #2
 800910a:	b29a      	uxth	r2, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009110:	2300      	movs	r3, #0
 8009112:	e361      	b.n	80097d8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	8b5b      	ldrh	r3, [r3, #26]
 8009118:	f003 0310 	and.w	r3, r3, #16
 800911c:	2b00      	cmp	r3, #0
 800911e:	d103      	bne.n	8009128 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009120:	4b68      	ldr	r3, [pc, #416]	@ (80092c4 <tcp_process+0x2ac>)
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f001 fc2b 	bl	800a994 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	7d1b      	ldrb	r3, [r3, #20]
 8009142:	3b02      	subs	r3, #2
 8009144:	2b07      	cmp	r3, #7
 8009146:	f200 8337 	bhi.w	80097b8 <tcp_process+0x7a0>
 800914a:	a201      	add	r2, pc, #4	@ (adr r2, 8009150 <tcp_process+0x138>)
 800914c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009150:	08009171 	.word	0x08009171
 8009154:	080093a1 	.word	0x080093a1
 8009158:	08009519 	.word	0x08009519
 800915c:	08009543 	.word	0x08009543
 8009160:	08009667 	.word	0x08009667
 8009164:	08009519 	.word	0x08009519
 8009168:	080096f3 	.word	0x080096f3
 800916c:	08009783 	.word	0x08009783
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009170:	4b4f      	ldr	r3, [pc, #316]	@ (80092b0 <tcp_process+0x298>)
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	f003 0310 	and.w	r3, r3, #16
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 80e4 	beq.w	8009346 <tcp_process+0x32e>
 800917e:	4b4c      	ldr	r3, [pc, #304]	@ (80092b0 <tcp_process+0x298>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	f003 0302 	and.w	r3, r3, #2
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 80dd 	beq.w	8009346 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009190:	1c5a      	adds	r2, r3, #1
 8009192:	4b48      	ldr	r3, [pc, #288]	@ (80092b4 <tcp_process+0x29c>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	429a      	cmp	r2, r3
 8009198:	f040 80d5 	bne.w	8009346 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800919c:	4b46      	ldr	r3, [pc, #280]	@ (80092b8 <tcp_process+0x2a0>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	1c5a      	adds	r2, r3, #1
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80091ae:	4b41      	ldr	r3, [pc, #260]	@ (80092b4 <tcp_process+0x29c>)
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80091b6:	4b44      	ldr	r3, [pc, #272]	@ (80092c8 <tcp_process+0x2b0>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	89db      	ldrh	r3, [r3, #14]
 80091bc:	b29a      	uxth	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80091d0:	4b39      	ldr	r3, [pc, #228]	@ (80092b8 <tcp_process+0x2a0>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	1e5a      	subs	r2, r3, #1
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2204      	movs	r2, #4
 80091de:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	3304      	adds	r3, #4
 80091e8:	4618      	mov	r0, r3
 80091ea:	f004 fd99 	bl	800dd20 <ip4_route>
 80091ee:	4601      	mov	r1, r0
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	3304      	adds	r3, #4
 80091f4:	461a      	mov	r2, r3
 80091f6:	4620      	mov	r0, r4
 80091f8:	f7ff f88c 	bl	8008314 <tcp_eff_send_mss_netif>
 80091fc:	4603      	mov	r3, r0
 80091fe:	461a      	mov	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009208:	009a      	lsls	r2, r3, #2
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800920e:	005b      	lsls	r3, r3, #1
 8009210:	f241 111c 	movw	r1, #4380	@ 0x111c
 8009214:	428b      	cmp	r3, r1
 8009216:	bf38      	it	cc
 8009218:	460b      	movcc	r3, r1
 800921a:	429a      	cmp	r2, r3
 800921c:	d204      	bcs.n	8009228 <tcp_process+0x210>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	b29b      	uxth	r3, r3
 8009226:	e00d      	b.n	8009244 <tcp_process+0x22c>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800922c:	005b      	lsls	r3, r3, #1
 800922e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8009232:	4293      	cmp	r3, r2
 8009234:	d904      	bls.n	8009240 <tcp_process+0x228>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800923a:	005b      	lsls	r3, r3, #1
 800923c:	b29b      	uxth	r3, r3
 800923e:	e001      	b.n	8009244 <tcp_process+0x22c>
 8009240:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009250:	2b00      	cmp	r3, #0
 8009252:	d106      	bne.n	8009262 <tcp_process+0x24a>
 8009254:	4b13      	ldr	r3, [pc, #76]	@ (80092a4 <tcp_process+0x28c>)
 8009256:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800925a:	491c      	ldr	r1, [pc, #112]	@ (80092cc <tcp_process+0x2b4>)
 800925c:	4813      	ldr	r0, [pc, #76]	@ (80092ac <tcp_process+0x294>)
 800925e:	f006 f829 	bl	800f2b4 <printf>
        --pcb->snd_queuelen;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009268:	3b01      	subs	r3, #1
 800926a:	b29a      	uxth	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009276:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d12a      	bne.n	80092d4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009282:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d106      	bne.n	8009298 <tcp_process+0x280>
 800928a:	4b06      	ldr	r3, [pc, #24]	@ (80092a4 <tcp_process+0x28c>)
 800928c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8009290:	490f      	ldr	r1, [pc, #60]	@ (80092d0 <tcp_process+0x2b8>)
 8009292:	4806      	ldr	r0, [pc, #24]	@ (80092ac <tcp_process+0x294>)
 8009294:	f006 f80e 	bl	800f2b4 <printf>
          pcb->unsent = rseg->next;
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	66da      	str	r2, [r3, #108]	@ 0x6c
 80092a0:	e01c      	b.n	80092dc <tcp_process+0x2c4>
 80092a2:	bf00      	nop
 80092a4:	08014ebc 	.word	0x08014ebc
 80092a8:	080150f4 	.word	0x080150f4
 80092ac:	08014f08 	.word	0x08014f08
 80092b0:	20008930 	.word	0x20008930
 80092b4:	20008928 	.word	0x20008928
 80092b8:	20008924 	.word	0x20008924
 80092bc:	08015110 	.word	0x08015110
 80092c0:	20008931 	.word	0x20008931
 80092c4:	200088ec 	.word	0x200088ec
 80092c8:	20008914 	.word	0x20008914
 80092cc:	08015130 	.word	0x08015130
 80092d0:	08015148 	.word	0x08015148
        } else {
          pcb->unacked = rseg->next;
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80092dc:	69f8      	ldr	r0, [r7, #28]
 80092de:	f7fe fd22 	bl	8007d26 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d104      	bne.n	80092f4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80092f0:	861a      	strh	r2, [r3, #48]	@ 0x30
 80092f2:	e006      	b.n	8009302 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00a      	beq.n	8009322 <tcp_process+0x30a>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	6910      	ldr	r0, [r2, #16]
 8009316:	2200      	movs	r2, #0
 8009318:	6879      	ldr	r1, [r7, #4]
 800931a:	4798      	blx	r3
 800931c:	4603      	mov	r3, r0
 800931e:	76bb      	strb	r3, [r7, #26]
 8009320:	e001      	b.n	8009326 <tcp_process+0x30e>
 8009322:	2300      	movs	r3, #0
 8009324:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009326:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800932a:	f113 0f0d 	cmn.w	r3, #13
 800932e:	d102      	bne.n	8009336 <tcp_process+0x31e>
          return ERR_ABRT;
 8009330:	f06f 030c 	mvn.w	r3, #12
 8009334:	e250      	b.n	80097d8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	8b5b      	ldrh	r3, [r3, #26]
 800933a:	f043 0302 	orr.w	r3, r3, #2
 800933e:	b29a      	uxth	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009344:	e23a      	b.n	80097bc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009346:	4b98      	ldr	r3, [pc, #608]	@ (80095a8 <tcp_process+0x590>)
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	f003 0310 	and.w	r3, r3, #16
 800934e:	2b00      	cmp	r3, #0
 8009350:	f000 8234 	beq.w	80097bc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009354:	4b95      	ldr	r3, [pc, #596]	@ (80095ac <tcp_process+0x594>)
 8009356:	6819      	ldr	r1, [r3, #0]
 8009358:	4b95      	ldr	r3, [pc, #596]	@ (80095b0 <tcp_process+0x598>)
 800935a:	881b      	ldrh	r3, [r3, #0]
 800935c:	461a      	mov	r2, r3
 800935e:	4b95      	ldr	r3, [pc, #596]	@ (80095b4 <tcp_process+0x59c>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009364:	4b94      	ldr	r3, [pc, #592]	@ (80095b8 <tcp_process+0x5a0>)
 8009366:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009368:	885b      	ldrh	r3, [r3, #2]
 800936a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800936c:	4a92      	ldr	r2, [pc, #584]	@ (80095b8 <tcp_process+0x5a0>)
 800936e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009370:	8812      	ldrh	r2, [r2, #0]
 8009372:	b292      	uxth	r2, r2
 8009374:	9202      	str	r2, [sp, #8]
 8009376:	9301      	str	r3, [sp, #4]
 8009378:	4b90      	ldr	r3, [pc, #576]	@ (80095bc <tcp_process+0x5a4>)
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	4b90      	ldr	r3, [pc, #576]	@ (80095c0 <tcp_process+0x5a8>)
 800937e:	4602      	mov	r2, r0
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f002 fc7f 	bl	800bc84 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800938c:	2b05      	cmp	r3, #5
 800938e:	f200 8215 	bhi.w	80097bc <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f002 fa4b 	bl	800b834 <tcp_rexmit_rto>
      break;
 800939e:	e20d      	b.n	80097bc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80093a0:	4b81      	ldr	r3, [pc, #516]	@ (80095a8 <tcp_process+0x590>)
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	f003 0310 	and.w	r3, r3, #16
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f000 80a1 	beq.w	80094f0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80093ae:	4b7f      	ldr	r3, [pc, #508]	@ (80095ac <tcp_process+0x594>)
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093b6:	1ad3      	subs	r3, r2, r3
 80093b8:	3b01      	subs	r3, #1
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	db7e      	blt.n	80094bc <tcp_process+0x4a4>
 80093be:	4b7b      	ldr	r3, [pc, #492]	@ (80095ac <tcp_process+0x594>)
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	dc77      	bgt.n	80094bc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2204      	movs	r2, #4
 80093d0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d102      	bne.n	80093e0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80093da:	23fa      	movs	r3, #250	@ 0xfa
 80093dc:	76bb      	strb	r3, [r7, #26]
 80093de:	e01d      	b.n	800941c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d106      	bne.n	80093f8 <tcp_process+0x3e0>
 80093ea:	4b76      	ldr	r3, [pc, #472]	@ (80095c4 <tcp_process+0x5ac>)
 80093ec:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80093f0:	4975      	ldr	r1, [pc, #468]	@ (80095c8 <tcp_process+0x5b0>)
 80093f2:	4876      	ldr	r0, [pc, #472]	@ (80095cc <tcp_process+0x5b4>)
 80093f4:	f005 ff5e 	bl	800f2b4 <printf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00a      	beq.n	8009418 <tcp_process+0x400>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	6910      	ldr	r0, [r2, #16]
 800940c:	2200      	movs	r2, #0
 800940e:	6879      	ldr	r1, [r7, #4]
 8009410:	4798      	blx	r3
 8009412:	4603      	mov	r3, r0
 8009414:	76bb      	strb	r3, [r7, #26]
 8009416:	e001      	b.n	800941c <tcp_process+0x404>
 8009418:	23f0      	movs	r3, #240	@ 0xf0
 800941a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800941c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00a      	beq.n	800943a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009424:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009428:	f113 0f0d 	cmn.w	r3, #13
 800942c:	d002      	beq.n	8009434 <tcp_process+0x41c>
              tcp_abort(pcb);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7fd ff8c 	bl	800734c <tcp_abort>
            }
            return ERR_ABRT;
 8009434:	f06f 030c 	mvn.w	r3, #12
 8009438:	e1ce      	b.n	80097d8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fae0 	bl	8009a00 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009440:	4b63      	ldr	r3, [pc, #396]	@ (80095d0 <tcp_process+0x5b8>)
 8009442:	881b      	ldrh	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d005      	beq.n	8009454 <tcp_process+0x43c>
            recv_acked--;
 8009448:	4b61      	ldr	r3, [pc, #388]	@ (80095d0 <tcp_process+0x5b8>)
 800944a:	881b      	ldrh	r3, [r3, #0]
 800944c:	3b01      	subs	r3, #1
 800944e:	b29a      	uxth	r2, r3
 8009450:	4b5f      	ldr	r3, [pc, #380]	@ (80095d0 <tcp_process+0x5b8>)
 8009452:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009458:	009a      	lsls	r2, r3, #2
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800945e:	005b      	lsls	r3, r3, #1
 8009460:	f241 111c 	movw	r1, #4380	@ 0x111c
 8009464:	428b      	cmp	r3, r1
 8009466:	bf38      	it	cc
 8009468:	460b      	movcc	r3, r1
 800946a:	429a      	cmp	r2, r3
 800946c:	d204      	bcs.n	8009478 <tcp_process+0x460>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	b29b      	uxth	r3, r3
 8009476:	e00d      	b.n	8009494 <tcp_process+0x47c>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800947c:	005b      	lsls	r3, r3, #1
 800947e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8009482:	4293      	cmp	r3, r2
 8009484:	d904      	bls.n	8009490 <tcp_process+0x478>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800948a:	005b      	lsls	r3, r3, #1
 800948c:	b29b      	uxth	r3, r3
 800948e:	e001      	b.n	8009494 <tcp_process+0x47c>
 8009490:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800949a:	4b4e      	ldr	r3, [pc, #312]	@ (80095d4 <tcp_process+0x5bc>)
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	f003 0320 	and.w	r3, r3, #32
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d037      	beq.n	8009516 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	8b5b      	ldrh	r3, [r3, #26]
 80094aa:	f043 0302 	orr.w	r3, r3, #2
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2207      	movs	r2, #7
 80094b8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80094ba:	e02c      	b.n	8009516 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094bc:	4b3b      	ldr	r3, [pc, #236]	@ (80095ac <tcp_process+0x594>)
 80094be:	6819      	ldr	r1, [r3, #0]
 80094c0:	4b3b      	ldr	r3, [pc, #236]	@ (80095b0 <tcp_process+0x598>)
 80094c2:	881b      	ldrh	r3, [r3, #0]
 80094c4:	461a      	mov	r2, r3
 80094c6:	4b3b      	ldr	r3, [pc, #236]	@ (80095b4 <tcp_process+0x59c>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80094cc:	4b3a      	ldr	r3, [pc, #232]	@ (80095b8 <tcp_process+0x5a0>)
 80094ce:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094d0:	885b      	ldrh	r3, [r3, #2]
 80094d2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80094d4:	4a38      	ldr	r2, [pc, #224]	@ (80095b8 <tcp_process+0x5a0>)
 80094d6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094d8:	8812      	ldrh	r2, [r2, #0]
 80094da:	b292      	uxth	r2, r2
 80094dc:	9202      	str	r2, [sp, #8]
 80094de:	9301      	str	r3, [sp, #4]
 80094e0:	4b36      	ldr	r3, [pc, #216]	@ (80095bc <tcp_process+0x5a4>)
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	4b36      	ldr	r3, [pc, #216]	@ (80095c0 <tcp_process+0x5a8>)
 80094e6:	4602      	mov	r2, r0
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f002 fbcb 	bl	800bc84 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80094ee:	e167      	b.n	80097c0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80094f0:	4b2d      	ldr	r3, [pc, #180]	@ (80095a8 <tcp_process+0x590>)
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	f003 0302 	and.w	r3, r3, #2
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f000 8161 	beq.w	80097c0 <tcp_process+0x7a8>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009502:	1e5a      	subs	r2, r3, #1
 8009504:	4b2b      	ldr	r3, [pc, #172]	@ (80095b4 <tcp_process+0x59c>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	429a      	cmp	r2, r3
 800950a:	f040 8159 	bne.w	80097c0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f002 f9b2 	bl	800b878 <tcp_rexmit>
      break;
 8009514:	e154      	b.n	80097c0 <tcp_process+0x7a8>
 8009516:	e153      	b.n	80097c0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fa71 	bl	8009a00 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800951e:	4b2d      	ldr	r3, [pc, #180]	@ (80095d4 <tcp_process+0x5bc>)
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	f003 0320 	and.w	r3, r3, #32
 8009526:	2b00      	cmp	r3, #0
 8009528:	f000 814c 	beq.w	80097c4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	8b5b      	ldrh	r3, [r3, #26]
 8009530:	f043 0302 	orr.w	r3, r3, #2
 8009534:	b29a      	uxth	r2, r3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2207      	movs	r2, #7
 800953e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009540:	e140      	b.n	80097c4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 fa5c 	bl	8009a00 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009548:	4b22      	ldr	r3, [pc, #136]	@ (80095d4 <tcp_process+0x5bc>)
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	f003 0320 	and.w	r3, r3, #32
 8009550:	2b00      	cmp	r3, #0
 8009552:	d071      	beq.n	8009638 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009554:	4b14      	ldr	r3, [pc, #80]	@ (80095a8 <tcp_process+0x590>)
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	f003 0310 	and.w	r3, r3, #16
 800955c:	2b00      	cmp	r3, #0
 800955e:	d060      	beq.n	8009622 <tcp_process+0x60a>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009564:	4b11      	ldr	r3, [pc, #68]	@ (80095ac <tcp_process+0x594>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	429a      	cmp	r2, r3
 800956a:	d15a      	bne.n	8009622 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009570:	2b00      	cmp	r3, #0
 8009572:	d156      	bne.n	8009622 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	8b5b      	ldrh	r3, [r3, #26]
 8009578:	f043 0302 	orr.w	r3, r3, #2
 800957c:	b29a      	uxth	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f7fe fdbc 	bl	8008100 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009588:	4b13      	ldr	r3, [pc, #76]	@ (80095d8 <tcp_process+0x5c0>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	429a      	cmp	r2, r3
 8009590:	d105      	bne.n	800959e <tcp_process+0x586>
 8009592:	4b11      	ldr	r3, [pc, #68]	@ (80095d8 <tcp_process+0x5c0>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	4a0f      	ldr	r2, [pc, #60]	@ (80095d8 <tcp_process+0x5c0>)
 800959a:	6013      	str	r3, [r2, #0]
 800959c:	e02e      	b.n	80095fc <tcp_process+0x5e4>
 800959e:	4b0e      	ldr	r3, [pc, #56]	@ (80095d8 <tcp_process+0x5c0>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	617b      	str	r3, [r7, #20]
 80095a4:	e027      	b.n	80095f6 <tcp_process+0x5de>
 80095a6:	bf00      	nop
 80095a8:	20008930 	.word	0x20008930
 80095ac:	20008928 	.word	0x20008928
 80095b0:	2000892e 	.word	0x2000892e
 80095b4:	20008924 	.word	0x20008924
 80095b8:	20008914 	.word	0x20008914
 80095bc:	2000538c 	.word	0x2000538c
 80095c0:	20005390 	.word	0x20005390
 80095c4:	08014ebc 	.word	0x08014ebc
 80095c8:	0801515c 	.word	0x0801515c
 80095cc:	08014f08 	.word	0x08014f08
 80095d0:	2000892c 	.word	0x2000892c
 80095d4:	20008931 	.word	0x20008931
 80095d8:	200088f8 	.word	0x200088f8
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d104      	bne.n	80095f0 <tcp_process+0x5d8>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	68da      	ldr	r2, [r3, #12]
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	60da      	str	r2, [r3, #12]
 80095ee:	e005      	b.n	80095fc <tcp_process+0x5e4>
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	617b      	str	r3, [r7, #20]
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1ef      	bne.n	80095dc <tcp_process+0x5c4>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	60da      	str	r2, [r3, #12]
 8009602:	4b77      	ldr	r3, [pc, #476]	@ (80097e0 <tcp_process+0x7c8>)
 8009604:	2201      	movs	r2, #1
 8009606:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	220a      	movs	r2, #10
 800960c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800960e:	4b75      	ldr	r3, [pc, #468]	@ (80097e4 <tcp_process+0x7cc>)
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	60da      	str	r2, [r3, #12]
 8009616:	4a73      	ldr	r2, [pc, #460]	@ (80097e4 <tcp_process+0x7cc>)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6013      	str	r3, [r2, #0]
 800961c:	f002 fcf4 	bl	800c008 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009620:	e0d2      	b.n	80097c8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	8b5b      	ldrh	r3, [r3, #26]
 8009626:	f043 0302 	orr.w	r3, r3, #2
 800962a:	b29a      	uxth	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2208      	movs	r2, #8
 8009634:	751a      	strb	r2, [r3, #20]
      break;
 8009636:	e0c7      	b.n	80097c8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009638:	4b6b      	ldr	r3, [pc, #428]	@ (80097e8 <tcp_process+0x7d0>)
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	f003 0310 	and.w	r3, r3, #16
 8009640:	2b00      	cmp	r3, #0
 8009642:	f000 80c1 	beq.w	80097c8 <tcp_process+0x7b0>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800964a:	4b68      	ldr	r3, [pc, #416]	@ (80097ec <tcp_process+0x7d4>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	429a      	cmp	r2, r3
 8009650:	f040 80ba 	bne.w	80097c8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009658:	2b00      	cmp	r3, #0
 800965a:	f040 80b5 	bne.w	80097c8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2206      	movs	r2, #6
 8009662:	751a      	strb	r2, [r3, #20]
      break;
 8009664:	e0b0      	b.n	80097c8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f9ca 	bl	8009a00 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800966c:	4b60      	ldr	r3, [pc, #384]	@ (80097f0 <tcp_process+0x7d8>)
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	f003 0320 	and.w	r3, r3, #32
 8009674:	2b00      	cmp	r3, #0
 8009676:	f000 80a9 	beq.w	80097cc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	8b5b      	ldrh	r3, [r3, #26]
 800967e:	f043 0302 	orr.w	r3, r3, #2
 8009682:	b29a      	uxth	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7fe fd39 	bl	8008100 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800968e:	4b59      	ldr	r3, [pc, #356]	@ (80097f4 <tcp_process+0x7dc>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	429a      	cmp	r2, r3
 8009696:	d105      	bne.n	80096a4 <tcp_process+0x68c>
 8009698:	4b56      	ldr	r3, [pc, #344]	@ (80097f4 <tcp_process+0x7dc>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	4a55      	ldr	r2, [pc, #340]	@ (80097f4 <tcp_process+0x7dc>)
 80096a0:	6013      	str	r3, [r2, #0]
 80096a2:	e013      	b.n	80096cc <tcp_process+0x6b4>
 80096a4:	4b53      	ldr	r3, [pc, #332]	@ (80097f4 <tcp_process+0x7dc>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	613b      	str	r3, [r7, #16]
 80096aa:	e00c      	b.n	80096c6 <tcp_process+0x6ae>
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d104      	bne.n	80096c0 <tcp_process+0x6a8>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68da      	ldr	r2, [r3, #12]
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	60da      	str	r2, [r3, #12]
 80096be:	e005      	b.n	80096cc <tcp_process+0x6b4>
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	613b      	str	r3, [r7, #16]
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1ef      	bne.n	80096ac <tcp_process+0x694>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	60da      	str	r2, [r3, #12]
 80096d2:	4b43      	ldr	r3, [pc, #268]	@ (80097e0 <tcp_process+0x7c8>)
 80096d4:	2201      	movs	r2, #1
 80096d6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	220a      	movs	r2, #10
 80096dc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80096de:	4b41      	ldr	r3, [pc, #260]	@ (80097e4 <tcp_process+0x7cc>)
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	60da      	str	r2, [r3, #12]
 80096e6:	4a3f      	ldr	r2, [pc, #252]	@ (80097e4 <tcp_process+0x7cc>)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6013      	str	r3, [r2, #0]
 80096ec:	f002 fc8c 	bl	800c008 <tcp_timer_needed>
      }
      break;
 80096f0:	e06c      	b.n	80097cc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f984 	bl	8009a00 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80096f8:	4b3b      	ldr	r3, [pc, #236]	@ (80097e8 <tcp_process+0x7d0>)
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	f003 0310 	and.w	r3, r3, #16
 8009700:	2b00      	cmp	r3, #0
 8009702:	d065      	beq.n	80097d0 <tcp_process+0x7b8>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009708:	4b38      	ldr	r3, [pc, #224]	@ (80097ec <tcp_process+0x7d4>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	429a      	cmp	r2, r3
 800970e:	d15f      	bne.n	80097d0 <tcp_process+0x7b8>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009714:	2b00      	cmp	r3, #0
 8009716:	d15b      	bne.n	80097d0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7fe fcf1 	bl	8008100 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800971e:	4b35      	ldr	r3, [pc, #212]	@ (80097f4 <tcp_process+0x7dc>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	429a      	cmp	r2, r3
 8009726:	d105      	bne.n	8009734 <tcp_process+0x71c>
 8009728:	4b32      	ldr	r3, [pc, #200]	@ (80097f4 <tcp_process+0x7dc>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	4a31      	ldr	r2, [pc, #196]	@ (80097f4 <tcp_process+0x7dc>)
 8009730:	6013      	str	r3, [r2, #0]
 8009732:	e013      	b.n	800975c <tcp_process+0x744>
 8009734:	4b2f      	ldr	r3, [pc, #188]	@ (80097f4 <tcp_process+0x7dc>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	60fb      	str	r3, [r7, #12]
 800973a:	e00c      	b.n	8009756 <tcp_process+0x73e>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	429a      	cmp	r2, r3
 8009744:	d104      	bne.n	8009750 <tcp_process+0x738>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	68da      	ldr	r2, [r3, #12]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	60da      	str	r2, [r3, #12]
 800974e:	e005      	b.n	800975c <tcp_process+0x744>
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	60fb      	str	r3, [r7, #12]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1ef      	bne.n	800973c <tcp_process+0x724>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	60da      	str	r2, [r3, #12]
 8009762:	4b1f      	ldr	r3, [pc, #124]	@ (80097e0 <tcp_process+0x7c8>)
 8009764:	2201      	movs	r2, #1
 8009766:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	220a      	movs	r2, #10
 800976c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800976e:	4b1d      	ldr	r3, [pc, #116]	@ (80097e4 <tcp_process+0x7cc>)
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	60da      	str	r2, [r3, #12]
 8009776:	4a1b      	ldr	r2, [pc, #108]	@ (80097e4 <tcp_process+0x7cc>)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6013      	str	r3, [r2, #0]
 800977c:	f002 fc44 	bl	800c008 <tcp_timer_needed>
      }
      break;
 8009780:	e026      	b.n	80097d0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 f93c 	bl	8009a00 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009788:	4b17      	ldr	r3, [pc, #92]	@ (80097e8 <tcp_process+0x7d0>)
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	f003 0310 	and.w	r3, r3, #16
 8009790:	2b00      	cmp	r3, #0
 8009792:	d01f      	beq.n	80097d4 <tcp_process+0x7bc>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009798:	4b14      	ldr	r3, [pc, #80]	@ (80097ec <tcp_process+0x7d4>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	429a      	cmp	r2, r3
 800979e:	d119      	bne.n	80097d4 <tcp_process+0x7bc>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d115      	bne.n	80097d4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80097a8:	4b11      	ldr	r3, [pc, #68]	@ (80097f0 <tcp_process+0x7d8>)
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	f043 0310 	orr.w	r3, r3, #16
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	4b0f      	ldr	r3, [pc, #60]	@ (80097f0 <tcp_process+0x7d8>)
 80097b4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80097b6:	e00d      	b.n	80097d4 <tcp_process+0x7bc>
    default:
      break;
 80097b8:	bf00      	nop
 80097ba:	e00c      	b.n	80097d6 <tcp_process+0x7be>
      break;
 80097bc:	bf00      	nop
 80097be:	e00a      	b.n	80097d6 <tcp_process+0x7be>
      break;
 80097c0:	bf00      	nop
 80097c2:	e008      	b.n	80097d6 <tcp_process+0x7be>
      break;
 80097c4:	bf00      	nop
 80097c6:	e006      	b.n	80097d6 <tcp_process+0x7be>
      break;
 80097c8:	bf00      	nop
 80097ca:	e004      	b.n	80097d6 <tcp_process+0x7be>
      break;
 80097cc:	bf00      	nop
 80097ce:	e002      	b.n	80097d6 <tcp_process+0x7be>
      break;
 80097d0:	bf00      	nop
 80097d2:	e000      	b.n	80097d6 <tcp_process+0x7be>
      break;
 80097d4:	bf00      	nop
  }
  return ERR_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3724      	adds	r7, #36	@ 0x24
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd90      	pop	{r4, r7, pc}
 80097e0:	20008900 	.word	0x20008900
 80097e4:	200088fc 	.word	0x200088fc
 80097e8:	20008930 	.word	0x20008930
 80097ec:	20008928 	.word	0x20008928
 80097f0:	20008931 	.word	0x20008931
 80097f4:	200088f8 	.word	0x200088f8

080097f8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80097f8:	b590      	push	{r4, r7, lr}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d106      	bne.n	8009816 <tcp_oos_insert_segment+0x1e>
 8009808:	4b3b      	ldr	r3, [pc, #236]	@ (80098f8 <tcp_oos_insert_segment+0x100>)
 800980a:	f240 421f 	movw	r2, #1055	@ 0x41f
 800980e:	493b      	ldr	r1, [pc, #236]	@ (80098fc <tcp_oos_insert_segment+0x104>)
 8009810:	483b      	ldr	r0, [pc, #236]	@ (8009900 <tcp_oos_insert_segment+0x108>)
 8009812:	f005 fd4f 	bl	800f2b4 <printf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	899b      	ldrh	r3, [r3, #12]
 800981c:	b29b      	uxth	r3, r3
 800981e:	4618      	mov	r0, r3
 8009820:	f7fb fc0c 	bl	800503c <lwip_htons>
 8009824:	4603      	mov	r3, r0
 8009826:	b2db      	uxtb	r3, r3
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	2b00      	cmp	r3, #0
 800982e:	d028      	beq.n	8009882 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009830:	6838      	ldr	r0, [r7, #0]
 8009832:	f7fe fa63 	bl	8007cfc <tcp_segs_free>
    next = NULL;
 8009836:	2300      	movs	r3, #0
 8009838:	603b      	str	r3, [r7, #0]
 800983a:	e056      	b.n	80098ea <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	899b      	ldrh	r3, [r3, #12]
 8009842:	b29b      	uxth	r3, r3
 8009844:	4618      	mov	r0, r3
 8009846:	f7fb fbf9 	bl	800503c <lwip_htons>
 800984a:	4603      	mov	r3, r0
 800984c:	b2db      	uxtb	r3, r3
 800984e:	f003 0301 	and.w	r3, r3, #1
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00d      	beq.n	8009872 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	899b      	ldrh	r3, [r3, #12]
 800985c:	b29c      	uxth	r4, r3
 800985e:	2001      	movs	r0, #1
 8009860:	f7fb fbec 	bl	800503c <lwip_htons>
 8009864:	4603      	mov	r3, r0
 8009866:	461a      	mov	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	4322      	orrs	r2, r4
 800986e:	b292      	uxth	r2, r2
 8009870:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f7fe fa52 	bl	8007d26 <tcp_seg_free>
    while (next &&
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00e      	beq.n	80098a6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	891b      	ldrh	r3, [r3, #8]
 800988c:	461a      	mov	r2, r3
 800988e:	4b1d      	ldr	r3, [pc, #116]	@ (8009904 <tcp_oos_insert_segment+0x10c>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	441a      	add	r2, r3
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	6839      	ldr	r1, [r7, #0]
 800989c:	8909      	ldrh	r1, [r1, #8]
 800989e:	440b      	add	r3, r1
 80098a0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	daca      	bge.n	800983c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d01e      	beq.n	80098ea <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	891b      	ldrh	r3, [r3, #8]
 80098b0:	461a      	mov	r2, r3
 80098b2:	4b14      	ldr	r3, [pc, #80]	@ (8009904 <tcp_oos_insert_segment+0x10c>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	441a      	add	r2, r3
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	1ad3      	subs	r3, r2, r3
    if (next &&
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	dd12      	ble.n	80098ea <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009904 <tcp_oos_insert_segment+0x10c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	1ad3      	subs	r3, r2, r3
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685a      	ldr	r2, [r3, #4]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	891b      	ldrh	r3, [r3, #8]
 80098e2:	4619      	mov	r1, r3
 80098e4:	4610      	mov	r0, r2
 80098e6:	f7fc fd81 	bl	80063ec <pbuf_realloc>
    }
  }
  cseg->next = next;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	683a      	ldr	r2, [r7, #0]
 80098ee:	601a      	str	r2, [r3, #0]
}
 80098f0:	bf00      	nop
 80098f2:	3714      	adds	r7, #20
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd90      	pop	{r4, r7, pc}
 80098f8:	08014ebc 	.word	0x08014ebc
 80098fc:	0801517c 	.word	0x0801517c
 8009900:	08014f08 	.word	0x08014f08
 8009904:	20008924 	.word	0x20008924

08009908 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009908:	b5b0      	push	{r4, r5, r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	607a      	str	r2, [r7, #4]
 8009914:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009916:	e03e      	b.n	8009996 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	4618      	mov	r0, r3
 8009928:	f7fc ff6e 	bl	8006808 <pbuf_clen>
 800992c:	4603      	mov	r3, r0
 800992e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009936:	8a7a      	ldrh	r2, [r7, #18]
 8009938:	429a      	cmp	r2, r3
 800993a:	d906      	bls.n	800994a <tcp_free_acked_segments+0x42>
 800993c:	4b2a      	ldr	r3, [pc, #168]	@ (80099e8 <tcp_free_acked_segments+0xe0>)
 800993e:	f240 4257 	movw	r2, #1111	@ 0x457
 8009942:	492a      	ldr	r1, [pc, #168]	@ (80099ec <tcp_free_acked_segments+0xe4>)
 8009944:	482a      	ldr	r0, [pc, #168]	@ (80099f0 <tcp_free_acked_segments+0xe8>)
 8009946:	f005 fcb5 	bl	800f2b4 <printf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8009950:	8a7b      	ldrh	r3, [r7, #18]
 8009952:	1ad3      	subs	r3, r2, r3
 8009954:	b29a      	uxth	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	891a      	ldrh	r2, [r3, #8]
 8009960:	4b24      	ldr	r3, [pc, #144]	@ (80099f4 <tcp_free_acked_segments+0xec>)
 8009962:	881b      	ldrh	r3, [r3, #0]
 8009964:	4413      	add	r3, r2
 8009966:	b29a      	uxth	r2, r3
 8009968:	4b22      	ldr	r3, [pc, #136]	@ (80099f4 <tcp_free_acked_segments+0xec>)
 800996a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800996c:	6978      	ldr	r0, [r7, #20]
 800996e:	f7fe f9da 	bl	8007d26 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00c      	beq.n	8009996 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d109      	bne.n	8009996 <tcp_free_acked_segments+0x8e>
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d106      	bne.n	8009996 <tcp_free_acked_segments+0x8e>
 8009988:	4b17      	ldr	r3, [pc, #92]	@ (80099e8 <tcp_free_acked_segments+0xe0>)
 800998a:	f240 4261 	movw	r2, #1121	@ 0x461
 800998e:	491a      	ldr	r1, [pc, #104]	@ (80099f8 <tcp_free_acked_segments+0xf0>)
 8009990:	4817      	ldr	r0, [pc, #92]	@ (80099f0 <tcp_free_acked_segments+0xe8>)
 8009992:	f005 fc8f 	bl	800f2b4 <printf>
  while (seg_list != NULL &&
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d020      	beq.n	80099de <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7fb fb5f 	bl	8005066 <lwip_htonl>
 80099a8:	4604      	mov	r4, r0
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	891b      	ldrh	r3, [r3, #8]
 80099ae:	461d      	mov	r5, r3
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	899b      	ldrh	r3, [r3, #12]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fb fb3f 	bl	800503c <lwip_htons>
 80099be:	4603      	mov	r3, r0
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	f003 0303 	and.w	r3, r3, #3
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d001      	beq.n	80099ce <tcp_free_acked_segments+0xc6>
 80099ca:	2301      	movs	r3, #1
 80099cc:	e000      	b.n	80099d0 <tcp_free_acked_segments+0xc8>
 80099ce:	2300      	movs	r3, #0
 80099d0:	442b      	add	r3, r5
 80099d2:	18e2      	adds	r2, r4, r3
 80099d4:	4b09      	ldr	r3, [pc, #36]	@ (80099fc <tcp_free_acked_segments+0xf4>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80099da:	2b00      	cmp	r3, #0
 80099dc:	dd9c      	ble.n	8009918 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80099de:	68bb      	ldr	r3, [r7, #8]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3718      	adds	r7, #24
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bdb0      	pop	{r4, r5, r7, pc}
 80099e8:	08014ebc 	.word	0x08014ebc
 80099ec:	080151a4 	.word	0x080151a4
 80099f0:	08014f08 	.word	0x08014f08
 80099f4:	2000892c 	.word	0x2000892c
 80099f8:	080151cc 	.word	0x080151cc
 80099fc:	20008928 	.word	0x20008928

08009a00 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009a00:	b5b0      	push	{r4, r5, r7, lr}
 8009a02:	b094      	sub	sp, #80	@ 0x50
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d106      	bne.n	8009a20 <tcp_receive+0x20>
 8009a12:	4b91      	ldr	r3, [pc, #580]	@ (8009c58 <tcp_receive+0x258>)
 8009a14:	f240 427b 	movw	r2, #1147	@ 0x47b
 8009a18:	4990      	ldr	r1, [pc, #576]	@ (8009c5c <tcp_receive+0x25c>)
 8009a1a:	4891      	ldr	r0, [pc, #580]	@ (8009c60 <tcp_receive+0x260>)
 8009a1c:	f005 fc4a 	bl	800f2b4 <printf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	7d1b      	ldrb	r3, [r3, #20]
 8009a24:	2b03      	cmp	r3, #3
 8009a26:	d806      	bhi.n	8009a36 <tcp_receive+0x36>
 8009a28:	4b8b      	ldr	r3, [pc, #556]	@ (8009c58 <tcp_receive+0x258>)
 8009a2a:	f240 427c 	movw	r2, #1148	@ 0x47c
 8009a2e:	498d      	ldr	r1, [pc, #564]	@ (8009c64 <tcp_receive+0x264>)
 8009a30:	488b      	ldr	r0, [pc, #556]	@ (8009c60 <tcp_receive+0x260>)
 8009a32:	f005 fc3f 	bl	800f2b4 <printf>

  if (flags & TCP_ACK) {
 8009a36:	4b8c      	ldr	r3, [pc, #560]	@ (8009c68 <tcp_receive+0x268>)
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	f003 0310 	and.w	r3, r3, #16
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f000 8264 	beq.w	8009f0c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a50:	4413      	add	r3, r2
 8009a52:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a58:	4b84      	ldr	r3, [pc, #528]	@ (8009c6c <tcp_receive+0x26c>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	1ad3      	subs	r3, r2, r3
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	db1b      	blt.n	8009a9a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a66:	4b81      	ldr	r3, [pc, #516]	@ (8009c6c <tcp_receive+0x26c>)
 8009a68:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d106      	bne.n	8009a7c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009a72:	4b7f      	ldr	r3, [pc, #508]	@ (8009c70 <tcp_receive+0x270>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	db0e      	blt.n	8009a9a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009a80:	4b7b      	ldr	r3, [pc, #492]	@ (8009c70 <tcp_receive+0x270>)
 8009a82:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d125      	bne.n	8009ad4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009a88:	4b7a      	ldr	r3, [pc, #488]	@ (8009c74 <tcp_receive+0x274>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	89db      	ldrh	r3, [r3, #14]
 8009a8e:	b29a      	uxth	r2, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d91c      	bls.n	8009ad4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009a9a:	4b76      	ldr	r3, [pc, #472]	@ (8009c74 <tcp_receive+0x274>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	89db      	ldrh	r3, [r3, #14]
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d205      	bcs.n	8009ac4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8009ac4:	4b69      	ldr	r3, [pc, #420]	@ (8009c6c <tcp_receive+0x26c>)
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8009acc:	4b68      	ldr	r3, [pc, #416]	@ (8009c70 <tcp_receive+0x270>)
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009ad4:	4b66      	ldr	r3, [pc, #408]	@ (8009c70 <tcp_receive+0x270>)
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	dc58      	bgt.n	8009b94 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009ae2:	4b65      	ldr	r3, [pc, #404]	@ (8009c78 <tcp_receive+0x278>)
 8009ae4:	881b      	ldrh	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d14b      	bne.n	8009b82 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8009af4:	4413      	add	r3, r2
 8009af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d142      	bne.n	8009b82 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	db3d      	blt.n	8009b82 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b0a:	4b59      	ldr	r3, [pc, #356]	@ (8009c70 <tcp_receive+0x270>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d137      	bne.n	8009b82 <tcp_receive+0x182>
              found_dupack = 1;
 8009b12:	2301      	movs	r3, #1
 8009b14:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009b1c:	2bff      	cmp	r3, #255	@ 0xff
 8009b1e:	d007      	beq.n	8009b30 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009b26:	3301      	adds	r3, #1
 8009b28:	b2da      	uxtb	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009b36:	2b03      	cmp	r3, #3
 8009b38:	d91b      	bls.n	8009b72 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009b44:	4413      	add	r3, r2
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d30a      	bcc.n	8009b68 <tcp_receive+0x168>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009b5c:	4413      	add	r3, r2
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009b66:	e004      	b.n	8009b72 <tcp_receive+0x172>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009b6e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d902      	bls.n	8009b82 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f001 fee7 	bl	800b950 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f040 8161 	bne.w	8009e4c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009b92:	e15b      	b.n	8009e4c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009b94:	4b36      	ldr	r3, [pc, #216]	@ (8009c70 <tcp_receive+0x270>)
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f2c0 814e 	blt.w	8009e42 <tcp_receive+0x442>
 8009ba6:	4b32      	ldr	r3, [pc, #200]	@ (8009c70 <tcp_receive+0x270>)
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f300 8146 	bgt.w	8009e42 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	8b5b      	ldrh	r3, [r3, #26]
 8009bba:	f003 0304 	and.w	r3, r3, #4
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d010      	beq.n	8009be4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	8b5b      	ldrh	r3, [r3, #26]
 8009bc6:	f023 0304 	bic.w	r3, r3, #4
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009bf2:	10db      	asrs	r3, r3, #3
 8009bf4:	b21b      	sxth	r3, r3
 8009bf6:	b29a      	uxth	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	4413      	add	r3, r2
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	b21a      	sxth	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009c0c:	4b18      	ldr	r3, [pc, #96]	@ (8009c70 <tcp_receive+0x270>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8009c24:	4b12      	ldr	r3, [pc, #72]	@ (8009c70 <tcp_receive+0x270>)
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	7d1b      	ldrb	r3, [r3, #20]
 8009c30:	2b03      	cmp	r3, #3
 8009c32:	f240 8097 	bls.w	8009d64 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d245      	bcs.n	8009cd2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	8b5b      	ldrh	r3, [r3, #26]
 8009c4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d014      	beq.n	8009c7c <tcp_receive+0x27c>
 8009c52:	2301      	movs	r3, #1
 8009c54:	e013      	b.n	8009c7e <tcp_receive+0x27e>
 8009c56:	bf00      	nop
 8009c58:	08014ebc 	.word	0x08014ebc
 8009c5c:	080151ec 	.word	0x080151ec
 8009c60:	08014f08 	.word	0x08014f08
 8009c64:	08015208 	.word	0x08015208
 8009c68:	20008930 	.word	0x20008930
 8009c6c:	20008924 	.word	0x20008924
 8009c70:	20008928 	.word	0x20008928
 8009c74:	20008914 	.word	0x20008914
 8009c78:	2000892e 	.word	0x2000892e
 8009c7c:	2302      	movs	r3, #2
 8009c7e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009c82:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009c8c:	fb12 f303 	smulbb	r3, r2, r3
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009c94:	4293      	cmp	r3, r2
 8009c96:	bf28      	it	cs
 8009c98:	4613      	movcs	r3, r2
 8009c9a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009ca2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009ca4:	4413      	add	r3, r2
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d309      	bcc.n	8009cc6 <tcp_receive+0x2c6>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009cb8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009cba:	4413      	add	r3, r2
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009cc4:	e04e      	b.n	8009d64 <tcp_receive+0x364>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009ccc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009cd0:	e048      	b.n	8009d64 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009cd8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009cda:	4413      	add	r3, r2
 8009cdc:	b29a      	uxth	r2, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d309      	bcc.n	8009cfc <tcp_receive+0x2fc>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009cee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009cf0:	4413      	add	r3, r2
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009cfa:	e004      	b.n	8009d06 <tcp_receive+0x306>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009d02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d326      	bcc.n	8009d64 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009d36:	4413      	add	r3, r2
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d30a      	bcc.n	8009d5a <tcp_receive+0x35a>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009d4e:	4413      	add	r3, r2
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009d58:	e004      	b.n	8009d64 <tcp_receive+0x364>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009d60:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d6c:	4a98      	ldr	r2, [pc, #608]	@ (8009fd0 <tcp_receive+0x5d0>)
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7ff fdca 	bl	8009908 <tcp_free_acked_segments>
 8009d74:	4602      	mov	r2, r0
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d82:	4a94      	ldr	r2, [pc, #592]	@ (8009fd4 <tcp_receive+0x5d4>)
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f7ff fdbf 	bl	8009908 <tcp_free_acked_segments>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d104      	bne.n	8009da2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009d9e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8009da0:	e002      	b.n	8009da8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d103      	bne.n	8009dbe <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8009dc4:	4b84      	ldr	r3, [pc, #528]	@ (8009fd8 <tcp_receive+0x5d8>)
 8009dc6:	881b      	ldrh	r3, [r3, #0]
 8009dc8:	4413      	add	r3, r2
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	8b5b      	ldrh	r3, [r3, #26]
 8009dd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d035      	beq.n	8009e4a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d118      	bne.n	8009e18 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00c      	beq.n	8009e08 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7fb f933 	bl	8005066 <lwip_htonl>
 8009e00:	4603      	mov	r3, r0
 8009e02:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	dc20      	bgt.n	8009e4a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	8b5b      	ldrh	r3, [r3, #26]
 8009e0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009e16:	e018      	b.n	8009e4a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7fb f91e 	bl	8005066 <lwip_htonl>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	1ae3      	subs	r3, r4, r3
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	dc0b      	bgt.n	8009e4a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	8b5b      	ldrh	r3, [r3, #26]
 8009e36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009e40:	e003      	b.n	8009e4a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f001 ff70 	bl	800bd28 <tcp_send_empty_ack>
 8009e48:	e000      	b.n	8009e4c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009e4a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d05b      	beq.n	8009f0c <tcp_receive+0x50c>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e58:	4b60      	ldr	r3, [pc, #384]	@ (8009fdc <tcp_receive+0x5dc>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	da54      	bge.n	8009f0c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009e62:	4b5f      	ldr	r3, [pc, #380]	@ (8009fe0 <tcp_receive+0x5e0>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	1ad3      	subs	r3, r2, r3
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009e76:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009e80:	10db      	asrs	r3, r3, #3
 8009e82:	b21b      	sxth	r3, r3
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	1ad3      	subs	r3, r2, r3
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009e9a:	4413      	add	r3, r2
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	b21a      	sxth	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8009ea4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	da05      	bge.n	8009eb8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009eac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009eb0:	425b      	negs	r3, r3
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009eb8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009ec2:	109b      	asrs	r3, r3, #2
 8009ec4:	b21b      	sxth	r3, r3
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009edc:	4413      	add	r3, r2
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	b21a      	sxth	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009eec:	10db      	asrs	r3, r3, #3
 8009eee:	b21b      	sxth	r3, r3
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	4413      	add	r3, r2
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	b21a      	sxth	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009f0c:	4b35      	ldr	r3, [pc, #212]	@ (8009fe4 <tcp_receive+0x5e4>)
 8009f0e:	881b      	ldrh	r3, [r3, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f000 84df 	beq.w	800a8d4 <tcp_receive+0xed4>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	7d1b      	ldrb	r3, [r3, #20]
 8009f1a:	2b06      	cmp	r3, #6
 8009f1c:	f200 84da 	bhi.w	800a8d4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f24:	4b30      	ldr	r3, [pc, #192]	@ (8009fe8 <tcp_receive+0x5e8>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	1ad3      	subs	r3, r2, r3
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f2c0 808f 	blt.w	800a050 <tcp_receive+0x650>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f36:	4b2b      	ldr	r3, [pc, #172]	@ (8009fe4 <tcp_receive+0x5e4>)
 8009f38:	881b      	ldrh	r3, [r3, #0]
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8009fe8 <tcp_receive+0x5e8>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	440b      	add	r3, r1
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	3301      	adds	r3, #1
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f300 8082 	bgt.w	800a050 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009f4c:	4b27      	ldr	r3, [pc, #156]	@ (8009fec <tcp_receive+0x5ec>)
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f56:	4b24      	ldr	r3, [pc, #144]	@ (8009fe8 <tcp_receive+0x5e8>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009f5e:	4b23      	ldr	r3, [pc, #140]	@ (8009fec <tcp_receive+0x5ec>)
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d106      	bne.n	8009f74 <tcp_receive+0x574>
 8009f66:	4b22      	ldr	r3, [pc, #136]	@ (8009ff0 <tcp_receive+0x5f0>)
 8009f68:	f240 5294 	movw	r2, #1428	@ 0x594
 8009f6c:	4921      	ldr	r1, [pc, #132]	@ (8009ff4 <tcp_receive+0x5f4>)
 8009f6e:	4822      	ldr	r0, [pc, #136]	@ (8009ff8 <tcp_receive+0x5f8>)
 8009f70:	f005 f9a0 	bl	800f2b4 <printf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f76:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d906      	bls.n	8009f8c <tcp_receive+0x58c>
 8009f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8009ff0 <tcp_receive+0x5f0>)
 8009f80:	f240 5295 	movw	r2, #1429	@ 0x595
 8009f84:	491d      	ldr	r1, [pc, #116]	@ (8009ffc <tcp_receive+0x5fc>)
 8009f86:	481c      	ldr	r0, [pc, #112]	@ (8009ff8 <tcp_receive+0x5f8>)
 8009f88:	f005 f994 	bl	800f2b4 <printf>
      off = (u16_t)off32;
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f8e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009f92:	4b16      	ldr	r3, [pc, #88]	@ (8009fec <tcp_receive+0x5ec>)
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	891b      	ldrh	r3, [r3, #8]
 8009f98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d906      	bls.n	8009fae <tcp_receive+0x5ae>
 8009fa0:	4b13      	ldr	r3, [pc, #76]	@ (8009ff0 <tcp_receive+0x5f0>)
 8009fa2:	f240 5297 	movw	r2, #1431	@ 0x597
 8009fa6:	4916      	ldr	r1, [pc, #88]	@ (800a000 <tcp_receive+0x600>)
 8009fa8:	4813      	ldr	r0, [pc, #76]	@ (8009ff8 <tcp_receive+0x5f8>)
 8009faa:	f005 f983 	bl	800f2b4 <printf>
      inseg.len -= off;
 8009fae:	4b0f      	ldr	r3, [pc, #60]	@ (8009fec <tcp_receive+0x5ec>)
 8009fb0:	891a      	ldrh	r2, [r3, #8]
 8009fb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	4b0c      	ldr	r3, [pc, #48]	@ (8009fec <tcp_receive+0x5ec>)
 8009fbc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8009fec <tcp_receive+0x5ec>)
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	891a      	ldrh	r2, [r3, #8]
 8009fc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009fc8:	1ad3      	subs	r3, r2, r3
 8009fca:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8009fcc:	e02a      	b.n	800a024 <tcp_receive+0x624>
 8009fce:	bf00      	nop
 8009fd0:	08015224 	.word	0x08015224
 8009fd4:	0801522c 	.word	0x0801522c
 8009fd8:	2000892c 	.word	0x2000892c
 8009fdc:	20008928 	.word	0x20008928
 8009fe0:	200088ec 	.word	0x200088ec
 8009fe4:	2000892e 	.word	0x2000892e
 8009fe8:	20008924 	.word	0x20008924
 8009fec:	20008904 	.word	0x20008904
 8009ff0:	08014ebc 	.word	0x08014ebc
 8009ff4:	08015234 	.word	0x08015234
 8009ff8:	08014f08 	.word	0x08014f08
 8009ffc:	08015244 	.word	0x08015244
 800a000:	08015254 	.word	0x08015254
        off -= p->len;
 800a004:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a006:	895b      	ldrh	r3, [r3, #10]
 800a008:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a012:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a014:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a016:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a01a:	2200      	movs	r2, #0
 800a01c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a01e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800a024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a026:	895b      	ldrh	r3, [r3, #10]
 800a028:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d8e9      	bhi.n	800a004 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a030:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a034:	4619      	mov	r1, r3
 800a036:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a038:	f7fc fad8 	bl	80065ec <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a040:	4a90      	ldr	r2, [pc, #576]	@ (800a284 <tcp_receive+0x884>)
 800a042:	6013      	str	r3, [r2, #0]
 800a044:	4b90      	ldr	r3, [pc, #576]	@ (800a288 <tcp_receive+0x888>)
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	4a8e      	ldr	r2, [pc, #568]	@ (800a284 <tcp_receive+0x884>)
 800a04a:	6812      	ldr	r2, [r2, #0]
 800a04c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a04e:	e00d      	b.n	800a06c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a050:	4b8c      	ldr	r3, [pc, #560]	@ (800a284 <tcp_receive+0x884>)
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a058:	1ad3      	subs	r3, r2, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	da06      	bge.n	800a06c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	8b5b      	ldrh	r3, [r3, #26]
 800a062:	f043 0302 	orr.w	r3, r3, #2
 800a066:	b29a      	uxth	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a06c:	4b85      	ldr	r3, [pc, #532]	@ (800a284 <tcp_receive+0x884>)
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a074:	1ad3      	subs	r3, r2, r3
 800a076:	2b00      	cmp	r3, #0
 800a078:	f2c0 8427 	blt.w	800a8ca <tcp_receive+0xeca>
 800a07c:	4b81      	ldr	r3, [pc, #516]	@ (800a284 <tcp_receive+0x884>)
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a084:	6879      	ldr	r1, [r7, #4]
 800a086:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a088:	440b      	add	r3, r1
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	3301      	adds	r3, #1
 800a08e:	2b00      	cmp	r3, #0
 800a090:	f300 841b 	bgt.w	800a8ca <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a098:	4b7a      	ldr	r3, [pc, #488]	@ (800a284 <tcp_receive+0x884>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	f040 8298 	bne.w	800a5d2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a0a2:	4b79      	ldr	r3, [pc, #484]	@ (800a288 <tcp_receive+0x888>)
 800a0a4:	891c      	ldrh	r4, [r3, #8]
 800a0a6:	4b78      	ldr	r3, [pc, #480]	@ (800a288 <tcp_receive+0x888>)
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	899b      	ldrh	r3, [r3, #12]
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fa ffc4 	bl	800503c <lwip_htons>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	f003 0303 	and.w	r3, r3, #3
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d001      	beq.n	800a0c4 <tcp_receive+0x6c4>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e000      	b.n	800a0c6 <tcp_receive+0x6c6>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	4423      	add	r3, r4
 800a0c8:	b29a      	uxth	r2, r3
 800a0ca:	4b70      	ldr	r3, [pc, #448]	@ (800a28c <tcp_receive+0x88c>)
 800a0cc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a0d2:	4b6e      	ldr	r3, [pc, #440]	@ (800a28c <tcp_receive+0x88c>)
 800a0d4:	881b      	ldrh	r3, [r3, #0]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d274      	bcs.n	800a1c4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a0da:	4b6b      	ldr	r3, [pc, #428]	@ (800a288 <tcp_receive+0x888>)
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	899b      	ldrh	r3, [r3, #12]
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7fa ffaa 	bl	800503c <lwip_htons>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	f003 0301 	and.w	r3, r3, #1
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d01e      	beq.n	800a132 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a0f4:	4b64      	ldr	r3, [pc, #400]	@ (800a288 <tcp_receive+0x888>)
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	899b      	ldrh	r3, [r3, #12]
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	b21b      	sxth	r3, r3
 800a0fe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a102:	b21c      	sxth	r4, r3
 800a104:	4b60      	ldr	r3, [pc, #384]	@ (800a288 <tcp_receive+0x888>)
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	899b      	ldrh	r3, [r3, #12]
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7fa ff95 	bl	800503c <lwip_htons>
 800a112:	4603      	mov	r3, r0
 800a114:	b2db      	uxtb	r3, r3
 800a116:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7fa ff8d 	bl	800503c <lwip_htons>
 800a122:	4603      	mov	r3, r0
 800a124:	b21b      	sxth	r3, r3
 800a126:	4323      	orrs	r3, r4
 800a128:	b21a      	sxth	r2, r3
 800a12a:	4b57      	ldr	r3, [pc, #348]	@ (800a288 <tcp_receive+0x888>)
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	b292      	uxth	r2, r2
 800a130:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a136:	4b54      	ldr	r3, [pc, #336]	@ (800a288 <tcp_receive+0x888>)
 800a138:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a13a:	4b53      	ldr	r3, [pc, #332]	@ (800a288 <tcp_receive+0x888>)
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	899b      	ldrh	r3, [r3, #12]
 800a140:	b29b      	uxth	r3, r3
 800a142:	4618      	mov	r0, r3
 800a144:	f7fa ff7a 	bl	800503c <lwip_htons>
 800a148:	4603      	mov	r3, r0
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	f003 0302 	and.w	r3, r3, #2
 800a150:	2b00      	cmp	r3, #0
 800a152:	d005      	beq.n	800a160 <tcp_receive+0x760>
            inseg.len -= 1;
 800a154:	4b4c      	ldr	r3, [pc, #304]	@ (800a288 <tcp_receive+0x888>)
 800a156:	891b      	ldrh	r3, [r3, #8]
 800a158:	3b01      	subs	r3, #1
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	4b4a      	ldr	r3, [pc, #296]	@ (800a288 <tcp_receive+0x888>)
 800a15e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a160:	4b49      	ldr	r3, [pc, #292]	@ (800a288 <tcp_receive+0x888>)
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	4a48      	ldr	r2, [pc, #288]	@ (800a288 <tcp_receive+0x888>)
 800a166:	8912      	ldrh	r2, [r2, #8]
 800a168:	4611      	mov	r1, r2
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7fc f93e 	bl	80063ec <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a170:	4b45      	ldr	r3, [pc, #276]	@ (800a288 <tcp_receive+0x888>)
 800a172:	891c      	ldrh	r4, [r3, #8]
 800a174:	4b44      	ldr	r3, [pc, #272]	@ (800a288 <tcp_receive+0x888>)
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	899b      	ldrh	r3, [r3, #12]
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fa ff5d 	bl	800503c <lwip_htons>
 800a182:	4603      	mov	r3, r0
 800a184:	b2db      	uxtb	r3, r3
 800a186:	f003 0303 	and.w	r3, r3, #3
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d001      	beq.n	800a192 <tcp_receive+0x792>
 800a18e:	2301      	movs	r3, #1
 800a190:	e000      	b.n	800a194 <tcp_receive+0x794>
 800a192:	2300      	movs	r3, #0
 800a194:	4423      	add	r3, r4
 800a196:	b29a      	uxth	r2, r3
 800a198:	4b3c      	ldr	r3, [pc, #240]	@ (800a28c <tcp_receive+0x88c>)
 800a19a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a19c:	4b3b      	ldr	r3, [pc, #236]	@ (800a28c <tcp_receive+0x88c>)
 800a19e:	881b      	ldrh	r3, [r3, #0]
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	4b38      	ldr	r3, [pc, #224]	@ (800a284 <tcp_receive+0x884>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	441a      	add	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ac:	6879      	ldr	r1, [r7, #4]
 800a1ae:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a1b0:	440b      	add	r3, r1
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d006      	beq.n	800a1c4 <tcp_receive+0x7c4>
 800a1b6:	4b36      	ldr	r3, [pc, #216]	@ (800a290 <tcp_receive+0x890>)
 800a1b8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800a1bc:	4935      	ldr	r1, [pc, #212]	@ (800a294 <tcp_receive+0x894>)
 800a1be:	4836      	ldr	r0, [pc, #216]	@ (800a298 <tcp_receive+0x898>)
 800a1c0:	f005 f878 	bl	800f2b4 <printf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	f000 80e6 	beq.w	800a39a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a1ce:	4b2e      	ldr	r3, [pc, #184]	@ (800a288 <tcp_receive+0x888>)
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	899b      	ldrh	r3, [r3, #12]
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7fa ff30 	bl	800503c <lwip_htons>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	f003 0301 	and.w	r3, r3, #1
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d010      	beq.n	800a20a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a1e8:	e00a      	b.n	800a200 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1ee:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f7fd fd93 	bl	8007d26 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1f0      	bne.n	800a1ea <tcp_receive+0x7ea>
 800a208:	e0c7      	b.n	800a39a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a210:	e051      	b.n	800a2b6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	899b      	ldrh	r3, [r3, #12]
 800a218:	b29b      	uxth	r3, r3
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7fa ff0e 	bl	800503c <lwip_htons>
 800a220:	4603      	mov	r3, r0
 800a222:	b2db      	uxtb	r3, r3
 800a224:	f003 0301 	and.w	r3, r3, #1
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d03c      	beq.n	800a2a6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a22c:	4b16      	ldr	r3, [pc, #88]	@ (800a288 <tcp_receive+0x888>)
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	899b      	ldrh	r3, [r3, #12]
 800a232:	b29b      	uxth	r3, r3
 800a234:	4618      	mov	r0, r3
 800a236:	f7fa ff01 	bl	800503c <lwip_htons>
 800a23a:	4603      	mov	r3, r0
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a242:	2b00      	cmp	r3, #0
 800a244:	d12f      	bne.n	800a2a6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a246:	4b10      	ldr	r3, [pc, #64]	@ (800a288 <tcp_receive+0x888>)
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	899b      	ldrh	r3, [r3, #12]
 800a24c:	b29c      	uxth	r4, r3
 800a24e:	2001      	movs	r0, #1
 800a250:	f7fa fef4 	bl	800503c <lwip_htons>
 800a254:	4603      	mov	r3, r0
 800a256:	461a      	mov	r2, r3
 800a258:	4b0b      	ldr	r3, [pc, #44]	@ (800a288 <tcp_receive+0x888>)
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	4322      	orrs	r2, r4
 800a25e:	b292      	uxth	r2, r2
 800a260:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a262:	4b09      	ldr	r3, [pc, #36]	@ (800a288 <tcp_receive+0x888>)
 800a264:	891c      	ldrh	r4, [r3, #8]
 800a266:	4b08      	ldr	r3, [pc, #32]	@ (800a288 <tcp_receive+0x888>)
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	899b      	ldrh	r3, [r3, #12]
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fa fee4 	bl	800503c <lwip_htons>
 800a274:	4603      	mov	r3, r0
 800a276:	b2db      	uxtb	r3, r3
 800a278:	f003 0303 	and.w	r3, r3, #3
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00d      	beq.n	800a29c <tcp_receive+0x89c>
 800a280:	2301      	movs	r3, #1
 800a282:	e00c      	b.n	800a29e <tcp_receive+0x89e>
 800a284:	20008924 	.word	0x20008924
 800a288:	20008904 	.word	0x20008904
 800a28c:	2000892e 	.word	0x2000892e
 800a290:	08014ebc 	.word	0x08014ebc
 800a294:	08015264 	.word	0x08015264
 800a298:	08014f08 	.word	0x08014f08
 800a29c:	2300      	movs	r3, #0
 800a29e:	4423      	add	r3, r4
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	4b98      	ldr	r3, [pc, #608]	@ (800a504 <tcp_receive+0xb04>)
 800a2a4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a2a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2a8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a2aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800a2b0:	6938      	ldr	r0, [r7, #16]
 800a2b2:	f7fd fd38 	bl	8007d26 <tcp_seg_free>
            while (next &&
 800a2b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d00e      	beq.n	800a2da <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a2bc:	4b91      	ldr	r3, [pc, #580]	@ (800a504 <tcp_receive+0xb04>)
 800a2be:	881b      	ldrh	r3, [r3, #0]
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	4b91      	ldr	r3, [pc, #580]	@ (800a508 <tcp_receive+0xb08>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	441a      	add	r2, r3
 800a2c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2d0:	8909      	ldrh	r1, [r1, #8]
 800a2d2:	440b      	add	r3, r1
 800a2d4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	da9b      	bge.n	800a212 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a2da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d059      	beq.n	800a394 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800a2e0:	4b88      	ldr	r3, [pc, #544]	@ (800a504 <tcp_receive+0xb04>)
 800a2e2:	881b      	ldrh	r3, [r3, #0]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	4b88      	ldr	r3, [pc, #544]	@ (800a508 <tcp_receive+0xb08>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	441a      	add	r2, r3
 800a2ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	dd4d      	ble.n	800a394 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a2f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	4b81      	ldr	r3, [pc, #516]	@ (800a508 <tcp_receive+0xb08>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	b29b      	uxth	r3, r3
 800a306:	1ad3      	subs	r3, r2, r3
 800a308:	b29a      	uxth	r2, r3
 800a30a:	4b80      	ldr	r3, [pc, #512]	@ (800a50c <tcp_receive+0xb0c>)
 800a30c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a30e:	4b7f      	ldr	r3, [pc, #508]	@ (800a50c <tcp_receive+0xb0c>)
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	899b      	ldrh	r3, [r3, #12]
 800a314:	b29b      	uxth	r3, r3
 800a316:	4618      	mov	r0, r3
 800a318:	f7fa fe90 	bl	800503c <lwip_htons>
 800a31c:	4603      	mov	r3, r0
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	f003 0302 	and.w	r3, r3, #2
 800a324:	2b00      	cmp	r3, #0
 800a326:	d005      	beq.n	800a334 <tcp_receive+0x934>
                inseg.len -= 1;
 800a328:	4b78      	ldr	r3, [pc, #480]	@ (800a50c <tcp_receive+0xb0c>)
 800a32a:	891b      	ldrh	r3, [r3, #8]
 800a32c:	3b01      	subs	r3, #1
 800a32e:	b29a      	uxth	r2, r3
 800a330:	4b76      	ldr	r3, [pc, #472]	@ (800a50c <tcp_receive+0xb0c>)
 800a332:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a334:	4b75      	ldr	r3, [pc, #468]	@ (800a50c <tcp_receive+0xb0c>)
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	4a74      	ldr	r2, [pc, #464]	@ (800a50c <tcp_receive+0xb0c>)
 800a33a:	8912      	ldrh	r2, [r2, #8]
 800a33c:	4611      	mov	r1, r2
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fc f854 	bl	80063ec <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a344:	4b71      	ldr	r3, [pc, #452]	@ (800a50c <tcp_receive+0xb0c>)
 800a346:	891c      	ldrh	r4, [r3, #8]
 800a348:	4b70      	ldr	r3, [pc, #448]	@ (800a50c <tcp_receive+0xb0c>)
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	899b      	ldrh	r3, [r3, #12]
 800a34e:	b29b      	uxth	r3, r3
 800a350:	4618      	mov	r0, r3
 800a352:	f7fa fe73 	bl	800503c <lwip_htons>
 800a356:	4603      	mov	r3, r0
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	f003 0303 	and.w	r3, r3, #3
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d001      	beq.n	800a366 <tcp_receive+0x966>
 800a362:	2301      	movs	r3, #1
 800a364:	e000      	b.n	800a368 <tcp_receive+0x968>
 800a366:	2300      	movs	r3, #0
 800a368:	4423      	add	r3, r4
 800a36a:	b29a      	uxth	r2, r3
 800a36c:	4b65      	ldr	r3, [pc, #404]	@ (800a504 <tcp_receive+0xb04>)
 800a36e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a370:	4b64      	ldr	r3, [pc, #400]	@ (800a504 <tcp_receive+0xb04>)
 800a372:	881b      	ldrh	r3, [r3, #0]
 800a374:	461a      	mov	r2, r3
 800a376:	4b64      	ldr	r3, [pc, #400]	@ (800a508 <tcp_receive+0xb08>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	441a      	add	r2, r3
 800a37c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	429a      	cmp	r2, r3
 800a384:	d006      	beq.n	800a394 <tcp_receive+0x994>
 800a386:	4b62      	ldr	r3, [pc, #392]	@ (800a510 <tcp_receive+0xb10>)
 800a388:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800a38c:	4961      	ldr	r1, [pc, #388]	@ (800a514 <tcp_receive+0xb14>)
 800a38e:	4862      	ldr	r0, [pc, #392]	@ (800a518 <tcp_receive+0xb18>)
 800a390:	f004 ff90 	bl	800f2b4 <printf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a398:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a39a:	4b5a      	ldr	r3, [pc, #360]	@ (800a504 <tcp_receive+0xb04>)
 800a39c:	881b      	ldrh	r3, [r3, #0]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	4b59      	ldr	r3, [pc, #356]	@ (800a508 <tcp_receive+0xb08>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	441a      	add	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a3ae:	4b55      	ldr	r3, [pc, #340]	@ (800a504 <tcp_receive+0xb04>)
 800a3b0:	881b      	ldrh	r3, [r3, #0]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d206      	bcs.n	800a3c4 <tcp_receive+0x9c4>
 800a3b6:	4b56      	ldr	r3, [pc, #344]	@ (800a510 <tcp_receive+0xb10>)
 800a3b8:	f240 6207 	movw	r2, #1543	@ 0x607
 800a3bc:	4957      	ldr	r1, [pc, #348]	@ (800a51c <tcp_receive+0xb1c>)
 800a3be:	4856      	ldr	r0, [pc, #344]	@ (800a518 <tcp_receive+0xb18>)
 800a3c0:	f004 ff78 	bl	800f2b4 <printf>
        pcb->rcv_wnd -= tcplen;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a3c8:	4b4e      	ldr	r3, [pc, #312]	@ (800a504 <tcp_receive+0xb04>)
 800a3ca:	881b      	ldrh	r3, [r3, #0]
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	b29a      	uxth	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f7fc ffc5 	bl	8007364 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a3da:	4b4c      	ldr	r3, [pc, #304]	@ (800a50c <tcp_receive+0xb0c>)
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	891b      	ldrh	r3, [r3, #8]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d006      	beq.n	800a3f2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a3e4:	4b49      	ldr	r3, [pc, #292]	@ (800a50c <tcp_receive+0xb0c>)
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	4a4d      	ldr	r2, [pc, #308]	@ (800a520 <tcp_receive+0xb20>)
 800a3ea:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a3ec:	4b47      	ldr	r3, [pc, #284]	@ (800a50c <tcp_receive+0xb0c>)
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a3f2:	4b46      	ldr	r3, [pc, #280]	@ (800a50c <tcp_receive+0xb0c>)
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	899b      	ldrh	r3, [r3, #12]
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7fa fe1e 	bl	800503c <lwip_htons>
 800a400:	4603      	mov	r3, r0
 800a402:	b2db      	uxtb	r3, r3
 800a404:	f003 0301 	and.w	r3, r3, #1
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 80b8 	beq.w	800a57e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a40e:	4b45      	ldr	r3, [pc, #276]	@ (800a524 <tcp_receive+0xb24>)
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	f043 0320 	orr.w	r3, r3, #32
 800a416:	b2da      	uxtb	r2, r3
 800a418:	4b42      	ldr	r3, [pc, #264]	@ (800a524 <tcp_receive+0xb24>)
 800a41a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a41c:	e0af      	b.n	800a57e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a422:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	4a36      	ldr	r2, [pc, #216]	@ (800a508 <tcp_receive+0xb08>)
 800a42e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	891b      	ldrh	r3, [r3, #8]
 800a434:	461c      	mov	r4, r3
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	899b      	ldrh	r3, [r3, #12]
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fa fdfc 	bl	800503c <lwip_htons>
 800a444:	4603      	mov	r3, r0
 800a446:	b2db      	uxtb	r3, r3
 800a448:	f003 0303 	and.w	r3, r3, #3
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d001      	beq.n	800a454 <tcp_receive+0xa54>
 800a450:	2301      	movs	r3, #1
 800a452:	e000      	b.n	800a456 <tcp_receive+0xa56>
 800a454:	2300      	movs	r3, #0
 800a456:	191a      	adds	r2, r3, r4
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a45c:	441a      	add	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a466:	461c      	mov	r4, r3
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	891b      	ldrh	r3, [r3, #8]
 800a46c:	461d      	mov	r5, r3
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	899b      	ldrh	r3, [r3, #12]
 800a474:	b29b      	uxth	r3, r3
 800a476:	4618      	mov	r0, r3
 800a478:	f7fa fde0 	bl	800503c <lwip_htons>
 800a47c:	4603      	mov	r3, r0
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	f003 0303 	and.w	r3, r3, #3
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <tcp_receive+0xa8c>
 800a488:	2301      	movs	r3, #1
 800a48a:	e000      	b.n	800a48e <tcp_receive+0xa8e>
 800a48c:	2300      	movs	r3, #0
 800a48e:	442b      	add	r3, r5
 800a490:	429c      	cmp	r4, r3
 800a492:	d206      	bcs.n	800a4a2 <tcp_receive+0xaa2>
 800a494:	4b1e      	ldr	r3, [pc, #120]	@ (800a510 <tcp_receive+0xb10>)
 800a496:	f240 622b 	movw	r2, #1579	@ 0x62b
 800a49a:	4923      	ldr	r1, [pc, #140]	@ (800a528 <tcp_receive+0xb28>)
 800a49c:	481e      	ldr	r0, [pc, #120]	@ (800a518 <tcp_receive+0xb18>)
 800a49e:	f004 ff09 	bl	800f2b4 <printf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	891b      	ldrh	r3, [r3, #8]
 800a4a6:	461c      	mov	r4, r3
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	899b      	ldrh	r3, [r3, #12]
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7fa fdc3 	bl	800503c <lwip_htons>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	f003 0303 	and.w	r3, r3, #3
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <tcp_receive+0xac6>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e000      	b.n	800a4c8 <tcp_receive+0xac8>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	1919      	adds	r1, r3, r4
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a4ce:	b28b      	uxth	r3, r1
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f7fc ff43 	bl	8007364 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	891b      	ldrh	r3, [r3, #8]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d028      	beq.n	800a53a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a4e8:	4b0d      	ldr	r3, [pc, #52]	@ (800a520 <tcp_receive+0xb20>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d01d      	beq.n	800a52c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a4f0:	4b0b      	ldr	r3, [pc, #44]	@ (800a520 <tcp_receive+0xb20>)
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	4610      	mov	r0, r2
 800a4fc:	f7fc f9be 	bl	800687c <pbuf_cat>
 800a500:	e018      	b.n	800a534 <tcp_receive+0xb34>
 800a502:	bf00      	nop
 800a504:	2000892e 	.word	0x2000892e
 800a508:	20008924 	.word	0x20008924
 800a50c:	20008904 	.word	0x20008904
 800a510:	08014ebc 	.word	0x08014ebc
 800a514:	0801529c 	.word	0x0801529c
 800a518:	08014f08 	.word	0x08014f08
 800a51c:	080152d8 	.word	0x080152d8
 800a520:	20008934 	.word	0x20008934
 800a524:	20008931 	.word	0x20008931
 800a528:	080152f8 	.word	0x080152f8
            } else {
              recv_data = cseg->p;
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	4a70      	ldr	r2, [pc, #448]	@ (800a6f4 <tcp_receive+0xcf4>)
 800a532:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	2200      	movs	r2, #0
 800a538:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	899b      	ldrh	r3, [r3, #12]
 800a540:	b29b      	uxth	r3, r3
 800a542:	4618      	mov	r0, r3
 800a544:	f7fa fd7a 	bl	800503c <lwip_htons>
 800a548:	4603      	mov	r3, r0
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	f003 0301 	and.w	r3, r3, #1
 800a550:	2b00      	cmp	r3, #0
 800a552:	d00d      	beq.n	800a570 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a554:	4b68      	ldr	r3, [pc, #416]	@ (800a6f8 <tcp_receive+0xcf8>)
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	f043 0320 	orr.w	r3, r3, #32
 800a55c:	b2da      	uxtb	r2, r3
 800a55e:	4b66      	ldr	r3, [pc, #408]	@ (800a6f8 <tcp_receive+0xcf8>)
 800a560:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	7d1b      	ldrb	r3, [r3, #20]
 800a566:	2b04      	cmp	r3, #4
 800a568:	d102      	bne.n	800a570 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2207      	movs	r2, #7
 800a56e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800a578:	68b8      	ldr	r0, [r7, #8]
 800a57a:	f7fd fbd4 	bl	8007d26 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a582:	2b00      	cmp	r3, #0
 800a584:	d008      	beq.n	800a598 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	685a      	ldr	r2, [r3, #4]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800a592:	429a      	cmp	r2, r3
 800a594:	f43f af43 	beq.w	800a41e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	8b5b      	ldrh	r3, [r3, #26]
 800a59c:	f003 0301 	and.w	r3, r3, #1
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d00e      	beq.n	800a5c2 <tcp_receive+0xbc2>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	8b5b      	ldrh	r3, [r3, #26]
 800a5a8:	f023 0301 	bic.w	r3, r3, #1
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	835a      	strh	r2, [r3, #26]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	8b5b      	ldrh	r3, [r3, #26]
 800a5b6:	f043 0302 	orr.w	r3, r3, #2
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a5c0:	e187      	b.n	800a8d2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	8b5b      	ldrh	r3, [r3, #26]
 800a5c6:	f043 0301 	orr.w	r3, r3, #1
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a5d0:	e17f      	b.n	800a8d2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d106      	bne.n	800a5e8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a5da:	4848      	ldr	r0, [pc, #288]	@ (800a6fc <tcp_receive+0xcfc>)
 800a5dc:	f7fd fbbc 	bl	8007d58 <tcp_seg_copy>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	675a      	str	r2, [r3, #116]	@ 0x74
 800a5e6:	e16c      	b.n	800a8c2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a5f2:	e156      	b.n	800a8a2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800a5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	685a      	ldr	r2, [r3, #4]
 800a5fa:	4b41      	ldr	r3, [pc, #260]	@ (800a700 <tcp_receive+0xd00>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d11d      	bne.n	800a63e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a602:	4b3e      	ldr	r3, [pc, #248]	@ (800a6fc <tcp_receive+0xcfc>)
 800a604:	891a      	ldrh	r2, [r3, #8]
 800a606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a608:	891b      	ldrh	r3, [r3, #8]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	f240 814e 	bls.w	800a8ac <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a610:	483a      	ldr	r0, [pc, #232]	@ (800a6fc <tcp_receive+0xcfc>)
 800a612:	f7fd fba1 	bl	8007d58 <tcp_seg_copy>
 800a616:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f000 8148 	beq.w	800a8b0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800a620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a622:	2b00      	cmp	r3, #0
 800a624:	d003      	beq.n	800a62e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a628:	697a      	ldr	r2, [r7, #20]
 800a62a:	601a      	str	r2, [r3, #0]
 800a62c:	e002      	b.n	800a634 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	697a      	ldr	r2, [r7, #20]
 800a632:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a634:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a636:	6978      	ldr	r0, [r7, #20]
 800a638:	f7ff f8de 	bl	80097f8 <tcp_oos_insert_segment>
                }
                break;
 800a63c:	e138      	b.n	800a8b0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a63e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a640:	2b00      	cmp	r3, #0
 800a642:	d117      	bne.n	800a674 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a644:	4b2e      	ldr	r3, [pc, #184]	@ (800a700 <tcp_receive+0xd00>)
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	1ad3      	subs	r3, r2, r3
 800a650:	2b00      	cmp	r3, #0
 800a652:	da57      	bge.n	800a704 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a654:	4829      	ldr	r0, [pc, #164]	@ (800a6fc <tcp_receive+0xcfc>)
 800a656:	f7fd fb7f 	bl	8007d58 <tcp_seg_copy>
 800a65a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f000 8128 	beq.w	800a8b4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	69ba      	ldr	r2, [r7, #24]
 800a668:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a66a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a66c:	69b8      	ldr	r0, [r7, #24]
 800a66e:	f7ff f8c3 	bl	80097f8 <tcp_oos_insert_segment>
                  }
                  break;
 800a672:	e11f      	b.n	800a8b4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a674:	4b22      	ldr	r3, [pc, #136]	@ (800a700 <tcp_receive+0xd00>)
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	1ad3      	subs	r3, r2, r3
 800a680:	3b01      	subs	r3, #1
 800a682:	2b00      	cmp	r3, #0
 800a684:	db3e      	blt.n	800a704 <tcp_receive+0xd04>
 800a686:	4b1e      	ldr	r3, [pc, #120]	@ (800a700 <tcp_receive+0xd00>)
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	3301      	adds	r3, #1
 800a694:	2b00      	cmp	r3, #0
 800a696:	dc35      	bgt.n	800a704 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a698:	4818      	ldr	r0, [pc, #96]	@ (800a6fc <tcp_receive+0xcfc>)
 800a69a:	f7fd fb5d 	bl	8007d58 <tcp_seg_copy>
 800a69e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f000 8108 	beq.w	800a8b8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a6a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a6b0:	8912      	ldrh	r2, [r2, #8]
 800a6b2:	441a      	add	r2, r3
 800a6b4:	4b12      	ldr	r3, [pc, #72]	@ (800a700 <tcp_receive+0xd00>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	dd12      	ble.n	800a6e4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a6be:	4b10      	ldr	r3, [pc, #64]	@ (800a700 <tcp_receive+0xd00>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	b29a      	uxth	r2, r3
 800a6d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a6d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d6:	685a      	ldr	r2, [r3, #4]
 800a6d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6da:	891b      	ldrh	r3, [r3, #8]
 800a6dc:	4619      	mov	r1, r3
 800a6de:	4610      	mov	r0, r2
 800a6e0:	f7fb fe84 	bl	80063ec <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a6e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6e6:	69fa      	ldr	r2, [r7, #28]
 800a6e8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a6ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a6ec:	69f8      	ldr	r0, [r7, #28]
 800a6ee:	f7ff f883 	bl	80097f8 <tcp_oos_insert_segment>
                  }
                  break;
 800a6f2:	e0e1      	b.n	800a8b8 <tcp_receive+0xeb8>
 800a6f4:	20008934 	.word	0x20008934
 800a6f8:	20008931 	.word	0x20008931
 800a6fc:	20008904 	.word	0x20008904
 800a700:	20008924 	.word	0x20008924
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a706:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f040 80c5 	bne.w	800a89c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a712:	4b7f      	ldr	r3, [pc, #508]	@ (800a910 <tcp_receive+0xf10>)
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f340 80bc 	ble.w	800a89c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	899b      	ldrh	r3, [r3, #12]
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7fa fc85 	bl	800503c <lwip_htons>
 800a732:	4603      	mov	r3, r0
 800a734:	b2db      	uxtb	r3, r3
 800a736:	f003 0301 	and.w	r3, r3, #1
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f040 80be 	bne.w	800a8bc <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a740:	4874      	ldr	r0, [pc, #464]	@ (800a914 <tcp_receive+0xf14>)
 800a742:	f7fd fb09 	bl	8007d58 <tcp_seg_copy>
 800a746:	4602      	mov	r2, r0
 800a748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a74a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 80b5 	beq.w	800a8c0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a75e:	8912      	ldrh	r2, [r2, #8]
 800a760:	441a      	add	r2, r3
 800a762:	4b6b      	ldr	r3, [pc, #428]	@ (800a910 <tcp_receive+0xf10>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	1ad3      	subs	r3, r2, r3
 800a768:	2b00      	cmp	r3, #0
 800a76a:	dd12      	ble.n	800a792 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a76c:	4b68      	ldr	r3, [pc, #416]	@ (800a910 <tcp_receive+0xf10>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	b29a      	uxth	r2, r3
 800a772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	b29b      	uxth	r3, r3
 800a77a:	1ad3      	subs	r3, r2, r3
 800a77c:	b29a      	uxth	r2, r3
 800a77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a780:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a784:	685a      	ldr	r2, [r3, #4]
 800a786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a788:	891b      	ldrh	r3, [r3, #8]
 800a78a:	4619      	mov	r1, r3
 800a78c:	4610      	mov	r0, r2
 800a78e:	f7fb fe2d 	bl	80063ec <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a792:	4b61      	ldr	r3, [pc, #388]	@ (800a918 <tcp_receive+0xf18>)
 800a794:	881b      	ldrh	r3, [r3, #0]
 800a796:	461a      	mov	r2, r3
 800a798:	4b5d      	ldr	r3, [pc, #372]	@ (800a910 <tcp_receive+0xf10>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	441a      	add	r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7a2:	6879      	ldr	r1, [r7, #4]
 800a7a4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a7a6:	440b      	add	r3, r1
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f340 8088 	ble.w	800a8c0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	899b      	ldrh	r3, [r3, #12]
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7fa fc3e 	bl	800503c <lwip_htons>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	f003 0301 	and.w	r3, r3, #1
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d021      	beq.n	800a810 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	899b      	ldrh	r3, [r3, #12]
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	b21b      	sxth	r3, r3
 800a7d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a7dc:	b21c      	sxth	r4, r3
 800a7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	899b      	ldrh	r3, [r3, #12]
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7fa fc27 	bl	800503c <lwip_htons>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7fa fc1f 	bl	800503c <lwip_htons>
 800a7fe:	4603      	mov	r3, r0
 800a800:	b21b      	sxth	r3, r3
 800a802:	4323      	orrs	r3, r4
 800a804:	b21a      	sxth	r2, r3
 800a806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	b292      	uxth	r2, r2
 800a80e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a814:	b29a      	uxth	r2, r3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a81a:	4413      	add	r3, r2
 800a81c:	b299      	uxth	r1, r3
 800a81e:	4b3c      	ldr	r3, [pc, #240]	@ (800a910 <tcp_receive+0xf10>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	b29a      	uxth	r2, r3
 800a824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	1a8a      	subs	r2, r1, r2
 800a82a:	b292      	uxth	r2, r2
 800a82c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a82e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	685a      	ldr	r2, [r3, #4]
 800a834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	891b      	ldrh	r3, [r3, #8]
 800a83a:	4619      	mov	r1, r3
 800a83c:	4610      	mov	r0, r2
 800a83e:	f7fb fdd5 	bl	80063ec <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	891c      	ldrh	r4, [r3, #8]
 800a848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	899b      	ldrh	r3, [r3, #12]
 800a850:	b29b      	uxth	r3, r3
 800a852:	4618      	mov	r0, r3
 800a854:	f7fa fbf2 	bl	800503c <lwip_htons>
 800a858:	4603      	mov	r3, r0
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	f003 0303 	and.w	r3, r3, #3
 800a860:	2b00      	cmp	r3, #0
 800a862:	d001      	beq.n	800a868 <tcp_receive+0xe68>
 800a864:	2301      	movs	r3, #1
 800a866:	e000      	b.n	800a86a <tcp_receive+0xe6a>
 800a868:	2300      	movs	r3, #0
 800a86a:	4423      	add	r3, r4
 800a86c:	b29a      	uxth	r2, r3
 800a86e:	4b2a      	ldr	r3, [pc, #168]	@ (800a918 <tcp_receive+0xf18>)
 800a870:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a872:	4b29      	ldr	r3, [pc, #164]	@ (800a918 <tcp_receive+0xf18>)
 800a874:	881b      	ldrh	r3, [r3, #0]
 800a876:	461a      	mov	r2, r3
 800a878:	4b25      	ldr	r3, [pc, #148]	@ (800a910 <tcp_receive+0xf10>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	441a      	add	r2, r3
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a882:	6879      	ldr	r1, [r7, #4]
 800a884:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a886:	440b      	add	r3, r1
 800a888:	429a      	cmp	r2, r3
 800a88a:	d019      	beq.n	800a8c0 <tcp_receive+0xec0>
 800a88c:	4b23      	ldr	r3, [pc, #140]	@ (800a91c <tcp_receive+0xf1c>)
 800a88e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800a892:	4923      	ldr	r1, [pc, #140]	@ (800a920 <tcp_receive+0xf20>)
 800a894:	4823      	ldr	r0, [pc, #140]	@ (800a924 <tcp_receive+0xf24>)
 800a896:	f004 fd0d 	bl	800f2b4 <printf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a89a:	e011      	b.n	800a8c0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f47f aea5 	bne.w	800a5f4 <tcp_receive+0xbf4>
 800a8aa:	e00a      	b.n	800a8c2 <tcp_receive+0xec2>
                break;
 800a8ac:	bf00      	nop
 800a8ae:	e008      	b.n	800a8c2 <tcp_receive+0xec2>
                break;
 800a8b0:	bf00      	nop
 800a8b2:	e006      	b.n	800a8c2 <tcp_receive+0xec2>
                  break;
 800a8b4:	bf00      	nop
 800a8b6:	e004      	b.n	800a8c2 <tcp_receive+0xec2>
                  break;
 800a8b8:	bf00      	nop
 800a8ba:	e002      	b.n	800a8c2 <tcp_receive+0xec2>
                  break;
 800a8bc:	bf00      	nop
 800a8be:	e000      	b.n	800a8c2 <tcp_receive+0xec2>
                break;
 800a8c0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f001 fa30 	bl	800bd28 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a8c8:	e003      	b.n	800a8d2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f001 fa2c 	bl	800bd28 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a8d0:	e01a      	b.n	800a908 <tcp_receive+0xf08>
 800a8d2:	e019      	b.n	800a908 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a8d4:	4b0e      	ldr	r3, [pc, #56]	@ (800a910 <tcp_receive+0xf10>)
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8dc:	1ad3      	subs	r3, r2, r3
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	db0a      	blt.n	800a8f8 <tcp_receive+0xef8>
 800a8e2:	4b0b      	ldr	r3, [pc, #44]	@ (800a910 <tcp_receive+0xf10>)
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ea:	6879      	ldr	r1, [r7, #4]
 800a8ec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a8ee:	440b      	add	r3, r1
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	dd07      	ble.n	800a908 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	8b5b      	ldrh	r3, [r3, #26]
 800a8fc:	f043 0302 	orr.w	r3, r3, #2
 800a900:	b29a      	uxth	r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a906:	e7ff      	b.n	800a908 <tcp_receive+0xf08>
 800a908:	bf00      	nop
 800a90a:	3750      	adds	r7, #80	@ 0x50
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bdb0      	pop	{r4, r5, r7, pc}
 800a910:	20008924 	.word	0x20008924
 800a914:	20008904 	.word	0x20008904
 800a918:	2000892e 	.word	0x2000892e
 800a91c:	08014ebc 	.word	0x08014ebc
 800a920:	08015264 	.word	0x08015264
 800a924:	08014f08 	.word	0x08014f08

0800a928 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a92e:	4b15      	ldr	r3, [pc, #84]	@ (800a984 <tcp_get_next_optbyte+0x5c>)
 800a930:	881b      	ldrh	r3, [r3, #0]
 800a932:	1c5a      	adds	r2, r3, #1
 800a934:	b291      	uxth	r1, r2
 800a936:	4a13      	ldr	r2, [pc, #76]	@ (800a984 <tcp_get_next_optbyte+0x5c>)
 800a938:	8011      	strh	r1, [r2, #0]
 800a93a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a93c:	4b12      	ldr	r3, [pc, #72]	@ (800a988 <tcp_get_next_optbyte+0x60>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d004      	beq.n	800a94e <tcp_get_next_optbyte+0x26>
 800a944:	4b11      	ldr	r3, [pc, #68]	@ (800a98c <tcp_get_next_optbyte+0x64>)
 800a946:	881b      	ldrh	r3, [r3, #0]
 800a948:	88fa      	ldrh	r2, [r7, #6]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d208      	bcs.n	800a960 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a94e:	4b10      	ldr	r3, [pc, #64]	@ (800a990 <tcp_get_next_optbyte+0x68>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	3314      	adds	r3, #20
 800a954:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a956:	88fb      	ldrh	r3, [r7, #6]
 800a958:	683a      	ldr	r2, [r7, #0]
 800a95a:	4413      	add	r3, r2
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	e00b      	b.n	800a978 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a960:	88fb      	ldrh	r3, [r7, #6]
 800a962:	b2da      	uxtb	r2, r3
 800a964:	4b09      	ldr	r3, [pc, #36]	@ (800a98c <tcp_get_next_optbyte+0x64>)
 800a966:	881b      	ldrh	r3, [r3, #0]
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	1ad3      	subs	r3, r2, r3
 800a96c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a96e:	4b06      	ldr	r3, [pc, #24]	@ (800a988 <tcp_get_next_optbyte+0x60>)
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	797b      	ldrb	r3, [r7, #5]
 800a974:	4413      	add	r3, r2
 800a976:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a978:	4618      	mov	r0, r3
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr
 800a984:	20008920 	.word	0x20008920
 800a988:	2000891c 	.word	0x2000891c
 800a98c:	2000891a 	.word	0x2000891a
 800a990:	20008914 	.word	0x20008914

0800a994 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d106      	bne.n	800a9b0 <tcp_parseopt+0x1c>
 800a9a2:	4b32      	ldr	r3, [pc, #200]	@ (800aa6c <tcp_parseopt+0xd8>)
 800a9a4:	f240 727d 	movw	r2, #1917	@ 0x77d
 800a9a8:	4931      	ldr	r1, [pc, #196]	@ (800aa70 <tcp_parseopt+0xdc>)
 800a9aa:	4832      	ldr	r0, [pc, #200]	@ (800aa74 <tcp_parseopt+0xe0>)
 800a9ac:	f004 fc82 	bl	800f2b4 <printf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a9b0:	4b31      	ldr	r3, [pc, #196]	@ (800aa78 <tcp_parseopt+0xe4>)
 800a9b2:	881b      	ldrh	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d056      	beq.n	800aa66 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a9b8:	4b30      	ldr	r3, [pc, #192]	@ (800aa7c <tcp_parseopt+0xe8>)
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	801a      	strh	r2, [r3, #0]
 800a9be:	e046      	b.n	800aa4e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800a9c0:	f7ff ffb2 	bl	800a928 <tcp_get_next_optbyte>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a9c8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d006      	beq.n	800a9dc <tcp_parseopt+0x48>
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	dc2a      	bgt.n	800aa28 <tcp_parseopt+0x94>
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d042      	beq.n	800aa5c <tcp_parseopt+0xc8>
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d038      	beq.n	800aa4c <tcp_parseopt+0xb8>
 800a9da:	e025      	b.n	800aa28 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a9dc:	f7ff ffa4 	bl	800a928 <tcp_get_next_optbyte>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b04      	cmp	r3, #4
 800a9e4:	d13c      	bne.n	800aa60 <tcp_parseopt+0xcc>
 800a9e6:	4b25      	ldr	r3, [pc, #148]	@ (800aa7c <tcp_parseopt+0xe8>)
 800a9e8:	881b      	ldrh	r3, [r3, #0]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	4a22      	ldr	r2, [pc, #136]	@ (800aa78 <tcp_parseopt+0xe4>)
 800a9ee:	8812      	ldrh	r2, [r2, #0]
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	da35      	bge.n	800aa60 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a9f4:	f7ff ff98 	bl	800a928 <tcp_get_next_optbyte>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	021b      	lsls	r3, r3, #8
 800a9fc:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a9fe:	f7ff ff93 	bl	800a928 <tcp_get_next_optbyte>
 800aa02:	4603      	mov	r3, r0
 800aa04:	461a      	mov	r2, r3
 800aa06:	89bb      	ldrh	r3, [r7, #12]
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800aa0c:	89bb      	ldrh	r3, [r7, #12]
 800aa0e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800aa12:	d804      	bhi.n	800aa1e <tcp_parseopt+0x8a>
 800aa14:	89bb      	ldrh	r3, [r7, #12]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d001      	beq.n	800aa1e <tcp_parseopt+0x8a>
 800aa1a:	89ba      	ldrh	r2, [r7, #12]
 800aa1c:	e001      	b.n	800aa22 <tcp_parseopt+0x8e>
 800aa1e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800aa26:	e012      	b.n	800aa4e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800aa28:	f7ff ff7e 	bl	800a928 <tcp_get_next_optbyte>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800aa30:	7afb      	ldrb	r3, [r7, #11]
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d916      	bls.n	800aa64 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800aa36:	7afb      	ldrb	r3, [r7, #11]
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	4b10      	ldr	r3, [pc, #64]	@ (800aa7c <tcp_parseopt+0xe8>)
 800aa3c:	881b      	ldrh	r3, [r3, #0]
 800aa3e:	4413      	add	r3, r2
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	3b02      	subs	r3, #2
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	4b0d      	ldr	r3, [pc, #52]	@ (800aa7c <tcp_parseopt+0xe8>)
 800aa48:	801a      	strh	r2, [r3, #0]
 800aa4a:	e000      	b.n	800aa4e <tcp_parseopt+0xba>
          break;
 800aa4c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800aa4e:	4b0b      	ldr	r3, [pc, #44]	@ (800aa7c <tcp_parseopt+0xe8>)
 800aa50:	881a      	ldrh	r2, [r3, #0]
 800aa52:	4b09      	ldr	r3, [pc, #36]	@ (800aa78 <tcp_parseopt+0xe4>)
 800aa54:	881b      	ldrh	r3, [r3, #0]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d3b2      	bcc.n	800a9c0 <tcp_parseopt+0x2c>
 800aa5a:	e004      	b.n	800aa66 <tcp_parseopt+0xd2>
          return;
 800aa5c:	bf00      	nop
 800aa5e:	e002      	b.n	800aa66 <tcp_parseopt+0xd2>
            return;
 800aa60:	bf00      	nop
 800aa62:	e000      	b.n	800aa66 <tcp_parseopt+0xd2>
            return;
 800aa64:	bf00      	nop
      }
    }
  }
}
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	08014ebc 	.word	0x08014ebc
 800aa70:	08015320 	.word	0x08015320
 800aa74:	08014f08 	.word	0x08014f08
 800aa78:	20008918 	.word	0x20008918
 800aa7c:	20008920 	.word	0x20008920

0800aa80 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800aa80:	b480      	push	{r7}
 800aa82:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800aa84:	4b05      	ldr	r3, [pc, #20]	@ (800aa9c <tcp_trigger_input_pcb_close+0x1c>)
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	f043 0310 	orr.w	r3, r3, #16
 800aa8c:	b2da      	uxtb	r2, r3
 800aa8e:	4b03      	ldr	r3, [pc, #12]	@ (800aa9c <tcp_trigger_input_pcb_close+0x1c>)
 800aa90:	701a      	strb	r2, [r3, #0]
}
 800aa92:	bf00      	nop
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr
 800aa9c:	20008931 	.word	0x20008931

0800aaa0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00a      	beq.n	800aac8 <tcp_route+0x28>
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	7a1b      	ldrb	r3, [r3, #8]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d006      	beq.n	800aac8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	7a1b      	ldrb	r3, [r3, #8]
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7fb faba 	bl	8006038 <netif_get_by_index>
 800aac4:	4603      	mov	r3, r0
 800aac6:	e003      	b.n	800aad0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f003 f929 	bl	800dd20 <ip4_route>
 800aace:	4603      	mov	r3, r0
  }
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800aad8:	b590      	push	{r4, r7, lr}
 800aada:	b087      	sub	sp, #28
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	603b      	str	r3, [r7, #0]
 800aae4:	4613      	mov	r3, r2
 800aae6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d105      	bne.n	800aafa <tcp_create_segment+0x22>
 800aaee:	4b43      	ldr	r3, [pc, #268]	@ (800abfc <tcp_create_segment+0x124>)
 800aaf0:	22a3      	movs	r2, #163	@ 0xa3
 800aaf2:	4943      	ldr	r1, [pc, #268]	@ (800ac00 <tcp_create_segment+0x128>)
 800aaf4:	4843      	ldr	r0, [pc, #268]	@ (800ac04 <tcp_create_segment+0x12c>)
 800aaf6:	f004 fbdd 	bl	800f2b4 <printf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d105      	bne.n	800ab0c <tcp_create_segment+0x34>
 800ab00:	4b3e      	ldr	r3, [pc, #248]	@ (800abfc <tcp_create_segment+0x124>)
 800ab02:	22a4      	movs	r2, #164	@ 0xa4
 800ab04:	4940      	ldr	r1, [pc, #256]	@ (800ac08 <tcp_create_segment+0x130>)
 800ab06:	483f      	ldr	r0, [pc, #252]	@ (800ac04 <tcp_create_segment+0x12c>)
 800ab08:	f004 fbd4 	bl	800f2b4 <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ab0c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	f003 0304 	and.w	r3, r3, #4
 800ab18:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ab1a:	2003      	movs	r0, #3
 800ab1c:	f7fa ff06 	bl	800592c <memp_malloc>
 800ab20:	6138      	str	r0, [r7, #16]
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d104      	bne.n	800ab32 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ab28:	68b8      	ldr	r0, [r7, #8]
 800ab2a:	f7fb fde5 	bl	80066f8 <pbuf_free>
    return NULL;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	e060      	b.n	800abf4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800ab38:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	891a      	ldrh	r2, [r3, #8]
 800ab4a:	7dfb      	ldrb	r3, [r7, #23]
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d205      	bcs.n	800ab5e <tcp_create_segment+0x86>
 800ab52:	4b2a      	ldr	r3, [pc, #168]	@ (800abfc <tcp_create_segment+0x124>)
 800ab54:	22b0      	movs	r2, #176	@ 0xb0
 800ab56:	492d      	ldr	r1, [pc, #180]	@ (800ac0c <tcp_create_segment+0x134>)
 800ab58:	482a      	ldr	r0, [pc, #168]	@ (800ac04 <tcp_create_segment+0x12c>)
 800ab5a:	f004 fbab 	bl	800f2b4 <printf>
  seg->len = p->tot_len - optlen;
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	891a      	ldrh	r2, [r3, #8]
 800ab62:	7dfb      	ldrb	r3, [r7, #23]
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	b29a      	uxth	r2, r3
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ab6e:	2114      	movs	r1, #20
 800ab70:	68b8      	ldr	r0, [r7, #8]
 800ab72:	f7fb fd2b 	bl	80065cc <pbuf_add_header>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d004      	beq.n	800ab86 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ab7c:	6938      	ldr	r0, [r7, #16]
 800ab7e:	f7fd f8d2 	bl	8007d26 <tcp_seg_free>
    return NULL;
 800ab82:	2300      	movs	r3, #0
 800ab84:	e036      	b.n	800abf4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	685a      	ldr	r2, [r3, #4]
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	8ada      	ldrh	r2, [r3, #22]
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	68dc      	ldr	r4, [r3, #12]
 800ab98:	4610      	mov	r0, r2
 800ab9a:	f7fa fa4f 	bl	800503c <lwip_htons>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	8b1a      	ldrh	r2, [r3, #24]
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	68dc      	ldr	r4, [r3, #12]
 800abaa:	4610      	mov	r0, r2
 800abac:	f7fa fa46 	bl	800503c <lwip_htons>
 800abb0:	4603      	mov	r3, r0
 800abb2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	68dc      	ldr	r4, [r3, #12]
 800abb8:	6838      	ldr	r0, [r7, #0]
 800abba:	f7fa fa54 	bl	8005066 <lwip_htonl>
 800abbe:	4603      	mov	r3, r0
 800abc0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800abc2:	7dfb      	ldrb	r3, [r7, #23]
 800abc4:	089b      	lsrs	r3, r3, #2
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	3305      	adds	r3, #5
 800abca:	b29b      	uxth	r3, r3
 800abcc:	031b      	lsls	r3, r3, #12
 800abce:	b29a      	uxth	r2, r3
 800abd0:	79fb      	ldrb	r3, [r7, #7]
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	4313      	orrs	r3, r2
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	68dc      	ldr	r4, [r3, #12]
 800abdc:	4610      	mov	r0, r2
 800abde:	f7fa fa2d 	bl	800503c <lwip_htons>
 800abe2:	4603      	mov	r3, r0
 800abe4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	2200      	movs	r2, #0
 800abec:	749a      	strb	r2, [r3, #18]
 800abee:	2200      	movs	r2, #0
 800abf0:	74da      	strb	r2, [r3, #19]
  return seg;
 800abf2:	693b      	ldr	r3, [r7, #16]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	371c      	adds	r7, #28
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd90      	pop	{r4, r7, pc}
 800abfc:	0801533c 	.word	0x0801533c
 800ac00:	08015370 	.word	0x08015370
 800ac04:	08015390 	.word	0x08015390
 800ac08:	080153b8 	.word	0x080153b8
 800ac0c:	080153dc 	.word	0x080153dc

0800ac10 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ac10:	b590      	push	{r4, r7, lr}
 800ac12:	b08b      	sub	sp, #44	@ 0x2c
 800ac14:	af02      	add	r7, sp, #8
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	460b      	mov	r3, r1
 800ac1a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	61fb      	str	r3, [r7, #28]
 800ac20:	2300      	movs	r3, #0
 800ac22:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ac24:	2300      	movs	r3, #0
 800ac26:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d106      	bne.n	800ac3c <tcp_split_unsent_seg+0x2c>
 800ac2e:	4b95      	ldr	r3, [pc, #596]	@ (800ae84 <tcp_split_unsent_seg+0x274>)
 800ac30:	f240 324b 	movw	r2, #843	@ 0x34b
 800ac34:	4994      	ldr	r1, [pc, #592]	@ (800ae88 <tcp_split_unsent_seg+0x278>)
 800ac36:	4895      	ldr	r0, [pc, #596]	@ (800ae8c <tcp_split_unsent_seg+0x27c>)
 800ac38:	f004 fb3c 	bl	800f2b4 <printf>

  useg = pcb->unsent;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac40:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d102      	bne.n	800ac4e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ac48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ac4c:	e116      	b.n	800ae7c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ac4e:	887b      	ldrh	r3, [r7, #2]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d109      	bne.n	800ac68 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ac54:	4b8b      	ldr	r3, [pc, #556]	@ (800ae84 <tcp_split_unsent_seg+0x274>)
 800ac56:	f240 3253 	movw	r2, #851	@ 0x353
 800ac5a:	498d      	ldr	r1, [pc, #564]	@ (800ae90 <tcp_split_unsent_seg+0x280>)
 800ac5c:	488b      	ldr	r0, [pc, #556]	@ (800ae8c <tcp_split_unsent_seg+0x27c>)
 800ac5e:	f004 fb29 	bl	800f2b4 <printf>
    return ERR_VAL;
 800ac62:	f06f 0305 	mvn.w	r3, #5
 800ac66:	e109      	b.n	800ae7c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	891b      	ldrh	r3, [r3, #8]
 800ac6c:	887a      	ldrh	r2, [r7, #2]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d301      	bcc.n	800ac76 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	e102      	b.n	800ae7c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ac7a:	887a      	ldrh	r2, [r7, #2]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d906      	bls.n	800ac8e <tcp_split_unsent_seg+0x7e>
 800ac80:	4b80      	ldr	r3, [pc, #512]	@ (800ae84 <tcp_split_unsent_seg+0x274>)
 800ac82:	f240 325b 	movw	r2, #859	@ 0x35b
 800ac86:	4983      	ldr	r1, [pc, #524]	@ (800ae94 <tcp_split_unsent_seg+0x284>)
 800ac88:	4880      	ldr	r0, [pc, #512]	@ (800ae8c <tcp_split_unsent_seg+0x27c>)
 800ac8a:	f004 fb13 	bl	800f2b4 <printf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	891b      	ldrh	r3, [r3, #8]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d106      	bne.n	800aca4 <tcp_split_unsent_seg+0x94>
 800ac96:	4b7b      	ldr	r3, [pc, #492]	@ (800ae84 <tcp_split_unsent_seg+0x274>)
 800ac98:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800ac9c:	497e      	ldr	r1, [pc, #504]	@ (800ae98 <tcp_split_unsent_seg+0x288>)
 800ac9e:	487b      	ldr	r0, [pc, #492]	@ (800ae8c <tcp_split_unsent_seg+0x27c>)
 800aca0:	f004 fb08 	bl	800f2b4 <printf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	7a9b      	ldrb	r3, [r3, #10]
 800aca8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	f003 0304 	and.w	r3, r3, #4
 800acb4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	891a      	ldrh	r2, [r3, #8]
 800acba:	887b      	ldrh	r3, [r7, #2]
 800acbc:	1ad3      	subs	r3, r2, r3
 800acbe:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800acc0:	7bbb      	ldrb	r3, [r7, #14]
 800acc2:	b29a      	uxth	r2, r3
 800acc4:	89bb      	ldrh	r3, [r7, #12]
 800acc6:	4413      	add	r3, r2
 800acc8:	b29b      	uxth	r3, r3
 800acca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800acce:	4619      	mov	r1, r3
 800acd0:	2036      	movs	r0, #54	@ 0x36
 800acd2:	f7fb fa2d 	bl	8006130 <pbuf_alloc>
 800acd6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	f000 80b7 	beq.w	800ae4e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	891a      	ldrh	r2, [r3, #8]
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	891b      	ldrh	r3, [r3, #8]
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	b29a      	uxth	r2, r3
 800acee:	887b      	ldrh	r3, [r7, #2]
 800acf0:	4413      	add	r3, r2
 800acf2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	6858      	ldr	r0, [r3, #4]
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	685a      	ldr	r2, [r3, #4]
 800acfc:	7bbb      	ldrb	r3, [r7, #14]
 800acfe:	18d1      	adds	r1, r2, r3
 800ad00:	897b      	ldrh	r3, [r7, #10]
 800ad02:	89ba      	ldrh	r2, [r7, #12]
 800ad04:	f7fb fef2 	bl	8006aec <pbuf_copy_partial>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	89bb      	ldrh	r3, [r7, #12]
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	f040 809f 	bne.w	800ae52 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	899b      	ldrh	r3, [r3, #12]
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7fa f98d 	bl	800503c <lwip_htons>
 800ad22:	4603      	mov	r3, r0
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad2a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ad30:	7efb      	ldrb	r3, [r7, #27]
 800ad32:	f003 0308 	and.w	r3, r3, #8
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d007      	beq.n	800ad4a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ad3a:	7efb      	ldrb	r3, [r7, #27]
 800ad3c:	f023 0308 	bic.w	r3, r3, #8
 800ad40:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ad42:	7ebb      	ldrb	r3, [r7, #26]
 800ad44:	f043 0308 	orr.w	r3, r3, #8
 800ad48:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ad4a:	7efb      	ldrb	r3, [r7, #27]
 800ad4c:	f003 0301 	and.w	r3, r3, #1
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d007      	beq.n	800ad64 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ad54:	7efb      	ldrb	r3, [r7, #27]
 800ad56:	f023 0301 	bic.w	r3, r3, #1
 800ad5a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ad5c:	7ebb      	ldrb	r3, [r7, #26]
 800ad5e:	f043 0301 	orr.w	r3, r3, #1
 800ad62:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7fa f97b 	bl	8005066 <lwip_htonl>
 800ad70:	4602      	mov	r2, r0
 800ad72:	887b      	ldrh	r3, [r7, #2]
 800ad74:	18d1      	adds	r1, r2, r3
 800ad76:	7eba      	ldrb	r2, [r7, #26]
 800ad78:	7bfb      	ldrb	r3, [r7, #15]
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	6939      	ldr	r1, [r7, #16]
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f7ff fea9 	bl	800aad8 <tcp_create_segment>
 800ad86:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d063      	beq.n	800ae56 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7fb fd38 	bl	8006808 <pbuf_clen>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ada2:	1a9b      	subs	r3, r3, r2
 800ada4:	b29a      	uxth	r2, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	6858      	ldr	r0, [r3, #4]
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	891a      	ldrh	r2, [r3, #8]
 800adb6:	89bb      	ldrh	r3, [r7, #12]
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	b29b      	uxth	r3, r3
 800adbc:	4619      	mov	r1, r3
 800adbe:	f7fb fb15 	bl	80063ec <pbuf_realloc>
  useg->len -= remainder;
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	891a      	ldrh	r2, [r3, #8]
 800adc6:	89bb      	ldrh	r3, [r7, #12]
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	b29a      	uxth	r2, r3
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	899b      	ldrh	r3, [r3, #12]
 800add6:	b29c      	uxth	r4, r3
 800add8:	7efb      	ldrb	r3, [r7, #27]
 800adda:	b29b      	uxth	r3, r3
 800addc:	4618      	mov	r0, r3
 800adde:	f7fa f92d 	bl	800503c <lwip_htons>
 800ade2:	4603      	mov	r3, r0
 800ade4:	461a      	mov	r2, r3
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	4322      	orrs	r2, r4
 800adec:	b292      	uxth	r2, r2
 800adee:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7fb fd07 	bl	8006808 <pbuf_clen>
 800adfa:	4603      	mov	r3, r0
 800adfc:	461a      	mov	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ae04:	4413      	add	r3, r2
 800ae06:	b29a      	uxth	r2, r3
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ae0e:	69fb      	ldr	r3, [r7, #28]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7fb fcf8 	bl	8006808 <pbuf_clen>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ae22:	4413      	add	r3, r2
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	69fa      	ldr	r2, [r7, #28]
 800ae38:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d103      	bne.n	800ae4a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	e016      	b.n	800ae7c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ae4e:	bf00      	nop
 800ae50:	e002      	b.n	800ae58 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ae52:	bf00      	nop
 800ae54:	e000      	b.n	800ae58 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ae56:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d006      	beq.n	800ae6c <tcp_split_unsent_seg+0x25c>
 800ae5e:	4b09      	ldr	r3, [pc, #36]	@ (800ae84 <tcp_split_unsent_seg+0x274>)
 800ae60:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800ae64:	490d      	ldr	r1, [pc, #52]	@ (800ae9c <tcp_split_unsent_seg+0x28c>)
 800ae66:	4809      	ldr	r0, [pc, #36]	@ (800ae8c <tcp_split_unsent_seg+0x27c>)
 800ae68:	f004 fa24 	bl	800f2b4 <printf>
  if (p != NULL) {
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d002      	beq.n	800ae78 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ae72:	6938      	ldr	r0, [r7, #16]
 800ae74:	f7fb fc40 	bl	80066f8 <pbuf_free>
  }

  return ERR_MEM;
 800ae78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3724      	adds	r7, #36	@ 0x24
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd90      	pop	{r4, r7, pc}
 800ae84:	0801533c 	.word	0x0801533c
 800ae88:	080156d0 	.word	0x080156d0
 800ae8c:	08015390 	.word	0x08015390
 800ae90:	080156f4 	.word	0x080156f4
 800ae94:	08015718 	.word	0x08015718
 800ae98:	08015728 	.word	0x08015728
 800ae9c:	08015738 	.word	0x08015738

0800aea0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800aea0:	b590      	push	{r4, r7, lr}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d106      	bne.n	800aebc <tcp_send_fin+0x1c>
 800aeae:	4b21      	ldr	r3, [pc, #132]	@ (800af34 <tcp_send_fin+0x94>)
 800aeb0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800aeb4:	4920      	ldr	r1, [pc, #128]	@ (800af38 <tcp_send_fin+0x98>)
 800aeb6:	4821      	ldr	r0, [pc, #132]	@ (800af3c <tcp_send_fin+0x9c>)
 800aeb8:	f004 f9fc 	bl	800f2b4 <printf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d02e      	beq.n	800af22 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aec8:	60fb      	str	r3, [r7, #12]
 800aeca:	e002      	b.n	800aed2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1f8      	bne.n	800aecc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	899b      	ldrh	r3, [r3, #12]
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fa f8aa 	bl	800503c <lwip_htons>
 800aee8:	4603      	mov	r3, r0
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	f003 0307 	and.w	r3, r3, #7
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d116      	bne.n	800af22 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	899b      	ldrh	r3, [r3, #12]
 800aefa:	b29c      	uxth	r4, r3
 800aefc:	2001      	movs	r0, #1
 800aefe:	f7fa f89d 	bl	800503c <lwip_htons>
 800af02:	4603      	mov	r3, r0
 800af04:	461a      	mov	r2, r3
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	4322      	orrs	r2, r4
 800af0c:	b292      	uxth	r2, r2
 800af0e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	8b5b      	ldrh	r3, [r3, #26]
 800af14:	f043 0320 	orr.w	r3, r3, #32
 800af18:	b29a      	uxth	r2, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800af1e:	2300      	movs	r3, #0
 800af20:	e004      	b.n	800af2c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800af22:	2101      	movs	r1, #1
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 f80b 	bl	800af40 <tcp_enqueue_flags>
 800af2a:	4603      	mov	r3, r0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3714      	adds	r7, #20
 800af30:	46bd      	mov	sp, r7
 800af32:	bd90      	pop	{r4, r7, pc}
 800af34:	0801533c 	.word	0x0801533c
 800af38:	08015744 	.word	0x08015744
 800af3c:	08015390 	.word	0x08015390

0800af40 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b08a      	sub	sp, #40	@ 0x28
 800af44:	af02      	add	r7, sp, #8
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	460b      	mov	r3, r1
 800af4a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800af4c:	2300      	movs	r3, #0
 800af4e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800af54:	78fb      	ldrb	r3, [r7, #3]
 800af56:	f003 0303 	and.w	r3, r3, #3
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d106      	bne.n	800af6c <tcp_enqueue_flags+0x2c>
 800af5e:	4b67      	ldr	r3, [pc, #412]	@ (800b0fc <tcp_enqueue_flags+0x1bc>)
 800af60:	f240 4211 	movw	r2, #1041	@ 0x411
 800af64:	4966      	ldr	r1, [pc, #408]	@ (800b100 <tcp_enqueue_flags+0x1c0>)
 800af66:	4867      	ldr	r0, [pc, #412]	@ (800b104 <tcp_enqueue_flags+0x1c4>)
 800af68:	f004 f9a4 	bl	800f2b4 <printf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d106      	bne.n	800af80 <tcp_enqueue_flags+0x40>
 800af72:	4b62      	ldr	r3, [pc, #392]	@ (800b0fc <tcp_enqueue_flags+0x1bc>)
 800af74:	f240 4213 	movw	r2, #1043	@ 0x413
 800af78:	4963      	ldr	r1, [pc, #396]	@ (800b108 <tcp_enqueue_flags+0x1c8>)
 800af7a:	4862      	ldr	r0, [pc, #392]	@ (800b104 <tcp_enqueue_flags+0x1c4>)
 800af7c:	f004 f99a 	bl	800f2b4 <printf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800af80:	78fb      	ldrb	r3, [r7, #3]
 800af82:	f003 0302 	and.w	r3, r3, #2
 800af86:	2b00      	cmp	r3, #0
 800af88:	d001      	beq.n	800af8e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800af8a:	2301      	movs	r3, #1
 800af8c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800af8e:	7ffb      	ldrb	r3, [r7, #31]
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	b2db      	uxtb	r3, r3
 800af94:	f003 0304 	and.w	r3, r3, #4
 800af98:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800af9a:	7dfb      	ldrb	r3, [r7, #23]
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800afa2:	4619      	mov	r1, r3
 800afa4:	2036      	movs	r0, #54	@ 0x36
 800afa6:	f7fb f8c3 	bl	8006130 <pbuf_alloc>
 800afaa:	6138      	str	r0, [r7, #16]
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d109      	bne.n	800afc6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	8b5b      	ldrh	r3, [r3, #26]
 800afb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afba:	b29a      	uxth	r2, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800afc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800afc4:	e095      	b.n	800b0f2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	895a      	ldrh	r2, [r3, #10]
 800afca:	7dfb      	ldrb	r3, [r7, #23]
 800afcc:	b29b      	uxth	r3, r3
 800afce:	429a      	cmp	r2, r3
 800afd0:	d206      	bcs.n	800afe0 <tcp_enqueue_flags+0xa0>
 800afd2:	4b4a      	ldr	r3, [pc, #296]	@ (800b0fc <tcp_enqueue_flags+0x1bc>)
 800afd4:	f240 4239 	movw	r2, #1081	@ 0x439
 800afd8:	494c      	ldr	r1, [pc, #304]	@ (800b10c <tcp_enqueue_flags+0x1cc>)
 800afda:	484a      	ldr	r0, [pc, #296]	@ (800b104 <tcp_enqueue_flags+0x1c4>)
 800afdc:	f004 f96a 	bl	800f2b4 <printf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800afe4:	78fa      	ldrb	r2, [r7, #3]
 800afe6:	7ffb      	ldrb	r3, [r7, #31]
 800afe8:	9300      	str	r3, [sp, #0]
 800afea:	460b      	mov	r3, r1
 800afec:	6939      	ldr	r1, [r7, #16]
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f7ff fd72 	bl	800aad8 <tcp_create_segment>
 800aff4:	60f8      	str	r0, [r7, #12]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d109      	bne.n	800b010 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	8b5b      	ldrh	r3, [r3, #26]
 800b000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b004:	b29a      	uxth	r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b00a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b00e:	e070      	b.n	800b0f2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	f003 0303 	and.w	r3, r3, #3
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d006      	beq.n	800b02a <tcp_enqueue_flags+0xea>
 800b01c:	4b37      	ldr	r3, [pc, #220]	@ (800b0fc <tcp_enqueue_flags+0x1bc>)
 800b01e:	f240 4242 	movw	r2, #1090	@ 0x442
 800b022:	493b      	ldr	r1, [pc, #236]	@ (800b110 <tcp_enqueue_flags+0x1d0>)
 800b024:	4837      	ldr	r0, [pc, #220]	@ (800b104 <tcp_enqueue_flags+0x1c4>)
 800b026:	f004 f945 	bl	800f2b4 <printf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	891b      	ldrh	r3, [r3, #8]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d006      	beq.n	800b040 <tcp_enqueue_flags+0x100>
 800b032:	4b32      	ldr	r3, [pc, #200]	@ (800b0fc <tcp_enqueue_flags+0x1bc>)
 800b034:	f240 4243 	movw	r2, #1091	@ 0x443
 800b038:	4936      	ldr	r1, [pc, #216]	@ (800b114 <tcp_enqueue_flags+0x1d4>)
 800b03a:	4832      	ldr	r0, [pc, #200]	@ (800b104 <tcp_enqueue_flags+0x1c4>)
 800b03c:	f004 f93a 	bl	800f2b4 <printf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b044:	2b00      	cmp	r3, #0
 800b046:	d103      	bne.n	800b050 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b04e:	e00d      	b.n	800b06c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b054:	61bb      	str	r3, [r7, #24]
 800b056:	e002      	b.n	800b05e <tcp_enqueue_flags+0x11e>
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	61bb      	str	r3, [r7, #24]
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d1f8      	bne.n	800b058 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b074:	78fb      	ldrb	r3, [r7, #3]
 800b076:	f003 0302 	and.w	r3, r3, #2
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d104      	bne.n	800b088 <tcp_enqueue_flags+0x148>
 800b07e:	78fb      	ldrb	r3, [r7, #3]
 800b080:	f003 0301 	and.w	r3, r3, #1
 800b084:	2b00      	cmp	r3, #0
 800b086:	d004      	beq.n	800b092 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b08c:	1c5a      	adds	r2, r3, #1
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b092:	78fb      	ldrb	r3, [r7, #3]
 800b094:	f003 0301 	and.w	r3, r3, #1
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d006      	beq.n	800b0aa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	8b5b      	ldrh	r3, [r3, #26]
 800b0a0:	f043 0320 	orr.w	r3, r3, #32
 800b0a4:	b29a      	uxth	r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7fb fbaa 	bl	8006808 <pbuf_clen>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b0be:	4413      	add	r3, r2
 800b0c0:	b29a      	uxth	r2, r3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00e      	beq.n	800b0f0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d10a      	bne.n	800b0f0 <tcp_enqueue_flags+0x1b0>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d106      	bne.n	800b0f0 <tcp_enqueue_flags+0x1b0>
 800b0e2:	4b06      	ldr	r3, [pc, #24]	@ (800b0fc <tcp_enqueue_flags+0x1bc>)
 800b0e4:	f240 4265 	movw	r2, #1125	@ 0x465
 800b0e8:	490b      	ldr	r1, [pc, #44]	@ (800b118 <tcp_enqueue_flags+0x1d8>)
 800b0ea:	4806      	ldr	r0, [pc, #24]	@ (800b104 <tcp_enqueue_flags+0x1c4>)
 800b0ec:	f004 f8e2 	bl	800f2b4 <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b0f0:	2300      	movs	r3, #0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3720      	adds	r7, #32
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	0801533c 	.word	0x0801533c
 800b100:	08015760 	.word	0x08015760
 800b104:	08015390 	.word	0x08015390
 800b108:	080157b8 	.word	0x080157b8
 800b10c:	080157d8 	.word	0x080157d8
 800b110:	08015814 	.word	0x08015814
 800b114:	0801582c 	.word	0x0801582c
 800b118:	08015858 	.word	0x08015858

0800b11c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b11c:	b5b0      	push	{r4, r5, r7, lr}
 800b11e:	b08a      	sub	sp, #40	@ 0x28
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d106      	bne.n	800b138 <tcp_output+0x1c>
 800b12a:	4b8a      	ldr	r3, [pc, #552]	@ (800b354 <tcp_output+0x238>)
 800b12c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800b130:	4989      	ldr	r1, [pc, #548]	@ (800b358 <tcp_output+0x23c>)
 800b132:	488a      	ldr	r0, [pc, #552]	@ (800b35c <tcp_output+0x240>)
 800b134:	f004 f8be 	bl	800f2b4 <printf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	7d1b      	ldrb	r3, [r3, #20]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d106      	bne.n	800b14e <tcp_output+0x32>
 800b140:	4b84      	ldr	r3, [pc, #528]	@ (800b354 <tcp_output+0x238>)
 800b142:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800b146:	4986      	ldr	r1, [pc, #536]	@ (800b360 <tcp_output+0x244>)
 800b148:	4884      	ldr	r0, [pc, #528]	@ (800b35c <tcp_output+0x240>)
 800b14a:	f004 f8b3 	bl	800f2b4 <printf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b14e:	4b85      	ldr	r3, [pc, #532]	@ (800b364 <tcp_output+0x248>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	429a      	cmp	r2, r3
 800b156:	d101      	bne.n	800b15c <tcp_output+0x40>
    return ERR_OK;
 800b158:	2300      	movs	r3, #0
 800b15a:	e1ce      	b.n	800b4fa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b168:	4293      	cmp	r3, r2
 800b16a:	bf28      	it	cs
 800b16c:	4613      	movcs	r3, r2
 800b16e:	b29b      	uxth	r3, r3
 800b170:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b176:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800b178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d10b      	bne.n	800b196 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	8b5b      	ldrh	r3, [r3, #26]
 800b182:	f003 0302 	and.w	r3, r3, #2
 800b186:	2b00      	cmp	r3, #0
 800b188:	f000 81aa 	beq.w	800b4e0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 fdcb 	bl	800bd28 <tcp_send_empty_ack>
 800b192:	4603      	mov	r3, r0
 800b194:	e1b1      	b.n	800b4fa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b196:	6879      	ldr	r1, [r7, #4]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	3304      	adds	r3, #4
 800b19c:	461a      	mov	r2, r3
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f7ff fc7e 	bl	800aaa0 <tcp_route>
 800b1a4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d102      	bne.n	800b1b2 <tcp_output+0x96>
    return ERR_RTE;
 800b1ac:	f06f 0303 	mvn.w	r3, #3
 800b1b0:	e1a3      	b.n	800b4fa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d003      	beq.n	800b1c0 <tcp_output+0xa4>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d111      	bne.n	800b1e4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d002      	beq.n	800b1cc <tcp_output+0xb0>
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	3304      	adds	r3, #4
 800b1ca:	e000      	b.n	800b1ce <tcp_output+0xb2>
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d102      	bne.n	800b1dc <tcp_output+0xc0>
      return ERR_RTE;
 800b1d6:	f06f 0303 	mvn.w	r3, #3
 800b1da:	e18e      	b.n	800b4fa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7f9 ff3b 	bl	8005066 <lwip_htonl>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1f6:	1ad3      	subs	r3, r2, r3
 800b1f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1fa:	8912      	ldrh	r2, [r2, #8]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	69ba      	ldr	r2, [r7, #24]
 800b200:	429a      	cmp	r2, r3
 800b202:	d227      	bcs.n	800b254 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b20a:	461a      	mov	r2, r3
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	4293      	cmp	r3, r2
 800b210:	d114      	bne.n	800b23c <tcp_output+0x120>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b216:	2b00      	cmp	r3, #0
 800b218:	d110      	bne.n	800b23c <tcp_output+0x120>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b220:	2b00      	cmp	r3, #0
 800b222:	d10b      	bne.n	800b23c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2201      	movs	r2, #1
 800b230:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2200      	movs	r2, #0
 800b238:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	8b5b      	ldrh	r3, [r3, #26]
 800b240:	f003 0302 	and.w	r3, r3, #2
 800b244:	2b00      	cmp	r3, #0
 800b246:	f000 814d 	beq.w	800b4e4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 fd6c 	bl	800bd28 <tcp_send_empty_ack>
 800b250:	4603      	mov	r3, r0
 800b252:	e152      	b.n	800b4fa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b260:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b262:	6a3b      	ldr	r3, [r7, #32]
 800b264:	2b00      	cmp	r3, #0
 800b266:	f000 811c 	beq.w	800b4a2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b26a:	e002      	b.n	800b272 <tcp_output+0x156>
 800b26c:	6a3b      	ldr	r3, [r7, #32]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	623b      	str	r3, [r7, #32]
 800b272:	6a3b      	ldr	r3, [r7, #32]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1f8      	bne.n	800b26c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b27a:	e112      	b.n	800b4a2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	899b      	ldrh	r3, [r3, #12]
 800b282:	b29b      	uxth	r3, r3
 800b284:	4618      	mov	r0, r3
 800b286:	f7f9 fed9 	bl	800503c <lwip_htons>
 800b28a:	4603      	mov	r3, r0
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	f003 0304 	and.w	r3, r3, #4
 800b292:	2b00      	cmp	r3, #0
 800b294:	d006      	beq.n	800b2a4 <tcp_output+0x188>
 800b296:	4b2f      	ldr	r3, [pc, #188]	@ (800b354 <tcp_output+0x238>)
 800b298:	f240 5236 	movw	r2, #1334	@ 0x536
 800b29c:	4932      	ldr	r1, [pc, #200]	@ (800b368 <tcp_output+0x24c>)
 800b29e:	482f      	ldr	r0, [pc, #188]	@ (800b35c <tcp_output+0x240>)
 800b2a0:	f004 f808 	bl	800f2b4 <printf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d01f      	beq.n	800b2ec <tcp_output+0x1d0>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	8b5b      	ldrh	r3, [r3, #26]
 800b2b0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d119      	bne.n	800b2ec <tcp_output+0x1d0>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00b      	beq.n	800b2d8 <tcp_output+0x1bc>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d110      	bne.n	800b2ec <tcp_output+0x1d0>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2ce:	891a      	ldrh	r2, [r3, #8]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d209      	bcs.n	800b2ec <tcp_output+0x1d0>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d004      	beq.n	800b2ec <tcp_output+0x1d0>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b2e8:	2b08      	cmp	r3, #8
 800b2ea:	d901      	bls.n	800b2f0 <tcp_output+0x1d4>
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e000      	b.n	800b2f2 <tcp_output+0x1d6>
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d106      	bne.n	800b304 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	8b5b      	ldrh	r3, [r3, #26]
 800b2fa:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f000 80e4 	beq.w	800b4cc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	7d1b      	ldrb	r3, [r3, #20]
 800b308:	2b02      	cmp	r3, #2
 800b30a:	d00d      	beq.n	800b328 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	899b      	ldrh	r3, [r3, #12]
 800b312:	b29c      	uxth	r4, r3
 800b314:	2010      	movs	r0, #16
 800b316:	f7f9 fe91 	bl	800503c <lwip_htons>
 800b31a:	4603      	mov	r3, r0
 800b31c:	461a      	mov	r2, r3
 800b31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	4322      	orrs	r2, r4
 800b324:	b292      	uxth	r2, r2
 800b326:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b328:	697a      	ldr	r2, [r7, #20]
 800b32a:	6879      	ldr	r1, [r7, #4]
 800b32c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b32e:	f000 f909 	bl	800b544 <tcp_output_segment>
 800b332:	4603      	mov	r3, r0
 800b334:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d016      	beq.n	800b36c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	8b5b      	ldrh	r3, [r3, #26]
 800b342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b346:	b29a      	uxth	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	835a      	strh	r2, [r3, #26]
      return err;
 800b34c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b350:	e0d3      	b.n	800b4fa <tcp_output+0x3de>
 800b352:	bf00      	nop
 800b354:	0801533c 	.word	0x0801533c
 800b358:	08015880 	.word	0x08015880
 800b35c:	08015390 	.word	0x08015390
 800b360:	08015898 	.word	0x08015898
 800b364:	20008938 	.word	0x20008938
 800b368:	080158c0 	.word	0x080158c0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	7d1b      	ldrb	r3, [r3, #20]
 800b378:	2b02      	cmp	r3, #2
 800b37a:	d006      	beq.n	800b38a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	8b5b      	ldrh	r3, [r3, #26]
 800b380:	f023 0303 	bic.w	r3, r3, #3
 800b384:	b29a      	uxth	r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	4618      	mov	r0, r3
 800b392:	f7f9 fe68 	bl	8005066 <lwip_htonl>
 800b396:	4604      	mov	r4, r0
 800b398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b39a:	891b      	ldrh	r3, [r3, #8]
 800b39c:	461d      	mov	r5, r3
 800b39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a0:	68db      	ldr	r3, [r3, #12]
 800b3a2:	899b      	ldrh	r3, [r3, #12]
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7f9 fe48 	bl	800503c <lwip_htons>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	f003 0303 	and.w	r3, r3, #3
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d001      	beq.n	800b3bc <tcp_output+0x2a0>
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e000      	b.n	800b3be <tcp_output+0x2a2>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	442b      	add	r3, r5
 800b3c0:	4423      	add	r3, r4
 800b3c2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	1ad3      	subs	r3, r2, r3
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	da02      	bge.n	800b3d6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d8:	891b      	ldrh	r3, [r3, #8]
 800b3da:	461c      	mov	r4, r3
 800b3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	899b      	ldrh	r3, [r3, #12]
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7f9 fe29 	bl	800503c <lwip_htons>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	f003 0303 	and.w	r3, r3, #3
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d001      	beq.n	800b3fa <tcp_output+0x2de>
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e000      	b.n	800b3fc <tcp_output+0x2e0>
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	4423      	add	r3, r4
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d049      	beq.n	800b496 <tcp_output+0x37a>
      seg->next = NULL;
 800b402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b404:	2200      	movs	r2, #0
 800b406:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d105      	bne.n	800b41c <tcp_output+0x300>
        pcb->unacked = seg;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b414:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800b416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b418:	623b      	str	r3, [r7, #32]
 800b41a:	e03f      	b.n	800b49c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	4618      	mov	r0, r3
 800b424:	f7f9 fe1f 	bl	8005066 <lwip_htonl>
 800b428:	4604      	mov	r4, r0
 800b42a:	6a3b      	ldr	r3, [r7, #32]
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	4618      	mov	r0, r3
 800b432:	f7f9 fe18 	bl	8005066 <lwip_htonl>
 800b436:	4603      	mov	r3, r0
 800b438:	1ae3      	subs	r3, r4, r3
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	da24      	bge.n	800b488 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	3370      	adds	r3, #112	@ 0x70
 800b442:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b444:	e002      	b.n	800b44c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d011      	beq.n	800b478 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7f9 fe02 	bl	8005066 <lwip_htonl>
 800b462:	4604      	mov	r4, r0
 800b464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7f9 fdfb 	bl	8005066 <lwip_htonl>
 800b470:	4603      	mov	r3, r0
 800b472:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b474:	2b00      	cmp	r3, #0
 800b476:	dbe6      	blt.n	800b446 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b47e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b484:	601a      	str	r2, [r3, #0]
 800b486:	e009      	b.n	800b49c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b488:	6a3b      	ldr	r3, [r7, #32]
 800b48a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b48c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b48e:	6a3b      	ldr	r3, [r7, #32]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	623b      	str	r3, [r7, #32]
 800b494:	e002      	b.n	800b49c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b496:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b498:	f7fc fc45 	bl	8007d26 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4a0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800b4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d012      	beq.n	800b4ce <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7f9 fdd9 	bl	8005066 <lwip_htonl>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4ba:	1ad3      	subs	r3, r2, r3
 800b4bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4be:	8912      	ldrh	r2, [r2, #8]
 800b4c0:	4413      	add	r3, r2
  while (seg != NULL &&
 800b4c2:	69ba      	ldr	r2, [r7, #24]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	f4bf aed9 	bcs.w	800b27c <tcp_output+0x160>
 800b4ca:	e000      	b.n	800b4ce <tcp_output+0x3b2>
      break;
 800b4cc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d108      	bne.n	800b4e8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800b4de:	e004      	b.n	800b4ea <tcp_output+0x3ce>
    goto output_done;
 800b4e0:	bf00      	nop
 800b4e2:	e002      	b.n	800b4ea <tcp_output+0x3ce>
    goto output_done;
 800b4e4:	bf00      	nop
 800b4e6:	e000      	b.n	800b4ea <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b4e8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	8b5b      	ldrh	r3, [r3, #26]
 800b4ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b4f2:	b29a      	uxth	r2, r3
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b4f8:	2300      	movs	r3, #0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3728      	adds	r7, #40	@ 0x28
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bdb0      	pop	{r4, r5, r7, pc}
 800b502:	bf00      	nop

0800b504 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d106      	bne.n	800b520 <tcp_output_segment_busy+0x1c>
 800b512:	4b09      	ldr	r3, [pc, #36]	@ (800b538 <tcp_output_segment_busy+0x34>)
 800b514:	f240 529a 	movw	r2, #1434	@ 0x59a
 800b518:	4908      	ldr	r1, [pc, #32]	@ (800b53c <tcp_output_segment_busy+0x38>)
 800b51a:	4809      	ldr	r0, [pc, #36]	@ (800b540 <tcp_output_segment_busy+0x3c>)
 800b51c:	f003 feca 	bl	800f2b4 <printf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	7b9b      	ldrb	r3, [r3, #14]
 800b526:	2b01      	cmp	r3, #1
 800b528:	d001      	beq.n	800b52e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b52a:	2301      	movs	r3, #1
 800b52c:	e000      	b.n	800b530 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b52e:	2300      	movs	r3, #0
}
 800b530:	4618      	mov	r0, r3
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	0801533c 	.word	0x0801533c
 800b53c:	080158d8 	.word	0x080158d8
 800b540:	08015390 	.word	0x08015390

0800b544 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b544:	b5b0      	push	{r4, r5, r7, lr}
 800b546:	b08c      	sub	sp, #48	@ 0x30
 800b548:	af04      	add	r7, sp, #16
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d106      	bne.n	800b564 <tcp_output_segment+0x20>
 800b556:	4b64      	ldr	r3, [pc, #400]	@ (800b6e8 <tcp_output_segment+0x1a4>)
 800b558:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800b55c:	4963      	ldr	r1, [pc, #396]	@ (800b6ec <tcp_output_segment+0x1a8>)
 800b55e:	4864      	ldr	r0, [pc, #400]	@ (800b6f0 <tcp_output_segment+0x1ac>)
 800b560:	f003 fea8 	bl	800f2b4 <printf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d106      	bne.n	800b578 <tcp_output_segment+0x34>
 800b56a:	4b5f      	ldr	r3, [pc, #380]	@ (800b6e8 <tcp_output_segment+0x1a4>)
 800b56c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800b570:	4960      	ldr	r1, [pc, #384]	@ (800b6f4 <tcp_output_segment+0x1b0>)
 800b572:	485f      	ldr	r0, [pc, #380]	@ (800b6f0 <tcp_output_segment+0x1ac>)
 800b574:	f003 fe9e 	bl	800f2b4 <printf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d106      	bne.n	800b58c <tcp_output_segment+0x48>
 800b57e:	4b5a      	ldr	r3, [pc, #360]	@ (800b6e8 <tcp_output_segment+0x1a4>)
 800b580:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800b584:	495c      	ldr	r1, [pc, #368]	@ (800b6f8 <tcp_output_segment+0x1b4>)
 800b586:	485a      	ldr	r0, [pc, #360]	@ (800b6f0 <tcp_output_segment+0x1ac>)
 800b588:	f003 fe94 	bl	800f2b4 <printf>

  if (tcp_output_segment_busy(seg)) {
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f7ff ffb9 	bl	800b504 <tcp_output_segment_busy>
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d001      	beq.n	800b59c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b598:	2300      	movs	r3, #0
 800b59a:	e0a1      	b.n	800b6e0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	68dc      	ldr	r4, [r3, #12]
 800b5a4:	4610      	mov	r0, r2
 800b5a6:	f7f9 fd5e 	bl	8005066 <lwip_htonl>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	68dc      	ldr	r4, [r3, #12]
 800b5b6:	4610      	mov	r0, r2
 800b5b8:	f7f9 fd40 	bl	800503c <lwip_htons>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5c4:	68ba      	ldr	r2, [r7, #8]
 800b5c6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800b5c8:	441a      	add	r2, r3
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	3314      	adds	r3, #20
 800b5d4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	7a9b      	ldrb	r3, [r3, #10]
 800b5da:	f003 0301 	and.w	r3, r3, #1
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d015      	beq.n	800b60e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	3304      	adds	r3, #4
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	6879      	ldr	r1, [r7, #4]
 800b5ea:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800b5ee:	f7fc fe91 	bl	8008314 <tcp_eff_send_mss_netif>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b5f6:	8b7b      	ldrh	r3, [r7, #26]
 800b5f8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7f9 fd32 	bl	8005066 <lwip_htonl>
 800b602:	4602      	mov	r2, r0
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	3304      	adds	r3, #4
 800b60c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b614:	2b00      	cmp	r3, #0
 800b616:	da02      	bge.n	800b61e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	2200      	movs	r2, #0
 800b61c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10c      	bne.n	800b640 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b626:	4b35      	ldr	r3, [pc, #212]	@ (800b6fc <tcp_output_segment+0x1b8>)
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	4618      	mov	r0, r3
 800b636:	f7f9 fd16 	bl	8005066 <lwip_htonl>
 800b63a:	4602      	mov	r2, r0
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	68da      	ldr	r2, [r3, #12]
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	1ad3      	subs	r3, r2, r3
 800b64c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	8959      	ldrh	r1, [r3, #10]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	8b3a      	ldrh	r2, [r7, #24]
 800b65a:	1a8a      	subs	r2, r1, r2
 800b65c:	b292      	uxth	r2, r2
 800b65e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	8919      	ldrh	r1, [r3, #8]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	8b3a      	ldrh	r2, [r7, #24]
 800b66c:	1a8a      	subs	r2, r1, r2
 800b66e:	b292      	uxth	r2, r2
 800b670:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	68d2      	ldr	r2, [r2, #12]
 800b67a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	2200      	movs	r2, #0
 800b682:	741a      	strb	r2, [r3, #16]
 800b684:	2200      	movs	r2, #0
 800b686:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	68da      	ldr	r2, [r3, #12]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	7a9b      	ldrb	r3, [r3, #10]
 800b690:	f003 0301 	and.w	r3, r3, #1
 800b694:	2b00      	cmp	r3, #0
 800b696:	d001      	beq.n	800b69c <tcp_output_segment+0x158>
 800b698:	2318      	movs	r3, #24
 800b69a:	e000      	b.n	800b69e <tcp_output_segment+0x15a>
 800b69c:	2314      	movs	r3, #20
 800b69e:	4413      	add	r3, r2
 800b6a0:	69fa      	ldr	r2, [r7, #28]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d006      	beq.n	800b6b4 <tcp_output_segment+0x170>
 800b6a6:	4b10      	ldr	r3, [pc, #64]	@ (800b6e8 <tcp_output_segment+0x1a4>)
 800b6a8:	f240 621c 	movw	r2, #1564	@ 0x61c
 800b6ac:	4914      	ldr	r1, [pc, #80]	@ (800b700 <tcp_output_segment+0x1bc>)
 800b6ae:	4810      	ldr	r0, [pc, #64]	@ (800b6f0 <tcp_output_segment+0x1ac>)
 800b6b0:	f003 fe00 	bl	800f2b4 <printf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6858      	ldr	r0, [r3, #4]
 800b6b8:	68b9      	ldr	r1, [r7, #8]
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	1d1c      	adds	r4, r3, #4
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	7add      	ldrb	r5, [r3, #11]
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	7a9b      	ldrb	r3, [r3, #10]
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	9202      	str	r2, [sp, #8]
 800b6ca:	2206      	movs	r2, #6
 800b6cc:	9201      	str	r2, [sp, #4]
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	462b      	mov	r3, r5
 800b6d2:	4622      	mov	r2, r4
 800b6d4:	f002 fce2 	bl	800e09c <ip4_output_if>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b6dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3720      	adds	r7, #32
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bdb0      	pop	{r4, r5, r7, pc}
 800b6e8:	0801533c 	.word	0x0801533c
 800b6ec:	08015900 	.word	0x08015900
 800b6f0:	08015390 	.word	0x08015390
 800b6f4:	08015920 	.word	0x08015920
 800b6f8:	08015940 	.word	0x08015940
 800b6fc:	200088ec 	.word	0x200088ec
 800b700:	08015964 	.word	0x08015964

0800b704 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b704:	b5b0      	push	{r4, r5, r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d106      	bne.n	800b720 <tcp_rexmit_rto_prepare+0x1c>
 800b712:	4b31      	ldr	r3, [pc, #196]	@ (800b7d8 <tcp_rexmit_rto_prepare+0xd4>)
 800b714:	f240 6263 	movw	r2, #1635	@ 0x663
 800b718:	4930      	ldr	r1, [pc, #192]	@ (800b7dc <tcp_rexmit_rto_prepare+0xd8>)
 800b71a:	4831      	ldr	r0, [pc, #196]	@ (800b7e0 <tcp_rexmit_rto_prepare+0xdc>)
 800b71c:	f003 fdca 	bl	800f2b4 <printf>

  if (pcb->unacked == NULL) {
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b724:	2b00      	cmp	r3, #0
 800b726:	d102      	bne.n	800b72e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b728:	f06f 0305 	mvn.w	r3, #5
 800b72c:	e050      	b.n	800b7d0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b732:	60fb      	str	r3, [r7, #12]
 800b734:	e00b      	b.n	800b74e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f7ff fee4 	bl	800b504 <tcp_output_segment_busy>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d002      	beq.n	800b748 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b742:	f06f 0305 	mvn.w	r3, #5
 800b746:	e043      	b.n	800b7d0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	60fb      	str	r3, [r7, #12]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d1ef      	bne.n	800b736 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f7ff fed4 	bl	800b504 <tcp_output_segment_busy>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d002      	beq.n	800b768 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b762:	f06f 0305 	mvn.w	r3, #5
 800b766:	e033      	b.n	800b7d0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2200      	movs	r2, #0
 800b77c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	8b5b      	ldrh	r3, [r3, #26]
 800b782:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b786:	b29a      	uxth	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	4618      	mov	r0, r3
 800b794:	f7f9 fc67 	bl	8005066 <lwip_htonl>
 800b798:	4604      	mov	r4, r0
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	891b      	ldrh	r3, [r3, #8]
 800b79e:	461d      	mov	r5, r3
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	899b      	ldrh	r3, [r3, #12]
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7f9 fc47 	bl	800503c <lwip_htons>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	f003 0303 	and.w	r3, r3, #3
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d001      	beq.n	800b7be <tcp_rexmit_rto_prepare+0xba>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e000      	b.n	800b7c0 <tcp_rexmit_rto_prepare+0xbc>
 800b7be:	2300      	movs	r3, #0
 800b7c0:	442b      	add	r3, r5
 800b7c2:	18e2      	adds	r2, r4, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800b7ce:	2300      	movs	r3, #0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bdb0      	pop	{r4, r5, r7, pc}
 800b7d8:	0801533c 	.word	0x0801533c
 800b7dc:	08015978 	.word	0x08015978
 800b7e0:	08015390 	.word	0x08015390

0800b7e4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d106      	bne.n	800b800 <tcp_rexmit_rto_commit+0x1c>
 800b7f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b828 <tcp_rexmit_rto_commit+0x44>)
 800b7f4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800b7f8:	490c      	ldr	r1, [pc, #48]	@ (800b82c <tcp_rexmit_rto_commit+0x48>)
 800b7fa:	480d      	ldr	r0, [pc, #52]	@ (800b830 <tcp_rexmit_rto_commit+0x4c>)
 800b7fc:	f003 fd5a 	bl	800f2b4 <printf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b806:	2bff      	cmp	r3, #255	@ 0xff
 800b808:	d007      	beq.n	800b81a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b810:	3301      	adds	r3, #1
 800b812:	b2da      	uxtb	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f7ff fc7e 	bl	800b11c <tcp_output>
}
 800b820:	bf00      	nop
 800b822:	3708      	adds	r7, #8
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}
 800b828:	0801533c 	.word	0x0801533c
 800b82c:	0801599c 	.word	0x0801599c
 800b830:	08015390 	.word	0x08015390

0800b834 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d106      	bne.n	800b850 <tcp_rexmit_rto+0x1c>
 800b842:	4b0a      	ldr	r3, [pc, #40]	@ (800b86c <tcp_rexmit_rto+0x38>)
 800b844:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800b848:	4909      	ldr	r1, [pc, #36]	@ (800b870 <tcp_rexmit_rto+0x3c>)
 800b84a:	480a      	ldr	r0, [pc, #40]	@ (800b874 <tcp_rexmit_rto+0x40>)
 800b84c:	f003 fd32 	bl	800f2b4 <printf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f7ff ff57 	bl	800b704 <tcp_rexmit_rto_prepare>
 800b856:	4603      	mov	r3, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d102      	bne.n	800b862 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f7ff ffc1 	bl	800b7e4 <tcp_rexmit_rto_commit>
  }
}
 800b862:	bf00      	nop
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	0801533c 	.word	0x0801533c
 800b870:	080159c0 	.word	0x080159c0
 800b874:	08015390 	.word	0x08015390

0800b878 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b878:	b590      	push	{r4, r7, lr}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d106      	bne.n	800b894 <tcp_rexmit+0x1c>
 800b886:	4b2f      	ldr	r3, [pc, #188]	@ (800b944 <tcp_rexmit+0xcc>)
 800b888:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800b88c:	492e      	ldr	r1, [pc, #184]	@ (800b948 <tcp_rexmit+0xd0>)
 800b88e:	482f      	ldr	r0, [pc, #188]	@ (800b94c <tcp_rexmit+0xd4>)
 800b890:	f003 fd10 	bl	800f2b4 <printf>

  if (pcb->unacked == NULL) {
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d102      	bne.n	800b8a2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b89c:	f06f 0305 	mvn.w	r3, #5
 800b8a0:	e04c      	b.n	800b93c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8a6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b8a8:	68b8      	ldr	r0, [r7, #8]
 800b8aa:	f7ff fe2b 	bl	800b504 <tcp_output_segment_busy>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d002      	beq.n	800b8ba <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b8b4:	f06f 0305 	mvn.w	r3, #5
 800b8b8:	e040      	b.n	800b93c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	336c      	adds	r3, #108	@ 0x6c
 800b8c6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b8c8:	e002      	b.n	800b8d0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d011      	beq.n	800b8fc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	68db      	ldr	r3, [r3, #12]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7f9 fbc0 	bl	8005066 <lwip_htonl>
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7f9 fbb9 	bl	8005066 <lwip_htonl>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	dbe6      	blt.n	800b8ca <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	68ba      	ldr	r2, [r7, #8]
 800b908:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d103      	bne.n	800b91a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b920:	2bff      	cmp	r3, #255	@ 0xff
 800b922:	d007      	beq.n	800b934 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b92a:	3301      	adds	r3, #1
 800b92c:	b2da      	uxtb	r2, r3
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b93a:	2300      	movs	r3, #0
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3714      	adds	r7, #20
 800b940:	46bd      	mov	sp, r7
 800b942:	bd90      	pop	{r4, r7, pc}
 800b944:	0801533c 	.word	0x0801533c
 800b948:	080159dc 	.word	0x080159dc
 800b94c:	08015390 	.word	0x08015390

0800b950 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d106      	bne.n	800b96c <tcp_rexmit_fast+0x1c>
 800b95e:	4b2a      	ldr	r3, [pc, #168]	@ (800ba08 <tcp_rexmit_fast+0xb8>)
 800b960:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800b964:	4929      	ldr	r1, [pc, #164]	@ (800ba0c <tcp_rexmit_fast+0xbc>)
 800b966:	482a      	ldr	r0, [pc, #168]	@ (800ba10 <tcp_rexmit_fast+0xc0>)
 800b968:	f003 fca4 	bl	800f2b4 <printf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b970:	2b00      	cmp	r3, #0
 800b972:	d045      	beq.n	800ba00 <tcp_rexmit_fast+0xb0>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	8b5b      	ldrh	r3, [r3, #26]
 800b978:	f003 0304 	and.w	r3, r3, #4
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d13f      	bne.n	800ba00 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f7ff ff79 	bl	800b878 <tcp_rexmit>
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d139      	bne.n	800ba00 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b998:	4293      	cmp	r3, r2
 800b99a:	bf28      	it	cs
 800b99c:	4613      	movcs	r3, r2
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	da00      	bge.n	800b9a6 <tcp_rexmit_fast+0x56>
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	105b      	asrs	r3, r3, #1
 800b9a8:	b29a      	uxth	r2, r3
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b9bc:	005b      	lsls	r3, r3, #1
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d206      	bcs.n	800b9d0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b9c6:	005b      	lsls	r3, r3, #1
 800b9c8:	b29a      	uxth	r2, r3
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b9da:	4619      	mov	r1, r3
 800b9dc:	0049      	lsls	r1, r1, #1
 800b9de:	440b      	add	r3, r1
 800b9e0:	b29b      	uxth	r3, r3
 800b9e2:	4413      	add	r3, r2
 800b9e4:	b29a      	uxth	r2, r3
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	8b5b      	ldrh	r3, [r3, #26]
 800b9f0:	f043 0304 	orr.w	r3, r3, #4
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800ba00:	bf00      	nop
 800ba02:	3708      	adds	r7, #8
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	0801533c 	.word	0x0801533c
 800ba0c:	080159f4 	.word	0x080159f4
 800ba10:	08015390 	.word	0x08015390

0800ba14 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b086      	sub	sp, #24
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	607b      	str	r3, [r7, #4]
 800ba1e:	460b      	mov	r3, r1
 800ba20:	817b      	strh	r3, [r7, #10]
 800ba22:	4613      	mov	r3, r2
 800ba24:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ba26:	897a      	ldrh	r2, [r7, #10]
 800ba28:	893b      	ldrh	r3, [r7, #8]
 800ba2a:	4413      	add	r3, r2
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	3314      	adds	r3, #20
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ba36:	4619      	mov	r1, r3
 800ba38:	2022      	movs	r0, #34	@ 0x22
 800ba3a:	f7fa fb79 	bl	8006130 <pbuf_alloc>
 800ba3e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d04d      	beq.n	800bae2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ba46:	897b      	ldrh	r3, [r7, #10]
 800ba48:	3313      	adds	r3, #19
 800ba4a:	697a      	ldr	r2, [r7, #20]
 800ba4c:	8952      	ldrh	r2, [r2, #10]
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	db06      	blt.n	800ba60 <tcp_output_alloc_header_common+0x4c>
 800ba52:	4b26      	ldr	r3, [pc, #152]	@ (800baec <tcp_output_alloc_header_common+0xd8>)
 800ba54:	f240 7223 	movw	r2, #1827	@ 0x723
 800ba58:	4925      	ldr	r1, [pc, #148]	@ (800baf0 <tcp_output_alloc_header_common+0xdc>)
 800ba5a:	4826      	ldr	r0, [pc, #152]	@ (800baf4 <tcp_output_alloc_header_common+0xe0>)
 800ba5c:	f003 fc2a 	bl	800f2b4 <printf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ba66:	8c3b      	ldrh	r3, [r7, #32]
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7f9 fae7 	bl	800503c <lwip_htons>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	461a      	mov	r2, r3
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ba76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7f9 fadf 	bl	800503c <lwip_htons>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	461a      	mov	r2, r3
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ba8c:	68f8      	ldr	r0, [r7, #12]
 800ba8e:	f7f9 faea 	bl	8005066 <lwip_htonl>
 800ba92:	4602      	mov	r2, r0
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ba98:	897b      	ldrh	r3, [r7, #10]
 800ba9a:	089b      	lsrs	r3, r3, #2
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	3305      	adds	r3, #5
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	031b      	lsls	r3, r3, #12
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800baaa:	b29b      	uxth	r3, r3
 800baac:	4313      	orrs	r3, r2
 800baae:	b29b      	uxth	r3, r3
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7f9 fac3 	bl	800503c <lwip_htons>
 800bab6:	4603      	mov	r3, r0
 800bab8:	461a      	mov	r2, r3
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800babe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7f9 fabb 	bl	800503c <lwip_htons>
 800bac6:	4603      	mov	r3, r0
 800bac8:	461a      	mov	r2, r3
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	2200      	movs	r2, #0
 800bad2:	741a      	strb	r2, [r3, #16]
 800bad4:	2200      	movs	r2, #0
 800bad6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	2200      	movs	r2, #0
 800badc:	749a      	strb	r2, [r3, #18]
 800bade:	2200      	movs	r2, #0
 800bae0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800bae2:	697b      	ldr	r3, [r7, #20]
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3718      	adds	r7, #24
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	0801533c 	.word	0x0801533c
 800baf0:	08015a14 	.word	0x08015a14
 800baf4:	08015390 	.word	0x08015390

0800baf8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800baf8:	b5b0      	push	{r4, r5, r7, lr}
 800bafa:	b08a      	sub	sp, #40	@ 0x28
 800bafc:	af04      	add	r7, sp, #16
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	607b      	str	r3, [r7, #4]
 800bb02:	460b      	mov	r3, r1
 800bb04:	817b      	strh	r3, [r7, #10]
 800bb06:	4613      	mov	r3, r2
 800bb08:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d106      	bne.n	800bb1e <tcp_output_alloc_header+0x26>
 800bb10:	4b15      	ldr	r3, [pc, #84]	@ (800bb68 <tcp_output_alloc_header+0x70>)
 800bb12:	f240 7242 	movw	r2, #1858	@ 0x742
 800bb16:	4915      	ldr	r1, [pc, #84]	@ (800bb6c <tcp_output_alloc_header+0x74>)
 800bb18:	4815      	ldr	r0, [pc, #84]	@ (800bb70 <tcp_output_alloc_header+0x78>)
 800bb1a:	f003 fbcb 	bl	800f2b4 <printf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	8adb      	ldrh	r3, [r3, #22]
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	8b12      	ldrh	r2, [r2, #24]
 800bb2a:	68f9      	ldr	r1, [r7, #12]
 800bb2c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800bb2e:	893d      	ldrh	r5, [r7, #8]
 800bb30:	897c      	ldrh	r4, [r7, #10]
 800bb32:	9103      	str	r1, [sp, #12]
 800bb34:	2110      	movs	r1, #16
 800bb36:	9102      	str	r1, [sp, #8]
 800bb38:	9201      	str	r2, [sp, #4]
 800bb3a:	9300      	str	r3, [sp, #0]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	462a      	mov	r2, r5
 800bb40:	4621      	mov	r1, r4
 800bb42:	f7ff ff67 	bl	800ba14 <tcp_output_alloc_header_common>
 800bb46:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d006      	beq.n	800bb5c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800bb56:	441a      	add	r2, r3
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800bb5c:	697b      	ldr	r3, [r7, #20]
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3718      	adds	r7, #24
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bdb0      	pop	{r4, r5, r7, pc}
 800bb66:	bf00      	nop
 800bb68:	0801533c 	.word	0x0801533c
 800bb6c:	08015a44 	.word	0x08015a44
 800bb70:	08015390 	.word	0x08015390

0800bb74 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b088      	sub	sp, #32
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	4611      	mov	r1, r2
 800bb80:	461a      	mov	r2, r3
 800bb82:	460b      	mov	r3, r1
 800bb84:	71fb      	strb	r3, [r7, #7]
 800bb86:	4613      	mov	r3, r2
 800bb88:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d106      	bne.n	800bba2 <tcp_output_fill_options+0x2e>
 800bb94:	4b12      	ldr	r3, [pc, #72]	@ (800bbe0 <tcp_output_fill_options+0x6c>)
 800bb96:	f240 7256 	movw	r2, #1878	@ 0x756
 800bb9a:	4912      	ldr	r1, [pc, #72]	@ (800bbe4 <tcp_output_fill_options+0x70>)
 800bb9c:	4812      	ldr	r0, [pc, #72]	@ (800bbe8 <tcp_output_fill_options+0x74>)
 800bb9e:	f003 fb89 	bl	800f2b4 <printf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800bba8:	69bb      	ldr	r3, [r7, #24]
 800bbaa:	3314      	adds	r3, #20
 800bbac:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800bbae:	8bfb      	ldrh	r3, [r7, #30]
 800bbb0:	009b      	lsls	r3, r3, #2
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	79fb      	ldrb	r3, [r7, #7]
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	f003 0304 	and.w	r3, r3, #4
 800bbbc:	4413      	add	r3, r2
 800bbbe:	3314      	adds	r3, #20
 800bbc0:	69ba      	ldr	r2, [r7, #24]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	697a      	ldr	r2, [r7, #20]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d006      	beq.n	800bbd8 <tcp_output_fill_options+0x64>
 800bbca:	4b05      	ldr	r3, [pc, #20]	@ (800bbe0 <tcp_output_fill_options+0x6c>)
 800bbcc:	f240 7275 	movw	r2, #1909	@ 0x775
 800bbd0:	4906      	ldr	r1, [pc, #24]	@ (800bbec <tcp_output_fill_options+0x78>)
 800bbd2:	4805      	ldr	r0, [pc, #20]	@ (800bbe8 <tcp_output_fill_options+0x74>)
 800bbd4:	f003 fb6e 	bl	800f2b4 <printf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800bbd8:	bf00      	nop
 800bbda:	3720      	adds	r7, #32
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}
 800bbe0:	0801533c 	.word	0x0801533c
 800bbe4:	08015a6c 	.word	0x08015a6c
 800bbe8:	08015390 	.word	0x08015390
 800bbec:	08015964 	.word	0x08015964

0800bbf0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b08a      	sub	sp, #40	@ 0x28
 800bbf4:	af04      	add	r7, sp, #16
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
 800bbfc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d106      	bne.n	800bc12 <tcp_output_control_segment+0x22>
 800bc04:	4b1c      	ldr	r3, [pc, #112]	@ (800bc78 <tcp_output_control_segment+0x88>)
 800bc06:	f240 7287 	movw	r2, #1927	@ 0x787
 800bc0a:	491c      	ldr	r1, [pc, #112]	@ (800bc7c <tcp_output_control_segment+0x8c>)
 800bc0c:	481c      	ldr	r0, [pc, #112]	@ (800bc80 <tcp_output_control_segment+0x90>)
 800bc0e:	f003 fb51 	bl	800f2b4 <printf>

  netif = tcp_route(pcb, src, dst);
 800bc12:	683a      	ldr	r2, [r7, #0]
 800bc14:	6879      	ldr	r1, [r7, #4]
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f7fe ff42 	bl	800aaa0 <tcp_route>
 800bc1c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d102      	bne.n	800bc2a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800bc24:	23fc      	movs	r3, #252	@ 0xfc
 800bc26:	75fb      	strb	r3, [r7, #23]
 800bc28:	e01c      	b.n	800bc64 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d006      	beq.n	800bc3e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	7adb      	ldrb	r3, [r3, #11]
 800bc34:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	7a9b      	ldrb	r3, [r3, #10]
 800bc3a:	757b      	strb	r3, [r7, #21]
 800bc3c:	e003      	b.n	800bc46 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800bc3e:	23ff      	movs	r3, #255	@ 0xff
 800bc40:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800bc42:	2300      	movs	r3, #0
 800bc44:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800bc46:	7dba      	ldrb	r2, [r7, #22]
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	9302      	str	r3, [sp, #8]
 800bc4c:	2306      	movs	r3, #6
 800bc4e:	9301      	str	r3, [sp, #4]
 800bc50:	7d7b      	ldrb	r3, [r7, #21]
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	4613      	mov	r3, r2
 800bc56:	683a      	ldr	r2, [r7, #0]
 800bc58:	6879      	ldr	r1, [r7, #4]
 800bc5a:	68b8      	ldr	r0, [r7, #8]
 800bc5c:	f002 fa1e 	bl	800e09c <ip4_output_if>
 800bc60:	4603      	mov	r3, r0
 800bc62:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800bc64:	68b8      	ldr	r0, [r7, #8]
 800bc66:	f7fa fd47 	bl	80066f8 <pbuf_free>
  return err;
 800bc6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3718      	adds	r7, #24
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	0801533c 	.word	0x0801533c
 800bc7c:	08015a94 	.word	0x08015a94
 800bc80:	08015390 	.word	0x08015390

0800bc84 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800bc84:	b590      	push	{r4, r7, lr}
 800bc86:	b08b      	sub	sp, #44	@ 0x2c
 800bc88:	af04      	add	r7, sp, #16
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	607a      	str	r2, [r7, #4]
 800bc90:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d106      	bne.n	800bca6 <tcp_rst+0x22>
 800bc98:	4b1f      	ldr	r3, [pc, #124]	@ (800bd18 <tcp_rst+0x94>)
 800bc9a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800bc9e:	491f      	ldr	r1, [pc, #124]	@ (800bd1c <tcp_rst+0x98>)
 800bca0:	481f      	ldr	r0, [pc, #124]	@ (800bd20 <tcp_rst+0x9c>)
 800bca2:	f003 fb07 	bl	800f2b4 <printf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800bca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d106      	bne.n	800bcba <tcp_rst+0x36>
 800bcac:	4b1a      	ldr	r3, [pc, #104]	@ (800bd18 <tcp_rst+0x94>)
 800bcae:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800bcb2:	491c      	ldr	r1, [pc, #112]	@ (800bd24 <tcp_rst+0xa0>)
 800bcb4:	481a      	ldr	r0, [pc, #104]	@ (800bd20 <tcp_rst+0x9c>)
 800bcb6:	f003 fafd 	bl	800f2b4 <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bcba:	2300      	movs	r3, #0
 800bcbc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800bcbe:	f246 0308 	movw	r3, #24584	@ 0x6008
 800bcc2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800bcc4:	7dfb      	ldrb	r3, [r7, #23]
 800bcc6:	b29c      	uxth	r4, r3
 800bcc8:	68b8      	ldr	r0, [r7, #8]
 800bcca:	f7f9 f9cc 	bl	8005066 <lwip_htonl>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	8abb      	ldrh	r3, [r7, #20]
 800bcd2:	9303      	str	r3, [sp, #12]
 800bcd4:	2314      	movs	r3, #20
 800bcd6:	9302      	str	r3, [sp, #8]
 800bcd8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800bcda:	9301      	str	r3, [sp, #4]
 800bcdc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bcde:	9300      	str	r3, [sp, #0]
 800bce0:	4613      	mov	r3, r2
 800bce2:	2200      	movs	r2, #0
 800bce4:	4621      	mov	r1, r4
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f7ff fe94 	bl	800ba14 <tcp_output_alloc_header_common>
 800bcec:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d00c      	beq.n	800bd0e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bcf4:	7dfb      	ldrb	r3, [r7, #23]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	6939      	ldr	r1, [r7, #16]
 800bcfa:	68f8      	ldr	r0, [r7, #12]
 800bcfc:	f7ff ff3a 	bl	800bb74 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800bd00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	6939      	ldr	r1, [r7, #16]
 800bd06:	68f8      	ldr	r0, [r7, #12]
 800bd08:	f7ff ff72 	bl	800bbf0 <tcp_output_control_segment>
 800bd0c:	e000      	b.n	800bd10 <tcp_rst+0x8c>
    return;
 800bd0e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800bd10:	371c      	adds	r7, #28
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd90      	pop	{r4, r7, pc}
 800bd16:	bf00      	nop
 800bd18:	0801533c 	.word	0x0801533c
 800bd1c:	08015ac0 	.word	0x08015ac0
 800bd20:	08015390 	.word	0x08015390
 800bd24:	08015adc 	.word	0x08015adc

0800bd28 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800bd28:	b590      	push	{r4, r7, lr}
 800bd2a:	b087      	sub	sp, #28
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800bd30:	2300      	movs	r3, #0
 800bd32:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800bd34:	2300      	movs	r3, #0
 800bd36:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d106      	bne.n	800bd4c <tcp_send_empty_ack+0x24>
 800bd3e:	4b28      	ldr	r3, [pc, #160]	@ (800bde0 <tcp_send_empty_ack+0xb8>)
 800bd40:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800bd44:	4927      	ldr	r1, [pc, #156]	@ (800bde4 <tcp_send_empty_ack+0xbc>)
 800bd46:	4828      	ldr	r0, [pc, #160]	@ (800bde8 <tcp_send_empty_ack+0xc0>)
 800bd48:	f003 fab4 	bl	800f2b4 <printf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bd4c:	7dfb      	ldrb	r3, [r7, #23]
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	f003 0304 	and.w	r3, r3, #4
 800bd56:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800bd58:	7d7b      	ldrb	r3, [r7, #21]
 800bd5a:	b29c      	uxth	r4, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7f9 f980 	bl	8005066 <lwip_htonl>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2200      	movs	r2, #0
 800bd6a:	4621      	mov	r1, r4
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f7ff fec3 	bl	800baf8 <tcp_output_alloc_header>
 800bd72:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d109      	bne.n	800bd8e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	8b5b      	ldrh	r3, [r3, #26]
 800bd7e:	f043 0303 	orr.w	r3, r3, #3
 800bd82:	b29a      	uxth	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800bd88:	f06f 0301 	mvn.w	r3, #1
 800bd8c:	e023      	b.n	800bdd6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800bd8e:	7dbb      	ldrb	r3, [r7, #22]
 800bd90:	7dfa      	ldrb	r2, [r7, #23]
 800bd92:	6939      	ldr	r1, [r7, #16]
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f7ff feed 	bl	800bb74 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	3304      	adds	r3, #4
 800bda0:	6939      	ldr	r1, [r7, #16]
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f7ff ff24 	bl	800bbf0 <tcp_output_control_segment>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800bdac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d007      	beq.n	800bdc4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	8b5b      	ldrh	r3, [r3, #26]
 800bdb8:	f043 0303 	orr.w	r3, r3, #3
 800bdbc:	b29a      	uxth	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	835a      	strh	r2, [r3, #26]
 800bdc2:	e006      	b.n	800bdd2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	8b5b      	ldrh	r3, [r3, #26]
 800bdc8:	f023 0303 	bic.w	r3, r3, #3
 800bdcc:	b29a      	uxth	r2, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800bdd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	371c      	adds	r7, #28
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd90      	pop	{r4, r7, pc}
 800bdde:	bf00      	nop
 800bde0:	0801533c 	.word	0x0801533c
 800bde4:	08015af8 	.word	0x08015af8
 800bde8:	08015390 	.word	0x08015390

0800bdec <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800bdec:	b590      	push	{r4, r7, lr}
 800bdee:	b087      	sub	sp, #28
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d106      	bne.n	800be0c <tcp_keepalive+0x20>
 800bdfe:	4b18      	ldr	r3, [pc, #96]	@ (800be60 <tcp_keepalive+0x74>)
 800be00:	f640 0224 	movw	r2, #2084	@ 0x824
 800be04:	4917      	ldr	r1, [pc, #92]	@ (800be64 <tcp_keepalive+0x78>)
 800be06:	4818      	ldr	r0, [pc, #96]	@ (800be68 <tcp_keepalive+0x7c>)
 800be08:	f003 fa54 	bl	800f2b4 <printf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800be0c:	7dfb      	ldrb	r3, [r7, #23]
 800be0e:	b29c      	uxth	r4, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be14:	3b01      	subs	r3, #1
 800be16:	4618      	mov	r0, r3
 800be18:	f7f9 f925 	bl	8005066 <lwip_htonl>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2200      	movs	r2, #0
 800be20:	4621      	mov	r1, r4
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f7ff fe68 	bl	800baf8 <tcp_output_alloc_header>
 800be28:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d102      	bne.n	800be36 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800be30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800be34:	e010      	b.n	800be58 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800be36:	7dfb      	ldrb	r3, [r7, #23]
 800be38:	2200      	movs	r2, #0
 800be3a:	6939      	ldr	r1, [r7, #16]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f7ff fe99 	bl	800bb74 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	3304      	adds	r3, #4
 800be48:	6939      	ldr	r1, [r7, #16]
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f7ff fed0 	bl	800bbf0 <tcp_output_control_segment>
 800be50:	4603      	mov	r3, r0
 800be52:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800be54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be58:	4618      	mov	r0, r3
 800be5a:	371c      	adds	r7, #28
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd90      	pop	{r4, r7, pc}
 800be60:	0801533c 	.word	0x0801533c
 800be64:	08015b18 	.word	0x08015b18
 800be68:	08015390 	.word	0x08015390

0800be6c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800be6c:	b590      	push	{r4, r7, lr}
 800be6e:	b08b      	sub	sp, #44	@ 0x2c
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800be74:	2300      	movs	r3, #0
 800be76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d106      	bne.n	800be8e <tcp_zero_window_probe+0x22>
 800be80:	4b4c      	ldr	r3, [pc, #304]	@ (800bfb4 <tcp_zero_window_probe+0x148>)
 800be82:	f640 024f 	movw	r2, #2127	@ 0x84f
 800be86:	494c      	ldr	r1, [pc, #304]	@ (800bfb8 <tcp_zero_window_probe+0x14c>)
 800be88:	484c      	ldr	r0, [pc, #304]	@ (800bfbc <tcp_zero_window_probe+0x150>)
 800be8a:	f003 fa13 	bl	800f2b4 <printf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be92:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800be94:	6a3b      	ldr	r3, [r7, #32]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d101      	bne.n	800be9e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800be9a:	2300      	movs	r3, #0
 800be9c:	e086      	b.n	800bfac <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800bea4:	2bff      	cmp	r3, #255	@ 0xff
 800bea6:	d007      	beq.n	800beb8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800beae:	3301      	adds	r3, #1
 800beb0:	b2da      	uxtb	r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800beb8:	6a3b      	ldr	r3, [r7, #32]
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	899b      	ldrh	r3, [r3, #12]
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7f9 f8bb 	bl	800503c <lwip_htons>
 800bec6:	4603      	mov	r3, r0
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	f003 0301 	and.w	r3, r3, #1
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d005      	beq.n	800bede <tcp_zero_window_probe+0x72>
 800bed2:	6a3b      	ldr	r3, [r7, #32]
 800bed4:	891b      	ldrh	r3, [r3, #8]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d101      	bne.n	800bede <tcp_zero_window_probe+0x72>
 800beda:	2301      	movs	r3, #1
 800bedc:	e000      	b.n	800bee0 <tcp_zero_window_probe+0x74>
 800bede:	2300      	movs	r3, #0
 800bee0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800bee2:	7ffb      	ldrb	r3, [r7, #31]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	bf0c      	ite	eq
 800bee8:	2301      	moveq	r3, #1
 800beea:	2300      	movne	r3, #0
 800beec:	b2db      	uxtb	r3, r3
 800beee:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bef0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bef4:	b299      	uxth	r1, r3
 800bef6:	6a3b      	ldr	r3, [r7, #32]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	8bba      	ldrh	r2, [r7, #28]
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f7ff fdfa 	bl	800baf8 <tcp_output_alloc_header>
 800bf04:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d102      	bne.n	800bf12 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800bf0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bf10:	e04c      	b.n	800bfac <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800bf18:	7ffb      	ldrb	r3, [r7, #31]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d011      	beq.n	800bf42 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	899b      	ldrh	r3, [r3, #12]
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	b21b      	sxth	r3, r3
 800bf26:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bf2a:	b21c      	sxth	r4, r3
 800bf2c:	2011      	movs	r0, #17
 800bf2e:	f7f9 f885 	bl	800503c <lwip_htons>
 800bf32:	4603      	mov	r3, r0
 800bf34:	b21b      	sxth	r3, r3
 800bf36:	4323      	orrs	r3, r4
 800bf38:	b21b      	sxth	r3, r3
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	819a      	strh	r2, [r3, #12]
 800bf40:	e010      	b.n	800bf64 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	3314      	adds	r3, #20
 800bf48:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800bf4a:	6a3b      	ldr	r3, [r7, #32]
 800bf4c:	6858      	ldr	r0, [r3, #4]
 800bf4e:	6a3b      	ldr	r3, [r7, #32]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	891a      	ldrh	r2, [r3, #8]
 800bf54:	6a3b      	ldr	r3, [r7, #32]
 800bf56:	891b      	ldrh	r3, [r3, #8]
 800bf58:	1ad3      	subs	r3, r2, r3
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	6939      	ldr	r1, [r7, #16]
 800bf60:	f7fa fdc4 	bl	8006aec <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bf64:	6a3b      	ldr	r3, [r7, #32]
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7f9 f87b 	bl	8005066 <lwip_htonl>
 800bf70:	4603      	mov	r3, r0
 800bf72:	3301      	adds	r3, #1
 800bf74:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	1ad3      	subs	r3, r2, r3
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	da02      	bge.n	800bf88 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	68fa      	ldr	r2, [r7, #12]
 800bf86:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bf88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	69b9      	ldr	r1, [r7, #24]
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f7ff fdef 	bl	800bb74 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	3304      	adds	r3, #4
 800bf9c:	69b9      	ldr	r1, [r7, #24]
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f7ff fe26 	bl	800bbf0 <tcp_output_control_segment>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bfa8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	372c      	adds	r7, #44	@ 0x2c
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd90      	pop	{r4, r7, pc}
 800bfb4:	0801533c 	.word	0x0801533c
 800bfb8:	08015b34 	.word	0x08015b34
 800bfbc:	08015390 	.word	0x08015390

0800bfc0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800bfc8:	f7fa ff10 	bl	8006dec <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bfcc:	4b0a      	ldr	r3, [pc, #40]	@ (800bff8 <tcpip_tcp_timer+0x38>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d103      	bne.n	800bfdc <tcpip_tcp_timer+0x1c>
 800bfd4:	4b09      	ldr	r3, [pc, #36]	@ (800bffc <tcpip_tcp_timer+0x3c>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d005      	beq.n	800bfe8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bfdc:	2200      	movs	r2, #0
 800bfde:	4908      	ldr	r1, [pc, #32]	@ (800c000 <tcpip_tcp_timer+0x40>)
 800bfe0:	20fa      	movs	r0, #250	@ 0xfa
 800bfe2:	f000 f8f3 	bl	800c1cc <sys_timeout>
 800bfe6:	e003      	b.n	800bff0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800bfe8:	4b06      	ldr	r3, [pc, #24]	@ (800c004 <tcpip_tcp_timer+0x44>)
 800bfea:	2200      	movs	r2, #0
 800bfec:	601a      	str	r2, [r3, #0]
  }
}
 800bfee:	bf00      	nop
 800bff0:	bf00      	nop
 800bff2:	3708      	adds	r7, #8
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	200088f8 	.word	0x200088f8
 800bffc:	200088fc 	.word	0x200088fc
 800c000:	0800bfc1 	.word	0x0800bfc1
 800c004:	20008944 	.word	0x20008944

0800c008 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c00c:	4b0a      	ldr	r3, [pc, #40]	@ (800c038 <tcp_timer_needed+0x30>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d10f      	bne.n	800c034 <tcp_timer_needed+0x2c>
 800c014:	4b09      	ldr	r3, [pc, #36]	@ (800c03c <tcp_timer_needed+0x34>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d103      	bne.n	800c024 <tcp_timer_needed+0x1c>
 800c01c:	4b08      	ldr	r3, [pc, #32]	@ (800c040 <tcp_timer_needed+0x38>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d007      	beq.n	800c034 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c024:	4b04      	ldr	r3, [pc, #16]	@ (800c038 <tcp_timer_needed+0x30>)
 800c026:	2201      	movs	r2, #1
 800c028:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c02a:	2200      	movs	r2, #0
 800c02c:	4905      	ldr	r1, [pc, #20]	@ (800c044 <tcp_timer_needed+0x3c>)
 800c02e:	20fa      	movs	r0, #250	@ 0xfa
 800c030:	f000 f8cc 	bl	800c1cc <sys_timeout>
  }
}
 800c034:	bf00      	nop
 800c036:	bd80      	pop	{r7, pc}
 800c038:	20008944 	.word	0x20008944
 800c03c:	200088f8 	.word	0x200088f8
 800c040:	200088fc 	.word	0x200088fc
 800c044:	0800bfc1 	.word	0x0800bfc1

0800c048 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b086      	sub	sp, #24
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	60b9      	str	r1, [r7, #8]
 800c052:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c054:	2006      	movs	r0, #6
 800c056:	f7f9 fc69 	bl	800592c <memp_malloc>
 800c05a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d109      	bne.n	800c076 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d151      	bne.n	800c10c <sys_timeout_abs+0xc4>
 800c068:	4b2a      	ldr	r3, [pc, #168]	@ (800c114 <sys_timeout_abs+0xcc>)
 800c06a:	22be      	movs	r2, #190	@ 0xbe
 800c06c:	492a      	ldr	r1, [pc, #168]	@ (800c118 <sys_timeout_abs+0xd0>)
 800c06e:	482b      	ldr	r0, [pc, #172]	@ (800c11c <sys_timeout_abs+0xd4>)
 800c070:	f003 f920 	bl	800f2b4 <printf>
    return;
 800c074:	e04a      	b.n	800c10c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	2200      	movs	r2, #0
 800c07a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	68fa      	ldr	r2, [r7, #12]
 800c08c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c08e:	4b24      	ldr	r3, [pc, #144]	@ (800c120 <sys_timeout_abs+0xd8>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d103      	bne.n	800c09e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c096:	4a22      	ldr	r2, [pc, #136]	@ (800c120 <sys_timeout_abs+0xd8>)
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	6013      	str	r3, [r2, #0]
    return;
 800c09c:	e037      	b.n	800c10e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	685a      	ldr	r2, [r3, #4]
 800c0a2:	4b1f      	ldr	r3, [pc, #124]	@ (800c120 <sys_timeout_abs+0xd8>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	1ad3      	subs	r3, r2, r3
 800c0aa:	0fdb      	lsrs	r3, r3, #31
 800c0ac:	f003 0301 	and.w	r3, r3, #1
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d007      	beq.n	800c0c6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c0b6:	4b1a      	ldr	r3, [pc, #104]	@ (800c120 <sys_timeout_abs+0xd8>)
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c0be:	4a18      	ldr	r2, [pc, #96]	@ (800c120 <sys_timeout_abs+0xd8>)
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	6013      	str	r3, [r2, #0]
 800c0c4:	e023      	b.n	800c10e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c0c6:	4b16      	ldr	r3, [pc, #88]	@ (800c120 <sys_timeout_abs+0xd8>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	617b      	str	r3, [r7, #20]
 800c0cc:	e01a      	b.n	800c104 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d00b      	beq.n	800c0ee <sys_timeout_abs+0xa6>
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	685a      	ldr	r2, [r3, #4]
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	1ad3      	subs	r3, r2, r3
 800c0e2:	0fdb      	lsrs	r3, r3, #31
 800c0e4:	f003 0301 	and.w	r3, r3, #1
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d007      	beq.n	800c0fe <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	693a      	ldr	r2, [r7, #16]
 800c0fa:	601a      	str	r2, [r3, #0]
        break;
 800c0fc:	e007      	b.n	800c10e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	617b      	str	r3, [r7, #20]
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1e1      	bne.n	800c0ce <sys_timeout_abs+0x86>
 800c10a:	e000      	b.n	800c10e <sys_timeout_abs+0xc6>
    return;
 800c10c:	bf00      	nop
      }
    }
  }
}
 800c10e:	3718      	adds	r7, #24
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	08015b58 	.word	0x08015b58
 800c118:	08015b8c 	.word	0x08015b8c
 800c11c:	08015bcc 	.word	0x08015bcc
 800c120:	2000893c 	.word	0x2000893c

0800c124 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	4798      	blx	r3

  now = sys_now();
 800c136:	f7f8 fd75 	bl	8004c24 <sys_now>
 800c13a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	4b0f      	ldr	r3, [pc, #60]	@ (800c180 <lwip_cyclic_timer+0x5c>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4413      	add	r3, r2
 800c146:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	1ad3      	subs	r3, r2, r3
 800c14e:	0fdb      	lsrs	r3, r3, #31
 800c150:	f003 0301 	and.w	r3, r3, #1
 800c154:	b2db      	uxtb	r3, r3
 800c156:	2b00      	cmp	r3, #0
 800c158:	d009      	beq.n	800c16e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	4413      	add	r3, r2
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	4907      	ldr	r1, [pc, #28]	@ (800c184 <lwip_cyclic_timer+0x60>)
 800c166:	4618      	mov	r0, r3
 800c168:	f7ff ff6e 	bl	800c048 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c16c:	e004      	b.n	800c178 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	4904      	ldr	r1, [pc, #16]	@ (800c184 <lwip_cyclic_timer+0x60>)
 800c172:	68f8      	ldr	r0, [r7, #12]
 800c174:	f7ff ff68 	bl	800c048 <sys_timeout_abs>
}
 800c178:	bf00      	nop
 800c17a:	3718      	adds	r7, #24
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}
 800c180:	20008940 	.word	0x20008940
 800c184:	0800c125 	.word	0x0800c125

0800c188 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c18e:	2301      	movs	r3, #1
 800c190:	607b      	str	r3, [r7, #4]
 800c192:	e00e      	b.n	800c1b2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c194:	4a0b      	ldr	r2, [pc, #44]	@ (800c1c4 <sys_timeouts_init+0x3c>)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	00db      	lsls	r3, r3, #3
 800c1a0:	4a08      	ldr	r2, [pc, #32]	@ (800c1c4 <sys_timeouts_init+0x3c>)
 800c1a2:	4413      	add	r3, r2
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	4908      	ldr	r1, [pc, #32]	@ (800c1c8 <sys_timeouts_init+0x40>)
 800c1a8:	f000 f810 	bl	800c1cc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	607b      	str	r3, [r7, #4]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2b02      	cmp	r3, #2
 800c1b6:	d9ed      	bls.n	800c194 <sys_timeouts_init+0xc>
  }
}
 800c1b8:	bf00      	nop
 800c1ba:	bf00      	nop
 800c1bc:	3708      	adds	r7, #8
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	0801673c 	.word	0x0801673c
 800c1c8:	0800c125 	.word	0x0800c125

0800c1cc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b086      	sub	sp, #24
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1de:	d306      	bcc.n	800c1ee <sys_timeout+0x22>
 800c1e0:	4b0a      	ldr	r3, [pc, #40]	@ (800c20c <sys_timeout+0x40>)
 800c1e2:	f240 1229 	movw	r2, #297	@ 0x129
 800c1e6:	490a      	ldr	r1, [pc, #40]	@ (800c210 <sys_timeout+0x44>)
 800c1e8:	480a      	ldr	r0, [pc, #40]	@ (800c214 <sys_timeout+0x48>)
 800c1ea:	f003 f863 	bl	800f2b4 <printf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c1ee:	f7f8 fd19 	bl	8004c24 <sys_now>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	68b9      	ldr	r1, [r7, #8]
 800c1fe:	6978      	ldr	r0, [r7, #20]
 800c200:	f7ff ff22 	bl	800c048 <sys_timeout_abs>
#endif
}
 800c204:	bf00      	nop
 800c206:	3718      	adds	r7, #24
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}
 800c20c:	08015b58 	.word	0x08015b58
 800c210:	08015bf4 	.word	0x08015bf4
 800c214:	08015bcc 	.word	0x08015bcc

0800c218 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c21e:	f7f8 fd01 	bl	8004c24 <sys_now>
 800c222:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c224:	4b1a      	ldr	r3, [pc, #104]	@ (800c290 <sys_check_timeouts+0x78>)
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d001      	beq.n	800c232 <sys_check_timeouts+0x1a>
 800c22e:	f7f9 ff29 	bl	8006084 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c232:	4b18      	ldr	r3, [pc, #96]	@ (800c294 <sys_check_timeouts+0x7c>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d022      	beq.n	800c284 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	685b      	ldr	r3, [r3, #4]
 800c242:	68fa      	ldr	r2, [r7, #12]
 800c244:	1ad3      	subs	r3, r2, r3
 800c246:	0fdb      	lsrs	r3, r3, #31
 800c248:	f003 0301 	and.w	r3, r3, #1
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d11a      	bne.n	800c288 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	4a0f      	ldr	r2, [pc, #60]	@ (800c294 <sys_check_timeouts+0x7c>)
 800c258:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	689b      	ldr	r3, [r3, #8]
 800c25e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	4a0b      	ldr	r2, [pc, #44]	@ (800c298 <sys_check_timeouts+0x80>)
 800c26c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c26e:	68b9      	ldr	r1, [r7, #8]
 800c270:	2006      	movs	r0, #6
 800c272:	f7f9 fbcb 	bl	8005a0c <memp_free>
    if (handler != NULL) {
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d0d3      	beq.n	800c224 <sys_check_timeouts+0xc>
      handler(arg);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6838      	ldr	r0, [r7, #0]
 800c280:	4798      	blx	r3
  do {
 800c282:	e7cf      	b.n	800c224 <sys_check_timeouts+0xc>
      return;
 800c284:	bf00      	nop
 800c286:	e000      	b.n	800c28a <sys_check_timeouts+0x72>
      return;
 800c288:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c28a:	3710      	adds	r7, #16
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	200088e9 	.word	0x200088e9
 800c294:	2000893c 	.word	0x2000893c
 800c298:	20008940 	.word	0x20008940

0800c29c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c2a0:	f002 ff2a 	bl	800f0f8 <rand>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c2b2:	b29a      	uxth	r2, r3
 800c2b4:	4b01      	ldr	r3, [pc, #4]	@ (800c2bc <udp_init+0x20>)
 800c2b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c2b8:	bf00      	nop
 800c2ba:	bd80      	pop	{r7, pc}
 800c2bc:	20000028 	.word	0x20000028

0800c2c0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b083      	sub	sp, #12
 800c2c4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c2ca:	4b17      	ldr	r3, [pc, #92]	@ (800c328 <udp_new_port+0x68>)
 800c2cc:	881b      	ldrh	r3, [r3, #0]
 800c2ce:	1c5a      	adds	r2, r3, #1
 800c2d0:	b291      	uxth	r1, r2
 800c2d2:	4a15      	ldr	r2, [pc, #84]	@ (800c328 <udp_new_port+0x68>)
 800c2d4:	8011      	strh	r1, [r2, #0]
 800c2d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d103      	bne.n	800c2e6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c2de:	4b12      	ldr	r3, [pc, #72]	@ (800c328 <udp_new_port+0x68>)
 800c2e0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800c2e4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c2e6:	4b11      	ldr	r3, [pc, #68]	@ (800c32c <udp_new_port+0x6c>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	603b      	str	r3, [r7, #0]
 800c2ec:	e011      	b.n	800c312 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	8a5a      	ldrh	r2, [r3, #18]
 800c2f2:	4b0d      	ldr	r3, [pc, #52]	@ (800c328 <udp_new_port+0x68>)
 800c2f4:	881b      	ldrh	r3, [r3, #0]
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d108      	bne.n	800c30c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800c2fa:	88fb      	ldrh	r3, [r7, #6]
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	80fb      	strh	r3, [r7, #6]
 800c300:	88fb      	ldrh	r3, [r7, #6]
 800c302:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c306:	d3e0      	bcc.n	800c2ca <udp_new_port+0xa>
        return 0;
 800c308:	2300      	movs	r3, #0
 800c30a:	e007      	b.n	800c31c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	603b      	str	r3, [r7, #0]
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d1ea      	bne.n	800c2ee <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800c318:	4b03      	ldr	r3, [pc, #12]	@ (800c328 <udp_new_port+0x68>)
 800c31a:	881b      	ldrh	r3, [r3, #0]
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr
 800c328:	20000028 	.word	0x20000028
 800c32c:	20008948 	.word	0x20008948

0800c330 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	4613      	mov	r3, r2
 800c33c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d105      	bne.n	800c350 <udp_input_local_match+0x20>
 800c344:	4b27      	ldr	r3, [pc, #156]	@ (800c3e4 <udp_input_local_match+0xb4>)
 800c346:	2287      	movs	r2, #135	@ 0x87
 800c348:	4927      	ldr	r1, [pc, #156]	@ (800c3e8 <udp_input_local_match+0xb8>)
 800c34a:	4828      	ldr	r0, [pc, #160]	@ (800c3ec <udp_input_local_match+0xbc>)
 800c34c:	f002 ffb2 	bl	800f2b4 <printf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d105      	bne.n	800c362 <udp_input_local_match+0x32>
 800c356:	4b23      	ldr	r3, [pc, #140]	@ (800c3e4 <udp_input_local_match+0xb4>)
 800c358:	2288      	movs	r2, #136	@ 0x88
 800c35a:	4925      	ldr	r1, [pc, #148]	@ (800c3f0 <udp_input_local_match+0xc0>)
 800c35c:	4823      	ldr	r0, [pc, #140]	@ (800c3ec <udp_input_local_match+0xbc>)
 800c35e:	f002 ffa9 	bl	800f2b4 <printf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	7a1b      	ldrb	r3, [r3, #8]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d00b      	beq.n	800c382 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	7a1a      	ldrb	r2, [r3, #8]
 800c36e:	4b21      	ldr	r3, [pc, #132]	@ (800c3f4 <udp_input_local_match+0xc4>)
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c376:	3301      	adds	r3, #1
 800c378:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d001      	beq.n	800c382 <udp_input_local_match+0x52>
    return 0;
 800c37e:	2300      	movs	r3, #0
 800c380:	e02b      	b.n	800c3da <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c382:	79fb      	ldrb	r3, [r7, #7]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d018      	beq.n	800c3ba <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d013      	beq.n	800c3b6 <udp_input_local_match+0x86>
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00f      	beq.n	800c3b6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c396:	4b17      	ldr	r3, [pc, #92]	@ (800c3f4 <udp_input_local_match+0xc4>)
 800c398:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c39a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c39e:	d00a      	beq.n	800c3b6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	4b13      	ldr	r3, [pc, #76]	@ (800c3f4 <udp_input_local_match+0xc4>)
 800c3a6:	695b      	ldr	r3, [r3, #20]
 800c3a8:	405a      	eors	r2, r3
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	3308      	adds	r3, #8
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d110      	bne.n	800c3d8 <udp_input_local_match+0xa8>
          return 1;
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	e00f      	b.n	800c3da <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d009      	beq.n	800c3d4 <udp_input_local_match+0xa4>
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d005      	beq.n	800c3d4 <udp_input_local_match+0xa4>
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	4b09      	ldr	r3, [pc, #36]	@ (800c3f4 <udp_input_local_match+0xc4>)
 800c3ce:	695b      	ldr	r3, [r3, #20]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d101      	bne.n	800c3d8 <udp_input_local_match+0xa8>
        return 1;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	e000      	b.n	800c3da <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c3d8:	2300      	movs	r3, #0
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	08015c40 	.word	0x08015c40
 800c3e8:	08015c70 	.word	0x08015c70
 800c3ec:	08015c94 	.word	0x08015c94
 800c3f0:	08015cbc 	.word	0x08015cbc
 800c3f4:	2000537c 	.word	0x2000537c

0800c3f8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c3f8:	b590      	push	{r4, r7, lr}
 800c3fa:	b08d      	sub	sp, #52	@ 0x34
 800c3fc:	af02      	add	r7, sp, #8
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c402:	2300      	movs	r3, #0
 800c404:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d105      	bne.n	800c418 <udp_input+0x20>
 800c40c:	4b7c      	ldr	r3, [pc, #496]	@ (800c600 <udp_input+0x208>)
 800c40e:	22cf      	movs	r2, #207	@ 0xcf
 800c410:	497c      	ldr	r1, [pc, #496]	@ (800c604 <udp_input+0x20c>)
 800c412:	487d      	ldr	r0, [pc, #500]	@ (800c608 <udp_input+0x210>)
 800c414:	f002 ff4e 	bl	800f2b4 <printf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d105      	bne.n	800c42a <udp_input+0x32>
 800c41e:	4b78      	ldr	r3, [pc, #480]	@ (800c600 <udp_input+0x208>)
 800c420:	22d0      	movs	r2, #208	@ 0xd0
 800c422:	497a      	ldr	r1, [pc, #488]	@ (800c60c <udp_input+0x214>)
 800c424:	4878      	ldr	r0, [pc, #480]	@ (800c608 <udp_input+0x210>)
 800c426:	f002 ff45 	bl	800f2b4 <printf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	895b      	ldrh	r3, [r3, #10]
 800c42e:	2b07      	cmp	r3, #7
 800c430:	d803      	bhi.n	800c43a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f7fa f960 	bl	80066f8 <pbuf_free>
    goto end;
 800c438:	e0de      	b.n	800c5f8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c440:	4b73      	ldr	r3, [pc, #460]	@ (800c610 <udp_input+0x218>)
 800c442:	695b      	ldr	r3, [r3, #20]
 800c444:	4a72      	ldr	r2, [pc, #456]	@ (800c610 <udp_input+0x218>)
 800c446:	6812      	ldr	r2, [r2, #0]
 800c448:	4611      	mov	r1, r2
 800c44a:	4618      	mov	r0, r3
 800c44c:	f001 fefe 	bl	800e24c <ip4_addr_isbroadcast_u32>
 800c450:	4603      	mov	r3, r0
 800c452:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	881b      	ldrh	r3, [r3, #0]
 800c458:	b29b      	uxth	r3, r3
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7f8 fdee 	bl	800503c <lwip_htons>
 800c460:	4603      	mov	r3, r0
 800c462:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	885b      	ldrh	r3, [r3, #2]
 800c468:	b29b      	uxth	r3, r3
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7f8 fde6 	bl	800503c <lwip_htons>
 800c470:	4603      	mov	r3, r0
 800c472:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c474:	2300      	movs	r3, #0
 800c476:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800c478:	2300      	movs	r3, #0
 800c47a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c47c:	2300      	movs	r3, #0
 800c47e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c480:	4b64      	ldr	r3, [pc, #400]	@ (800c614 <udp_input+0x21c>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	627b      	str	r3, [r7, #36]	@ 0x24
 800c486:	e054      	b.n	800c532 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c48a:	8a5b      	ldrh	r3, [r3, #18]
 800c48c:	89fa      	ldrh	r2, [r7, #14]
 800c48e:	429a      	cmp	r2, r3
 800c490:	d14a      	bne.n	800c528 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c492:	7cfb      	ldrb	r3, [r7, #19]
 800c494:	461a      	mov	r2, r3
 800c496:	6839      	ldr	r1, [r7, #0]
 800c498:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c49a:	f7ff ff49 	bl	800c330 <udp_input_local_match>
 800c49e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d041      	beq.n	800c528 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a6:	7c1b      	ldrb	r3, [r3, #16]
 800c4a8:	f003 0304 	and.w	r3, r3, #4
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d11d      	bne.n	800c4ec <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d102      	bne.n	800c4bc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b8:	61fb      	str	r3, [r7, #28]
 800c4ba:	e017      	b.n	800c4ec <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c4bc:	7cfb      	ldrb	r3, [r7, #19]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d014      	beq.n	800c4ec <udp_input+0xf4>
 800c4c2:	4b53      	ldr	r3, [pc, #332]	@ (800c610 <udp_input+0x218>)
 800c4c4:	695b      	ldr	r3, [r3, #20]
 800c4c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c4ca:	d10f      	bne.n	800c4ec <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	681a      	ldr	r2, [r3, #0]
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	3304      	adds	r3, #4
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d008      	beq.n	800c4ec <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4dc:	681a      	ldr	r2, [r3, #0]
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	3304      	adds	r3, #4
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d101      	bne.n	800c4ec <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ea:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ee:	8a9b      	ldrh	r3, [r3, #20]
 800c4f0:	8a3a      	ldrh	r2, [r7, #16]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d118      	bne.n	800c528 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d005      	beq.n	800c50a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c500:	685a      	ldr	r2, [r3, #4]
 800c502:	4b43      	ldr	r3, [pc, #268]	@ (800c610 <udp_input+0x218>)
 800c504:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c506:	429a      	cmp	r2, r3
 800c508:	d10e      	bne.n	800c528 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c50a:	6a3b      	ldr	r3, [r7, #32]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d014      	beq.n	800c53a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c512:	68da      	ldr	r2, [r3, #12]
 800c514:	6a3b      	ldr	r3, [r7, #32]
 800c516:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c518:	4b3e      	ldr	r3, [pc, #248]	@ (800c614 <udp_input+0x21c>)
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c51e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c520:	4a3c      	ldr	r2, [pc, #240]	@ (800c614 <udp_input+0x21c>)
 800c522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c524:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c526:	e008      	b.n	800c53a <udp_input+0x142>
      }
    }

    prev = pcb;
 800c528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c52a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c52e:	68db      	ldr	r3, [r3, #12]
 800c530:	627b      	str	r3, [r7, #36]	@ 0x24
 800c532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c534:	2b00      	cmp	r3, #0
 800c536:	d1a7      	bne.n	800c488 <udp_input+0x90>
 800c538:	e000      	b.n	800c53c <udp_input+0x144>
        break;
 800c53a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d101      	bne.n	800c546 <udp_input+0x14e>
    pcb = uncon_pcb;
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d002      	beq.n	800c552 <udp_input+0x15a>
    for_us = 1;
 800c54c:	2301      	movs	r3, #1
 800c54e:	76fb      	strb	r3, [r7, #27]
 800c550:	e00a      	b.n	800c568 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	3304      	adds	r3, #4
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	4b2d      	ldr	r3, [pc, #180]	@ (800c610 <udp_input+0x218>)
 800c55a:	695b      	ldr	r3, [r3, #20]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	bf0c      	ite	eq
 800c560:	2301      	moveq	r3, #1
 800c562:	2300      	movne	r3, #0
 800c564:	b2db      	uxtb	r3, r3
 800c566:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c568:	7efb      	ldrb	r3, [r7, #27]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d041      	beq.n	800c5f2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c56e:	2108      	movs	r1, #8
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f7fa f83b 	bl	80065ec <pbuf_remove_header>
 800c576:	4603      	mov	r3, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d00a      	beq.n	800c592 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c57c:	4b20      	ldr	r3, [pc, #128]	@ (800c600 <udp_input+0x208>)
 800c57e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800c582:	4925      	ldr	r1, [pc, #148]	@ (800c618 <udp_input+0x220>)
 800c584:	4820      	ldr	r0, [pc, #128]	@ (800c608 <udp_input+0x210>)
 800c586:	f002 fe95 	bl	800f2b4 <printf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f7fa f8b4 	bl	80066f8 <pbuf_free>
      goto end;
 800c590:	e032      	b.n	800c5f8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c594:	2b00      	cmp	r3, #0
 800c596:	d012      	beq.n	800c5be <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c59a:	699b      	ldr	r3, [r3, #24]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d00a      	beq.n	800c5b6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a2:	699c      	ldr	r4, [r3, #24]
 800c5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a6:	69d8      	ldr	r0, [r3, #28]
 800c5a8:	8a3b      	ldrh	r3, [r7, #16]
 800c5aa:	9300      	str	r3, [sp, #0]
 800c5ac:	4b1b      	ldr	r3, [pc, #108]	@ (800c61c <udp_input+0x224>)
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c5b2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c5b4:	e021      	b.n	800c5fa <udp_input+0x202>
        pbuf_free(p);
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f7fa f89e 	bl	80066f8 <pbuf_free>
        goto end;
 800c5bc:	e01c      	b.n	800c5f8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c5be:	7cfb      	ldrb	r3, [r7, #19]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d112      	bne.n	800c5ea <udp_input+0x1f2>
 800c5c4:	4b12      	ldr	r3, [pc, #72]	@ (800c610 <udp_input+0x218>)
 800c5c6:	695b      	ldr	r3, [r3, #20]
 800c5c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c5cc:	2be0      	cmp	r3, #224	@ 0xe0
 800c5ce:	d00c      	beq.n	800c5ea <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c5d0:	4b0f      	ldr	r3, [pc, #60]	@ (800c610 <udp_input+0x218>)
 800c5d2:	899b      	ldrh	r3, [r3, #12]
 800c5d4:	3308      	adds	r3, #8
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	b21b      	sxth	r3, r3
 800c5da:	4619      	mov	r1, r3
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f7fa f878 	bl	80066d2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c5e2:	2103      	movs	r1, #3
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f001 fb11 	bl	800dc0c <icmp_dest_unreach>
      pbuf_free(p);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f7fa f884 	bl	80066f8 <pbuf_free>
  return;
 800c5f0:	e003      	b.n	800c5fa <udp_input+0x202>
    pbuf_free(p);
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f7fa f880 	bl	80066f8 <pbuf_free>
  return;
 800c5f8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c5fa:	372c      	adds	r7, #44	@ 0x2c
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd90      	pop	{r4, r7, pc}
 800c600:	08015c40 	.word	0x08015c40
 800c604:	08015ce4 	.word	0x08015ce4
 800c608:	08015c94 	.word	0x08015c94
 800c60c:	08015cfc 	.word	0x08015cfc
 800c610:	2000537c 	.word	0x2000537c
 800c614:	20008948 	.word	0x20008948
 800c618:	08015d18 	.word	0x08015d18
 800c61c:	2000538c 	.word	0x2000538c

0800c620 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b088      	sub	sp, #32
 800c624:	af02      	add	r7, sp, #8
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	607a      	str	r2, [r7, #4]
 800c62c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d109      	bne.n	800c648 <udp_sendto+0x28>
 800c634:	4b23      	ldr	r3, [pc, #140]	@ (800c6c4 <udp_sendto+0xa4>)
 800c636:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800c63a:	4923      	ldr	r1, [pc, #140]	@ (800c6c8 <udp_sendto+0xa8>)
 800c63c:	4823      	ldr	r0, [pc, #140]	@ (800c6cc <udp_sendto+0xac>)
 800c63e:	f002 fe39 	bl	800f2b4 <printf>
 800c642:	f06f 030f 	mvn.w	r3, #15
 800c646:	e038      	b.n	800c6ba <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d109      	bne.n	800c662 <udp_sendto+0x42>
 800c64e:	4b1d      	ldr	r3, [pc, #116]	@ (800c6c4 <udp_sendto+0xa4>)
 800c650:	f240 2219 	movw	r2, #537	@ 0x219
 800c654:	491e      	ldr	r1, [pc, #120]	@ (800c6d0 <udp_sendto+0xb0>)
 800c656:	481d      	ldr	r0, [pc, #116]	@ (800c6cc <udp_sendto+0xac>)
 800c658:	f002 fe2c 	bl	800f2b4 <printf>
 800c65c:	f06f 030f 	mvn.w	r3, #15
 800c660:	e02b      	b.n	800c6ba <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d109      	bne.n	800c67c <udp_sendto+0x5c>
 800c668:	4b16      	ldr	r3, [pc, #88]	@ (800c6c4 <udp_sendto+0xa4>)
 800c66a:	f240 221a 	movw	r2, #538	@ 0x21a
 800c66e:	4919      	ldr	r1, [pc, #100]	@ (800c6d4 <udp_sendto+0xb4>)
 800c670:	4816      	ldr	r0, [pc, #88]	@ (800c6cc <udp_sendto+0xac>)
 800c672:	f002 fe1f 	bl	800f2b4 <printf>
 800c676:	f06f 030f 	mvn.w	r3, #15
 800c67a:	e01e      	b.n	800c6ba <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	7a1b      	ldrb	r3, [r3, #8]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d006      	beq.n	800c692 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	7a1b      	ldrb	r3, [r3, #8]
 800c688:	4618      	mov	r0, r3
 800c68a:	f7f9 fcd5 	bl	8006038 <netif_get_by_index>
 800c68e:	6178      	str	r0, [r7, #20]
 800c690:	e003      	b.n	800c69a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f001 fb44 	bl	800dd20 <ip4_route>
 800c698:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d102      	bne.n	800c6a6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800c6a0:	f06f 0303 	mvn.w	r3, #3
 800c6a4:	e009      	b.n	800c6ba <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800c6a6:	887a      	ldrh	r2, [r7, #2]
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	9300      	str	r3, [sp, #0]
 800c6ac:	4613      	mov	r3, r2
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	68b9      	ldr	r1, [r7, #8]
 800c6b2:	68f8      	ldr	r0, [r7, #12]
 800c6b4:	f000 f810 	bl	800c6d8 <udp_sendto_if>
 800c6b8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3718      	adds	r7, #24
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	08015c40 	.word	0x08015c40
 800c6c8:	08015d64 	.word	0x08015d64
 800c6cc:	08015c94 	.word	0x08015c94
 800c6d0:	08015d7c 	.word	0x08015d7c
 800c6d4:	08015d98 	.word	0x08015d98

0800c6d8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b088      	sub	sp, #32
 800c6dc:	af02      	add	r7, sp, #8
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	607a      	str	r2, [r7, #4]
 800c6e4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d109      	bne.n	800c700 <udp_sendto_if+0x28>
 800c6ec:	4b2e      	ldr	r3, [pc, #184]	@ (800c7a8 <udp_sendto_if+0xd0>)
 800c6ee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c6f2:	492e      	ldr	r1, [pc, #184]	@ (800c7ac <udp_sendto_if+0xd4>)
 800c6f4:	482e      	ldr	r0, [pc, #184]	@ (800c7b0 <udp_sendto_if+0xd8>)
 800c6f6:	f002 fddd 	bl	800f2b4 <printf>
 800c6fa:	f06f 030f 	mvn.w	r3, #15
 800c6fe:	e04f      	b.n	800c7a0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d109      	bne.n	800c71a <udp_sendto_if+0x42>
 800c706:	4b28      	ldr	r3, [pc, #160]	@ (800c7a8 <udp_sendto_if+0xd0>)
 800c708:	f240 2281 	movw	r2, #641	@ 0x281
 800c70c:	4929      	ldr	r1, [pc, #164]	@ (800c7b4 <udp_sendto_if+0xdc>)
 800c70e:	4828      	ldr	r0, [pc, #160]	@ (800c7b0 <udp_sendto_if+0xd8>)
 800c710:	f002 fdd0 	bl	800f2b4 <printf>
 800c714:	f06f 030f 	mvn.w	r3, #15
 800c718:	e042      	b.n	800c7a0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d109      	bne.n	800c734 <udp_sendto_if+0x5c>
 800c720:	4b21      	ldr	r3, [pc, #132]	@ (800c7a8 <udp_sendto_if+0xd0>)
 800c722:	f240 2282 	movw	r2, #642	@ 0x282
 800c726:	4924      	ldr	r1, [pc, #144]	@ (800c7b8 <udp_sendto_if+0xe0>)
 800c728:	4821      	ldr	r0, [pc, #132]	@ (800c7b0 <udp_sendto_if+0xd8>)
 800c72a:	f002 fdc3 	bl	800f2b4 <printf>
 800c72e:	f06f 030f 	mvn.w	r3, #15
 800c732:	e035      	b.n	800c7a0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c734:	6a3b      	ldr	r3, [r7, #32]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d109      	bne.n	800c74e <udp_sendto_if+0x76>
 800c73a:	4b1b      	ldr	r3, [pc, #108]	@ (800c7a8 <udp_sendto_if+0xd0>)
 800c73c:	f240 2283 	movw	r2, #643	@ 0x283
 800c740:	491e      	ldr	r1, [pc, #120]	@ (800c7bc <udp_sendto_if+0xe4>)
 800c742:	481b      	ldr	r0, [pc, #108]	@ (800c7b0 <udp_sendto_if+0xd8>)
 800c744:	f002 fdb6 	bl	800f2b4 <printf>
 800c748:	f06f 030f 	mvn.w	r3, #15
 800c74c:	e028      	b.n	800c7a0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d009      	beq.n	800c768 <udp_sendto_if+0x90>
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d005      	beq.n	800c768 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c764:	2be0      	cmp	r3, #224	@ 0xe0
 800c766:	d103      	bne.n	800c770 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800c768:	6a3b      	ldr	r3, [r7, #32]
 800c76a:	3304      	adds	r3, #4
 800c76c:	617b      	str	r3, [r7, #20]
 800c76e:	e00b      	b.n	800c788 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	6a3b      	ldr	r3, [r7, #32]
 800c776:	3304      	adds	r3, #4
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d002      	beq.n	800c784 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800c77e:	f06f 0303 	mvn.w	r3, #3
 800c782:	e00d      	b.n	800c7a0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c788:	887a      	ldrh	r2, [r7, #2]
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	9301      	str	r3, [sp, #4]
 800c78e:	6a3b      	ldr	r3, [r7, #32]
 800c790:	9300      	str	r3, [sp, #0]
 800c792:	4613      	mov	r3, r2
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	68b9      	ldr	r1, [r7, #8]
 800c798:	68f8      	ldr	r0, [r7, #12]
 800c79a:	f000 f811 	bl	800c7c0 <udp_sendto_if_src>
 800c79e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3718      	adds	r7, #24
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	08015c40 	.word	0x08015c40
 800c7ac:	08015db4 	.word	0x08015db4
 800c7b0:	08015c94 	.word	0x08015c94
 800c7b4:	08015dd0 	.word	0x08015dd0
 800c7b8:	08015dec 	.word	0x08015dec
 800c7bc:	08015e0c 	.word	0x08015e0c

0800c7c0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b08c      	sub	sp, #48	@ 0x30
 800c7c4:	af04      	add	r7, sp, #16
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	607a      	str	r2, [r7, #4]
 800c7cc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d109      	bne.n	800c7e8 <udp_sendto_if_src+0x28>
 800c7d4:	4b65      	ldr	r3, [pc, #404]	@ (800c96c <udp_sendto_if_src+0x1ac>)
 800c7d6:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800c7da:	4965      	ldr	r1, [pc, #404]	@ (800c970 <udp_sendto_if_src+0x1b0>)
 800c7dc:	4865      	ldr	r0, [pc, #404]	@ (800c974 <udp_sendto_if_src+0x1b4>)
 800c7de:	f002 fd69 	bl	800f2b4 <printf>
 800c7e2:	f06f 030f 	mvn.w	r3, #15
 800c7e6:	e0bc      	b.n	800c962 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d109      	bne.n	800c802 <udp_sendto_if_src+0x42>
 800c7ee:	4b5f      	ldr	r3, [pc, #380]	@ (800c96c <udp_sendto_if_src+0x1ac>)
 800c7f0:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800c7f4:	4960      	ldr	r1, [pc, #384]	@ (800c978 <udp_sendto_if_src+0x1b8>)
 800c7f6:	485f      	ldr	r0, [pc, #380]	@ (800c974 <udp_sendto_if_src+0x1b4>)
 800c7f8:	f002 fd5c 	bl	800f2b4 <printf>
 800c7fc:	f06f 030f 	mvn.w	r3, #15
 800c800:	e0af      	b.n	800c962 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d109      	bne.n	800c81c <udp_sendto_if_src+0x5c>
 800c808:	4b58      	ldr	r3, [pc, #352]	@ (800c96c <udp_sendto_if_src+0x1ac>)
 800c80a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800c80e:	495b      	ldr	r1, [pc, #364]	@ (800c97c <udp_sendto_if_src+0x1bc>)
 800c810:	4858      	ldr	r0, [pc, #352]	@ (800c974 <udp_sendto_if_src+0x1b4>)
 800c812:	f002 fd4f 	bl	800f2b4 <printf>
 800c816:	f06f 030f 	mvn.w	r3, #15
 800c81a:	e0a2      	b.n	800c962 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d109      	bne.n	800c836 <udp_sendto_if_src+0x76>
 800c822:	4b52      	ldr	r3, [pc, #328]	@ (800c96c <udp_sendto_if_src+0x1ac>)
 800c824:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800c828:	4955      	ldr	r1, [pc, #340]	@ (800c980 <udp_sendto_if_src+0x1c0>)
 800c82a:	4852      	ldr	r0, [pc, #328]	@ (800c974 <udp_sendto_if_src+0x1b4>)
 800c82c:	f002 fd42 	bl	800f2b4 <printf>
 800c830:	f06f 030f 	mvn.w	r3, #15
 800c834:	e095      	b.n	800c962 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d109      	bne.n	800c850 <udp_sendto_if_src+0x90>
 800c83c:	4b4b      	ldr	r3, [pc, #300]	@ (800c96c <udp_sendto_if_src+0x1ac>)
 800c83e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800c842:	4950      	ldr	r1, [pc, #320]	@ (800c984 <udp_sendto_if_src+0x1c4>)
 800c844:	484b      	ldr	r0, [pc, #300]	@ (800c974 <udp_sendto_if_src+0x1b4>)
 800c846:	f002 fd35 	bl	800f2b4 <printf>
 800c84a:	f06f 030f 	mvn.w	r3, #15
 800c84e:	e088      	b.n	800c962 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	8a5b      	ldrh	r3, [r3, #18]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d10f      	bne.n	800c878 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c858:	68f9      	ldr	r1, [r7, #12]
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	8a5b      	ldrh	r3, [r3, #18]
 800c85e:	461a      	mov	r2, r3
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	f000 f893 	bl	800c98c <udp_bind>
 800c866:	4603      	mov	r3, r0
 800c868:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800c86a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d002      	beq.n	800c878 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800c872:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c876:	e074      	b.n	800c962 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	891b      	ldrh	r3, [r3, #8]
 800c87c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800c880:	4293      	cmp	r3, r2
 800c882:	d902      	bls.n	800c88a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800c884:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c888:	e06b      	b.n	800c962 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c88a:	2108      	movs	r1, #8
 800c88c:	68b8      	ldr	r0, [r7, #8]
 800c88e:	f7f9 fe9d 	bl	80065cc <pbuf_add_header>
 800c892:	4603      	mov	r3, r0
 800c894:	2b00      	cmp	r3, #0
 800c896:	d015      	beq.n	800c8c4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c898:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c89c:	2108      	movs	r1, #8
 800c89e:	2022      	movs	r0, #34	@ 0x22
 800c8a0:	f7f9 fc46 	bl	8006130 <pbuf_alloc>
 800c8a4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d102      	bne.n	800c8b2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800c8ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c8b0:	e057      	b.n	800c962 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	891b      	ldrh	r3, [r3, #8]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d006      	beq.n	800c8c8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800c8ba:	68b9      	ldr	r1, [r7, #8]
 800c8bc:	69f8      	ldr	r0, [r7, #28]
 800c8be:	f7fa f833 	bl	8006928 <pbuf_chain>
 800c8c2:	e001      	b.n	800c8c8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c8c8:	69fb      	ldr	r3, [r7, #28]
 800c8ca:	895b      	ldrh	r3, [r3, #10]
 800c8cc:	2b07      	cmp	r3, #7
 800c8ce:	d806      	bhi.n	800c8de <udp_sendto_if_src+0x11e>
 800c8d0:	4b26      	ldr	r3, [pc, #152]	@ (800c96c <udp_sendto_if_src+0x1ac>)
 800c8d2:	f240 320d 	movw	r2, #781	@ 0x30d
 800c8d6:	492c      	ldr	r1, [pc, #176]	@ (800c988 <udp_sendto_if_src+0x1c8>)
 800c8d8:	4826      	ldr	r0, [pc, #152]	@ (800c974 <udp_sendto_if_src+0x1b4>)
 800c8da:	f002 fceb 	bl	800f2b4 <printf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800c8de:	69fb      	ldr	r3, [r7, #28]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	8a5b      	ldrh	r3, [r3, #18]
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7f8 fba7 	bl	800503c <lwip_htons>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	461a      	mov	r2, r3
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c8f6:	887b      	ldrh	r3, [r7, #2]
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7f8 fb9f 	bl	800503c <lwip_htons>
 800c8fe:	4603      	mov	r3, r0
 800c900:	461a      	mov	r2, r3
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	2200      	movs	r2, #0
 800c90a:	719a      	strb	r2, [r3, #6]
 800c90c:	2200      	movs	r2, #0
 800c90e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	891b      	ldrh	r3, [r3, #8]
 800c914:	4618      	mov	r0, r3
 800c916:	f7f8 fb91 	bl	800503c <lwip_htons>
 800c91a:	4603      	mov	r3, r0
 800c91c:	461a      	mov	r2, r3
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800c922:	2311      	movs	r3, #17
 800c924:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	7adb      	ldrb	r3, [r3, #11]
 800c92a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	7a9b      	ldrb	r3, [r3, #10]
 800c930:	7cb9      	ldrb	r1, [r7, #18]
 800c932:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c934:	9202      	str	r2, [sp, #8]
 800c936:	7cfa      	ldrb	r2, [r7, #19]
 800c938:	9201      	str	r2, [sp, #4]
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	460b      	mov	r3, r1
 800c93e:	687a      	ldr	r2, [r7, #4]
 800c940:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c942:	69f8      	ldr	r0, [r7, #28]
 800c944:	f001 fbd4 	bl	800e0f0 <ip4_output_if_src>
 800c948:	4603      	mov	r3, r0
 800c94a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800c94c:	69fa      	ldr	r2, [r7, #28]
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	429a      	cmp	r2, r3
 800c952:	d004      	beq.n	800c95e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800c954:	69f8      	ldr	r0, [r7, #28]
 800c956:	f7f9 fecf 	bl	80066f8 <pbuf_free>
    q = NULL;
 800c95a:	2300      	movs	r3, #0
 800c95c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800c95e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800c962:	4618      	mov	r0, r3
 800c964:	3720      	adds	r7, #32
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	bf00      	nop
 800c96c:	08015c40 	.word	0x08015c40
 800c970:	08015e2c 	.word	0x08015e2c
 800c974:	08015c94 	.word	0x08015c94
 800c978:	08015e4c 	.word	0x08015e4c
 800c97c:	08015e6c 	.word	0x08015e6c
 800c980:	08015e90 	.word	0x08015e90
 800c984:	08015eb4 	.word	0x08015eb4
 800c988:	08015ed8 	.word	0x08015ed8

0800c98c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b086      	sub	sp, #24
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	4613      	mov	r3, r2
 800c998:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d101      	bne.n	800c9a4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800c9a0:	4b39      	ldr	r3, [pc, #228]	@ (800ca88 <udp_bind+0xfc>)
 800c9a2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d109      	bne.n	800c9be <udp_bind+0x32>
 800c9aa:	4b38      	ldr	r3, [pc, #224]	@ (800ca8c <udp_bind+0x100>)
 800c9ac:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800c9b0:	4937      	ldr	r1, [pc, #220]	@ (800ca90 <udp_bind+0x104>)
 800c9b2:	4838      	ldr	r0, [pc, #224]	@ (800ca94 <udp_bind+0x108>)
 800c9b4:	f002 fc7e 	bl	800f2b4 <printf>
 800c9b8:	f06f 030f 	mvn.w	r3, #15
 800c9bc:	e060      	b.n	800ca80 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c9c2:	4b35      	ldr	r3, [pc, #212]	@ (800ca98 <udp_bind+0x10c>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	617b      	str	r3, [r7, #20]
 800c9c8:	e009      	b.n	800c9de <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c9ca:	68fa      	ldr	r2, [r7, #12]
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d102      	bne.n	800c9d8 <udp_bind+0x4c>
      rebind = 1;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	74fb      	strb	r3, [r7, #19]
      break;
 800c9d6:	e005      	b.n	800c9e4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	68db      	ldr	r3, [r3, #12]
 800c9dc:	617b      	str	r3, [r7, #20]
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d1f2      	bne.n	800c9ca <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c9e4:	88fb      	ldrh	r3, [r7, #6]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d109      	bne.n	800c9fe <udp_bind+0x72>
    port = udp_new_port();
 800c9ea:	f7ff fc69 	bl	800c2c0 <udp_new_port>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c9f2:	88fb      	ldrh	r3, [r7, #6]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d12c      	bne.n	800ca52 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c9f8:	f06f 0307 	mvn.w	r3, #7
 800c9fc:	e040      	b.n	800ca80 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c9fe:	4b26      	ldr	r3, [pc, #152]	@ (800ca98 <udp_bind+0x10c>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	617b      	str	r3, [r7, #20]
 800ca04:	e022      	b.n	800ca4c <udp_bind+0xc0>
      if (pcb != ipcb) {
 800ca06:	68fa      	ldr	r2, [r7, #12]
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d01b      	beq.n	800ca46 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	8a5b      	ldrh	r3, [r3, #18]
 800ca12:	88fa      	ldrh	r2, [r7, #6]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d116      	bne.n	800ca46 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d00d      	beq.n	800ca40 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00a      	beq.n	800ca40 <udp_bind+0xb4>
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d006      	beq.n	800ca40 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ca32:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d003      	beq.n	800ca40 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d102      	bne.n	800ca46 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800ca40:	f06f 0307 	mvn.w	r3, #7
 800ca44:	e01c      	b.n	800ca80 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	617b      	str	r3, [r7, #20]
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d1d9      	bne.n	800ca06 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d002      	beq.n	800ca5e <udp_bind+0xd2>
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	e000      	b.n	800ca60 <udp_bind+0xd4>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	68fa      	ldr	r2, [r7, #12]
 800ca62:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	88fa      	ldrh	r2, [r7, #6]
 800ca68:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800ca6a:	7cfb      	ldrb	r3, [r7, #19]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d106      	bne.n	800ca7e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800ca70:	4b09      	ldr	r3, [pc, #36]	@ (800ca98 <udp_bind+0x10c>)
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800ca78:	4a07      	ldr	r2, [pc, #28]	@ (800ca98 <udp_bind+0x10c>)
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800ca7e:	2300      	movs	r3, #0
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3718      	adds	r7, #24
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	08016754 	.word	0x08016754
 800ca8c:	08015c40 	.word	0x08015c40
 800ca90:	08015f08 	.word	0x08015f08
 800ca94:	08015c94 	.word	0x08015c94
 800ca98:	20008948 	.word	0x20008948

0800ca9c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	60f8      	str	r0, [r7, #12]
 800caa4:	60b9      	str	r1, [r7, #8]
 800caa6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d107      	bne.n	800cabe <udp_recv+0x22>
 800caae:	4b08      	ldr	r3, [pc, #32]	@ (800cad0 <udp_recv+0x34>)
 800cab0:	f240 428a 	movw	r2, #1162	@ 0x48a
 800cab4:	4907      	ldr	r1, [pc, #28]	@ (800cad4 <udp_recv+0x38>)
 800cab6:	4808      	ldr	r0, [pc, #32]	@ (800cad8 <udp_recv+0x3c>)
 800cab8:	f002 fbfc 	bl	800f2b4 <printf>
 800cabc:	e005      	b.n	800caca <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	68ba      	ldr	r2, [r7, #8]
 800cac2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	61da      	str	r2, [r3, #28]
}
 800caca:	3710      	adds	r7, #16
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	08015c40 	.word	0x08015c40
 800cad4:	08015f74 	.word	0x08015f74
 800cad8:	08015c94 	.word	0x08015c94

0800cadc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800cae2:	2000      	movs	r0, #0
 800cae4:	f7f8 ff22 	bl	800592c <memp_malloc>
 800cae8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d007      	beq.n	800cb00 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800caf0:	2220      	movs	r2, #32
 800caf2:	2100      	movs	r1, #0
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f002 fcaa 	bl	800f44e <memset>
    pcb->ttl = UDP_TTL;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	22ff      	movs	r2, #255	@ 0xff
 800cafe:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800cb00:	687b      	ldr	r3, [r7, #4]
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3708      	adds	r7, #8
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
	...

0800cb0c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b085      	sub	sp, #20
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d01e      	beq.n	800cb5a <udp_netif_ip_addr_changed+0x4e>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d01a      	beq.n	800cb5a <udp_netif_ip_addr_changed+0x4e>
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d017      	beq.n	800cb5a <udp_netif_ip_addr_changed+0x4e>
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d013      	beq.n	800cb5a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cb32:	4b0d      	ldr	r3, [pc, #52]	@ (800cb68 <udp_netif_ip_addr_changed+0x5c>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	60fb      	str	r3, [r7, #12]
 800cb38:	e00c      	b.n	800cb54 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681a      	ldr	r2, [r3, #0]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d103      	bne.n	800cb4e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	68db      	ldr	r3, [r3, #12]
 800cb52:	60fb      	str	r3, [r7, #12]
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1ef      	bne.n	800cb3a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800cb5a:	bf00      	nop
 800cb5c:	3714      	adds	r7, #20
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr
 800cb66:	bf00      	nop
 800cb68:	20008948 	.word	0x20008948

0800cb6c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800cb74:	4915      	ldr	r1, [pc, #84]	@ (800cbcc <etharp_free_entry+0x60>)
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	4613      	mov	r3, r2
 800cb7a:	005b      	lsls	r3, r3, #1
 800cb7c:	4413      	add	r3, r2
 800cb7e:	00db      	lsls	r3, r3, #3
 800cb80:	440b      	add	r3, r1
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d013      	beq.n	800cbb0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800cb88:	4910      	ldr	r1, [pc, #64]	@ (800cbcc <etharp_free_entry+0x60>)
 800cb8a:	687a      	ldr	r2, [r7, #4]
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	005b      	lsls	r3, r3, #1
 800cb90:	4413      	add	r3, r2
 800cb92:	00db      	lsls	r3, r3, #3
 800cb94:	440b      	add	r3, r1
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f7f9 fdad 	bl	80066f8 <pbuf_free>
    arp_table[i].q = NULL;
 800cb9e:	490b      	ldr	r1, [pc, #44]	@ (800cbcc <etharp_free_entry+0x60>)
 800cba0:	687a      	ldr	r2, [r7, #4]
 800cba2:	4613      	mov	r3, r2
 800cba4:	005b      	lsls	r3, r3, #1
 800cba6:	4413      	add	r3, r2
 800cba8:	00db      	lsls	r3, r3, #3
 800cbaa:	440b      	add	r3, r1
 800cbac:	2200      	movs	r2, #0
 800cbae:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800cbb0:	4906      	ldr	r1, [pc, #24]	@ (800cbcc <etharp_free_entry+0x60>)
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	005b      	lsls	r3, r3, #1
 800cbb8:	4413      	add	r3, r2
 800cbba:	00db      	lsls	r3, r3, #3
 800cbbc:	440b      	add	r3, r1
 800cbbe:	3314      	adds	r3, #20
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800cbc4:	bf00      	nop
 800cbc6:	3708      	adds	r7, #8
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	2000894c 	.word	0x2000894c

0800cbd0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	607b      	str	r3, [r7, #4]
 800cbda:	e096      	b.n	800cd0a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800cbdc:	494f      	ldr	r1, [pc, #316]	@ (800cd1c <etharp_tmr+0x14c>)
 800cbde:	687a      	ldr	r2, [r7, #4]
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	005b      	lsls	r3, r3, #1
 800cbe4:	4413      	add	r3, r2
 800cbe6:	00db      	lsls	r3, r3, #3
 800cbe8:	440b      	add	r3, r1
 800cbea:	3314      	adds	r3, #20
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800cbf0:	78fb      	ldrb	r3, [r7, #3]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	f000 8086 	beq.w	800cd04 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800cbf8:	4948      	ldr	r1, [pc, #288]	@ (800cd1c <etharp_tmr+0x14c>)
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	4613      	mov	r3, r2
 800cbfe:	005b      	lsls	r3, r3, #1
 800cc00:	4413      	add	r3, r2
 800cc02:	00db      	lsls	r3, r3, #3
 800cc04:	440b      	add	r3, r1
 800cc06:	3312      	adds	r3, #18
 800cc08:	881b      	ldrh	r3, [r3, #0]
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	b298      	uxth	r0, r3
 800cc0e:	4943      	ldr	r1, [pc, #268]	@ (800cd1c <etharp_tmr+0x14c>)
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	4613      	mov	r3, r2
 800cc14:	005b      	lsls	r3, r3, #1
 800cc16:	4413      	add	r3, r2
 800cc18:	00db      	lsls	r3, r3, #3
 800cc1a:	440b      	add	r3, r1
 800cc1c:	3312      	adds	r3, #18
 800cc1e:	4602      	mov	r2, r0
 800cc20:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cc22:	493e      	ldr	r1, [pc, #248]	@ (800cd1c <etharp_tmr+0x14c>)
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	4613      	mov	r3, r2
 800cc28:	005b      	lsls	r3, r3, #1
 800cc2a:	4413      	add	r3, r2
 800cc2c:	00db      	lsls	r3, r3, #3
 800cc2e:	440b      	add	r3, r1
 800cc30:	3312      	adds	r3, #18
 800cc32:	881b      	ldrh	r3, [r3, #0]
 800cc34:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800cc38:	d215      	bcs.n	800cc66 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cc3a:	4938      	ldr	r1, [pc, #224]	@ (800cd1c <etharp_tmr+0x14c>)
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	4613      	mov	r3, r2
 800cc40:	005b      	lsls	r3, r3, #1
 800cc42:	4413      	add	r3, r2
 800cc44:	00db      	lsls	r3, r3, #3
 800cc46:	440b      	add	r3, r1
 800cc48:	3314      	adds	r3, #20
 800cc4a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d10e      	bne.n	800cc6e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800cc50:	4932      	ldr	r1, [pc, #200]	@ (800cd1c <etharp_tmr+0x14c>)
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	4613      	mov	r3, r2
 800cc56:	005b      	lsls	r3, r3, #1
 800cc58:	4413      	add	r3, r2
 800cc5a:	00db      	lsls	r3, r3, #3
 800cc5c:	440b      	add	r3, r1
 800cc5e:	3312      	adds	r3, #18
 800cc60:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cc62:	2b04      	cmp	r3, #4
 800cc64:	d903      	bls.n	800cc6e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f7ff ff80 	bl	800cb6c <etharp_free_entry>
 800cc6c:	e04a      	b.n	800cd04 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800cc6e:	492b      	ldr	r1, [pc, #172]	@ (800cd1c <etharp_tmr+0x14c>)
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	4613      	mov	r3, r2
 800cc74:	005b      	lsls	r3, r3, #1
 800cc76:	4413      	add	r3, r2
 800cc78:	00db      	lsls	r3, r3, #3
 800cc7a:	440b      	add	r3, r1
 800cc7c:	3314      	adds	r3, #20
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	2b03      	cmp	r3, #3
 800cc82:	d10a      	bne.n	800cc9a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800cc84:	4925      	ldr	r1, [pc, #148]	@ (800cd1c <etharp_tmr+0x14c>)
 800cc86:	687a      	ldr	r2, [r7, #4]
 800cc88:	4613      	mov	r3, r2
 800cc8a:	005b      	lsls	r3, r3, #1
 800cc8c:	4413      	add	r3, r2
 800cc8e:	00db      	lsls	r3, r3, #3
 800cc90:	440b      	add	r3, r1
 800cc92:	3314      	adds	r3, #20
 800cc94:	2204      	movs	r2, #4
 800cc96:	701a      	strb	r2, [r3, #0]
 800cc98:	e034      	b.n	800cd04 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800cc9a:	4920      	ldr	r1, [pc, #128]	@ (800cd1c <etharp_tmr+0x14c>)
 800cc9c:	687a      	ldr	r2, [r7, #4]
 800cc9e:	4613      	mov	r3, r2
 800cca0:	005b      	lsls	r3, r3, #1
 800cca2:	4413      	add	r3, r2
 800cca4:	00db      	lsls	r3, r3, #3
 800cca6:	440b      	add	r3, r1
 800cca8:	3314      	adds	r3, #20
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	2b04      	cmp	r3, #4
 800ccae:	d10a      	bne.n	800ccc6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ccb0:	491a      	ldr	r1, [pc, #104]	@ (800cd1c <etharp_tmr+0x14c>)
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	4613      	mov	r3, r2
 800ccb6:	005b      	lsls	r3, r3, #1
 800ccb8:	4413      	add	r3, r2
 800ccba:	00db      	lsls	r3, r3, #3
 800ccbc:	440b      	add	r3, r1
 800ccbe:	3314      	adds	r3, #20
 800ccc0:	2202      	movs	r2, #2
 800ccc2:	701a      	strb	r2, [r3, #0]
 800ccc4:	e01e      	b.n	800cd04 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ccc6:	4915      	ldr	r1, [pc, #84]	@ (800cd1c <etharp_tmr+0x14c>)
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	4613      	mov	r3, r2
 800cccc:	005b      	lsls	r3, r3, #1
 800ccce:	4413      	add	r3, r2
 800ccd0:	00db      	lsls	r3, r3, #3
 800ccd2:	440b      	add	r3, r1
 800ccd4:	3314      	adds	r3, #20
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d113      	bne.n	800cd04 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ccdc:	490f      	ldr	r1, [pc, #60]	@ (800cd1c <etharp_tmr+0x14c>)
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	4613      	mov	r3, r2
 800cce2:	005b      	lsls	r3, r3, #1
 800cce4:	4413      	add	r3, r2
 800cce6:	00db      	lsls	r3, r3, #3
 800cce8:	440b      	add	r3, r1
 800ccea:	3308      	adds	r3, #8
 800ccec:	6818      	ldr	r0, [r3, #0]
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	4613      	mov	r3, r2
 800ccf2:	005b      	lsls	r3, r3, #1
 800ccf4:	4413      	add	r3, r2
 800ccf6:	00db      	lsls	r3, r3, #3
 800ccf8:	4a08      	ldr	r2, [pc, #32]	@ (800cd1c <etharp_tmr+0x14c>)
 800ccfa:	4413      	add	r3, r2
 800ccfc:	3304      	adds	r3, #4
 800ccfe:	4619      	mov	r1, r3
 800cd00:	f000 fe6e 	bl	800d9e0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	3301      	adds	r3, #1
 800cd08:	607b      	str	r3, [r7, #4]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2b09      	cmp	r3, #9
 800cd0e:	f77f af65 	ble.w	800cbdc <etharp_tmr+0xc>
      }
    }
  }
}
 800cd12:	bf00      	nop
 800cd14:	bf00      	nop
 800cd16:	3708      	adds	r7, #8
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	2000894c 	.word	0x2000894c

0800cd20 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b08a      	sub	sp, #40	@ 0x28
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	460b      	mov	r3, r1
 800cd2a:	607a      	str	r2, [r7, #4]
 800cd2c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800cd2e:	230a      	movs	r3, #10
 800cd30:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800cd32:	230a      	movs	r3, #10
 800cd34:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800cd36:	230a      	movs	r3, #10
 800cd38:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800cd3e:	230a      	movs	r3, #10
 800cd40:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800cd42:	2300      	movs	r3, #0
 800cd44:	83bb      	strh	r3, [r7, #28]
 800cd46:	2300      	movs	r3, #0
 800cd48:	837b      	strh	r3, [r7, #26]
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd4e:	2300      	movs	r3, #0
 800cd50:	843b      	strh	r3, [r7, #32]
 800cd52:	e0ae      	b.n	800ceb2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cd54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd58:	49a6      	ldr	r1, [pc, #664]	@ (800cff4 <etharp_find_entry+0x2d4>)
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	005b      	lsls	r3, r3, #1
 800cd5e:	4413      	add	r3, r2
 800cd60:	00db      	lsls	r3, r3, #3
 800cd62:	440b      	add	r3, r1
 800cd64:	3314      	adds	r3, #20
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cd6a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800cd6e:	2b0a      	cmp	r3, #10
 800cd70:	d105      	bne.n	800cd7e <etharp_find_entry+0x5e>
 800cd72:	7dfb      	ldrb	r3, [r7, #23]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d102      	bne.n	800cd7e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800cd78:	8c3b      	ldrh	r3, [r7, #32]
 800cd7a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cd7c:	e095      	b.n	800ceaa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cd7e:	7dfb      	ldrb	r3, [r7, #23]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	f000 8092 	beq.w	800ceaa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cd86:	7dfb      	ldrb	r3, [r7, #23]
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d009      	beq.n	800cda0 <etharp_find_entry+0x80>
 800cd8c:	7dfb      	ldrb	r3, [r7, #23]
 800cd8e:	2b01      	cmp	r3, #1
 800cd90:	d806      	bhi.n	800cda0 <etharp_find_entry+0x80>
 800cd92:	4b99      	ldr	r3, [pc, #612]	@ (800cff8 <etharp_find_entry+0x2d8>)
 800cd94:	f240 1223 	movw	r2, #291	@ 0x123
 800cd98:	4998      	ldr	r1, [pc, #608]	@ (800cffc <etharp_find_entry+0x2dc>)
 800cd9a:	4899      	ldr	r0, [pc, #612]	@ (800d000 <etharp_find_entry+0x2e0>)
 800cd9c:	f002 fa8a 	bl	800f2b4 <printf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d020      	beq.n	800cde8 <etharp_find_entry+0xc8>
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	6819      	ldr	r1, [r3, #0]
 800cdaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdae:	4891      	ldr	r0, [pc, #580]	@ (800cff4 <etharp_find_entry+0x2d4>)
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	005b      	lsls	r3, r3, #1
 800cdb4:	4413      	add	r3, r2
 800cdb6:	00db      	lsls	r3, r3, #3
 800cdb8:	4403      	add	r3, r0
 800cdba:	3304      	adds	r3, #4
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	4299      	cmp	r1, r3
 800cdc0:	d112      	bne.n	800cde8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d00c      	beq.n	800cde2 <etharp_find_entry+0xc2>
 800cdc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdcc:	4989      	ldr	r1, [pc, #548]	@ (800cff4 <etharp_find_entry+0x2d4>)
 800cdce:	4613      	mov	r3, r2
 800cdd0:	005b      	lsls	r3, r3, #1
 800cdd2:	4413      	add	r3, r2
 800cdd4:	00db      	lsls	r3, r3, #3
 800cdd6:	440b      	add	r3, r1
 800cdd8:	3308      	adds	r3, #8
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d102      	bne.n	800cde8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cde2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cde6:	e100      	b.n	800cfea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cde8:	7dfb      	ldrb	r3, [r7, #23]
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	d140      	bne.n	800ce70 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cdee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdf2:	4980      	ldr	r1, [pc, #512]	@ (800cff4 <etharp_find_entry+0x2d4>)
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	005b      	lsls	r3, r3, #1
 800cdf8:	4413      	add	r3, r2
 800cdfa:	00db      	lsls	r3, r3, #3
 800cdfc:	440b      	add	r3, r1
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d01a      	beq.n	800ce3a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ce04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce08:	497a      	ldr	r1, [pc, #488]	@ (800cff4 <etharp_find_entry+0x2d4>)
 800ce0a:	4613      	mov	r3, r2
 800ce0c:	005b      	lsls	r3, r3, #1
 800ce0e:	4413      	add	r3, r2
 800ce10:	00db      	lsls	r3, r3, #3
 800ce12:	440b      	add	r3, r1
 800ce14:	3312      	adds	r3, #18
 800ce16:	881b      	ldrh	r3, [r3, #0]
 800ce18:	8bba      	ldrh	r2, [r7, #28]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d845      	bhi.n	800ceaa <etharp_find_entry+0x18a>
            old_queue = i;
 800ce1e:	8c3b      	ldrh	r3, [r7, #32]
 800ce20:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ce22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce26:	4973      	ldr	r1, [pc, #460]	@ (800cff4 <etharp_find_entry+0x2d4>)
 800ce28:	4613      	mov	r3, r2
 800ce2a:	005b      	lsls	r3, r3, #1
 800ce2c:	4413      	add	r3, r2
 800ce2e:	00db      	lsls	r3, r3, #3
 800ce30:	440b      	add	r3, r1
 800ce32:	3312      	adds	r3, #18
 800ce34:	881b      	ldrh	r3, [r3, #0]
 800ce36:	83bb      	strh	r3, [r7, #28]
 800ce38:	e037      	b.n	800ceaa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ce3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce3e:	496d      	ldr	r1, [pc, #436]	@ (800cff4 <etharp_find_entry+0x2d4>)
 800ce40:	4613      	mov	r3, r2
 800ce42:	005b      	lsls	r3, r3, #1
 800ce44:	4413      	add	r3, r2
 800ce46:	00db      	lsls	r3, r3, #3
 800ce48:	440b      	add	r3, r1
 800ce4a:	3312      	adds	r3, #18
 800ce4c:	881b      	ldrh	r3, [r3, #0]
 800ce4e:	8b7a      	ldrh	r2, [r7, #26]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d82a      	bhi.n	800ceaa <etharp_find_entry+0x18a>
            old_pending = i;
 800ce54:	8c3b      	ldrh	r3, [r7, #32]
 800ce56:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800ce58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce5c:	4965      	ldr	r1, [pc, #404]	@ (800cff4 <etharp_find_entry+0x2d4>)
 800ce5e:	4613      	mov	r3, r2
 800ce60:	005b      	lsls	r3, r3, #1
 800ce62:	4413      	add	r3, r2
 800ce64:	00db      	lsls	r3, r3, #3
 800ce66:	440b      	add	r3, r1
 800ce68:	3312      	adds	r3, #18
 800ce6a:	881b      	ldrh	r3, [r3, #0]
 800ce6c:	837b      	strh	r3, [r7, #26]
 800ce6e:	e01c      	b.n	800ceaa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ce70:	7dfb      	ldrb	r3, [r7, #23]
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	d919      	bls.n	800ceaa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ce76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce7a:	495e      	ldr	r1, [pc, #376]	@ (800cff4 <etharp_find_entry+0x2d4>)
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	005b      	lsls	r3, r3, #1
 800ce80:	4413      	add	r3, r2
 800ce82:	00db      	lsls	r3, r3, #3
 800ce84:	440b      	add	r3, r1
 800ce86:	3312      	adds	r3, #18
 800ce88:	881b      	ldrh	r3, [r3, #0]
 800ce8a:	8b3a      	ldrh	r2, [r7, #24]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d80c      	bhi.n	800ceaa <etharp_find_entry+0x18a>
            old_stable = i;
 800ce90:	8c3b      	ldrh	r3, [r7, #32]
 800ce92:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800ce94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce98:	4956      	ldr	r1, [pc, #344]	@ (800cff4 <etharp_find_entry+0x2d4>)
 800ce9a:	4613      	mov	r3, r2
 800ce9c:	005b      	lsls	r3, r3, #1
 800ce9e:	4413      	add	r3, r2
 800cea0:	00db      	lsls	r3, r3, #3
 800cea2:	440b      	add	r3, r1
 800cea4:	3312      	adds	r3, #18
 800cea6:	881b      	ldrh	r3, [r3, #0]
 800cea8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ceaa:	8c3b      	ldrh	r3, [r7, #32]
 800ceac:	3301      	adds	r3, #1
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	843b      	strh	r3, [r7, #32]
 800ceb2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ceb6:	2b09      	cmp	r3, #9
 800ceb8:	f77f af4c 	ble.w	800cd54 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cebc:	7afb      	ldrb	r3, [r7, #11]
 800cebe:	f003 0302 	and.w	r3, r3, #2
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d108      	bne.n	800ced8 <etharp_find_entry+0x1b8>
 800cec6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800ceca:	2b0a      	cmp	r3, #10
 800cecc:	d107      	bne.n	800cede <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800cece:	7afb      	ldrb	r3, [r7, #11]
 800ced0:	f003 0301 	and.w	r3, r3, #1
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d102      	bne.n	800cede <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ced8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cedc:	e085      	b.n	800cfea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800cede:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800cee2:	2b09      	cmp	r3, #9
 800cee4:	dc02      	bgt.n	800ceec <etharp_find_entry+0x1cc>
    i = empty;
 800cee6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cee8:	843b      	strh	r3, [r7, #32]
 800ceea:	e039      	b.n	800cf60 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ceec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800cef0:	2b09      	cmp	r3, #9
 800cef2:	dc14      	bgt.n	800cf1e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800cef4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cef6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800cef8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cefc:	493d      	ldr	r1, [pc, #244]	@ (800cff4 <etharp_find_entry+0x2d4>)
 800cefe:	4613      	mov	r3, r2
 800cf00:	005b      	lsls	r3, r3, #1
 800cf02:	4413      	add	r3, r2
 800cf04:	00db      	lsls	r3, r3, #3
 800cf06:	440b      	add	r3, r1
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d018      	beq.n	800cf40 <etharp_find_entry+0x220>
 800cf0e:	4b3a      	ldr	r3, [pc, #232]	@ (800cff8 <etharp_find_entry+0x2d8>)
 800cf10:	f240 126d 	movw	r2, #365	@ 0x16d
 800cf14:	493b      	ldr	r1, [pc, #236]	@ (800d004 <etharp_find_entry+0x2e4>)
 800cf16:	483a      	ldr	r0, [pc, #232]	@ (800d000 <etharp_find_entry+0x2e0>)
 800cf18:	f002 f9cc 	bl	800f2b4 <printf>
 800cf1c:	e010      	b.n	800cf40 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800cf1e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800cf22:	2b09      	cmp	r3, #9
 800cf24:	dc02      	bgt.n	800cf2c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800cf26:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cf28:	843b      	strh	r3, [r7, #32]
 800cf2a:	e009      	b.n	800cf40 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800cf2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cf30:	2b09      	cmp	r3, #9
 800cf32:	dc02      	bgt.n	800cf3a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800cf34:	8bfb      	ldrh	r3, [r7, #30]
 800cf36:	843b      	strh	r3, [r7, #32]
 800cf38:	e002      	b.n	800cf40 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800cf3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cf3e:	e054      	b.n	800cfea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cf40:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf44:	2b09      	cmp	r3, #9
 800cf46:	dd06      	ble.n	800cf56 <etharp_find_entry+0x236>
 800cf48:	4b2b      	ldr	r3, [pc, #172]	@ (800cff8 <etharp_find_entry+0x2d8>)
 800cf4a:	f240 127f 	movw	r2, #383	@ 0x17f
 800cf4e:	492e      	ldr	r1, [pc, #184]	@ (800d008 <etharp_find_entry+0x2e8>)
 800cf50:	482b      	ldr	r0, [pc, #172]	@ (800d000 <etharp_find_entry+0x2e0>)
 800cf52:	f002 f9af 	bl	800f2b4 <printf>
    etharp_free_entry(i);
 800cf56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7ff fe06 	bl	800cb6c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cf60:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf64:	2b09      	cmp	r3, #9
 800cf66:	dd06      	ble.n	800cf76 <etharp_find_entry+0x256>
 800cf68:	4b23      	ldr	r3, [pc, #140]	@ (800cff8 <etharp_find_entry+0x2d8>)
 800cf6a:	f240 1283 	movw	r2, #387	@ 0x183
 800cf6e:	4926      	ldr	r1, [pc, #152]	@ (800d008 <etharp_find_entry+0x2e8>)
 800cf70:	4823      	ldr	r0, [pc, #140]	@ (800d000 <etharp_find_entry+0x2e0>)
 800cf72:	f002 f99f 	bl	800f2b4 <printf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800cf76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf7a:	491e      	ldr	r1, [pc, #120]	@ (800cff4 <etharp_find_entry+0x2d4>)
 800cf7c:	4613      	mov	r3, r2
 800cf7e:	005b      	lsls	r3, r3, #1
 800cf80:	4413      	add	r3, r2
 800cf82:	00db      	lsls	r3, r3, #3
 800cf84:	440b      	add	r3, r1
 800cf86:	3314      	adds	r3, #20
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d006      	beq.n	800cf9c <etharp_find_entry+0x27c>
 800cf8e:	4b1a      	ldr	r3, [pc, #104]	@ (800cff8 <etharp_find_entry+0x2d8>)
 800cf90:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800cf94:	491d      	ldr	r1, [pc, #116]	@ (800d00c <etharp_find_entry+0x2ec>)
 800cf96:	481a      	ldr	r0, [pc, #104]	@ (800d000 <etharp_find_entry+0x2e0>)
 800cf98:	f002 f98c 	bl	800f2b4 <printf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d00b      	beq.n	800cfba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800cfa2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	6819      	ldr	r1, [r3, #0]
 800cfaa:	4812      	ldr	r0, [pc, #72]	@ (800cff4 <etharp_find_entry+0x2d4>)
 800cfac:	4613      	mov	r3, r2
 800cfae:	005b      	lsls	r3, r3, #1
 800cfb0:	4413      	add	r3, r2
 800cfb2:	00db      	lsls	r3, r3, #3
 800cfb4:	4403      	add	r3, r0
 800cfb6:	3304      	adds	r3, #4
 800cfb8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800cfba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfbe:	490d      	ldr	r1, [pc, #52]	@ (800cff4 <etharp_find_entry+0x2d4>)
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	005b      	lsls	r3, r3, #1
 800cfc4:	4413      	add	r3, r2
 800cfc6:	00db      	lsls	r3, r3, #3
 800cfc8:	440b      	add	r3, r1
 800cfca:	3312      	adds	r3, #18
 800cfcc:	2200      	movs	r2, #0
 800cfce:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800cfd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfd4:	4907      	ldr	r1, [pc, #28]	@ (800cff4 <etharp_find_entry+0x2d4>)
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	005b      	lsls	r3, r3, #1
 800cfda:	4413      	add	r3, r2
 800cfdc:	00db      	lsls	r3, r3, #3
 800cfde:	440b      	add	r3, r1
 800cfe0:	3308      	adds	r3, #8
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800cfe6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3728      	adds	r7, #40	@ 0x28
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	2000894c 	.word	0x2000894c
 800cff8:	08015fa4 	.word	0x08015fa4
 800cffc:	08015fdc 	.word	0x08015fdc
 800d000:	0801601c 	.word	0x0801601c
 800d004:	08016044 	.word	0x08016044
 800d008:	0801605c 	.word	0x0801605c
 800d00c:	08016070 	.word	0x08016070

0800d010 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b088      	sub	sp, #32
 800d014:	af02      	add	r7, sp, #8
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	60b9      	str	r1, [r7, #8]
 800d01a:	607a      	str	r2, [r7, #4]
 800d01c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d024:	2b06      	cmp	r3, #6
 800d026:	d006      	beq.n	800d036 <etharp_update_arp_entry+0x26>
 800d028:	4b48      	ldr	r3, [pc, #288]	@ (800d14c <etharp_update_arp_entry+0x13c>)
 800d02a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800d02e:	4948      	ldr	r1, [pc, #288]	@ (800d150 <etharp_update_arp_entry+0x140>)
 800d030:	4848      	ldr	r0, [pc, #288]	@ (800d154 <etharp_update_arp_entry+0x144>)
 800d032:	f002 f93f 	bl	800f2b4 <printf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d012      	beq.n	800d062 <etharp_update_arp_entry+0x52>
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d00e      	beq.n	800d062 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	68f9      	ldr	r1, [r7, #12]
 800d04a:	4618      	mov	r0, r3
 800d04c:	f001 f8fe 	bl	800e24c <ip4_addr_isbroadcast_u32>
 800d050:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d052:	2b00      	cmp	r3, #0
 800d054:	d105      	bne.n	800d062 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d05e:	2be0      	cmp	r3, #224	@ 0xe0
 800d060:	d102      	bne.n	800d068 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d062:	f06f 030f 	mvn.w	r3, #15
 800d066:	e06c      	b.n	800d142 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d068:	78fb      	ldrb	r3, [r7, #3]
 800d06a:	68fa      	ldr	r2, [r7, #12]
 800d06c:	4619      	mov	r1, r3
 800d06e:	68b8      	ldr	r0, [r7, #8]
 800d070:	f7ff fe56 	bl	800cd20 <etharp_find_entry>
 800d074:	4603      	mov	r3, r0
 800d076:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d078:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	da02      	bge.n	800d086 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d080:	8afb      	ldrh	r3, [r7, #22]
 800d082:	b25b      	sxtb	r3, r3
 800d084:	e05d      	b.n	800d142 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d086:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d08a:	4933      	ldr	r1, [pc, #204]	@ (800d158 <etharp_update_arp_entry+0x148>)
 800d08c:	4613      	mov	r3, r2
 800d08e:	005b      	lsls	r3, r3, #1
 800d090:	4413      	add	r3, r2
 800d092:	00db      	lsls	r3, r3, #3
 800d094:	440b      	add	r3, r1
 800d096:	3314      	adds	r3, #20
 800d098:	2202      	movs	r2, #2
 800d09a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d09c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0a0:	492d      	ldr	r1, [pc, #180]	@ (800d158 <etharp_update_arp_entry+0x148>)
 800d0a2:	4613      	mov	r3, r2
 800d0a4:	005b      	lsls	r3, r3, #1
 800d0a6:	4413      	add	r3, r2
 800d0a8:	00db      	lsls	r3, r3, #3
 800d0aa:	440b      	add	r3, r1
 800d0ac:	3308      	adds	r3, #8
 800d0ae:	68fa      	ldr	r2, [r7, #12]
 800d0b0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d0b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	005b      	lsls	r3, r3, #1
 800d0ba:	4413      	add	r3, r2
 800d0bc:	00db      	lsls	r3, r3, #3
 800d0be:	3308      	adds	r3, #8
 800d0c0:	4a25      	ldr	r2, [pc, #148]	@ (800d158 <etharp_update_arp_entry+0x148>)
 800d0c2:	4413      	add	r3, r2
 800d0c4:	3304      	adds	r3, #4
 800d0c6:	2206      	movs	r2, #6
 800d0c8:	6879      	ldr	r1, [r7, #4]
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f002 fa3c 	bl	800f548 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d0d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0d4:	4920      	ldr	r1, [pc, #128]	@ (800d158 <etharp_update_arp_entry+0x148>)
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	005b      	lsls	r3, r3, #1
 800d0da:	4413      	add	r3, r2
 800d0dc:	00db      	lsls	r3, r3, #3
 800d0de:	440b      	add	r3, r1
 800d0e0:	3312      	adds	r3, #18
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d0e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0ea:	491b      	ldr	r1, [pc, #108]	@ (800d158 <etharp_update_arp_entry+0x148>)
 800d0ec:	4613      	mov	r3, r2
 800d0ee:	005b      	lsls	r3, r3, #1
 800d0f0:	4413      	add	r3, r2
 800d0f2:	00db      	lsls	r3, r3, #3
 800d0f4:	440b      	add	r3, r1
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d021      	beq.n	800d140 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d0fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d100:	4915      	ldr	r1, [pc, #84]	@ (800d158 <etharp_update_arp_entry+0x148>)
 800d102:	4613      	mov	r3, r2
 800d104:	005b      	lsls	r3, r3, #1
 800d106:	4413      	add	r3, r2
 800d108:	00db      	lsls	r3, r3, #3
 800d10a:	440b      	add	r3, r1
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d110:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d114:	4910      	ldr	r1, [pc, #64]	@ (800d158 <etharp_update_arp_entry+0x148>)
 800d116:	4613      	mov	r3, r2
 800d118:	005b      	lsls	r3, r3, #1
 800d11a:	4413      	add	r3, r2
 800d11c:	00db      	lsls	r3, r3, #3
 800d11e:	440b      	add	r3, r1
 800d120:	2200      	movs	r2, #0
 800d122:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800d12a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6939      	ldr	r1, [r7, #16]
 800d134:	68f8      	ldr	r0, [r7, #12]
 800d136:	f001 ff97 	bl	800f068 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d13a:	6938      	ldr	r0, [r7, #16]
 800d13c:	f7f9 fadc 	bl	80066f8 <pbuf_free>
  }
  return ERR_OK;
 800d140:	2300      	movs	r3, #0
}
 800d142:	4618      	mov	r0, r3
 800d144:	3718      	adds	r7, #24
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	08015fa4 	.word	0x08015fa4
 800d150:	0801609c 	.word	0x0801609c
 800d154:	0801601c 	.word	0x0801601c
 800d158:	2000894c 	.word	0x2000894c

0800d15c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d164:	2300      	movs	r3, #0
 800d166:	60fb      	str	r3, [r7, #12]
 800d168:	e01e      	b.n	800d1a8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d16a:	4913      	ldr	r1, [pc, #76]	@ (800d1b8 <etharp_cleanup_netif+0x5c>)
 800d16c:	68fa      	ldr	r2, [r7, #12]
 800d16e:	4613      	mov	r3, r2
 800d170:	005b      	lsls	r3, r3, #1
 800d172:	4413      	add	r3, r2
 800d174:	00db      	lsls	r3, r3, #3
 800d176:	440b      	add	r3, r1
 800d178:	3314      	adds	r3, #20
 800d17a:	781b      	ldrb	r3, [r3, #0]
 800d17c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d17e:	7afb      	ldrb	r3, [r7, #11]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d00e      	beq.n	800d1a2 <etharp_cleanup_netif+0x46>
 800d184:	490c      	ldr	r1, [pc, #48]	@ (800d1b8 <etharp_cleanup_netif+0x5c>)
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	4613      	mov	r3, r2
 800d18a:	005b      	lsls	r3, r3, #1
 800d18c:	4413      	add	r3, r2
 800d18e:	00db      	lsls	r3, r3, #3
 800d190:	440b      	add	r3, r1
 800d192:	3308      	adds	r3, #8
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	429a      	cmp	r2, r3
 800d19a:	d102      	bne.n	800d1a2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f7ff fce5 	bl	800cb6c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	60fb      	str	r3, [r7, #12]
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2b09      	cmp	r3, #9
 800d1ac:	dddd      	ble.n	800d16a <etharp_cleanup_netif+0xe>
    }
  }
}
 800d1ae:	bf00      	nop
 800d1b0:	bf00      	nop
 800d1b2:	3710      	adds	r7, #16
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}
 800d1b8:	2000894c 	.word	0x2000894c

0800d1bc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d1bc:	b5b0      	push	{r4, r5, r7, lr}
 800d1be:	b08a      	sub	sp, #40	@ 0x28
 800d1c0:	af04      	add	r7, sp, #16
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d107      	bne.n	800d1dc <etharp_input+0x20>
 800d1cc:	4b3d      	ldr	r3, [pc, #244]	@ (800d2c4 <etharp_input+0x108>)
 800d1ce:	f240 228a 	movw	r2, #650	@ 0x28a
 800d1d2:	493d      	ldr	r1, [pc, #244]	@ (800d2c8 <etharp_input+0x10c>)
 800d1d4:	483d      	ldr	r0, [pc, #244]	@ (800d2cc <etharp_input+0x110>)
 800d1d6:	f002 f86d 	bl	800f2b4 <printf>
 800d1da:	e06f      	b.n	800d2bc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	881b      	ldrh	r3, [r3, #0]
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d1ec:	d10c      	bne.n	800d208 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d1f2:	2b06      	cmp	r3, #6
 800d1f4:	d108      	bne.n	800d208 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d1fa:	2b04      	cmp	r3, #4
 800d1fc:	d104      	bne.n	800d208 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	885b      	ldrh	r3, [r3, #2]
 800d202:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d204:	2b08      	cmp	r3, #8
 800d206:	d003      	beq.n	800d210 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f7f9 fa75 	bl	80066f8 <pbuf_free>
    return;
 800d20e:	e055      	b.n	800d2bc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	330e      	adds	r3, #14
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	3318      	adds	r3, #24
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	3304      	adds	r3, #4
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d102      	bne.n	800d230 <etharp_input+0x74>
    for_us = 0;
 800d22a:	2300      	movs	r3, #0
 800d22c:	75fb      	strb	r3, [r7, #23]
 800d22e:	e009      	b.n	800d244 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d230:	68ba      	ldr	r2, [r7, #8]
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	3304      	adds	r3, #4
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	429a      	cmp	r2, r3
 800d23a:	bf0c      	ite	eq
 800d23c:	2301      	moveq	r3, #1
 800d23e:	2300      	movne	r3, #0
 800d240:	b2db      	uxtb	r3, r3
 800d242:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	f103 0208 	add.w	r2, r3, #8
 800d24a:	7dfb      	ldrb	r3, [r7, #23]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d001      	beq.n	800d254 <etharp_input+0x98>
 800d250:	2301      	movs	r3, #1
 800d252:	e000      	b.n	800d256 <etharp_input+0x9a>
 800d254:	2302      	movs	r3, #2
 800d256:	f107 010c 	add.w	r1, r7, #12
 800d25a:	6838      	ldr	r0, [r7, #0]
 800d25c:	f7ff fed8 	bl	800d010 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	88db      	ldrh	r3, [r3, #6]
 800d264:	b29b      	uxth	r3, r3
 800d266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d26a:	d003      	beq.n	800d274 <etharp_input+0xb8>
 800d26c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d270:	d01e      	beq.n	800d2b0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d272:	e020      	b.n	800d2b6 <etharp_input+0xfa>
      if (for_us) {
 800d274:	7dfb      	ldrb	r3, [r7, #23]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d01c      	beq.n	800d2b4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d290:	693a      	ldr	r2, [r7, #16]
 800d292:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d294:	2102      	movs	r1, #2
 800d296:	9103      	str	r1, [sp, #12]
 800d298:	f107 010c 	add.w	r1, r7, #12
 800d29c:	9102      	str	r1, [sp, #8]
 800d29e:	9201      	str	r2, [sp, #4]
 800d2a0:	9300      	str	r3, [sp, #0]
 800d2a2:	462b      	mov	r3, r5
 800d2a4:	4622      	mov	r2, r4
 800d2a6:	4601      	mov	r1, r0
 800d2a8:	6838      	ldr	r0, [r7, #0]
 800d2aa:	f000 faeb 	bl	800d884 <etharp_raw>
      break;
 800d2ae:	e001      	b.n	800d2b4 <etharp_input+0xf8>
      break;
 800d2b0:	bf00      	nop
 800d2b2:	e000      	b.n	800d2b6 <etharp_input+0xfa>
      break;
 800d2b4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f7f9 fa1e 	bl	80066f8 <pbuf_free>
}
 800d2bc:	3718      	adds	r7, #24
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bdb0      	pop	{r4, r5, r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	08015fa4 	.word	0x08015fa4
 800d2c8:	080160f4 	.word	0x080160f4
 800d2cc:	0801601c 	.word	0x0801601c

0800d2d0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b086      	sub	sp, #24
 800d2d4:	af02      	add	r7, sp, #8
 800d2d6:	60f8      	str	r0, [r7, #12]
 800d2d8:	60b9      	str	r1, [r7, #8]
 800d2da:	4613      	mov	r3, r2
 800d2dc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d2de:	79fa      	ldrb	r2, [r7, #7]
 800d2e0:	4944      	ldr	r1, [pc, #272]	@ (800d3f4 <etharp_output_to_arp_index+0x124>)
 800d2e2:	4613      	mov	r3, r2
 800d2e4:	005b      	lsls	r3, r3, #1
 800d2e6:	4413      	add	r3, r2
 800d2e8:	00db      	lsls	r3, r3, #3
 800d2ea:	440b      	add	r3, r1
 800d2ec:	3314      	adds	r3, #20
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d806      	bhi.n	800d302 <etharp_output_to_arp_index+0x32>
 800d2f4:	4b40      	ldr	r3, [pc, #256]	@ (800d3f8 <etharp_output_to_arp_index+0x128>)
 800d2f6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800d2fa:	4940      	ldr	r1, [pc, #256]	@ (800d3fc <etharp_output_to_arp_index+0x12c>)
 800d2fc:	4840      	ldr	r0, [pc, #256]	@ (800d400 <etharp_output_to_arp_index+0x130>)
 800d2fe:	f001 ffd9 	bl	800f2b4 <printf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d302:	79fa      	ldrb	r2, [r7, #7]
 800d304:	493b      	ldr	r1, [pc, #236]	@ (800d3f4 <etharp_output_to_arp_index+0x124>)
 800d306:	4613      	mov	r3, r2
 800d308:	005b      	lsls	r3, r3, #1
 800d30a:	4413      	add	r3, r2
 800d30c:	00db      	lsls	r3, r3, #3
 800d30e:	440b      	add	r3, r1
 800d310:	3314      	adds	r3, #20
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	2b02      	cmp	r3, #2
 800d316:	d153      	bne.n	800d3c0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d318:	79fa      	ldrb	r2, [r7, #7]
 800d31a:	4936      	ldr	r1, [pc, #216]	@ (800d3f4 <etharp_output_to_arp_index+0x124>)
 800d31c:	4613      	mov	r3, r2
 800d31e:	005b      	lsls	r3, r3, #1
 800d320:	4413      	add	r3, r2
 800d322:	00db      	lsls	r3, r3, #3
 800d324:	440b      	add	r3, r1
 800d326:	3312      	adds	r3, #18
 800d328:	881b      	ldrh	r3, [r3, #0]
 800d32a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800d32e:	d919      	bls.n	800d364 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d330:	79fa      	ldrb	r2, [r7, #7]
 800d332:	4613      	mov	r3, r2
 800d334:	005b      	lsls	r3, r3, #1
 800d336:	4413      	add	r3, r2
 800d338:	00db      	lsls	r3, r3, #3
 800d33a:	4a2e      	ldr	r2, [pc, #184]	@ (800d3f4 <etharp_output_to_arp_index+0x124>)
 800d33c:	4413      	add	r3, r2
 800d33e:	3304      	adds	r3, #4
 800d340:	4619      	mov	r1, r3
 800d342:	68f8      	ldr	r0, [r7, #12]
 800d344:	f000 fb4c 	bl	800d9e0 <etharp_request>
 800d348:	4603      	mov	r3, r0
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d138      	bne.n	800d3c0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d34e:	79fa      	ldrb	r2, [r7, #7]
 800d350:	4928      	ldr	r1, [pc, #160]	@ (800d3f4 <etharp_output_to_arp_index+0x124>)
 800d352:	4613      	mov	r3, r2
 800d354:	005b      	lsls	r3, r3, #1
 800d356:	4413      	add	r3, r2
 800d358:	00db      	lsls	r3, r3, #3
 800d35a:	440b      	add	r3, r1
 800d35c:	3314      	adds	r3, #20
 800d35e:	2203      	movs	r2, #3
 800d360:	701a      	strb	r2, [r3, #0]
 800d362:	e02d      	b.n	800d3c0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d364:	79fa      	ldrb	r2, [r7, #7]
 800d366:	4923      	ldr	r1, [pc, #140]	@ (800d3f4 <etharp_output_to_arp_index+0x124>)
 800d368:	4613      	mov	r3, r2
 800d36a:	005b      	lsls	r3, r3, #1
 800d36c:	4413      	add	r3, r2
 800d36e:	00db      	lsls	r3, r3, #3
 800d370:	440b      	add	r3, r1
 800d372:	3312      	adds	r3, #18
 800d374:	881b      	ldrh	r3, [r3, #0]
 800d376:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800d37a:	d321      	bcc.n	800d3c0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d37c:	79fa      	ldrb	r2, [r7, #7]
 800d37e:	4613      	mov	r3, r2
 800d380:	005b      	lsls	r3, r3, #1
 800d382:	4413      	add	r3, r2
 800d384:	00db      	lsls	r3, r3, #3
 800d386:	4a1b      	ldr	r2, [pc, #108]	@ (800d3f4 <etharp_output_to_arp_index+0x124>)
 800d388:	4413      	add	r3, r2
 800d38a:	1d19      	adds	r1, r3, #4
 800d38c:	79fa      	ldrb	r2, [r7, #7]
 800d38e:	4613      	mov	r3, r2
 800d390:	005b      	lsls	r3, r3, #1
 800d392:	4413      	add	r3, r2
 800d394:	00db      	lsls	r3, r3, #3
 800d396:	3308      	adds	r3, #8
 800d398:	4a16      	ldr	r2, [pc, #88]	@ (800d3f4 <etharp_output_to_arp_index+0x124>)
 800d39a:	4413      	add	r3, r2
 800d39c:	3304      	adds	r3, #4
 800d39e:	461a      	mov	r2, r3
 800d3a0:	68f8      	ldr	r0, [r7, #12]
 800d3a2:	f000 fafb 	bl	800d99c <etharp_request_dst>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d109      	bne.n	800d3c0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d3ac:	79fa      	ldrb	r2, [r7, #7]
 800d3ae:	4911      	ldr	r1, [pc, #68]	@ (800d3f4 <etharp_output_to_arp_index+0x124>)
 800d3b0:	4613      	mov	r3, r2
 800d3b2:	005b      	lsls	r3, r3, #1
 800d3b4:	4413      	add	r3, r2
 800d3b6:	00db      	lsls	r3, r3, #3
 800d3b8:	440b      	add	r3, r1
 800d3ba:	3314      	adds	r3, #20
 800d3bc:	2203      	movs	r2, #3
 800d3be:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800d3c6:	79fa      	ldrb	r2, [r7, #7]
 800d3c8:	4613      	mov	r3, r2
 800d3ca:	005b      	lsls	r3, r3, #1
 800d3cc:	4413      	add	r3, r2
 800d3ce:	00db      	lsls	r3, r3, #3
 800d3d0:	3308      	adds	r3, #8
 800d3d2:	4a08      	ldr	r2, [pc, #32]	@ (800d3f4 <etharp_output_to_arp_index+0x124>)
 800d3d4:	4413      	add	r3, r2
 800d3d6:	3304      	adds	r3, #4
 800d3d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d3dc:	9200      	str	r2, [sp, #0]
 800d3de:	460a      	mov	r2, r1
 800d3e0:	68b9      	ldr	r1, [r7, #8]
 800d3e2:	68f8      	ldr	r0, [r7, #12]
 800d3e4:	f001 fe40 	bl	800f068 <ethernet_output>
 800d3e8:	4603      	mov	r3, r0
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3710      	adds	r7, #16
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	2000894c 	.word	0x2000894c
 800d3f8:	08015fa4 	.word	0x08015fa4
 800d3fc:	08016114 	.word	0x08016114
 800d400:	0801601c 	.word	0x0801601c

0800d404 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b08a      	sub	sp, #40	@ 0x28
 800d408:	af02      	add	r7, sp, #8
 800d40a:	60f8      	str	r0, [r7, #12]
 800d40c:	60b9      	str	r1, [r7, #8]
 800d40e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d106      	bne.n	800d428 <etharp_output+0x24>
 800d41a:	4b73      	ldr	r3, [pc, #460]	@ (800d5e8 <etharp_output+0x1e4>)
 800d41c:	f240 321e 	movw	r2, #798	@ 0x31e
 800d420:	4972      	ldr	r1, [pc, #456]	@ (800d5ec <etharp_output+0x1e8>)
 800d422:	4873      	ldr	r0, [pc, #460]	@ (800d5f0 <etharp_output+0x1ec>)
 800d424:	f001 ff46 	bl	800f2b4 <printf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d106      	bne.n	800d43c <etharp_output+0x38>
 800d42e:	4b6e      	ldr	r3, [pc, #440]	@ (800d5e8 <etharp_output+0x1e4>)
 800d430:	f240 321f 	movw	r2, #799	@ 0x31f
 800d434:	496f      	ldr	r1, [pc, #444]	@ (800d5f4 <etharp_output+0x1f0>)
 800d436:	486e      	ldr	r0, [pc, #440]	@ (800d5f0 <etharp_output+0x1ec>)
 800d438:	f001 ff3c 	bl	800f2b4 <printf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d106      	bne.n	800d450 <etharp_output+0x4c>
 800d442:	4b69      	ldr	r3, [pc, #420]	@ (800d5e8 <etharp_output+0x1e4>)
 800d444:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800d448:	496b      	ldr	r1, [pc, #428]	@ (800d5f8 <etharp_output+0x1f4>)
 800d44a:	4869      	ldr	r0, [pc, #420]	@ (800d5f0 <etharp_output+0x1ec>)
 800d44c:	f001 ff32 	bl	800f2b4 <printf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	68f9      	ldr	r1, [r7, #12]
 800d456:	4618      	mov	r0, r3
 800d458:	f000 fef8 	bl	800e24c <ip4_addr_isbroadcast_u32>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d002      	beq.n	800d468 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d462:	4b66      	ldr	r3, [pc, #408]	@ (800d5fc <etharp_output+0x1f8>)
 800d464:	61fb      	str	r3, [r7, #28]
 800d466:	e0af      	b.n	800d5c8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d470:	2be0      	cmp	r3, #224	@ 0xe0
 800d472:	d118      	bne.n	800d4a6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d474:	2301      	movs	r3, #1
 800d476:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d478:	2300      	movs	r3, #0
 800d47a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d47c:	235e      	movs	r3, #94	@ 0x5e
 800d47e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	3301      	adds	r3, #1
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	3302      	adds	r3, #2
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	3303      	adds	r3, #3
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d49e:	f107 0310 	add.w	r3, r7, #16
 800d4a2:	61fb      	str	r3, [r7, #28]
 800d4a4:	e090      	b.n	800d5c8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681a      	ldr	r2, [r3, #0]
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	3304      	adds	r3, #4
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	405a      	eors	r2, r3
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	3308      	adds	r3, #8
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	4013      	ands	r3, r2
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d012      	beq.n	800d4e4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d4c4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	d00b      	beq.n	800d4e4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	330c      	adds	r3, #12
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d003      	beq.n	800d4de <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	330c      	adds	r3, #12
 800d4da:	61bb      	str	r3, [r7, #24]
 800d4dc:	e002      	b.n	800d4e4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d4de:	f06f 0303 	mvn.w	r3, #3
 800d4e2:	e07d      	b.n	800d5e0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d4e4:	4b46      	ldr	r3, [pc, #280]	@ (800d600 <etharp_output+0x1fc>)
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	4a46      	ldr	r2, [pc, #280]	@ (800d604 <etharp_output+0x200>)
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	005b      	lsls	r3, r3, #1
 800d4f0:	440b      	add	r3, r1
 800d4f2:	00db      	lsls	r3, r3, #3
 800d4f4:	4413      	add	r3, r2
 800d4f6:	3314      	adds	r3, #20
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d925      	bls.n	800d54a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d4fe:	4b40      	ldr	r3, [pc, #256]	@ (800d600 <etharp_output+0x1fc>)
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	4619      	mov	r1, r3
 800d504:	4a3f      	ldr	r2, [pc, #252]	@ (800d604 <etharp_output+0x200>)
 800d506:	460b      	mov	r3, r1
 800d508:	005b      	lsls	r3, r3, #1
 800d50a:	440b      	add	r3, r1
 800d50c:	00db      	lsls	r3, r3, #3
 800d50e:	4413      	add	r3, r2
 800d510:	3308      	adds	r3, #8
 800d512:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d514:	68fa      	ldr	r2, [r7, #12]
 800d516:	429a      	cmp	r2, r3
 800d518:	d117      	bne.n	800d54a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d51a:	69bb      	ldr	r3, [r7, #24]
 800d51c:	681a      	ldr	r2, [r3, #0]
 800d51e:	4b38      	ldr	r3, [pc, #224]	@ (800d600 <etharp_output+0x1fc>)
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	4618      	mov	r0, r3
 800d524:	4937      	ldr	r1, [pc, #220]	@ (800d604 <etharp_output+0x200>)
 800d526:	4603      	mov	r3, r0
 800d528:	005b      	lsls	r3, r3, #1
 800d52a:	4403      	add	r3, r0
 800d52c:	00db      	lsls	r3, r3, #3
 800d52e:	440b      	add	r3, r1
 800d530:	3304      	adds	r3, #4
 800d532:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d534:	429a      	cmp	r2, r3
 800d536:	d108      	bne.n	800d54a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d538:	4b31      	ldr	r3, [pc, #196]	@ (800d600 <etharp_output+0x1fc>)
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	461a      	mov	r2, r3
 800d53e:	68b9      	ldr	r1, [r7, #8]
 800d540:	68f8      	ldr	r0, [r7, #12]
 800d542:	f7ff fec5 	bl	800d2d0 <etharp_output_to_arp_index>
 800d546:	4603      	mov	r3, r0
 800d548:	e04a      	b.n	800d5e0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d54a:	2300      	movs	r3, #0
 800d54c:	75fb      	strb	r3, [r7, #23]
 800d54e:	e031      	b.n	800d5b4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d550:	7dfa      	ldrb	r2, [r7, #23]
 800d552:	492c      	ldr	r1, [pc, #176]	@ (800d604 <etharp_output+0x200>)
 800d554:	4613      	mov	r3, r2
 800d556:	005b      	lsls	r3, r3, #1
 800d558:	4413      	add	r3, r2
 800d55a:	00db      	lsls	r3, r3, #3
 800d55c:	440b      	add	r3, r1
 800d55e:	3314      	adds	r3, #20
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	2b01      	cmp	r3, #1
 800d564:	d923      	bls.n	800d5ae <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d566:	7dfa      	ldrb	r2, [r7, #23]
 800d568:	4926      	ldr	r1, [pc, #152]	@ (800d604 <etharp_output+0x200>)
 800d56a:	4613      	mov	r3, r2
 800d56c:	005b      	lsls	r3, r3, #1
 800d56e:	4413      	add	r3, r2
 800d570:	00db      	lsls	r3, r3, #3
 800d572:	440b      	add	r3, r1
 800d574:	3308      	adds	r3, #8
 800d576:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d578:	68fa      	ldr	r2, [r7, #12]
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d117      	bne.n	800d5ae <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d57e:	69bb      	ldr	r3, [r7, #24]
 800d580:	6819      	ldr	r1, [r3, #0]
 800d582:	7dfa      	ldrb	r2, [r7, #23]
 800d584:	481f      	ldr	r0, [pc, #124]	@ (800d604 <etharp_output+0x200>)
 800d586:	4613      	mov	r3, r2
 800d588:	005b      	lsls	r3, r3, #1
 800d58a:	4413      	add	r3, r2
 800d58c:	00db      	lsls	r3, r3, #3
 800d58e:	4403      	add	r3, r0
 800d590:	3304      	adds	r3, #4
 800d592:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d594:	4299      	cmp	r1, r3
 800d596:	d10a      	bne.n	800d5ae <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d598:	4a19      	ldr	r2, [pc, #100]	@ (800d600 <etharp_output+0x1fc>)
 800d59a:	7dfb      	ldrb	r3, [r7, #23]
 800d59c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d59e:	7dfb      	ldrb	r3, [r7, #23]
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	68b9      	ldr	r1, [r7, #8]
 800d5a4:	68f8      	ldr	r0, [r7, #12]
 800d5a6:	f7ff fe93 	bl	800d2d0 <etharp_output_to_arp_index>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	e018      	b.n	800d5e0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d5ae:	7dfb      	ldrb	r3, [r7, #23]
 800d5b0:	3301      	adds	r3, #1
 800d5b2:	75fb      	strb	r3, [r7, #23]
 800d5b4:	7dfb      	ldrb	r3, [r7, #23]
 800d5b6:	2b09      	cmp	r3, #9
 800d5b8:	d9ca      	bls.n	800d550 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d5ba:	68ba      	ldr	r2, [r7, #8]
 800d5bc:	69b9      	ldr	r1, [r7, #24]
 800d5be:	68f8      	ldr	r0, [r7, #12]
 800d5c0:	f000 f822 	bl	800d608 <etharp_query>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	e00b      	b.n	800d5e0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800d5ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d5d2:	9300      	str	r3, [sp, #0]
 800d5d4:	69fb      	ldr	r3, [r7, #28]
 800d5d6:	68b9      	ldr	r1, [r7, #8]
 800d5d8:	68f8      	ldr	r0, [r7, #12]
 800d5da:	f001 fd45 	bl	800f068 <ethernet_output>
 800d5de:	4603      	mov	r3, r0
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3720      	adds	r7, #32
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	08015fa4 	.word	0x08015fa4
 800d5ec:	080160f4 	.word	0x080160f4
 800d5f0:	0801601c 	.word	0x0801601c
 800d5f4:	08016144 	.word	0x08016144
 800d5f8:	080160e4 	.word	0x080160e4
 800d5fc:	08016758 	.word	0x08016758
 800d600:	20008a3c 	.word	0x20008a3c
 800d604:	2000894c 	.word	0x2000894c

0800d608 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b08c      	sub	sp, #48	@ 0x30
 800d60c:	af02      	add	r7, sp, #8
 800d60e:	60f8      	str	r0, [r7, #12]
 800d610:	60b9      	str	r1, [r7, #8]
 800d612:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	3326      	adds	r3, #38	@ 0x26
 800d618:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d61a:	23ff      	movs	r3, #255	@ 0xff
 800d61c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800d620:	2300      	movs	r3, #0
 800d622:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	68f9      	ldr	r1, [r7, #12]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f000 fe0e 	bl	800e24c <ip4_addr_isbroadcast_u32>
 800d630:	4603      	mov	r3, r0
 800d632:	2b00      	cmp	r3, #0
 800d634:	d10c      	bne.n	800d650 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d63e:	2be0      	cmp	r3, #224	@ 0xe0
 800d640:	d006      	beq.n	800d650 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d003      	beq.n	800d650 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d102      	bne.n	800d656 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d650:	f06f 030f 	mvn.w	r3, #15
 800d654:	e101      	b.n	800d85a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d656:	68fa      	ldr	r2, [r7, #12]
 800d658:	2101      	movs	r1, #1
 800d65a:	68b8      	ldr	r0, [r7, #8]
 800d65c:	f7ff fb60 	bl	800cd20 <etharp_find_entry>
 800d660:	4603      	mov	r3, r0
 800d662:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d664:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	da02      	bge.n	800d672 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d66c:	8a7b      	ldrh	r3, [r7, #18]
 800d66e:	b25b      	sxtb	r3, r3
 800d670:	e0f3      	b.n	800d85a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d672:	8a7b      	ldrh	r3, [r7, #18]
 800d674:	2b7e      	cmp	r3, #126	@ 0x7e
 800d676:	d906      	bls.n	800d686 <etharp_query+0x7e>
 800d678:	4b7a      	ldr	r3, [pc, #488]	@ (800d864 <etharp_query+0x25c>)
 800d67a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800d67e:	497a      	ldr	r1, [pc, #488]	@ (800d868 <etharp_query+0x260>)
 800d680:	487a      	ldr	r0, [pc, #488]	@ (800d86c <etharp_query+0x264>)
 800d682:	f001 fe17 	bl	800f2b4 <printf>
  i = (netif_addr_idx_t)i_err;
 800d686:	8a7b      	ldrh	r3, [r7, #18]
 800d688:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d68a:	7c7a      	ldrb	r2, [r7, #17]
 800d68c:	4978      	ldr	r1, [pc, #480]	@ (800d870 <etharp_query+0x268>)
 800d68e:	4613      	mov	r3, r2
 800d690:	005b      	lsls	r3, r3, #1
 800d692:	4413      	add	r3, r2
 800d694:	00db      	lsls	r3, r3, #3
 800d696:	440b      	add	r3, r1
 800d698:	3314      	adds	r3, #20
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d115      	bne.n	800d6cc <etharp_query+0xc4>
    is_new_entry = 1;
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d6a4:	7c7a      	ldrb	r2, [r7, #17]
 800d6a6:	4972      	ldr	r1, [pc, #456]	@ (800d870 <etharp_query+0x268>)
 800d6a8:	4613      	mov	r3, r2
 800d6aa:	005b      	lsls	r3, r3, #1
 800d6ac:	4413      	add	r3, r2
 800d6ae:	00db      	lsls	r3, r3, #3
 800d6b0:	440b      	add	r3, r1
 800d6b2:	3314      	adds	r3, #20
 800d6b4:	2201      	movs	r2, #1
 800d6b6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d6b8:	7c7a      	ldrb	r2, [r7, #17]
 800d6ba:	496d      	ldr	r1, [pc, #436]	@ (800d870 <etharp_query+0x268>)
 800d6bc:	4613      	mov	r3, r2
 800d6be:	005b      	lsls	r3, r3, #1
 800d6c0:	4413      	add	r3, r2
 800d6c2:	00db      	lsls	r3, r3, #3
 800d6c4:	440b      	add	r3, r1
 800d6c6:	3308      	adds	r3, #8
 800d6c8:	68fa      	ldr	r2, [r7, #12]
 800d6ca:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d6cc:	7c7a      	ldrb	r2, [r7, #17]
 800d6ce:	4968      	ldr	r1, [pc, #416]	@ (800d870 <etharp_query+0x268>)
 800d6d0:	4613      	mov	r3, r2
 800d6d2:	005b      	lsls	r3, r3, #1
 800d6d4:	4413      	add	r3, r2
 800d6d6:	00db      	lsls	r3, r3, #3
 800d6d8:	440b      	add	r3, r1
 800d6da:	3314      	adds	r3, #20
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	d011      	beq.n	800d706 <etharp_query+0xfe>
 800d6e2:	7c7a      	ldrb	r2, [r7, #17]
 800d6e4:	4962      	ldr	r1, [pc, #392]	@ (800d870 <etharp_query+0x268>)
 800d6e6:	4613      	mov	r3, r2
 800d6e8:	005b      	lsls	r3, r3, #1
 800d6ea:	4413      	add	r3, r2
 800d6ec:	00db      	lsls	r3, r3, #3
 800d6ee:	440b      	add	r3, r1
 800d6f0:	3314      	adds	r3, #20
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d806      	bhi.n	800d706 <etharp_query+0xfe>
 800d6f8:	4b5a      	ldr	r3, [pc, #360]	@ (800d864 <etharp_query+0x25c>)
 800d6fa:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800d6fe:	495d      	ldr	r1, [pc, #372]	@ (800d874 <etharp_query+0x26c>)
 800d700:	485a      	ldr	r0, [pc, #360]	@ (800d86c <etharp_query+0x264>)
 800d702:	f001 fdd7 	bl	800f2b4 <printf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d706:	6a3b      	ldr	r3, [r7, #32]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d102      	bne.n	800d712 <etharp_query+0x10a>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d10c      	bne.n	800d72c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d712:	68b9      	ldr	r1, [r7, #8]
 800d714:	68f8      	ldr	r0, [r7, #12]
 800d716:	f000 f963 	bl	800d9e0 <etharp_request>
 800d71a:	4603      	mov	r3, r0
 800d71c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d102      	bne.n	800d72c <etharp_query+0x124>
      return result;
 800d726:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d72a:	e096      	b.n	800d85a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d106      	bne.n	800d740 <etharp_query+0x138>
 800d732:	4b4c      	ldr	r3, [pc, #304]	@ (800d864 <etharp_query+0x25c>)
 800d734:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800d738:	494f      	ldr	r1, [pc, #316]	@ (800d878 <etharp_query+0x270>)
 800d73a:	484c      	ldr	r0, [pc, #304]	@ (800d86c <etharp_query+0x264>)
 800d73c:	f001 fdba 	bl	800f2b4 <printf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d740:	7c7a      	ldrb	r2, [r7, #17]
 800d742:	494b      	ldr	r1, [pc, #300]	@ (800d870 <etharp_query+0x268>)
 800d744:	4613      	mov	r3, r2
 800d746:	005b      	lsls	r3, r3, #1
 800d748:	4413      	add	r3, r2
 800d74a:	00db      	lsls	r3, r3, #3
 800d74c:	440b      	add	r3, r1
 800d74e:	3314      	adds	r3, #20
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	2b01      	cmp	r3, #1
 800d754:	d917      	bls.n	800d786 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d756:	4a49      	ldr	r2, [pc, #292]	@ (800d87c <etharp_query+0x274>)
 800d758:	7c7b      	ldrb	r3, [r7, #17]
 800d75a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d75c:	7c7a      	ldrb	r2, [r7, #17]
 800d75e:	4613      	mov	r3, r2
 800d760:	005b      	lsls	r3, r3, #1
 800d762:	4413      	add	r3, r2
 800d764:	00db      	lsls	r3, r3, #3
 800d766:	3308      	adds	r3, #8
 800d768:	4a41      	ldr	r2, [pc, #260]	@ (800d870 <etharp_query+0x268>)
 800d76a:	4413      	add	r3, r2
 800d76c:	3304      	adds	r3, #4
 800d76e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d772:	9200      	str	r2, [sp, #0]
 800d774:	697a      	ldr	r2, [r7, #20]
 800d776:	6879      	ldr	r1, [r7, #4]
 800d778:	68f8      	ldr	r0, [r7, #12]
 800d77a:	f001 fc75 	bl	800f068 <ethernet_output>
 800d77e:	4603      	mov	r3, r0
 800d780:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d784:	e067      	b.n	800d856 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d786:	7c7a      	ldrb	r2, [r7, #17]
 800d788:	4939      	ldr	r1, [pc, #228]	@ (800d870 <etharp_query+0x268>)
 800d78a:	4613      	mov	r3, r2
 800d78c:	005b      	lsls	r3, r3, #1
 800d78e:	4413      	add	r3, r2
 800d790:	00db      	lsls	r3, r3, #3
 800d792:	440b      	add	r3, r1
 800d794:	3314      	adds	r3, #20
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	2b01      	cmp	r3, #1
 800d79a:	d15c      	bne.n	800d856 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d79c:	2300      	movs	r3, #0
 800d79e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d7a4:	e01c      	b.n	800d7e0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d7a6:	69fb      	ldr	r3, [r7, #28]
 800d7a8:	895a      	ldrh	r2, [r3, #10]
 800d7aa:	69fb      	ldr	r3, [r7, #28]
 800d7ac:	891b      	ldrh	r3, [r3, #8]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d10a      	bne.n	800d7c8 <etharp_query+0x1c0>
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d006      	beq.n	800d7c8 <etharp_query+0x1c0>
 800d7ba:	4b2a      	ldr	r3, [pc, #168]	@ (800d864 <etharp_query+0x25c>)
 800d7bc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800d7c0:	492f      	ldr	r1, [pc, #188]	@ (800d880 <etharp_query+0x278>)
 800d7c2:	482a      	ldr	r0, [pc, #168]	@ (800d86c <etharp_query+0x264>)
 800d7c4:	f001 fd76 	bl	800f2b4 <printf>
      if (PBUF_NEEDS_COPY(p)) {
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	7b1b      	ldrb	r3, [r3, #12]
 800d7cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d002      	beq.n	800d7da <etharp_query+0x1d2>
        copy_needed = 1;
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	61bb      	str	r3, [r7, #24]
        break;
 800d7d8:	e005      	b.n	800d7e6 <etharp_query+0x1de>
      }
      p = p->next;
 800d7da:	69fb      	ldr	r3, [r7, #28]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d7e0:	69fb      	ldr	r3, [r7, #28]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d1df      	bne.n	800d7a6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d7e6:	69bb      	ldr	r3, [r7, #24]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d007      	beq.n	800d7fc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d7ec:	687a      	ldr	r2, [r7, #4]
 800d7ee:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800d7f2:	200e      	movs	r0, #14
 800d7f4:	f7f9 fa7e 	bl	8006cf4 <pbuf_clone>
 800d7f8:	61f8      	str	r0, [r7, #28]
 800d7fa:	e004      	b.n	800d806 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d800:	69f8      	ldr	r0, [r7, #28]
 800d802:	f7f9 f819 	bl	8006838 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d021      	beq.n	800d850 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d80c:	7c7a      	ldrb	r2, [r7, #17]
 800d80e:	4918      	ldr	r1, [pc, #96]	@ (800d870 <etharp_query+0x268>)
 800d810:	4613      	mov	r3, r2
 800d812:	005b      	lsls	r3, r3, #1
 800d814:	4413      	add	r3, r2
 800d816:	00db      	lsls	r3, r3, #3
 800d818:	440b      	add	r3, r1
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d00a      	beq.n	800d836 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d820:	7c7a      	ldrb	r2, [r7, #17]
 800d822:	4913      	ldr	r1, [pc, #76]	@ (800d870 <etharp_query+0x268>)
 800d824:	4613      	mov	r3, r2
 800d826:	005b      	lsls	r3, r3, #1
 800d828:	4413      	add	r3, r2
 800d82a:	00db      	lsls	r3, r3, #3
 800d82c:	440b      	add	r3, r1
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	4618      	mov	r0, r3
 800d832:	f7f8 ff61 	bl	80066f8 <pbuf_free>
      }
      arp_table[i].q = p;
 800d836:	7c7a      	ldrb	r2, [r7, #17]
 800d838:	490d      	ldr	r1, [pc, #52]	@ (800d870 <etharp_query+0x268>)
 800d83a:	4613      	mov	r3, r2
 800d83c:	005b      	lsls	r3, r3, #1
 800d83e:	4413      	add	r3, r2
 800d840:	00db      	lsls	r3, r3, #3
 800d842:	440b      	add	r3, r1
 800d844:	69fa      	ldr	r2, [r7, #28]
 800d846:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d848:	2300      	movs	r3, #0
 800d84a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d84e:	e002      	b.n	800d856 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d850:	23ff      	movs	r3, #255	@ 0xff
 800d852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800d856:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3728      	adds	r7, #40	@ 0x28
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}
 800d862:	bf00      	nop
 800d864:	08015fa4 	.word	0x08015fa4
 800d868:	08016150 	.word	0x08016150
 800d86c:	0801601c 	.word	0x0801601c
 800d870:	2000894c 	.word	0x2000894c
 800d874:	08016160 	.word	0x08016160
 800d878:	08016144 	.word	0x08016144
 800d87c:	20008a3c 	.word	0x20008a3c
 800d880:	08016188 	.word	0x08016188

0800d884 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b08a      	sub	sp, #40	@ 0x28
 800d888:	af02      	add	r7, sp, #8
 800d88a:	60f8      	str	r0, [r7, #12]
 800d88c:	60b9      	str	r1, [r7, #8]
 800d88e:	607a      	str	r2, [r7, #4]
 800d890:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d892:	2300      	movs	r3, #0
 800d894:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d106      	bne.n	800d8aa <etharp_raw+0x26>
 800d89c:	4b3a      	ldr	r3, [pc, #232]	@ (800d988 <etharp_raw+0x104>)
 800d89e:	f240 4257 	movw	r2, #1111	@ 0x457
 800d8a2:	493a      	ldr	r1, [pc, #232]	@ (800d98c <etharp_raw+0x108>)
 800d8a4:	483a      	ldr	r0, [pc, #232]	@ (800d990 <etharp_raw+0x10c>)
 800d8a6:	f001 fd05 	bl	800f2b4 <printf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d8aa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d8ae:	211c      	movs	r1, #28
 800d8b0:	200e      	movs	r0, #14
 800d8b2:	f7f8 fc3d 	bl	8006130 <pbuf_alloc>
 800d8b6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d8b8:	69bb      	ldr	r3, [r7, #24]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d102      	bne.n	800d8c4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d8be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d8c2:	e05d      	b.n	800d980 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	895b      	ldrh	r3, [r3, #10]
 800d8c8:	2b1b      	cmp	r3, #27
 800d8ca:	d806      	bhi.n	800d8da <etharp_raw+0x56>
 800d8cc:	4b2e      	ldr	r3, [pc, #184]	@ (800d988 <etharp_raw+0x104>)
 800d8ce:	f240 4262 	movw	r2, #1122	@ 0x462
 800d8d2:	4930      	ldr	r1, [pc, #192]	@ (800d994 <etharp_raw+0x110>)
 800d8d4:	482e      	ldr	r0, [pc, #184]	@ (800d990 <etharp_raw+0x10c>)
 800d8d6:	f001 fced 	bl	800f2b4 <printf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d8da:	69bb      	ldr	r3, [r7, #24]
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d8e0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7f7 fbaa 	bl	800503c <lwip_htons>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d8f6:	2b06      	cmp	r3, #6
 800d8f8:	d006      	beq.n	800d908 <etharp_raw+0x84>
 800d8fa:	4b23      	ldr	r3, [pc, #140]	@ (800d988 <etharp_raw+0x104>)
 800d8fc:	f240 4269 	movw	r2, #1129	@ 0x469
 800d900:	4925      	ldr	r1, [pc, #148]	@ (800d998 <etharp_raw+0x114>)
 800d902:	4823      	ldr	r0, [pc, #140]	@ (800d990 <etharp_raw+0x10c>)
 800d904:	f001 fcd6 	bl	800f2b4 <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	3308      	adds	r3, #8
 800d90c:	2206      	movs	r2, #6
 800d90e:	6839      	ldr	r1, [r7, #0]
 800d910:	4618      	mov	r0, r3
 800d912:	f001 fe19 	bl	800f548 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	3312      	adds	r3, #18
 800d91a:	2206      	movs	r2, #6
 800d91c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d91e:	4618      	mov	r0, r3
 800d920:	f001 fe12 	bl	800f548 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	330e      	adds	r3, #14
 800d928:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d92a:	6812      	ldr	r2, [r2, #0]
 800d92c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	3318      	adds	r3, #24
 800d932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d934:	6812      	ldr	r2, [r2, #0]
 800d936:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	2200      	movs	r2, #0
 800d93c:	701a      	strb	r2, [r3, #0]
 800d93e:	2200      	movs	r2, #0
 800d940:	f042 0201 	orr.w	r2, r2, #1
 800d944:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	2200      	movs	r2, #0
 800d94a:	f042 0208 	orr.w	r2, r2, #8
 800d94e:	709a      	strb	r2, [r3, #2]
 800d950:	2200      	movs	r2, #0
 800d952:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	2206      	movs	r2, #6
 800d958:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	2204      	movs	r2, #4
 800d95e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d960:	f640 0306 	movw	r3, #2054	@ 0x806
 800d964:	9300      	str	r3, [sp, #0]
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	68ba      	ldr	r2, [r7, #8]
 800d96a:	69b9      	ldr	r1, [r7, #24]
 800d96c:	68f8      	ldr	r0, [r7, #12]
 800d96e:	f001 fb7b 	bl	800f068 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d972:	69b8      	ldr	r0, [r7, #24]
 800d974:	f7f8 fec0 	bl	80066f8 <pbuf_free>
  p = NULL;
 800d978:	2300      	movs	r3, #0
 800d97a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d97c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d980:	4618      	mov	r0, r3
 800d982:	3720      	adds	r7, #32
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}
 800d988:	08015fa4 	.word	0x08015fa4
 800d98c:	080160f4 	.word	0x080160f4
 800d990:	0801601c 	.word	0x0801601c
 800d994:	080161a4 	.word	0x080161a4
 800d998:	080161d8 	.word	0x080161d8

0800d99c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b088      	sub	sp, #32
 800d9a0:	af04      	add	r7, sp, #16
 800d9a2:	60f8      	str	r0, [r7, #12]
 800d9a4:	60b9      	str	r1, [r7, #8]
 800d9a6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	9203      	str	r2, [sp, #12]
 800d9bc:	68ba      	ldr	r2, [r7, #8]
 800d9be:	9202      	str	r2, [sp, #8]
 800d9c0:	4a06      	ldr	r2, [pc, #24]	@ (800d9dc <etharp_request_dst+0x40>)
 800d9c2:	9201      	str	r2, [sp, #4]
 800d9c4:	9300      	str	r3, [sp, #0]
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	687a      	ldr	r2, [r7, #4]
 800d9ca:	68f8      	ldr	r0, [r7, #12]
 800d9cc:	f7ff ff5a 	bl	800d884 <etharp_raw>
 800d9d0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3710      	adds	r7, #16
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	08016760 	.word	0x08016760

0800d9e0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d9ea:	4a05      	ldr	r2, [pc, #20]	@ (800da00 <etharp_request+0x20>)
 800d9ec:	6839      	ldr	r1, [r7, #0]
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f7ff ffd4 	bl	800d99c <etharp_request_dst>
 800d9f4:	4603      	mov	r3, r0
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3708      	adds	r7, #8
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	08016758 	.word	0x08016758

0800da04 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b08e      	sub	sp, #56	@ 0x38
 800da08:	af04      	add	r7, sp, #16
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800da0e:	4b79      	ldr	r3, [pc, #484]	@ (800dbf4 <icmp_input+0x1f0>)
 800da10:	689b      	ldr	r3, [r3, #8]
 800da12:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800da14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	f003 030f 	and.w	r3, r3, #15
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	009b      	lsls	r3, r3, #2
 800da20:	b2db      	uxtb	r3, r3
 800da22:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800da24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800da26:	2b13      	cmp	r3, #19
 800da28:	f240 80cd 	bls.w	800dbc6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	895b      	ldrh	r3, [r3, #10]
 800da30:	2b03      	cmp	r3, #3
 800da32:	f240 80ca 	bls.w	800dbca <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	685b      	ldr	r3, [r3, #4]
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800da40:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800da44:	2b00      	cmp	r3, #0
 800da46:	f000 80b7 	beq.w	800dbb8 <icmp_input+0x1b4>
 800da4a:	2b08      	cmp	r3, #8
 800da4c:	f040 80b7 	bne.w	800dbbe <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800da50:	4b69      	ldr	r3, [pc, #420]	@ (800dbf8 <icmp_input+0x1f4>)
 800da52:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800da54:	4b67      	ldr	r3, [pc, #412]	@ (800dbf4 <icmp_input+0x1f0>)
 800da56:	695b      	ldr	r3, [r3, #20]
 800da58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800da5c:	2be0      	cmp	r3, #224	@ 0xe0
 800da5e:	f000 80bb 	beq.w	800dbd8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800da62:	4b64      	ldr	r3, [pc, #400]	@ (800dbf4 <icmp_input+0x1f0>)
 800da64:	695b      	ldr	r3, [r3, #20]
 800da66:	4a63      	ldr	r2, [pc, #396]	@ (800dbf4 <icmp_input+0x1f0>)
 800da68:	6812      	ldr	r2, [r2, #0]
 800da6a:	4611      	mov	r1, r2
 800da6c:	4618      	mov	r0, r3
 800da6e:	f000 fbed 	bl	800e24c <ip4_addr_isbroadcast_u32>
 800da72:	4603      	mov	r3, r0
 800da74:	2b00      	cmp	r3, #0
 800da76:	f040 80b1 	bne.w	800dbdc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	891b      	ldrh	r3, [r3, #8]
 800da7e:	2b07      	cmp	r3, #7
 800da80:	f240 80a5 	bls.w	800dbce <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800da84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800da86:	330e      	adds	r3, #14
 800da88:	4619      	mov	r1, r3
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f7f8 fd9e 	bl	80065cc <pbuf_add_header>
 800da90:	4603      	mov	r3, r0
 800da92:	2b00      	cmp	r3, #0
 800da94:	d04b      	beq.n	800db2e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	891a      	ldrh	r2, [r3, #8]
 800da9a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800da9c:	4413      	add	r3, r2
 800da9e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	891b      	ldrh	r3, [r3, #8]
 800daa4:	8b7a      	ldrh	r2, [r7, #26]
 800daa6:	429a      	cmp	r2, r3
 800daa8:	f0c0 809a 	bcc.w	800dbe0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800daac:	8b7b      	ldrh	r3, [r7, #26]
 800daae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dab2:	4619      	mov	r1, r3
 800dab4:	200e      	movs	r0, #14
 800dab6:	f7f8 fb3b 	bl	8006130 <pbuf_alloc>
 800daba:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	f000 8090 	beq.w	800dbe4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	895b      	ldrh	r3, [r3, #10]
 800dac8:	461a      	mov	r2, r3
 800daca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dacc:	3308      	adds	r3, #8
 800dace:	429a      	cmp	r2, r3
 800dad0:	d203      	bcs.n	800dada <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800dad2:	6978      	ldr	r0, [r7, #20]
 800dad4:	f7f8 fe10 	bl	80066f8 <pbuf_free>
          goto icmperr;
 800dad8:	e085      	b.n	800dbe6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	685b      	ldr	r3, [r3, #4]
 800dade:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800dae0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dae2:	4618      	mov	r0, r3
 800dae4:	f001 fd30 	bl	800f548 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800dae8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800daea:	4619      	mov	r1, r3
 800daec:	6978      	ldr	r0, [r7, #20]
 800daee:	f7f8 fd7d 	bl	80065ec <pbuf_remove_header>
 800daf2:	4603      	mov	r3, r0
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d009      	beq.n	800db0c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800daf8:	4b40      	ldr	r3, [pc, #256]	@ (800dbfc <icmp_input+0x1f8>)
 800dafa:	22b6      	movs	r2, #182	@ 0xb6
 800dafc:	4940      	ldr	r1, [pc, #256]	@ (800dc00 <icmp_input+0x1fc>)
 800dafe:	4841      	ldr	r0, [pc, #260]	@ (800dc04 <icmp_input+0x200>)
 800db00:	f001 fbd8 	bl	800f2b4 <printf>
          pbuf_free(r);
 800db04:	6978      	ldr	r0, [r7, #20]
 800db06:	f7f8 fdf7 	bl	80066f8 <pbuf_free>
          goto icmperr;
 800db0a:	e06c      	b.n	800dbe6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800db0c:	6879      	ldr	r1, [r7, #4]
 800db0e:	6978      	ldr	r0, [r7, #20]
 800db10:	f7f8 ff1a 	bl	8006948 <pbuf_copy>
 800db14:	4603      	mov	r3, r0
 800db16:	2b00      	cmp	r3, #0
 800db18:	d003      	beq.n	800db22 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800db1a:	6978      	ldr	r0, [r7, #20]
 800db1c:	f7f8 fdec 	bl	80066f8 <pbuf_free>
          goto icmperr;
 800db20:	e061      	b.n	800dbe6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f7f8 fde8 	bl	80066f8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	607b      	str	r3, [r7, #4]
 800db2c:	e00f      	b.n	800db4e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800db2e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800db30:	330e      	adds	r3, #14
 800db32:	4619      	mov	r1, r3
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f7f8 fd59 	bl	80065ec <pbuf_remove_header>
 800db3a:	4603      	mov	r3, r0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d006      	beq.n	800db4e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800db40:	4b2e      	ldr	r3, [pc, #184]	@ (800dbfc <icmp_input+0x1f8>)
 800db42:	22c7      	movs	r2, #199	@ 0xc7
 800db44:	4930      	ldr	r1, [pc, #192]	@ (800dc08 <icmp_input+0x204>)
 800db46:	482f      	ldr	r0, [pc, #188]	@ (800dc04 <icmp_input+0x200>)
 800db48:	f001 fbb4 	bl	800f2b4 <printf>
          goto icmperr;
 800db4c:	e04b      	b.n	800dbe6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800db54:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800db56:	4619      	mov	r1, r3
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f7f8 fd37 	bl	80065cc <pbuf_add_header>
 800db5e:	4603      	mov	r3, r0
 800db60:	2b00      	cmp	r3, #0
 800db62:	d12b      	bne.n	800dbbc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800db6a:	69fb      	ldr	r3, [r7, #28]
 800db6c:	681a      	ldr	r2, [r3, #0]
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800db72:	4b20      	ldr	r3, [pc, #128]	@ (800dbf4 <icmp_input+0x1f0>)
 800db74:	691a      	ldr	r2, [r3, #16]
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	2200      	movs	r2, #0
 800db7e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	2200      	movs	r2, #0
 800db84:	709a      	strb	r2, [r3, #2]
 800db86:	2200      	movs	r2, #0
 800db88:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	22ff      	movs	r2, #255	@ 0xff
 800db8e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2200      	movs	r2, #0
 800db94:	729a      	strb	r2, [r3, #10]
 800db96:	2200      	movs	r2, #0
 800db98:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	9302      	str	r3, [sp, #8]
 800db9e:	2301      	movs	r3, #1
 800dba0:	9301      	str	r3, [sp, #4]
 800dba2:	2300      	movs	r3, #0
 800dba4:	9300      	str	r3, [sp, #0]
 800dba6:	23ff      	movs	r3, #255	@ 0xff
 800dba8:	2200      	movs	r2, #0
 800dbaa:	69f9      	ldr	r1, [r7, #28]
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f000 fa75 	bl	800e09c <ip4_output_if>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800dbb6:	e001      	b.n	800dbbc <icmp_input+0x1b8>
      break;
 800dbb8:	bf00      	nop
 800dbba:	e000      	b.n	800dbbe <icmp_input+0x1ba>
      break;
 800dbbc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f7f8 fd9a 	bl	80066f8 <pbuf_free>
  return;
 800dbc4:	e013      	b.n	800dbee <icmp_input+0x1ea>
    goto lenerr;
 800dbc6:	bf00      	nop
 800dbc8:	e002      	b.n	800dbd0 <icmp_input+0x1cc>
    goto lenerr;
 800dbca:	bf00      	nop
 800dbcc:	e000      	b.n	800dbd0 <icmp_input+0x1cc>
        goto lenerr;
 800dbce:	bf00      	nop
lenerr:
  pbuf_free(p);
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f7f8 fd91 	bl	80066f8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dbd6:	e00a      	b.n	800dbee <icmp_input+0x1ea>
        goto icmperr;
 800dbd8:	bf00      	nop
 800dbda:	e004      	b.n	800dbe6 <icmp_input+0x1e2>
        goto icmperr;
 800dbdc:	bf00      	nop
 800dbde:	e002      	b.n	800dbe6 <icmp_input+0x1e2>
          goto icmperr;
 800dbe0:	bf00      	nop
 800dbe2:	e000      	b.n	800dbe6 <icmp_input+0x1e2>
          goto icmperr;
 800dbe4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f7f8 fd86 	bl	80066f8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dbec:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800dbee:	3728      	adds	r7, #40	@ 0x28
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}
 800dbf4:	2000537c 	.word	0x2000537c
 800dbf8:	20005390 	.word	0x20005390
 800dbfc:	0801621c 	.word	0x0801621c
 800dc00:	08016254 	.word	0x08016254
 800dc04:	0801628c 	.word	0x0801628c
 800dc08:	080162b4 	.word	0x080162b4

0800dc0c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	460b      	mov	r3, r1
 800dc16:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800dc18:	78fb      	ldrb	r3, [r7, #3]
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	2103      	movs	r1, #3
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f000 f814 	bl	800dc4c <icmp_send_response>
}
 800dc24:	bf00      	nop
 800dc26:	3708      	adds	r7, #8
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	460b      	mov	r3, r1
 800dc36:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800dc38:	78fb      	ldrb	r3, [r7, #3]
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	210b      	movs	r1, #11
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f000 f804 	bl	800dc4c <icmp_send_response>
}
 800dc44:	bf00      	nop
 800dc46:	3708      	adds	r7, #8
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b08c      	sub	sp, #48	@ 0x30
 800dc50:	af04      	add	r7, sp, #16
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	460b      	mov	r3, r1
 800dc56:	70fb      	strb	r3, [r7, #3]
 800dc58:	4613      	mov	r3, r2
 800dc5a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800dc5c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dc60:	2124      	movs	r1, #36	@ 0x24
 800dc62:	2022      	movs	r0, #34	@ 0x22
 800dc64:	f7f8 fa64 	bl	8006130 <pbuf_alloc>
 800dc68:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800dc6a:	69fb      	ldr	r3, [r7, #28]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d04c      	beq.n	800dd0a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	895b      	ldrh	r3, [r3, #10]
 800dc74:	2b23      	cmp	r3, #35	@ 0x23
 800dc76:	d806      	bhi.n	800dc86 <icmp_send_response+0x3a>
 800dc78:	4b26      	ldr	r3, [pc, #152]	@ (800dd14 <icmp_send_response+0xc8>)
 800dc7a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800dc7e:	4926      	ldr	r1, [pc, #152]	@ (800dd18 <icmp_send_response+0xcc>)
 800dc80:	4826      	ldr	r0, [pc, #152]	@ (800dd1c <icmp_send_response+0xd0>)
 800dc82:	f001 fb17 	bl	800f2b4 <printf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	685b      	ldr	r3, [r3, #4]
 800dc8a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	685b      	ldr	r3, [r3, #4]
 800dc90:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	78fa      	ldrb	r2, [r7, #3]
 800dc96:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	78ba      	ldrb	r2, [r7, #2]
 800dc9c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	2200      	movs	r2, #0
 800dca2:	711a      	strb	r2, [r3, #4]
 800dca4:	2200      	movs	r2, #0
 800dca6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	719a      	strb	r2, [r3, #6]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800dcb2:	69fb      	ldr	r3, [r7, #28]
 800dcb4:	685b      	ldr	r3, [r3, #4]
 800dcb6:	f103 0008 	add.w	r0, r3, #8
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	221c      	movs	r2, #28
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	f001 fc41 	bl	800f548 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	68db      	ldr	r3, [r3, #12]
 800dcca:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800dccc:	f107 030c 	add.w	r3, r7, #12
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f000 f825 	bl	800dd20 <ip4_route>
 800dcd6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d011      	beq.n	800dd02 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	2200      	movs	r2, #0
 800dce2:	709a      	strb	r2, [r3, #2]
 800dce4:	2200      	movs	r2, #0
 800dce6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800dce8:	f107 020c 	add.w	r2, r7, #12
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	9302      	str	r3, [sp, #8]
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	9301      	str	r3, [sp, #4]
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	9300      	str	r3, [sp, #0]
 800dcf8:	23ff      	movs	r3, #255	@ 0xff
 800dcfa:	2100      	movs	r1, #0
 800dcfc:	69f8      	ldr	r0, [r7, #28]
 800dcfe:	f000 f9cd 	bl	800e09c <ip4_output_if>
  }
  pbuf_free(q);
 800dd02:	69f8      	ldr	r0, [r7, #28]
 800dd04:	f7f8 fcf8 	bl	80066f8 <pbuf_free>
 800dd08:	e000      	b.n	800dd0c <icmp_send_response+0xc0>
    return;
 800dd0a:	bf00      	nop
}
 800dd0c:	3720      	adds	r7, #32
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	0801621c 	.word	0x0801621c
 800dd18:	080162e8 	.word	0x080162e8
 800dd1c:	0801628c 	.word	0x0801628c

0800dd20 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800dd20:	b480      	push	{r7}
 800dd22:	b085      	sub	sp, #20
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800dd28:	4b33      	ldr	r3, [pc, #204]	@ (800ddf8 <ip4_route+0xd8>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	60fb      	str	r3, [r7, #12]
 800dd2e:	e036      	b.n	800dd9e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd36:	f003 0301 	and.w	r3, r3, #1
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d02b      	beq.n	800dd98 <ip4_route+0x78>
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd46:	089b      	lsrs	r3, r3, #2
 800dd48:	f003 0301 	and.w	r3, r3, #1
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d022      	beq.n	800dd98 <ip4_route+0x78>
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	3304      	adds	r3, #4
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d01d      	beq.n	800dd98 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681a      	ldr	r2, [r3, #0]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	3304      	adds	r3, #4
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	405a      	eors	r2, r3
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	3308      	adds	r3, #8
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4013      	ands	r3, r2
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d101      	bne.n	800dd78 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	e038      	b.n	800ddea <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd7e:	f003 0302 	and.w	r3, r3, #2
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d108      	bne.n	800dd98 <ip4_route+0x78>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681a      	ldr	r2, [r3, #0]
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	330c      	adds	r3, #12
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d101      	bne.n	800dd98 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	e028      	b.n	800ddea <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	60fb      	str	r3, [r7, #12]
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d1c5      	bne.n	800dd30 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dda4:	4b15      	ldr	r3, [pc, #84]	@ (800ddfc <ip4_route+0xdc>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d01a      	beq.n	800dde2 <ip4_route+0xc2>
 800ddac:	4b13      	ldr	r3, [pc, #76]	@ (800ddfc <ip4_route+0xdc>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ddb4:	f003 0301 	and.w	r3, r3, #1
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d012      	beq.n	800dde2 <ip4_route+0xc2>
 800ddbc:	4b0f      	ldr	r3, [pc, #60]	@ (800ddfc <ip4_route+0xdc>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ddc4:	f003 0304 	and.w	r3, r3, #4
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d00a      	beq.n	800dde2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ddcc:	4b0b      	ldr	r3, [pc, #44]	@ (800ddfc <ip4_route+0xdc>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	3304      	adds	r3, #4
 800ddd2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d004      	beq.n	800dde2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	2b7f      	cmp	r3, #127	@ 0x7f
 800dde0:	d101      	bne.n	800dde6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800dde2:	2300      	movs	r3, #0
 800dde4:	e001      	b.n	800ddea <ip4_route+0xca>
  }

  return netif_default;
 800dde6:	4b05      	ldr	r3, [pc, #20]	@ (800ddfc <ip4_route+0xdc>)
 800dde8:	681b      	ldr	r3, [r3, #0]
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3714      	adds	r7, #20
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	200088e0 	.word	0x200088e0
 800ddfc:	200088e4 	.word	0x200088e4

0800de00 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b082      	sub	sp, #8
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de0e:	f003 0301 	and.w	r3, r3, #1
 800de12:	b2db      	uxtb	r3, r3
 800de14:	2b00      	cmp	r3, #0
 800de16:	d016      	beq.n	800de46 <ip4_input_accept+0x46>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	3304      	adds	r3, #4
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d011      	beq.n	800de46 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800de22:	4b0b      	ldr	r3, [pc, #44]	@ (800de50 <ip4_input_accept+0x50>)
 800de24:	695a      	ldr	r2, [r3, #20]
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	3304      	adds	r3, #4
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d008      	beq.n	800de42 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800de30:	4b07      	ldr	r3, [pc, #28]	@ (800de50 <ip4_input_accept+0x50>)
 800de32:	695b      	ldr	r3, [r3, #20]
 800de34:	6879      	ldr	r1, [r7, #4]
 800de36:	4618      	mov	r0, r3
 800de38:	f000 fa08 	bl	800e24c <ip4_addr_isbroadcast_u32>
 800de3c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d001      	beq.n	800de46 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800de42:	2301      	movs	r3, #1
 800de44:	e000      	b.n	800de48 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800de46:	2300      	movs	r3, #0
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3708      	adds	r7, #8
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	2000537c 	.word	0x2000537c

0800de54 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b086      	sub	sp, #24
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	091b      	lsrs	r3, r3, #4
 800de6a:	b2db      	uxtb	r3, r3
 800de6c:	2b04      	cmp	r3, #4
 800de6e:	d004      	beq.n	800de7a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f7f8 fc41 	bl	80066f8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800de76:	2300      	movs	r3, #0
 800de78:	e107      	b.n	800e08a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	781b      	ldrb	r3, [r3, #0]
 800de7e:	f003 030f 	and.w	r3, r3, #15
 800de82:	b2db      	uxtb	r3, r3
 800de84:	009b      	lsls	r3, r3, #2
 800de86:	b2db      	uxtb	r3, r3
 800de88:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	885b      	ldrh	r3, [r3, #2]
 800de8e:	b29b      	uxth	r3, r3
 800de90:	4618      	mov	r0, r3
 800de92:	f7f7 f8d3 	bl	800503c <lwip_htons>
 800de96:	4603      	mov	r3, r0
 800de98:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	891b      	ldrh	r3, [r3, #8]
 800de9e:	89ba      	ldrh	r2, [r7, #12]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d204      	bcs.n	800deae <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800dea4:	89bb      	ldrh	r3, [r7, #12]
 800dea6:	4619      	mov	r1, r3
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f7f8 fa9f 	bl	80063ec <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	895b      	ldrh	r3, [r3, #10]
 800deb2:	89fa      	ldrh	r2, [r7, #14]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d807      	bhi.n	800dec8 <ip4_input+0x74>
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	891b      	ldrh	r3, [r3, #8]
 800debc:	89ba      	ldrh	r2, [r7, #12]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d802      	bhi.n	800dec8 <ip4_input+0x74>
 800dec2:	89fb      	ldrh	r3, [r7, #14]
 800dec4:	2b13      	cmp	r3, #19
 800dec6:	d804      	bhi.n	800ded2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f7f8 fc15 	bl	80066f8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800dece:	2300      	movs	r3, #0
 800ded0:	e0db      	b.n	800e08a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	691b      	ldr	r3, [r3, #16]
 800ded6:	4a6f      	ldr	r2, [pc, #444]	@ (800e094 <ip4_input+0x240>)
 800ded8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	68db      	ldr	r3, [r3, #12]
 800dede:	4a6d      	ldr	r2, [pc, #436]	@ (800e094 <ip4_input+0x240>)
 800dee0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dee2:	4b6c      	ldr	r3, [pc, #432]	@ (800e094 <ip4_input+0x240>)
 800dee4:	695b      	ldr	r3, [r3, #20]
 800dee6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800deea:	2be0      	cmp	r3, #224	@ 0xe0
 800deec:	d112      	bne.n	800df14 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800def4:	f003 0301 	and.w	r3, r3, #1
 800def8:	b2db      	uxtb	r3, r3
 800defa:	2b00      	cmp	r3, #0
 800defc:	d007      	beq.n	800df0e <ip4_input+0xba>
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	3304      	adds	r3, #4
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d002      	beq.n	800df0e <ip4_input+0xba>
      netif = inp;
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	613b      	str	r3, [r7, #16]
 800df0c:	e02a      	b.n	800df64 <ip4_input+0x110>
    } else {
      netif = NULL;
 800df0e:	2300      	movs	r3, #0
 800df10:	613b      	str	r3, [r7, #16]
 800df12:	e027      	b.n	800df64 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800df14:	6838      	ldr	r0, [r7, #0]
 800df16:	f7ff ff73 	bl	800de00 <ip4_input_accept>
 800df1a:	4603      	mov	r3, r0
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d002      	beq.n	800df26 <ip4_input+0xd2>
      netif = inp;
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	613b      	str	r3, [r7, #16]
 800df24:	e01e      	b.n	800df64 <ip4_input+0x110>
    } else {
      netif = NULL;
 800df26:	2300      	movs	r3, #0
 800df28:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800df2a:	4b5a      	ldr	r3, [pc, #360]	@ (800e094 <ip4_input+0x240>)
 800df2c:	695b      	ldr	r3, [r3, #20]
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	2b7f      	cmp	r3, #127	@ 0x7f
 800df32:	d017      	beq.n	800df64 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800df34:	4b58      	ldr	r3, [pc, #352]	@ (800e098 <ip4_input+0x244>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	613b      	str	r3, [r7, #16]
 800df3a:	e00e      	b.n	800df5a <ip4_input+0x106>
          if (netif == inp) {
 800df3c:	693a      	ldr	r2, [r7, #16]
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	429a      	cmp	r2, r3
 800df42:	d006      	beq.n	800df52 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800df44:	6938      	ldr	r0, [r7, #16]
 800df46:	f7ff ff5b 	bl	800de00 <ip4_input_accept>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d108      	bne.n	800df62 <ip4_input+0x10e>
 800df50:	e000      	b.n	800df54 <ip4_input+0x100>
            continue;
 800df52:	bf00      	nop
        NETIF_FOREACH(netif) {
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	613b      	str	r3, [r7, #16]
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d1ed      	bne.n	800df3c <ip4_input+0xe8>
 800df60:	e000      	b.n	800df64 <ip4_input+0x110>
            break;
 800df62:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800df64:	4b4b      	ldr	r3, [pc, #300]	@ (800e094 <ip4_input+0x240>)
 800df66:	691b      	ldr	r3, [r3, #16]
 800df68:	6839      	ldr	r1, [r7, #0]
 800df6a:	4618      	mov	r0, r3
 800df6c:	f000 f96e 	bl	800e24c <ip4_addr_isbroadcast_u32>
 800df70:	4603      	mov	r3, r0
 800df72:	2b00      	cmp	r3, #0
 800df74:	d105      	bne.n	800df82 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800df76:	4b47      	ldr	r3, [pc, #284]	@ (800e094 <ip4_input+0x240>)
 800df78:	691b      	ldr	r3, [r3, #16]
 800df7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800df7e:	2be0      	cmp	r3, #224	@ 0xe0
 800df80:	d104      	bne.n	800df8c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f7f8 fbb8 	bl	80066f8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800df88:	2300      	movs	r3, #0
 800df8a:	e07e      	b.n	800e08a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d104      	bne.n	800df9c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f7f8 fbb0 	bl	80066f8 <pbuf_free>
    return ERR_OK;
 800df98:	2300      	movs	r3, #0
 800df9a:	e076      	b.n	800e08a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	88db      	ldrh	r3, [r3, #6]
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800dfa8:	4013      	ands	r3, r2
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d00b      	beq.n	800dfc6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f000 fc92 	bl	800e8d8 <ip4_reass>
 800dfb4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d101      	bne.n	800dfc0 <ip4_input+0x16c>
      return ERR_OK;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	e064      	b.n	800e08a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	685b      	ldr	r3, [r3, #4]
 800dfc4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800dfc6:	4a33      	ldr	r2, [pc, #204]	@ (800e094 <ip4_input+0x240>)
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800dfcc:	4a31      	ldr	r2, [pc, #196]	@ (800e094 <ip4_input+0x240>)
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800dfd2:	4a30      	ldr	r2, [pc, #192]	@ (800e094 <ip4_input+0x240>)
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	f003 030f 	and.w	r3, r3, #15
 800dfe0:	b2db      	uxtb	r3, r3
 800dfe2:	009b      	lsls	r3, r3, #2
 800dfe4:	b2db      	uxtb	r3, r3
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	4b2a      	ldr	r3, [pc, #168]	@ (800e094 <ip4_input+0x240>)
 800dfea:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800dfec:	89fb      	ldrh	r3, [r7, #14]
 800dfee:	4619      	mov	r1, r3
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f7f8 fafb 	bl	80065ec <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	7a5b      	ldrb	r3, [r3, #9]
 800dffa:	2b11      	cmp	r3, #17
 800dffc:	d006      	beq.n	800e00c <ip4_input+0x1b8>
 800dffe:	2b11      	cmp	r3, #17
 800e000:	dc13      	bgt.n	800e02a <ip4_input+0x1d6>
 800e002:	2b01      	cmp	r3, #1
 800e004:	d00c      	beq.n	800e020 <ip4_input+0x1cc>
 800e006:	2b06      	cmp	r3, #6
 800e008:	d005      	beq.n	800e016 <ip4_input+0x1c2>
 800e00a:	e00e      	b.n	800e02a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e00c:	6839      	ldr	r1, [r7, #0]
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f7fe f9f2 	bl	800c3f8 <udp_input>
        break;
 800e014:	e026      	b.n	800e064 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e016:	6839      	ldr	r1, [r7, #0]
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f7fa fa39 	bl	8008490 <tcp_input>
        break;
 800e01e:	e021      	b.n	800e064 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e020:	6839      	ldr	r1, [r7, #0]
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f7ff fcee 	bl	800da04 <icmp_input>
        break;
 800e028:	e01c      	b.n	800e064 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e02a:	4b1a      	ldr	r3, [pc, #104]	@ (800e094 <ip4_input+0x240>)
 800e02c:	695b      	ldr	r3, [r3, #20]
 800e02e:	6939      	ldr	r1, [r7, #16]
 800e030:	4618      	mov	r0, r3
 800e032:	f000 f90b 	bl	800e24c <ip4_addr_isbroadcast_u32>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d10f      	bne.n	800e05c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e03c:	4b15      	ldr	r3, [pc, #84]	@ (800e094 <ip4_input+0x240>)
 800e03e:	695b      	ldr	r3, [r3, #20]
 800e040:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e044:	2be0      	cmp	r3, #224	@ 0xe0
 800e046:	d009      	beq.n	800e05c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e048:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e04c:	4619      	mov	r1, r3
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f7f8 fb3f 	bl	80066d2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e054:	2102      	movs	r1, #2
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f7ff fdd8 	bl	800dc0c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f7f8 fb4b 	bl	80066f8 <pbuf_free>
        break;
 800e062:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e064:	4b0b      	ldr	r3, [pc, #44]	@ (800e094 <ip4_input+0x240>)
 800e066:	2200      	movs	r2, #0
 800e068:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e06a:	4b0a      	ldr	r3, [pc, #40]	@ (800e094 <ip4_input+0x240>)
 800e06c:	2200      	movs	r2, #0
 800e06e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e070:	4b08      	ldr	r3, [pc, #32]	@ (800e094 <ip4_input+0x240>)
 800e072:	2200      	movs	r2, #0
 800e074:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e076:	4b07      	ldr	r3, [pc, #28]	@ (800e094 <ip4_input+0x240>)
 800e078:	2200      	movs	r2, #0
 800e07a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e07c:	4b05      	ldr	r3, [pc, #20]	@ (800e094 <ip4_input+0x240>)
 800e07e:	2200      	movs	r2, #0
 800e080:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e082:	4b04      	ldr	r3, [pc, #16]	@ (800e094 <ip4_input+0x240>)
 800e084:	2200      	movs	r2, #0
 800e086:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e088:	2300      	movs	r3, #0
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3718      	adds	r7, #24
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}
 800e092:	bf00      	nop
 800e094:	2000537c 	.word	0x2000537c
 800e098:	200088e0 	.word	0x200088e0

0800e09c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b08a      	sub	sp, #40	@ 0x28
 800e0a0:	af04      	add	r7, sp, #16
 800e0a2:	60f8      	str	r0, [r7, #12]
 800e0a4:	60b9      	str	r1, [r7, #8]
 800e0a6:	607a      	str	r2, [r7, #4]
 800e0a8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d009      	beq.n	800e0c8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d003      	beq.n	800e0c2 <ip4_output_if+0x26>
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d102      	bne.n	800e0c8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0c4:	3304      	adds	r3, #4
 800e0c6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e0c8:	78fa      	ldrb	r2, [r7, #3]
 800e0ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0cc:	9302      	str	r3, [sp, #8]
 800e0ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e0d2:	9301      	str	r3, [sp, #4]
 800e0d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e0d8:	9300      	str	r3, [sp, #0]
 800e0da:	4613      	mov	r3, r2
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	6979      	ldr	r1, [r7, #20]
 800e0e0:	68f8      	ldr	r0, [r7, #12]
 800e0e2:	f000 f805 	bl	800e0f0 <ip4_output_if_src>
 800e0e6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3718      	adds	r7, #24
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b088      	sub	sp, #32
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	607a      	str	r2, [r7, #4]
 800e0fc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	7b9b      	ldrb	r3, [r3, #14]
 800e102:	2b01      	cmp	r3, #1
 800e104:	d006      	beq.n	800e114 <ip4_output_if_src+0x24>
 800e106:	4b4b      	ldr	r3, [pc, #300]	@ (800e234 <ip4_output_if_src+0x144>)
 800e108:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800e10c:	494a      	ldr	r1, [pc, #296]	@ (800e238 <ip4_output_if_src+0x148>)
 800e10e:	484b      	ldr	r0, [pc, #300]	@ (800e23c <ip4_output_if_src+0x14c>)
 800e110:	f001 f8d0 	bl	800f2b4 <printf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d060      	beq.n	800e1dc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e11a:	2314      	movs	r3, #20
 800e11c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e11e:	2114      	movs	r1, #20
 800e120:	68f8      	ldr	r0, [r7, #12]
 800e122:	f7f8 fa53 	bl	80065cc <pbuf_add_header>
 800e126:	4603      	mov	r3, r0
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d002      	beq.n	800e132 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e12c:	f06f 0301 	mvn.w	r3, #1
 800e130:	e07c      	b.n	800e22c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	895b      	ldrh	r3, [r3, #10]
 800e13c:	2b13      	cmp	r3, #19
 800e13e:	d806      	bhi.n	800e14e <ip4_output_if_src+0x5e>
 800e140:	4b3c      	ldr	r3, [pc, #240]	@ (800e234 <ip4_output_if_src+0x144>)
 800e142:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800e146:	493e      	ldr	r1, [pc, #248]	@ (800e240 <ip4_output_if_src+0x150>)
 800e148:	483c      	ldr	r0, [pc, #240]	@ (800e23c <ip4_output_if_src+0x14c>)
 800e14a:	f001 f8b3 	bl	800f2b4 <printf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e14e:	69fb      	ldr	r3, [r7, #28]
 800e150:	78fa      	ldrb	r2, [r7, #3]
 800e152:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e154:	69fb      	ldr	r3, [r7, #28]
 800e156:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800e15a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681a      	ldr	r2, [r3, #0]
 800e160:	69fb      	ldr	r3, [r7, #28]
 800e162:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e164:	8b7b      	ldrh	r3, [r7, #26]
 800e166:	089b      	lsrs	r3, r3, #2
 800e168:	b29b      	uxth	r3, r3
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e170:	b2da      	uxtb	r2, r3
 800e172:	69fb      	ldr	r3, [r7, #28]
 800e174:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e176:	69fb      	ldr	r3, [r7, #28]
 800e178:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800e17c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	891b      	ldrh	r3, [r3, #8]
 800e182:	4618      	mov	r0, r3
 800e184:	f7f6 ff5a 	bl	800503c <lwip_htons>
 800e188:	4603      	mov	r3, r0
 800e18a:	461a      	mov	r2, r3
 800e18c:	69fb      	ldr	r3, [r7, #28]
 800e18e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e190:	69fb      	ldr	r3, [r7, #28]
 800e192:	2200      	movs	r2, #0
 800e194:	719a      	strb	r2, [r3, #6]
 800e196:	2200      	movs	r2, #0
 800e198:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e19a:	4b2a      	ldr	r3, [pc, #168]	@ (800e244 <ip4_output_if_src+0x154>)
 800e19c:	881b      	ldrh	r3, [r3, #0]
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7f6 ff4c 	bl	800503c <lwip_htons>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	69fb      	ldr	r3, [r7, #28]
 800e1aa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e1ac:	4b25      	ldr	r3, [pc, #148]	@ (800e244 <ip4_output_if_src+0x154>)
 800e1ae:	881b      	ldrh	r3, [r3, #0]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	b29a      	uxth	r2, r3
 800e1b4:	4b23      	ldr	r3, [pc, #140]	@ (800e244 <ip4_output_if_src+0x154>)
 800e1b6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d104      	bne.n	800e1c8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e1be:	4b22      	ldr	r3, [pc, #136]	@ (800e248 <ip4_output_if_src+0x158>)
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	69fb      	ldr	r3, [r7, #28]
 800e1c4:	60da      	str	r2, [r3, #12]
 800e1c6:	e003      	b.n	800e1d0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	681a      	ldr	r2, [r3, #0]
 800e1cc:	69fb      	ldr	r3, [r7, #28]
 800e1ce:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	729a      	strb	r2, [r3, #10]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	72da      	strb	r2, [r3, #11]
 800e1da:	e00f      	b.n	800e1fc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	895b      	ldrh	r3, [r3, #10]
 800e1e0:	2b13      	cmp	r3, #19
 800e1e2:	d802      	bhi.n	800e1ea <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e1e4:	f06f 0301 	mvn.w	r3, #1
 800e1e8:	e020      	b.n	800e22c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e1f0:	69fb      	ldr	r3, [r7, #28]
 800e1f2:	691b      	ldr	r3, [r3, #16]
 800e1f4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e1f6:	f107 0314 	add.w	r3, r7, #20
 800e1fa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1fe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e200:	2b00      	cmp	r3, #0
 800e202:	d00c      	beq.n	800e21e <ip4_output_if_src+0x12e>
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	891a      	ldrh	r2, [r3, #8]
 800e208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e20a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d906      	bls.n	800e21e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e210:	687a      	ldr	r2, [r7, #4]
 800e212:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e214:	68f8      	ldr	r0, [r7, #12]
 800e216:	f000 fd53 	bl	800ecc0 <ip4_frag>
 800e21a:	4603      	mov	r3, r0
 800e21c:	e006      	b.n	800e22c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e220:	695b      	ldr	r3, [r3, #20]
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	68f9      	ldr	r1, [r7, #12]
 800e226:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e228:	4798      	blx	r3
 800e22a:	4603      	mov	r3, r0
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3720      	adds	r7, #32
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}
 800e234:	08016314 	.word	0x08016314
 800e238:	08016348 	.word	0x08016348
 800e23c:	08016354 	.word	0x08016354
 800e240:	0801637c 	.word	0x0801637c
 800e244:	20008a3e 	.word	0x20008a3e
 800e248:	08016754 	.word	0x08016754

0800e24c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b085      	sub	sp, #20
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e260:	d002      	beq.n	800e268 <ip4_addr_isbroadcast_u32+0x1c>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d101      	bne.n	800e26c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e268:	2301      	movs	r3, #1
 800e26a:	e02a      	b.n	800e2c2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e272:	f003 0302 	and.w	r3, r3, #2
 800e276:	2b00      	cmp	r3, #0
 800e278:	d101      	bne.n	800e27e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e27a:	2300      	movs	r3, #0
 800e27c:	e021      	b.n	800e2c2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	3304      	adds	r3, #4
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	687a      	ldr	r2, [r7, #4]
 800e286:	429a      	cmp	r2, r3
 800e288:	d101      	bne.n	800e28e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e28a:	2300      	movs	r3, #0
 800e28c:	e019      	b.n	800e2c2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e28e:	68fa      	ldr	r2, [r7, #12]
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	3304      	adds	r3, #4
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	405a      	eors	r2, r3
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	3308      	adds	r3, #8
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	4013      	ands	r3, r2
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d10d      	bne.n	800e2c0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	3308      	adds	r3, #8
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	43da      	mvns	r2, r3
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	3308      	adds	r3, #8
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	d101      	bne.n	800e2c0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e2bc:	2301      	movs	r3, #1
 800e2be:	e000      	b.n	800e2c2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e2c0:	2300      	movs	r3, #0
  }
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3714      	adds	r7, #20
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2cc:	4770      	bx	lr
	...

0800e2d0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b084      	sub	sp, #16
 800e2d4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e2da:	4b12      	ldr	r3, [pc, #72]	@ (800e324 <ip_reass_tmr+0x54>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e2e0:	e018      	b.n	800e314 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	7fdb      	ldrb	r3, [r3, #31]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d00b      	beq.n	800e302 <ip_reass_tmr+0x32>
      r->timer--;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	7fdb      	ldrb	r3, [r3, #31]
 800e2ee:	3b01      	subs	r3, #1
 800e2f0:	b2da      	uxtb	r2, r3
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	60fb      	str	r3, [r7, #12]
 800e300:	e008      	b.n	800e314 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e30c:	68b9      	ldr	r1, [r7, #8]
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f000 f80a 	bl	800e328 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d1e3      	bne.n	800e2e2 <ip_reass_tmr+0x12>
    }
  }
}
 800e31a:	bf00      	nop
 800e31c:	bf00      	nop
 800e31e:	3710      	adds	r7, #16
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}
 800e324:	20008a40 	.word	0x20008a40

0800e328 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b088      	sub	sp, #32
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e332:	2300      	movs	r3, #0
 800e334:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e336:	683a      	ldr	r2, [r7, #0]
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d105      	bne.n	800e34a <ip_reass_free_complete_datagram+0x22>
 800e33e:	4b45      	ldr	r3, [pc, #276]	@ (800e454 <ip_reass_free_complete_datagram+0x12c>)
 800e340:	22ab      	movs	r2, #171	@ 0xab
 800e342:	4945      	ldr	r1, [pc, #276]	@ (800e458 <ip_reass_free_complete_datagram+0x130>)
 800e344:	4845      	ldr	r0, [pc, #276]	@ (800e45c <ip_reass_free_complete_datagram+0x134>)
 800e346:	f000 ffb5 	bl	800f2b4 <printf>
  if (prev != NULL) {
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d00a      	beq.n	800e366 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	429a      	cmp	r2, r3
 800e358:	d005      	beq.n	800e366 <ip_reass_free_complete_datagram+0x3e>
 800e35a:	4b3e      	ldr	r3, [pc, #248]	@ (800e454 <ip_reass_free_complete_datagram+0x12c>)
 800e35c:	22ad      	movs	r2, #173	@ 0xad
 800e35e:	4940      	ldr	r1, [pc, #256]	@ (800e460 <ip_reass_free_complete_datagram+0x138>)
 800e360:	483e      	ldr	r0, [pc, #248]	@ (800e45c <ip_reass_free_complete_datagram+0x134>)
 800e362:	f000 ffa7 	bl	800f2b4 <printf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	685b      	ldr	r3, [r3, #4]
 800e36c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	889b      	ldrh	r3, [r3, #4]
 800e372:	b29b      	uxth	r3, r3
 800e374:	2b00      	cmp	r3, #0
 800e376:	d12a      	bne.n	800e3ce <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e386:	69bb      	ldr	r3, [r7, #24]
 800e388:	6858      	ldr	r0, [r3, #4]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	3308      	adds	r3, #8
 800e38e:	2214      	movs	r2, #20
 800e390:	4619      	mov	r1, r3
 800e392:	f001 f8d9 	bl	800f548 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e396:	2101      	movs	r1, #1
 800e398:	69b8      	ldr	r0, [r7, #24]
 800e39a:	f7ff fc47 	bl	800dc2c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e39e:	69b8      	ldr	r0, [r7, #24]
 800e3a0:	f7f8 fa32 	bl	8006808 <pbuf_clen>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e3a8:	8bfa      	ldrh	r2, [r7, #30]
 800e3aa:	8a7b      	ldrh	r3, [r7, #18]
 800e3ac:	4413      	add	r3, r2
 800e3ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e3b2:	db05      	blt.n	800e3c0 <ip_reass_free_complete_datagram+0x98>
 800e3b4:	4b27      	ldr	r3, [pc, #156]	@ (800e454 <ip_reass_free_complete_datagram+0x12c>)
 800e3b6:	22bc      	movs	r2, #188	@ 0xbc
 800e3b8:	492a      	ldr	r1, [pc, #168]	@ (800e464 <ip_reass_free_complete_datagram+0x13c>)
 800e3ba:	4828      	ldr	r0, [pc, #160]	@ (800e45c <ip_reass_free_complete_datagram+0x134>)
 800e3bc:	f000 ff7a 	bl	800f2b4 <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e3c0:	8bfa      	ldrh	r2, [r7, #30]
 800e3c2:	8a7b      	ldrh	r3, [r7, #18]
 800e3c4:	4413      	add	r3, r2
 800e3c6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e3c8:	69b8      	ldr	r0, [r7, #24]
 800e3ca:	f7f8 f995 	bl	80066f8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e3d4:	e01f      	b.n	800e416 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e3d6:	69bb      	ldr	r3, [r7, #24]
 800e3d8:	685b      	ldr	r3, [r3, #4]
 800e3da:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e3dc:	69bb      	ldr	r3, [r7, #24]
 800e3de:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e3e6:	68f8      	ldr	r0, [r7, #12]
 800e3e8:	f7f8 fa0e 	bl	8006808 <pbuf_clen>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e3f0:	8bfa      	ldrh	r2, [r7, #30]
 800e3f2:	8a7b      	ldrh	r3, [r7, #18]
 800e3f4:	4413      	add	r3, r2
 800e3f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e3fa:	db05      	blt.n	800e408 <ip_reass_free_complete_datagram+0xe0>
 800e3fc:	4b15      	ldr	r3, [pc, #84]	@ (800e454 <ip_reass_free_complete_datagram+0x12c>)
 800e3fe:	22cc      	movs	r2, #204	@ 0xcc
 800e400:	4918      	ldr	r1, [pc, #96]	@ (800e464 <ip_reass_free_complete_datagram+0x13c>)
 800e402:	4816      	ldr	r0, [pc, #88]	@ (800e45c <ip_reass_free_complete_datagram+0x134>)
 800e404:	f000 ff56 	bl	800f2b4 <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e408:	8bfa      	ldrh	r2, [r7, #30]
 800e40a:	8a7b      	ldrh	r3, [r7, #18]
 800e40c:	4413      	add	r3, r2
 800e40e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e410:	68f8      	ldr	r0, [r7, #12]
 800e412:	f7f8 f971 	bl	80066f8 <pbuf_free>
  while (p != NULL) {
 800e416:	69bb      	ldr	r3, [r7, #24]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d1dc      	bne.n	800e3d6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e41c:	6839      	ldr	r1, [r7, #0]
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 f8c2 	bl	800e5a8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e424:	4b10      	ldr	r3, [pc, #64]	@ (800e468 <ip_reass_free_complete_datagram+0x140>)
 800e426:	881b      	ldrh	r3, [r3, #0]
 800e428:	8bfa      	ldrh	r2, [r7, #30]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d905      	bls.n	800e43a <ip_reass_free_complete_datagram+0x112>
 800e42e:	4b09      	ldr	r3, [pc, #36]	@ (800e454 <ip_reass_free_complete_datagram+0x12c>)
 800e430:	22d2      	movs	r2, #210	@ 0xd2
 800e432:	490e      	ldr	r1, [pc, #56]	@ (800e46c <ip_reass_free_complete_datagram+0x144>)
 800e434:	4809      	ldr	r0, [pc, #36]	@ (800e45c <ip_reass_free_complete_datagram+0x134>)
 800e436:	f000 ff3d 	bl	800f2b4 <printf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e43a:	4b0b      	ldr	r3, [pc, #44]	@ (800e468 <ip_reass_free_complete_datagram+0x140>)
 800e43c:	881a      	ldrh	r2, [r3, #0]
 800e43e:	8bfb      	ldrh	r3, [r7, #30]
 800e440:	1ad3      	subs	r3, r2, r3
 800e442:	b29a      	uxth	r2, r3
 800e444:	4b08      	ldr	r3, [pc, #32]	@ (800e468 <ip_reass_free_complete_datagram+0x140>)
 800e446:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e448:	8bfb      	ldrh	r3, [r7, #30]
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3720      	adds	r7, #32
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	080163ac 	.word	0x080163ac
 800e458:	080163e8 	.word	0x080163e8
 800e45c:	080163f4 	.word	0x080163f4
 800e460:	0801641c 	.word	0x0801641c
 800e464:	08016430 	.word	0x08016430
 800e468:	20008a44 	.word	0x20008a44
 800e46c:	08016450 	.word	0x08016450

0800e470 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b08a      	sub	sp, #40	@ 0x28
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e47a:	2300      	movs	r3, #0
 800e47c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e47e:	2300      	movs	r3, #0
 800e480:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e482:	2300      	movs	r3, #0
 800e484:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e486:	2300      	movs	r3, #0
 800e488:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e48a:	2300      	movs	r3, #0
 800e48c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e48e:	4b28      	ldr	r3, [pc, #160]	@ (800e530 <ip_reass_remove_oldest_datagram+0xc0>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e494:	e030      	b.n	800e4f8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e498:	695a      	ldr	r2, [r3, #20]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	68db      	ldr	r3, [r3, #12]
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d10c      	bne.n	800e4bc <ip_reass_remove_oldest_datagram+0x4c>
 800e4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4a4:	699a      	ldr	r2, [r3, #24]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	691b      	ldr	r3, [r3, #16]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d106      	bne.n	800e4bc <ip_reass_remove_oldest_datagram+0x4c>
 800e4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4b0:	899a      	ldrh	r2, [r3, #12]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	889b      	ldrh	r3, [r3, #4]
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	d014      	beq.n	800e4e6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e4bc:	693b      	ldr	r3, [r7, #16]
 800e4be:	3301      	adds	r3, #1
 800e4c0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e4c2:	6a3b      	ldr	r3, [r7, #32]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d104      	bne.n	800e4d2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ca:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e4cc:	69fb      	ldr	r3, [r7, #28]
 800e4ce:	61bb      	str	r3, [r7, #24]
 800e4d0:	e009      	b.n	800e4e6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4d4:	7fda      	ldrb	r2, [r3, #31]
 800e4d6:	6a3b      	ldr	r3, [r7, #32]
 800e4d8:	7fdb      	ldrb	r3, [r3, #31]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d803      	bhi.n	800e4e6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4e0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e4e2:	69fb      	ldr	r3, [r7, #28]
 800e4e4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d001      	beq.n	800e4f2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4f0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d1cb      	bne.n	800e496 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e4fe:	6a3b      	ldr	r3, [r7, #32]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d008      	beq.n	800e516 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e504:	69b9      	ldr	r1, [r7, #24]
 800e506:	6a38      	ldr	r0, [r7, #32]
 800e508:	f7ff ff0e 	bl	800e328 <ip_reass_free_complete_datagram>
 800e50c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e50e:	697a      	ldr	r2, [r7, #20]
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	4413      	add	r3, r2
 800e514:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e516:	697a      	ldr	r2, [r7, #20]
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	429a      	cmp	r2, r3
 800e51c:	da02      	bge.n	800e524 <ip_reass_remove_oldest_datagram+0xb4>
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	2b01      	cmp	r3, #1
 800e522:	dcac      	bgt.n	800e47e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e524:	697b      	ldr	r3, [r7, #20]
}
 800e526:	4618      	mov	r0, r3
 800e528:	3728      	adds	r7, #40	@ 0x28
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	20008a40 	.word	0x20008a40

0800e534 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e53e:	2004      	movs	r0, #4
 800e540:	f7f7 f9f4 	bl	800592c <memp_malloc>
 800e544:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d110      	bne.n	800e56e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e54c:	6839      	ldr	r1, [r7, #0]
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f7ff ff8e 	bl	800e470 <ip_reass_remove_oldest_datagram>
 800e554:	4602      	mov	r2, r0
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	4293      	cmp	r3, r2
 800e55a:	dc03      	bgt.n	800e564 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e55c:	2004      	movs	r0, #4
 800e55e:	f7f7 f9e5 	bl	800592c <memp_malloc>
 800e562:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d101      	bne.n	800e56e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e56a:	2300      	movs	r3, #0
 800e56c:	e016      	b.n	800e59c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e56e:	2220      	movs	r2, #32
 800e570:	2100      	movs	r1, #0
 800e572:	68f8      	ldr	r0, [r7, #12]
 800e574:	f000 ff6b 	bl	800f44e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	220f      	movs	r2, #15
 800e57c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e57e:	4b09      	ldr	r3, [pc, #36]	@ (800e5a4 <ip_reass_enqueue_new_datagram+0x70>)
 800e580:	681a      	ldr	r2, [r3, #0]
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e586:	4a07      	ldr	r2, [pc, #28]	@ (800e5a4 <ip_reass_enqueue_new_datagram+0x70>)
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	3308      	adds	r3, #8
 800e590:	2214      	movs	r2, #20
 800e592:	6879      	ldr	r1, [r7, #4]
 800e594:	4618      	mov	r0, r3
 800e596:	f000 ffd7 	bl	800f548 <memcpy>
  return ipr;
 800e59a:	68fb      	ldr	r3, [r7, #12]
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3710      	adds	r7, #16
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	20008a40 	.word	0x20008a40

0800e5a8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e5b2:	4b10      	ldr	r3, [pc, #64]	@ (800e5f4 <ip_reass_dequeue_datagram+0x4c>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	687a      	ldr	r2, [r7, #4]
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d104      	bne.n	800e5c6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4a0c      	ldr	r2, [pc, #48]	@ (800e5f4 <ip_reass_dequeue_datagram+0x4c>)
 800e5c2:	6013      	str	r3, [r2, #0]
 800e5c4:	e00d      	b.n	800e5e2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d106      	bne.n	800e5da <ip_reass_dequeue_datagram+0x32>
 800e5cc:	4b0a      	ldr	r3, [pc, #40]	@ (800e5f8 <ip_reass_dequeue_datagram+0x50>)
 800e5ce:	f240 1245 	movw	r2, #325	@ 0x145
 800e5d2:	490a      	ldr	r1, [pc, #40]	@ (800e5fc <ip_reass_dequeue_datagram+0x54>)
 800e5d4:	480a      	ldr	r0, [pc, #40]	@ (800e600 <ip_reass_dequeue_datagram+0x58>)
 800e5d6:	f000 fe6d 	bl	800f2b4 <printf>
    prev->next = ipr->next;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681a      	ldr	r2, [r3, #0]
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e5e2:	6879      	ldr	r1, [r7, #4]
 800e5e4:	2004      	movs	r0, #4
 800e5e6:	f7f7 fa11 	bl	8005a0c <memp_free>
}
 800e5ea:	bf00      	nop
 800e5ec:	3708      	adds	r7, #8
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	20008a40 	.word	0x20008a40
 800e5f8:	080163ac 	.word	0x080163ac
 800e5fc:	08016474 	.word	0x08016474
 800e600:	080163f4 	.word	0x080163f4

0800e604 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b08c      	sub	sp, #48	@ 0x30
 800e608:	af00      	add	r7, sp, #0
 800e60a:	60f8      	str	r0, [r7, #12]
 800e60c:	60b9      	str	r1, [r7, #8]
 800e60e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e610:	2300      	movs	r3, #0
 800e612:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e614:	2301      	movs	r3, #1
 800e616:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	685b      	ldr	r3, [r3, #4]
 800e61c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e61e:	69fb      	ldr	r3, [r7, #28]
 800e620:	885b      	ldrh	r3, [r3, #2]
 800e622:	b29b      	uxth	r3, r3
 800e624:	4618      	mov	r0, r3
 800e626:	f7f6 fd09 	bl	800503c <lwip_htons>
 800e62a:	4603      	mov	r3, r0
 800e62c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e62e:	69fb      	ldr	r3, [r7, #28]
 800e630:	781b      	ldrb	r3, [r3, #0]
 800e632:	f003 030f 	and.w	r3, r3, #15
 800e636:	b2db      	uxtb	r3, r3
 800e638:	009b      	lsls	r3, r3, #2
 800e63a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e63c:	7e7b      	ldrb	r3, [r7, #25]
 800e63e:	b29b      	uxth	r3, r3
 800e640:	8b7a      	ldrh	r2, [r7, #26]
 800e642:	429a      	cmp	r2, r3
 800e644:	d202      	bcs.n	800e64c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e646:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e64a:	e135      	b.n	800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e64c:	7e7b      	ldrb	r3, [r7, #25]
 800e64e:	b29b      	uxth	r3, r3
 800e650:	8b7a      	ldrh	r2, [r7, #26]
 800e652:	1ad3      	subs	r3, r2, r3
 800e654:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e656:	69fb      	ldr	r3, [r7, #28]
 800e658:	88db      	ldrh	r3, [r3, #6]
 800e65a:	b29b      	uxth	r3, r3
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7f6 fced 	bl	800503c <lwip_htons>
 800e662:	4603      	mov	r3, r0
 800e664:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e668:	b29b      	uxth	r3, r3
 800e66a:	00db      	lsls	r3, r3, #3
 800e66c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	685b      	ldr	r3, [r3, #4]
 800e672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800e674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e676:	2200      	movs	r2, #0
 800e678:	701a      	strb	r2, [r3, #0]
 800e67a:	2200      	movs	r2, #0
 800e67c:	705a      	strb	r2, [r3, #1]
 800e67e:	2200      	movs	r2, #0
 800e680:	709a      	strb	r2, [r3, #2]
 800e682:	2200      	movs	r2, #0
 800e684:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e688:	8afa      	ldrh	r2, [r7, #22]
 800e68a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e68c:	8afa      	ldrh	r2, [r7, #22]
 800e68e:	8b7b      	ldrh	r3, [r7, #26]
 800e690:	4413      	add	r3, r2
 800e692:	b29a      	uxth	r2, r3
 800e694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e696:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e69a:	88db      	ldrh	r3, [r3, #6]
 800e69c:	b29b      	uxth	r3, r3
 800e69e:	8afa      	ldrh	r2, [r7, #22]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d902      	bls.n	800e6aa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e6a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e6a8:	e106      	b.n	800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	685b      	ldr	r3, [r3, #4]
 800e6ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800e6b0:	e068      	b.n	800e784 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6b4:	685b      	ldr	r3, [r3, #4]
 800e6b6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ba:	889b      	ldrh	r3, [r3, #4]
 800e6bc:	b29a      	uxth	r2, r3
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	889b      	ldrh	r3, [r3, #4]
 800e6c2:	b29b      	uxth	r3, r3
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d235      	bcs.n	800e734 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e6cc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d020      	beq.n	800e716 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6d6:	889b      	ldrh	r3, [r3, #4]
 800e6d8:	b29a      	uxth	r2, r3
 800e6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6dc:	88db      	ldrh	r3, [r3, #6]
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d307      	bcc.n	800e6f4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e6e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6e6:	88db      	ldrh	r3, [r3, #6]
 800e6e8:	b29a      	uxth	r2, r3
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	889b      	ldrh	r3, [r3, #4]
 800e6ee:	b29b      	uxth	r3, r3
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d902      	bls.n	800e6fa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e6f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e6f8:	e0de      	b.n	800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6fc:	68ba      	ldr	r2, [r7, #8]
 800e6fe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e702:	88db      	ldrh	r3, [r3, #6]
 800e704:	b29a      	uxth	r2, r3
 800e706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e708:	889b      	ldrh	r3, [r3, #4]
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d03d      	beq.n	800e78c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e710:	2300      	movs	r3, #0
 800e712:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e714:	e03a      	b.n	800e78c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e718:	88db      	ldrh	r3, [r3, #6]
 800e71a:	b29a      	uxth	r2, r3
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	889b      	ldrh	r3, [r3, #4]
 800e720:	b29b      	uxth	r3, r3
 800e722:	429a      	cmp	r2, r3
 800e724:	d902      	bls.n	800e72c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e726:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e72a:	e0c5      	b.n	800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	68ba      	ldr	r2, [r7, #8]
 800e730:	605a      	str	r2, [r3, #4]
      break;
 800e732:	e02b      	b.n	800e78c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e736:	889b      	ldrh	r3, [r3, #4]
 800e738:	b29a      	uxth	r2, r3
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	889b      	ldrh	r3, [r3, #4]
 800e73e:	b29b      	uxth	r3, r3
 800e740:	429a      	cmp	r2, r3
 800e742:	d102      	bne.n	800e74a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e744:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e748:	e0b6      	b.n	800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e74c:	889b      	ldrh	r3, [r3, #4]
 800e74e:	b29a      	uxth	r2, r3
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	88db      	ldrh	r3, [r3, #6]
 800e754:	b29b      	uxth	r3, r3
 800e756:	429a      	cmp	r2, r3
 800e758:	d202      	bcs.n	800e760 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e75a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e75e:	e0ab      	b.n	800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e762:	2b00      	cmp	r3, #0
 800e764:	d009      	beq.n	800e77a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e768:	88db      	ldrh	r3, [r3, #6]
 800e76a:	b29a      	uxth	r2, r3
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	889b      	ldrh	r3, [r3, #4]
 800e770:	b29b      	uxth	r3, r3
 800e772:	429a      	cmp	r2, r3
 800e774:	d001      	beq.n	800e77a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e776:	2300      	movs	r3, #0
 800e778:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e77a:	693b      	ldr	r3, [r7, #16]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800e784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e786:	2b00      	cmp	r3, #0
 800e788:	d193      	bne.n	800e6b2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e78a:	e000      	b.n	800e78e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e78c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e790:	2b00      	cmp	r3, #0
 800e792:	d12d      	bne.n	800e7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e796:	2b00      	cmp	r3, #0
 800e798:	d01c      	beq.n	800e7d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e79a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e79c:	88db      	ldrh	r3, [r3, #6]
 800e79e:	b29a      	uxth	r2, r3
 800e7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7a2:	889b      	ldrh	r3, [r3, #4]
 800e7a4:	b29b      	uxth	r3, r3
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d906      	bls.n	800e7b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e7aa:	4b45      	ldr	r3, [pc, #276]	@ (800e8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e7ac:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800e7b0:	4944      	ldr	r1, [pc, #272]	@ (800e8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e7b2:	4845      	ldr	r0, [pc, #276]	@ (800e8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e7b4:	f000 fd7e 	bl	800f2b4 <printf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7ba:	68ba      	ldr	r2, [r7, #8]
 800e7bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7c0:	88db      	ldrh	r3, [r3, #6]
 800e7c2:	b29a      	uxth	r2, r3
 800e7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7c6:	889b      	ldrh	r3, [r3, #4]
 800e7c8:	b29b      	uxth	r3, r3
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d010      	beq.n	800e7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	623b      	str	r3, [r7, #32]
 800e7d2:	e00d      	b.n	800e7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d006      	beq.n	800e7ea <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e7dc:	4b38      	ldr	r3, [pc, #224]	@ (800e8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e7de:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800e7e2:	493a      	ldr	r1, [pc, #232]	@ (800e8cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e7e4:	4838      	ldr	r0, [pc, #224]	@ (800e8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e7e6:	f000 fd65 	bl	800f2b4 <printf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	68ba      	ldr	r2, [r7, #8]
 800e7ee:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d105      	bne.n	800e802 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	7f9b      	ldrb	r3, [r3, #30]
 800e7fa:	f003 0301 	and.w	r3, r3, #1
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d059      	beq.n	800e8b6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e802:	6a3b      	ldr	r3, [r7, #32]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d04f      	beq.n	800e8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d006      	beq.n	800e81e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	685b      	ldr	r3, [r3, #4]
 800e814:	685b      	ldr	r3, [r3, #4]
 800e816:	889b      	ldrh	r3, [r3, #4]
 800e818:	b29b      	uxth	r3, r3
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d002      	beq.n	800e824 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e81e:	2300      	movs	r3, #0
 800e820:	623b      	str	r3, [r7, #32]
 800e822:	e041      	b.n	800e8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e826:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800e828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e82e:	e012      	b.n	800e856 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e832:	685b      	ldr	r3, [r3, #4]
 800e834:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800e836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e838:	88db      	ldrh	r3, [r3, #6]
 800e83a:	b29a      	uxth	r2, r3
 800e83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e83e:	889b      	ldrh	r3, [r3, #4]
 800e840:	b29b      	uxth	r3, r3
 800e842:	429a      	cmp	r2, r3
 800e844:	d002      	beq.n	800e84c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e846:	2300      	movs	r3, #0
 800e848:	623b      	str	r3, [r7, #32]
            break;
 800e84a:	e007      	b.n	800e85c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e84c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e84e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800e850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d1e9      	bne.n	800e830 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e85c:	6a3b      	ldr	r3, [r7, #32]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d022      	beq.n	800e8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d106      	bne.n	800e878 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e86a:	4b15      	ldr	r3, [pc, #84]	@ (800e8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e86c:	f240 12df 	movw	r2, #479	@ 0x1df
 800e870:	4917      	ldr	r1, [pc, #92]	@ (800e8d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e872:	4815      	ldr	r0, [pc, #84]	@ (800e8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e874:	f000 fd1e 	bl	800f2b4 <printf>
          LWIP_ASSERT("sanity check",
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e880:	429a      	cmp	r2, r3
 800e882:	d106      	bne.n	800e892 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e884:	4b0e      	ldr	r3, [pc, #56]	@ (800e8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e886:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e88a:	4911      	ldr	r1, [pc, #68]	@ (800e8d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e88c:	480e      	ldr	r0, [pc, #56]	@ (800e8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e88e:	f000 fd11 	bl	800f2b4 <printf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d006      	beq.n	800e8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e89a:	4b09      	ldr	r3, [pc, #36]	@ (800e8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e89c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800e8a0:	490c      	ldr	r1, [pc, #48]	@ (800e8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e8a2:	4809      	ldr	r0, [pc, #36]	@ (800e8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e8a4:	f000 fd06 	bl	800f2b4 <printf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e8a8:	6a3b      	ldr	r3, [r7, #32]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	bf14      	ite	ne
 800e8ae:	2301      	movne	r3, #1
 800e8b0:	2300      	moveq	r3, #0
 800e8b2:	b2db      	uxtb	r3, r3
 800e8b4:	e000      	b.n	800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e8b6:	2300      	movs	r3, #0
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3730      	adds	r7, #48	@ 0x30
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}
 800e8c0:	080163ac 	.word	0x080163ac
 800e8c4:	08016490 	.word	0x08016490
 800e8c8:	080163f4 	.word	0x080163f4
 800e8cc:	080164b0 	.word	0x080164b0
 800e8d0:	080164e8 	.word	0x080164e8
 800e8d4:	080164f8 	.word	0x080164f8

0800e8d8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b08e      	sub	sp, #56	@ 0x38
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	685b      	ldr	r3, [r3, #4]
 800e8e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	f003 030f 	and.w	r3, r3, #15
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	b2db      	uxtb	r3, r3
 800e8f4:	2b14      	cmp	r3, #20
 800e8f6:	f040 8171 	bne.w	800ebdc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e8fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8fc:	88db      	ldrh	r3, [r3, #6]
 800e8fe:	b29b      	uxth	r3, r3
 800e900:	4618      	mov	r0, r3
 800e902:	f7f6 fb9b 	bl	800503c <lwip_htons>
 800e906:	4603      	mov	r3, r0
 800e908:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e90c:	b29b      	uxth	r3, r3
 800e90e:	00db      	lsls	r3, r3, #3
 800e910:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e914:	885b      	ldrh	r3, [r3, #2]
 800e916:	b29b      	uxth	r3, r3
 800e918:	4618      	mov	r0, r3
 800e91a:	f7f6 fb8f 	bl	800503c <lwip_htons>
 800e91e:	4603      	mov	r3, r0
 800e920:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e924:	781b      	ldrb	r3, [r3, #0]
 800e926:	f003 030f 	and.w	r3, r3, #15
 800e92a:	b2db      	uxtb	r3, r3
 800e92c:	009b      	lsls	r3, r3, #2
 800e92e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800e932:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e936:	b29b      	uxth	r3, r3
 800e938:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e93a:	429a      	cmp	r2, r3
 800e93c:	f0c0 8150 	bcc.w	800ebe0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e940:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e944:	b29b      	uxth	r3, r3
 800e946:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e948:	1ad3      	subs	r3, r2, r3
 800e94a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f7f7 ff5b 	bl	8006808 <pbuf_clen>
 800e952:	4603      	mov	r3, r0
 800e954:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e956:	4b8c      	ldr	r3, [pc, #560]	@ (800eb88 <ip4_reass+0x2b0>)
 800e958:	881b      	ldrh	r3, [r3, #0]
 800e95a:	461a      	mov	r2, r3
 800e95c:	8c3b      	ldrh	r3, [r7, #32]
 800e95e:	4413      	add	r3, r2
 800e960:	2b0a      	cmp	r3, #10
 800e962:	dd10      	ble.n	800e986 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e964:	8c3b      	ldrh	r3, [r7, #32]
 800e966:	4619      	mov	r1, r3
 800e968:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e96a:	f7ff fd81 	bl	800e470 <ip_reass_remove_oldest_datagram>
 800e96e:	4603      	mov	r3, r0
 800e970:	2b00      	cmp	r3, #0
 800e972:	f000 8137 	beq.w	800ebe4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e976:	4b84      	ldr	r3, [pc, #528]	@ (800eb88 <ip4_reass+0x2b0>)
 800e978:	881b      	ldrh	r3, [r3, #0]
 800e97a:	461a      	mov	r2, r3
 800e97c:	8c3b      	ldrh	r3, [r7, #32]
 800e97e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e980:	2b0a      	cmp	r3, #10
 800e982:	f300 812f 	bgt.w	800ebe4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e986:	4b81      	ldr	r3, [pc, #516]	@ (800eb8c <ip4_reass+0x2b4>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e98c:	e015      	b.n	800e9ba <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e990:	695a      	ldr	r2, [r3, #20]
 800e992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e994:	68db      	ldr	r3, [r3, #12]
 800e996:	429a      	cmp	r2, r3
 800e998:	d10c      	bne.n	800e9b4 <ip4_reass+0xdc>
 800e99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e99c:	699a      	ldr	r2, [r3, #24]
 800e99e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9a0:	691b      	ldr	r3, [r3, #16]
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	d106      	bne.n	800e9b4 <ip4_reass+0xdc>
 800e9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9a8:	899a      	ldrh	r2, [r3, #12]
 800e9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ac:	889b      	ldrh	r3, [r3, #4]
 800e9ae:	b29b      	uxth	r3, r3
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d006      	beq.n	800e9c2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e9b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	633b      	str	r3, [r7, #48]	@ 0x30
 800e9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d1e6      	bne.n	800e98e <ip4_reass+0xb6>
 800e9c0:	e000      	b.n	800e9c4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e9c2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e9c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d109      	bne.n	800e9de <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e9ca:	8c3b      	ldrh	r3, [r7, #32]
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9d0:	f7ff fdb0 	bl	800e534 <ip_reass_enqueue_new_datagram>
 800e9d4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d11c      	bne.n	800ea16 <ip4_reass+0x13e>
      goto nullreturn;
 800e9dc:	e105      	b.n	800ebea <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9e0:	88db      	ldrh	r3, [r3, #6]
 800e9e2:	b29b      	uxth	r3, r3
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7f6 fb29 	bl	800503c <lwip_htons>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d110      	bne.n	800ea16 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9f6:	89db      	ldrh	r3, [r3, #14]
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f7f6 fb1f 	bl	800503c <lwip_htons>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d006      	beq.n	800ea16 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ea08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea0a:	3308      	adds	r3, #8
 800ea0c:	2214      	movs	r2, #20
 800ea0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea10:	4618      	mov	r0, r3
 800ea12:	f000 fd99 	bl	800f548 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ea16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea18:	88db      	ldrh	r3, [r3, #6]
 800ea1a:	b29b      	uxth	r3, r3
 800ea1c:	f003 0320 	and.w	r3, r3, #32
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	bf0c      	ite	eq
 800ea24:	2301      	moveq	r3, #1
 800ea26:	2300      	movne	r3, #0
 800ea28:	b2db      	uxtb	r3, r3
 800ea2a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ea2c:	69fb      	ldr	r3, [r7, #28]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d00e      	beq.n	800ea50 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ea32:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ea34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea36:	4413      	add	r3, r2
 800ea38:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ea3a:	8b7a      	ldrh	r2, [r7, #26]
 800ea3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	f0c0 80a0 	bcc.w	800eb84 <ip4_reass+0x2ac>
 800ea44:	8b7b      	ldrh	r3, [r7, #26]
 800ea46:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	f200 809a 	bhi.w	800eb84 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ea50:	69fa      	ldr	r2, [r7, #28]
 800ea52:	6879      	ldr	r1, [r7, #4]
 800ea54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ea56:	f7ff fdd5 	bl	800e604 <ip_reass_chain_frag_into_datagram_and_validate>
 800ea5a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ea62:	f000 809b 	beq.w	800eb9c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ea66:	4b48      	ldr	r3, [pc, #288]	@ (800eb88 <ip4_reass+0x2b0>)
 800ea68:	881a      	ldrh	r2, [r3, #0]
 800ea6a:	8c3b      	ldrh	r3, [r7, #32]
 800ea6c:	4413      	add	r3, r2
 800ea6e:	b29a      	uxth	r2, r3
 800ea70:	4b45      	ldr	r3, [pc, #276]	@ (800eb88 <ip4_reass+0x2b0>)
 800ea72:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ea74:	69fb      	ldr	r3, [r7, #28]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d00d      	beq.n	800ea96 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ea7a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ea7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea7e:	4413      	add	r3, r2
 800ea80:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ea82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea84:	8a7a      	ldrh	r2, [r7, #18]
 800ea86:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ea88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea8a:	7f9b      	ldrb	r3, [r3, #30]
 800ea8c:	f043 0301 	orr.w	r3, r3, #1
 800ea90:	b2da      	uxtb	r2, r3
 800ea92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea94:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	2b01      	cmp	r3, #1
 800ea9a:	d171      	bne.n	800eb80 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ea9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea9e:	8b9b      	ldrh	r3, [r3, #28]
 800eaa0:	3314      	adds	r3, #20
 800eaa2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800eaa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaa6:	685b      	ldr	r3, [r3, #4]
 800eaa8:	685b      	ldr	r3, [r3, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800eaae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eab0:	685b      	ldr	r3, [r3, #4]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800eab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eab8:	3308      	adds	r3, #8
 800eaba:	2214      	movs	r2, #20
 800eabc:	4619      	mov	r1, r3
 800eabe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eac0:	f000 fd42 	bl	800f548 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800eac4:	8a3b      	ldrh	r3, [r7, #16]
 800eac6:	4618      	mov	r0, r3
 800eac8:	f7f6 fab8 	bl	800503c <lwip_htons>
 800eacc:	4603      	mov	r3, r0
 800eace:	461a      	mov	r2, r3
 800ead0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ead2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ead4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ead6:	2200      	movs	r2, #0
 800ead8:	719a      	strb	r2, [r3, #6]
 800eada:	2200      	movs	r2, #0
 800eadc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800eade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eae0:	2200      	movs	r2, #0
 800eae2:	729a      	strb	r2, [r3, #10]
 800eae4:	2200      	movs	r2, #0
 800eae6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800eae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800eaee:	e00d      	b.n	800eb0c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800eaf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800eaf6:	2114      	movs	r1, #20
 800eaf8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800eafa:	f7f7 fd77 	bl	80065ec <pbuf_remove_header>
      pbuf_cat(p, r);
 800eafe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f7f7 febb 	bl	800687c <pbuf_cat>
      r = iprh->next_pbuf;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800eb0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d1ee      	bne.n	800eaf0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800eb12:	4b1e      	ldr	r3, [pc, #120]	@ (800eb8c <ip4_reass+0x2b4>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d102      	bne.n	800eb22 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eb20:	e010      	b.n	800eb44 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eb22:	4b1a      	ldr	r3, [pc, #104]	@ (800eb8c <ip4_reass+0x2b4>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eb28:	e007      	b.n	800eb3a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800eb2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d006      	beq.n	800eb42 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eb34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eb3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d1f4      	bne.n	800eb2a <ip4_reass+0x252>
 800eb40:	e000      	b.n	800eb44 <ip4_reass+0x26c>
          break;
 800eb42:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800eb44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eb46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eb48:	f7ff fd2e 	bl	800e5a8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f7f7 fe5b 	bl	8006808 <pbuf_clen>
 800eb52:	4603      	mov	r3, r0
 800eb54:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800eb56:	4b0c      	ldr	r3, [pc, #48]	@ (800eb88 <ip4_reass+0x2b0>)
 800eb58:	881b      	ldrh	r3, [r3, #0]
 800eb5a:	8c3a      	ldrh	r2, [r7, #32]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d906      	bls.n	800eb6e <ip4_reass+0x296>
 800eb60:	4b0b      	ldr	r3, [pc, #44]	@ (800eb90 <ip4_reass+0x2b8>)
 800eb62:	f240 229b 	movw	r2, #667	@ 0x29b
 800eb66:	490b      	ldr	r1, [pc, #44]	@ (800eb94 <ip4_reass+0x2bc>)
 800eb68:	480b      	ldr	r0, [pc, #44]	@ (800eb98 <ip4_reass+0x2c0>)
 800eb6a:	f000 fba3 	bl	800f2b4 <printf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800eb6e:	4b06      	ldr	r3, [pc, #24]	@ (800eb88 <ip4_reass+0x2b0>)
 800eb70:	881a      	ldrh	r2, [r3, #0]
 800eb72:	8c3b      	ldrh	r3, [r7, #32]
 800eb74:	1ad3      	subs	r3, r2, r3
 800eb76:	b29a      	uxth	r2, r3
 800eb78:	4b03      	ldr	r3, [pc, #12]	@ (800eb88 <ip4_reass+0x2b0>)
 800eb7a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	e038      	b.n	800ebf2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800eb80:	2300      	movs	r3, #0
 800eb82:	e036      	b.n	800ebf2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800eb84:	bf00      	nop
 800eb86:	e00a      	b.n	800eb9e <ip4_reass+0x2c6>
 800eb88:	20008a44 	.word	0x20008a44
 800eb8c:	20008a40 	.word	0x20008a40
 800eb90:	080163ac 	.word	0x080163ac
 800eb94:	0801651c 	.word	0x0801651c
 800eb98:	080163f4 	.word	0x080163f4
    goto nullreturn_ipr;
 800eb9c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800eb9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d106      	bne.n	800ebb2 <ip4_reass+0x2da>
 800eba4:	4b15      	ldr	r3, [pc, #84]	@ (800ebfc <ip4_reass+0x324>)
 800eba6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800ebaa:	4915      	ldr	r1, [pc, #84]	@ (800ec00 <ip4_reass+0x328>)
 800ebac:	4815      	ldr	r0, [pc, #84]	@ (800ec04 <ip4_reass+0x32c>)
 800ebae:	f000 fb81 	bl	800f2b4 <printf>
  if (ipr->p == NULL) {
 800ebb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebb4:	685b      	ldr	r3, [r3, #4]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d116      	bne.n	800ebe8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ebba:	4b13      	ldr	r3, [pc, #76]	@ (800ec08 <ip4_reass+0x330>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	d006      	beq.n	800ebd2 <ip4_reass+0x2fa>
 800ebc4:	4b0d      	ldr	r3, [pc, #52]	@ (800ebfc <ip4_reass+0x324>)
 800ebc6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800ebca:	4910      	ldr	r1, [pc, #64]	@ (800ec0c <ip4_reass+0x334>)
 800ebcc:	480d      	ldr	r0, [pc, #52]	@ (800ec04 <ip4_reass+0x32c>)
 800ebce:	f000 fb71 	bl	800f2b4 <printf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ebd2:	2100      	movs	r1, #0
 800ebd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ebd6:	f7ff fce7 	bl	800e5a8 <ip_reass_dequeue_datagram>
 800ebda:	e006      	b.n	800ebea <ip4_reass+0x312>
    goto nullreturn;
 800ebdc:	bf00      	nop
 800ebde:	e004      	b.n	800ebea <ip4_reass+0x312>
    goto nullreturn;
 800ebe0:	bf00      	nop
 800ebe2:	e002      	b.n	800ebea <ip4_reass+0x312>
      goto nullreturn;
 800ebe4:	bf00      	nop
 800ebe6:	e000      	b.n	800ebea <ip4_reass+0x312>
  }

nullreturn:
 800ebe8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f7f7 fd84 	bl	80066f8 <pbuf_free>
  return NULL;
 800ebf0:	2300      	movs	r3, #0
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3738      	adds	r7, #56	@ 0x38
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	080163ac 	.word	0x080163ac
 800ec00:	08016538 	.word	0x08016538
 800ec04:	080163f4 	.word	0x080163f4
 800ec08:	20008a40 	.word	0x20008a40
 800ec0c:	08016544 	.word	0x08016544

0800ec10 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ec14:	2005      	movs	r0, #5
 800ec16:	f7f6 fe89 	bl	800592c <memp_malloc>
 800ec1a:	4603      	mov	r3, r0
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	bd80      	pop	{r7, pc}

0800ec20 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d106      	bne.n	800ec3c <ip_frag_free_pbuf_custom_ref+0x1c>
 800ec2e:	4b07      	ldr	r3, [pc, #28]	@ (800ec4c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ec30:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800ec34:	4906      	ldr	r1, [pc, #24]	@ (800ec50 <ip_frag_free_pbuf_custom_ref+0x30>)
 800ec36:	4807      	ldr	r0, [pc, #28]	@ (800ec54 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ec38:	f000 fb3c 	bl	800f2b4 <printf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ec3c:	6879      	ldr	r1, [r7, #4]
 800ec3e:	2005      	movs	r0, #5
 800ec40:	f7f6 fee4 	bl	8005a0c <memp_free>
}
 800ec44:	bf00      	nop
 800ec46:	3708      	adds	r7, #8
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}
 800ec4c:	080163ac 	.word	0x080163ac
 800ec50:	08016564 	.word	0x08016564
 800ec54:	080163f4 	.word	0x080163f4

0800ec58 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b084      	sub	sp, #16
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d106      	bne.n	800ec78 <ipfrag_free_pbuf_custom+0x20>
 800ec6a:	4b11      	ldr	r3, [pc, #68]	@ (800ecb0 <ipfrag_free_pbuf_custom+0x58>)
 800ec6c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800ec70:	4910      	ldr	r1, [pc, #64]	@ (800ecb4 <ipfrag_free_pbuf_custom+0x5c>)
 800ec72:	4811      	ldr	r0, [pc, #68]	@ (800ecb8 <ipfrag_free_pbuf_custom+0x60>)
 800ec74:	f000 fb1e 	bl	800f2b4 <printf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ec78:	68fa      	ldr	r2, [r7, #12]
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d006      	beq.n	800ec8e <ipfrag_free_pbuf_custom+0x36>
 800ec80:	4b0b      	ldr	r3, [pc, #44]	@ (800ecb0 <ipfrag_free_pbuf_custom+0x58>)
 800ec82:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800ec86:	490d      	ldr	r1, [pc, #52]	@ (800ecbc <ipfrag_free_pbuf_custom+0x64>)
 800ec88:	480b      	ldr	r0, [pc, #44]	@ (800ecb8 <ipfrag_free_pbuf_custom+0x60>)
 800ec8a:	f000 fb13 	bl	800f2b4 <printf>
  if (pcr->original != NULL) {
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	695b      	ldr	r3, [r3, #20]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d004      	beq.n	800eca0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	695b      	ldr	r3, [r3, #20]
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7f7 fd2c 	bl	80066f8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800eca0:	68f8      	ldr	r0, [r7, #12]
 800eca2:	f7ff ffbd 	bl	800ec20 <ip_frag_free_pbuf_custom_ref>
}
 800eca6:	bf00      	nop
 800eca8:	3710      	adds	r7, #16
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	080163ac 	.word	0x080163ac
 800ecb4:	08016570 	.word	0x08016570
 800ecb8:	080163f4 	.word	0x080163f4
 800ecbc:	0801657c 	.word	0x0801657c

0800ecc0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b094      	sub	sp, #80	@ 0x50
 800ecc4:	af02      	add	r7, sp, #8
 800ecc6:	60f8      	str	r0, [r7, #12]
 800ecc8:	60b9      	str	r1, [r7, #8]
 800ecca:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800eccc:	2300      	movs	r3, #0
 800ecce:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ecd6:	3b14      	subs	r3, #20
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	da00      	bge.n	800ecde <ip4_frag+0x1e>
 800ecdc:	3307      	adds	r3, #7
 800ecde:	10db      	asrs	r3, r3, #3
 800ece0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ece2:	2314      	movs	r3, #20
 800ece4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800ecec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecee:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ecf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecf2:	781b      	ldrb	r3, [r3, #0]
 800ecf4:	f003 030f 	and.w	r3, r3, #15
 800ecf8:	b2db      	uxtb	r3, r3
 800ecfa:	009b      	lsls	r3, r3, #2
 800ecfc:	b2db      	uxtb	r3, r3
 800ecfe:	2b14      	cmp	r3, #20
 800ed00:	d002      	beq.n	800ed08 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ed02:	f06f 0305 	mvn.w	r3, #5
 800ed06:	e110      	b.n	800ef2a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	895b      	ldrh	r3, [r3, #10]
 800ed0c:	2b13      	cmp	r3, #19
 800ed0e:	d809      	bhi.n	800ed24 <ip4_frag+0x64>
 800ed10:	4b88      	ldr	r3, [pc, #544]	@ (800ef34 <ip4_frag+0x274>)
 800ed12:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800ed16:	4988      	ldr	r1, [pc, #544]	@ (800ef38 <ip4_frag+0x278>)
 800ed18:	4888      	ldr	r0, [pc, #544]	@ (800ef3c <ip4_frag+0x27c>)
 800ed1a:	f000 facb 	bl	800f2b4 <printf>
 800ed1e:	f06f 0305 	mvn.w	r3, #5
 800ed22:	e102      	b.n	800ef2a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ed24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed26:	88db      	ldrh	r3, [r3, #6]
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7f6 f986 	bl	800503c <lwip_htons>
 800ed30:	4603      	mov	r3, r0
 800ed32:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800ed34:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ed36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ed3a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ed3e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ed40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ed44:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	891b      	ldrh	r3, [r3, #8]
 800ed4a:	3b14      	subs	r3, #20
 800ed4c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800ed50:	e0e1      	b.n	800ef16 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ed52:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ed54:	00db      	lsls	r3, r3, #3
 800ed56:	b29b      	uxth	r3, r3
 800ed58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	bf28      	it	cs
 800ed60:	4613      	movcs	r3, r2
 800ed62:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ed64:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ed68:	2114      	movs	r1, #20
 800ed6a:	200e      	movs	r0, #14
 800ed6c:	f7f7 f9e0 	bl	8006130 <pbuf_alloc>
 800ed70:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800ed72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	f000 80d5 	beq.w	800ef24 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ed7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed7c:	895b      	ldrh	r3, [r3, #10]
 800ed7e:	2b13      	cmp	r3, #19
 800ed80:	d806      	bhi.n	800ed90 <ip4_frag+0xd0>
 800ed82:	4b6c      	ldr	r3, [pc, #432]	@ (800ef34 <ip4_frag+0x274>)
 800ed84:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800ed88:	496d      	ldr	r1, [pc, #436]	@ (800ef40 <ip4_frag+0x280>)
 800ed8a:	486c      	ldr	r0, [pc, #432]	@ (800ef3c <ip4_frag+0x27c>)
 800ed8c:	f000 fa92 	bl	800f2b4 <printf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ed90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed92:	685b      	ldr	r3, [r3, #4]
 800ed94:	2214      	movs	r2, #20
 800ed96:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f000 fbd5 	bl	800f548 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ed9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eda0:	685b      	ldr	r3, [r3, #4]
 800eda2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800eda4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800eda6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800edaa:	e064      	b.n	800ee76 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	895a      	ldrh	r2, [r3, #10]
 800edb0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800edb2:	1ad3      	subs	r3, r2, r3
 800edb4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	895b      	ldrh	r3, [r3, #10]
 800edba:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d906      	bls.n	800edce <ip4_frag+0x10e>
 800edc0:	4b5c      	ldr	r3, [pc, #368]	@ (800ef34 <ip4_frag+0x274>)
 800edc2:	f240 322d 	movw	r2, #813	@ 0x32d
 800edc6:	495f      	ldr	r1, [pc, #380]	@ (800ef44 <ip4_frag+0x284>)
 800edc8:	485c      	ldr	r0, [pc, #368]	@ (800ef3c <ip4_frag+0x27c>)
 800edca:	f000 fa73 	bl	800f2b4 <printf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800edce:	8bfa      	ldrh	r2, [r7, #30]
 800edd0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800edd4:	4293      	cmp	r3, r2
 800edd6:	bf28      	it	cs
 800edd8:	4613      	movcs	r3, r2
 800edda:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800edde:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d105      	bne.n	800edf2 <ip4_frag+0x132>
        poff = 0;
 800ede6:	2300      	movs	r3, #0
 800ede8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	60fb      	str	r3, [r7, #12]
        continue;
 800edf0:	e041      	b.n	800ee76 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800edf2:	f7ff ff0d 	bl	800ec10 <ip_frag_alloc_pbuf_custom_ref>
 800edf6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800edf8:	69bb      	ldr	r3, [r7, #24]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d103      	bne.n	800ee06 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800edfe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee00:	f7f7 fc7a 	bl	80066f8 <pbuf_free>
        goto memerr;
 800ee04:	e08f      	b.n	800ef26 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ee06:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ee0c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ee0e:	4413      	add	r3, r2
 800ee10:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800ee14:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800ee18:	9201      	str	r2, [sp, #4]
 800ee1a:	9300      	str	r3, [sp, #0]
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	2241      	movs	r2, #65	@ 0x41
 800ee20:	2000      	movs	r0, #0
 800ee22:	f7f7 faaf 	bl	8006384 <pbuf_alloced_custom>
 800ee26:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d106      	bne.n	800ee3c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ee2e:	69b8      	ldr	r0, [r7, #24]
 800ee30:	f7ff fef6 	bl	800ec20 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ee34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee36:	f7f7 fc5f 	bl	80066f8 <pbuf_free>
        goto memerr;
 800ee3a:	e074      	b.n	800ef26 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ee3c:	68f8      	ldr	r0, [r7, #12]
 800ee3e:	f7f7 fcfb 	bl	8006838 <pbuf_ref>
      pcr->original = p;
 800ee42:	69bb      	ldr	r3, [r7, #24]
 800ee44:	68fa      	ldr	r2, [r7, #12]
 800ee46:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ee48:	69bb      	ldr	r3, [r7, #24]
 800ee4a:	4a3f      	ldr	r2, [pc, #252]	@ (800ef48 <ip4_frag+0x288>)
 800ee4c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ee4e:	6979      	ldr	r1, [r7, #20]
 800ee50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee52:	f7f7 fd13 	bl	800687c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ee56:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800ee5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ee5e:	1ad3      	subs	r3, r2, r3
 800ee60:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800ee64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d004      	beq.n	800ee76 <ip4_frag+0x1b6>
        poff = 0;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ee76:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d196      	bne.n	800edac <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ee7e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800ee80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ee84:	4413      	add	r3, r2
 800ee86:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ee8c:	f1a3 0213 	sub.w	r2, r3, #19
 800ee90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ee94:	429a      	cmp	r2, r3
 800ee96:	bfcc      	ite	gt
 800ee98:	2301      	movgt	r3, #1
 800ee9a:	2300      	movle	r3, #0
 800ee9c:	b2db      	uxtb	r3, r3
 800ee9e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800eea0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800eea4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eea8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800eeaa:	6a3b      	ldr	r3, [r7, #32]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d002      	beq.n	800eeb6 <ip4_frag+0x1f6>
 800eeb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d003      	beq.n	800eebe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800eeb6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800eeb8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800eebc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800eebe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7f6 f8bb 	bl	800503c <lwip_htons>
 800eec6:	4603      	mov	r3, r0
 800eec8:	461a      	mov	r2, r3
 800eeca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eecc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800eece:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800eed0:	3314      	adds	r3, #20
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	4618      	mov	r0, r3
 800eed6:	f7f6 f8b1 	bl	800503c <lwip_htons>
 800eeda:	4603      	mov	r3, r0
 800eedc:	461a      	mov	r2, r3
 800eede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eee0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800eee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eee4:	2200      	movs	r2, #0
 800eee6:	729a      	strb	r2, [r3, #10]
 800eee8:	2200      	movs	r2, #0
 800eeea:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	695b      	ldr	r3, [r3, #20]
 800eef0:	687a      	ldr	r2, [r7, #4]
 800eef2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800eef4:	68b8      	ldr	r0, [r7, #8]
 800eef6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800eef8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eefa:	f7f7 fbfd 	bl	80066f8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800eefe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ef02:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ef04:	1ad3      	subs	r3, r2, r3
 800ef06:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800ef0a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800ef0e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ef10:	4413      	add	r3, r2
 800ef12:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800ef16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	f47f af19 	bne.w	800ed52 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ef20:	2300      	movs	r3, #0
 800ef22:	e002      	b.n	800ef2a <ip4_frag+0x26a>
      goto memerr;
 800ef24:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ef26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3748      	adds	r7, #72	@ 0x48
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
 800ef32:	bf00      	nop
 800ef34:	080163ac 	.word	0x080163ac
 800ef38:	08016588 	.word	0x08016588
 800ef3c:	080163f4 	.word	0x080163f4
 800ef40:	080165a4 	.word	0x080165a4
 800ef44:	080165c4 	.word	0x080165c4
 800ef48:	0800ec59 	.word	0x0800ec59

0800ef4c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b086      	sub	sp, #24
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ef56:	230e      	movs	r3, #14
 800ef58:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	895b      	ldrh	r3, [r3, #10]
 800ef5e:	2b0e      	cmp	r3, #14
 800ef60:	d96e      	bls.n	800f040 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	7bdb      	ldrb	r3, [r3, #15]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d106      	bne.n	800ef78 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef70:	3301      	adds	r3, #1
 800ef72:	b2da      	uxtb	r2, r3
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	7b1a      	ldrb	r2, [r3, #12]
 800ef82:	7b5b      	ldrb	r3, [r3, #13]
 800ef84:	021b      	lsls	r3, r3, #8
 800ef86:	4313      	orrs	r3, r2
 800ef88:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	f003 0301 	and.w	r3, r3, #1
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d023      	beq.n	800efde <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ef96:	693b      	ldr	r3, [r7, #16]
 800ef98:	781b      	ldrb	r3, [r3, #0]
 800ef9a:	2b01      	cmp	r3, #1
 800ef9c:	d10f      	bne.n	800efbe <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	785b      	ldrb	r3, [r3, #1]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d11b      	bne.n	800efde <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800efaa:	2b5e      	cmp	r3, #94	@ 0x5e
 800efac:	d117      	bne.n	800efde <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	7b5b      	ldrb	r3, [r3, #13]
 800efb2:	f043 0310 	orr.w	r3, r3, #16
 800efb6:	b2da      	uxtb	r2, r3
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	735a      	strb	r2, [r3, #13]
 800efbc:	e00f      	b.n	800efde <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800efbe:	693b      	ldr	r3, [r7, #16]
 800efc0:	2206      	movs	r2, #6
 800efc2:	4928      	ldr	r1, [pc, #160]	@ (800f064 <ethernet_input+0x118>)
 800efc4:	4618      	mov	r0, r3
 800efc6:	f000 fa18 	bl	800f3fa <memcmp>
 800efca:	4603      	mov	r3, r0
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d106      	bne.n	800efde <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	7b5b      	ldrb	r3, [r3, #13]
 800efd4:	f043 0308 	orr.w	r3, r3, #8
 800efd8:	b2da      	uxtb	r2, r3
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800efde:	89fb      	ldrh	r3, [r7, #14]
 800efe0:	2b08      	cmp	r3, #8
 800efe2:	d003      	beq.n	800efec <ethernet_input+0xa0>
 800efe4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800efe8:	d014      	beq.n	800f014 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800efea:	e032      	b.n	800f052 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eff2:	f003 0308 	and.w	r3, r3, #8
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d024      	beq.n	800f044 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800effa:	8afb      	ldrh	r3, [r7, #22]
 800effc:	4619      	mov	r1, r3
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	f7f7 faf4 	bl	80065ec <pbuf_remove_header>
 800f004:	4603      	mov	r3, r0
 800f006:	2b00      	cmp	r3, #0
 800f008:	d11e      	bne.n	800f048 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f00a:	6839      	ldr	r1, [r7, #0]
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f7fe ff21 	bl	800de54 <ip4_input>
      break;
 800f012:	e013      	b.n	800f03c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f01a:	f003 0308 	and.w	r3, r3, #8
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d014      	beq.n	800f04c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f022:	8afb      	ldrh	r3, [r7, #22]
 800f024:	4619      	mov	r1, r3
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f7f7 fae0 	bl	80065ec <pbuf_remove_header>
 800f02c:	4603      	mov	r3, r0
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d10e      	bne.n	800f050 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f032:	6839      	ldr	r1, [r7, #0]
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f7fe f8c1 	bl	800d1bc <etharp_input>
      break;
 800f03a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f03c:	2300      	movs	r3, #0
 800f03e:	e00c      	b.n	800f05a <ethernet_input+0x10e>
    goto free_and_return;
 800f040:	bf00      	nop
 800f042:	e006      	b.n	800f052 <ethernet_input+0x106>
        goto free_and_return;
 800f044:	bf00      	nop
 800f046:	e004      	b.n	800f052 <ethernet_input+0x106>
        goto free_and_return;
 800f048:	bf00      	nop
 800f04a:	e002      	b.n	800f052 <ethernet_input+0x106>
        goto free_and_return;
 800f04c:	bf00      	nop
 800f04e:	e000      	b.n	800f052 <ethernet_input+0x106>
        goto free_and_return;
 800f050:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f7f7 fb50 	bl	80066f8 <pbuf_free>
  return ERR_OK;
 800f058:	2300      	movs	r3, #0
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	3718      	adds	r7, #24
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
 800f062:	bf00      	nop
 800f064:	08016758 	.word	0x08016758

0800f068 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f068:	b580      	push	{r7, lr}
 800f06a:	b086      	sub	sp, #24
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	60f8      	str	r0, [r7, #12]
 800f070:	60b9      	str	r1, [r7, #8]
 800f072:	607a      	str	r2, [r7, #4]
 800f074:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f076:	8c3b      	ldrh	r3, [r7, #32]
 800f078:	4618      	mov	r0, r3
 800f07a:	f7f5 ffdf 	bl	800503c <lwip_htons>
 800f07e:	4603      	mov	r3, r0
 800f080:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f082:	210e      	movs	r1, #14
 800f084:	68b8      	ldr	r0, [r7, #8]
 800f086:	f7f7 faa1 	bl	80065cc <pbuf_add_header>
 800f08a:	4603      	mov	r3, r0
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d125      	bne.n	800f0dc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	8afa      	ldrh	r2, [r7, #22]
 800f09a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	2206      	movs	r2, #6
 800f0a0:	6839      	ldr	r1, [r7, #0]
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f000 fa50 	bl	800f548 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f0a8:	693b      	ldr	r3, [r7, #16]
 800f0aa:	3306      	adds	r3, #6
 800f0ac:	2206      	movs	r2, #6
 800f0ae:	6879      	ldr	r1, [r7, #4]
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f000 fa49 	bl	800f548 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f0bc:	2b06      	cmp	r3, #6
 800f0be:	d006      	beq.n	800f0ce <ethernet_output+0x66>
 800f0c0:	4b0a      	ldr	r3, [pc, #40]	@ (800f0ec <ethernet_output+0x84>)
 800f0c2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800f0c6:	490a      	ldr	r1, [pc, #40]	@ (800f0f0 <ethernet_output+0x88>)
 800f0c8:	480a      	ldr	r0, [pc, #40]	@ (800f0f4 <ethernet_output+0x8c>)
 800f0ca:	f000 f8f3 	bl	800f2b4 <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	699b      	ldr	r3, [r3, #24]
 800f0d2:	68b9      	ldr	r1, [r7, #8]
 800f0d4:	68f8      	ldr	r0, [r7, #12]
 800f0d6:	4798      	blx	r3
 800f0d8:	4603      	mov	r3, r0
 800f0da:	e002      	b.n	800f0e2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f0dc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f0de:	f06f 0301 	mvn.w	r3, #1
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3718      	adds	r7, #24
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop
 800f0ec:	080165d4 	.word	0x080165d4
 800f0f0:	0801660c 	.word	0x0801660c
 800f0f4:	08016640 	.word	0x08016640

0800f0f8 <rand>:
 800f0f8:	4b0a      	ldr	r3, [pc, #40]	@ (800f124 <rand+0x2c>)
 800f0fa:	480b      	ldr	r0, [pc, #44]	@ (800f128 <rand+0x30>)
 800f0fc:	6819      	ldr	r1, [r3, #0]
 800f0fe:	4a0b      	ldr	r2, [pc, #44]	@ (800f12c <rand+0x34>)
 800f100:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
 800f104:	b510      	push	{r4, lr}
 800f106:	f8d1 409c 	ldr.w	r4, [r1, #156]	@ 0x9c
 800f10a:	4358      	muls	r0, r3
 800f10c:	fb02 0004 	mla	r0, r2, r4, r0
 800f110:	fba3 3202 	umull	r3, r2, r3, r2
 800f114:	3301      	adds	r3, #1
 800f116:	eb40 0002 	adc.w	r0, r0, r2
 800f11a:	e9c1 3026 	strd	r3, r0, [r1, #152]	@ 0x98
 800f11e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800f122:	bd10      	pop	{r4, pc}
 800f124:	20000038 	.word	0x20000038
 800f128:	5851f42d 	.word	0x5851f42d
 800f12c:	4c957f2d 	.word	0x4c957f2d

0800f130 <std>:
 800f130:	2300      	movs	r3, #0
 800f132:	b510      	push	{r4, lr}
 800f134:	4604      	mov	r4, r0
 800f136:	e9c0 3300 	strd	r3, r3, [r0]
 800f13a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f13e:	6083      	str	r3, [r0, #8]
 800f140:	8181      	strh	r1, [r0, #12]
 800f142:	6643      	str	r3, [r0, #100]	@ 0x64
 800f144:	81c2      	strh	r2, [r0, #14]
 800f146:	6183      	str	r3, [r0, #24]
 800f148:	4619      	mov	r1, r3
 800f14a:	2208      	movs	r2, #8
 800f14c:	305c      	adds	r0, #92	@ 0x5c
 800f14e:	f000 f97e 	bl	800f44e <memset>
 800f152:	4b0d      	ldr	r3, [pc, #52]	@ (800f188 <std+0x58>)
 800f154:	6223      	str	r3, [r4, #32]
 800f156:	4b0d      	ldr	r3, [pc, #52]	@ (800f18c <std+0x5c>)
 800f158:	6263      	str	r3, [r4, #36]	@ 0x24
 800f15a:	4b0d      	ldr	r3, [pc, #52]	@ (800f190 <std+0x60>)
 800f15c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f15e:	4b0d      	ldr	r3, [pc, #52]	@ (800f194 <std+0x64>)
 800f160:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f162:	4b0d      	ldr	r3, [pc, #52]	@ (800f198 <std+0x68>)
 800f164:	61e4      	str	r4, [r4, #28]
 800f166:	429c      	cmp	r4, r3
 800f168:	d006      	beq.n	800f178 <std+0x48>
 800f16a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f16e:	4294      	cmp	r4, r2
 800f170:	d002      	beq.n	800f178 <std+0x48>
 800f172:	33d0      	adds	r3, #208	@ 0xd0
 800f174:	429c      	cmp	r4, r3
 800f176:	d105      	bne.n	800f184 <std+0x54>
 800f178:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f17c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f180:	f000 b9de 	b.w	800f540 <__retarget_lock_init_recursive>
 800f184:	bd10      	pop	{r4, pc}
 800f186:	bf00      	nop
 800f188:	0800f375 	.word	0x0800f375
 800f18c:	0800f397 	.word	0x0800f397
 800f190:	0800f3cf 	.word	0x0800f3cf
 800f194:	0800f3f3 	.word	0x0800f3f3
 800f198:	20008a48 	.word	0x20008a48

0800f19c <stdio_exit_handler>:
 800f19c:	4a02      	ldr	r2, [pc, #8]	@ (800f1a8 <stdio_exit_handler+0xc>)
 800f19e:	4903      	ldr	r1, [pc, #12]	@ (800f1ac <stdio_exit_handler+0x10>)
 800f1a0:	4803      	ldr	r0, [pc, #12]	@ (800f1b0 <stdio_exit_handler+0x14>)
 800f1a2:	f000 b869 	b.w	800f278 <_fwalk_sglue>
 800f1a6:	bf00      	nop
 800f1a8:	2000002c 	.word	0x2000002c
 800f1ac:	08011b0d 	.word	0x08011b0d
 800f1b0:	20000040 	.word	0x20000040

0800f1b4 <cleanup_stdio>:
 800f1b4:	6841      	ldr	r1, [r0, #4]
 800f1b6:	4b0c      	ldr	r3, [pc, #48]	@ (800f1e8 <cleanup_stdio+0x34>)
 800f1b8:	4299      	cmp	r1, r3
 800f1ba:	b510      	push	{r4, lr}
 800f1bc:	4604      	mov	r4, r0
 800f1be:	d001      	beq.n	800f1c4 <cleanup_stdio+0x10>
 800f1c0:	f002 fca4 	bl	8011b0c <_fclose_r>
 800f1c4:	68a1      	ldr	r1, [r4, #8]
 800f1c6:	4b09      	ldr	r3, [pc, #36]	@ (800f1ec <cleanup_stdio+0x38>)
 800f1c8:	4299      	cmp	r1, r3
 800f1ca:	d002      	beq.n	800f1d2 <cleanup_stdio+0x1e>
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	f002 fc9d 	bl	8011b0c <_fclose_r>
 800f1d2:	68e1      	ldr	r1, [r4, #12]
 800f1d4:	4b06      	ldr	r3, [pc, #24]	@ (800f1f0 <cleanup_stdio+0x3c>)
 800f1d6:	4299      	cmp	r1, r3
 800f1d8:	d004      	beq.n	800f1e4 <cleanup_stdio+0x30>
 800f1da:	4620      	mov	r0, r4
 800f1dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1e0:	f002 bc94 	b.w	8011b0c <_fclose_r>
 800f1e4:	bd10      	pop	{r4, pc}
 800f1e6:	bf00      	nop
 800f1e8:	20008a48 	.word	0x20008a48
 800f1ec:	20008ab0 	.word	0x20008ab0
 800f1f0:	20008b18 	.word	0x20008b18

0800f1f4 <global_stdio_init.part.0>:
 800f1f4:	b510      	push	{r4, lr}
 800f1f6:	4b0b      	ldr	r3, [pc, #44]	@ (800f224 <global_stdio_init.part.0+0x30>)
 800f1f8:	4c0b      	ldr	r4, [pc, #44]	@ (800f228 <global_stdio_init.part.0+0x34>)
 800f1fa:	4a0c      	ldr	r2, [pc, #48]	@ (800f22c <global_stdio_init.part.0+0x38>)
 800f1fc:	601a      	str	r2, [r3, #0]
 800f1fe:	4620      	mov	r0, r4
 800f200:	2200      	movs	r2, #0
 800f202:	2104      	movs	r1, #4
 800f204:	f7ff ff94 	bl	800f130 <std>
 800f208:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f20c:	2201      	movs	r2, #1
 800f20e:	2109      	movs	r1, #9
 800f210:	f7ff ff8e 	bl	800f130 <std>
 800f214:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f218:	2202      	movs	r2, #2
 800f21a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f21e:	2112      	movs	r1, #18
 800f220:	f7ff bf86 	b.w	800f130 <std>
 800f224:	20008b80 	.word	0x20008b80
 800f228:	20008a48 	.word	0x20008a48
 800f22c:	0800f19d 	.word	0x0800f19d

0800f230 <__sfp_lock_acquire>:
 800f230:	4801      	ldr	r0, [pc, #4]	@ (800f238 <__sfp_lock_acquire+0x8>)
 800f232:	f000 b987 	b.w	800f544 <__retarget_lock_acquire_recursive>
 800f236:	bf00      	nop
 800f238:	20008b8a 	.word	0x20008b8a

0800f23c <__sfp_lock_release>:
 800f23c:	4801      	ldr	r0, [pc, #4]	@ (800f244 <__sfp_lock_release+0x8>)
 800f23e:	f000 b982 	b.w	800f546 <__retarget_lock_release_recursive>
 800f242:	bf00      	nop
 800f244:	20008b8a 	.word	0x20008b8a

0800f248 <__sinit>:
 800f248:	b510      	push	{r4, lr}
 800f24a:	4604      	mov	r4, r0
 800f24c:	f7ff fff0 	bl	800f230 <__sfp_lock_acquire>
 800f250:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f252:	b11b      	cbz	r3, 800f25c <__sinit+0x14>
 800f254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f258:	f7ff bff0 	b.w	800f23c <__sfp_lock_release>
 800f25c:	4b04      	ldr	r3, [pc, #16]	@ (800f270 <__sinit+0x28>)
 800f25e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f260:	4b04      	ldr	r3, [pc, #16]	@ (800f274 <__sinit+0x2c>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d1f5      	bne.n	800f254 <__sinit+0xc>
 800f268:	f7ff ffc4 	bl	800f1f4 <global_stdio_init.part.0>
 800f26c:	e7f2      	b.n	800f254 <__sinit+0xc>
 800f26e:	bf00      	nop
 800f270:	0800f1b5 	.word	0x0800f1b5
 800f274:	20008b80 	.word	0x20008b80

0800f278 <_fwalk_sglue>:
 800f278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f27c:	4607      	mov	r7, r0
 800f27e:	4688      	mov	r8, r1
 800f280:	4614      	mov	r4, r2
 800f282:	2600      	movs	r6, #0
 800f284:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f288:	f1b9 0901 	subs.w	r9, r9, #1
 800f28c:	d505      	bpl.n	800f29a <_fwalk_sglue+0x22>
 800f28e:	6824      	ldr	r4, [r4, #0]
 800f290:	2c00      	cmp	r4, #0
 800f292:	d1f7      	bne.n	800f284 <_fwalk_sglue+0xc>
 800f294:	4630      	mov	r0, r6
 800f296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f29a:	89ab      	ldrh	r3, [r5, #12]
 800f29c:	2b01      	cmp	r3, #1
 800f29e:	d907      	bls.n	800f2b0 <_fwalk_sglue+0x38>
 800f2a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f2a4:	3301      	adds	r3, #1
 800f2a6:	d003      	beq.n	800f2b0 <_fwalk_sglue+0x38>
 800f2a8:	4629      	mov	r1, r5
 800f2aa:	4638      	mov	r0, r7
 800f2ac:	47c0      	blx	r8
 800f2ae:	4306      	orrs	r6, r0
 800f2b0:	3568      	adds	r5, #104	@ 0x68
 800f2b2:	e7e9      	b.n	800f288 <_fwalk_sglue+0x10>

0800f2b4 <printf>:
 800f2b4:	b40f      	push	{r0, r1, r2, r3}
 800f2b6:	b507      	push	{r0, r1, r2, lr}
 800f2b8:	4906      	ldr	r1, [pc, #24]	@ (800f2d4 <printf+0x20>)
 800f2ba:	ab04      	add	r3, sp, #16
 800f2bc:	6808      	ldr	r0, [r1, #0]
 800f2be:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2c2:	6881      	ldr	r1, [r0, #8]
 800f2c4:	9301      	str	r3, [sp, #4]
 800f2c6:	f000 fcbb 	bl	800fc40 <_vfprintf_r>
 800f2ca:	b003      	add	sp, #12
 800f2cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2d0:	b004      	add	sp, #16
 800f2d2:	4770      	bx	lr
 800f2d4:	20000038 	.word	0x20000038

0800f2d8 <_puts_r>:
 800f2d8:	b530      	push	{r4, r5, lr}
 800f2da:	4605      	mov	r5, r0
 800f2dc:	b089      	sub	sp, #36	@ 0x24
 800f2de:	4608      	mov	r0, r1
 800f2e0:	460c      	mov	r4, r1
 800f2e2:	f7f0 ff95 	bl	8000210 <strlen>
 800f2e6:	4b1e      	ldr	r3, [pc, #120]	@ (800f360 <_puts_r+0x88>)
 800f2e8:	9306      	str	r3, [sp, #24]
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	e9cd 4004 	strd	r4, r0, [sp, #16]
 800f2f0:	9307      	str	r3, [sp, #28]
 800f2f2:	4418      	add	r0, r3
 800f2f4:	ab04      	add	r3, sp, #16
 800f2f6:	9301      	str	r3, [sp, #4]
 800f2f8:	2302      	movs	r3, #2
 800f2fa:	9302      	str	r3, [sp, #8]
 800f2fc:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800f2fe:	68ac      	ldr	r4, [r5, #8]
 800f300:	9003      	str	r0, [sp, #12]
 800f302:	b913      	cbnz	r3, 800f30a <_puts_r+0x32>
 800f304:	4628      	mov	r0, r5
 800f306:	f7ff ff9f 	bl	800f248 <__sinit>
 800f30a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f30c:	07db      	lsls	r3, r3, #31
 800f30e:	d405      	bmi.n	800f31c <_puts_r+0x44>
 800f310:	89a3      	ldrh	r3, [r4, #12]
 800f312:	0598      	lsls	r0, r3, #22
 800f314:	d402      	bmi.n	800f31c <_puts_r+0x44>
 800f316:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f318:	f000 f914 	bl	800f544 <__retarget_lock_acquire_recursive>
 800f31c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f320:	0499      	lsls	r1, r3, #18
 800f322:	d406      	bmi.n	800f332 <_puts_r+0x5a>
 800f324:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f328:	81a3      	strh	r3, [r4, #12]
 800f32a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f32c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f330:	6663      	str	r3, [r4, #100]	@ 0x64
 800f332:	4628      	mov	r0, r5
 800f334:	aa01      	add	r2, sp, #4
 800f336:	4621      	mov	r1, r4
 800f338:	f002 fcec 	bl	8011d14 <__sfvwrite_r>
 800f33c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f33e:	2800      	cmp	r0, #0
 800f340:	bf0c      	ite	eq
 800f342:	250a      	moveq	r5, #10
 800f344:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 800f348:	07da      	lsls	r2, r3, #31
 800f34a:	d405      	bmi.n	800f358 <_puts_r+0x80>
 800f34c:	89a3      	ldrh	r3, [r4, #12]
 800f34e:	059b      	lsls	r3, r3, #22
 800f350:	d402      	bmi.n	800f358 <_puts_r+0x80>
 800f352:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f354:	f000 f8f7 	bl	800f546 <__retarget_lock_release_recursive>
 800f358:	4628      	mov	r0, r5
 800f35a:	b009      	add	sp, #36	@ 0x24
 800f35c:	bd30      	pop	{r4, r5, pc}
 800f35e:	bf00      	nop
 800f360:	08016aea 	.word	0x08016aea

0800f364 <puts>:
 800f364:	4b02      	ldr	r3, [pc, #8]	@ (800f370 <puts+0xc>)
 800f366:	4601      	mov	r1, r0
 800f368:	6818      	ldr	r0, [r3, #0]
 800f36a:	f7ff bfb5 	b.w	800f2d8 <_puts_r>
 800f36e:	bf00      	nop
 800f370:	20000038 	.word	0x20000038

0800f374 <__sread>:
 800f374:	b510      	push	{r4, lr}
 800f376:	460c      	mov	r4, r1
 800f378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f37c:	f000 f892 	bl	800f4a4 <_read_r>
 800f380:	2800      	cmp	r0, #0
 800f382:	bfab      	itete	ge
 800f384:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 800f386:	89a3      	ldrhlt	r3, [r4, #12]
 800f388:	181b      	addge	r3, r3, r0
 800f38a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f38e:	bfac      	ite	ge
 800f390:	6523      	strge	r3, [r4, #80]	@ 0x50
 800f392:	81a3      	strhlt	r3, [r4, #12]
 800f394:	bd10      	pop	{r4, pc}

0800f396 <__swrite>:
 800f396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f39a:	461f      	mov	r7, r3
 800f39c:	898b      	ldrh	r3, [r1, #12]
 800f39e:	05db      	lsls	r3, r3, #23
 800f3a0:	4605      	mov	r5, r0
 800f3a2:	460c      	mov	r4, r1
 800f3a4:	4616      	mov	r6, r2
 800f3a6:	d505      	bpl.n	800f3b4 <__swrite+0x1e>
 800f3a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3ac:	2302      	movs	r3, #2
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	f000 f866 	bl	800f480 <_lseek_r>
 800f3b4:	89a3      	ldrh	r3, [r4, #12]
 800f3b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f3be:	81a3      	strh	r3, [r4, #12]
 800f3c0:	4632      	mov	r2, r6
 800f3c2:	463b      	mov	r3, r7
 800f3c4:	4628      	mov	r0, r5
 800f3c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3ca:	f000 b87d 	b.w	800f4c8 <_write_r>

0800f3ce <__sseek>:
 800f3ce:	b510      	push	{r4, lr}
 800f3d0:	460c      	mov	r4, r1
 800f3d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3d6:	f000 f853 	bl	800f480 <_lseek_r>
 800f3da:	1c43      	adds	r3, r0, #1
 800f3dc:	89a3      	ldrh	r3, [r4, #12]
 800f3de:	bf15      	itete	ne
 800f3e0:	6520      	strne	r0, [r4, #80]	@ 0x50
 800f3e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f3e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f3ea:	81a3      	strheq	r3, [r4, #12]
 800f3ec:	bf18      	it	ne
 800f3ee:	81a3      	strhne	r3, [r4, #12]
 800f3f0:	bd10      	pop	{r4, pc}

0800f3f2 <__sclose>:
 800f3f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3f6:	f000 b833 	b.w	800f460 <_close_r>

0800f3fa <memcmp>:
 800f3fa:	b510      	push	{r4, lr}
 800f3fc:	3901      	subs	r1, #1
 800f3fe:	4402      	add	r2, r0
 800f400:	4290      	cmp	r0, r2
 800f402:	d101      	bne.n	800f408 <memcmp+0xe>
 800f404:	2000      	movs	r0, #0
 800f406:	e005      	b.n	800f414 <memcmp+0x1a>
 800f408:	7803      	ldrb	r3, [r0, #0]
 800f40a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f40e:	42a3      	cmp	r3, r4
 800f410:	d001      	beq.n	800f416 <memcmp+0x1c>
 800f412:	1b18      	subs	r0, r3, r4
 800f414:	bd10      	pop	{r4, pc}
 800f416:	3001      	adds	r0, #1
 800f418:	e7f2      	b.n	800f400 <memcmp+0x6>

0800f41a <memmove>:
 800f41a:	4288      	cmp	r0, r1
 800f41c:	b510      	push	{r4, lr}
 800f41e:	eb01 0402 	add.w	r4, r1, r2
 800f422:	d902      	bls.n	800f42a <memmove+0x10>
 800f424:	4284      	cmp	r4, r0
 800f426:	4623      	mov	r3, r4
 800f428:	d807      	bhi.n	800f43a <memmove+0x20>
 800f42a:	1e43      	subs	r3, r0, #1
 800f42c:	42a1      	cmp	r1, r4
 800f42e:	d008      	beq.n	800f442 <memmove+0x28>
 800f430:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f434:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f438:	e7f8      	b.n	800f42c <memmove+0x12>
 800f43a:	4402      	add	r2, r0
 800f43c:	4601      	mov	r1, r0
 800f43e:	428a      	cmp	r2, r1
 800f440:	d100      	bne.n	800f444 <memmove+0x2a>
 800f442:	bd10      	pop	{r4, pc}
 800f444:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f448:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f44c:	e7f7      	b.n	800f43e <memmove+0x24>

0800f44e <memset>:
 800f44e:	4402      	add	r2, r0
 800f450:	4603      	mov	r3, r0
 800f452:	4293      	cmp	r3, r2
 800f454:	d100      	bne.n	800f458 <memset+0xa>
 800f456:	4770      	bx	lr
 800f458:	f803 1b01 	strb.w	r1, [r3], #1
 800f45c:	e7f9      	b.n	800f452 <memset+0x4>
	...

0800f460 <_close_r>:
 800f460:	b538      	push	{r3, r4, r5, lr}
 800f462:	4d06      	ldr	r5, [pc, #24]	@ (800f47c <_close_r+0x1c>)
 800f464:	2300      	movs	r3, #0
 800f466:	4604      	mov	r4, r0
 800f468:	4608      	mov	r0, r1
 800f46a:	602b      	str	r3, [r5, #0]
 800f46c:	f7f2 f894 	bl	8001598 <_close>
 800f470:	1c43      	adds	r3, r0, #1
 800f472:	d102      	bne.n	800f47a <_close_r+0x1a>
 800f474:	682b      	ldr	r3, [r5, #0]
 800f476:	b103      	cbz	r3, 800f47a <_close_r+0x1a>
 800f478:	6023      	str	r3, [r4, #0]
 800f47a:	bd38      	pop	{r3, r4, r5, pc}
 800f47c:	20008b84 	.word	0x20008b84

0800f480 <_lseek_r>:
 800f480:	b538      	push	{r3, r4, r5, lr}
 800f482:	4d07      	ldr	r5, [pc, #28]	@ (800f4a0 <_lseek_r+0x20>)
 800f484:	4604      	mov	r4, r0
 800f486:	4608      	mov	r0, r1
 800f488:	4611      	mov	r1, r2
 800f48a:	2200      	movs	r2, #0
 800f48c:	602a      	str	r2, [r5, #0]
 800f48e:	461a      	mov	r2, r3
 800f490:	f7f2 f8a9 	bl	80015e6 <_lseek>
 800f494:	1c43      	adds	r3, r0, #1
 800f496:	d102      	bne.n	800f49e <_lseek_r+0x1e>
 800f498:	682b      	ldr	r3, [r5, #0]
 800f49a:	b103      	cbz	r3, 800f49e <_lseek_r+0x1e>
 800f49c:	6023      	str	r3, [r4, #0]
 800f49e:	bd38      	pop	{r3, r4, r5, pc}
 800f4a0:	20008b84 	.word	0x20008b84

0800f4a4 <_read_r>:
 800f4a4:	b538      	push	{r3, r4, r5, lr}
 800f4a6:	4d07      	ldr	r5, [pc, #28]	@ (800f4c4 <_read_r+0x20>)
 800f4a8:	4604      	mov	r4, r0
 800f4aa:	4608      	mov	r0, r1
 800f4ac:	4611      	mov	r1, r2
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	602a      	str	r2, [r5, #0]
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	f7f2 f853 	bl	800155e <_read>
 800f4b8:	1c43      	adds	r3, r0, #1
 800f4ba:	d102      	bne.n	800f4c2 <_read_r+0x1e>
 800f4bc:	682b      	ldr	r3, [r5, #0]
 800f4be:	b103      	cbz	r3, 800f4c2 <_read_r+0x1e>
 800f4c0:	6023      	str	r3, [r4, #0]
 800f4c2:	bd38      	pop	{r3, r4, r5, pc}
 800f4c4:	20008b84 	.word	0x20008b84

0800f4c8 <_write_r>:
 800f4c8:	b538      	push	{r3, r4, r5, lr}
 800f4ca:	4d07      	ldr	r5, [pc, #28]	@ (800f4e8 <_write_r+0x20>)
 800f4cc:	4604      	mov	r4, r0
 800f4ce:	4608      	mov	r0, r1
 800f4d0:	4611      	mov	r1, r2
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	602a      	str	r2, [r5, #0]
 800f4d6:	461a      	mov	r2, r3
 800f4d8:	f7f1 fdd6 	bl	8001088 <_write>
 800f4dc:	1c43      	adds	r3, r0, #1
 800f4de:	d102      	bne.n	800f4e6 <_write_r+0x1e>
 800f4e0:	682b      	ldr	r3, [r5, #0]
 800f4e2:	b103      	cbz	r3, 800f4e6 <_write_r+0x1e>
 800f4e4:	6023      	str	r3, [r4, #0]
 800f4e6:	bd38      	pop	{r3, r4, r5, pc}
 800f4e8:	20008b84 	.word	0x20008b84

0800f4ec <__errno>:
 800f4ec:	4b01      	ldr	r3, [pc, #4]	@ (800f4f4 <__errno+0x8>)
 800f4ee:	6818      	ldr	r0, [r3, #0]
 800f4f0:	4770      	bx	lr
 800f4f2:	bf00      	nop
 800f4f4:	20000038 	.word	0x20000038

0800f4f8 <__libc_init_array>:
 800f4f8:	b570      	push	{r4, r5, r6, lr}
 800f4fa:	4d0d      	ldr	r5, [pc, #52]	@ (800f530 <__libc_init_array+0x38>)
 800f4fc:	4c0d      	ldr	r4, [pc, #52]	@ (800f534 <__libc_init_array+0x3c>)
 800f4fe:	1b64      	subs	r4, r4, r5
 800f500:	10a4      	asrs	r4, r4, #2
 800f502:	2600      	movs	r6, #0
 800f504:	42a6      	cmp	r6, r4
 800f506:	d109      	bne.n	800f51c <__libc_init_array+0x24>
 800f508:	4d0b      	ldr	r5, [pc, #44]	@ (800f538 <__libc_init_array+0x40>)
 800f50a:	4c0c      	ldr	r4, [pc, #48]	@ (800f53c <__libc_init_array+0x44>)
 800f50c:	f004 fb9c 	bl	8013c48 <_init>
 800f510:	1b64      	subs	r4, r4, r5
 800f512:	10a4      	asrs	r4, r4, #2
 800f514:	2600      	movs	r6, #0
 800f516:	42a6      	cmp	r6, r4
 800f518:	d105      	bne.n	800f526 <__libc_init_array+0x2e>
 800f51a:	bd70      	pop	{r4, r5, r6, pc}
 800f51c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f520:	4798      	blx	r3
 800f522:	3601      	adds	r6, #1
 800f524:	e7ee      	b.n	800f504 <__libc_init_array+0xc>
 800f526:	f855 3b04 	ldr.w	r3, [r5], #4
 800f52a:	4798      	blx	r3
 800f52c:	3601      	adds	r6, #1
 800f52e:	e7f2      	b.n	800f516 <__libc_init_array+0x1e>
 800f530:	08016af4 	.word	0x08016af4
 800f534:	08016af4 	.word	0x08016af4
 800f538:	08016af4 	.word	0x08016af4
 800f53c:	08016afc 	.word	0x08016afc

0800f540 <__retarget_lock_init_recursive>:
 800f540:	4770      	bx	lr

0800f542 <__retarget_lock_close_recursive>:
 800f542:	4770      	bx	lr

0800f544 <__retarget_lock_acquire_recursive>:
 800f544:	4770      	bx	lr

0800f546 <__retarget_lock_release_recursive>:
 800f546:	4770      	bx	lr

0800f548 <memcpy>:
 800f548:	440a      	add	r2, r1
 800f54a:	4291      	cmp	r1, r2
 800f54c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f550:	d100      	bne.n	800f554 <memcpy+0xc>
 800f552:	4770      	bx	lr
 800f554:	b510      	push	{r4, lr}
 800f556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f55a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f55e:	4291      	cmp	r1, r2
 800f560:	d1f9      	bne.n	800f556 <memcpy+0xe>
 800f562:	bd10      	pop	{r4, pc}

0800f564 <register_fini>:
 800f564:	4b02      	ldr	r3, [pc, #8]	@ (800f570 <register_fini+0xc>)
 800f566:	b113      	cbz	r3, 800f56e <register_fini+0xa>
 800f568:	4802      	ldr	r0, [pc, #8]	@ (800f574 <register_fini+0x10>)
 800f56a:	f000 b805 	b.w	800f578 <atexit>
 800f56e:	4770      	bx	lr
 800f570:	00000000 	.word	0x00000000
 800f574:	08012189 	.word	0x08012189

0800f578 <atexit>:
 800f578:	2300      	movs	r3, #0
 800f57a:	4601      	mov	r1, r0
 800f57c:	461a      	mov	r2, r3
 800f57e:	4618      	mov	r0, r3
 800f580:	f002 be58 	b.w	8012234 <__register_exitproc>

0800f584 <_malloc_trim_r>:
 800f584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f588:	4606      	mov	r6, r0
 800f58a:	2008      	movs	r0, #8
 800f58c:	4689      	mov	r9, r1
 800f58e:	f002 fe0f 	bl	80121b0 <sysconf>
 800f592:	4f24      	ldr	r7, [pc, #144]	@ (800f624 <_malloc_trim_r+0xa0>)
 800f594:	4680      	mov	r8, r0
 800f596:	4630      	mov	r0, r6
 800f598:	f000 fb44 	bl	800fc24 <__malloc_lock>
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	685d      	ldr	r5, [r3, #4]
 800f5a0:	f025 0503 	bic.w	r5, r5, #3
 800f5a4:	f1a5 0411 	sub.w	r4, r5, #17
 800f5a8:	eba4 0409 	sub.w	r4, r4, r9
 800f5ac:	4444      	add	r4, r8
 800f5ae:	fbb4 f4f8 	udiv	r4, r4, r8
 800f5b2:	3c01      	subs	r4, #1
 800f5b4:	fb08 f404 	mul.w	r4, r8, r4
 800f5b8:	45a0      	cmp	r8, r4
 800f5ba:	dd05      	ble.n	800f5c8 <_malloc_trim_r+0x44>
 800f5bc:	4630      	mov	r0, r6
 800f5be:	f000 fb37 	bl	800fc30 <__malloc_unlock>
 800f5c2:	2000      	movs	r0, #0
 800f5c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5c8:	2100      	movs	r1, #0
 800f5ca:	4630      	mov	r0, r6
 800f5cc:	f002 fdcc 	bl	8012168 <_sbrk_r>
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	442b      	add	r3, r5
 800f5d4:	4298      	cmp	r0, r3
 800f5d6:	d1f1      	bne.n	800f5bc <_malloc_trim_r+0x38>
 800f5d8:	4261      	negs	r1, r4
 800f5da:	4630      	mov	r0, r6
 800f5dc:	f002 fdc4 	bl	8012168 <_sbrk_r>
 800f5e0:	3001      	adds	r0, #1
 800f5e2:	d110      	bne.n	800f606 <_malloc_trim_r+0x82>
 800f5e4:	2100      	movs	r1, #0
 800f5e6:	4630      	mov	r0, r6
 800f5e8:	f002 fdbe 	bl	8012168 <_sbrk_r>
 800f5ec:	68ba      	ldr	r2, [r7, #8]
 800f5ee:	1a83      	subs	r3, r0, r2
 800f5f0:	2b0f      	cmp	r3, #15
 800f5f2:	dde3      	ble.n	800f5bc <_malloc_trim_r+0x38>
 800f5f4:	490c      	ldr	r1, [pc, #48]	@ (800f628 <_malloc_trim_r+0xa4>)
 800f5f6:	6809      	ldr	r1, [r1, #0]
 800f5f8:	1a40      	subs	r0, r0, r1
 800f5fa:	490c      	ldr	r1, [pc, #48]	@ (800f62c <_malloc_trim_r+0xa8>)
 800f5fc:	f043 0301 	orr.w	r3, r3, #1
 800f600:	6008      	str	r0, [r1, #0]
 800f602:	6053      	str	r3, [r2, #4]
 800f604:	e7da      	b.n	800f5bc <_malloc_trim_r+0x38>
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	4a08      	ldr	r2, [pc, #32]	@ (800f62c <_malloc_trim_r+0xa8>)
 800f60a:	1b2d      	subs	r5, r5, r4
 800f60c:	f045 0501 	orr.w	r5, r5, #1
 800f610:	605d      	str	r5, [r3, #4]
 800f612:	6813      	ldr	r3, [r2, #0]
 800f614:	4630      	mov	r0, r6
 800f616:	1b1b      	subs	r3, r3, r4
 800f618:	6013      	str	r3, [r2, #0]
 800f61a:	f000 fb09 	bl	800fc30 <__malloc_unlock>
 800f61e:	2001      	movs	r0, #1
 800f620:	e7d0      	b.n	800f5c4 <_malloc_trim_r+0x40>
 800f622:	bf00      	nop
 800f624:	2000016c 	.word	0x2000016c
 800f628:	20000164 	.word	0x20000164
 800f62c:	20008b90 	.word	0x20008b90

0800f630 <_free_r>:
 800f630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f632:	4604      	mov	r4, r0
 800f634:	460f      	mov	r7, r1
 800f636:	2900      	cmp	r1, #0
 800f638:	f000 80b1 	beq.w	800f79e <_free_r+0x16e>
 800f63c:	f000 faf2 	bl	800fc24 <__malloc_lock>
 800f640:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800f644:	4d56      	ldr	r5, [pc, #344]	@ (800f7a0 <_free_r+0x170>)
 800f646:	f022 0001 	bic.w	r0, r2, #1
 800f64a:	f1a7 0308 	sub.w	r3, r7, #8
 800f64e:	eb03 0c00 	add.w	ip, r3, r0
 800f652:	68a9      	ldr	r1, [r5, #8]
 800f654:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800f658:	4561      	cmp	r1, ip
 800f65a:	f026 0603 	bic.w	r6, r6, #3
 800f65e:	f002 0201 	and.w	r2, r2, #1
 800f662:	d11b      	bne.n	800f69c <_free_r+0x6c>
 800f664:	4406      	add	r6, r0
 800f666:	b93a      	cbnz	r2, 800f678 <_free_r+0x48>
 800f668:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800f66c:	1a9b      	subs	r3, r3, r2
 800f66e:	4416      	add	r6, r2
 800f670:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800f674:	60ca      	str	r2, [r1, #12]
 800f676:	6091      	str	r1, [r2, #8]
 800f678:	f046 0201 	orr.w	r2, r6, #1
 800f67c:	605a      	str	r2, [r3, #4]
 800f67e:	60ab      	str	r3, [r5, #8]
 800f680:	4b48      	ldr	r3, [pc, #288]	@ (800f7a4 <_free_r+0x174>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	42b3      	cmp	r3, r6
 800f686:	d804      	bhi.n	800f692 <_free_r+0x62>
 800f688:	4b47      	ldr	r3, [pc, #284]	@ (800f7a8 <_free_r+0x178>)
 800f68a:	4620      	mov	r0, r4
 800f68c:	6819      	ldr	r1, [r3, #0]
 800f68e:	f7ff ff79 	bl	800f584 <_malloc_trim_r>
 800f692:	4620      	mov	r0, r4
 800f694:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f698:	f000 baca 	b.w	800fc30 <__malloc_unlock>
 800f69c:	f8cc 6004 	str.w	r6, [ip, #4]
 800f6a0:	2a00      	cmp	r2, #0
 800f6a2:	d138      	bne.n	800f716 <_free_r+0xe6>
 800f6a4:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800f6a8:	1a5b      	subs	r3, r3, r1
 800f6aa:	4408      	add	r0, r1
 800f6ac:	6899      	ldr	r1, [r3, #8]
 800f6ae:	f105 0708 	add.w	r7, r5, #8
 800f6b2:	42b9      	cmp	r1, r7
 800f6b4:	d031      	beq.n	800f71a <_free_r+0xea>
 800f6b6:	68df      	ldr	r7, [r3, #12]
 800f6b8:	60cf      	str	r7, [r1, #12]
 800f6ba:	60b9      	str	r1, [r7, #8]
 800f6bc:	eb0c 0106 	add.w	r1, ip, r6
 800f6c0:	6849      	ldr	r1, [r1, #4]
 800f6c2:	07c9      	lsls	r1, r1, #31
 800f6c4:	d40b      	bmi.n	800f6de <_free_r+0xae>
 800f6c6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800f6ca:	4430      	add	r0, r6
 800f6cc:	bb3a      	cbnz	r2, 800f71e <_free_r+0xee>
 800f6ce:	4e37      	ldr	r6, [pc, #220]	@ (800f7ac <_free_r+0x17c>)
 800f6d0:	42b1      	cmp	r1, r6
 800f6d2:	d124      	bne.n	800f71e <_free_r+0xee>
 800f6d4:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800f6d8:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800f6dc:	2201      	movs	r2, #1
 800f6de:	f040 0101 	orr.w	r1, r0, #1
 800f6e2:	6059      	str	r1, [r3, #4]
 800f6e4:	5018      	str	r0, [r3, r0]
 800f6e6:	2a00      	cmp	r2, #0
 800f6e8:	d1d3      	bne.n	800f692 <_free_r+0x62>
 800f6ea:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800f6ee:	d21b      	bcs.n	800f728 <_free_r+0xf8>
 800f6f0:	08c2      	lsrs	r2, r0, #3
 800f6f2:	2101      	movs	r1, #1
 800f6f4:	0940      	lsrs	r0, r0, #5
 800f6f6:	4081      	lsls	r1, r0
 800f6f8:	6868      	ldr	r0, [r5, #4]
 800f6fa:	3201      	adds	r2, #1
 800f6fc:	4301      	orrs	r1, r0
 800f6fe:	6069      	str	r1, [r5, #4]
 800f700:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 800f704:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 800f708:	3908      	subs	r1, #8
 800f70a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f70e:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 800f712:	60c3      	str	r3, [r0, #12]
 800f714:	e7bd      	b.n	800f692 <_free_r+0x62>
 800f716:	2200      	movs	r2, #0
 800f718:	e7d0      	b.n	800f6bc <_free_r+0x8c>
 800f71a:	2201      	movs	r2, #1
 800f71c:	e7ce      	b.n	800f6bc <_free_r+0x8c>
 800f71e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800f722:	60ce      	str	r6, [r1, #12]
 800f724:	60b1      	str	r1, [r6, #8]
 800f726:	e7da      	b.n	800f6de <_free_r+0xae>
 800f728:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 800f72c:	ea4f 2250 	mov.w	r2, r0, lsr #9
 800f730:	d214      	bcs.n	800f75c <_free_r+0x12c>
 800f732:	0982      	lsrs	r2, r0, #6
 800f734:	3238      	adds	r2, #56	@ 0x38
 800f736:	1c51      	adds	r1, r2, #1
 800f738:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800f73c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800f740:	428e      	cmp	r6, r1
 800f742:	d125      	bne.n	800f790 <_free_r+0x160>
 800f744:	2001      	movs	r0, #1
 800f746:	1092      	asrs	r2, r2, #2
 800f748:	fa00 f202 	lsl.w	r2, r0, r2
 800f74c:	6868      	ldr	r0, [r5, #4]
 800f74e:	4302      	orrs	r2, r0
 800f750:	606a      	str	r2, [r5, #4]
 800f752:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800f756:	60b3      	str	r3, [r6, #8]
 800f758:	60cb      	str	r3, [r1, #12]
 800f75a:	e79a      	b.n	800f692 <_free_r+0x62>
 800f75c:	2a14      	cmp	r2, #20
 800f75e:	d801      	bhi.n	800f764 <_free_r+0x134>
 800f760:	325b      	adds	r2, #91	@ 0x5b
 800f762:	e7e8      	b.n	800f736 <_free_r+0x106>
 800f764:	2a54      	cmp	r2, #84	@ 0x54
 800f766:	d802      	bhi.n	800f76e <_free_r+0x13e>
 800f768:	0b02      	lsrs	r2, r0, #12
 800f76a:	326e      	adds	r2, #110	@ 0x6e
 800f76c:	e7e3      	b.n	800f736 <_free_r+0x106>
 800f76e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800f772:	d802      	bhi.n	800f77a <_free_r+0x14a>
 800f774:	0bc2      	lsrs	r2, r0, #15
 800f776:	3277      	adds	r2, #119	@ 0x77
 800f778:	e7dd      	b.n	800f736 <_free_r+0x106>
 800f77a:	f240 5154 	movw	r1, #1364	@ 0x554
 800f77e:	428a      	cmp	r2, r1
 800f780:	bf9a      	itte	ls
 800f782:	0c82      	lsrls	r2, r0, #18
 800f784:	327c      	addls	r2, #124	@ 0x7c
 800f786:	227e      	movhi	r2, #126	@ 0x7e
 800f788:	e7d5      	b.n	800f736 <_free_r+0x106>
 800f78a:	6889      	ldr	r1, [r1, #8]
 800f78c:	428e      	cmp	r6, r1
 800f78e:	d004      	beq.n	800f79a <_free_r+0x16a>
 800f790:	684a      	ldr	r2, [r1, #4]
 800f792:	f022 0203 	bic.w	r2, r2, #3
 800f796:	4282      	cmp	r2, r0
 800f798:	d8f7      	bhi.n	800f78a <_free_r+0x15a>
 800f79a:	68ce      	ldr	r6, [r1, #12]
 800f79c:	e7d9      	b.n	800f752 <_free_r+0x122>
 800f79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7a0:	2000016c 	.word	0x2000016c
 800f7a4:	20000168 	.word	0x20000168
 800f7a8:	20008bc0 	.word	0x20008bc0
 800f7ac:	20000174 	.word	0x20000174

0800f7b0 <_malloc_r>:
 800f7b0:	f101 030b 	add.w	r3, r1, #11
 800f7b4:	2b16      	cmp	r3, #22
 800f7b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ba:	4605      	mov	r5, r0
 800f7bc:	d906      	bls.n	800f7cc <_malloc_r+0x1c>
 800f7be:	f033 0707 	bics.w	r7, r3, #7
 800f7c2:	d504      	bpl.n	800f7ce <_malloc_r+0x1e>
 800f7c4:	230c      	movs	r3, #12
 800f7c6:	602b      	str	r3, [r5, #0]
 800f7c8:	2400      	movs	r4, #0
 800f7ca:	e1a3      	b.n	800fb14 <_malloc_r+0x364>
 800f7cc:	2710      	movs	r7, #16
 800f7ce:	42b9      	cmp	r1, r7
 800f7d0:	d8f8      	bhi.n	800f7c4 <_malloc_r+0x14>
 800f7d2:	4628      	mov	r0, r5
 800f7d4:	f000 fa26 	bl	800fc24 <__malloc_lock>
 800f7d8:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 800f7dc:	4eaf      	ldr	r6, [pc, #700]	@ (800fa9c <_malloc_r+0x2ec>)
 800f7de:	d237      	bcs.n	800f850 <_malloc_r+0xa0>
 800f7e0:	f107 0208 	add.w	r2, r7, #8
 800f7e4:	4432      	add	r2, r6
 800f7e6:	f1a2 0108 	sub.w	r1, r2, #8
 800f7ea:	6854      	ldr	r4, [r2, #4]
 800f7ec:	428c      	cmp	r4, r1
 800f7ee:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800f7f2:	d102      	bne.n	800f7fa <_malloc_r+0x4a>
 800f7f4:	68d4      	ldr	r4, [r2, #12]
 800f7f6:	42a2      	cmp	r2, r4
 800f7f8:	d010      	beq.n	800f81c <_malloc_r+0x6c>
 800f7fa:	6863      	ldr	r3, [r4, #4]
 800f7fc:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800f800:	f023 0303 	bic.w	r3, r3, #3
 800f804:	60ca      	str	r2, [r1, #12]
 800f806:	4423      	add	r3, r4
 800f808:	6091      	str	r1, [r2, #8]
 800f80a:	685a      	ldr	r2, [r3, #4]
 800f80c:	f042 0201 	orr.w	r2, r2, #1
 800f810:	605a      	str	r2, [r3, #4]
 800f812:	4628      	mov	r0, r5
 800f814:	f000 fa0c 	bl	800fc30 <__malloc_unlock>
 800f818:	3408      	adds	r4, #8
 800f81a:	e17b      	b.n	800fb14 <_malloc_r+0x364>
 800f81c:	3302      	adds	r3, #2
 800f81e:	6934      	ldr	r4, [r6, #16]
 800f820:	499f      	ldr	r1, [pc, #636]	@ (800faa0 <_malloc_r+0x2f0>)
 800f822:	428c      	cmp	r4, r1
 800f824:	d077      	beq.n	800f916 <_malloc_r+0x166>
 800f826:	6862      	ldr	r2, [r4, #4]
 800f828:	f022 0c03 	bic.w	ip, r2, #3
 800f82c:	ebac 0007 	sub.w	r0, ip, r7
 800f830:	280f      	cmp	r0, #15
 800f832:	dd48      	ble.n	800f8c6 <_malloc_r+0x116>
 800f834:	19e2      	adds	r2, r4, r7
 800f836:	f040 0301 	orr.w	r3, r0, #1
 800f83a:	f047 0701 	orr.w	r7, r7, #1
 800f83e:	6067      	str	r7, [r4, #4]
 800f840:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800f844:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800f848:	6053      	str	r3, [r2, #4]
 800f84a:	f844 000c 	str.w	r0, [r4, ip]
 800f84e:	e7e0      	b.n	800f812 <_malloc_r+0x62>
 800f850:	0a7b      	lsrs	r3, r7, #9
 800f852:	d02a      	beq.n	800f8aa <_malloc_r+0xfa>
 800f854:	2b04      	cmp	r3, #4
 800f856:	d812      	bhi.n	800f87e <_malloc_r+0xce>
 800f858:	09bb      	lsrs	r3, r7, #6
 800f85a:	3338      	adds	r3, #56	@ 0x38
 800f85c:	1c5a      	adds	r2, r3, #1
 800f85e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800f862:	f1a2 0c08 	sub.w	ip, r2, #8
 800f866:	6854      	ldr	r4, [r2, #4]
 800f868:	4564      	cmp	r4, ip
 800f86a:	d006      	beq.n	800f87a <_malloc_r+0xca>
 800f86c:	6862      	ldr	r2, [r4, #4]
 800f86e:	f022 0203 	bic.w	r2, r2, #3
 800f872:	1bd0      	subs	r0, r2, r7
 800f874:	280f      	cmp	r0, #15
 800f876:	dd1c      	ble.n	800f8b2 <_malloc_r+0x102>
 800f878:	3b01      	subs	r3, #1
 800f87a:	3301      	adds	r3, #1
 800f87c:	e7cf      	b.n	800f81e <_malloc_r+0x6e>
 800f87e:	2b14      	cmp	r3, #20
 800f880:	d801      	bhi.n	800f886 <_malloc_r+0xd6>
 800f882:	335b      	adds	r3, #91	@ 0x5b
 800f884:	e7ea      	b.n	800f85c <_malloc_r+0xac>
 800f886:	2b54      	cmp	r3, #84	@ 0x54
 800f888:	d802      	bhi.n	800f890 <_malloc_r+0xe0>
 800f88a:	0b3b      	lsrs	r3, r7, #12
 800f88c:	336e      	adds	r3, #110	@ 0x6e
 800f88e:	e7e5      	b.n	800f85c <_malloc_r+0xac>
 800f890:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800f894:	d802      	bhi.n	800f89c <_malloc_r+0xec>
 800f896:	0bfb      	lsrs	r3, r7, #15
 800f898:	3377      	adds	r3, #119	@ 0x77
 800f89a:	e7df      	b.n	800f85c <_malloc_r+0xac>
 800f89c:	f240 5254 	movw	r2, #1364	@ 0x554
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d804      	bhi.n	800f8ae <_malloc_r+0xfe>
 800f8a4:	0cbb      	lsrs	r3, r7, #18
 800f8a6:	337c      	adds	r3, #124	@ 0x7c
 800f8a8:	e7d8      	b.n	800f85c <_malloc_r+0xac>
 800f8aa:	233f      	movs	r3, #63	@ 0x3f
 800f8ac:	e7d6      	b.n	800f85c <_malloc_r+0xac>
 800f8ae:	237e      	movs	r3, #126	@ 0x7e
 800f8b0:	e7d4      	b.n	800f85c <_malloc_r+0xac>
 800f8b2:	2800      	cmp	r0, #0
 800f8b4:	68e1      	ldr	r1, [r4, #12]
 800f8b6:	db04      	blt.n	800f8c2 <_malloc_r+0x112>
 800f8b8:	68a3      	ldr	r3, [r4, #8]
 800f8ba:	60d9      	str	r1, [r3, #12]
 800f8bc:	608b      	str	r3, [r1, #8]
 800f8be:	18a3      	adds	r3, r4, r2
 800f8c0:	e7a3      	b.n	800f80a <_malloc_r+0x5a>
 800f8c2:	460c      	mov	r4, r1
 800f8c4:	e7d0      	b.n	800f868 <_malloc_r+0xb8>
 800f8c6:	2800      	cmp	r0, #0
 800f8c8:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800f8cc:	db07      	blt.n	800f8de <_malloc_r+0x12e>
 800f8ce:	44a4      	add	ip, r4
 800f8d0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800f8d4:	f043 0301 	orr.w	r3, r3, #1
 800f8d8:	f8cc 3004 	str.w	r3, [ip, #4]
 800f8dc:	e799      	b.n	800f812 <_malloc_r+0x62>
 800f8de:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800f8e2:	6870      	ldr	r0, [r6, #4]
 800f8e4:	f080 8095 	bcs.w	800fa12 <_malloc_r+0x262>
 800f8e8:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800f8ec:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800f8f0:	f04f 0c01 	mov.w	ip, #1
 800f8f4:	3201      	adds	r2, #1
 800f8f6:	fa0c fc0e 	lsl.w	ip, ip, lr
 800f8fa:	ea4c 0000 	orr.w	r0, ip, r0
 800f8fe:	6070      	str	r0, [r6, #4]
 800f900:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800f904:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800f908:	3808      	subs	r0, #8
 800f90a:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800f90e:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800f912:	f8cc 400c 	str.w	r4, [ip, #12]
 800f916:	1098      	asrs	r0, r3, #2
 800f918:	2201      	movs	r2, #1
 800f91a:	4082      	lsls	r2, r0
 800f91c:	6870      	ldr	r0, [r6, #4]
 800f91e:	4290      	cmp	r0, r2
 800f920:	d326      	bcc.n	800f970 <_malloc_r+0x1c0>
 800f922:	4210      	tst	r0, r2
 800f924:	d106      	bne.n	800f934 <_malloc_r+0x184>
 800f926:	f023 0303 	bic.w	r3, r3, #3
 800f92a:	0052      	lsls	r2, r2, #1
 800f92c:	4210      	tst	r0, r2
 800f92e:	f103 0304 	add.w	r3, r3, #4
 800f932:	d0fa      	beq.n	800f92a <_malloc_r+0x17a>
 800f934:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800f938:	46c1      	mov	r9, r8
 800f93a:	469e      	mov	lr, r3
 800f93c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800f940:	454c      	cmp	r4, r9
 800f942:	f040 80b9 	bne.w	800fab8 <_malloc_r+0x308>
 800f946:	f10e 0e01 	add.w	lr, lr, #1
 800f94a:	f01e 0f03 	tst.w	lr, #3
 800f94e:	f109 0908 	add.w	r9, r9, #8
 800f952:	d1f3      	bne.n	800f93c <_malloc_r+0x18c>
 800f954:	0798      	lsls	r0, r3, #30
 800f956:	f040 80e3 	bne.w	800fb20 <_malloc_r+0x370>
 800f95a:	6873      	ldr	r3, [r6, #4]
 800f95c:	ea23 0302 	bic.w	r3, r3, r2
 800f960:	6073      	str	r3, [r6, #4]
 800f962:	6870      	ldr	r0, [r6, #4]
 800f964:	0052      	lsls	r2, r2, #1
 800f966:	4290      	cmp	r0, r2
 800f968:	d302      	bcc.n	800f970 <_malloc_r+0x1c0>
 800f96a:	2a00      	cmp	r2, #0
 800f96c:	f040 80e5 	bne.w	800fb3a <_malloc_r+0x38a>
 800f970:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800f974:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f978:	f023 0903 	bic.w	r9, r3, #3
 800f97c:	45b9      	cmp	r9, r7
 800f97e:	d304      	bcc.n	800f98a <_malloc_r+0x1da>
 800f980:	eba9 0207 	sub.w	r2, r9, r7
 800f984:	2a0f      	cmp	r2, #15
 800f986:	f300 8141 	bgt.w	800fc0c <_malloc_r+0x45c>
 800f98a:	4b46      	ldr	r3, [pc, #280]	@ (800faa4 <_malloc_r+0x2f4>)
 800f98c:	6819      	ldr	r1, [r3, #0]
 800f98e:	3110      	adds	r1, #16
 800f990:	4439      	add	r1, r7
 800f992:	2008      	movs	r0, #8
 800f994:	9101      	str	r1, [sp, #4]
 800f996:	f002 fc0b 	bl	80121b0 <sysconf>
 800f99a:	4a43      	ldr	r2, [pc, #268]	@ (800faa8 <_malloc_r+0x2f8>)
 800f99c:	9901      	ldr	r1, [sp, #4]
 800f99e:	6813      	ldr	r3, [r2, #0]
 800f9a0:	3301      	adds	r3, #1
 800f9a2:	bf1f      	itttt	ne
 800f9a4:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 800f9a8:	1809      	addne	r1, r1, r0
 800f9aa:	4243      	negne	r3, r0
 800f9ac:	4019      	andne	r1, r3
 800f9ae:	4680      	mov	r8, r0
 800f9b0:	4628      	mov	r0, r5
 800f9b2:	9101      	str	r1, [sp, #4]
 800f9b4:	f002 fbd8 	bl	8012168 <_sbrk_r>
 800f9b8:	1c42      	adds	r2, r0, #1
 800f9ba:	eb0a 0b09 	add.w	fp, sl, r9
 800f9be:	4604      	mov	r4, r0
 800f9c0:	f000 80f7 	beq.w	800fbb2 <_malloc_r+0x402>
 800f9c4:	4583      	cmp	fp, r0
 800f9c6:	9901      	ldr	r1, [sp, #4]
 800f9c8:	4a37      	ldr	r2, [pc, #220]	@ (800faa8 <_malloc_r+0x2f8>)
 800f9ca:	d902      	bls.n	800f9d2 <_malloc_r+0x222>
 800f9cc:	45b2      	cmp	sl, r6
 800f9ce:	f040 80f0 	bne.w	800fbb2 <_malloc_r+0x402>
 800f9d2:	4b36      	ldr	r3, [pc, #216]	@ (800faac <_malloc_r+0x2fc>)
 800f9d4:	6818      	ldr	r0, [r3, #0]
 800f9d6:	45a3      	cmp	fp, r4
 800f9d8:	eb00 0e01 	add.w	lr, r0, r1
 800f9dc:	f8c3 e000 	str.w	lr, [r3]
 800f9e0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800f9e4:	f040 80ab 	bne.w	800fb3e <_malloc_r+0x38e>
 800f9e8:	ea1b 0f0c 	tst.w	fp, ip
 800f9ec:	f040 80a7 	bne.w	800fb3e <_malloc_r+0x38e>
 800f9f0:	68b2      	ldr	r2, [r6, #8]
 800f9f2:	4449      	add	r1, r9
 800f9f4:	f041 0101 	orr.w	r1, r1, #1
 800f9f8:	6051      	str	r1, [r2, #4]
 800f9fa:	4a2d      	ldr	r2, [pc, #180]	@ (800fab0 <_malloc_r+0x300>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	6811      	ldr	r1, [r2, #0]
 800fa00:	428b      	cmp	r3, r1
 800fa02:	bf88      	it	hi
 800fa04:	6013      	strhi	r3, [r2, #0]
 800fa06:	4a2b      	ldr	r2, [pc, #172]	@ (800fab4 <_malloc_r+0x304>)
 800fa08:	6811      	ldr	r1, [r2, #0]
 800fa0a:	428b      	cmp	r3, r1
 800fa0c:	bf88      	it	hi
 800fa0e:	6013      	strhi	r3, [r2, #0]
 800fa10:	e0cf      	b.n	800fbb2 <_malloc_r+0x402>
 800fa12:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 800fa16:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800fa1a:	d218      	bcs.n	800fa4e <_malloc_r+0x29e>
 800fa1c:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800fa20:	3238      	adds	r2, #56	@ 0x38
 800fa22:	f102 0e01 	add.w	lr, r2, #1
 800fa26:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800fa2a:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800fa2e:	45f0      	cmp	r8, lr
 800fa30:	d12b      	bne.n	800fa8a <_malloc_r+0x2da>
 800fa32:	1092      	asrs	r2, r2, #2
 800fa34:	f04f 0c01 	mov.w	ip, #1
 800fa38:	fa0c f202 	lsl.w	r2, ip, r2
 800fa3c:	4302      	orrs	r2, r0
 800fa3e:	6072      	str	r2, [r6, #4]
 800fa40:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800fa44:	f8c8 4008 	str.w	r4, [r8, #8]
 800fa48:	f8ce 400c 	str.w	r4, [lr, #12]
 800fa4c:	e763      	b.n	800f916 <_malloc_r+0x166>
 800fa4e:	2a14      	cmp	r2, #20
 800fa50:	d801      	bhi.n	800fa56 <_malloc_r+0x2a6>
 800fa52:	325b      	adds	r2, #91	@ 0x5b
 800fa54:	e7e5      	b.n	800fa22 <_malloc_r+0x272>
 800fa56:	2a54      	cmp	r2, #84	@ 0x54
 800fa58:	d803      	bhi.n	800fa62 <_malloc_r+0x2b2>
 800fa5a:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800fa5e:	326e      	adds	r2, #110	@ 0x6e
 800fa60:	e7df      	b.n	800fa22 <_malloc_r+0x272>
 800fa62:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800fa66:	d803      	bhi.n	800fa70 <_malloc_r+0x2c0>
 800fa68:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800fa6c:	3277      	adds	r2, #119	@ 0x77
 800fa6e:	e7d8      	b.n	800fa22 <_malloc_r+0x272>
 800fa70:	f240 5e54 	movw	lr, #1364	@ 0x554
 800fa74:	4572      	cmp	r2, lr
 800fa76:	bf9a      	itte	ls
 800fa78:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800fa7c:	327c      	addls	r2, #124	@ 0x7c
 800fa7e:	227e      	movhi	r2, #126	@ 0x7e
 800fa80:	e7cf      	b.n	800fa22 <_malloc_r+0x272>
 800fa82:	f8de e008 	ldr.w	lr, [lr, #8]
 800fa86:	45f0      	cmp	r8, lr
 800fa88:	d005      	beq.n	800fa96 <_malloc_r+0x2e6>
 800fa8a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800fa8e:	f022 0203 	bic.w	r2, r2, #3
 800fa92:	4562      	cmp	r2, ip
 800fa94:	d8f5      	bhi.n	800fa82 <_malloc_r+0x2d2>
 800fa96:	f8de 800c 	ldr.w	r8, [lr, #12]
 800fa9a:	e7d1      	b.n	800fa40 <_malloc_r+0x290>
 800fa9c:	2000016c 	.word	0x2000016c
 800faa0:	20000174 	.word	0x20000174
 800faa4:	20008bc0 	.word	0x20008bc0
 800faa8:	20000164 	.word	0x20000164
 800faac:	20008b90 	.word	0x20008b90
 800fab0:	20008bbc 	.word	0x20008bbc
 800fab4:	20008bb8 	.word	0x20008bb8
 800fab8:	6860      	ldr	r0, [r4, #4]
 800faba:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800fabe:	f020 0003 	bic.w	r0, r0, #3
 800fac2:	eba0 0a07 	sub.w	sl, r0, r7
 800fac6:	f1ba 0f0f 	cmp.w	sl, #15
 800faca:	dd12      	ble.n	800faf2 <_malloc_r+0x342>
 800facc:	68a3      	ldr	r3, [r4, #8]
 800face:	19e2      	adds	r2, r4, r7
 800fad0:	f047 0701 	orr.w	r7, r7, #1
 800fad4:	6067      	str	r7, [r4, #4]
 800fad6:	f8c3 c00c 	str.w	ip, [r3, #12]
 800fada:	f8cc 3008 	str.w	r3, [ip, #8]
 800fade:	f04a 0301 	orr.w	r3, sl, #1
 800fae2:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800fae6:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800faea:	6053      	str	r3, [r2, #4]
 800faec:	f844 a000 	str.w	sl, [r4, r0]
 800faf0:	e68f      	b.n	800f812 <_malloc_r+0x62>
 800faf2:	f1ba 0f00 	cmp.w	sl, #0
 800faf6:	db11      	blt.n	800fb1c <_malloc_r+0x36c>
 800faf8:	4420      	add	r0, r4
 800fafa:	6843      	ldr	r3, [r0, #4]
 800fafc:	f043 0301 	orr.w	r3, r3, #1
 800fb00:	6043      	str	r3, [r0, #4]
 800fb02:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800fb06:	4628      	mov	r0, r5
 800fb08:	f8c3 c00c 	str.w	ip, [r3, #12]
 800fb0c:	f8cc 3008 	str.w	r3, [ip, #8]
 800fb10:	f000 f88e 	bl	800fc30 <__malloc_unlock>
 800fb14:	4620      	mov	r0, r4
 800fb16:	b003      	add	sp, #12
 800fb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb1c:	4664      	mov	r4, ip
 800fb1e:	e70f      	b.n	800f940 <_malloc_r+0x190>
 800fb20:	f858 0908 	ldr.w	r0, [r8], #-8
 800fb24:	4540      	cmp	r0, r8
 800fb26:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800fb2a:	f43f af13 	beq.w	800f954 <_malloc_r+0x1a4>
 800fb2e:	e718      	b.n	800f962 <_malloc_r+0x1b2>
 800fb30:	3304      	adds	r3, #4
 800fb32:	0052      	lsls	r2, r2, #1
 800fb34:	4210      	tst	r0, r2
 800fb36:	d0fb      	beq.n	800fb30 <_malloc_r+0x380>
 800fb38:	e6fc      	b.n	800f934 <_malloc_r+0x184>
 800fb3a:	4673      	mov	r3, lr
 800fb3c:	e7fa      	b.n	800fb34 <_malloc_r+0x384>
 800fb3e:	6810      	ldr	r0, [r2, #0]
 800fb40:	3001      	adds	r0, #1
 800fb42:	bf1b      	ittet	ne
 800fb44:	eba4 0b0b 	subne.w	fp, r4, fp
 800fb48:	eb0b 020e 	addne.w	r2, fp, lr
 800fb4c:	6014      	streq	r4, [r2, #0]
 800fb4e:	601a      	strne	r2, [r3, #0]
 800fb50:	f014 0b07 	ands.w	fp, r4, #7
 800fb54:	bf1a      	itte	ne
 800fb56:	f1cb 0008 	rsbne	r0, fp, #8
 800fb5a:	1824      	addne	r4, r4, r0
 800fb5c:	4658      	moveq	r0, fp
 800fb5e:	1862      	adds	r2, r4, r1
 800fb60:	ea02 010c 	and.w	r1, r2, ip
 800fb64:	4480      	add	r8, r0
 800fb66:	eba8 0801 	sub.w	r8, r8, r1
 800fb6a:	ea08 080c 	and.w	r8, r8, ip
 800fb6e:	4641      	mov	r1, r8
 800fb70:	4628      	mov	r0, r5
 800fb72:	9201      	str	r2, [sp, #4]
 800fb74:	f002 faf8 	bl	8012168 <_sbrk_r>
 800fb78:	1c43      	adds	r3, r0, #1
 800fb7a:	9a01      	ldr	r2, [sp, #4]
 800fb7c:	4b28      	ldr	r3, [pc, #160]	@ (800fc20 <_malloc_r+0x470>)
 800fb7e:	d107      	bne.n	800fb90 <_malloc_r+0x3e0>
 800fb80:	f1bb 0f00 	cmp.w	fp, #0
 800fb84:	d023      	beq.n	800fbce <_malloc_r+0x41e>
 800fb86:	f1ab 0008 	sub.w	r0, fp, #8
 800fb8a:	4410      	add	r0, r2
 800fb8c:	f04f 0800 	mov.w	r8, #0
 800fb90:	681a      	ldr	r2, [r3, #0]
 800fb92:	60b4      	str	r4, [r6, #8]
 800fb94:	1b00      	subs	r0, r0, r4
 800fb96:	4440      	add	r0, r8
 800fb98:	4442      	add	r2, r8
 800fb9a:	f040 0001 	orr.w	r0, r0, #1
 800fb9e:	45b2      	cmp	sl, r6
 800fba0:	601a      	str	r2, [r3, #0]
 800fba2:	6060      	str	r0, [r4, #4]
 800fba4:	f43f af29 	beq.w	800f9fa <_malloc_r+0x24a>
 800fba8:	f1b9 0f0f 	cmp.w	r9, #15
 800fbac:	d812      	bhi.n	800fbd4 <_malloc_r+0x424>
 800fbae:	2301      	movs	r3, #1
 800fbb0:	6063      	str	r3, [r4, #4]
 800fbb2:	68b3      	ldr	r3, [r6, #8]
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	f023 0303 	bic.w	r3, r3, #3
 800fbba:	42bb      	cmp	r3, r7
 800fbbc:	eba3 0207 	sub.w	r2, r3, r7
 800fbc0:	d301      	bcc.n	800fbc6 <_malloc_r+0x416>
 800fbc2:	2a0f      	cmp	r2, #15
 800fbc4:	dc22      	bgt.n	800fc0c <_malloc_r+0x45c>
 800fbc6:	4628      	mov	r0, r5
 800fbc8:	f000 f832 	bl	800fc30 <__malloc_unlock>
 800fbcc:	e5fc      	b.n	800f7c8 <_malloc_r+0x18>
 800fbce:	4610      	mov	r0, r2
 800fbd0:	46d8      	mov	r8, fp
 800fbd2:	e7dd      	b.n	800fb90 <_malloc_r+0x3e0>
 800fbd4:	f8da 2004 	ldr.w	r2, [sl, #4]
 800fbd8:	f1a9 090c 	sub.w	r9, r9, #12
 800fbdc:	f029 0907 	bic.w	r9, r9, #7
 800fbe0:	f002 0201 	and.w	r2, r2, #1
 800fbe4:	ea42 0209 	orr.w	r2, r2, r9
 800fbe8:	f8ca 2004 	str.w	r2, [sl, #4]
 800fbec:	2105      	movs	r1, #5
 800fbee:	eb0a 0209 	add.w	r2, sl, r9
 800fbf2:	f1b9 0f0f 	cmp.w	r9, #15
 800fbf6:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800fbfa:	f67f aefe 	bls.w	800f9fa <_malloc_r+0x24a>
 800fbfe:	f10a 0108 	add.w	r1, sl, #8
 800fc02:	4628      	mov	r0, r5
 800fc04:	f7ff fd14 	bl	800f630 <_free_r>
 800fc08:	4b05      	ldr	r3, [pc, #20]	@ (800fc20 <_malloc_r+0x470>)
 800fc0a:	e6f6      	b.n	800f9fa <_malloc_r+0x24a>
 800fc0c:	68b4      	ldr	r4, [r6, #8]
 800fc0e:	f047 0301 	orr.w	r3, r7, #1
 800fc12:	4427      	add	r7, r4
 800fc14:	f042 0201 	orr.w	r2, r2, #1
 800fc18:	6063      	str	r3, [r4, #4]
 800fc1a:	60b7      	str	r7, [r6, #8]
 800fc1c:	607a      	str	r2, [r7, #4]
 800fc1e:	e5f8      	b.n	800f812 <_malloc_r+0x62>
 800fc20:	20008b90 	.word	0x20008b90

0800fc24 <__malloc_lock>:
 800fc24:	4801      	ldr	r0, [pc, #4]	@ (800fc2c <__malloc_lock+0x8>)
 800fc26:	f7ff bc8d 	b.w	800f544 <__retarget_lock_acquire_recursive>
 800fc2a:	bf00      	nop
 800fc2c:	20008b88 	.word	0x20008b88

0800fc30 <__malloc_unlock>:
 800fc30:	4801      	ldr	r0, [pc, #4]	@ (800fc38 <__malloc_unlock+0x8>)
 800fc32:	f7ff bc88 	b.w	800f546 <__retarget_lock_release_recursive>
 800fc36:	bf00      	nop
 800fc38:	20008b88 	.word	0x20008b88
 800fc3c:	00000000 	.word	0x00000000

0800fc40 <_vfprintf_r>:
 800fc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc44:	b0d3      	sub	sp, #332	@ 0x14c
 800fc46:	468b      	mov	fp, r1
 800fc48:	4690      	mov	r8, r2
 800fc4a:	461c      	mov	r4, r3
 800fc4c:	461e      	mov	r6, r3
 800fc4e:	9003      	str	r0, [sp, #12]
 800fc50:	f002 fa86 	bl	8012160 <_localeconv_r>
 800fc54:	6803      	ldr	r3, [r0, #0]
 800fc56:	9316      	str	r3, [sp, #88]	@ 0x58
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7f0 fad9 	bl	8000210 <strlen>
 800fc5e:	9b03      	ldr	r3, [sp, #12]
 800fc60:	900d      	str	r0, [sp, #52]	@ 0x34
 800fc62:	b123      	cbz	r3, 800fc6e <_vfprintf_r+0x2e>
 800fc64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc66:	b913      	cbnz	r3, 800fc6e <_vfprintf_r+0x2e>
 800fc68:	9803      	ldr	r0, [sp, #12]
 800fc6a:	f7ff faed 	bl	800f248 <__sinit>
 800fc6e:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 800fc72:	07da      	lsls	r2, r3, #31
 800fc74:	d407      	bmi.n	800fc86 <_vfprintf_r+0x46>
 800fc76:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800fc7a:	059b      	lsls	r3, r3, #22
 800fc7c:	d403      	bmi.n	800fc86 <_vfprintf_r+0x46>
 800fc7e:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 800fc82:	f7ff fc5f 	bl	800f544 <__retarget_lock_acquire_recursive>
 800fc86:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 800fc8a:	049f      	lsls	r7, r3, #18
 800fc8c:	d409      	bmi.n	800fca2 <_vfprintf_r+0x62>
 800fc8e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800fc92:	f8ab 300c 	strh.w	r3, [fp, #12]
 800fc96:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 800fc9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fc9e:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 800fca2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800fca6:	071d      	lsls	r5, r3, #28
 800fca8:	d502      	bpl.n	800fcb0 <_vfprintf_r+0x70>
 800fcaa:	f8db 3010 	ldr.w	r3, [fp, #16]
 800fcae:	b9c3      	cbnz	r3, 800fce2 <_vfprintf_r+0xa2>
 800fcb0:	9803      	ldr	r0, [sp, #12]
 800fcb2:	4659      	mov	r1, fp
 800fcb4:	f002 f97a 	bl	8011fac <__swsetup_r>
 800fcb8:	b198      	cbz	r0, 800fce2 <_vfprintf_r+0xa2>
 800fcba:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 800fcbe:	07d8      	lsls	r0, r3, #31
 800fcc0:	d506      	bpl.n	800fcd0 <_vfprintf_r+0x90>
 800fcc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fcc6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fcc8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800fcca:	b053      	add	sp, #332	@ 0x14c
 800fccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800fcd4:	0599      	lsls	r1, r3, #22
 800fcd6:	d4f4      	bmi.n	800fcc2 <_vfprintf_r+0x82>
 800fcd8:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 800fcdc:	f7ff fc33 	bl	800f546 <__retarget_lock_release_recursive>
 800fce0:	e7ef      	b.n	800fcc2 <_vfprintf_r+0x82>
 800fce2:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 800fce6:	f003 021a 	and.w	r2, r3, #26
 800fcea:	2a0a      	cmp	r2, #10
 800fcec:	d116      	bne.n	800fd1c <_vfprintf_r+0xdc>
 800fcee:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 800fcf2:	2a00      	cmp	r2, #0
 800fcf4:	db12      	blt.n	800fd1c <_vfprintf_r+0xdc>
 800fcf6:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 800fcfa:	07d2      	lsls	r2, r2, #31
 800fcfc:	d405      	bmi.n	800fd0a <_vfprintf_r+0xca>
 800fcfe:	059b      	lsls	r3, r3, #22
 800fd00:	d403      	bmi.n	800fd0a <_vfprintf_r+0xca>
 800fd02:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 800fd06:	f7ff fc1e 	bl	800f546 <__retarget_lock_release_recursive>
 800fd0a:	9803      	ldr	r0, [sp, #12]
 800fd0c:	4623      	mov	r3, r4
 800fd0e:	4642      	mov	r2, r8
 800fd10:	4659      	mov	r1, fp
 800fd12:	b053      	add	sp, #332	@ 0x14c
 800fd14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd18:	f001 b9be 	b.w	8011098 <__sbprintf>
 800fd1c:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 800ff68 <_vfprintf_r+0x328>
 800fd20:	2300      	movs	r3, #0
 800fd22:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 800fd26:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800fd2a:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 800fd2e:	ac29      	add	r4, sp, #164	@ 0xa4
 800fd30:	9426      	str	r4, [sp, #152]	@ 0x98
 800fd32:	9304      	str	r3, [sp, #16]
 800fd34:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd36:	9312      	str	r3, [sp, #72]	@ 0x48
 800fd38:	9317      	str	r3, [sp, #92]	@ 0x5c
 800fd3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fd3c:	4643      	mov	r3, r8
 800fd3e:	461d      	mov	r5, r3
 800fd40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd44:	b10a      	cbz	r2, 800fd4a <_vfprintf_r+0x10a>
 800fd46:	2a25      	cmp	r2, #37	@ 0x25
 800fd48:	d1f9      	bne.n	800fd3e <_vfprintf_r+0xfe>
 800fd4a:	ebb5 0708 	subs.w	r7, r5, r8
 800fd4e:	d00d      	beq.n	800fd6c <_vfprintf_r+0x12c>
 800fd50:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800fd52:	443b      	add	r3, r7
 800fd54:	9328      	str	r3, [sp, #160]	@ 0xa0
 800fd56:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800fd58:	3301      	adds	r3, #1
 800fd5a:	2b07      	cmp	r3, #7
 800fd5c:	e9c4 8700 	strd	r8, r7, [r4]
 800fd60:	9327      	str	r3, [sp, #156]	@ 0x9c
 800fd62:	dc75      	bgt.n	800fe50 <_vfprintf_r+0x210>
 800fd64:	3408      	adds	r4, #8
 800fd66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd68:	443b      	add	r3, r7
 800fd6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fd6c:	782b      	ldrb	r3, [r5, #0]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	f001 814f 	beq.w	8011012 <_vfprintf_r+0x13d2>
 800fd74:	2200      	movs	r2, #0
 800fd76:	1c6b      	adds	r3, r5, #1
 800fd78:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800fd7c:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 800fd80:	920e      	str	r2, [sp, #56]	@ 0x38
 800fd82:	4615      	mov	r5, r2
 800fd84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd88:	9206      	str	r2, [sp, #24]
 800fd8a:	930c      	str	r3, [sp, #48]	@ 0x30
 800fd8c:	9b06      	ldr	r3, [sp, #24]
 800fd8e:	3b20      	subs	r3, #32
 800fd90:	2b5a      	cmp	r3, #90	@ 0x5a
 800fd92:	f200 85aa 	bhi.w	80108ea <_vfprintf_r+0xcaa>
 800fd96:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fd9a:	009d      	.short	0x009d
 800fd9c:	05a805a8 	.word	0x05a805a8
 800fda0:	05a800a5 	.word	0x05a800a5
 800fda4:	05a805a8 	.word	0x05a805a8
 800fda8:	05a80085 	.word	0x05a80085
 800fdac:	00a805a8 	.word	0x00a805a8
 800fdb0:	05a800b2 	.word	0x05a800b2
 800fdb4:	00b400af 	.word	0x00b400af
 800fdb8:	00ce05a8 	.word	0x00ce05a8
 800fdbc:	00d100d1 	.word	0x00d100d1
 800fdc0:	00d100d1 	.word	0x00d100d1
 800fdc4:	00d100d1 	.word	0x00d100d1
 800fdc8:	00d100d1 	.word	0x00d100d1
 800fdcc:	05a800d1 	.word	0x05a800d1
 800fdd0:	05a805a8 	.word	0x05a805a8
 800fdd4:	05a805a8 	.word	0x05a805a8
 800fdd8:	05a805a8 	.word	0x05a805a8
 800fddc:	05a80146 	.word	0x05a80146
 800fde0:	011a0107 	.word	0x011a0107
 800fde4:	01460146 	.word	0x01460146
 800fde8:	05a80146 	.word	0x05a80146
 800fdec:	05a805a8 	.word	0x05a805a8
 800fdf0:	00e205a8 	.word	0x00e205a8
 800fdf4:	05a805a8 	.word	0x05a805a8
 800fdf8:	05a804a3 	.word	0x05a804a3
 800fdfc:	05a805a8 	.word	0x05a805a8
 800fe00:	05a804ed 	.word	0x05a804ed
 800fe04:	05a8050e 	.word	0x05a8050e
 800fe08:	053005a8 	.word	0x053005a8
 800fe0c:	05a805a8 	.word	0x05a805a8
 800fe10:	05a805a8 	.word	0x05a805a8
 800fe14:	05a805a8 	.word	0x05a805a8
 800fe18:	05a805a8 	.word	0x05a805a8
 800fe1c:	05a80146 	.word	0x05a80146
 800fe20:	011c0107 	.word	0x011c0107
 800fe24:	01460146 	.word	0x01460146
 800fe28:	00ed0146 	.word	0x00ed0146
 800fe2c:	0101011c 	.word	0x0101011c
 800fe30:	00fa05a8 	.word	0x00fa05a8
 800fe34:	048705a8 	.word	0x048705a8
 800fe38:	04dc04a5 	.word	0x04dc04a5
 800fe3c:	05a80101 	.word	0x05a80101
 800fe40:	009b04ed 	.word	0x009b04ed
 800fe44:	05a80510 	.word	0x05a80510
 800fe48:	006505a8 	.word	0x006505a8
 800fe4c:	009b05a8 	.word	0x009b05a8
 800fe50:	9803      	ldr	r0, [sp, #12]
 800fe52:	aa26      	add	r2, sp, #152	@ 0x98
 800fe54:	4659      	mov	r1, fp
 800fe56:	f001 f95f 	bl	8011118 <__sprint_r>
 800fe5a:	2800      	cmp	r0, #0
 800fe5c:	f040 814d 	bne.w	80100fa <_vfprintf_r+0x4ba>
 800fe60:	ac29      	add	r4, sp, #164	@ 0xa4
 800fe62:	e780      	b.n	800fd66 <_vfprintf_r+0x126>
 800fe64:	4b42      	ldr	r3, [pc, #264]	@ (800ff70 <_vfprintf_r+0x330>)
 800fe66:	9319      	str	r3, [sp, #100]	@ 0x64
 800fe68:	f015 0320 	ands.w	r3, r5, #32
 800fe6c:	f000 84c8 	beq.w	8010800 <_vfprintf_r+0xbc0>
 800fe70:	3607      	adds	r6, #7
 800fe72:	f026 0307 	bic.w	r3, r6, #7
 800fe76:	461a      	mov	r2, r3
 800fe78:	685f      	ldr	r7, [r3, #4]
 800fe7a:	f852 6b08 	ldr.w	r6, [r2], #8
 800fe7e:	9207      	str	r2, [sp, #28]
 800fe80:	07eb      	lsls	r3, r5, #31
 800fe82:	d50a      	bpl.n	800fe9a <_vfprintf_r+0x25a>
 800fe84:	ea56 0307 	orrs.w	r3, r6, r7
 800fe88:	d007      	beq.n	800fe9a <_vfprintf_r+0x25a>
 800fe8a:	2330      	movs	r3, #48	@ 0x30
 800fe8c:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 800fe90:	9b06      	ldr	r3, [sp, #24]
 800fe92:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800fe96:	f045 0502 	orr.w	r5, r5, #2
 800fe9a:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800fe9e:	2302      	movs	r3, #2
 800fea0:	f000 bc2e 	b.w	8010700 <_vfprintf_r+0xac0>
 800fea4:	9803      	ldr	r0, [sp, #12]
 800fea6:	f002 f95b 	bl	8012160 <_localeconv_r>
 800feaa:	6843      	ldr	r3, [r0, #4]
 800feac:	9317      	str	r3, [sp, #92]	@ 0x5c
 800feae:	4618      	mov	r0, r3
 800feb0:	f7f0 f9ae 	bl	8000210 <strlen>
 800feb4:	9012      	str	r0, [sp, #72]	@ 0x48
 800feb6:	9803      	ldr	r0, [sp, #12]
 800feb8:	f002 f952 	bl	8012160 <_localeconv_r>
 800febc:	6883      	ldr	r3, [r0, #8]
 800febe:	9309      	str	r3, [sp, #36]	@ 0x24
 800fec0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fec2:	b12b      	cbz	r3, 800fed0 <_vfprintf_r+0x290>
 800fec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fec6:	b11b      	cbz	r3, 800fed0 <_vfprintf_r+0x290>
 800fec8:	781b      	ldrb	r3, [r3, #0]
 800feca:	b10b      	cbz	r3, 800fed0 <_vfprintf_r+0x290>
 800fecc:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 800fed0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fed2:	e757      	b.n	800fd84 <_vfprintf_r+0x144>
 800fed4:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d1f9      	bne.n	800fed0 <_vfprintf_r+0x290>
 800fedc:	2320      	movs	r3, #32
 800fede:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800fee2:	e7f5      	b.n	800fed0 <_vfprintf_r+0x290>
 800fee4:	f045 0501 	orr.w	r5, r5, #1
 800fee8:	e7f2      	b.n	800fed0 <_vfprintf_r+0x290>
 800feea:	f856 3b04 	ldr.w	r3, [r6], #4
 800feee:	930e      	str	r3, [sp, #56]	@ 0x38
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	daed      	bge.n	800fed0 <_vfprintf_r+0x290>
 800fef4:	425b      	negs	r3, r3
 800fef6:	930e      	str	r3, [sp, #56]	@ 0x38
 800fef8:	f045 0504 	orr.w	r5, r5, #4
 800fefc:	e7e8      	b.n	800fed0 <_vfprintf_r+0x290>
 800fefe:	232b      	movs	r3, #43	@ 0x2b
 800ff00:	e7ed      	b.n	800fede <_vfprintf_r+0x29e>
 800ff02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ff04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff08:	9206      	str	r2, [sp, #24]
 800ff0a:	2a2a      	cmp	r2, #42	@ 0x2a
 800ff0c:	d10f      	bne.n	800ff2e <_vfprintf_r+0x2ee>
 800ff0e:	f856 2b04 	ldr.w	r2, [r6], #4
 800ff12:	930c      	str	r3, [sp, #48]	@ 0x30
 800ff14:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 800ff18:	e7da      	b.n	800fed0 <_vfprintf_r+0x290>
 800ff1a:	fb01 2909 	mla	r9, r1, r9, r2
 800ff1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff22:	9206      	str	r2, [sp, #24]
 800ff24:	9a06      	ldr	r2, [sp, #24]
 800ff26:	3a30      	subs	r2, #48	@ 0x30
 800ff28:	2a09      	cmp	r2, #9
 800ff2a:	d9f6      	bls.n	800ff1a <_vfprintf_r+0x2da>
 800ff2c:	e72d      	b.n	800fd8a <_vfprintf_r+0x14a>
 800ff2e:	f04f 0900 	mov.w	r9, #0
 800ff32:	210a      	movs	r1, #10
 800ff34:	e7f6      	b.n	800ff24 <_vfprintf_r+0x2e4>
 800ff36:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 800ff3a:	e7c9      	b.n	800fed0 <_vfprintf_r+0x290>
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ff40:	920e      	str	r2, [sp, #56]	@ 0x38
 800ff42:	210a      	movs	r1, #10
 800ff44:	9a06      	ldr	r2, [sp, #24]
 800ff46:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800ff48:	3a30      	subs	r2, #48	@ 0x30
 800ff4a:	fb01 2200 	mla	r2, r1, r0, r2
 800ff4e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ff50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff54:	9206      	str	r2, [sp, #24]
 800ff56:	3a30      	subs	r2, #48	@ 0x30
 800ff58:	2a09      	cmp	r2, #9
 800ff5a:	d9f3      	bls.n	800ff44 <_vfprintf_r+0x304>
 800ff5c:	e715      	b.n	800fd8a <_vfprintf_r+0x14a>
 800ff5e:	f045 0508 	orr.w	r5, r5, #8
 800ff62:	e7b5      	b.n	800fed0 <_vfprintf_r+0x290>
 800ff64:	f3af 8000 	nop.w
	...
 800ff70:	08016877 	.word	0x08016877
 800ff74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	2b68      	cmp	r3, #104	@ 0x68
 800ff7a:	bf01      	itttt	eq
 800ff7c:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 800ff7e:	3301      	addeq	r3, #1
 800ff80:	930c      	streq	r3, [sp, #48]	@ 0x30
 800ff82:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 800ff86:	bf18      	it	ne
 800ff88:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 800ff8c:	e7a0      	b.n	800fed0 <_vfprintf_r+0x290>
 800ff8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ff90:	781b      	ldrb	r3, [r3, #0]
 800ff92:	2b6c      	cmp	r3, #108	@ 0x6c
 800ff94:	d105      	bne.n	800ffa2 <_vfprintf_r+0x362>
 800ff96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ff98:	3301      	adds	r3, #1
 800ff9a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ff9c:	f045 0520 	orr.w	r5, r5, #32
 800ffa0:	e796      	b.n	800fed0 <_vfprintf_r+0x290>
 800ffa2:	f045 0510 	orr.w	r5, r5, #16
 800ffa6:	e793      	b.n	800fed0 <_vfprintf_r+0x290>
 800ffa8:	4632      	mov	r2, r6
 800ffaa:	f852 3b04 	ldr.w	r3, [r2], #4
 800ffae:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	9207      	str	r2, [sp, #28]
 800ffb6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800ffba:	469a      	mov	sl, r3
 800ffbc:	f04f 0901 	mov.w	r9, #1
 800ffc0:	9310      	str	r3, [sp, #64]	@ 0x40
 800ffc2:	461f      	mov	r7, r3
 800ffc4:	9308      	str	r3, [sp, #32]
 800ffc6:	461e      	mov	r6, r3
 800ffc8:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 800ffcc:	e1da      	b.n	8010384 <_vfprintf_r+0x744>
 800ffce:	f045 0510 	orr.w	r5, r5, #16
 800ffd2:	06af      	lsls	r7, r5, #26
 800ffd4:	d512      	bpl.n	800fffc <_vfprintf_r+0x3bc>
 800ffd6:	3607      	adds	r6, #7
 800ffd8:	f026 0307 	bic.w	r3, r6, #7
 800ffdc:	461a      	mov	r2, r3
 800ffde:	685f      	ldr	r7, [r3, #4]
 800ffe0:	f852 6b08 	ldr.w	r6, [r2], #8
 800ffe4:	9207      	str	r2, [sp, #28]
 800ffe6:	2f00      	cmp	r7, #0
 800ffe8:	da06      	bge.n	800fff8 <_vfprintf_r+0x3b8>
 800ffea:	4276      	negs	r6, r6
 800ffec:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800fff0:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800fff4:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800fff8:	2301      	movs	r3, #1
 800fffa:	e384      	b.n	8010706 <_vfprintf_r+0xac6>
 800fffc:	4633      	mov	r3, r6
 800fffe:	06ee      	lsls	r6, r5, #27
 8010000:	f853 7b04 	ldr.w	r7, [r3], #4
 8010004:	9307      	str	r3, [sp, #28]
 8010006:	d502      	bpl.n	801000e <_vfprintf_r+0x3ce>
 8010008:	463e      	mov	r6, r7
 801000a:	17ff      	asrs	r7, r7, #31
 801000c:	e7eb      	b.n	800ffe6 <_vfprintf_r+0x3a6>
 801000e:	0668      	lsls	r0, r5, #25
 8010010:	d503      	bpl.n	801001a <_vfprintf_r+0x3da>
 8010012:	b23e      	sxth	r6, r7
 8010014:	f347 37c0 	sbfx	r7, r7, #15, #1
 8010018:	e7e5      	b.n	800ffe6 <_vfprintf_r+0x3a6>
 801001a:	05a9      	lsls	r1, r5, #22
 801001c:	d5f4      	bpl.n	8010008 <_vfprintf_r+0x3c8>
 801001e:	b27e      	sxtb	r6, r7
 8010020:	f347 17c0 	sbfx	r7, r7, #7, #1
 8010024:	e7df      	b.n	800ffe6 <_vfprintf_r+0x3a6>
 8010026:	3607      	adds	r6, #7
 8010028:	f026 0307 	bic.w	r3, r6, #7
 801002c:	ecb3 7b02 	vldmia	r3!, {d7}
 8010030:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8010034:	9307      	str	r3, [sp, #28]
 8010036:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010038:	931a      	str	r3, [sp, #104]	@ 0x68
 801003a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801003c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010040:	931b      	str	r3, [sp, #108]	@ 0x6c
 8010042:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8010046:	4b85      	ldr	r3, [pc, #532]	@ (801025c <_vfprintf_r+0x61c>)
 8010048:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801004c:	f7f0 fd8e 	bl	8000b6c <__aeabi_dcmpun>
 8010050:	bb10      	cbnz	r0, 8010098 <_vfprintf_r+0x458>
 8010052:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8010056:	4b81      	ldr	r3, [pc, #516]	@ (801025c <_vfprintf_r+0x61c>)
 8010058:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801005c:	f7f0 fd68 	bl	8000b30 <__aeabi_dcmple>
 8010060:	b9d0      	cbnz	r0, 8010098 <_vfprintf_r+0x458>
 8010062:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010066:	2200      	movs	r2, #0
 8010068:	2300      	movs	r3, #0
 801006a:	f7f0 fd57 	bl	8000b1c <__aeabi_dcmplt>
 801006e:	b110      	cbz	r0, 8010076 <_vfprintf_r+0x436>
 8010070:	232d      	movs	r3, #45	@ 0x2d
 8010072:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8010076:	4a7a      	ldr	r2, [pc, #488]	@ (8010260 <_vfprintf_r+0x620>)
 8010078:	4b7a      	ldr	r3, [pc, #488]	@ (8010264 <_vfprintf_r+0x624>)
 801007a:	9906      	ldr	r1, [sp, #24]
 801007c:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8010080:	2947      	cmp	r1, #71	@ 0x47
 8010082:	bfd4      	ite	le
 8010084:	4690      	movle	r8, r2
 8010086:	4698      	movgt	r8, r3
 8010088:	f04f 0a00 	mov.w	sl, #0
 801008c:	f04f 0903 	mov.w	r9, #3
 8010090:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 8010094:	f000 bff8 	b.w	8011088 <_vfprintf_r+0x1448>
 8010098:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801009c:	4610      	mov	r0, r2
 801009e:	4619      	mov	r1, r3
 80100a0:	f7f0 fd64 	bl	8000b6c <__aeabi_dcmpun>
 80100a4:	4682      	mov	sl, r0
 80100a6:	b140      	cbz	r0, 80100ba <_vfprintf_r+0x47a>
 80100a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80100aa:	4a6f      	ldr	r2, [pc, #444]	@ (8010268 <_vfprintf_r+0x628>)
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	bfbc      	itt	lt
 80100b0:	232d      	movlt	r3, #45	@ 0x2d
 80100b2:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 80100b6:	4b6d      	ldr	r3, [pc, #436]	@ (801026c <_vfprintf_r+0x62c>)
 80100b8:	e7df      	b.n	801007a <_vfprintf_r+0x43a>
 80100ba:	9b06      	ldr	r3, [sp, #24]
 80100bc:	2b61      	cmp	r3, #97	@ 0x61
 80100be:	d02e      	beq.n	801011e <_vfprintf_r+0x4de>
 80100c0:	2b41      	cmp	r3, #65	@ 0x41
 80100c2:	d12e      	bne.n	8010122 <_vfprintf_r+0x4e2>
 80100c4:	2358      	movs	r3, #88	@ 0x58
 80100c6:	2230      	movs	r2, #48	@ 0x30
 80100c8:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 80100cc:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 80100d0:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 80100d4:	f045 0502 	orr.w	r5, r5, #2
 80100d8:	f340 80ae 	ble.w	8010238 <_vfprintf_r+0x5f8>
 80100dc:	9803      	ldr	r0, [sp, #12]
 80100de:	f109 0101 	add.w	r1, r9, #1
 80100e2:	f7ff fb65 	bl	800f7b0 <_malloc_r>
 80100e6:	4680      	mov	r8, r0
 80100e8:	2800      	cmp	r0, #0
 80100ea:	f040 80aa 	bne.w	8010242 <_vfprintf_r+0x602>
 80100ee:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80100f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80100f6:	f8ab 300c 	strh.w	r3, [fp, #12]
 80100fa:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80100fe:	07d9      	lsls	r1, r3, #31
 8010100:	d407      	bmi.n	8010112 <_vfprintf_r+0x4d2>
 8010102:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8010106:	059a      	lsls	r2, r3, #22
 8010108:	d403      	bmi.n	8010112 <_vfprintf_r+0x4d2>
 801010a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 801010e:	f7ff fa1a 	bl	800f546 <__retarget_lock_release_recursive>
 8010112:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8010116:	065b      	lsls	r3, r3, #25
 8010118:	f57f add6 	bpl.w	800fcc8 <_vfprintf_r+0x88>
 801011c:	e5d1      	b.n	800fcc2 <_vfprintf_r+0x82>
 801011e:	2378      	movs	r3, #120	@ 0x78
 8010120:	e7d1      	b.n	80100c6 <_vfprintf_r+0x486>
 8010122:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8010126:	f000 808e 	beq.w	8010246 <_vfprintf_r+0x606>
 801012a:	9b06      	ldr	r3, [sp, #24]
 801012c:	f023 0320 	bic.w	r3, r3, #32
 8010130:	2b47      	cmp	r3, #71	@ 0x47
 8010132:	d105      	bne.n	8010140 <_vfprintf_r+0x500>
 8010134:	f1b9 0f00 	cmp.w	r9, #0
 8010138:	d102      	bne.n	8010140 <_vfprintf_r+0x500>
 801013a:	46ca      	mov	sl, r9
 801013c:	f04f 0901 	mov.w	r9, #1
 8010140:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8010144:	9311      	str	r3, [sp, #68]	@ 0x44
 8010146:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010148:	2b00      	cmp	r3, #0
 801014a:	da7f      	bge.n	801024c <_vfprintf_r+0x60c>
 801014c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801014e:	9314      	str	r3, [sp, #80]	@ 0x50
 8010150:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010152:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8010156:	9315      	str	r3, [sp, #84]	@ 0x54
 8010158:	232d      	movs	r3, #45	@ 0x2d
 801015a:	931c      	str	r3, [sp, #112]	@ 0x70
 801015c:	9b06      	ldr	r3, [sp, #24]
 801015e:	f023 0320 	bic.w	r3, r3, #32
 8010162:	2b41      	cmp	r3, #65	@ 0x41
 8010164:	9308      	str	r3, [sp, #32]
 8010166:	f040 81e7 	bne.w	8010538 <_vfprintf_r+0x8f8>
 801016a:	a820      	add	r0, sp, #128	@ 0x80
 801016c:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8010170:	f002 f82a 	bl	80121c8 <frexp>
 8010174:	2200      	movs	r2, #0
 8010176:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801017a:	ec51 0b10 	vmov	r0, r1, d0
 801017e:	f7f0 fa5b 	bl	8000638 <__aeabi_dmul>
 8010182:	4602      	mov	r2, r0
 8010184:	460b      	mov	r3, r1
 8010186:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801018a:	2200      	movs	r2, #0
 801018c:	2300      	movs	r3, #0
 801018e:	f7f0 fcbb 	bl	8000b08 <__aeabi_dcmpeq>
 8010192:	b108      	cbz	r0, 8010198 <_vfprintf_r+0x558>
 8010194:	2301      	movs	r3, #1
 8010196:	9320      	str	r3, [sp, #128]	@ 0x80
 8010198:	4a35      	ldr	r2, [pc, #212]	@ (8010270 <_vfprintf_r+0x630>)
 801019a:	4b36      	ldr	r3, [pc, #216]	@ (8010274 <_vfprintf_r+0x634>)
 801019c:	9906      	ldr	r1, [sp, #24]
 801019e:	2961      	cmp	r1, #97	@ 0x61
 80101a0:	bf18      	it	ne
 80101a2:	461a      	movne	r2, r3
 80101a4:	9210      	str	r2, [sp, #64]	@ 0x40
 80101a6:	f109 37ff 	add.w	r7, r9, #4294967295	@ 0xffffffff
 80101aa:	4646      	mov	r6, r8
 80101ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80101b0:	4b31      	ldr	r3, [pc, #196]	@ (8010278 <_vfprintf_r+0x638>)
 80101b2:	2200      	movs	r2, #0
 80101b4:	f7f0 fa40 	bl	8000638 <__aeabi_dmul>
 80101b8:	4602      	mov	r2, r0
 80101ba:	460b      	mov	r3, r1
 80101bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80101c0:	f7f0 fcea 	bl	8000b98 <__aeabi_d2iz>
 80101c4:	9013      	str	r0, [sp, #76]	@ 0x4c
 80101c6:	f7f0 f9cd 	bl	8000564 <__aeabi_i2d>
 80101ca:	4602      	mov	r2, r0
 80101cc:	460b      	mov	r3, r1
 80101ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80101d2:	f7f0 f879 	bl	80002c8 <__aeabi_dsub>
 80101d6:	4602      	mov	r2, r0
 80101d8:	460b      	mov	r3, r1
 80101da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80101de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80101e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80101e2:	5c9b      	ldrb	r3, [r3, r2]
 80101e4:	f806 3b01 	strb.w	r3, [r6], #1
 80101e8:	1c7a      	adds	r2, r7, #1
 80101ea:	d006      	beq.n	80101fa <_vfprintf_r+0x5ba>
 80101ec:	1e7b      	subs	r3, r7, #1
 80101ee:	931d      	str	r3, [sp, #116]	@ 0x74
 80101f0:	2200      	movs	r2, #0
 80101f2:	2300      	movs	r3, #0
 80101f4:	f7f0 fc88 	bl	8000b08 <__aeabi_dcmpeq>
 80101f8:	b370      	cbz	r0, 8010258 <_vfprintf_r+0x618>
 80101fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80101fe:	4b1f      	ldr	r3, [pc, #124]	@ (801027c <_vfprintf_r+0x63c>)
 8010200:	2200      	movs	r2, #0
 8010202:	f7f0 fca9 	bl	8000b58 <__aeabi_dcmpgt>
 8010206:	2800      	cmp	r0, #0
 8010208:	d13a      	bne.n	8010280 <_vfprintf_r+0x640>
 801020a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801020e:	4b1b      	ldr	r3, [pc, #108]	@ (801027c <_vfprintf_r+0x63c>)
 8010210:	2200      	movs	r2, #0
 8010212:	f7f0 fc79 	bl	8000b08 <__aeabi_dcmpeq>
 8010216:	b110      	cbz	r0, 801021e <_vfprintf_r+0x5de>
 8010218:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801021a:	07db      	lsls	r3, r3, #31
 801021c:	d430      	bmi.n	8010280 <_vfprintf_r+0x640>
 801021e:	4633      	mov	r3, r6
 8010220:	19f1      	adds	r1, r6, r7
 8010222:	2030      	movs	r0, #48	@ 0x30
 8010224:	1aca      	subs	r2, r1, r3
 8010226:	2a00      	cmp	r2, #0
 8010228:	f280 8183 	bge.w	8010532 <_vfprintf_r+0x8f2>
 801022c:	1c7b      	adds	r3, r7, #1
 801022e:	3701      	adds	r7, #1
 8010230:	bfb8      	it	lt
 8010232:	2300      	movlt	r3, #0
 8010234:	441e      	add	r6, r3
 8010236:	e037      	b.n	80102a8 <_vfprintf_r+0x668>
 8010238:	f04f 0a00 	mov.w	sl, #0
 801023c:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 8010240:	e77e      	b.n	8010140 <_vfprintf_r+0x500>
 8010242:	4682      	mov	sl, r0
 8010244:	e77c      	b.n	8010140 <_vfprintf_r+0x500>
 8010246:	f04f 0906 	mov.w	r9, #6
 801024a:	e779      	b.n	8010140 <_vfprintf_r+0x500>
 801024c:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8010250:	2300      	movs	r3, #0
 8010252:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8010256:	e780      	b.n	801015a <_vfprintf_r+0x51a>
 8010258:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 801025a:	e7a7      	b.n	80101ac <_vfprintf_r+0x56c>
 801025c:	7fefffff 	.word	0x7fefffff
 8010260:	08016867 	.word	0x08016867
 8010264:	0801686b 	.word	0x0801686b
 8010268:	0801686f 	.word	0x0801686f
 801026c:	08016873 	.word	0x08016873
 8010270:	08016877 	.word	0x08016877
 8010274:	08016888 	.word	0x08016888
 8010278:	40300000 	.word	0x40300000
 801027c:	3fe00000 	.word	0x3fe00000
 8010280:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010282:	9624      	str	r6, [sp, #144]	@ 0x90
 8010284:	7bd9      	ldrb	r1, [r3, #15]
 8010286:	2030      	movs	r0, #48	@ 0x30
 8010288:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801028a:	1e53      	subs	r3, r2, #1
 801028c:	9324      	str	r3, [sp, #144]	@ 0x90
 801028e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8010292:	428b      	cmp	r3, r1
 8010294:	f000 814a 	beq.w	801052c <_vfprintf_r+0x8ec>
 8010298:	2b39      	cmp	r3, #57	@ 0x39
 801029a:	bf0b      	itete	eq
 801029c:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 801029e:	3301      	addne	r3, #1
 80102a0:	7a9b      	ldrbeq	r3, [r3, #10]
 80102a2:	b2db      	uxtbne	r3, r3
 80102a4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80102a8:	eba6 0308 	sub.w	r3, r6, r8
 80102ac:	9304      	str	r3, [sp, #16]
 80102ae:	9b08      	ldr	r3, [sp, #32]
 80102b0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80102b2:	2b47      	cmp	r3, #71	@ 0x47
 80102b4:	f040 8189 	bne.w	80105ca <_vfprintf_r+0x98a>
 80102b8:	1cf1      	adds	r1, r6, #3
 80102ba:	db02      	blt.n	80102c2 <_vfprintf_r+0x682>
 80102bc:	45b1      	cmp	r9, r6
 80102be:	f280 81a7 	bge.w	8010610 <_vfprintf_r+0x9d0>
 80102c2:	9b06      	ldr	r3, [sp, #24]
 80102c4:	3b02      	subs	r3, #2
 80102c6:	9306      	str	r3, [sp, #24]
 80102c8:	9906      	ldr	r1, [sp, #24]
 80102ca:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80102ce:	f021 0120 	bic.w	r1, r1, #32
 80102d2:	2941      	cmp	r1, #65	@ 0x41
 80102d4:	bf08      	it	eq
 80102d6:	320f      	addeq	r2, #15
 80102d8:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 80102dc:	bf06      	itte	eq
 80102de:	b2d2      	uxtbeq	r2, r2
 80102e0:	2101      	moveq	r1, #1
 80102e2:	2100      	movne	r1, #0
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	9320      	str	r3, [sp, #128]	@ 0x80
 80102e8:	bfb8      	it	lt
 80102ea:	f1c6 0301 	rsblt	r3, r6, #1
 80102ee:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 80102f2:	bfb4      	ite	lt
 80102f4:	222d      	movlt	r2, #45	@ 0x2d
 80102f6:	222b      	movge	r2, #43	@ 0x2b
 80102f8:	2b09      	cmp	r3, #9
 80102fa:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 80102fe:	f340 817a 	ble.w	80105f6 <_vfprintf_r+0x9b6>
 8010302:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8010306:	270a      	movs	r7, #10
 8010308:	4602      	mov	r2, r0
 801030a:	fbb3 f6f7 	udiv	r6, r3, r7
 801030e:	fb07 3116 	mls	r1, r7, r6, r3
 8010312:	3130      	adds	r1, #48	@ 0x30
 8010314:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010318:	4619      	mov	r1, r3
 801031a:	2963      	cmp	r1, #99	@ 0x63
 801031c:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8010320:	4633      	mov	r3, r6
 8010322:	dcf1      	bgt.n	8010308 <_vfprintf_r+0x6c8>
 8010324:	3330      	adds	r3, #48	@ 0x30
 8010326:	1e91      	subs	r1, r2, #2
 8010328:	f800 3c01 	strb.w	r3, [r0, #-1]
 801032c:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8010330:	460b      	mov	r3, r1
 8010332:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8010336:	4283      	cmp	r3, r0
 8010338:	f0c0 8158 	bcc.w	80105ec <_vfprintf_r+0x9ac>
 801033c:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8010340:	1a9b      	subs	r3, r3, r2
 8010342:	4281      	cmp	r1, r0
 8010344:	bf88      	it	hi
 8010346:	2300      	movhi	r3, #0
 8010348:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 801034c:	441a      	add	r2, r3
 801034e:	ab22      	add	r3, sp, #136	@ 0x88
 8010350:	1ad3      	subs	r3, r2, r3
 8010352:	9a04      	ldr	r2, [sp, #16]
 8010354:	9318      	str	r3, [sp, #96]	@ 0x60
 8010356:	2a01      	cmp	r2, #1
 8010358:	eb03 0902 	add.w	r9, r3, r2
 801035c:	dc01      	bgt.n	8010362 <_vfprintf_r+0x722>
 801035e:	07ea      	lsls	r2, r5, #31
 8010360:	d501      	bpl.n	8010366 <_vfprintf_r+0x726>
 8010362:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010364:	4499      	add	r9, r3
 8010366:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801036a:	2700      	movs	r7, #0
 801036c:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8010370:	9311      	str	r3, [sp, #68]	@ 0x44
 8010372:	9708      	str	r7, [sp, #32]
 8010374:	463e      	mov	r6, r7
 8010376:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010378:	2b00      	cmp	r3, #0
 801037a:	f040 8191 	bne.w	80106a0 <_vfprintf_r+0xa60>
 801037e:	2300      	movs	r3, #0
 8010380:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8010382:	9310      	str	r3, [sp, #64]	@ 0x40
 8010384:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010386:	454b      	cmp	r3, r9
 8010388:	bfb8      	it	lt
 801038a:	464b      	movlt	r3, r9
 801038c:	9311      	str	r3, [sp, #68]	@ 0x44
 801038e:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8010392:	b113      	cbz	r3, 801039a <_vfprintf_r+0x75a>
 8010394:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010396:	3301      	adds	r3, #1
 8010398:	9311      	str	r3, [sp, #68]	@ 0x44
 801039a:	f015 0302 	ands.w	r3, r5, #2
 801039e:	931c      	str	r3, [sp, #112]	@ 0x70
 80103a0:	bf1e      	ittt	ne
 80103a2:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 80103a4:	3302      	addne	r3, #2
 80103a6:	9311      	strne	r3, [sp, #68]	@ 0x44
 80103a8:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 80103ac:	931d      	str	r3, [sp, #116]	@ 0x74
 80103ae:	d122      	bne.n	80103f6 <_vfprintf_r+0x7b6>
 80103b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103b2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80103b4:	1a9b      	subs	r3, r3, r2
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80103ba:	dd1c      	ble.n	80103f6 <_vfprintf_r+0x7b6>
 80103bc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80103be:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80103c2:	2810      	cmp	r0, #16
 80103c4:	489f      	ldr	r0, [pc, #636]	@ (8010644 <_vfprintf_r+0xa04>)
 80103c6:	6020      	str	r0, [r4, #0]
 80103c8:	f102 0201 	add.w	r2, r2, #1
 80103cc:	f104 0108 	add.w	r1, r4, #8
 80103d0:	f300 8297 	bgt.w	8010902 <_vfprintf_r+0xcc2>
 80103d4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80103d6:	6060      	str	r0, [r4, #4]
 80103d8:	4403      	add	r3, r0
 80103da:	2a07      	cmp	r2, #7
 80103dc:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80103e0:	f340 82a4 	ble.w	801092c <_vfprintf_r+0xcec>
 80103e4:	9803      	ldr	r0, [sp, #12]
 80103e6:	aa26      	add	r2, sp, #152	@ 0x98
 80103e8:	4659      	mov	r1, fp
 80103ea:	f000 fe95 	bl	8011118 <__sprint_r>
 80103ee:	2800      	cmp	r0, #0
 80103f0:	f040 85ed 	bne.w	8010fce <_vfprintf_r+0x138e>
 80103f4:	ac29      	add	r4, sp, #164	@ 0xa4
 80103f6:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 80103fa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80103fc:	b16a      	cbz	r2, 801041a <_vfprintf_r+0x7da>
 80103fe:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8010402:	6022      	str	r2, [r4, #0]
 8010404:	2201      	movs	r2, #1
 8010406:	4413      	add	r3, r2
 8010408:	9328      	str	r3, [sp, #160]	@ 0xa0
 801040a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801040c:	6062      	str	r2, [r4, #4]
 801040e:	4413      	add	r3, r2
 8010410:	2b07      	cmp	r3, #7
 8010412:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010414:	f300 828c 	bgt.w	8010930 <_vfprintf_r+0xcf0>
 8010418:	3408      	adds	r4, #8
 801041a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801041c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801041e:	b162      	cbz	r2, 801043a <_vfprintf_r+0x7fa>
 8010420:	aa1f      	add	r2, sp, #124	@ 0x7c
 8010422:	6022      	str	r2, [r4, #0]
 8010424:	2202      	movs	r2, #2
 8010426:	4413      	add	r3, r2
 8010428:	9328      	str	r3, [sp, #160]	@ 0xa0
 801042a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801042c:	6062      	str	r2, [r4, #4]
 801042e:	3301      	adds	r3, #1
 8010430:	2b07      	cmp	r3, #7
 8010432:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010434:	f300 8286 	bgt.w	8010944 <_vfprintf_r+0xd04>
 8010438:	3408      	adds	r4, #8
 801043a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801043c:	2b80      	cmp	r3, #128	@ 0x80
 801043e:	d122      	bne.n	8010486 <_vfprintf_r+0x846>
 8010440:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010442:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010444:	1a9b      	subs	r3, r3, r2
 8010446:	2b00      	cmp	r3, #0
 8010448:	9313      	str	r3, [sp, #76]	@ 0x4c
 801044a:	dd1c      	ble.n	8010486 <_vfprintf_r+0x846>
 801044c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801044e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8010452:	2810      	cmp	r0, #16
 8010454:	487c      	ldr	r0, [pc, #496]	@ (8010648 <_vfprintf_r+0xa08>)
 8010456:	6020      	str	r0, [r4, #0]
 8010458:	f102 0201 	add.w	r2, r2, #1
 801045c:	f104 0108 	add.w	r1, r4, #8
 8010460:	f300 827a 	bgt.w	8010958 <_vfprintf_r+0xd18>
 8010464:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010466:	6060      	str	r0, [r4, #4]
 8010468:	4403      	add	r3, r0
 801046a:	2a07      	cmp	r2, #7
 801046c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8010470:	f340 8287 	ble.w	8010982 <_vfprintf_r+0xd42>
 8010474:	9803      	ldr	r0, [sp, #12]
 8010476:	aa26      	add	r2, sp, #152	@ 0x98
 8010478:	4659      	mov	r1, fp
 801047a:	f000 fe4d 	bl	8011118 <__sprint_r>
 801047e:	2800      	cmp	r0, #0
 8010480:	f040 85a5 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010484:	ac29      	add	r4, sp, #164	@ 0xa4
 8010486:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010488:	eba3 0309 	sub.w	r3, r3, r9
 801048c:	2b00      	cmp	r3, #0
 801048e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010490:	dd1c      	ble.n	80104cc <_vfprintf_r+0x88c>
 8010492:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010494:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8010498:	2810      	cmp	r0, #16
 801049a:	486b      	ldr	r0, [pc, #428]	@ (8010648 <_vfprintf_r+0xa08>)
 801049c:	6020      	str	r0, [r4, #0]
 801049e:	f102 0201 	add.w	r2, r2, #1
 80104a2:	f104 0108 	add.w	r1, r4, #8
 80104a6:	f300 826e 	bgt.w	8010986 <_vfprintf_r+0xd46>
 80104aa:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80104ac:	6060      	str	r0, [r4, #4]
 80104ae:	4403      	add	r3, r0
 80104b0:	2a07      	cmp	r2, #7
 80104b2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80104b6:	f340 827b 	ble.w	80109b0 <_vfprintf_r+0xd70>
 80104ba:	9803      	ldr	r0, [sp, #12]
 80104bc:	aa26      	add	r2, sp, #152	@ 0x98
 80104be:	4659      	mov	r1, fp
 80104c0:	f000 fe2a 	bl	8011118 <__sprint_r>
 80104c4:	2800      	cmp	r0, #0
 80104c6:	f040 8582 	bne.w	8010fce <_vfprintf_r+0x138e>
 80104ca:	ac29      	add	r4, sp, #164	@ 0xa4
 80104cc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80104ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80104d0:	05e8      	lsls	r0, r5, #23
 80104d2:	f100 8273 	bmi.w	80109bc <_vfprintf_r+0xd7c>
 80104d6:	444b      	add	r3, r9
 80104d8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80104da:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80104dc:	3301      	adds	r3, #1
 80104de:	2b07      	cmp	r3, #7
 80104e0:	e9c4 8900 	strd	r8, r9, [r4]
 80104e4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80104e6:	f300 82af 	bgt.w	8010a48 <_vfprintf_r+0xe08>
 80104ea:	3408      	adds	r4, #8
 80104ec:	0768      	lsls	r0, r5, #29
 80104ee:	f100 8550 	bmi.w	8010f92 <_vfprintf_r+0x1352>
 80104f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80104f6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80104f8:	428a      	cmp	r2, r1
 80104fa:	bfac      	ite	ge
 80104fc:	189b      	addge	r3, r3, r2
 80104fe:	185b      	addlt	r3, r3, r1
 8010500:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010502:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010504:	b13b      	cbz	r3, 8010516 <_vfprintf_r+0x8d6>
 8010506:	9803      	ldr	r0, [sp, #12]
 8010508:	aa26      	add	r2, sp, #152	@ 0x98
 801050a:	4659      	mov	r1, fp
 801050c:	f000 fe04 	bl	8011118 <__sprint_r>
 8010510:	2800      	cmp	r0, #0
 8010512:	f040 855c 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010516:	2300      	movs	r3, #0
 8010518:	9327      	str	r3, [sp, #156]	@ 0x9c
 801051a:	f1ba 0f00 	cmp.w	sl, #0
 801051e:	f040 8572 	bne.w	8011006 <_vfprintf_r+0x13c6>
 8010522:	9e07      	ldr	r6, [sp, #28]
 8010524:	ac29      	add	r4, sp, #164	@ 0xa4
 8010526:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 801052a:	e407      	b.n	800fd3c <_vfprintf_r+0xfc>
 801052c:	f802 0c01 	strb.w	r0, [r2, #-1]
 8010530:	e6aa      	b.n	8010288 <_vfprintf_r+0x648>
 8010532:	f803 0b01 	strb.w	r0, [r3], #1
 8010536:	e675      	b.n	8010224 <_vfprintf_r+0x5e4>
 8010538:	9b08      	ldr	r3, [sp, #32]
 801053a:	2b46      	cmp	r3, #70	@ 0x46
 801053c:	d005      	beq.n	801054a <_vfprintf_r+0x90a>
 801053e:	2b45      	cmp	r3, #69	@ 0x45
 8010540:	d11a      	bne.n	8010578 <_vfprintf_r+0x938>
 8010542:	f109 0601 	add.w	r6, r9, #1
 8010546:	2102      	movs	r1, #2
 8010548:	e001      	b.n	801054e <_vfprintf_r+0x90e>
 801054a:	464e      	mov	r6, r9
 801054c:	2103      	movs	r1, #3
 801054e:	ab24      	add	r3, sp, #144	@ 0x90
 8010550:	9301      	str	r3, [sp, #4]
 8010552:	ab21      	add	r3, sp, #132	@ 0x84
 8010554:	9300      	str	r3, [sp, #0]
 8010556:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 801055a:	ab20      	add	r3, sp, #128	@ 0x80
 801055c:	9803      	ldr	r0, [sp, #12]
 801055e:	4632      	mov	r2, r6
 8010560:	f001 ff32 	bl	80123c8 <_dtoa_r>
 8010564:	9b08      	ldr	r3, [sp, #32]
 8010566:	2b47      	cmp	r3, #71	@ 0x47
 8010568:	4680      	mov	r8, r0
 801056a:	d119      	bne.n	80105a0 <_vfprintf_r+0x960>
 801056c:	07e8      	lsls	r0, r5, #31
 801056e:	d405      	bmi.n	801057c <_vfprintf_r+0x93c>
 8010570:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8010572:	eba3 0308 	sub.w	r3, r3, r8
 8010576:	e699      	b.n	80102ac <_vfprintf_r+0x66c>
 8010578:	464e      	mov	r6, r9
 801057a:	e7e4      	b.n	8010546 <_vfprintf_r+0x906>
 801057c:	eb08 0706 	add.w	r7, r8, r6
 8010580:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8010584:	2200      	movs	r2, #0
 8010586:	2300      	movs	r3, #0
 8010588:	f7f0 fabe 	bl	8000b08 <__aeabi_dcmpeq>
 801058c:	b100      	cbz	r0, 8010590 <_vfprintf_r+0x950>
 801058e:	9724      	str	r7, [sp, #144]	@ 0x90
 8010590:	2230      	movs	r2, #48	@ 0x30
 8010592:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8010594:	429f      	cmp	r7, r3
 8010596:	d9eb      	bls.n	8010570 <_vfprintf_r+0x930>
 8010598:	1c59      	adds	r1, r3, #1
 801059a:	9124      	str	r1, [sp, #144]	@ 0x90
 801059c:	701a      	strb	r2, [r3, #0]
 801059e:	e7f8      	b.n	8010592 <_vfprintf_r+0x952>
 80105a0:	9b08      	ldr	r3, [sp, #32]
 80105a2:	2b46      	cmp	r3, #70	@ 0x46
 80105a4:	eb00 0706 	add.w	r7, r0, r6
 80105a8:	d1ea      	bne.n	8010580 <_vfprintf_r+0x940>
 80105aa:	7803      	ldrb	r3, [r0, #0]
 80105ac:	2b30      	cmp	r3, #48	@ 0x30
 80105ae:	d109      	bne.n	80105c4 <_vfprintf_r+0x984>
 80105b0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 80105b4:	2200      	movs	r2, #0
 80105b6:	2300      	movs	r3, #0
 80105b8:	f7f0 faa6 	bl	8000b08 <__aeabi_dcmpeq>
 80105bc:	b910      	cbnz	r0, 80105c4 <_vfprintf_r+0x984>
 80105be:	f1c6 0601 	rsb	r6, r6, #1
 80105c2:	9620      	str	r6, [sp, #128]	@ 0x80
 80105c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80105c6:	441f      	add	r7, r3
 80105c8:	e7da      	b.n	8010580 <_vfprintf_r+0x940>
 80105ca:	9b08      	ldr	r3, [sp, #32]
 80105cc:	2b46      	cmp	r3, #70	@ 0x46
 80105ce:	f47f ae7b 	bne.w	80102c8 <_vfprintf_r+0x688>
 80105d2:	f005 0301 	and.w	r3, r5, #1
 80105d6:	2e00      	cmp	r6, #0
 80105d8:	ea43 0309 	orr.w	r3, r3, r9
 80105dc:	dd25      	ble.n	801062a <_vfprintf_r+0x9ea>
 80105de:	b37b      	cbz	r3, 8010640 <_vfprintf_r+0xa00>
 80105e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80105e2:	18f3      	adds	r3, r6, r3
 80105e4:	4499      	add	r9, r3
 80105e6:	2366      	movs	r3, #102	@ 0x66
 80105e8:	9306      	str	r3, [sp, #24]
 80105ea:	e033      	b.n	8010654 <_vfprintf_r+0xa14>
 80105ec:	f813 7b01 	ldrb.w	r7, [r3], #1
 80105f0:	f806 7f01 	strb.w	r7, [r6, #1]!
 80105f4:	e69f      	b.n	8010336 <_vfprintf_r+0x6f6>
 80105f6:	b941      	cbnz	r1, 801060a <_vfprintf_r+0x9ca>
 80105f8:	2230      	movs	r2, #48	@ 0x30
 80105fa:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 80105fe:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8010602:	3330      	adds	r3, #48	@ 0x30
 8010604:	f802 3b01 	strb.w	r3, [r2], #1
 8010608:	e6a1      	b.n	801034e <_vfprintf_r+0x70e>
 801060a:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 801060e:	e7f8      	b.n	8010602 <_vfprintf_r+0x9c2>
 8010610:	9b04      	ldr	r3, [sp, #16]
 8010612:	42b3      	cmp	r3, r6
 8010614:	dd0d      	ble.n	8010632 <_vfprintf_r+0x9f2>
 8010616:	9b04      	ldr	r3, [sp, #16]
 8010618:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801061a:	2e00      	cmp	r6, #0
 801061c:	eb03 0902 	add.w	r9, r3, r2
 8010620:	dc0c      	bgt.n	801063c <_vfprintf_r+0x9fc>
 8010622:	f1c6 0301 	rsb	r3, r6, #1
 8010626:	4499      	add	r9, r3
 8010628:	e008      	b.n	801063c <_vfprintf_r+0x9fc>
 801062a:	b17b      	cbz	r3, 801064c <_vfprintf_r+0xa0c>
 801062c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801062e:	3301      	adds	r3, #1
 8010630:	e7d8      	b.n	80105e4 <_vfprintf_r+0x9a4>
 8010632:	07eb      	lsls	r3, r5, #31
 8010634:	d521      	bpl.n	801067a <_vfprintf_r+0xa3a>
 8010636:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010638:	eb06 0903 	add.w	r9, r6, r3
 801063c:	2367      	movs	r3, #103	@ 0x67
 801063e:	e7d3      	b.n	80105e8 <_vfprintf_r+0x9a8>
 8010640:	46b1      	mov	r9, r6
 8010642:	e7d0      	b.n	80105e6 <_vfprintf_r+0x9a6>
 8010644:	080168ab 	.word	0x080168ab
 8010648:	0801689b 	.word	0x0801689b
 801064c:	2366      	movs	r3, #102	@ 0x66
 801064e:	9306      	str	r3, [sp, #24]
 8010650:	f04f 0901 	mov.w	r9, #1
 8010654:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8010658:	9308      	str	r3, [sp, #32]
 801065a:	d01f      	beq.n	801069c <_vfprintf_r+0xa5c>
 801065c:	2700      	movs	r7, #0
 801065e:	2e00      	cmp	r6, #0
 8010660:	9708      	str	r7, [sp, #32]
 8010662:	f77f ae88 	ble.w	8010376 <_vfprintf_r+0x736>
 8010666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010668:	781b      	ldrb	r3, [r3, #0]
 801066a:	2bff      	cmp	r3, #255	@ 0xff
 801066c:	d107      	bne.n	801067e <_vfprintf_r+0xa3e>
 801066e:	9b08      	ldr	r3, [sp, #32]
 8010670:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010672:	443b      	add	r3, r7
 8010674:	fb02 9903 	mla	r9, r2, r3, r9
 8010678:	e67d      	b.n	8010376 <_vfprintf_r+0x736>
 801067a:	46b1      	mov	r9, r6
 801067c:	e7de      	b.n	801063c <_vfprintf_r+0x9fc>
 801067e:	42b3      	cmp	r3, r6
 8010680:	daf5      	bge.n	801066e <_vfprintf_r+0xa2e>
 8010682:	1af6      	subs	r6, r6, r3
 8010684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010686:	785b      	ldrb	r3, [r3, #1]
 8010688:	b133      	cbz	r3, 8010698 <_vfprintf_r+0xa58>
 801068a:	9b08      	ldr	r3, [sp, #32]
 801068c:	3301      	adds	r3, #1
 801068e:	9308      	str	r3, [sp, #32]
 8010690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010692:	3301      	adds	r3, #1
 8010694:	9309      	str	r3, [sp, #36]	@ 0x24
 8010696:	e7e6      	b.n	8010666 <_vfprintf_r+0xa26>
 8010698:	3701      	adds	r7, #1
 801069a:	e7e4      	b.n	8010666 <_vfprintf_r+0xa26>
 801069c:	9f08      	ldr	r7, [sp, #32]
 801069e:	e66a      	b.n	8010376 <_vfprintf_r+0x736>
 80106a0:	232d      	movs	r3, #45	@ 0x2d
 80106a2:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80106a6:	e66a      	b.n	801037e <_vfprintf_r+0x73e>
 80106a8:	06af      	lsls	r7, r5, #26
 80106aa:	d507      	bpl.n	80106bc <_vfprintf_r+0xa7c>
 80106ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80106ae:	6833      	ldr	r3, [r6, #0]
 80106b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80106b2:	17d2      	asrs	r2, r2, #31
 80106b4:	e9c3 1200 	strd	r1, r2, [r3]
 80106b8:	3604      	adds	r6, #4
 80106ba:	e734      	b.n	8010526 <_vfprintf_r+0x8e6>
 80106bc:	06e8      	lsls	r0, r5, #27
 80106be:	d503      	bpl.n	80106c8 <_vfprintf_r+0xa88>
 80106c0:	6833      	ldr	r3, [r6, #0]
 80106c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80106c4:	601a      	str	r2, [r3, #0]
 80106c6:	e7f7      	b.n	80106b8 <_vfprintf_r+0xa78>
 80106c8:	0669      	lsls	r1, r5, #25
 80106ca:	d503      	bpl.n	80106d4 <_vfprintf_r+0xa94>
 80106cc:	6833      	ldr	r3, [r6, #0]
 80106ce:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80106d0:	801a      	strh	r2, [r3, #0]
 80106d2:	e7f1      	b.n	80106b8 <_vfprintf_r+0xa78>
 80106d4:	05aa      	lsls	r2, r5, #22
 80106d6:	d5f3      	bpl.n	80106c0 <_vfprintf_r+0xa80>
 80106d8:	6833      	ldr	r3, [r6, #0]
 80106da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80106dc:	701a      	strb	r2, [r3, #0]
 80106de:	e7eb      	b.n	80106b8 <_vfprintf_r+0xa78>
 80106e0:	f045 0510 	orr.w	r5, r5, #16
 80106e4:	f015 0320 	ands.w	r3, r5, #32
 80106e8:	d020      	beq.n	801072c <_vfprintf_r+0xaec>
 80106ea:	3607      	adds	r6, #7
 80106ec:	f026 0307 	bic.w	r3, r6, #7
 80106f0:	461a      	mov	r2, r3
 80106f2:	685f      	ldr	r7, [r3, #4]
 80106f4:	f852 6b08 	ldr.w	r6, [r2], #8
 80106f8:	9207      	str	r2, [sp, #28]
 80106fa:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80106fe:	2300      	movs	r3, #0
 8010700:	2200      	movs	r2, #0
 8010702:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8010706:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801070a:	f000 8491 	beq.w	8011030 <_vfprintf_r+0x13f0>
 801070e:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8010712:	9208      	str	r2, [sp, #32]
 8010714:	ea56 0207 	orrs.w	r2, r6, r7
 8010718:	f040 848f 	bne.w	801103a <_vfprintf_r+0x13fa>
 801071c:	f1b9 0f00 	cmp.w	r9, #0
 8010720:	f000 80db 	beq.w	80108da <_vfprintf_r+0xc9a>
 8010724:	2b01      	cmp	r3, #1
 8010726:	f040 848b 	bne.w	8011040 <_vfprintf_r+0x1400>
 801072a:	e083      	b.n	8010834 <_vfprintf_r+0xbf4>
 801072c:	4632      	mov	r2, r6
 801072e:	f015 0710 	ands.w	r7, r5, #16
 8010732:	f852 6b04 	ldr.w	r6, [r2], #4
 8010736:	9207      	str	r2, [sp, #28]
 8010738:	d001      	beq.n	801073e <_vfprintf_r+0xafe>
 801073a:	461f      	mov	r7, r3
 801073c:	e7dd      	b.n	80106fa <_vfprintf_r+0xaba>
 801073e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8010742:	d001      	beq.n	8010748 <_vfprintf_r+0xb08>
 8010744:	b2b6      	uxth	r6, r6
 8010746:	e7d8      	b.n	80106fa <_vfprintf_r+0xaba>
 8010748:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801074c:	d0d5      	beq.n	80106fa <_vfprintf_r+0xaba>
 801074e:	b2f6      	uxtb	r6, r6
 8010750:	e7f3      	b.n	801073a <_vfprintf_r+0xafa>
 8010752:	4633      	mov	r3, r6
 8010754:	2278      	movs	r2, #120	@ 0x78
 8010756:	f853 6b04 	ldr.w	r6, [r3], #4
 801075a:	9307      	str	r3, [sp, #28]
 801075c:	f647 0330 	movw	r3, #30768	@ 0x7830
 8010760:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8010764:	4b93      	ldr	r3, [pc, #588]	@ (80109b4 <_vfprintf_r+0xd74>)
 8010766:	9319      	str	r3, [sp, #100]	@ 0x64
 8010768:	2700      	movs	r7, #0
 801076a:	f045 0502 	orr.w	r5, r5, #2
 801076e:	2302      	movs	r3, #2
 8010770:	9206      	str	r2, [sp, #24]
 8010772:	e7c5      	b.n	8010700 <_vfprintf_r+0xac0>
 8010774:	4633      	mov	r3, r6
 8010776:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801077a:	f853 8b04 	ldr.w	r8, [r3], #4
 801077e:	9307      	str	r3, [sp, #28]
 8010780:	f04f 0600 	mov.w	r6, #0
 8010784:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8010788:	d00f      	beq.n	80107aa <_vfprintf_r+0xb6a>
 801078a:	464a      	mov	r2, r9
 801078c:	4631      	mov	r1, r6
 801078e:	4640      	mov	r0, r8
 8010790:	f7ef fd46 	bl	8000220 <memchr>
 8010794:	4682      	mov	sl, r0
 8010796:	2800      	cmp	r0, #0
 8010798:	f43f ac7a 	beq.w	8010090 <_vfprintf_r+0x450>
 801079c:	eba0 0908 	sub.w	r9, r0, r8
 80107a0:	46b2      	mov	sl, r6
 80107a2:	9610      	str	r6, [sp, #64]	@ 0x40
 80107a4:	4637      	mov	r7, r6
 80107a6:	9608      	str	r6, [sp, #32]
 80107a8:	e5ec      	b.n	8010384 <_vfprintf_r+0x744>
 80107aa:	4640      	mov	r0, r8
 80107ac:	f7ef fd30 	bl	8000210 <strlen>
 80107b0:	46b2      	mov	sl, r6
 80107b2:	4681      	mov	r9, r0
 80107b4:	e46c      	b.n	8010090 <_vfprintf_r+0x450>
 80107b6:	f045 0510 	orr.w	r5, r5, #16
 80107ba:	f015 0320 	ands.w	r3, r5, #32
 80107be:	d009      	beq.n	80107d4 <_vfprintf_r+0xb94>
 80107c0:	3607      	adds	r6, #7
 80107c2:	f026 0307 	bic.w	r3, r6, #7
 80107c6:	461a      	mov	r2, r3
 80107c8:	685f      	ldr	r7, [r3, #4]
 80107ca:	f852 6b08 	ldr.w	r6, [r2], #8
 80107ce:	9207      	str	r2, [sp, #28]
 80107d0:	2301      	movs	r3, #1
 80107d2:	e795      	b.n	8010700 <_vfprintf_r+0xac0>
 80107d4:	4632      	mov	r2, r6
 80107d6:	f015 0710 	ands.w	r7, r5, #16
 80107da:	f852 6b04 	ldr.w	r6, [r2], #4
 80107de:	9207      	str	r2, [sp, #28]
 80107e0:	d001      	beq.n	80107e6 <_vfprintf_r+0xba6>
 80107e2:	461f      	mov	r7, r3
 80107e4:	e7f4      	b.n	80107d0 <_vfprintf_r+0xb90>
 80107e6:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 80107ea:	d001      	beq.n	80107f0 <_vfprintf_r+0xbb0>
 80107ec:	b2b6      	uxth	r6, r6
 80107ee:	e7ef      	b.n	80107d0 <_vfprintf_r+0xb90>
 80107f0:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 80107f4:	d0ec      	beq.n	80107d0 <_vfprintf_r+0xb90>
 80107f6:	b2f6      	uxtb	r6, r6
 80107f8:	e7f3      	b.n	80107e2 <_vfprintf_r+0xba2>
 80107fa:	4b6f      	ldr	r3, [pc, #444]	@ (80109b8 <_vfprintf_r+0xd78>)
 80107fc:	f7ff bb33 	b.w	800fe66 <_vfprintf_r+0x226>
 8010800:	4632      	mov	r2, r6
 8010802:	f015 0710 	ands.w	r7, r5, #16
 8010806:	f852 6b04 	ldr.w	r6, [r2], #4
 801080a:	9207      	str	r2, [sp, #28]
 801080c:	d002      	beq.n	8010814 <_vfprintf_r+0xbd4>
 801080e:	461f      	mov	r7, r3
 8010810:	f7ff bb36 	b.w	800fe80 <_vfprintf_r+0x240>
 8010814:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8010818:	d002      	beq.n	8010820 <_vfprintf_r+0xbe0>
 801081a:	b2b6      	uxth	r6, r6
 801081c:	f7ff bb30 	b.w	800fe80 <_vfprintf_r+0x240>
 8010820:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8010824:	f43f ab2c 	beq.w	800fe80 <_vfprintf_r+0x240>
 8010828:	b2f6      	uxtb	r6, r6
 801082a:	e7f0      	b.n	801080e <_vfprintf_r+0xbce>
 801082c:	2e0a      	cmp	r6, #10
 801082e:	f177 0300 	sbcs.w	r3, r7, #0
 8010832:	d207      	bcs.n	8010844 <_vfprintf_r+0xc04>
 8010834:	3630      	adds	r6, #48	@ 0x30
 8010836:	b2f6      	uxtb	r6, r6
 8010838:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 801083c:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 8010840:	f000 bc1a 	b.w	8011078 <_vfprintf_r+0x1438>
 8010844:	2300      	movs	r3, #0
 8010846:	9304      	str	r3, [sp, #16]
 8010848:	9b08      	ldr	r3, [sp, #32]
 801084a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801084e:	ad52      	add	r5, sp, #328	@ 0x148
 8010850:	9310      	str	r3, [sp, #64]	@ 0x40
 8010852:	220a      	movs	r2, #10
 8010854:	2300      	movs	r3, #0
 8010856:	4630      	mov	r0, r6
 8010858:	4639      	mov	r1, r7
 801085a:	f7f0 f9c5 	bl	8000be8 <__aeabi_uldivmod>
 801085e:	9b04      	ldr	r3, [sp, #16]
 8010860:	9011      	str	r0, [sp, #68]	@ 0x44
 8010862:	3301      	adds	r3, #1
 8010864:	9304      	str	r3, [sp, #16]
 8010866:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010868:	3230      	adds	r2, #48	@ 0x30
 801086a:	468a      	mov	sl, r1
 801086c:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 8010870:	f805 2c01 	strb.w	r2, [r5, #-1]
 8010874:	b1d3      	cbz	r3, 80108ac <_vfprintf_r+0xc6c>
 8010876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010878:	9a04      	ldr	r2, [sp, #16]
 801087a:	781b      	ldrb	r3, [r3, #0]
 801087c:	429a      	cmp	r2, r3
 801087e:	d115      	bne.n	80108ac <_vfprintf_r+0xc6c>
 8010880:	2aff      	cmp	r2, #255	@ 0xff
 8010882:	d013      	beq.n	80108ac <_vfprintf_r+0xc6c>
 8010884:	2e0a      	cmp	r6, #10
 8010886:	f177 0300 	sbcs.w	r3, r7, #0
 801088a:	d30f      	bcc.n	80108ac <_vfprintf_r+0xc6c>
 801088c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801088e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8010890:	eba8 0803 	sub.w	r8, r8, r3
 8010894:	461a      	mov	r2, r3
 8010896:	4640      	mov	r0, r8
 8010898:	f001 fc48 	bl	801212c <strncpy>
 801089c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801089e:	785b      	ldrb	r3, [r3, #1]
 80108a0:	b11b      	cbz	r3, 80108aa <_vfprintf_r+0xc6a>
 80108a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108a4:	3301      	adds	r3, #1
 80108a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80108a8:	2300      	movs	r3, #0
 80108aa:	9304      	str	r3, [sp, #16]
 80108ac:	2e0a      	cmp	r6, #10
 80108ae:	f177 0700 	sbcs.w	r7, r7, #0
 80108b2:	f0c0 83e1 	bcc.w	8011078 <_vfprintf_r+0x1438>
 80108b6:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80108b8:	4657      	mov	r7, sl
 80108ba:	4645      	mov	r5, r8
 80108bc:	e7c9      	b.n	8010852 <_vfprintf_r+0xc12>
 80108be:	f006 030f 	and.w	r3, r6, #15
 80108c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80108c4:	0936      	lsrs	r6, r6, #4
 80108c6:	5cd3      	ldrb	r3, [r2, r3]
 80108c8:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80108cc:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 80108d0:	093f      	lsrs	r7, r7, #4
 80108d2:	ea56 0307 	orrs.w	r3, r6, r7
 80108d6:	d1f2      	bne.n	80108be <_vfprintf_r+0xc7e>
 80108d8:	e3ce      	b.n	8011078 <_vfprintf_r+0x1438>
 80108da:	b91b      	cbnz	r3, 80108e4 <_vfprintf_r+0xca4>
 80108dc:	07ed      	lsls	r5, r5, #31
 80108de:	d501      	bpl.n	80108e4 <_vfprintf_r+0xca4>
 80108e0:	2630      	movs	r6, #48	@ 0x30
 80108e2:	e7a9      	b.n	8010838 <_vfprintf_r+0xbf8>
 80108e4:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 80108e8:	e3c6      	b.n	8011078 <_vfprintf_r+0x1438>
 80108ea:	9b06      	ldr	r3, [sp, #24]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	f000 8390 	beq.w	8011012 <_vfprintf_r+0x13d2>
 80108f2:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 80108f6:	2300      	movs	r3, #0
 80108f8:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80108fc:	9607      	str	r6, [sp, #28]
 80108fe:	f7ff bb5c 	b.w	800ffba <_vfprintf_r+0x37a>
 8010902:	2010      	movs	r0, #16
 8010904:	4403      	add	r3, r0
 8010906:	2a07      	cmp	r2, #7
 8010908:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801090c:	6060      	str	r0, [r4, #4]
 801090e:	dd08      	ble.n	8010922 <_vfprintf_r+0xce2>
 8010910:	9803      	ldr	r0, [sp, #12]
 8010912:	aa26      	add	r2, sp, #152	@ 0x98
 8010914:	4659      	mov	r1, fp
 8010916:	f000 fbff 	bl	8011118 <__sprint_r>
 801091a:	2800      	cmp	r0, #0
 801091c:	f040 8357 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010920:	a929      	add	r1, sp, #164	@ 0xa4
 8010922:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010924:	3b10      	subs	r3, #16
 8010926:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010928:	460c      	mov	r4, r1
 801092a:	e547      	b.n	80103bc <_vfprintf_r+0x77c>
 801092c:	460c      	mov	r4, r1
 801092e:	e562      	b.n	80103f6 <_vfprintf_r+0x7b6>
 8010930:	9803      	ldr	r0, [sp, #12]
 8010932:	aa26      	add	r2, sp, #152	@ 0x98
 8010934:	4659      	mov	r1, fp
 8010936:	f000 fbef 	bl	8011118 <__sprint_r>
 801093a:	2800      	cmp	r0, #0
 801093c:	f040 8347 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010940:	ac29      	add	r4, sp, #164	@ 0xa4
 8010942:	e56a      	b.n	801041a <_vfprintf_r+0x7da>
 8010944:	9803      	ldr	r0, [sp, #12]
 8010946:	aa26      	add	r2, sp, #152	@ 0x98
 8010948:	4659      	mov	r1, fp
 801094a:	f000 fbe5 	bl	8011118 <__sprint_r>
 801094e:	2800      	cmp	r0, #0
 8010950:	f040 833d 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010954:	ac29      	add	r4, sp, #164	@ 0xa4
 8010956:	e570      	b.n	801043a <_vfprintf_r+0x7fa>
 8010958:	2010      	movs	r0, #16
 801095a:	4403      	add	r3, r0
 801095c:	2a07      	cmp	r2, #7
 801095e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8010962:	6060      	str	r0, [r4, #4]
 8010964:	dd08      	ble.n	8010978 <_vfprintf_r+0xd38>
 8010966:	9803      	ldr	r0, [sp, #12]
 8010968:	aa26      	add	r2, sp, #152	@ 0x98
 801096a:	4659      	mov	r1, fp
 801096c:	f000 fbd4 	bl	8011118 <__sprint_r>
 8010970:	2800      	cmp	r0, #0
 8010972:	f040 832c 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010976:	a929      	add	r1, sp, #164	@ 0xa4
 8010978:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801097a:	3b10      	subs	r3, #16
 801097c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801097e:	460c      	mov	r4, r1
 8010980:	e564      	b.n	801044c <_vfprintf_r+0x80c>
 8010982:	460c      	mov	r4, r1
 8010984:	e57f      	b.n	8010486 <_vfprintf_r+0x846>
 8010986:	2010      	movs	r0, #16
 8010988:	4403      	add	r3, r0
 801098a:	2a07      	cmp	r2, #7
 801098c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8010990:	6060      	str	r0, [r4, #4]
 8010992:	dd08      	ble.n	80109a6 <_vfprintf_r+0xd66>
 8010994:	9803      	ldr	r0, [sp, #12]
 8010996:	aa26      	add	r2, sp, #152	@ 0x98
 8010998:	4659      	mov	r1, fp
 801099a:	f000 fbbd 	bl	8011118 <__sprint_r>
 801099e:	2800      	cmp	r0, #0
 80109a0:	f040 8315 	bne.w	8010fce <_vfprintf_r+0x138e>
 80109a4:	a929      	add	r1, sp, #164	@ 0xa4
 80109a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80109a8:	3b10      	subs	r3, #16
 80109aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80109ac:	460c      	mov	r4, r1
 80109ae:	e570      	b.n	8010492 <_vfprintf_r+0x852>
 80109b0:	460c      	mov	r4, r1
 80109b2:	e58b      	b.n	80104cc <_vfprintf_r+0x88c>
 80109b4:	08016877 	.word	0x08016877
 80109b8:	08016888 	.word	0x08016888
 80109bc:	9b06      	ldr	r3, [sp, #24]
 80109be:	2b65      	cmp	r3, #101	@ 0x65
 80109c0:	f340 8245 	ble.w	8010e4e <_vfprintf_r+0x120e>
 80109c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80109c8:	2200      	movs	r2, #0
 80109ca:	2300      	movs	r3, #0
 80109cc:	f7f0 f89c 	bl	8000b08 <__aeabi_dcmpeq>
 80109d0:	2800      	cmp	r0, #0
 80109d2:	d06a      	beq.n	8010aaa <_vfprintf_r+0xe6a>
 80109d4:	4b73      	ldr	r3, [pc, #460]	@ (8010ba4 <_vfprintf_r+0xf64>)
 80109d6:	6023      	str	r3, [r4, #0]
 80109d8:	2301      	movs	r3, #1
 80109da:	6063      	str	r3, [r4, #4]
 80109dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80109de:	3301      	adds	r3, #1
 80109e0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80109e2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80109e4:	3301      	adds	r3, #1
 80109e6:	2b07      	cmp	r3, #7
 80109e8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80109ea:	dc37      	bgt.n	8010a5c <_vfprintf_r+0xe1c>
 80109ec:	3408      	adds	r4, #8
 80109ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80109f0:	9a04      	ldr	r2, [sp, #16]
 80109f2:	4293      	cmp	r3, r2
 80109f4:	db02      	blt.n	80109fc <_vfprintf_r+0xdbc>
 80109f6:	07e9      	lsls	r1, r5, #31
 80109f8:	f57f ad78 	bpl.w	80104ec <_vfprintf_r+0x8ac>
 80109fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80109fe:	6023      	str	r3, [r4, #0]
 8010a00:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a02:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010a04:	6063      	str	r3, [r4, #4]
 8010a06:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010a08:	4413      	add	r3, r2
 8010a0a:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010a0c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010a0e:	3301      	adds	r3, #1
 8010a10:	2b07      	cmp	r3, #7
 8010a12:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010a14:	dc2c      	bgt.n	8010a70 <_vfprintf_r+0xe30>
 8010a16:	3408      	adds	r4, #8
 8010a18:	9b04      	ldr	r3, [sp, #16]
 8010a1a:	1e5e      	subs	r6, r3, #1
 8010a1c:	2e00      	cmp	r6, #0
 8010a1e:	f77f ad65 	ble.w	80104ec <_vfprintf_r+0x8ac>
 8010a22:	4f61      	ldr	r7, [pc, #388]	@ (8010ba8 <_vfprintf_r+0xf68>)
 8010a24:	f04f 0810 	mov.w	r8, #16
 8010a28:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8010a2c:	2e10      	cmp	r6, #16
 8010a2e:	f103 0301 	add.w	r3, r3, #1
 8010a32:	f104 0108 	add.w	r1, r4, #8
 8010a36:	6027      	str	r7, [r4, #0]
 8010a38:	dc24      	bgt.n	8010a84 <_vfprintf_r+0xe44>
 8010a3a:	6066      	str	r6, [r4, #4]
 8010a3c:	2b07      	cmp	r3, #7
 8010a3e:	4416      	add	r6, r2
 8010a40:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8010a44:	f340 82a2 	ble.w	8010f8c <_vfprintf_r+0x134c>
 8010a48:	9803      	ldr	r0, [sp, #12]
 8010a4a:	aa26      	add	r2, sp, #152	@ 0x98
 8010a4c:	4659      	mov	r1, fp
 8010a4e:	f000 fb63 	bl	8011118 <__sprint_r>
 8010a52:	2800      	cmp	r0, #0
 8010a54:	f040 82bb 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010a58:	ac29      	add	r4, sp, #164	@ 0xa4
 8010a5a:	e547      	b.n	80104ec <_vfprintf_r+0x8ac>
 8010a5c:	9803      	ldr	r0, [sp, #12]
 8010a5e:	aa26      	add	r2, sp, #152	@ 0x98
 8010a60:	4659      	mov	r1, fp
 8010a62:	f000 fb59 	bl	8011118 <__sprint_r>
 8010a66:	2800      	cmp	r0, #0
 8010a68:	f040 82b1 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010a6c:	ac29      	add	r4, sp, #164	@ 0xa4
 8010a6e:	e7be      	b.n	80109ee <_vfprintf_r+0xdae>
 8010a70:	9803      	ldr	r0, [sp, #12]
 8010a72:	aa26      	add	r2, sp, #152	@ 0x98
 8010a74:	4659      	mov	r1, fp
 8010a76:	f000 fb4f 	bl	8011118 <__sprint_r>
 8010a7a:	2800      	cmp	r0, #0
 8010a7c:	f040 82a7 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010a80:	ac29      	add	r4, sp, #164	@ 0xa4
 8010a82:	e7c9      	b.n	8010a18 <_vfprintf_r+0xdd8>
 8010a84:	3210      	adds	r2, #16
 8010a86:	2b07      	cmp	r3, #7
 8010a88:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8010a8c:	f8c4 8004 	str.w	r8, [r4, #4]
 8010a90:	dd08      	ble.n	8010aa4 <_vfprintf_r+0xe64>
 8010a92:	9803      	ldr	r0, [sp, #12]
 8010a94:	aa26      	add	r2, sp, #152	@ 0x98
 8010a96:	4659      	mov	r1, fp
 8010a98:	f000 fb3e 	bl	8011118 <__sprint_r>
 8010a9c:	2800      	cmp	r0, #0
 8010a9e:	f040 8296 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010aa2:	a929      	add	r1, sp, #164	@ 0xa4
 8010aa4:	3e10      	subs	r6, #16
 8010aa6:	460c      	mov	r4, r1
 8010aa8:	e7be      	b.n	8010a28 <_vfprintf_r+0xde8>
 8010aaa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	dc7d      	bgt.n	8010bac <_vfprintf_r+0xf6c>
 8010ab0:	4b3c      	ldr	r3, [pc, #240]	@ (8010ba4 <_vfprintf_r+0xf64>)
 8010ab2:	6023      	str	r3, [r4, #0]
 8010ab4:	2301      	movs	r3, #1
 8010ab6:	6063      	str	r3, [r4, #4]
 8010ab8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010aba:	3301      	adds	r3, #1
 8010abc:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010abe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010ac0:	3301      	adds	r3, #1
 8010ac2:	2b07      	cmp	r3, #7
 8010ac4:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010ac6:	dc46      	bgt.n	8010b56 <_vfprintf_r+0xf16>
 8010ac8:	3408      	adds	r4, #8
 8010aca:	9904      	ldr	r1, [sp, #16]
 8010acc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010ace:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8010ad0:	430b      	orrs	r3, r1
 8010ad2:	f005 0101 	and.w	r1, r5, #1
 8010ad6:	430b      	orrs	r3, r1
 8010ad8:	f43f ad08 	beq.w	80104ec <_vfprintf_r+0x8ac>
 8010adc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010ade:	6023      	str	r3, [r4, #0]
 8010ae0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ae2:	6063      	str	r3, [r4, #4]
 8010ae4:	441a      	add	r2, r3
 8010ae6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010ae8:	9228      	str	r2, [sp, #160]	@ 0xa0
 8010aea:	3301      	adds	r3, #1
 8010aec:	2b07      	cmp	r3, #7
 8010aee:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010af0:	dc3b      	bgt.n	8010b6a <_vfprintf_r+0xf2a>
 8010af2:	f104 0308 	add.w	r3, r4, #8
 8010af6:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010af8:	2e00      	cmp	r6, #0
 8010afa:	da1b      	bge.n	8010b34 <_vfprintf_r+0xef4>
 8010afc:	4f2a      	ldr	r7, [pc, #168]	@ (8010ba8 <_vfprintf_r+0xf68>)
 8010afe:	4276      	negs	r6, r6
 8010b00:	461a      	mov	r2, r3
 8010b02:	2410      	movs	r4, #16
 8010b04:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8010b08:	2e10      	cmp	r6, #16
 8010b0a:	f101 0101 	add.w	r1, r1, #1
 8010b0e:	f103 0308 	add.w	r3, r3, #8
 8010b12:	6017      	str	r7, [r2, #0]
 8010b14:	dc33      	bgt.n	8010b7e <_vfprintf_r+0xf3e>
 8010b16:	6056      	str	r6, [r2, #4]
 8010b18:	2907      	cmp	r1, #7
 8010b1a:	4406      	add	r6, r0
 8010b1c:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 8010b20:	dd08      	ble.n	8010b34 <_vfprintf_r+0xef4>
 8010b22:	9803      	ldr	r0, [sp, #12]
 8010b24:	aa26      	add	r2, sp, #152	@ 0x98
 8010b26:	4659      	mov	r1, fp
 8010b28:	f000 faf6 	bl	8011118 <__sprint_r>
 8010b2c:	2800      	cmp	r0, #0
 8010b2e:	f040 824e 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010b32:	ab29      	add	r3, sp, #164	@ 0xa4
 8010b34:	9a04      	ldr	r2, [sp, #16]
 8010b36:	9904      	ldr	r1, [sp, #16]
 8010b38:	605a      	str	r2, [r3, #4]
 8010b3a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8010b3c:	f8c3 8000 	str.w	r8, [r3]
 8010b40:	440a      	add	r2, r1
 8010b42:	9228      	str	r2, [sp, #160]	@ 0xa0
 8010b44:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8010b46:	3201      	adds	r2, #1
 8010b48:	2a07      	cmp	r2, #7
 8010b4a:	9227      	str	r2, [sp, #156]	@ 0x9c
 8010b4c:	f73f af7c 	bgt.w	8010a48 <_vfprintf_r+0xe08>
 8010b50:	f103 0408 	add.w	r4, r3, #8
 8010b54:	e4ca      	b.n	80104ec <_vfprintf_r+0x8ac>
 8010b56:	9803      	ldr	r0, [sp, #12]
 8010b58:	aa26      	add	r2, sp, #152	@ 0x98
 8010b5a:	4659      	mov	r1, fp
 8010b5c:	f000 fadc 	bl	8011118 <__sprint_r>
 8010b60:	2800      	cmp	r0, #0
 8010b62:	f040 8234 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010b66:	ac29      	add	r4, sp, #164	@ 0xa4
 8010b68:	e7af      	b.n	8010aca <_vfprintf_r+0xe8a>
 8010b6a:	9803      	ldr	r0, [sp, #12]
 8010b6c:	aa26      	add	r2, sp, #152	@ 0x98
 8010b6e:	4659      	mov	r1, fp
 8010b70:	f000 fad2 	bl	8011118 <__sprint_r>
 8010b74:	2800      	cmp	r0, #0
 8010b76:	f040 822a 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010b7a:	ab29      	add	r3, sp, #164	@ 0xa4
 8010b7c:	e7bb      	b.n	8010af6 <_vfprintf_r+0xeb6>
 8010b7e:	3010      	adds	r0, #16
 8010b80:	2907      	cmp	r1, #7
 8010b82:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8010b86:	6054      	str	r4, [r2, #4]
 8010b88:	dd08      	ble.n	8010b9c <_vfprintf_r+0xf5c>
 8010b8a:	9803      	ldr	r0, [sp, #12]
 8010b8c:	aa26      	add	r2, sp, #152	@ 0x98
 8010b8e:	4659      	mov	r1, fp
 8010b90:	f000 fac2 	bl	8011118 <__sprint_r>
 8010b94:	2800      	cmp	r0, #0
 8010b96:	f040 821a 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010b9a:	ab29      	add	r3, sp, #164	@ 0xa4
 8010b9c:	3e10      	subs	r6, #16
 8010b9e:	461a      	mov	r2, r3
 8010ba0:	e7b0      	b.n	8010b04 <_vfprintf_r+0xec4>
 8010ba2:	bf00      	nop
 8010ba4:	08016899 	.word	0x08016899
 8010ba8:	0801689b 	.word	0x0801689b
 8010bac:	9b04      	ldr	r3, [sp, #16]
 8010bae:	4443      	add	r3, r8
 8010bb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010bb2:	9b04      	ldr	r3, [sp, #16]
 8010bb4:	42b3      	cmp	r3, r6
 8010bb6:	bfa8      	it	ge
 8010bb8:	4633      	movge	r3, r6
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	4699      	mov	r9, r3
 8010bbe:	dd0b      	ble.n	8010bd8 <_vfprintf_r+0xf98>
 8010bc0:	e9c4 8300 	strd	r8, r3, [r4]
 8010bc4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010bc6:	444b      	add	r3, r9
 8010bc8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010bca:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010bcc:	3301      	adds	r3, #1
 8010bce:	2b07      	cmp	r3, #7
 8010bd0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010bd2:	f300 8089 	bgt.w	8010ce8 <_vfprintf_r+0x10a8>
 8010bd6:	3408      	adds	r4, #8
 8010bd8:	f1b9 0f00 	cmp.w	r9, #0
 8010bdc:	bfac      	ite	ge
 8010bde:	eba6 0309 	subge.w	r3, r6, r9
 8010be2:	4633      	movlt	r3, r6
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	9306      	str	r3, [sp, #24]
 8010be8:	dd1c      	ble.n	8010c24 <_vfprintf_r+0xfe4>
 8010bea:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 8010f50 <_vfprintf_r+0x1310>
 8010bee:	9806      	ldr	r0, [sp, #24]
 8010bf0:	f8c4 9000 	str.w	r9, [r4]
 8010bf4:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8010bf8:	2810      	cmp	r0, #16
 8010bfa:	f102 0201 	add.w	r2, r2, #1
 8010bfe:	f104 0108 	add.w	r1, r4, #8
 8010c02:	dc7b      	bgt.n	8010cfc <_vfprintf_r+0x10bc>
 8010c04:	4403      	add	r3, r0
 8010c06:	2a07      	cmp	r2, #7
 8010c08:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8010c0c:	6060      	str	r0, [r4, #4]
 8010c0e:	f340 808a 	ble.w	8010d26 <_vfprintf_r+0x10e6>
 8010c12:	9803      	ldr	r0, [sp, #12]
 8010c14:	aa26      	add	r2, sp, #152	@ 0x98
 8010c16:	4659      	mov	r1, fp
 8010c18:	f000 fa7e 	bl	8011118 <__sprint_r>
 8010c1c:	2800      	cmp	r0, #0
 8010c1e:	f040 81d6 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010c22:	ac29      	add	r4, sp, #164	@ 0xa4
 8010c24:	056a      	lsls	r2, r5, #21
 8010c26:	44b0      	add	r8, r6
 8010c28:	d508      	bpl.n	8010c3c <_vfprintf_r+0xffc>
 8010c2a:	9b08      	ldr	r3, [sp, #32]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d17c      	bne.n	8010d2a <_vfprintf_r+0x10ea>
 8010c30:	2f00      	cmp	r7, #0
 8010c32:	d17c      	bne.n	8010d2e <_vfprintf_r+0x10ee>
 8010c34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010c36:	4598      	cmp	r8, r3
 8010c38:	bf28      	it	cs
 8010c3a:	4698      	movcs	r8, r3
 8010c3c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010c3e:	9a04      	ldr	r2, [sp, #16]
 8010c40:	4293      	cmp	r3, r2
 8010c42:	db01      	blt.n	8010c48 <_vfprintf_r+0x1008>
 8010c44:	07eb      	lsls	r3, r5, #31
 8010c46:	d50e      	bpl.n	8010c66 <_vfprintf_r+0x1026>
 8010c48:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010c4a:	6023      	str	r3, [r4, #0]
 8010c4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010c4e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010c50:	6063      	str	r3, [r4, #4]
 8010c52:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010c54:	4413      	add	r3, r2
 8010c56:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010c58:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010c5a:	3301      	adds	r3, #1
 8010c5c:	2b07      	cmp	r3, #7
 8010c5e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010c60:	f300 80e1 	bgt.w	8010e26 <_vfprintf_r+0x11e6>
 8010c64:	3408      	adds	r4, #8
 8010c66:	9b04      	ldr	r3, [sp, #16]
 8010c68:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8010c6a:	1bdf      	subs	r7, r3, r7
 8010c6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010c6e:	eba3 0308 	sub.w	r3, r3, r8
 8010c72:	429f      	cmp	r7, r3
 8010c74:	bfa8      	it	ge
 8010c76:	461f      	movge	r7, r3
 8010c78:	2f00      	cmp	r7, #0
 8010c7a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010c7c:	dd0a      	ble.n	8010c94 <_vfprintf_r+0x1054>
 8010c7e:	443b      	add	r3, r7
 8010c80:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010c82:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010c84:	3301      	adds	r3, #1
 8010c86:	2b07      	cmp	r3, #7
 8010c88:	e9c4 8700 	strd	r8, r7, [r4]
 8010c8c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010c8e:	f300 80d4 	bgt.w	8010e3a <_vfprintf_r+0x11fa>
 8010c92:	3408      	adds	r4, #8
 8010c94:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010c96:	9b04      	ldr	r3, [sp, #16]
 8010c98:	2f00      	cmp	r7, #0
 8010c9a:	eba3 0606 	sub.w	r6, r3, r6
 8010c9e:	bfa8      	it	ge
 8010ca0:	1bf6      	subge	r6, r6, r7
 8010ca2:	2e00      	cmp	r6, #0
 8010ca4:	f77f ac22 	ble.w	80104ec <_vfprintf_r+0x8ac>
 8010ca8:	4fa9      	ldr	r7, [pc, #676]	@ (8010f50 <_vfprintf_r+0x1310>)
 8010caa:	f04f 0810 	mov.w	r8, #16
 8010cae:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8010cb2:	2e10      	cmp	r6, #16
 8010cb4:	f103 0301 	add.w	r3, r3, #1
 8010cb8:	f104 0108 	add.w	r1, r4, #8
 8010cbc:	6027      	str	r7, [r4, #0]
 8010cbe:	f77f aebc 	ble.w	8010a3a <_vfprintf_r+0xdfa>
 8010cc2:	3210      	adds	r2, #16
 8010cc4:	2b07      	cmp	r3, #7
 8010cc6:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8010cca:	f8c4 8004 	str.w	r8, [r4, #4]
 8010cce:	dd08      	ble.n	8010ce2 <_vfprintf_r+0x10a2>
 8010cd0:	9803      	ldr	r0, [sp, #12]
 8010cd2:	aa26      	add	r2, sp, #152	@ 0x98
 8010cd4:	4659      	mov	r1, fp
 8010cd6:	f000 fa1f 	bl	8011118 <__sprint_r>
 8010cda:	2800      	cmp	r0, #0
 8010cdc:	f040 8177 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010ce0:	a929      	add	r1, sp, #164	@ 0xa4
 8010ce2:	3e10      	subs	r6, #16
 8010ce4:	460c      	mov	r4, r1
 8010ce6:	e7e2      	b.n	8010cae <_vfprintf_r+0x106e>
 8010ce8:	9803      	ldr	r0, [sp, #12]
 8010cea:	aa26      	add	r2, sp, #152	@ 0x98
 8010cec:	4659      	mov	r1, fp
 8010cee:	f000 fa13 	bl	8011118 <__sprint_r>
 8010cf2:	2800      	cmp	r0, #0
 8010cf4:	f040 816b 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010cf8:	ac29      	add	r4, sp, #164	@ 0xa4
 8010cfa:	e76d      	b.n	8010bd8 <_vfprintf_r+0xf98>
 8010cfc:	2010      	movs	r0, #16
 8010cfe:	4403      	add	r3, r0
 8010d00:	2a07      	cmp	r2, #7
 8010d02:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8010d06:	6060      	str	r0, [r4, #4]
 8010d08:	dd08      	ble.n	8010d1c <_vfprintf_r+0x10dc>
 8010d0a:	9803      	ldr	r0, [sp, #12]
 8010d0c:	aa26      	add	r2, sp, #152	@ 0x98
 8010d0e:	4659      	mov	r1, fp
 8010d10:	f000 fa02 	bl	8011118 <__sprint_r>
 8010d14:	2800      	cmp	r0, #0
 8010d16:	f040 815a 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010d1a:	a929      	add	r1, sp, #164	@ 0xa4
 8010d1c:	9b06      	ldr	r3, [sp, #24]
 8010d1e:	3b10      	subs	r3, #16
 8010d20:	9306      	str	r3, [sp, #24]
 8010d22:	460c      	mov	r4, r1
 8010d24:	e763      	b.n	8010bee <_vfprintf_r+0xfae>
 8010d26:	460c      	mov	r4, r1
 8010d28:	e77c      	b.n	8010c24 <_vfprintf_r+0xfe4>
 8010d2a:	2f00      	cmp	r7, #0
 8010d2c:	d04b      	beq.n	8010dc6 <_vfprintf_r+0x1186>
 8010d2e:	3f01      	subs	r7, #1
 8010d30:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010d32:	6023      	str	r3, [r4, #0]
 8010d34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010d36:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010d38:	6063      	str	r3, [r4, #4]
 8010d3a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010d3c:	4413      	add	r3, r2
 8010d3e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010d40:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010d42:	3301      	adds	r3, #1
 8010d44:	2b07      	cmp	r3, #7
 8010d46:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010d48:	dc44      	bgt.n	8010dd4 <_vfprintf_r+0x1194>
 8010d4a:	3408      	adds	r4, #8
 8010d4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d4e:	f893 9000 	ldrb.w	r9, [r3]
 8010d52:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010d54:	eba3 0308 	sub.w	r3, r3, r8
 8010d58:	4599      	cmp	r9, r3
 8010d5a:	bfa8      	it	ge
 8010d5c:	4699      	movge	r9, r3
 8010d5e:	f1b9 0f00 	cmp.w	r9, #0
 8010d62:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010d64:	dd09      	ble.n	8010d7a <_vfprintf_r+0x113a>
 8010d66:	444b      	add	r3, r9
 8010d68:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010d6a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010d6c:	3301      	adds	r3, #1
 8010d6e:	2b07      	cmp	r3, #7
 8010d70:	e9c4 8900 	strd	r8, r9, [r4]
 8010d74:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010d76:	dc37      	bgt.n	8010de8 <_vfprintf_r+0x11a8>
 8010d78:	3408      	adds	r4, #8
 8010d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d7c:	781e      	ldrb	r6, [r3, #0]
 8010d7e:	f1b9 0f00 	cmp.w	r9, #0
 8010d82:	bfa8      	it	ge
 8010d84:	eba6 0609 	subge.w	r6, r6, r9
 8010d88:	2e00      	cmp	r6, #0
 8010d8a:	dd18      	ble.n	8010dbe <_vfprintf_r+0x117e>
 8010d8c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8010d90:	486f      	ldr	r0, [pc, #444]	@ (8010f50 <_vfprintf_r+0x1310>)
 8010d92:	6020      	str	r0, [r4, #0]
 8010d94:	2e10      	cmp	r6, #16
 8010d96:	f103 0301 	add.w	r3, r3, #1
 8010d9a:	f104 0108 	add.w	r1, r4, #8
 8010d9e:	dc2d      	bgt.n	8010dfc <_vfprintf_r+0x11bc>
 8010da0:	6066      	str	r6, [r4, #4]
 8010da2:	2b07      	cmp	r3, #7
 8010da4:	4416      	add	r6, r2
 8010da6:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8010daa:	dd3a      	ble.n	8010e22 <_vfprintf_r+0x11e2>
 8010dac:	9803      	ldr	r0, [sp, #12]
 8010dae:	aa26      	add	r2, sp, #152	@ 0x98
 8010db0:	4659      	mov	r1, fp
 8010db2:	f000 f9b1 	bl	8011118 <__sprint_r>
 8010db6:	2800      	cmp	r0, #0
 8010db8:	f040 8109 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010dbc:	ac29      	add	r4, sp, #164	@ 0xa4
 8010dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010dc0:	781b      	ldrb	r3, [r3, #0]
 8010dc2:	4498      	add	r8, r3
 8010dc4:	e731      	b.n	8010c2a <_vfprintf_r+0xfea>
 8010dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010dc8:	3b01      	subs	r3, #1
 8010dca:	9309      	str	r3, [sp, #36]	@ 0x24
 8010dcc:	9b08      	ldr	r3, [sp, #32]
 8010dce:	3b01      	subs	r3, #1
 8010dd0:	9308      	str	r3, [sp, #32]
 8010dd2:	e7ad      	b.n	8010d30 <_vfprintf_r+0x10f0>
 8010dd4:	9803      	ldr	r0, [sp, #12]
 8010dd6:	aa26      	add	r2, sp, #152	@ 0x98
 8010dd8:	4659      	mov	r1, fp
 8010dda:	f000 f99d 	bl	8011118 <__sprint_r>
 8010dde:	2800      	cmp	r0, #0
 8010de0:	f040 80f5 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010de4:	ac29      	add	r4, sp, #164	@ 0xa4
 8010de6:	e7b1      	b.n	8010d4c <_vfprintf_r+0x110c>
 8010de8:	9803      	ldr	r0, [sp, #12]
 8010dea:	aa26      	add	r2, sp, #152	@ 0x98
 8010dec:	4659      	mov	r1, fp
 8010dee:	f000 f993 	bl	8011118 <__sprint_r>
 8010df2:	2800      	cmp	r0, #0
 8010df4:	f040 80eb 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010df8:	ac29      	add	r4, sp, #164	@ 0xa4
 8010dfa:	e7be      	b.n	8010d7a <_vfprintf_r+0x113a>
 8010dfc:	2010      	movs	r0, #16
 8010dfe:	4402      	add	r2, r0
 8010e00:	2b07      	cmp	r3, #7
 8010e02:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8010e06:	6060      	str	r0, [r4, #4]
 8010e08:	dd08      	ble.n	8010e1c <_vfprintf_r+0x11dc>
 8010e0a:	9803      	ldr	r0, [sp, #12]
 8010e0c:	aa26      	add	r2, sp, #152	@ 0x98
 8010e0e:	4659      	mov	r1, fp
 8010e10:	f000 f982 	bl	8011118 <__sprint_r>
 8010e14:	2800      	cmp	r0, #0
 8010e16:	f040 80da 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010e1a:	a929      	add	r1, sp, #164	@ 0xa4
 8010e1c:	3e10      	subs	r6, #16
 8010e1e:	460c      	mov	r4, r1
 8010e20:	e7b4      	b.n	8010d8c <_vfprintf_r+0x114c>
 8010e22:	460c      	mov	r4, r1
 8010e24:	e7cb      	b.n	8010dbe <_vfprintf_r+0x117e>
 8010e26:	9803      	ldr	r0, [sp, #12]
 8010e28:	aa26      	add	r2, sp, #152	@ 0x98
 8010e2a:	4659      	mov	r1, fp
 8010e2c:	f000 f974 	bl	8011118 <__sprint_r>
 8010e30:	2800      	cmp	r0, #0
 8010e32:	f040 80cc 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010e36:	ac29      	add	r4, sp, #164	@ 0xa4
 8010e38:	e715      	b.n	8010c66 <_vfprintf_r+0x1026>
 8010e3a:	9803      	ldr	r0, [sp, #12]
 8010e3c:	aa26      	add	r2, sp, #152	@ 0x98
 8010e3e:	4659      	mov	r1, fp
 8010e40:	f000 f96a 	bl	8011118 <__sprint_r>
 8010e44:	2800      	cmp	r0, #0
 8010e46:	f040 80c2 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010e4a:	ac29      	add	r4, sp, #164	@ 0xa4
 8010e4c:	e722      	b.n	8010c94 <_vfprintf_r+0x1054>
 8010e4e:	9904      	ldr	r1, [sp, #16]
 8010e50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010e52:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8010e54:	2901      	cmp	r1, #1
 8010e56:	f103 0301 	add.w	r3, r3, #1
 8010e5a:	f102 0201 	add.w	r2, r2, #1
 8010e5e:	f104 0608 	add.w	r6, r4, #8
 8010e62:	dc02      	bgt.n	8010e6a <_vfprintf_r+0x122a>
 8010e64:	07ef      	lsls	r7, r5, #31
 8010e66:	f140 8086 	bpl.w	8010f76 <_vfprintf_r+0x1336>
 8010e6a:	2101      	movs	r1, #1
 8010e6c:	2a07      	cmp	r2, #7
 8010e6e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8010e72:	f8c4 8000 	str.w	r8, [r4]
 8010e76:	6061      	str	r1, [r4, #4]
 8010e78:	dd08      	ble.n	8010e8c <_vfprintf_r+0x124c>
 8010e7a:	9803      	ldr	r0, [sp, #12]
 8010e7c:	aa26      	add	r2, sp, #152	@ 0x98
 8010e7e:	4659      	mov	r1, fp
 8010e80:	f000 f94a 	bl	8011118 <__sprint_r>
 8010e84:	2800      	cmp	r0, #0
 8010e86:	f040 80a2 	bne.w	8010fce <_vfprintf_r+0x138e>
 8010e8a:	ae29      	add	r6, sp, #164	@ 0xa4
 8010e8c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010e8e:	6033      	str	r3, [r6, #0]
 8010e90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010e92:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010e94:	6073      	str	r3, [r6, #4]
 8010e96:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010e98:	4413      	add	r3, r2
 8010e9a:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010e9c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010e9e:	3301      	adds	r3, #1
 8010ea0:	2b07      	cmp	r3, #7
 8010ea2:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010ea4:	dc33      	bgt.n	8010f0e <_vfprintf_r+0x12ce>
 8010ea6:	3608      	adds	r6, #8
 8010ea8:	9b04      	ldr	r3, [sp, #16]
 8010eaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010eae:	1e5c      	subs	r4, r3, #1
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 8010eb8:	f7ef fe26 	bl	8000b08 <__aeabi_dcmpeq>
 8010ebc:	2800      	cmp	r0, #0
 8010ebe:	d12f      	bne.n	8010f20 <_vfprintf_r+0x12e0>
 8010ec0:	f108 0201 	add.w	r2, r8, #1
 8010ec4:	e9c6 2400 	strd	r2, r4, [r6]
 8010ec8:	9a04      	ldr	r2, [sp, #16]
 8010eca:	f109 0301 	add.w	r3, r9, #1
 8010ece:	3f01      	subs	r7, #1
 8010ed0:	4417      	add	r7, r2
 8010ed2:	2b07      	cmp	r3, #7
 8010ed4:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 8010ed8:	dd56      	ble.n	8010f88 <_vfprintf_r+0x1348>
 8010eda:	9803      	ldr	r0, [sp, #12]
 8010edc:	aa26      	add	r2, sp, #152	@ 0x98
 8010ede:	4659      	mov	r1, fp
 8010ee0:	f000 f91a 	bl	8011118 <__sprint_r>
 8010ee4:	2800      	cmp	r0, #0
 8010ee6:	d172      	bne.n	8010fce <_vfprintf_r+0x138e>
 8010ee8:	ae29      	add	r6, sp, #164	@ 0xa4
 8010eea:	ab22      	add	r3, sp, #136	@ 0x88
 8010eec:	6033      	str	r3, [r6, #0]
 8010eee:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8010ef0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8010ef2:	6073      	str	r3, [r6, #4]
 8010ef4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010ef6:	4413      	add	r3, r2
 8010ef8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010efa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010efc:	3301      	adds	r3, #1
 8010efe:	2b07      	cmp	r3, #7
 8010f00:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010f02:	f73f ada1 	bgt.w	8010a48 <_vfprintf_r+0xe08>
 8010f06:	f106 0408 	add.w	r4, r6, #8
 8010f0a:	f7ff baef 	b.w	80104ec <_vfprintf_r+0x8ac>
 8010f0e:	9803      	ldr	r0, [sp, #12]
 8010f10:	aa26      	add	r2, sp, #152	@ 0x98
 8010f12:	4659      	mov	r1, fp
 8010f14:	f000 f900 	bl	8011118 <__sprint_r>
 8010f18:	2800      	cmp	r0, #0
 8010f1a:	d158      	bne.n	8010fce <_vfprintf_r+0x138e>
 8010f1c:	ae29      	add	r6, sp, #164	@ 0xa4
 8010f1e:	e7c3      	b.n	8010ea8 <_vfprintf_r+0x1268>
 8010f20:	9b04      	ldr	r3, [sp, #16]
 8010f22:	2b01      	cmp	r3, #1
 8010f24:	dde1      	ble.n	8010eea <_vfprintf_r+0x12aa>
 8010f26:	4f0a      	ldr	r7, [pc, #40]	@ (8010f50 <_vfprintf_r+0x1310>)
 8010f28:	f04f 0810 	mov.w	r8, #16
 8010f2c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8010f30:	2c10      	cmp	r4, #16
 8010f32:	f103 0301 	add.w	r3, r3, #1
 8010f36:	f106 0108 	add.w	r1, r6, #8
 8010f3a:	6037      	str	r7, [r6, #0]
 8010f3c:	dc0a      	bgt.n	8010f54 <_vfprintf_r+0x1314>
 8010f3e:	6074      	str	r4, [r6, #4]
 8010f40:	2b07      	cmp	r3, #7
 8010f42:	4414      	add	r4, r2
 8010f44:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 8010f48:	dcc7      	bgt.n	8010eda <_vfprintf_r+0x129a>
 8010f4a:	460e      	mov	r6, r1
 8010f4c:	e7cd      	b.n	8010eea <_vfprintf_r+0x12aa>
 8010f4e:	bf00      	nop
 8010f50:	0801689b 	.word	0x0801689b
 8010f54:	3210      	adds	r2, #16
 8010f56:	2b07      	cmp	r3, #7
 8010f58:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8010f5c:	f8c6 8004 	str.w	r8, [r6, #4]
 8010f60:	dd06      	ble.n	8010f70 <_vfprintf_r+0x1330>
 8010f62:	9803      	ldr	r0, [sp, #12]
 8010f64:	aa26      	add	r2, sp, #152	@ 0x98
 8010f66:	4659      	mov	r1, fp
 8010f68:	f000 f8d6 	bl	8011118 <__sprint_r>
 8010f6c:	bb78      	cbnz	r0, 8010fce <_vfprintf_r+0x138e>
 8010f6e:	a929      	add	r1, sp, #164	@ 0xa4
 8010f70:	3c10      	subs	r4, #16
 8010f72:	460e      	mov	r6, r1
 8010f74:	e7da      	b.n	8010f2c <_vfprintf_r+0x12ec>
 8010f76:	2101      	movs	r1, #1
 8010f78:	2a07      	cmp	r2, #7
 8010f7a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8010f7e:	f8c4 8000 	str.w	r8, [r4]
 8010f82:	6061      	str	r1, [r4, #4]
 8010f84:	ddb1      	ble.n	8010eea <_vfprintf_r+0x12aa>
 8010f86:	e7a8      	b.n	8010eda <_vfprintf_r+0x129a>
 8010f88:	3608      	adds	r6, #8
 8010f8a:	e7ae      	b.n	8010eea <_vfprintf_r+0x12aa>
 8010f8c:	460c      	mov	r4, r1
 8010f8e:	f7ff baad 	b.w	80104ec <_vfprintf_r+0x8ac>
 8010f92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f94:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010f96:	1a9d      	subs	r5, r3, r2
 8010f98:	2d00      	cmp	r5, #0
 8010f9a:	f77f aaaa 	ble.w	80104f2 <_vfprintf_r+0x8b2>
 8010f9e:	4e3d      	ldr	r6, [pc, #244]	@ (8011094 <_vfprintf_r+0x1454>)
 8010fa0:	2710      	movs	r7, #16
 8010fa2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8010fa6:	2d10      	cmp	r5, #16
 8010fa8:	f103 0301 	add.w	r3, r3, #1
 8010fac:	6026      	str	r6, [r4, #0]
 8010fae:	dc18      	bgt.n	8010fe2 <_vfprintf_r+0x13a2>
 8010fb0:	6065      	str	r5, [r4, #4]
 8010fb2:	2b07      	cmp	r3, #7
 8010fb4:	4415      	add	r5, r2
 8010fb6:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 8010fba:	f77f aa9a 	ble.w	80104f2 <_vfprintf_r+0x8b2>
 8010fbe:	9803      	ldr	r0, [sp, #12]
 8010fc0:	aa26      	add	r2, sp, #152	@ 0x98
 8010fc2:	4659      	mov	r1, fp
 8010fc4:	f000 f8a8 	bl	8011118 <__sprint_r>
 8010fc8:	2800      	cmp	r0, #0
 8010fca:	f43f aa92 	beq.w	80104f2 <_vfprintf_r+0x8b2>
 8010fce:	f1ba 0f00 	cmp.w	sl, #0
 8010fd2:	f43f a892 	beq.w	80100fa <_vfprintf_r+0x4ba>
 8010fd6:	9803      	ldr	r0, [sp, #12]
 8010fd8:	4651      	mov	r1, sl
 8010fda:	f7fe fb29 	bl	800f630 <_free_r>
 8010fde:	f7ff b88c 	b.w	80100fa <_vfprintf_r+0x4ba>
 8010fe2:	3210      	adds	r2, #16
 8010fe4:	2b07      	cmp	r3, #7
 8010fe6:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8010fea:	6067      	str	r7, [r4, #4]
 8010fec:	dc02      	bgt.n	8010ff4 <_vfprintf_r+0x13b4>
 8010fee:	3408      	adds	r4, #8
 8010ff0:	3d10      	subs	r5, #16
 8010ff2:	e7d6      	b.n	8010fa2 <_vfprintf_r+0x1362>
 8010ff4:	9803      	ldr	r0, [sp, #12]
 8010ff6:	aa26      	add	r2, sp, #152	@ 0x98
 8010ff8:	4659      	mov	r1, fp
 8010ffa:	f000 f88d 	bl	8011118 <__sprint_r>
 8010ffe:	2800      	cmp	r0, #0
 8011000:	d1e5      	bne.n	8010fce <_vfprintf_r+0x138e>
 8011002:	ac29      	add	r4, sp, #164	@ 0xa4
 8011004:	e7f4      	b.n	8010ff0 <_vfprintf_r+0x13b0>
 8011006:	9803      	ldr	r0, [sp, #12]
 8011008:	4651      	mov	r1, sl
 801100a:	f7fe fb11 	bl	800f630 <_free_r>
 801100e:	f7ff ba88 	b.w	8010522 <_vfprintf_r+0x8e2>
 8011012:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8011014:	b91b      	cbnz	r3, 801101e <_vfprintf_r+0x13de>
 8011016:	2300      	movs	r3, #0
 8011018:	9327      	str	r3, [sp, #156]	@ 0x9c
 801101a:	f7ff b86e 	b.w	80100fa <_vfprintf_r+0x4ba>
 801101e:	9803      	ldr	r0, [sp, #12]
 8011020:	aa26      	add	r2, sp, #152	@ 0x98
 8011022:	4659      	mov	r1, fp
 8011024:	f000 f878 	bl	8011118 <__sprint_r>
 8011028:	2800      	cmp	r0, #0
 801102a:	d0f4      	beq.n	8011016 <_vfprintf_r+0x13d6>
 801102c:	f7ff b865 	b.w	80100fa <_vfprintf_r+0x4ba>
 8011030:	ea56 0207 	orrs.w	r2, r6, r7
 8011034:	9508      	str	r5, [sp, #32]
 8011036:	f43f ab75 	beq.w	8010724 <_vfprintf_r+0xae4>
 801103a:	2b01      	cmp	r3, #1
 801103c:	f43f abf6 	beq.w	801082c <_vfprintf_r+0xbec>
 8011040:	2b02      	cmp	r3, #2
 8011042:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8011046:	f43f ac3a 	beq.w	80108be <_vfprintf_r+0xc7e>
 801104a:	f006 0307 	and.w	r3, r6, #7
 801104e:	08f6      	lsrs	r6, r6, #3
 8011050:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 8011054:	08ff      	lsrs	r7, r7, #3
 8011056:	3330      	adds	r3, #48	@ 0x30
 8011058:	ea56 0107 	orrs.w	r1, r6, r7
 801105c:	4642      	mov	r2, r8
 801105e:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8011062:	d1f2      	bne.n	801104a <_vfprintf_r+0x140a>
 8011064:	9908      	ldr	r1, [sp, #32]
 8011066:	07ce      	lsls	r6, r1, #31
 8011068:	d506      	bpl.n	8011078 <_vfprintf_r+0x1438>
 801106a:	2b30      	cmp	r3, #48	@ 0x30
 801106c:	d004      	beq.n	8011078 <_vfprintf_r+0x1438>
 801106e:	2330      	movs	r3, #48	@ 0x30
 8011070:	f808 3c01 	strb.w	r3, [r8, #-1]
 8011074:	f1a2 0802 	sub.w	r8, r2, #2
 8011078:	ab52      	add	r3, sp, #328	@ 0x148
 801107a:	9d08      	ldr	r5, [sp, #32]
 801107c:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8011080:	f04f 0a00 	mov.w	sl, #0
 8011084:	eba3 0908 	sub.w	r9, r3, r8
 8011088:	4657      	mov	r7, sl
 801108a:	f8cd a020 	str.w	sl, [sp, #32]
 801108e:	4656      	mov	r6, sl
 8011090:	f7ff b978 	b.w	8010384 <_vfprintf_r+0x744>
 8011094:	080168ab 	.word	0x080168ab

08011098 <__sbprintf>:
 8011098:	b5f0      	push	{r4, r5, r6, r7, lr}
 801109a:	461f      	mov	r7, r3
 801109c:	898b      	ldrh	r3, [r1, #12]
 801109e:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 80110a2:	f023 0302 	bic.w	r3, r3, #2
 80110a6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80110aa:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80110ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80110ae:	89cb      	ldrh	r3, [r1, #14]
 80110b0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80110b4:	69cb      	ldr	r3, [r1, #28]
 80110b6:	9307      	str	r3, [sp, #28]
 80110b8:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80110ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80110bc:	ab1a      	add	r3, sp, #104	@ 0x68
 80110be:	9300      	str	r3, [sp, #0]
 80110c0:	9304      	str	r3, [sp, #16]
 80110c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80110c6:	4615      	mov	r5, r2
 80110c8:	4606      	mov	r6, r0
 80110ca:	9302      	str	r3, [sp, #8]
 80110cc:	9305      	str	r3, [sp, #20]
 80110ce:	a816      	add	r0, sp, #88	@ 0x58
 80110d0:	2300      	movs	r3, #0
 80110d2:	460c      	mov	r4, r1
 80110d4:	9306      	str	r3, [sp, #24]
 80110d6:	f7fe fa33 	bl	800f540 <__retarget_lock_init_recursive>
 80110da:	462a      	mov	r2, r5
 80110dc:	463b      	mov	r3, r7
 80110de:	4669      	mov	r1, sp
 80110e0:	4630      	mov	r0, r6
 80110e2:	f7fe fdad 	bl	800fc40 <_vfprintf_r>
 80110e6:	1e05      	subs	r5, r0, #0
 80110e8:	db07      	blt.n	80110fa <__sbprintf+0x62>
 80110ea:	4669      	mov	r1, sp
 80110ec:	4630      	mov	r0, r6
 80110ee:	f000 fdeb 	bl	8011cc8 <_fflush_r>
 80110f2:	2800      	cmp	r0, #0
 80110f4:	bf18      	it	ne
 80110f6:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 80110fa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80110fe:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8011100:	065b      	lsls	r3, r3, #25
 8011102:	bf42      	ittt	mi
 8011104:	89a3      	ldrhmi	r3, [r4, #12]
 8011106:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 801110a:	81a3      	strhmi	r3, [r4, #12]
 801110c:	f7fe fa19 	bl	800f542 <__retarget_lock_close_recursive>
 8011110:	4628      	mov	r0, r5
 8011112:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8011116:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011118 <__sprint_r>:
 8011118:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801111c:	6893      	ldr	r3, [r2, #8]
 801111e:	4680      	mov	r8, r0
 8011120:	460e      	mov	r6, r1
 8011122:	4614      	mov	r4, r2
 8011124:	b343      	cbz	r3, 8011178 <__sprint_r+0x60>
 8011126:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8011128:	049d      	lsls	r5, r3, #18
 801112a:	d522      	bpl.n	8011172 <__sprint_r+0x5a>
 801112c:	6815      	ldr	r5, [r2, #0]
 801112e:	68a0      	ldr	r0, [r4, #8]
 8011130:	3508      	adds	r5, #8
 8011132:	b928      	cbnz	r0, 8011140 <__sprint_r+0x28>
 8011134:	2300      	movs	r3, #0
 8011136:	60a3      	str	r3, [r4, #8]
 8011138:	2300      	movs	r3, #0
 801113a:	6063      	str	r3, [r4, #4]
 801113c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011140:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 8011144:	f04f 0900 	mov.w	r9, #0
 8011148:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 801114c:	45ca      	cmp	sl, r9
 801114e:	dc05      	bgt.n	801115c <__sprint_r+0x44>
 8011150:	68a3      	ldr	r3, [r4, #8]
 8011152:	f027 0703 	bic.w	r7, r7, #3
 8011156:	1bdb      	subs	r3, r3, r7
 8011158:	60a3      	str	r3, [r4, #8]
 801115a:	e7e8      	b.n	801112e <__sprint_r+0x16>
 801115c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8011160:	4632      	mov	r2, r6
 8011162:	4640      	mov	r0, r8
 8011164:	f000 ffb9 	bl	80120da <_fputwc_r>
 8011168:	1c43      	adds	r3, r0, #1
 801116a:	d0e3      	beq.n	8011134 <__sprint_r+0x1c>
 801116c:	f109 0901 	add.w	r9, r9, #1
 8011170:	e7ec      	b.n	801114c <__sprint_r+0x34>
 8011172:	f000 fdcf 	bl	8011d14 <__sfvwrite_r>
 8011176:	e7dd      	b.n	8011134 <__sprint_r+0x1c>
 8011178:	4618      	mov	r0, r3
 801117a:	e7dd      	b.n	8011138 <__sprint_r+0x20>

0801117c <_vfiprintf_r>:
 801117c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011180:	b0bb      	sub	sp, #236	@ 0xec
 8011182:	460f      	mov	r7, r1
 8011184:	4693      	mov	fp, r2
 8011186:	461c      	mov	r4, r3
 8011188:	461d      	mov	r5, r3
 801118a:	9000      	str	r0, [sp, #0]
 801118c:	b118      	cbz	r0, 8011196 <_vfiprintf_r+0x1a>
 801118e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8011190:	b90b      	cbnz	r3, 8011196 <_vfiprintf_r+0x1a>
 8011192:	f7fe f859 	bl	800f248 <__sinit>
 8011196:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011198:	07db      	lsls	r3, r3, #31
 801119a:	d405      	bmi.n	80111a8 <_vfiprintf_r+0x2c>
 801119c:	89bb      	ldrh	r3, [r7, #12]
 801119e:	059e      	lsls	r6, r3, #22
 80111a0:	d402      	bmi.n	80111a8 <_vfiprintf_r+0x2c>
 80111a2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80111a4:	f7fe f9ce 	bl	800f544 <__retarget_lock_acquire_recursive>
 80111a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80111ac:	0498      	lsls	r0, r3, #18
 80111ae:	d406      	bmi.n	80111be <_vfiprintf_r+0x42>
 80111b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80111b4:	81bb      	strh	r3, [r7, #12]
 80111b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80111b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80111bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80111be:	89bb      	ldrh	r3, [r7, #12]
 80111c0:	0719      	lsls	r1, r3, #28
 80111c2:	d501      	bpl.n	80111c8 <_vfiprintf_r+0x4c>
 80111c4:	693b      	ldr	r3, [r7, #16]
 80111c6:	b9ab      	cbnz	r3, 80111f4 <_vfiprintf_r+0x78>
 80111c8:	9800      	ldr	r0, [sp, #0]
 80111ca:	4639      	mov	r1, r7
 80111cc:	f000 feee 	bl	8011fac <__swsetup_r>
 80111d0:	b180      	cbz	r0, 80111f4 <_vfiprintf_r+0x78>
 80111d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80111d4:	07da      	lsls	r2, r3, #31
 80111d6:	d506      	bpl.n	80111e6 <_vfiprintf_r+0x6a>
 80111d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80111dc:	9303      	str	r3, [sp, #12]
 80111de:	9803      	ldr	r0, [sp, #12]
 80111e0:	b03b      	add	sp, #236	@ 0xec
 80111e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111e6:	89bb      	ldrh	r3, [r7, #12]
 80111e8:	059b      	lsls	r3, r3, #22
 80111ea:	d4f5      	bmi.n	80111d8 <_vfiprintf_r+0x5c>
 80111ec:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80111ee:	f7fe f9aa 	bl	800f546 <__retarget_lock_release_recursive>
 80111f2:	e7f1      	b.n	80111d8 <_vfiprintf_r+0x5c>
 80111f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80111f8:	f003 021a 	and.w	r2, r3, #26
 80111fc:	2a0a      	cmp	r2, #10
 80111fe:	d114      	bne.n	801122a <_vfiprintf_r+0xae>
 8011200:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011204:	2a00      	cmp	r2, #0
 8011206:	db10      	blt.n	801122a <_vfiprintf_r+0xae>
 8011208:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801120a:	07d6      	lsls	r6, r2, #31
 801120c:	d404      	bmi.n	8011218 <_vfiprintf_r+0x9c>
 801120e:	059d      	lsls	r5, r3, #22
 8011210:	d402      	bmi.n	8011218 <_vfiprintf_r+0x9c>
 8011212:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011214:	f7fe f997 	bl	800f546 <__retarget_lock_release_recursive>
 8011218:	9800      	ldr	r0, [sp, #0]
 801121a:	4623      	mov	r3, r4
 801121c:	465a      	mov	r2, fp
 801121e:	4639      	mov	r1, r7
 8011220:	b03b      	add	sp, #236	@ 0xec
 8011222:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011226:	f000 bc31 	b.w	8011a8c <__sbprintf>
 801122a:	2300      	movs	r3, #0
 801122c:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8011230:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8011234:	ae11      	add	r6, sp, #68	@ 0x44
 8011236:	960e      	str	r6, [sp, #56]	@ 0x38
 8011238:	9307      	str	r3, [sp, #28]
 801123a:	9309      	str	r3, [sp, #36]	@ 0x24
 801123c:	9303      	str	r3, [sp, #12]
 801123e:	465b      	mov	r3, fp
 8011240:	461c      	mov	r4, r3
 8011242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011246:	b10a      	cbz	r2, 801124c <_vfiprintf_r+0xd0>
 8011248:	2a25      	cmp	r2, #37	@ 0x25
 801124a:	d1f9      	bne.n	8011240 <_vfiprintf_r+0xc4>
 801124c:	ebb4 080b 	subs.w	r8, r4, fp
 8011250:	d00d      	beq.n	801126e <_vfiprintf_r+0xf2>
 8011252:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011254:	4443      	add	r3, r8
 8011256:	9310      	str	r3, [sp, #64]	@ 0x40
 8011258:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801125a:	3301      	adds	r3, #1
 801125c:	2b07      	cmp	r3, #7
 801125e:	e9c6 b800 	strd	fp, r8, [r6]
 8011262:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011264:	dc75      	bgt.n	8011352 <_vfiprintf_r+0x1d6>
 8011266:	3608      	adds	r6, #8
 8011268:	9b03      	ldr	r3, [sp, #12]
 801126a:	4443      	add	r3, r8
 801126c:	9303      	str	r3, [sp, #12]
 801126e:	7823      	ldrb	r3, [r4, #0]
 8011270:	2b00      	cmp	r3, #0
 8011272:	f000 83cd 	beq.w	8011a10 <_vfiprintf_r+0x894>
 8011276:	2300      	movs	r3, #0
 8011278:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801127c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8011280:	3401      	adds	r4, #1
 8011282:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8011286:	469a      	mov	sl, r3
 8011288:	46a3      	mov	fp, r4
 801128a:	f81b 3b01 	ldrb.w	r3, [fp], #1
 801128e:	f1a3 0220 	sub.w	r2, r3, #32
 8011292:	2a5a      	cmp	r2, #90	@ 0x5a
 8011294:	f200 8316 	bhi.w	80118c4 <_vfiprintf_r+0x748>
 8011298:	e8df f012 	tbh	[pc, r2, lsl #1]
 801129c:	0314009a 	.word	0x0314009a
 80112a0:	00a20314 	.word	0x00a20314
 80112a4:	03140314 	.word	0x03140314
 80112a8:	00820314 	.word	0x00820314
 80112ac:	03140314 	.word	0x03140314
 80112b0:	00af00a5 	.word	0x00af00a5
 80112b4:	00ac0314 	.word	0x00ac0314
 80112b8:	031400b1 	.word	0x031400b1
 80112bc:	00d000cd 	.word	0x00d000cd
 80112c0:	00d000d0 	.word	0x00d000d0
 80112c4:	00d000d0 	.word	0x00d000d0
 80112c8:	00d000d0 	.word	0x00d000d0
 80112cc:	00d000d0 	.word	0x00d000d0
 80112d0:	03140314 	.word	0x03140314
 80112d4:	03140314 	.word	0x03140314
 80112d8:	03140314 	.word	0x03140314
 80112dc:	03140314 	.word	0x03140314
 80112e0:	00f70314 	.word	0x00f70314
 80112e4:	03140104 	.word	0x03140104
 80112e8:	03140314 	.word	0x03140314
 80112ec:	03140314 	.word	0x03140314
 80112f0:	03140314 	.word	0x03140314
 80112f4:	03140314 	.word	0x03140314
 80112f8:	01520314 	.word	0x01520314
 80112fc:	03140314 	.word	0x03140314
 8011300:	019a0314 	.word	0x019a0314
 8011304:	027a0314 	.word	0x027a0314
 8011308:	03140314 	.word	0x03140314
 801130c:	0314029a 	.word	0x0314029a
 8011310:	03140314 	.word	0x03140314
 8011314:	03140314 	.word	0x03140314
 8011318:	03140314 	.word	0x03140314
 801131c:	03140314 	.word	0x03140314
 8011320:	00f70314 	.word	0x00f70314
 8011324:	03140106 	.word	0x03140106
 8011328:	03140314 	.word	0x03140314
 801132c:	010600e0 	.word	0x010600e0
 8011330:	031400f1 	.word	0x031400f1
 8011334:	031400eb 	.word	0x031400eb
 8011338:	01540132 	.word	0x01540132
 801133c:	00f10189 	.word	0x00f10189
 8011340:	019a0314 	.word	0x019a0314
 8011344:	027c0098 	.word	0x027c0098
 8011348:	03140314 	.word	0x03140314
 801134c:	03140065 	.word	0x03140065
 8011350:	0098      	.short	0x0098
 8011352:	9800      	ldr	r0, [sp, #0]
 8011354:	aa0e      	add	r2, sp, #56	@ 0x38
 8011356:	4639      	mov	r1, r7
 8011358:	f7ff fede 	bl	8011118 <__sprint_r>
 801135c:	2800      	cmp	r0, #0
 801135e:	f040 8336 	bne.w	80119ce <_vfiprintf_r+0x852>
 8011362:	ae11      	add	r6, sp, #68	@ 0x44
 8011364:	e780      	b.n	8011268 <_vfiprintf_r+0xec>
 8011366:	4a99      	ldr	r2, [pc, #612]	@ (80115cc <_vfiprintf_r+0x450>)
 8011368:	9205      	str	r2, [sp, #20]
 801136a:	f01a 0220 	ands.w	r2, sl, #32
 801136e:	f000 8231 	beq.w	80117d4 <_vfiprintf_r+0x658>
 8011372:	3507      	adds	r5, #7
 8011374:	f025 0507 	bic.w	r5, r5, #7
 8011378:	46a8      	mov	r8, r5
 801137a:	686d      	ldr	r5, [r5, #4]
 801137c:	f858 4b08 	ldr.w	r4, [r8], #8
 8011380:	f01a 0f01 	tst.w	sl, #1
 8011384:	d009      	beq.n	801139a <_vfiprintf_r+0x21e>
 8011386:	ea54 0205 	orrs.w	r2, r4, r5
 801138a:	bf1f      	itttt	ne
 801138c:	2230      	movne	r2, #48	@ 0x30
 801138e:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 8011392:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 8011396:	f04a 0a02 	orrne.w	sl, sl, #2
 801139a:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 801139e:	e112      	b.n	80115c6 <_vfiprintf_r+0x44a>
 80113a0:	9800      	ldr	r0, [sp, #0]
 80113a2:	f000 fedd 	bl	8012160 <_localeconv_r>
 80113a6:	6843      	ldr	r3, [r0, #4]
 80113a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80113aa:	4618      	mov	r0, r3
 80113ac:	f7ee ff30 	bl	8000210 <strlen>
 80113b0:	9007      	str	r0, [sp, #28]
 80113b2:	9800      	ldr	r0, [sp, #0]
 80113b4:	f000 fed4 	bl	8012160 <_localeconv_r>
 80113b8:	6883      	ldr	r3, [r0, #8]
 80113ba:	9306      	str	r3, [sp, #24]
 80113bc:	9b07      	ldr	r3, [sp, #28]
 80113be:	b12b      	cbz	r3, 80113cc <_vfiprintf_r+0x250>
 80113c0:	9b06      	ldr	r3, [sp, #24]
 80113c2:	b11b      	cbz	r3, 80113cc <_vfiprintf_r+0x250>
 80113c4:	781b      	ldrb	r3, [r3, #0]
 80113c6:	b10b      	cbz	r3, 80113cc <_vfiprintf_r+0x250>
 80113c8:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 80113cc:	465c      	mov	r4, fp
 80113ce:	e75b      	b.n	8011288 <_vfiprintf_r+0x10c>
 80113d0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d1f9      	bne.n	80113cc <_vfiprintf_r+0x250>
 80113d8:	2320      	movs	r3, #32
 80113da:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80113de:	e7f5      	b.n	80113cc <_vfiprintf_r+0x250>
 80113e0:	f04a 0a01 	orr.w	sl, sl, #1
 80113e4:	e7f2      	b.n	80113cc <_vfiprintf_r+0x250>
 80113e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80113ea:	9302      	str	r3, [sp, #8]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	daed      	bge.n	80113cc <_vfiprintf_r+0x250>
 80113f0:	425b      	negs	r3, r3
 80113f2:	9302      	str	r3, [sp, #8]
 80113f4:	f04a 0a04 	orr.w	sl, sl, #4
 80113f8:	e7e8      	b.n	80113cc <_vfiprintf_r+0x250>
 80113fa:	232b      	movs	r3, #43	@ 0x2b
 80113fc:	e7ed      	b.n	80113da <_vfiprintf_r+0x25e>
 80113fe:	465a      	mov	r2, fp
 8011400:	f812 3b01 	ldrb.w	r3, [r2], #1
 8011404:	2b2a      	cmp	r3, #42	@ 0x2a
 8011406:	d112      	bne.n	801142e <_vfiprintf_r+0x2b2>
 8011408:	f855 3b04 	ldr.w	r3, [r5], #4
 801140c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011410:	9301      	str	r3, [sp, #4]
 8011412:	4693      	mov	fp, r2
 8011414:	e7da      	b.n	80113cc <_vfiprintf_r+0x250>
 8011416:	9b01      	ldr	r3, [sp, #4]
 8011418:	fb00 1303 	mla	r3, r0, r3, r1
 801141c:	9301      	str	r3, [sp, #4]
 801141e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8011422:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8011426:	2909      	cmp	r1, #9
 8011428:	d9f5      	bls.n	8011416 <_vfiprintf_r+0x29a>
 801142a:	4693      	mov	fp, r2
 801142c:	e72f      	b.n	801128e <_vfiprintf_r+0x112>
 801142e:	2100      	movs	r1, #0
 8011430:	9101      	str	r1, [sp, #4]
 8011432:	200a      	movs	r0, #10
 8011434:	e7f5      	b.n	8011422 <_vfiprintf_r+0x2a6>
 8011436:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 801143a:	e7c7      	b.n	80113cc <_vfiprintf_r+0x250>
 801143c:	2100      	movs	r1, #0
 801143e:	465a      	mov	r2, fp
 8011440:	9102      	str	r1, [sp, #8]
 8011442:	200a      	movs	r0, #10
 8011444:	9902      	ldr	r1, [sp, #8]
 8011446:	3b30      	subs	r3, #48	@ 0x30
 8011448:	fb00 3301 	mla	r3, r0, r1, r3
 801144c:	9302      	str	r3, [sp, #8]
 801144e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8011452:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8011456:	2909      	cmp	r1, #9
 8011458:	d9f4      	bls.n	8011444 <_vfiprintf_r+0x2c8>
 801145a:	e7e6      	b.n	801142a <_vfiprintf_r+0x2ae>
 801145c:	f89b 3000 	ldrb.w	r3, [fp]
 8011460:	2b68      	cmp	r3, #104	@ 0x68
 8011462:	bf06      	itte	eq
 8011464:	f10b 0b01 	addeq.w	fp, fp, #1
 8011468:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 801146c:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8011470:	e7ac      	b.n	80113cc <_vfiprintf_r+0x250>
 8011472:	f89b 3000 	ldrb.w	r3, [fp]
 8011476:	2b6c      	cmp	r3, #108	@ 0x6c
 8011478:	d104      	bne.n	8011484 <_vfiprintf_r+0x308>
 801147a:	f10b 0b01 	add.w	fp, fp, #1
 801147e:	f04a 0a20 	orr.w	sl, sl, #32
 8011482:	e7a3      	b.n	80113cc <_vfiprintf_r+0x250>
 8011484:	f04a 0a10 	orr.w	sl, sl, #16
 8011488:	e7a0      	b.n	80113cc <_vfiprintf_r+0x250>
 801148a:	46a8      	mov	r8, r5
 801148c:	2400      	movs	r4, #0
 801148e:	f858 3b04 	ldr.w	r3, [r8], #4
 8011492:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8011496:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 801149a:	2301      	movs	r3, #1
 801149c:	9301      	str	r3, [sp, #4]
 801149e:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 80114a2:	e0ab      	b.n	80115fc <_vfiprintf_r+0x480>
 80114a4:	f04a 0a10 	orr.w	sl, sl, #16
 80114a8:	f01a 0f20 	tst.w	sl, #32
 80114ac:	d011      	beq.n	80114d2 <_vfiprintf_r+0x356>
 80114ae:	3507      	adds	r5, #7
 80114b0:	f025 0507 	bic.w	r5, r5, #7
 80114b4:	46a8      	mov	r8, r5
 80114b6:	686d      	ldr	r5, [r5, #4]
 80114b8:	f858 4b08 	ldr.w	r4, [r8], #8
 80114bc:	2d00      	cmp	r5, #0
 80114be:	da06      	bge.n	80114ce <_vfiprintf_r+0x352>
 80114c0:	4264      	negs	r4, r4
 80114c2:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 80114c6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80114ca:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80114ce:	2301      	movs	r3, #1
 80114d0:	e048      	b.n	8011564 <_vfiprintf_r+0x3e8>
 80114d2:	46a8      	mov	r8, r5
 80114d4:	f01a 0f10 	tst.w	sl, #16
 80114d8:	f858 5b04 	ldr.w	r5, [r8], #4
 80114dc:	d002      	beq.n	80114e4 <_vfiprintf_r+0x368>
 80114de:	462c      	mov	r4, r5
 80114e0:	17ed      	asrs	r5, r5, #31
 80114e2:	e7eb      	b.n	80114bc <_vfiprintf_r+0x340>
 80114e4:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80114e8:	d003      	beq.n	80114f2 <_vfiprintf_r+0x376>
 80114ea:	b22c      	sxth	r4, r5
 80114ec:	f345 35c0 	sbfx	r5, r5, #15, #1
 80114f0:	e7e4      	b.n	80114bc <_vfiprintf_r+0x340>
 80114f2:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 80114f6:	d0f2      	beq.n	80114de <_vfiprintf_r+0x362>
 80114f8:	b26c      	sxtb	r4, r5
 80114fa:	f345 15c0 	sbfx	r5, r5, #7, #1
 80114fe:	e7dd      	b.n	80114bc <_vfiprintf_r+0x340>
 8011500:	f01a 0f20 	tst.w	sl, #32
 8011504:	d007      	beq.n	8011516 <_vfiprintf_r+0x39a>
 8011506:	9a03      	ldr	r2, [sp, #12]
 8011508:	682b      	ldr	r3, [r5, #0]
 801150a:	9903      	ldr	r1, [sp, #12]
 801150c:	17d2      	asrs	r2, r2, #31
 801150e:	e9c3 1200 	strd	r1, r2, [r3]
 8011512:	3504      	adds	r5, #4
 8011514:	e693      	b.n	801123e <_vfiprintf_r+0xc2>
 8011516:	f01a 0f10 	tst.w	sl, #16
 801151a:	d003      	beq.n	8011524 <_vfiprintf_r+0x3a8>
 801151c:	682b      	ldr	r3, [r5, #0]
 801151e:	9a03      	ldr	r2, [sp, #12]
 8011520:	601a      	str	r2, [r3, #0]
 8011522:	e7f6      	b.n	8011512 <_vfiprintf_r+0x396>
 8011524:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8011528:	d003      	beq.n	8011532 <_vfiprintf_r+0x3b6>
 801152a:	682b      	ldr	r3, [r5, #0]
 801152c:	9a03      	ldr	r2, [sp, #12]
 801152e:	801a      	strh	r2, [r3, #0]
 8011530:	e7ef      	b.n	8011512 <_vfiprintf_r+0x396>
 8011532:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8011536:	d0f1      	beq.n	801151c <_vfiprintf_r+0x3a0>
 8011538:	682b      	ldr	r3, [r5, #0]
 801153a:	9a03      	ldr	r2, [sp, #12]
 801153c:	701a      	strb	r2, [r3, #0]
 801153e:	e7e8      	b.n	8011512 <_vfiprintf_r+0x396>
 8011540:	f04a 0a10 	orr.w	sl, sl, #16
 8011544:	f01a 0320 	ands.w	r3, sl, #32
 8011548:	d01f      	beq.n	801158a <_vfiprintf_r+0x40e>
 801154a:	3507      	adds	r5, #7
 801154c:	f025 0507 	bic.w	r5, r5, #7
 8011550:	46a8      	mov	r8, r5
 8011552:	686d      	ldr	r5, [r5, #4]
 8011554:	f858 4b08 	ldr.w	r4, [r8], #8
 8011558:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 801155c:	2300      	movs	r3, #0
 801155e:	2200      	movs	r2, #0
 8011560:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8011564:	9a01      	ldr	r2, [sp, #4]
 8011566:	3201      	adds	r2, #1
 8011568:	f000 825f 	beq.w	8011a2a <_vfiprintf_r+0x8ae>
 801156c:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8011570:	9204      	str	r2, [sp, #16]
 8011572:	ea54 0205 	orrs.w	r2, r4, r5
 8011576:	f040 825e 	bne.w	8011a36 <_vfiprintf_r+0x8ba>
 801157a:	9a01      	ldr	r2, [sp, #4]
 801157c:	2a00      	cmp	r2, #0
 801157e:	f000 8198 	beq.w	80118b2 <_vfiprintf_r+0x736>
 8011582:	2b01      	cmp	r3, #1
 8011584:	f040 825a 	bne.w	8011a3c <_vfiprintf_r+0x8c0>
 8011588:	e13b      	b.n	8011802 <_vfiprintf_r+0x686>
 801158a:	46a8      	mov	r8, r5
 801158c:	f01a 0510 	ands.w	r5, sl, #16
 8011590:	f858 4b04 	ldr.w	r4, [r8], #4
 8011594:	d001      	beq.n	801159a <_vfiprintf_r+0x41e>
 8011596:	461d      	mov	r5, r3
 8011598:	e7de      	b.n	8011558 <_vfiprintf_r+0x3dc>
 801159a:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 801159e:	d001      	beq.n	80115a4 <_vfiprintf_r+0x428>
 80115a0:	b2a4      	uxth	r4, r4
 80115a2:	e7d9      	b.n	8011558 <_vfiprintf_r+0x3dc>
 80115a4:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80115a8:	d0d6      	beq.n	8011558 <_vfiprintf_r+0x3dc>
 80115aa:	b2e4      	uxtb	r4, r4
 80115ac:	e7f3      	b.n	8011596 <_vfiprintf_r+0x41a>
 80115ae:	46a8      	mov	r8, r5
 80115b0:	f647 0330 	movw	r3, #30768	@ 0x7830
 80115b4:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80115b8:	f858 4b04 	ldr.w	r4, [r8], #4
 80115bc:	4b03      	ldr	r3, [pc, #12]	@ (80115cc <_vfiprintf_r+0x450>)
 80115be:	9305      	str	r3, [sp, #20]
 80115c0:	2500      	movs	r5, #0
 80115c2:	f04a 0a02 	orr.w	sl, sl, #2
 80115c6:	2302      	movs	r3, #2
 80115c8:	e7c9      	b.n	801155e <_vfiprintf_r+0x3e2>
 80115ca:	bf00      	nop
 80115cc:	08016877 	.word	0x08016877
 80115d0:	9b01      	ldr	r3, [sp, #4]
 80115d2:	46a8      	mov	r8, r5
 80115d4:	1c5c      	adds	r4, r3, #1
 80115d6:	f04f 0500 	mov.w	r5, #0
 80115da:	f858 9b04 	ldr.w	r9, [r8], #4
 80115de:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 80115e2:	f000 80d0 	beq.w	8011786 <_vfiprintf_r+0x60a>
 80115e6:	461a      	mov	r2, r3
 80115e8:	4629      	mov	r1, r5
 80115ea:	4648      	mov	r0, r9
 80115ec:	f7ee fe18 	bl	8000220 <memchr>
 80115f0:	4604      	mov	r4, r0
 80115f2:	b118      	cbz	r0, 80115fc <_vfiprintf_r+0x480>
 80115f4:	eba0 0309 	sub.w	r3, r0, r9
 80115f8:	9301      	str	r3, [sp, #4]
 80115fa:	462c      	mov	r4, r5
 80115fc:	9b01      	ldr	r3, [sp, #4]
 80115fe:	42a3      	cmp	r3, r4
 8011600:	bfb8      	it	lt
 8011602:	4623      	movlt	r3, r4
 8011604:	9304      	str	r3, [sp, #16]
 8011606:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801160a:	b113      	cbz	r3, 8011612 <_vfiprintf_r+0x496>
 801160c:	9b04      	ldr	r3, [sp, #16]
 801160e:	3301      	adds	r3, #1
 8011610:	9304      	str	r3, [sp, #16]
 8011612:	f01a 0302 	ands.w	r3, sl, #2
 8011616:	9308      	str	r3, [sp, #32]
 8011618:	bf1e      	ittt	ne
 801161a:	9b04      	ldrne	r3, [sp, #16]
 801161c:	3302      	addne	r3, #2
 801161e:	9304      	strne	r3, [sp, #16]
 8011620:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 8011624:	930a      	str	r3, [sp, #40]	@ 0x28
 8011626:	d11f      	bne.n	8011668 <_vfiprintf_r+0x4ec>
 8011628:	9b02      	ldr	r3, [sp, #8]
 801162a:	9a04      	ldr	r2, [sp, #16]
 801162c:	1a9d      	subs	r5, r3, r2
 801162e:	2d00      	cmp	r5, #0
 8011630:	dd1a      	ble.n	8011668 <_vfiprintf_r+0x4ec>
 8011632:	4ba9      	ldr	r3, [pc, #676]	@ (80118d8 <_vfiprintf_r+0x75c>)
 8011634:	6033      	str	r3, [r6, #0]
 8011636:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 801163a:	2d10      	cmp	r5, #16
 801163c:	f102 0201 	add.w	r2, r2, #1
 8011640:	f106 0008 	add.w	r0, r6, #8
 8011644:	f300 814e 	bgt.w	80118e4 <_vfiprintf_r+0x768>
 8011648:	6075      	str	r5, [r6, #4]
 801164a:	2a07      	cmp	r2, #7
 801164c:	4465      	add	r5, ip
 801164e:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8011652:	f340 815a 	ble.w	801190a <_vfiprintf_r+0x78e>
 8011656:	9800      	ldr	r0, [sp, #0]
 8011658:	aa0e      	add	r2, sp, #56	@ 0x38
 801165a:	4639      	mov	r1, r7
 801165c:	f7ff fd5c 	bl	8011118 <__sprint_r>
 8011660:	2800      	cmp	r0, #0
 8011662:	f040 81b4 	bne.w	80119ce <_vfiprintf_r+0x852>
 8011666:	ae11      	add	r6, sp, #68	@ 0x44
 8011668:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 801166c:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8011670:	b161      	cbz	r1, 801168c <_vfiprintf_r+0x510>
 8011672:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8011676:	3301      	adds	r3, #1
 8011678:	6031      	str	r1, [r6, #0]
 801167a:	2101      	movs	r1, #1
 801167c:	440a      	add	r2, r1
 801167e:	2b07      	cmp	r3, #7
 8011680:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8011684:	6071      	str	r1, [r6, #4]
 8011686:	f300 8142 	bgt.w	801190e <_vfiprintf_r+0x792>
 801168a:	3608      	adds	r6, #8
 801168c:	9908      	ldr	r1, [sp, #32]
 801168e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8011692:	b159      	cbz	r1, 80116ac <_vfiprintf_r+0x530>
 8011694:	a90d      	add	r1, sp, #52	@ 0x34
 8011696:	3301      	adds	r3, #1
 8011698:	6031      	str	r1, [r6, #0]
 801169a:	2102      	movs	r1, #2
 801169c:	440a      	add	r2, r1
 801169e:	2b07      	cmp	r3, #7
 80116a0:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 80116a4:	6071      	str	r1, [r6, #4]
 80116a6:	f300 813b 	bgt.w	8011920 <_vfiprintf_r+0x7a4>
 80116aa:	3608      	adds	r6, #8
 80116ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116ae:	2b80      	cmp	r3, #128	@ 0x80
 80116b0:	d11f      	bne.n	80116f2 <_vfiprintf_r+0x576>
 80116b2:	9b02      	ldr	r3, [sp, #8]
 80116b4:	9a04      	ldr	r2, [sp, #16]
 80116b6:	1a9d      	subs	r5, r3, r2
 80116b8:	2d00      	cmp	r5, #0
 80116ba:	dd1a      	ble.n	80116f2 <_vfiprintf_r+0x576>
 80116bc:	4b87      	ldr	r3, [pc, #540]	@ (80118dc <_vfiprintf_r+0x760>)
 80116be:	6033      	str	r3, [r6, #0]
 80116c0:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 80116c4:	2d10      	cmp	r5, #16
 80116c6:	f102 0201 	add.w	r2, r2, #1
 80116ca:	f106 0008 	add.w	r0, r6, #8
 80116ce:	f300 8130 	bgt.w	8011932 <_vfiprintf_r+0x7b6>
 80116d2:	6075      	str	r5, [r6, #4]
 80116d4:	2a07      	cmp	r2, #7
 80116d6:	4465      	add	r5, ip
 80116d8:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 80116dc:	f340 813c 	ble.w	8011958 <_vfiprintf_r+0x7dc>
 80116e0:	9800      	ldr	r0, [sp, #0]
 80116e2:	aa0e      	add	r2, sp, #56	@ 0x38
 80116e4:	4639      	mov	r1, r7
 80116e6:	f7ff fd17 	bl	8011118 <__sprint_r>
 80116ea:	2800      	cmp	r0, #0
 80116ec:	f040 816f 	bne.w	80119ce <_vfiprintf_r+0x852>
 80116f0:	ae11      	add	r6, sp, #68	@ 0x44
 80116f2:	9b01      	ldr	r3, [sp, #4]
 80116f4:	1ae4      	subs	r4, r4, r3
 80116f6:	2c00      	cmp	r4, #0
 80116f8:	dd1a      	ble.n	8011730 <_vfiprintf_r+0x5b4>
 80116fa:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80116fe:	4877      	ldr	r0, [pc, #476]	@ (80118dc <_vfiprintf_r+0x760>)
 8011700:	6030      	str	r0, [r6, #0]
 8011702:	2c10      	cmp	r4, #16
 8011704:	f103 0301 	add.w	r3, r3, #1
 8011708:	f106 0108 	add.w	r1, r6, #8
 801170c:	f300 8126 	bgt.w	801195c <_vfiprintf_r+0x7e0>
 8011710:	6074      	str	r4, [r6, #4]
 8011712:	2b07      	cmp	r3, #7
 8011714:	4414      	add	r4, r2
 8011716:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 801171a:	f340 8130 	ble.w	801197e <_vfiprintf_r+0x802>
 801171e:	9800      	ldr	r0, [sp, #0]
 8011720:	aa0e      	add	r2, sp, #56	@ 0x38
 8011722:	4639      	mov	r1, r7
 8011724:	f7ff fcf8 	bl	8011118 <__sprint_r>
 8011728:	2800      	cmp	r0, #0
 801172a:	f040 8150 	bne.w	80119ce <_vfiprintf_r+0x852>
 801172e:	ae11      	add	r6, sp, #68	@ 0x44
 8011730:	9b01      	ldr	r3, [sp, #4]
 8011732:	9a01      	ldr	r2, [sp, #4]
 8011734:	6073      	str	r3, [r6, #4]
 8011736:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011738:	f8c6 9000 	str.w	r9, [r6]
 801173c:	4413      	add	r3, r2
 801173e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011742:	3301      	adds	r3, #1
 8011744:	2b07      	cmp	r3, #7
 8011746:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011748:	f300 811b 	bgt.w	8011982 <_vfiprintf_r+0x806>
 801174c:	f106 0308 	add.w	r3, r6, #8
 8011750:	f01a 0f04 	tst.w	sl, #4
 8011754:	f040 811d 	bne.w	8011992 <_vfiprintf_r+0x816>
 8011758:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801175c:	9904      	ldr	r1, [sp, #16]
 801175e:	428a      	cmp	r2, r1
 8011760:	bfac      	ite	ge
 8011762:	189b      	addge	r3, r3, r2
 8011764:	185b      	addlt	r3, r3, r1
 8011766:	9303      	str	r3, [sp, #12]
 8011768:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801176a:	b13b      	cbz	r3, 801177c <_vfiprintf_r+0x600>
 801176c:	9800      	ldr	r0, [sp, #0]
 801176e:	aa0e      	add	r2, sp, #56	@ 0x38
 8011770:	4639      	mov	r1, r7
 8011772:	f7ff fcd1 	bl	8011118 <__sprint_r>
 8011776:	2800      	cmp	r0, #0
 8011778:	f040 8129 	bne.w	80119ce <_vfiprintf_r+0x852>
 801177c:	2300      	movs	r3, #0
 801177e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011780:	4645      	mov	r5, r8
 8011782:	ae11      	add	r6, sp, #68	@ 0x44
 8011784:	e55b      	b.n	801123e <_vfiprintf_r+0xc2>
 8011786:	4648      	mov	r0, r9
 8011788:	f7ee fd42 	bl	8000210 <strlen>
 801178c:	9001      	str	r0, [sp, #4]
 801178e:	e734      	b.n	80115fa <_vfiprintf_r+0x47e>
 8011790:	f04a 0a10 	orr.w	sl, sl, #16
 8011794:	f01a 0320 	ands.w	r3, sl, #32
 8011798:	d008      	beq.n	80117ac <_vfiprintf_r+0x630>
 801179a:	3507      	adds	r5, #7
 801179c:	f025 0507 	bic.w	r5, r5, #7
 80117a0:	46a8      	mov	r8, r5
 80117a2:	686d      	ldr	r5, [r5, #4]
 80117a4:	f858 4b08 	ldr.w	r4, [r8], #8
 80117a8:	2301      	movs	r3, #1
 80117aa:	e6d8      	b.n	801155e <_vfiprintf_r+0x3e2>
 80117ac:	46a8      	mov	r8, r5
 80117ae:	f01a 0510 	ands.w	r5, sl, #16
 80117b2:	f858 4b04 	ldr.w	r4, [r8], #4
 80117b6:	d001      	beq.n	80117bc <_vfiprintf_r+0x640>
 80117b8:	461d      	mov	r5, r3
 80117ba:	e7f5      	b.n	80117a8 <_vfiprintf_r+0x62c>
 80117bc:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 80117c0:	d001      	beq.n	80117c6 <_vfiprintf_r+0x64a>
 80117c2:	b2a4      	uxth	r4, r4
 80117c4:	e7f0      	b.n	80117a8 <_vfiprintf_r+0x62c>
 80117c6:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80117ca:	d0ed      	beq.n	80117a8 <_vfiprintf_r+0x62c>
 80117cc:	b2e4      	uxtb	r4, r4
 80117ce:	e7f3      	b.n	80117b8 <_vfiprintf_r+0x63c>
 80117d0:	4a43      	ldr	r2, [pc, #268]	@ (80118e0 <_vfiprintf_r+0x764>)
 80117d2:	e5c9      	b.n	8011368 <_vfiprintf_r+0x1ec>
 80117d4:	46a8      	mov	r8, r5
 80117d6:	f01a 0510 	ands.w	r5, sl, #16
 80117da:	f858 4b04 	ldr.w	r4, [r8], #4
 80117de:	d001      	beq.n	80117e4 <_vfiprintf_r+0x668>
 80117e0:	4615      	mov	r5, r2
 80117e2:	e5cd      	b.n	8011380 <_vfiprintf_r+0x204>
 80117e4:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 80117e8:	d001      	beq.n	80117ee <_vfiprintf_r+0x672>
 80117ea:	b2a4      	uxth	r4, r4
 80117ec:	e5c8      	b.n	8011380 <_vfiprintf_r+0x204>
 80117ee:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80117f2:	f43f adc5 	beq.w	8011380 <_vfiprintf_r+0x204>
 80117f6:	b2e4      	uxtb	r4, r4
 80117f8:	e7f2      	b.n	80117e0 <_vfiprintf_r+0x664>
 80117fa:	2c0a      	cmp	r4, #10
 80117fc:	f175 0300 	sbcs.w	r3, r5, #0
 8011800:	d206      	bcs.n	8011810 <_vfiprintf_r+0x694>
 8011802:	3430      	adds	r4, #48	@ 0x30
 8011804:	b2e4      	uxtb	r4, r4
 8011806:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 801180a:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 801180e:	e131      	b.n	8011a74 <_vfiprintf_r+0x8f8>
 8011810:	ab3a      	add	r3, sp, #232	@ 0xe8
 8011812:	9308      	str	r3, [sp, #32]
 8011814:	9b04      	ldr	r3, [sp, #16]
 8011816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801181a:	f04f 0a00 	mov.w	sl, #0
 801181e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011820:	220a      	movs	r2, #10
 8011822:	2300      	movs	r3, #0
 8011824:	4620      	mov	r0, r4
 8011826:	4629      	mov	r1, r5
 8011828:	f7ef f9de 	bl	8000be8 <__aeabi_uldivmod>
 801182c:	460b      	mov	r3, r1
 801182e:	9908      	ldr	r1, [sp, #32]
 8011830:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011832:	3230      	adds	r2, #48	@ 0x30
 8011834:	f801 2c01 	strb.w	r2, [r1, #-1]
 8011838:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801183a:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 801183e:	f10a 0a01 	add.w	sl, sl, #1
 8011842:	b1e2      	cbz	r2, 801187e <_vfiprintf_r+0x702>
 8011844:	9a06      	ldr	r2, [sp, #24]
 8011846:	7812      	ldrb	r2, [r2, #0]
 8011848:	4552      	cmp	r2, sl
 801184a:	d118      	bne.n	801187e <_vfiprintf_r+0x702>
 801184c:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8011850:	d015      	beq.n	801187e <_vfiprintf_r+0x702>
 8011852:	2c0a      	cmp	r4, #10
 8011854:	f175 0200 	sbcs.w	r2, r5, #0
 8011858:	d311      	bcc.n	801187e <_vfiprintf_r+0x702>
 801185a:	9308      	str	r3, [sp, #32]
 801185c:	9b07      	ldr	r3, [sp, #28]
 801185e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011860:	eba9 0903 	sub.w	r9, r9, r3
 8011864:	461a      	mov	r2, r3
 8011866:	4648      	mov	r0, r9
 8011868:	f000 fc60 	bl	801212c <strncpy>
 801186c:	9b06      	ldr	r3, [sp, #24]
 801186e:	785a      	ldrb	r2, [r3, #1]
 8011870:	9b08      	ldr	r3, [sp, #32]
 8011872:	b172      	cbz	r2, 8011892 <_vfiprintf_r+0x716>
 8011874:	9a06      	ldr	r2, [sp, #24]
 8011876:	3201      	adds	r2, #1
 8011878:	9206      	str	r2, [sp, #24]
 801187a:	f04f 0a00 	mov.w	sl, #0
 801187e:	2c0a      	cmp	r4, #10
 8011880:	f175 0500 	sbcs.w	r5, r5, #0
 8011884:	f0c0 80f6 	bcc.w	8011a74 <_vfiprintf_r+0x8f8>
 8011888:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801188a:	f8cd 9020 	str.w	r9, [sp, #32]
 801188e:	461d      	mov	r5, r3
 8011890:	e7c6      	b.n	8011820 <_vfiprintf_r+0x6a4>
 8011892:	4692      	mov	sl, r2
 8011894:	e7f3      	b.n	801187e <_vfiprintf_r+0x702>
 8011896:	f004 030f 	and.w	r3, r4, #15
 801189a:	9a05      	ldr	r2, [sp, #20]
 801189c:	0924      	lsrs	r4, r4, #4
 801189e:	5cd3      	ldrb	r3, [r2, r3]
 80118a0:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80118a4:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 80118a8:	092d      	lsrs	r5, r5, #4
 80118aa:	ea54 0305 	orrs.w	r3, r4, r5
 80118ae:	d1f2      	bne.n	8011896 <_vfiprintf_r+0x71a>
 80118b0:	e0e0      	b.n	8011a74 <_vfiprintf_r+0x8f8>
 80118b2:	b923      	cbnz	r3, 80118be <_vfiprintf_r+0x742>
 80118b4:	f01a 0f01 	tst.w	sl, #1
 80118b8:	d001      	beq.n	80118be <_vfiprintf_r+0x742>
 80118ba:	2430      	movs	r4, #48	@ 0x30
 80118bc:	e7a3      	b.n	8011806 <_vfiprintf_r+0x68a>
 80118be:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 80118c2:	e0d7      	b.n	8011a74 <_vfiprintf_r+0x8f8>
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	f000 80a3 	beq.w	8011a10 <_vfiprintf_r+0x894>
 80118ca:	2400      	movs	r4, #0
 80118cc:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 80118d0:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 80118d4:	46a8      	mov	r8, r5
 80118d6:	e5e0      	b.n	801149a <_vfiprintf_r+0x31e>
 80118d8:	080168cb 	.word	0x080168cb
 80118dc:	080168bb 	.word	0x080168bb
 80118e0:	08016888 	.word	0x08016888
 80118e4:	2110      	movs	r1, #16
 80118e6:	6071      	str	r1, [r6, #4]
 80118e8:	2a07      	cmp	r2, #7
 80118ea:	4461      	add	r1, ip
 80118ec:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80118f0:	dd08      	ble.n	8011904 <_vfiprintf_r+0x788>
 80118f2:	9800      	ldr	r0, [sp, #0]
 80118f4:	aa0e      	add	r2, sp, #56	@ 0x38
 80118f6:	4639      	mov	r1, r7
 80118f8:	f7ff fc0e 	bl	8011118 <__sprint_r>
 80118fc:	2800      	cmp	r0, #0
 80118fe:	d166      	bne.n	80119ce <_vfiprintf_r+0x852>
 8011900:	4b60      	ldr	r3, [pc, #384]	@ (8011a84 <_vfiprintf_r+0x908>)
 8011902:	a811      	add	r0, sp, #68	@ 0x44
 8011904:	3d10      	subs	r5, #16
 8011906:	4606      	mov	r6, r0
 8011908:	e694      	b.n	8011634 <_vfiprintf_r+0x4b8>
 801190a:	4606      	mov	r6, r0
 801190c:	e6ac      	b.n	8011668 <_vfiprintf_r+0x4ec>
 801190e:	9800      	ldr	r0, [sp, #0]
 8011910:	aa0e      	add	r2, sp, #56	@ 0x38
 8011912:	4639      	mov	r1, r7
 8011914:	f7ff fc00 	bl	8011118 <__sprint_r>
 8011918:	2800      	cmp	r0, #0
 801191a:	d158      	bne.n	80119ce <_vfiprintf_r+0x852>
 801191c:	ae11      	add	r6, sp, #68	@ 0x44
 801191e:	e6b5      	b.n	801168c <_vfiprintf_r+0x510>
 8011920:	9800      	ldr	r0, [sp, #0]
 8011922:	aa0e      	add	r2, sp, #56	@ 0x38
 8011924:	4639      	mov	r1, r7
 8011926:	f7ff fbf7 	bl	8011118 <__sprint_r>
 801192a:	2800      	cmp	r0, #0
 801192c:	d14f      	bne.n	80119ce <_vfiprintf_r+0x852>
 801192e:	ae11      	add	r6, sp, #68	@ 0x44
 8011930:	e6bc      	b.n	80116ac <_vfiprintf_r+0x530>
 8011932:	2110      	movs	r1, #16
 8011934:	6071      	str	r1, [r6, #4]
 8011936:	2a07      	cmp	r2, #7
 8011938:	4461      	add	r1, ip
 801193a:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 801193e:	dd08      	ble.n	8011952 <_vfiprintf_r+0x7d6>
 8011940:	9800      	ldr	r0, [sp, #0]
 8011942:	aa0e      	add	r2, sp, #56	@ 0x38
 8011944:	4639      	mov	r1, r7
 8011946:	f7ff fbe7 	bl	8011118 <__sprint_r>
 801194a:	2800      	cmp	r0, #0
 801194c:	d13f      	bne.n	80119ce <_vfiprintf_r+0x852>
 801194e:	4b4e      	ldr	r3, [pc, #312]	@ (8011a88 <_vfiprintf_r+0x90c>)
 8011950:	a811      	add	r0, sp, #68	@ 0x44
 8011952:	3d10      	subs	r5, #16
 8011954:	4606      	mov	r6, r0
 8011956:	e6b2      	b.n	80116be <_vfiprintf_r+0x542>
 8011958:	4606      	mov	r6, r0
 801195a:	e6ca      	b.n	80116f2 <_vfiprintf_r+0x576>
 801195c:	2010      	movs	r0, #16
 801195e:	4402      	add	r2, r0
 8011960:	2b07      	cmp	r3, #7
 8011962:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8011966:	6070      	str	r0, [r6, #4]
 8011968:	dd06      	ble.n	8011978 <_vfiprintf_r+0x7fc>
 801196a:	9800      	ldr	r0, [sp, #0]
 801196c:	aa0e      	add	r2, sp, #56	@ 0x38
 801196e:	4639      	mov	r1, r7
 8011970:	f7ff fbd2 	bl	8011118 <__sprint_r>
 8011974:	bb58      	cbnz	r0, 80119ce <_vfiprintf_r+0x852>
 8011976:	a911      	add	r1, sp, #68	@ 0x44
 8011978:	3c10      	subs	r4, #16
 801197a:	460e      	mov	r6, r1
 801197c:	e6bd      	b.n	80116fa <_vfiprintf_r+0x57e>
 801197e:	460e      	mov	r6, r1
 8011980:	e6d6      	b.n	8011730 <_vfiprintf_r+0x5b4>
 8011982:	9800      	ldr	r0, [sp, #0]
 8011984:	aa0e      	add	r2, sp, #56	@ 0x38
 8011986:	4639      	mov	r1, r7
 8011988:	f7ff fbc6 	bl	8011118 <__sprint_r>
 801198c:	b9f8      	cbnz	r0, 80119ce <_vfiprintf_r+0x852>
 801198e:	ab11      	add	r3, sp, #68	@ 0x44
 8011990:	e6de      	b.n	8011750 <_vfiprintf_r+0x5d4>
 8011992:	9a02      	ldr	r2, [sp, #8]
 8011994:	9904      	ldr	r1, [sp, #16]
 8011996:	1a54      	subs	r4, r2, r1
 8011998:	2c00      	cmp	r4, #0
 801199a:	f77f aedd 	ble.w	8011758 <_vfiprintf_r+0x5dc>
 801199e:	4d39      	ldr	r5, [pc, #228]	@ (8011a84 <_vfiprintf_r+0x908>)
 80119a0:	2610      	movs	r6, #16
 80119a2:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 80119a6:	2c10      	cmp	r4, #16
 80119a8:	f102 0201 	add.w	r2, r2, #1
 80119ac:	601d      	str	r5, [r3, #0]
 80119ae:	dc1d      	bgt.n	80119ec <_vfiprintf_r+0x870>
 80119b0:	605c      	str	r4, [r3, #4]
 80119b2:	2a07      	cmp	r2, #7
 80119b4:	440c      	add	r4, r1
 80119b6:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 80119ba:	f77f aecd 	ble.w	8011758 <_vfiprintf_r+0x5dc>
 80119be:	9800      	ldr	r0, [sp, #0]
 80119c0:	aa0e      	add	r2, sp, #56	@ 0x38
 80119c2:	4639      	mov	r1, r7
 80119c4:	f7ff fba8 	bl	8011118 <__sprint_r>
 80119c8:	2800      	cmp	r0, #0
 80119ca:	f43f aec5 	beq.w	8011758 <_vfiprintf_r+0x5dc>
 80119ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80119d0:	07d9      	lsls	r1, r3, #31
 80119d2:	d405      	bmi.n	80119e0 <_vfiprintf_r+0x864>
 80119d4:	89bb      	ldrh	r3, [r7, #12]
 80119d6:	059a      	lsls	r2, r3, #22
 80119d8:	d402      	bmi.n	80119e0 <_vfiprintf_r+0x864>
 80119da:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80119dc:	f7fd fdb3 	bl	800f546 <__retarget_lock_release_recursive>
 80119e0:	89bb      	ldrh	r3, [r7, #12]
 80119e2:	065b      	lsls	r3, r3, #25
 80119e4:	f57f abfb 	bpl.w	80111de <_vfiprintf_r+0x62>
 80119e8:	f7ff bbf6 	b.w	80111d8 <_vfiprintf_r+0x5c>
 80119ec:	3110      	adds	r1, #16
 80119ee:	2a07      	cmp	r2, #7
 80119f0:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80119f4:	605e      	str	r6, [r3, #4]
 80119f6:	dc02      	bgt.n	80119fe <_vfiprintf_r+0x882>
 80119f8:	3308      	adds	r3, #8
 80119fa:	3c10      	subs	r4, #16
 80119fc:	e7d1      	b.n	80119a2 <_vfiprintf_r+0x826>
 80119fe:	9800      	ldr	r0, [sp, #0]
 8011a00:	aa0e      	add	r2, sp, #56	@ 0x38
 8011a02:	4639      	mov	r1, r7
 8011a04:	f7ff fb88 	bl	8011118 <__sprint_r>
 8011a08:	2800      	cmp	r0, #0
 8011a0a:	d1e0      	bne.n	80119ce <_vfiprintf_r+0x852>
 8011a0c:	ab11      	add	r3, sp, #68	@ 0x44
 8011a0e:	e7f4      	b.n	80119fa <_vfiprintf_r+0x87e>
 8011a10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011a12:	b913      	cbnz	r3, 8011a1a <_vfiprintf_r+0x89e>
 8011a14:	2300      	movs	r3, #0
 8011a16:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011a18:	e7d9      	b.n	80119ce <_vfiprintf_r+0x852>
 8011a1a:	9800      	ldr	r0, [sp, #0]
 8011a1c:	aa0e      	add	r2, sp, #56	@ 0x38
 8011a1e:	4639      	mov	r1, r7
 8011a20:	f7ff fb7a 	bl	8011118 <__sprint_r>
 8011a24:	2800      	cmp	r0, #0
 8011a26:	d0f5      	beq.n	8011a14 <_vfiprintf_r+0x898>
 8011a28:	e7d1      	b.n	80119ce <_vfiprintf_r+0x852>
 8011a2a:	ea54 0205 	orrs.w	r2, r4, r5
 8011a2e:	f8cd a010 	str.w	sl, [sp, #16]
 8011a32:	f43f ada6 	beq.w	8011582 <_vfiprintf_r+0x406>
 8011a36:	2b01      	cmp	r3, #1
 8011a38:	f43f aedf 	beq.w	80117fa <_vfiprintf_r+0x67e>
 8011a3c:	2b02      	cmp	r3, #2
 8011a3e:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8011a42:	f43f af28 	beq.w	8011896 <_vfiprintf_r+0x71a>
 8011a46:	f004 0307 	and.w	r3, r4, #7
 8011a4a:	08e4      	lsrs	r4, r4, #3
 8011a4c:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8011a50:	08ed      	lsrs	r5, r5, #3
 8011a52:	3330      	adds	r3, #48	@ 0x30
 8011a54:	ea54 0105 	orrs.w	r1, r4, r5
 8011a58:	464a      	mov	r2, r9
 8011a5a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8011a5e:	d1f2      	bne.n	8011a46 <_vfiprintf_r+0x8ca>
 8011a60:	9904      	ldr	r1, [sp, #16]
 8011a62:	07c8      	lsls	r0, r1, #31
 8011a64:	d506      	bpl.n	8011a74 <_vfiprintf_r+0x8f8>
 8011a66:	2b30      	cmp	r3, #48	@ 0x30
 8011a68:	d004      	beq.n	8011a74 <_vfiprintf_r+0x8f8>
 8011a6a:	2330      	movs	r3, #48	@ 0x30
 8011a6c:	f809 3c01 	strb.w	r3, [r9, #-1]
 8011a70:	f1a2 0902 	sub.w	r9, r2, #2
 8011a74:	ab3a      	add	r3, sp, #232	@ 0xe8
 8011a76:	eba3 0309 	sub.w	r3, r3, r9
 8011a7a:	9c01      	ldr	r4, [sp, #4]
 8011a7c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8011a80:	9301      	str	r3, [sp, #4]
 8011a82:	e5bb      	b.n	80115fc <_vfiprintf_r+0x480>
 8011a84:	080168cb 	.word	0x080168cb
 8011a88:	080168bb 	.word	0x080168bb

08011a8c <__sbprintf>:
 8011a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a8e:	461f      	mov	r7, r3
 8011a90:	898b      	ldrh	r3, [r1, #12]
 8011a92:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8011a96:	f023 0302 	bic.w	r3, r3, #2
 8011a9a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011a9e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8011aa0:	9319      	str	r3, [sp, #100]	@ 0x64
 8011aa2:	89cb      	ldrh	r3, [r1, #14]
 8011aa4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011aa8:	69cb      	ldr	r3, [r1, #28]
 8011aaa:	9307      	str	r3, [sp, #28]
 8011aac:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8011aae:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ab0:	ab1a      	add	r3, sp, #104	@ 0x68
 8011ab2:	9300      	str	r3, [sp, #0]
 8011ab4:	9304      	str	r3, [sp, #16]
 8011ab6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011aba:	4615      	mov	r5, r2
 8011abc:	4606      	mov	r6, r0
 8011abe:	9302      	str	r3, [sp, #8]
 8011ac0:	9305      	str	r3, [sp, #20]
 8011ac2:	a816      	add	r0, sp, #88	@ 0x58
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	460c      	mov	r4, r1
 8011ac8:	9306      	str	r3, [sp, #24]
 8011aca:	f7fd fd39 	bl	800f540 <__retarget_lock_init_recursive>
 8011ace:	462a      	mov	r2, r5
 8011ad0:	463b      	mov	r3, r7
 8011ad2:	4669      	mov	r1, sp
 8011ad4:	4630      	mov	r0, r6
 8011ad6:	f7ff fb51 	bl	801117c <_vfiprintf_r>
 8011ada:	1e05      	subs	r5, r0, #0
 8011adc:	db07      	blt.n	8011aee <__sbprintf+0x62>
 8011ade:	4669      	mov	r1, sp
 8011ae0:	4630      	mov	r0, r6
 8011ae2:	f000 f8f1 	bl	8011cc8 <_fflush_r>
 8011ae6:	2800      	cmp	r0, #0
 8011ae8:	bf18      	it	ne
 8011aea:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8011aee:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011af2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8011af4:	065b      	lsls	r3, r3, #25
 8011af6:	bf42      	ittt	mi
 8011af8:	89a3      	ldrhmi	r3, [r4, #12]
 8011afa:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8011afe:	81a3      	strhmi	r3, [r4, #12]
 8011b00:	f7fd fd1f 	bl	800f542 <__retarget_lock_close_recursive>
 8011b04:	4628      	mov	r0, r5
 8011b06:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8011b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b0c <_fclose_r>:
 8011b0c:	b570      	push	{r4, r5, r6, lr}
 8011b0e:	4605      	mov	r5, r0
 8011b10:	460c      	mov	r4, r1
 8011b12:	b1b1      	cbz	r1, 8011b42 <_fclose_r+0x36>
 8011b14:	b118      	cbz	r0, 8011b1e <_fclose_r+0x12>
 8011b16:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8011b18:	b90b      	cbnz	r3, 8011b1e <_fclose_r+0x12>
 8011b1a:	f7fd fb95 	bl	800f248 <__sinit>
 8011b1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b20:	07de      	lsls	r6, r3, #31
 8011b22:	d405      	bmi.n	8011b30 <_fclose_r+0x24>
 8011b24:	89a3      	ldrh	r3, [r4, #12]
 8011b26:	0598      	lsls	r0, r3, #22
 8011b28:	d402      	bmi.n	8011b30 <_fclose_r+0x24>
 8011b2a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b2c:	f7fd fd0a 	bl	800f544 <__retarget_lock_acquire_recursive>
 8011b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b34:	b943      	cbnz	r3, 8011b48 <_fclose_r+0x3c>
 8011b36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b38:	07d9      	lsls	r1, r3, #31
 8011b3a:	d402      	bmi.n	8011b42 <_fclose_r+0x36>
 8011b3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b3e:	f7fd fd02 	bl	800f546 <__retarget_lock_release_recursive>
 8011b42:	2600      	movs	r6, #0
 8011b44:	4630      	mov	r0, r6
 8011b46:	bd70      	pop	{r4, r5, r6, pc}
 8011b48:	4621      	mov	r1, r4
 8011b4a:	4628      	mov	r0, r5
 8011b4c:	f000 f834 	bl	8011bb8 <__sflush_r>
 8011b50:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8011b52:	4606      	mov	r6, r0
 8011b54:	b133      	cbz	r3, 8011b64 <_fclose_r+0x58>
 8011b56:	69e1      	ldr	r1, [r4, #28]
 8011b58:	4628      	mov	r0, r5
 8011b5a:	4798      	blx	r3
 8011b5c:	2800      	cmp	r0, #0
 8011b5e:	bfb8      	it	lt
 8011b60:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 8011b64:	89a3      	ldrh	r3, [r4, #12]
 8011b66:	061a      	lsls	r2, r3, #24
 8011b68:	d503      	bpl.n	8011b72 <_fclose_r+0x66>
 8011b6a:	6921      	ldr	r1, [r4, #16]
 8011b6c:	4628      	mov	r0, r5
 8011b6e:	f7fd fd5f 	bl	800f630 <_free_r>
 8011b72:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011b74:	b141      	cbz	r1, 8011b88 <_fclose_r+0x7c>
 8011b76:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8011b7a:	4299      	cmp	r1, r3
 8011b7c:	d002      	beq.n	8011b84 <_fclose_r+0x78>
 8011b7e:	4628      	mov	r0, r5
 8011b80:	f7fd fd56 	bl	800f630 <_free_r>
 8011b84:	2300      	movs	r3, #0
 8011b86:	6323      	str	r3, [r4, #48]	@ 0x30
 8011b88:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011b8a:	b121      	cbz	r1, 8011b96 <_fclose_r+0x8a>
 8011b8c:	4628      	mov	r0, r5
 8011b8e:	f7fd fd4f 	bl	800f630 <_free_r>
 8011b92:	2300      	movs	r3, #0
 8011b94:	6463      	str	r3, [r4, #68]	@ 0x44
 8011b96:	f7fd fb4b 	bl	800f230 <__sfp_lock_acquire>
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	81a3      	strh	r3, [r4, #12]
 8011b9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ba0:	07db      	lsls	r3, r3, #31
 8011ba2:	d402      	bmi.n	8011baa <_fclose_r+0x9e>
 8011ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ba6:	f7fd fcce 	bl	800f546 <__retarget_lock_release_recursive>
 8011baa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011bac:	f7fd fcc9 	bl	800f542 <__retarget_lock_close_recursive>
 8011bb0:	f7fd fb44 	bl	800f23c <__sfp_lock_release>
 8011bb4:	e7c6      	b.n	8011b44 <_fclose_r+0x38>
	...

08011bb8 <__sflush_r>:
 8011bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bbc:	4605      	mov	r5, r0
 8011bbe:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8011bc2:	0706      	lsls	r6, r0, #28
 8011bc4:	460c      	mov	r4, r1
 8011bc6:	d457      	bmi.n	8011c78 <__sflush_r+0xc0>
 8011bc8:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 8011bcc:	818b      	strh	r3, [r1, #12]
 8011bce:	684b      	ldr	r3, [r1, #4]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	dc02      	bgt.n	8011bda <__sflush_r+0x22>
 8011bd4:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	dd4c      	ble.n	8011c74 <__sflush_r+0xbc>
 8011bda:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011bdc:	2e00      	cmp	r6, #0
 8011bde:	d049      	beq.n	8011c74 <__sflush_r+0xbc>
 8011be0:	2300      	movs	r3, #0
 8011be2:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 8011be6:	682f      	ldr	r7, [r5, #0]
 8011be8:	69e1      	ldr	r1, [r4, #28]
 8011bea:	602b      	str	r3, [r5, #0]
 8011bec:	d034      	beq.n	8011c58 <__sflush_r+0xa0>
 8011bee:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8011bf0:	89a3      	ldrh	r3, [r4, #12]
 8011bf2:	0759      	lsls	r1, r3, #29
 8011bf4:	d505      	bpl.n	8011c02 <__sflush_r+0x4a>
 8011bf6:	6863      	ldr	r3, [r4, #4]
 8011bf8:	1ad2      	subs	r2, r2, r3
 8011bfa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011bfc:	b10b      	cbz	r3, 8011c02 <__sflush_r+0x4a>
 8011bfe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011c00:	1ad2      	subs	r2, r2, r3
 8011c02:	2300      	movs	r3, #0
 8011c04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011c06:	69e1      	ldr	r1, [r4, #28]
 8011c08:	4628      	mov	r0, r5
 8011c0a:	47b0      	blx	r6
 8011c0c:	1c43      	adds	r3, r0, #1
 8011c0e:	d106      	bne.n	8011c1e <__sflush_r+0x66>
 8011c10:	682a      	ldr	r2, [r5, #0]
 8011c12:	2a1d      	cmp	r2, #29
 8011c14:	d848      	bhi.n	8011ca8 <__sflush_r+0xf0>
 8011c16:	4b2b      	ldr	r3, [pc, #172]	@ (8011cc4 <__sflush_r+0x10c>)
 8011c18:	4113      	asrs	r3, r2
 8011c1a:	07de      	lsls	r6, r3, #31
 8011c1c:	d444      	bmi.n	8011ca8 <__sflush_r+0xf0>
 8011c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c22:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8011c26:	81a2      	strh	r2, [r4, #12]
 8011c28:	2200      	movs	r2, #0
 8011c2a:	6062      	str	r2, [r4, #4]
 8011c2c:	04d9      	lsls	r1, r3, #19
 8011c2e:	6922      	ldr	r2, [r4, #16]
 8011c30:	6022      	str	r2, [r4, #0]
 8011c32:	d504      	bpl.n	8011c3e <__sflush_r+0x86>
 8011c34:	1c42      	adds	r2, r0, #1
 8011c36:	d101      	bne.n	8011c3c <__sflush_r+0x84>
 8011c38:	682b      	ldr	r3, [r5, #0]
 8011c3a:	b903      	cbnz	r3, 8011c3e <__sflush_r+0x86>
 8011c3c:	6520      	str	r0, [r4, #80]	@ 0x50
 8011c3e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011c40:	602f      	str	r7, [r5, #0]
 8011c42:	b1b9      	cbz	r1, 8011c74 <__sflush_r+0xbc>
 8011c44:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8011c48:	4299      	cmp	r1, r3
 8011c4a:	d002      	beq.n	8011c52 <__sflush_r+0x9a>
 8011c4c:	4628      	mov	r0, r5
 8011c4e:	f7fd fcef 	bl	800f630 <_free_r>
 8011c52:	2300      	movs	r3, #0
 8011c54:	6323      	str	r3, [r4, #48]	@ 0x30
 8011c56:	e00d      	b.n	8011c74 <__sflush_r+0xbc>
 8011c58:	2301      	movs	r3, #1
 8011c5a:	4628      	mov	r0, r5
 8011c5c:	47b0      	blx	r6
 8011c5e:	4602      	mov	r2, r0
 8011c60:	1c50      	adds	r0, r2, #1
 8011c62:	d1c5      	bne.n	8011bf0 <__sflush_r+0x38>
 8011c64:	682b      	ldr	r3, [r5, #0]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d0c2      	beq.n	8011bf0 <__sflush_r+0x38>
 8011c6a:	2b1d      	cmp	r3, #29
 8011c6c:	d001      	beq.n	8011c72 <__sflush_r+0xba>
 8011c6e:	2b16      	cmp	r3, #22
 8011c70:	d11a      	bne.n	8011ca8 <__sflush_r+0xf0>
 8011c72:	602f      	str	r7, [r5, #0]
 8011c74:	2000      	movs	r0, #0
 8011c76:	e01e      	b.n	8011cb6 <__sflush_r+0xfe>
 8011c78:	690f      	ldr	r7, [r1, #16]
 8011c7a:	2f00      	cmp	r7, #0
 8011c7c:	d0fa      	beq.n	8011c74 <__sflush_r+0xbc>
 8011c7e:	0783      	lsls	r3, r0, #30
 8011c80:	680e      	ldr	r6, [r1, #0]
 8011c82:	bf08      	it	eq
 8011c84:	694b      	ldreq	r3, [r1, #20]
 8011c86:	600f      	str	r7, [r1, #0]
 8011c88:	bf18      	it	ne
 8011c8a:	2300      	movne	r3, #0
 8011c8c:	eba6 0807 	sub.w	r8, r6, r7
 8011c90:	608b      	str	r3, [r1, #8]
 8011c92:	f1b8 0f00 	cmp.w	r8, #0
 8011c96:	dded      	ble.n	8011c74 <__sflush_r+0xbc>
 8011c98:	69e1      	ldr	r1, [r4, #28]
 8011c9a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8011c9c:	4643      	mov	r3, r8
 8011c9e:	463a      	mov	r2, r7
 8011ca0:	4628      	mov	r0, r5
 8011ca2:	47b0      	blx	r6
 8011ca4:	2800      	cmp	r0, #0
 8011ca6:	dc08      	bgt.n	8011cba <__sflush_r+0x102>
 8011ca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cb0:	81a3      	strh	r3, [r4, #12]
 8011cb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cba:	4407      	add	r7, r0
 8011cbc:	eba8 0800 	sub.w	r8, r8, r0
 8011cc0:	e7e7      	b.n	8011c92 <__sflush_r+0xda>
 8011cc2:	bf00      	nop
 8011cc4:	dfbffffe 	.word	0xdfbffffe

08011cc8 <_fflush_r>:
 8011cc8:	b538      	push	{r3, r4, r5, lr}
 8011cca:	460c      	mov	r4, r1
 8011ccc:	4605      	mov	r5, r0
 8011cce:	b118      	cbz	r0, 8011cd8 <_fflush_r+0x10>
 8011cd0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8011cd2:	b90b      	cbnz	r3, 8011cd8 <_fflush_r+0x10>
 8011cd4:	f7fd fab8 	bl	800f248 <__sinit>
 8011cd8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8011cdc:	b1b8      	cbz	r0, 8011d0e <_fflush_r+0x46>
 8011cde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ce0:	07db      	lsls	r3, r3, #31
 8011ce2:	d404      	bmi.n	8011cee <_fflush_r+0x26>
 8011ce4:	0581      	lsls	r1, r0, #22
 8011ce6:	d402      	bmi.n	8011cee <_fflush_r+0x26>
 8011ce8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011cea:	f7fd fc2b 	bl	800f544 <__retarget_lock_acquire_recursive>
 8011cee:	4628      	mov	r0, r5
 8011cf0:	4621      	mov	r1, r4
 8011cf2:	f7ff ff61 	bl	8011bb8 <__sflush_r>
 8011cf6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011cf8:	07da      	lsls	r2, r3, #31
 8011cfa:	4605      	mov	r5, r0
 8011cfc:	d405      	bmi.n	8011d0a <_fflush_r+0x42>
 8011cfe:	89a3      	ldrh	r3, [r4, #12]
 8011d00:	059b      	lsls	r3, r3, #22
 8011d02:	d402      	bmi.n	8011d0a <_fflush_r+0x42>
 8011d04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011d06:	f7fd fc1e 	bl	800f546 <__retarget_lock_release_recursive>
 8011d0a:	4628      	mov	r0, r5
 8011d0c:	bd38      	pop	{r3, r4, r5, pc}
 8011d0e:	4605      	mov	r5, r0
 8011d10:	e7fb      	b.n	8011d0a <_fflush_r+0x42>
	...

08011d14 <__sfvwrite_r>:
 8011d14:	6893      	ldr	r3, [r2, #8]
 8011d16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d1a:	4606      	mov	r6, r0
 8011d1c:	460c      	mov	r4, r1
 8011d1e:	4691      	mov	r9, r2
 8011d20:	b91b      	cbnz	r3, 8011d2a <__sfvwrite_r+0x16>
 8011d22:	2000      	movs	r0, #0
 8011d24:	b003      	add	sp, #12
 8011d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d2a:	898b      	ldrh	r3, [r1, #12]
 8011d2c:	0718      	lsls	r0, r3, #28
 8011d2e:	d550      	bpl.n	8011dd2 <__sfvwrite_r+0xbe>
 8011d30:	690b      	ldr	r3, [r1, #16]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d04d      	beq.n	8011dd2 <__sfvwrite_r+0xbe>
 8011d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d3a:	f8d9 8000 	ldr.w	r8, [r9]
 8011d3e:	f013 0702 	ands.w	r7, r3, #2
 8011d42:	d16b      	bne.n	8011e1c <__sfvwrite_r+0x108>
 8011d44:	f013 0301 	ands.w	r3, r3, #1
 8011d48:	f000 809c 	beq.w	8011e84 <__sfvwrite_r+0x170>
 8011d4c:	4638      	mov	r0, r7
 8011d4e:	46ba      	mov	sl, r7
 8011d50:	46bb      	mov	fp, r7
 8011d52:	f1bb 0f00 	cmp.w	fp, #0
 8011d56:	f000 8103 	beq.w	8011f60 <__sfvwrite_r+0x24c>
 8011d5a:	b950      	cbnz	r0, 8011d72 <__sfvwrite_r+0x5e>
 8011d5c:	465a      	mov	r2, fp
 8011d5e:	210a      	movs	r1, #10
 8011d60:	4650      	mov	r0, sl
 8011d62:	f7ee fa5d 	bl	8000220 <memchr>
 8011d66:	2800      	cmp	r0, #0
 8011d68:	f000 8100 	beq.w	8011f6c <__sfvwrite_r+0x258>
 8011d6c:	3001      	adds	r0, #1
 8011d6e:	eba0 070a 	sub.w	r7, r0, sl
 8011d72:	6820      	ldr	r0, [r4, #0]
 8011d74:	6921      	ldr	r1, [r4, #16]
 8011d76:	68a5      	ldr	r5, [r4, #8]
 8011d78:	6963      	ldr	r3, [r4, #20]
 8011d7a:	455f      	cmp	r7, fp
 8011d7c:	463a      	mov	r2, r7
 8011d7e:	bf28      	it	cs
 8011d80:	465a      	movcs	r2, fp
 8011d82:	4288      	cmp	r0, r1
 8011d84:	f240 80f5 	bls.w	8011f72 <__sfvwrite_r+0x25e>
 8011d88:	441d      	add	r5, r3
 8011d8a:	42aa      	cmp	r2, r5
 8011d8c:	f340 80f1 	ble.w	8011f72 <__sfvwrite_r+0x25e>
 8011d90:	4651      	mov	r1, sl
 8011d92:	462a      	mov	r2, r5
 8011d94:	f7fd fb41 	bl	800f41a <memmove>
 8011d98:	6823      	ldr	r3, [r4, #0]
 8011d9a:	442b      	add	r3, r5
 8011d9c:	6023      	str	r3, [r4, #0]
 8011d9e:	4621      	mov	r1, r4
 8011da0:	4630      	mov	r0, r6
 8011da2:	f7ff ff91 	bl	8011cc8 <_fflush_r>
 8011da6:	2800      	cmp	r0, #0
 8011da8:	d167      	bne.n	8011e7a <__sfvwrite_r+0x166>
 8011daa:	1b7f      	subs	r7, r7, r5
 8011dac:	f040 80f9 	bne.w	8011fa2 <__sfvwrite_r+0x28e>
 8011db0:	4621      	mov	r1, r4
 8011db2:	4630      	mov	r0, r6
 8011db4:	f7ff ff88 	bl	8011cc8 <_fflush_r>
 8011db8:	2800      	cmp	r0, #0
 8011dba:	d15e      	bne.n	8011e7a <__sfvwrite_r+0x166>
 8011dbc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011dc0:	1b5b      	subs	r3, r3, r5
 8011dc2:	44aa      	add	sl, r5
 8011dc4:	ebab 0b05 	sub.w	fp, fp, r5
 8011dc8:	f8c9 3008 	str.w	r3, [r9, #8]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d1c0      	bne.n	8011d52 <__sfvwrite_r+0x3e>
 8011dd0:	e7a7      	b.n	8011d22 <__sfvwrite_r+0xe>
 8011dd2:	4621      	mov	r1, r4
 8011dd4:	4630      	mov	r0, r6
 8011dd6:	f000 f8e9 	bl	8011fac <__swsetup_r>
 8011dda:	2800      	cmp	r0, #0
 8011ddc:	d0ab      	beq.n	8011d36 <__sfvwrite_r+0x22>
 8011dde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011de2:	e79f      	b.n	8011d24 <__sfvwrite_r+0x10>
 8011de4:	e9d8 a500 	ldrd	sl, r5, [r8]
 8011de8:	f108 0808 	add.w	r8, r8, #8
 8011dec:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8011df0:	69e1      	ldr	r1, [r4, #28]
 8011df2:	2d00      	cmp	r5, #0
 8011df4:	d0f6      	beq.n	8011de4 <__sfvwrite_r+0xd0>
 8011df6:	42bd      	cmp	r5, r7
 8011df8:	462b      	mov	r3, r5
 8011dfa:	4652      	mov	r2, sl
 8011dfc:	bf28      	it	cs
 8011dfe:	463b      	movcs	r3, r7
 8011e00:	4630      	mov	r0, r6
 8011e02:	47d8      	blx	fp
 8011e04:	2800      	cmp	r0, #0
 8011e06:	dd38      	ble.n	8011e7a <__sfvwrite_r+0x166>
 8011e08:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011e0c:	1a1b      	subs	r3, r3, r0
 8011e0e:	4482      	add	sl, r0
 8011e10:	1a2d      	subs	r5, r5, r0
 8011e12:	f8c9 3008 	str.w	r3, [r9, #8]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d1e8      	bne.n	8011dec <__sfvwrite_r+0xd8>
 8011e1a:	e782      	b.n	8011d22 <__sfvwrite_r+0xe>
 8011e1c:	f04f 0a00 	mov.w	sl, #0
 8011e20:	4f61      	ldr	r7, [pc, #388]	@ (8011fa8 <__sfvwrite_r+0x294>)
 8011e22:	4655      	mov	r5, sl
 8011e24:	e7e2      	b.n	8011dec <__sfvwrite_r+0xd8>
 8011e26:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8011e2a:	f108 0808 	add.w	r8, r8, #8
 8011e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e32:	6820      	ldr	r0, [r4, #0]
 8011e34:	68a2      	ldr	r2, [r4, #8]
 8011e36:	f1ba 0f00 	cmp.w	sl, #0
 8011e3a:	d0f4      	beq.n	8011e26 <__sfvwrite_r+0x112>
 8011e3c:	0599      	lsls	r1, r3, #22
 8011e3e:	d563      	bpl.n	8011f08 <__sfvwrite_r+0x1f4>
 8011e40:	4552      	cmp	r2, sl
 8011e42:	d836      	bhi.n	8011eb2 <__sfvwrite_r+0x19e>
 8011e44:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 8011e48:	d033      	beq.n	8011eb2 <__sfvwrite_r+0x19e>
 8011e4a:	6921      	ldr	r1, [r4, #16]
 8011e4c:	6965      	ldr	r5, [r4, #20]
 8011e4e:	eba0 0b01 	sub.w	fp, r0, r1
 8011e52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011e5a:	f10b 0201 	add.w	r2, fp, #1
 8011e5e:	106d      	asrs	r5, r5, #1
 8011e60:	4452      	add	r2, sl
 8011e62:	4295      	cmp	r5, r2
 8011e64:	bf38      	it	cc
 8011e66:	4615      	movcc	r5, r2
 8011e68:	055b      	lsls	r3, r3, #21
 8011e6a:	d53d      	bpl.n	8011ee8 <__sfvwrite_r+0x1d4>
 8011e6c:	4629      	mov	r1, r5
 8011e6e:	4630      	mov	r0, r6
 8011e70:	f7fd fc9e 	bl	800f7b0 <_malloc_r>
 8011e74:	b948      	cbnz	r0, 8011e8a <__sfvwrite_r+0x176>
 8011e76:	230c      	movs	r3, #12
 8011e78:	6033      	str	r3, [r6, #0]
 8011e7a:	89a3      	ldrh	r3, [r4, #12]
 8011e7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e80:	81a3      	strh	r3, [r4, #12]
 8011e82:	e7ac      	b.n	8011dde <__sfvwrite_r+0xca>
 8011e84:	461f      	mov	r7, r3
 8011e86:	469a      	mov	sl, r3
 8011e88:	e7d1      	b.n	8011e2e <__sfvwrite_r+0x11a>
 8011e8a:	465a      	mov	r2, fp
 8011e8c:	6921      	ldr	r1, [r4, #16]
 8011e8e:	9001      	str	r0, [sp, #4]
 8011e90:	f7fd fb5a 	bl	800f548 <memcpy>
 8011e94:	89a2      	ldrh	r2, [r4, #12]
 8011e96:	9b01      	ldr	r3, [sp, #4]
 8011e98:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8011e9c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8011ea0:	81a2      	strh	r2, [r4, #12]
 8011ea2:	6123      	str	r3, [r4, #16]
 8011ea4:	6165      	str	r5, [r4, #20]
 8011ea6:	445b      	add	r3, fp
 8011ea8:	eba5 050b 	sub.w	r5, r5, fp
 8011eac:	6023      	str	r3, [r4, #0]
 8011eae:	4652      	mov	r2, sl
 8011eb0:	60a5      	str	r5, [r4, #8]
 8011eb2:	4552      	cmp	r2, sl
 8011eb4:	bf28      	it	cs
 8011eb6:	4652      	movcs	r2, sl
 8011eb8:	6820      	ldr	r0, [r4, #0]
 8011eba:	9201      	str	r2, [sp, #4]
 8011ebc:	4639      	mov	r1, r7
 8011ebe:	f7fd faac 	bl	800f41a <memmove>
 8011ec2:	68a3      	ldr	r3, [r4, #8]
 8011ec4:	9a01      	ldr	r2, [sp, #4]
 8011ec6:	1a9b      	subs	r3, r3, r2
 8011ec8:	60a3      	str	r3, [r4, #8]
 8011eca:	6823      	ldr	r3, [r4, #0]
 8011ecc:	4413      	add	r3, r2
 8011ece:	4655      	mov	r5, sl
 8011ed0:	6023      	str	r3, [r4, #0]
 8011ed2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011ed6:	1b5b      	subs	r3, r3, r5
 8011ed8:	442f      	add	r7, r5
 8011eda:	ebaa 0a05 	sub.w	sl, sl, r5
 8011ede:	f8c9 3008 	str.w	r3, [r9, #8]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d1a3      	bne.n	8011e2e <__sfvwrite_r+0x11a>
 8011ee6:	e71c      	b.n	8011d22 <__sfvwrite_r+0xe>
 8011ee8:	462a      	mov	r2, r5
 8011eea:	4630      	mov	r0, r6
 8011eec:	f001 fb5e 	bl	80135ac <_realloc_r>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	2800      	cmp	r0, #0
 8011ef4:	d1d5      	bne.n	8011ea2 <__sfvwrite_r+0x18e>
 8011ef6:	6921      	ldr	r1, [r4, #16]
 8011ef8:	4630      	mov	r0, r6
 8011efa:	f7fd fb99 	bl	800f630 <_free_r>
 8011efe:	89a3      	ldrh	r3, [r4, #12]
 8011f00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011f04:	81a3      	strh	r3, [r4, #12]
 8011f06:	e7b6      	b.n	8011e76 <__sfvwrite_r+0x162>
 8011f08:	6923      	ldr	r3, [r4, #16]
 8011f0a:	4283      	cmp	r3, r0
 8011f0c:	d302      	bcc.n	8011f14 <__sfvwrite_r+0x200>
 8011f0e:	6961      	ldr	r1, [r4, #20]
 8011f10:	4551      	cmp	r1, sl
 8011f12:	d915      	bls.n	8011f40 <__sfvwrite_r+0x22c>
 8011f14:	4552      	cmp	r2, sl
 8011f16:	bf28      	it	cs
 8011f18:	4652      	movcs	r2, sl
 8011f1a:	4639      	mov	r1, r7
 8011f1c:	4615      	mov	r5, r2
 8011f1e:	f7fd fa7c 	bl	800f41a <memmove>
 8011f22:	68a3      	ldr	r3, [r4, #8]
 8011f24:	6822      	ldr	r2, [r4, #0]
 8011f26:	1b5b      	subs	r3, r3, r5
 8011f28:	442a      	add	r2, r5
 8011f2a:	60a3      	str	r3, [r4, #8]
 8011f2c:	6022      	str	r2, [r4, #0]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d1cf      	bne.n	8011ed2 <__sfvwrite_r+0x1be>
 8011f32:	4621      	mov	r1, r4
 8011f34:	4630      	mov	r0, r6
 8011f36:	f7ff fec7 	bl	8011cc8 <_fflush_r>
 8011f3a:	2800      	cmp	r0, #0
 8011f3c:	d0c9      	beq.n	8011ed2 <__sfvwrite_r+0x1be>
 8011f3e:	e79c      	b.n	8011e7a <__sfvwrite_r+0x166>
 8011f40:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011f44:	4553      	cmp	r3, sl
 8011f46:	bf28      	it	cs
 8011f48:	4653      	movcs	r3, sl
 8011f4a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8011f4c:	fb93 f3f1 	sdiv	r3, r3, r1
 8011f50:	463a      	mov	r2, r7
 8011f52:	434b      	muls	r3, r1
 8011f54:	4630      	mov	r0, r6
 8011f56:	69e1      	ldr	r1, [r4, #28]
 8011f58:	47a8      	blx	r5
 8011f5a:	1e05      	subs	r5, r0, #0
 8011f5c:	dcb9      	bgt.n	8011ed2 <__sfvwrite_r+0x1be>
 8011f5e:	e78c      	b.n	8011e7a <__sfvwrite_r+0x166>
 8011f60:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8011f64:	2000      	movs	r0, #0
 8011f66:	f108 0808 	add.w	r8, r8, #8
 8011f6a:	e6f2      	b.n	8011d52 <__sfvwrite_r+0x3e>
 8011f6c:	f10b 0701 	add.w	r7, fp, #1
 8011f70:	e6ff      	b.n	8011d72 <__sfvwrite_r+0x5e>
 8011f72:	4293      	cmp	r3, r2
 8011f74:	dc08      	bgt.n	8011f88 <__sfvwrite_r+0x274>
 8011f76:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8011f78:	69e1      	ldr	r1, [r4, #28]
 8011f7a:	4652      	mov	r2, sl
 8011f7c:	4630      	mov	r0, r6
 8011f7e:	47a8      	blx	r5
 8011f80:	1e05      	subs	r5, r0, #0
 8011f82:	f73f af12 	bgt.w	8011daa <__sfvwrite_r+0x96>
 8011f86:	e778      	b.n	8011e7a <__sfvwrite_r+0x166>
 8011f88:	4651      	mov	r1, sl
 8011f8a:	9201      	str	r2, [sp, #4]
 8011f8c:	f7fd fa45 	bl	800f41a <memmove>
 8011f90:	9a01      	ldr	r2, [sp, #4]
 8011f92:	68a3      	ldr	r3, [r4, #8]
 8011f94:	1a9b      	subs	r3, r3, r2
 8011f96:	60a3      	str	r3, [r4, #8]
 8011f98:	6823      	ldr	r3, [r4, #0]
 8011f9a:	4413      	add	r3, r2
 8011f9c:	6023      	str	r3, [r4, #0]
 8011f9e:	4615      	mov	r5, r2
 8011fa0:	e703      	b.n	8011daa <__sfvwrite_r+0x96>
 8011fa2:	2001      	movs	r0, #1
 8011fa4:	e70a      	b.n	8011dbc <__sfvwrite_r+0xa8>
 8011fa6:	bf00      	nop
 8011fa8:	7ffffc00 	.word	0x7ffffc00

08011fac <__swsetup_r>:
 8011fac:	b538      	push	{r3, r4, r5, lr}
 8011fae:	4b29      	ldr	r3, [pc, #164]	@ (8012054 <__swsetup_r+0xa8>)
 8011fb0:	4605      	mov	r5, r0
 8011fb2:	6818      	ldr	r0, [r3, #0]
 8011fb4:	460c      	mov	r4, r1
 8011fb6:	b118      	cbz	r0, 8011fc0 <__swsetup_r+0x14>
 8011fb8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8011fba:	b90b      	cbnz	r3, 8011fc0 <__swsetup_r+0x14>
 8011fbc:	f7fd f944 	bl	800f248 <__sinit>
 8011fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fc4:	0719      	lsls	r1, r3, #28
 8011fc6:	d422      	bmi.n	801200e <__swsetup_r+0x62>
 8011fc8:	06da      	lsls	r2, r3, #27
 8011fca:	d407      	bmi.n	8011fdc <__swsetup_r+0x30>
 8011fcc:	2209      	movs	r2, #9
 8011fce:	602a      	str	r2, [r5, #0]
 8011fd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011fd4:	81a3      	strh	r3, [r4, #12]
 8011fd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011fda:	e033      	b.n	8012044 <__swsetup_r+0x98>
 8011fdc:	0758      	lsls	r0, r3, #29
 8011fde:	d512      	bpl.n	8012006 <__swsetup_r+0x5a>
 8011fe0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011fe2:	b141      	cbz	r1, 8011ff6 <__swsetup_r+0x4a>
 8011fe4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8011fe8:	4299      	cmp	r1, r3
 8011fea:	d002      	beq.n	8011ff2 <__swsetup_r+0x46>
 8011fec:	4628      	mov	r0, r5
 8011fee:	f7fd fb1f 	bl	800f630 <_free_r>
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	6323      	str	r3, [r4, #48]	@ 0x30
 8011ff6:	89a3      	ldrh	r3, [r4, #12]
 8011ff8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011ffc:	81a3      	strh	r3, [r4, #12]
 8011ffe:	2300      	movs	r3, #0
 8012000:	6063      	str	r3, [r4, #4]
 8012002:	6923      	ldr	r3, [r4, #16]
 8012004:	6023      	str	r3, [r4, #0]
 8012006:	89a3      	ldrh	r3, [r4, #12]
 8012008:	f043 0308 	orr.w	r3, r3, #8
 801200c:	81a3      	strh	r3, [r4, #12]
 801200e:	6923      	ldr	r3, [r4, #16]
 8012010:	b94b      	cbnz	r3, 8012026 <__swsetup_r+0x7a>
 8012012:	89a3      	ldrh	r3, [r4, #12]
 8012014:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801201c:	d003      	beq.n	8012026 <__swsetup_r+0x7a>
 801201e:	4621      	mov	r1, r4
 8012020:	4628      	mov	r0, r5
 8012022:	f001 fcb7 	bl	8013994 <__smakebuf_r>
 8012026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801202a:	f013 0201 	ands.w	r2, r3, #1
 801202e:	d00a      	beq.n	8012046 <__swsetup_r+0x9a>
 8012030:	2200      	movs	r2, #0
 8012032:	60a2      	str	r2, [r4, #8]
 8012034:	6962      	ldr	r2, [r4, #20]
 8012036:	4252      	negs	r2, r2
 8012038:	61a2      	str	r2, [r4, #24]
 801203a:	6922      	ldr	r2, [r4, #16]
 801203c:	b942      	cbnz	r2, 8012050 <__swsetup_r+0xa4>
 801203e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012042:	d1c5      	bne.n	8011fd0 <__swsetup_r+0x24>
 8012044:	bd38      	pop	{r3, r4, r5, pc}
 8012046:	0799      	lsls	r1, r3, #30
 8012048:	bf58      	it	pl
 801204a:	6962      	ldrpl	r2, [r4, #20]
 801204c:	60a2      	str	r2, [r4, #8]
 801204e:	e7f4      	b.n	801203a <__swsetup_r+0x8e>
 8012050:	2000      	movs	r0, #0
 8012052:	e7f7      	b.n	8012044 <__swsetup_r+0x98>
 8012054:	20000038 	.word	0x20000038

08012058 <__fputwc>:
 8012058:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801205c:	4680      	mov	r8, r0
 801205e:	460f      	mov	r7, r1
 8012060:	4614      	mov	r4, r2
 8012062:	f000 f877 	bl	8012154 <__locale_mb_cur_max>
 8012066:	2801      	cmp	r0, #1
 8012068:	4605      	mov	r5, r0
 801206a:	d11b      	bne.n	80120a4 <__fputwc+0x4c>
 801206c:	1e7b      	subs	r3, r7, #1
 801206e:	2bfe      	cmp	r3, #254	@ 0xfe
 8012070:	d818      	bhi.n	80120a4 <__fputwc+0x4c>
 8012072:	f88d 7004 	strb.w	r7, [sp, #4]
 8012076:	2600      	movs	r6, #0
 8012078:	f10d 0904 	add.w	r9, sp, #4
 801207c:	42ae      	cmp	r6, r5
 801207e:	d021      	beq.n	80120c4 <__fputwc+0x6c>
 8012080:	68a3      	ldr	r3, [r4, #8]
 8012082:	f816 1009 	ldrb.w	r1, [r6, r9]
 8012086:	3b01      	subs	r3, #1
 8012088:	2b00      	cmp	r3, #0
 801208a:	60a3      	str	r3, [r4, #8]
 801208c:	da04      	bge.n	8012098 <__fputwc+0x40>
 801208e:	69a2      	ldr	r2, [r4, #24]
 8012090:	4293      	cmp	r3, r2
 8012092:	db1b      	blt.n	80120cc <__fputwc+0x74>
 8012094:	290a      	cmp	r1, #10
 8012096:	d019      	beq.n	80120cc <__fputwc+0x74>
 8012098:	6823      	ldr	r3, [r4, #0]
 801209a:	1c5a      	adds	r2, r3, #1
 801209c:	6022      	str	r2, [r4, #0]
 801209e:	7019      	strb	r1, [r3, #0]
 80120a0:	3601      	adds	r6, #1
 80120a2:	e7eb      	b.n	801207c <__fputwc+0x24>
 80120a4:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 80120a8:	463a      	mov	r2, r7
 80120aa:	a901      	add	r1, sp, #4
 80120ac:	4640      	mov	r0, r8
 80120ae:	f001 fc33 	bl	8013918 <_wcrtomb_r>
 80120b2:	1c43      	adds	r3, r0, #1
 80120b4:	4605      	mov	r5, r0
 80120b6:	d1de      	bne.n	8012076 <__fputwc+0x1e>
 80120b8:	89a3      	ldrh	r3, [r4, #12]
 80120ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120be:	81a3      	strh	r3, [r4, #12]
 80120c0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80120c4:	4638      	mov	r0, r7
 80120c6:	b003      	add	sp, #12
 80120c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120cc:	4622      	mov	r2, r4
 80120ce:	4640      	mov	r0, r8
 80120d0:	f001 fc9c 	bl	8013a0c <__swbuf_r>
 80120d4:	3001      	adds	r0, #1
 80120d6:	d1e3      	bne.n	80120a0 <__fputwc+0x48>
 80120d8:	e7f2      	b.n	80120c0 <__fputwc+0x68>

080120da <_fputwc_r>:
 80120da:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 80120dc:	07db      	lsls	r3, r3, #31
 80120de:	b570      	push	{r4, r5, r6, lr}
 80120e0:	4605      	mov	r5, r0
 80120e2:	460e      	mov	r6, r1
 80120e4:	4614      	mov	r4, r2
 80120e6:	d405      	bmi.n	80120f4 <_fputwc_r+0x1a>
 80120e8:	8993      	ldrh	r3, [r2, #12]
 80120ea:	0598      	lsls	r0, r3, #22
 80120ec:	d402      	bmi.n	80120f4 <_fputwc_r+0x1a>
 80120ee:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 80120f0:	f7fd fa28 	bl	800f544 <__retarget_lock_acquire_recursive>
 80120f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120f8:	0499      	lsls	r1, r3, #18
 80120fa:	d406      	bmi.n	801210a <_fputwc_r+0x30>
 80120fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8012100:	81a3      	strh	r3, [r4, #12]
 8012102:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012104:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8012108:	6663      	str	r3, [r4, #100]	@ 0x64
 801210a:	4622      	mov	r2, r4
 801210c:	4628      	mov	r0, r5
 801210e:	4631      	mov	r1, r6
 8012110:	f7ff ffa2 	bl	8012058 <__fputwc>
 8012114:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012116:	07da      	lsls	r2, r3, #31
 8012118:	4605      	mov	r5, r0
 801211a:	d405      	bmi.n	8012128 <_fputwc_r+0x4e>
 801211c:	89a3      	ldrh	r3, [r4, #12]
 801211e:	059b      	lsls	r3, r3, #22
 8012120:	d402      	bmi.n	8012128 <_fputwc_r+0x4e>
 8012122:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012124:	f7fd fa0f 	bl	800f546 <__retarget_lock_release_recursive>
 8012128:	4628      	mov	r0, r5
 801212a:	bd70      	pop	{r4, r5, r6, pc}

0801212c <strncpy>:
 801212c:	b510      	push	{r4, lr}
 801212e:	3901      	subs	r1, #1
 8012130:	4603      	mov	r3, r0
 8012132:	b132      	cbz	r2, 8012142 <strncpy+0x16>
 8012134:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012138:	f803 4b01 	strb.w	r4, [r3], #1
 801213c:	3a01      	subs	r2, #1
 801213e:	2c00      	cmp	r4, #0
 8012140:	d1f7      	bne.n	8012132 <strncpy+0x6>
 8012142:	441a      	add	r2, r3
 8012144:	2100      	movs	r1, #0
 8012146:	4293      	cmp	r3, r2
 8012148:	d100      	bne.n	801214c <strncpy+0x20>
 801214a:	bd10      	pop	{r4, pc}
 801214c:	f803 1b01 	strb.w	r1, [r3], #1
 8012150:	e7f9      	b.n	8012146 <strncpy+0x1a>
	...

08012154 <__locale_mb_cur_max>:
 8012154:	4b01      	ldr	r3, [pc, #4]	@ (801215c <__locale_mb_cur_max+0x8>)
 8012156:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 801215a:	4770      	bx	lr
 801215c:	20000574 	.word	0x20000574

08012160 <_localeconv_r>:
 8012160:	4800      	ldr	r0, [pc, #0]	@ (8012164 <_localeconv_r+0x4>)
 8012162:	4770      	bx	lr
 8012164:	20000664 	.word	0x20000664

08012168 <_sbrk_r>:
 8012168:	b538      	push	{r3, r4, r5, lr}
 801216a:	4d06      	ldr	r5, [pc, #24]	@ (8012184 <_sbrk_r+0x1c>)
 801216c:	2300      	movs	r3, #0
 801216e:	4604      	mov	r4, r0
 8012170:	4608      	mov	r0, r1
 8012172:	602b      	str	r3, [r5, #0]
 8012174:	f7ef fa44 	bl	8001600 <_sbrk>
 8012178:	1c43      	adds	r3, r0, #1
 801217a:	d102      	bne.n	8012182 <_sbrk_r+0x1a>
 801217c:	682b      	ldr	r3, [r5, #0]
 801217e:	b103      	cbz	r3, 8012182 <_sbrk_r+0x1a>
 8012180:	6023      	str	r3, [r4, #0]
 8012182:	bd38      	pop	{r3, r4, r5, pc}
 8012184:	20008b84 	.word	0x20008b84

08012188 <__libc_fini_array>:
 8012188:	b538      	push	{r3, r4, r5, lr}
 801218a:	4d07      	ldr	r5, [pc, #28]	@ (80121a8 <__libc_fini_array+0x20>)
 801218c:	4c07      	ldr	r4, [pc, #28]	@ (80121ac <__libc_fini_array+0x24>)
 801218e:	1b64      	subs	r4, r4, r5
 8012190:	10a4      	asrs	r4, r4, #2
 8012192:	b91c      	cbnz	r4, 801219c <__libc_fini_array+0x14>
 8012194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012198:	f001 bd5c 	b.w	8013c54 <_fini>
 801219c:	3c01      	subs	r4, #1
 801219e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80121a2:	4798      	blx	r3
 80121a4:	e7f5      	b.n	8012192 <__libc_fini_array+0xa>
 80121a6:	bf00      	nop
 80121a8:	08016afc 	.word	0x08016afc
 80121ac:	08016b00 	.word	0x08016b00

080121b0 <sysconf>:
 80121b0:	2808      	cmp	r0, #8
 80121b2:	b508      	push	{r3, lr}
 80121b4:	d006      	beq.n	80121c4 <sysconf+0x14>
 80121b6:	f7fd f999 	bl	800f4ec <__errno>
 80121ba:	2316      	movs	r3, #22
 80121bc:	6003      	str	r3, [r0, #0]
 80121be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80121c2:	bd08      	pop	{r3, pc}
 80121c4:	2080      	movs	r0, #128	@ 0x80
 80121c6:	e7fc      	b.n	80121c2 <sysconf+0x12>

080121c8 <frexp>:
 80121c8:	b570      	push	{r4, r5, r6, lr}
 80121ca:	2100      	movs	r1, #0
 80121cc:	ec55 4b10 	vmov	r4, r5, d0
 80121d0:	6001      	str	r1, [r0, #0]
 80121d2:	4915      	ldr	r1, [pc, #84]	@ (8012228 <frexp+0x60>)
 80121d4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80121d8:	428a      	cmp	r2, r1
 80121da:	4606      	mov	r6, r0
 80121dc:	462b      	mov	r3, r5
 80121de:	d820      	bhi.n	8012222 <frexp+0x5a>
 80121e0:	4621      	mov	r1, r4
 80121e2:	4311      	orrs	r1, r2
 80121e4:	d01d      	beq.n	8012222 <frexp+0x5a>
 80121e6:	4911      	ldr	r1, [pc, #68]	@ (801222c <frexp+0x64>)
 80121e8:	4029      	ands	r1, r5
 80121ea:	b961      	cbnz	r1, 8012206 <frexp+0x3e>
 80121ec:	4b10      	ldr	r3, [pc, #64]	@ (8012230 <frexp+0x68>)
 80121ee:	2200      	movs	r2, #0
 80121f0:	4620      	mov	r0, r4
 80121f2:	4629      	mov	r1, r5
 80121f4:	f7ee fa20 	bl	8000638 <__aeabi_dmul>
 80121f8:	460b      	mov	r3, r1
 80121fa:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80121fe:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8012202:	4604      	mov	r4, r0
 8012204:	6031      	str	r1, [r6, #0]
 8012206:	6831      	ldr	r1, [r6, #0]
 8012208:	1512      	asrs	r2, r2, #20
 801220a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801220e:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 8012212:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8012216:	4411      	add	r1, r2
 8012218:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 801221c:	6031      	str	r1, [r6, #0]
 801221e:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 8012222:	ec45 4b10 	vmov	d0, r4, r5
 8012226:	bd70      	pop	{r4, r5, r6, pc}
 8012228:	7fefffff 	.word	0x7fefffff
 801222c:	7ff00000 	.word	0x7ff00000
 8012230:	43500000 	.word	0x43500000

08012234 <__register_exitproc>:
 8012234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012238:	f8df a074 	ldr.w	sl, [pc, #116]	@ 80122b0 <__register_exitproc+0x7c>
 801223c:	4606      	mov	r6, r0
 801223e:	f8da 0000 	ldr.w	r0, [sl]
 8012242:	4698      	mov	r8, r3
 8012244:	460f      	mov	r7, r1
 8012246:	4691      	mov	r9, r2
 8012248:	f7fd f97c 	bl	800f544 <__retarget_lock_acquire_recursive>
 801224c:	4b16      	ldr	r3, [pc, #88]	@ (80122a8 <__register_exitproc+0x74>)
 801224e:	681c      	ldr	r4, [r3, #0]
 8012250:	b90c      	cbnz	r4, 8012256 <__register_exitproc+0x22>
 8012252:	4c16      	ldr	r4, [pc, #88]	@ (80122ac <__register_exitproc+0x78>)
 8012254:	601c      	str	r4, [r3, #0]
 8012256:	6865      	ldr	r5, [r4, #4]
 8012258:	f8da 0000 	ldr.w	r0, [sl]
 801225c:	2d1f      	cmp	r5, #31
 801225e:	dd05      	ble.n	801226c <__register_exitproc+0x38>
 8012260:	f7fd f971 	bl	800f546 <__retarget_lock_release_recursive>
 8012264:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801226c:	b19e      	cbz	r6, 8012296 <__register_exitproc+0x62>
 801226e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8012272:	2201      	movs	r2, #1
 8012274:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8012278:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 801227c:	40aa      	lsls	r2, r5
 801227e:	4313      	orrs	r3, r2
 8012280:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8012284:	2e02      	cmp	r6, #2
 8012286:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 801228a:	bf02      	ittt	eq
 801228c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8012290:	4313      	orreq	r3, r2
 8012292:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8012296:	1c6b      	adds	r3, r5, #1
 8012298:	3502      	adds	r5, #2
 801229a:	6063      	str	r3, [r4, #4]
 801229c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80122a0:	f7fd f951 	bl	800f546 <__retarget_lock_release_recursive>
 80122a4:	2000      	movs	r0, #0
 80122a6:	e7df      	b.n	8012268 <__register_exitproc+0x34>
 80122a8:	20008b8c 	.word	0x20008b8c
 80122ac:	20008bc4 	.word	0x20008bc4
 80122b0:	20000160 	.word	0x20000160

080122b4 <quorem>:
 80122b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122b8:	6903      	ldr	r3, [r0, #16]
 80122ba:	690c      	ldr	r4, [r1, #16]
 80122bc:	42a3      	cmp	r3, r4
 80122be:	4607      	mov	r7, r0
 80122c0:	db7e      	blt.n	80123c0 <quorem+0x10c>
 80122c2:	3c01      	subs	r4, #1
 80122c4:	f101 0814 	add.w	r8, r1, #20
 80122c8:	00a3      	lsls	r3, r4, #2
 80122ca:	f100 0514 	add.w	r5, r0, #20
 80122ce:	9300      	str	r3, [sp, #0]
 80122d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80122d4:	9301      	str	r3, [sp, #4]
 80122d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80122da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80122de:	3301      	adds	r3, #1
 80122e0:	429a      	cmp	r2, r3
 80122e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80122e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80122ea:	d32e      	bcc.n	801234a <quorem+0x96>
 80122ec:	f04f 0a00 	mov.w	sl, #0
 80122f0:	46c4      	mov	ip, r8
 80122f2:	46ae      	mov	lr, r5
 80122f4:	46d3      	mov	fp, sl
 80122f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80122fa:	b298      	uxth	r0, r3
 80122fc:	fb06 a000 	mla	r0, r6, r0, sl
 8012300:	0c02      	lsrs	r2, r0, #16
 8012302:	0c1b      	lsrs	r3, r3, #16
 8012304:	fb06 2303 	mla	r3, r6, r3, r2
 8012308:	f8de 2000 	ldr.w	r2, [lr]
 801230c:	b280      	uxth	r0, r0
 801230e:	b292      	uxth	r2, r2
 8012310:	1a12      	subs	r2, r2, r0
 8012312:	445a      	add	r2, fp
 8012314:	f8de 0000 	ldr.w	r0, [lr]
 8012318:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801231c:	b29b      	uxth	r3, r3
 801231e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012322:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012326:	b292      	uxth	r2, r2
 8012328:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801232c:	45e1      	cmp	r9, ip
 801232e:	f84e 2b04 	str.w	r2, [lr], #4
 8012332:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012336:	d2de      	bcs.n	80122f6 <quorem+0x42>
 8012338:	9b00      	ldr	r3, [sp, #0]
 801233a:	58eb      	ldr	r3, [r5, r3]
 801233c:	b92b      	cbnz	r3, 801234a <quorem+0x96>
 801233e:	9b01      	ldr	r3, [sp, #4]
 8012340:	3b04      	subs	r3, #4
 8012342:	429d      	cmp	r5, r3
 8012344:	461a      	mov	r2, r3
 8012346:	d32f      	bcc.n	80123a8 <quorem+0xf4>
 8012348:	613c      	str	r4, [r7, #16]
 801234a:	4638      	mov	r0, r7
 801234c:	f001 f826 	bl	801339c <__mcmp>
 8012350:	2800      	cmp	r0, #0
 8012352:	db25      	blt.n	80123a0 <quorem+0xec>
 8012354:	4629      	mov	r1, r5
 8012356:	2000      	movs	r0, #0
 8012358:	f858 2b04 	ldr.w	r2, [r8], #4
 801235c:	f8d1 c000 	ldr.w	ip, [r1]
 8012360:	fa1f fe82 	uxth.w	lr, r2
 8012364:	fa1f f38c 	uxth.w	r3, ip
 8012368:	eba3 030e 	sub.w	r3, r3, lr
 801236c:	4403      	add	r3, r0
 801236e:	0c12      	lsrs	r2, r2, #16
 8012370:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012374:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012378:	b29b      	uxth	r3, r3
 801237a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801237e:	45c1      	cmp	r9, r8
 8012380:	f841 3b04 	str.w	r3, [r1], #4
 8012384:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012388:	d2e6      	bcs.n	8012358 <quorem+0xa4>
 801238a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801238e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012392:	b922      	cbnz	r2, 801239e <quorem+0xea>
 8012394:	3b04      	subs	r3, #4
 8012396:	429d      	cmp	r5, r3
 8012398:	461a      	mov	r2, r3
 801239a:	d30b      	bcc.n	80123b4 <quorem+0x100>
 801239c:	613c      	str	r4, [r7, #16]
 801239e:	3601      	adds	r6, #1
 80123a0:	4630      	mov	r0, r6
 80123a2:	b003      	add	sp, #12
 80123a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123a8:	6812      	ldr	r2, [r2, #0]
 80123aa:	3b04      	subs	r3, #4
 80123ac:	2a00      	cmp	r2, #0
 80123ae:	d1cb      	bne.n	8012348 <quorem+0x94>
 80123b0:	3c01      	subs	r4, #1
 80123b2:	e7c6      	b.n	8012342 <quorem+0x8e>
 80123b4:	6812      	ldr	r2, [r2, #0]
 80123b6:	3b04      	subs	r3, #4
 80123b8:	2a00      	cmp	r2, #0
 80123ba:	d1ef      	bne.n	801239c <quorem+0xe8>
 80123bc:	3c01      	subs	r4, #1
 80123be:	e7ea      	b.n	8012396 <quorem+0xe2>
 80123c0:	2000      	movs	r0, #0
 80123c2:	e7ee      	b.n	80123a2 <quorem+0xee>
 80123c4:	0000      	movs	r0, r0
	...

080123c8 <_dtoa_r>:
 80123c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123cc:	b099      	sub	sp, #100	@ 0x64
 80123ce:	ed8d 0b02 	vstr	d0, [sp, #8]
 80123d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80123d4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80123d6:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80123d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80123da:	ec55 4b10 	vmov	r4, r5, d0
 80123de:	4683      	mov	fp, r0
 80123e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80123e2:	b149      	cbz	r1, 80123f8 <_dtoa_r+0x30>
 80123e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80123e6:	604a      	str	r2, [r1, #4]
 80123e8:	2301      	movs	r3, #1
 80123ea:	4093      	lsls	r3, r2
 80123ec:	608b      	str	r3, [r1, #8]
 80123ee:	f000 fdce 	bl	8012f8e <_Bfree>
 80123f2:	2300      	movs	r3, #0
 80123f4:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 80123f8:	1e2b      	subs	r3, r5, #0
 80123fa:	bfb9      	ittee	lt
 80123fc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012400:	9303      	strlt	r3, [sp, #12]
 8012402:	2300      	movge	r3, #0
 8012404:	6033      	strge	r3, [r6, #0]
 8012406:	9f03      	ldr	r7, [sp, #12]
 8012408:	4b97      	ldr	r3, [pc, #604]	@ (8012668 <_dtoa_r+0x2a0>)
 801240a:	bfbc      	itt	lt
 801240c:	2201      	movlt	r2, #1
 801240e:	6032      	strlt	r2, [r6, #0]
 8012410:	43bb      	bics	r3, r7
 8012412:	d114      	bne.n	801243e <_dtoa_r+0x76>
 8012414:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012416:	f242 730f 	movw	r3, #9999	@ 0x270f
 801241a:	6013      	str	r3, [r2, #0]
 801241c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012420:	4323      	orrs	r3, r4
 8012422:	f000 854c 	beq.w	8012ebe <_dtoa_r+0xaf6>
 8012426:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012428:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012680 <_dtoa_r+0x2b8>
 801242c:	b11b      	cbz	r3, 8012436 <_dtoa_r+0x6e>
 801242e:	f10a 0303 	add.w	r3, sl, #3
 8012432:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012434:	6013      	str	r3, [r2, #0]
 8012436:	4650      	mov	r0, sl
 8012438:	b019      	add	sp, #100	@ 0x64
 801243a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801243e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012442:	2200      	movs	r2, #0
 8012444:	ec51 0b17 	vmov	r0, r1, d7
 8012448:	2300      	movs	r3, #0
 801244a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801244e:	f7ee fb5b 	bl	8000b08 <__aeabi_dcmpeq>
 8012452:	4680      	mov	r8, r0
 8012454:	b150      	cbz	r0, 801246c <_dtoa_r+0xa4>
 8012456:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012458:	2301      	movs	r3, #1
 801245a:	6013      	str	r3, [r2, #0]
 801245c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801245e:	b113      	cbz	r3, 8012466 <_dtoa_r+0x9e>
 8012460:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012462:	4b82      	ldr	r3, [pc, #520]	@ (801266c <_dtoa_r+0x2a4>)
 8012464:	6013      	str	r3, [r2, #0]
 8012466:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8012684 <_dtoa_r+0x2bc>
 801246a:	e7e4      	b.n	8012436 <_dtoa_r+0x6e>
 801246c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012470:	aa16      	add	r2, sp, #88	@ 0x58
 8012472:	a917      	add	r1, sp, #92	@ 0x5c
 8012474:	4658      	mov	r0, fp
 8012476:	f001 f841 	bl	80134fc <__d2b>
 801247a:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801247e:	4681      	mov	r9, r0
 8012480:	2e00      	cmp	r6, #0
 8012482:	d077      	beq.n	8012574 <_dtoa_r+0x1ac>
 8012484:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012486:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801248a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801248e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012492:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012496:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801249a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801249e:	4619      	mov	r1, r3
 80124a0:	2200      	movs	r2, #0
 80124a2:	4b73      	ldr	r3, [pc, #460]	@ (8012670 <_dtoa_r+0x2a8>)
 80124a4:	f7ed ff10 	bl	80002c8 <__aeabi_dsub>
 80124a8:	a369      	add	r3, pc, #420	@ (adr r3, 8012650 <_dtoa_r+0x288>)
 80124aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ae:	f7ee f8c3 	bl	8000638 <__aeabi_dmul>
 80124b2:	a369      	add	r3, pc, #420	@ (adr r3, 8012658 <_dtoa_r+0x290>)
 80124b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124b8:	f7ed ff08 	bl	80002cc <__adddf3>
 80124bc:	4604      	mov	r4, r0
 80124be:	4630      	mov	r0, r6
 80124c0:	460d      	mov	r5, r1
 80124c2:	f7ee f84f 	bl	8000564 <__aeabi_i2d>
 80124c6:	a366      	add	r3, pc, #408	@ (adr r3, 8012660 <_dtoa_r+0x298>)
 80124c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124cc:	f7ee f8b4 	bl	8000638 <__aeabi_dmul>
 80124d0:	4602      	mov	r2, r0
 80124d2:	460b      	mov	r3, r1
 80124d4:	4620      	mov	r0, r4
 80124d6:	4629      	mov	r1, r5
 80124d8:	f7ed fef8 	bl	80002cc <__adddf3>
 80124dc:	4604      	mov	r4, r0
 80124de:	460d      	mov	r5, r1
 80124e0:	f7ee fb5a 	bl	8000b98 <__aeabi_d2iz>
 80124e4:	2200      	movs	r2, #0
 80124e6:	4607      	mov	r7, r0
 80124e8:	2300      	movs	r3, #0
 80124ea:	4620      	mov	r0, r4
 80124ec:	4629      	mov	r1, r5
 80124ee:	f7ee fb15 	bl	8000b1c <__aeabi_dcmplt>
 80124f2:	b140      	cbz	r0, 8012506 <_dtoa_r+0x13e>
 80124f4:	4638      	mov	r0, r7
 80124f6:	f7ee f835 	bl	8000564 <__aeabi_i2d>
 80124fa:	4622      	mov	r2, r4
 80124fc:	462b      	mov	r3, r5
 80124fe:	f7ee fb03 	bl	8000b08 <__aeabi_dcmpeq>
 8012502:	b900      	cbnz	r0, 8012506 <_dtoa_r+0x13e>
 8012504:	3f01      	subs	r7, #1
 8012506:	2f16      	cmp	r7, #22
 8012508:	d851      	bhi.n	80125ae <_dtoa_r+0x1e6>
 801250a:	4b5a      	ldr	r3, [pc, #360]	@ (8012674 <_dtoa_r+0x2ac>)
 801250c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012514:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012518:	f7ee fb00 	bl	8000b1c <__aeabi_dcmplt>
 801251c:	2800      	cmp	r0, #0
 801251e:	d048      	beq.n	80125b2 <_dtoa_r+0x1ea>
 8012520:	3f01      	subs	r7, #1
 8012522:	2300      	movs	r3, #0
 8012524:	9312      	str	r3, [sp, #72]	@ 0x48
 8012526:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012528:	1b9b      	subs	r3, r3, r6
 801252a:	1e5a      	subs	r2, r3, #1
 801252c:	bf44      	itt	mi
 801252e:	f1c3 0801 	rsbmi	r8, r3, #1
 8012532:	2300      	movmi	r3, #0
 8012534:	9208      	str	r2, [sp, #32]
 8012536:	bf54      	ite	pl
 8012538:	f04f 0800 	movpl.w	r8, #0
 801253c:	9308      	strmi	r3, [sp, #32]
 801253e:	2f00      	cmp	r7, #0
 8012540:	db39      	blt.n	80125b6 <_dtoa_r+0x1ee>
 8012542:	9b08      	ldr	r3, [sp, #32]
 8012544:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012546:	443b      	add	r3, r7
 8012548:	9308      	str	r3, [sp, #32]
 801254a:	2300      	movs	r3, #0
 801254c:	930a      	str	r3, [sp, #40]	@ 0x28
 801254e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012550:	2b09      	cmp	r3, #9
 8012552:	d865      	bhi.n	8012620 <_dtoa_r+0x258>
 8012554:	2b05      	cmp	r3, #5
 8012556:	bfc4      	itt	gt
 8012558:	3b04      	subgt	r3, #4
 801255a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801255c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801255e:	f1a3 0302 	sub.w	r3, r3, #2
 8012562:	bfcc      	ite	gt
 8012564:	2400      	movgt	r4, #0
 8012566:	2401      	movle	r4, #1
 8012568:	2b03      	cmp	r3, #3
 801256a:	d864      	bhi.n	8012636 <_dtoa_r+0x26e>
 801256c:	e8df f003 	tbb	[pc, r3]
 8012570:	5635372a 	.word	0x5635372a
 8012574:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012578:	441e      	add	r6, r3
 801257a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801257e:	2b20      	cmp	r3, #32
 8012580:	bfc1      	itttt	gt
 8012582:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012586:	409f      	lslgt	r7, r3
 8012588:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801258c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012590:	bfd6      	itet	le
 8012592:	f1c3 0320 	rsble	r3, r3, #32
 8012596:	ea47 0003 	orrgt.w	r0, r7, r3
 801259a:	fa04 f003 	lslle.w	r0, r4, r3
 801259e:	f7ed ffd1 	bl	8000544 <__aeabi_ui2d>
 80125a2:	2201      	movs	r2, #1
 80125a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80125a8:	3e01      	subs	r6, #1
 80125aa:	9214      	str	r2, [sp, #80]	@ 0x50
 80125ac:	e777      	b.n	801249e <_dtoa_r+0xd6>
 80125ae:	2301      	movs	r3, #1
 80125b0:	e7b8      	b.n	8012524 <_dtoa_r+0x15c>
 80125b2:	9012      	str	r0, [sp, #72]	@ 0x48
 80125b4:	e7b7      	b.n	8012526 <_dtoa_r+0x15e>
 80125b6:	427b      	negs	r3, r7
 80125b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80125ba:	2300      	movs	r3, #0
 80125bc:	eba8 0807 	sub.w	r8, r8, r7
 80125c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80125c2:	e7c4      	b.n	801254e <_dtoa_r+0x186>
 80125c4:	2300      	movs	r3, #0
 80125c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80125c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	dc36      	bgt.n	801263c <_dtoa_r+0x274>
 80125ce:	2301      	movs	r3, #1
 80125d0:	9300      	str	r3, [sp, #0]
 80125d2:	9307      	str	r3, [sp, #28]
 80125d4:	461a      	mov	r2, r3
 80125d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80125d8:	e00b      	b.n	80125f2 <_dtoa_r+0x22a>
 80125da:	2301      	movs	r3, #1
 80125dc:	e7f3      	b.n	80125c6 <_dtoa_r+0x1fe>
 80125de:	2300      	movs	r3, #0
 80125e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80125e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80125e4:	18fb      	adds	r3, r7, r3
 80125e6:	9300      	str	r3, [sp, #0]
 80125e8:	3301      	adds	r3, #1
 80125ea:	2b01      	cmp	r3, #1
 80125ec:	9307      	str	r3, [sp, #28]
 80125ee:	bfb8      	it	lt
 80125f0:	2301      	movlt	r3, #1
 80125f2:	2100      	movs	r1, #0
 80125f4:	2204      	movs	r2, #4
 80125f6:	f102 0014 	add.w	r0, r2, #20
 80125fa:	4298      	cmp	r0, r3
 80125fc:	d922      	bls.n	8012644 <_dtoa_r+0x27c>
 80125fe:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 8012602:	4658      	mov	r0, fp
 8012604:	f000 fc9e 	bl	8012f44 <_Balloc>
 8012608:	4682      	mov	sl, r0
 801260a:	2800      	cmp	r0, #0
 801260c:	d13c      	bne.n	8012688 <_dtoa_r+0x2c0>
 801260e:	4b1a      	ldr	r3, [pc, #104]	@ (8012678 <_dtoa_r+0x2b0>)
 8012610:	4602      	mov	r2, r0
 8012612:	f240 11af 	movw	r1, #431	@ 0x1af
 8012616:	4819      	ldr	r0, [pc, #100]	@ (801267c <_dtoa_r+0x2b4>)
 8012618:	f001 fa64 	bl	8013ae4 <__assert_func>
 801261c:	2301      	movs	r3, #1
 801261e:	e7df      	b.n	80125e0 <_dtoa_r+0x218>
 8012620:	2401      	movs	r4, #1
 8012622:	2300      	movs	r3, #0
 8012624:	9309      	str	r3, [sp, #36]	@ 0x24
 8012626:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012628:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801262c:	9300      	str	r3, [sp, #0]
 801262e:	9307      	str	r3, [sp, #28]
 8012630:	2200      	movs	r2, #0
 8012632:	2312      	movs	r3, #18
 8012634:	e7cf      	b.n	80125d6 <_dtoa_r+0x20e>
 8012636:	2301      	movs	r3, #1
 8012638:	930b      	str	r3, [sp, #44]	@ 0x2c
 801263a:	e7f5      	b.n	8012628 <_dtoa_r+0x260>
 801263c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801263e:	9300      	str	r3, [sp, #0]
 8012640:	9307      	str	r3, [sp, #28]
 8012642:	e7d6      	b.n	80125f2 <_dtoa_r+0x22a>
 8012644:	3101      	adds	r1, #1
 8012646:	0052      	lsls	r2, r2, #1
 8012648:	e7d5      	b.n	80125f6 <_dtoa_r+0x22e>
 801264a:	bf00      	nop
 801264c:	f3af 8000 	nop.w
 8012650:	636f4361 	.word	0x636f4361
 8012654:	3fd287a7 	.word	0x3fd287a7
 8012658:	8b60c8b3 	.word	0x8b60c8b3
 801265c:	3fc68a28 	.word	0x3fc68a28
 8012660:	509f79fb 	.word	0x509f79fb
 8012664:	3fd34413 	.word	0x3fd34413
 8012668:	7ff00000 	.word	0x7ff00000
 801266c:	0801689a 	.word	0x0801689a
 8012670:	3ff80000 	.word	0x3ff80000
 8012674:	080169e8 	.word	0x080169e8
 8012678:	080168f2 	.word	0x080168f2
 801267c:	08016903 	.word	0x08016903
 8012680:	080168ee 	.word	0x080168ee
 8012684:	08016899 	.word	0x08016899
 8012688:	9b07      	ldr	r3, [sp, #28]
 801268a:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 801268e:	2b0e      	cmp	r3, #14
 8012690:	f200 80a4 	bhi.w	80127dc <_dtoa_r+0x414>
 8012694:	2c00      	cmp	r4, #0
 8012696:	f000 80a1 	beq.w	80127dc <_dtoa_r+0x414>
 801269a:	2f00      	cmp	r7, #0
 801269c:	dd33      	ble.n	8012706 <_dtoa_r+0x33e>
 801269e:	4bae      	ldr	r3, [pc, #696]	@ (8012958 <_dtoa_r+0x590>)
 80126a0:	f007 020f 	and.w	r2, r7, #15
 80126a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80126a8:	ed93 7b00 	vldr	d7, [r3]
 80126ac:	05f8      	lsls	r0, r7, #23
 80126ae:	ed8d 7b04 	vstr	d7, [sp, #16]
 80126b2:	ea4f 1427 	mov.w	r4, r7, asr #4
 80126b6:	d516      	bpl.n	80126e6 <_dtoa_r+0x31e>
 80126b8:	4ba8      	ldr	r3, [pc, #672]	@ (801295c <_dtoa_r+0x594>)
 80126ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80126be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80126c2:	f7ee f8e3 	bl	800088c <__aeabi_ddiv>
 80126c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80126ca:	f004 040f 	and.w	r4, r4, #15
 80126ce:	2603      	movs	r6, #3
 80126d0:	4da2      	ldr	r5, [pc, #648]	@ (801295c <_dtoa_r+0x594>)
 80126d2:	b954      	cbnz	r4, 80126ea <_dtoa_r+0x322>
 80126d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80126d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126dc:	f7ee f8d6 	bl	800088c <__aeabi_ddiv>
 80126e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80126e4:	e028      	b.n	8012738 <_dtoa_r+0x370>
 80126e6:	2602      	movs	r6, #2
 80126e8:	e7f2      	b.n	80126d0 <_dtoa_r+0x308>
 80126ea:	07e1      	lsls	r1, r4, #31
 80126ec:	d508      	bpl.n	8012700 <_dtoa_r+0x338>
 80126ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80126f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80126f6:	f7ed ff9f 	bl	8000638 <__aeabi_dmul>
 80126fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80126fe:	3601      	adds	r6, #1
 8012700:	1064      	asrs	r4, r4, #1
 8012702:	3508      	adds	r5, #8
 8012704:	e7e5      	b.n	80126d2 <_dtoa_r+0x30a>
 8012706:	f000 80d2 	beq.w	80128ae <_dtoa_r+0x4e6>
 801270a:	427c      	negs	r4, r7
 801270c:	4b92      	ldr	r3, [pc, #584]	@ (8012958 <_dtoa_r+0x590>)
 801270e:	4d93      	ldr	r5, [pc, #588]	@ (801295c <_dtoa_r+0x594>)
 8012710:	f004 020f 	and.w	r2, r4, #15
 8012714:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801271c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012720:	f7ed ff8a 	bl	8000638 <__aeabi_dmul>
 8012724:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012728:	1124      	asrs	r4, r4, #4
 801272a:	2300      	movs	r3, #0
 801272c:	2602      	movs	r6, #2
 801272e:	2c00      	cmp	r4, #0
 8012730:	f040 80b2 	bne.w	8012898 <_dtoa_r+0x4d0>
 8012734:	2b00      	cmp	r3, #0
 8012736:	d1d3      	bne.n	80126e0 <_dtoa_r+0x318>
 8012738:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801273a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801273e:	2b00      	cmp	r3, #0
 8012740:	f000 80b7 	beq.w	80128b2 <_dtoa_r+0x4ea>
 8012744:	4b86      	ldr	r3, [pc, #536]	@ (8012960 <_dtoa_r+0x598>)
 8012746:	2200      	movs	r2, #0
 8012748:	4620      	mov	r0, r4
 801274a:	4629      	mov	r1, r5
 801274c:	f7ee f9e6 	bl	8000b1c <__aeabi_dcmplt>
 8012750:	2800      	cmp	r0, #0
 8012752:	f000 80ae 	beq.w	80128b2 <_dtoa_r+0x4ea>
 8012756:	9b07      	ldr	r3, [sp, #28]
 8012758:	2b00      	cmp	r3, #0
 801275a:	f000 80aa 	beq.w	80128b2 <_dtoa_r+0x4ea>
 801275e:	9b00      	ldr	r3, [sp, #0]
 8012760:	2b00      	cmp	r3, #0
 8012762:	dd37      	ble.n	80127d4 <_dtoa_r+0x40c>
 8012764:	1e7b      	subs	r3, r7, #1
 8012766:	9304      	str	r3, [sp, #16]
 8012768:	4620      	mov	r0, r4
 801276a:	4b7e      	ldr	r3, [pc, #504]	@ (8012964 <_dtoa_r+0x59c>)
 801276c:	2200      	movs	r2, #0
 801276e:	4629      	mov	r1, r5
 8012770:	f7ed ff62 	bl	8000638 <__aeabi_dmul>
 8012774:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012778:	9c00      	ldr	r4, [sp, #0]
 801277a:	3601      	adds	r6, #1
 801277c:	4630      	mov	r0, r6
 801277e:	f7ed fef1 	bl	8000564 <__aeabi_i2d>
 8012782:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012786:	f7ed ff57 	bl	8000638 <__aeabi_dmul>
 801278a:	4b77      	ldr	r3, [pc, #476]	@ (8012968 <_dtoa_r+0x5a0>)
 801278c:	2200      	movs	r2, #0
 801278e:	f7ed fd9d 	bl	80002cc <__adddf3>
 8012792:	4605      	mov	r5, r0
 8012794:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012798:	2c00      	cmp	r4, #0
 801279a:	f040 808d 	bne.w	80128b8 <_dtoa_r+0x4f0>
 801279e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127a2:	4b72      	ldr	r3, [pc, #456]	@ (801296c <_dtoa_r+0x5a4>)
 80127a4:	2200      	movs	r2, #0
 80127a6:	f7ed fd8f 	bl	80002c8 <__aeabi_dsub>
 80127aa:	4602      	mov	r2, r0
 80127ac:	460b      	mov	r3, r1
 80127ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80127b2:	462a      	mov	r2, r5
 80127b4:	4633      	mov	r3, r6
 80127b6:	f7ee f9cf 	bl	8000b58 <__aeabi_dcmpgt>
 80127ba:	2800      	cmp	r0, #0
 80127bc:	f040 828c 	bne.w	8012cd8 <_dtoa_r+0x910>
 80127c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127c4:	462a      	mov	r2, r5
 80127c6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80127ca:	f7ee f9a7 	bl	8000b1c <__aeabi_dcmplt>
 80127ce:	2800      	cmp	r0, #0
 80127d0:	f040 8129 	bne.w	8012a26 <_dtoa_r+0x65e>
 80127d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80127d8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80127dc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80127de:	2b00      	cmp	r3, #0
 80127e0:	f2c0 815b 	blt.w	8012a9a <_dtoa_r+0x6d2>
 80127e4:	2f0e      	cmp	r7, #14
 80127e6:	f300 8158 	bgt.w	8012a9a <_dtoa_r+0x6d2>
 80127ea:	4b5b      	ldr	r3, [pc, #364]	@ (8012958 <_dtoa_r+0x590>)
 80127ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80127f0:	ed93 7b00 	vldr	d7, [r3]
 80127f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	ed8d 7b00 	vstr	d7, [sp]
 80127fc:	da03      	bge.n	8012806 <_dtoa_r+0x43e>
 80127fe:	9b07      	ldr	r3, [sp, #28]
 8012800:	2b00      	cmp	r3, #0
 8012802:	f340 8102 	ble.w	8012a0a <_dtoa_r+0x642>
 8012806:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801280a:	4656      	mov	r6, sl
 801280c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012810:	4620      	mov	r0, r4
 8012812:	4629      	mov	r1, r5
 8012814:	f7ee f83a 	bl	800088c <__aeabi_ddiv>
 8012818:	f7ee f9be 	bl	8000b98 <__aeabi_d2iz>
 801281c:	4680      	mov	r8, r0
 801281e:	f7ed fea1 	bl	8000564 <__aeabi_i2d>
 8012822:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012826:	f7ed ff07 	bl	8000638 <__aeabi_dmul>
 801282a:	4602      	mov	r2, r0
 801282c:	460b      	mov	r3, r1
 801282e:	4620      	mov	r0, r4
 8012830:	4629      	mov	r1, r5
 8012832:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012836:	f7ed fd47 	bl	80002c8 <__aeabi_dsub>
 801283a:	f806 4b01 	strb.w	r4, [r6], #1
 801283e:	9d07      	ldr	r5, [sp, #28]
 8012840:	eba6 040a 	sub.w	r4, r6, sl
 8012844:	42a5      	cmp	r5, r4
 8012846:	4602      	mov	r2, r0
 8012848:	460b      	mov	r3, r1
 801284a:	f040 8118 	bne.w	8012a7e <_dtoa_r+0x6b6>
 801284e:	f7ed fd3d 	bl	80002cc <__adddf3>
 8012852:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012856:	4604      	mov	r4, r0
 8012858:	460d      	mov	r5, r1
 801285a:	f7ee f97d 	bl	8000b58 <__aeabi_dcmpgt>
 801285e:	2800      	cmp	r0, #0
 8012860:	f040 80fa 	bne.w	8012a58 <_dtoa_r+0x690>
 8012864:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012868:	4620      	mov	r0, r4
 801286a:	4629      	mov	r1, r5
 801286c:	f7ee f94c 	bl	8000b08 <__aeabi_dcmpeq>
 8012870:	b118      	cbz	r0, 801287a <_dtoa_r+0x4b2>
 8012872:	f018 0f01 	tst.w	r8, #1
 8012876:	f040 80ef 	bne.w	8012a58 <_dtoa_r+0x690>
 801287a:	4649      	mov	r1, r9
 801287c:	4658      	mov	r0, fp
 801287e:	f000 fb86 	bl	8012f8e <_Bfree>
 8012882:	2300      	movs	r3, #0
 8012884:	7033      	strb	r3, [r6, #0]
 8012886:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012888:	3701      	adds	r7, #1
 801288a:	601f      	str	r7, [r3, #0]
 801288c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801288e:	2b00      	cmp	r3, #0
 8012890:	f43f add1 	beq.w	8012436 <_dtoa_r+0x6e>
 8012894:	601e      	str	r6, [r3, #0]
 8012896:	e5ce      	b.n	8012436 <_dtoa_r+0x6e>
 8012898:	07e2      	lsls	r2, r4, #31
 801289a:	d505      	bpl.n	80128a8 <_dtoa_r+0x4e0>
 801289c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80128a0:	f7ed feca 	bl	8000638 <__aeabi_dmul>
 80128a4:	3601      	adds	r6, #1
 80128a6:	2301      	movs	r3, #1
 80128a8:	1064      	asrs	r4, r4, #1
 80128aa:	3508      	adds	r5, #8
 80128ac:	e73f      	b.n	801272e <_dtoa_r+0x366>
 80128ae:	2602      	movs	r6, #2
 80128b0:	e742      	b.n	8012738 <_dtoa_r+0x370>
 80128b2:	9c07      	ldr	r4, [sp, #28]
 80128b4:	9704      	str	r7, [sp, #16]
 80128b6:	e761      	b.n	801277c <_dtoa_r+0x3b4>
 80128b8:	4b27      	ldr	r3, [pc, #156]	@ (8012958 <_dtoa_r+0x590>)
 80128ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80128bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80128c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80128c4:	4454      	add	r4, sl
 80128c6:	2900      	cmp	r1, #0
 80128c8:	d054      	beq.n	8012974 <_dtoa_r+0x5ac>
 80128ca:	4929      	ldr	r1, [pc, #164]	@ (8012970 <_dtoa_r+0x5a8>)
 80128cc:	2000      	movs	r0, #0
 80128ce:	f7ed ffdd 	bl	800088c <__aeabi_ddiv>
 80128d2:	4633      	mov	r3, r6
 80128d4:	462a      	mov	r2, r5
 80128d6:	f7ed fcf7 	bl	80002c8 <__aeabi_dsub>
 80128da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80128de:	4656      	mov	r6, sl
 80128e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128e4:	f7ee f958 	bl	8000b98 <__aeabi_d2iz>
 80128e8:	4605      	mov	r5, r0
 80128ea:	f7ed fe3b 	bl	8000564 <__aeabi_i2d>
 80128ee:	4602      	mov	r2, r0
 80128f0:	460b      	mov	r3, r1
 80128f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128f6:	f7ed fce7 	bl	80002c8 <__aeabi_dsub>
 80128fa:	3530      	adds	r5, #48	@ 0x30
 80128fc:	4602      	mov	r2, r0
 80128fe:	460b      	mov	r3, r1
 8012900:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012904:	f806 5b01 	strb.w	r5, [r6], #1
 8012908:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801290c:	f7ee f906 	bl	8000b1c <__aeabi_dcmplt>
 8012910:	2800      	cmp	r0, #0
 8012912:	d172      	bne.n	80129fa <_dtoa_r+0x632>
 8012914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012918:	4911      	ldr	r1, [pc, #68]	@ (8012960 <_dtoa_r+0x598>)
 801291a:	2000      	movs	r0, #0
 801291c:	f7ed fcd4 	bl	80002c8 <__aeabi_dsub>
 8012920:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012924:	f7ee f8fa 	bl	8000b1c <__aeabi_dcmplt>
 8012928:	2800      	cmp	r0, #0
 801292a:	f040 8096 	bne.w	8012a5a <_dtoa_r+0x692>
 801292e:	42a6      	cmp	r6, r4
 8012930:	f43f af50 	beq.w	80127d4 <_dtoa_r+0x40c>
 8012934:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012938:	4b0a      	ldr	r3, [pc, #40]	@ (8012964 <_dtoa_r+0x59c>)
 801293a:	2200      	movs	r2, #0
 801293c:	f7ed fe7c 	bl	8000638 <__aeabi_dmul>
 8012940:	4b08      	ldr	r3, [pc, #32]	@ (8012964 <_dtoa_r+0x59c>)
 8012942:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012946:	2200      	movs	r2, #0
 8012948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801294c:	f7ed fe74 	bl	8000638 <__aeabi_dmul>
 8012950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012954:	e7c4      	b.n	80128e0 <_dtoa_r+0x518>
 8012956:	bf00      	nop
 8012958:	080169e8 	.word	0x080169e8
 801295c:	080169c0 	.word	0x080169c0
 8012960:	3ff00000 	.word	0x3ff00000
 8012964:	40240000 	.word	0x40240000
 8012968:	401c0000 	.word	0x401c0000
 801296c:	40140000 	.word	0x40140000
 8012970:	3fe00000 	.word	0x3fe00000
 8012974:	4631      	mov	r1, r6
 8012976:	4628      	mov	r0, r5
 8012978:	f7ed fe5e 	bl	8000638 <__aeabi_dmul>
 801297c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012980:	9415      	str	r4, [sp, #84]	@ 0x54
 8012982:	4656      	mov	r6, sl
 8012984:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012988:	f7ee f906 	bl	8000b98 <__aeabi_d2iz>
 801298c:	4605      	mov	r5, r0
 801298e:	f7ed fde9 	bl	8000564 <__aeabi_i2d>
 8012992:	4602      	mov	r2, r0
 8012994:	460b      	mov	r3, r1
 8012996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801299a:	f7ed fc95 	bl	80002c8 <__aeabi_dsub>
 801299e:	3530      	adds	r5, #48	@ 0x30
 80129a0:	f806 5b01 	strb.w	r5, [r6], #1
 80129a4:	4602      	mov	r2, r0
 80129a6:	460b      	mov	r3, r1
 80129a8:	42a6      	cmp	r6, r4
 80129aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80129ae:	f04f 0200 	mov.w	r2, #0
 80129b2:	d124      	bne.n	80129fe <_dtoa_r+0x636>
 80129b4:	4bac      	ldr	r3, [pc, #688]	@ (8012c68 <_dtoa_r+0x8a0>)
 80129b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80129ba:	f7ed fc87 	bl	80002cc <__adddf3>
 80129be:	4602      	mov	r2, r0
 80129c0:	460b      	mov	r3, r1
 80129c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80129c6:	f7ee f8c7 	bl	8000b58 <__aeabi_dcmpgt>
 80129ca:	2800      	cmp	r0, #0
 80129cc:	d145      	bne.n	8012a5a <_dtoa_r+0x692>
 80129ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80129d2:	49a5      	ldr	r1, [pc, #660]	@ (8012c68 <_dtoa_r+0x8a0>)
 80129d4:	2000      	movs	r0, #0
 80129d6:	f7ed fc77 	bl	80002c8 <__aeabi_dsub>
 80129da:	4602      	mov	r2, r0
 80129dc:	460b      	mov	r3, r1
 80129de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80129e2:	f7ee f89b 	bl	8000b1c <__aeabi_dcmplt>
 80129e6:	2800      	cmp	r0, #0
 80129e8:	f43f aef4 	beq.w	80127d4 <_dtoa_r+0x40c>
 80129ec:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80129ee:	1e73      	subs	r3, r6, #1
 80129f0:	9315      	str	r3, [sp, #84]	@ 0x54
 80129f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80129f6:	2b30      	cmp	r3, #48	@ 0x30
 80129f8:	d0f8      	beq.n	80129ec <_dtoa_r+0x624>
 80129fa:	9f04      	ldr	r7, [sp, #16]
 80129fc:	e73d      	b.n	801287a <_dtoa_r+0x4b2>
 80129fe:	4b9b      	ldr	r3, [pc, #620]	@ (8012c6c <_dtoa_r+0x8a4>)
 8012a00:	f7ed fe1a 	bl	8000638 <__aeabi_dmul>
 8012a04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012a08:	e7bc      	b.n	8012984 <_dtoa_r+0x5bc>
 8012a0a:	d10c      	bne.n	8012a26 <_dtoa_r+0x65e>
 8012a0c:	4b98      	ldr	r3, [pc, #608]	@ (8012c70 <_dtoa_r+0x8a8>)
 8012a0e:	2200      	movs	r2, #0
 8012a10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a14:	f7ed fe10 	bl	8000638 <__aeabi_dmul>
 8012a18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012a1c:	f7ee f892 	bl	8000b44 <__aeabi_dcmpge>
 8012a20:	2800      	cmp	r0, #0
 8012a22:	f000 8157 	beq.w	8012cd4 <_dtoa_r+0x90c>
 8012a26:	2400      	movs	r4, #0
 8012a28:	4625      	mov	r5, r4
 8012a2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a2c:	43db      	mvns	r3, r3
 8012a2e:	9304      	str	r3, [sp, #16]
 8012a30:	4656      	mov	r6, sl
 8012a32:	2700      	movs	r7, #0
 8012a34:	4621      	mov	r1, r4
 8012a36:	4658      	mov	r0, fp
 8012a38:	f000 faa9 	bl	8012f8e <_Bfree>
 8012a3c:	2d00      	cmp	r5, #0
 8012a3e:	d0dc      	beq.n	80129fa <_dtoa_r+0x632>
 8012a40:	b12f      	cbz	r7, 8012a4e <_dtoa_r+0x686>
 8012a42:	42af      	cmp	r7, r5
 8012a44:	d003      	beq.n	8012a4e <_dtoa_r+0x686>
 8012a46:	4639      	mov	r1, r7
 8012a48:	4658      	mov	r0, fp
 8012a4a:	f000 faa0 	bl	8012f8e <_Bfree>
 8012a4e:	4629      	mov	r1, r5
 8012a50:	4658      	mov	r0, fp
 8012a52:	f000 fa9c 	bl	8012f8e <_Bfree>
 8012a56:	e7d0      	b.n	80129fa <_dtoa_r+0x632>
 8012a58:	9704      	str	r7, [sp, #16]
 8012a5a:	4633      	mov	r3, r6
 8012a5c:	461e      	mov	r6, r3
 8012a5e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012a62:	2a39      	cmp	r2, #57	@ 0x39
 8012a64:	d107      	bne.n	8012a76 <_dtoa_r+0x6ae>
 8012a66:	459a      	cmp	sl, r3
 8012a68:	d1f8      	bne.n	8012a5c <_dtoa_r+0x694>
 8012a6a:	9a04      	ldr	r2, [sp, #16]
 8012a6c:	3201      	adds	r2, #1
 8012a6e:	9204      	str	r2, [sp, #16]
 8012a70:	2230      	movs	r2, #48	@ 0x30
 8012a72:	f88a 2000 	strb.w	r2, [sl]
 8012a76:	781a      	ldrb	r2, [r3, #0]
 8012a78:	3201      	adds	r2, #1
 8012a7a:	701a      	strb	r2, [r3, #0]
 8012a7c:	e7bd      	b.n	80129fa <_dtoa_r+0x632>
 8012a7e:	4b7b      	ldr	r3, [pc, #492]	@ (8012c6c <_dtoa_r+0x8a4>)
 8012a80:	2200      	movs	r2, #0
 8012a82:	f7ed fdd9 	bl	8000638 <__aeabi_dmul>
 8012a86:	2200      	movs	r2, #0
 8012a88:	2300      	movs	r3, #0
 8012a8a:	4604      	mov	r4, r0
 8012a8c:	460d      	mov	r5, r1
 8012a8e:	f7ee f83b 	bl	8000b08 <__aeabi_dcmpeq>
 8012a92:	2800      	cmp	r0, #0
 8012a94:	f43f aeba 	beq.w	801280c <_dtoa_r+0x444>
 8012a98:	e6ef      	b.n	801287a <_dtoa_r+0x4b2>
 8012a9a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012a9c:	2a00      	cmp	r2, #0
 8012a9e:	f000 80db 	beq.w	8012c58 <_dtoa_r+0x890>
 8012aa2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012aa4:	2a01      	cmp	r2, #1
 8012aa6:	f300 80bf 	bgt.w	8012c28 <_dtoa_r+0x860>
 8012aaa:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012aac:	2a00      	cmp	r2, #0
 8012aae:	f000 80b7 	beq.w	8012c20 <_dtoa_r+0x858>
 8012ab2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012ab6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012ab8:	4646      	mov	r6, r8
 8012aba:	9a08      	ldr	r2, [sp, #32]
 8012abc:	2101      	movs	r1, #1
 8012abe:	441a      	add	r2, r3
 8012ac0:	4658      	mov	r0, fp
 8012ac2:	4498      	add	r8, r3
 8012ac4:	9208      	str	r2, [sp, #32]
 8012ac6:	f000 fafd 	bl	80130c4 <__i2b>
 8012aca:	4605      	mov	r5, r0
 8012acc:	b15e      	cbz	r6, 8012ae6 <_dtoa_r+0x71e>
 8012ace:	9b08      	ldr	r3, [sp, #32]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	dd08      	ble.n	8012ae6 <_dtoa_r+0x71e>
 8012ad4:	42b3      	cmp	r3, r6
 8012ad6:	9a08      	ldr	r2, [sp, #32]
 8012ad8:	bfa8      	it	ge
 8012ada:	4633      	movge	r3, r6
 8012adc:	eba8 0803 	sub.w	r8, r8, r3
 8012ae0:	1af6      	subs	r6, r6, r3
 8012ae2:	1ad3      	subs	r3, r2, r3
 8012ae4:	9308      	str	r3, [sp, #32]
 8012ae6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ae8:	b1f3      	cbz	r3, 8012b28 <_dtoa_r+0x760>
 8012aea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	f000 80b7 	beq.w	8012c60 <_dtoa_r+0x898>
 8012af2:	b18c      	cbz	r4, 8012b18 <_dtoa_r+0x750>
 8012af4:	4629      	mov	r1, r5
 8012af6:	4622      	mov	r2, r4
 8012af8:	4658      	mov	r0, fp
 8012afa:	f000 fba3 	bl	8013244 <__pow5mult>
 8012afe:	464a      	mov	r2, r9
 8012b00:	4601      	mov	r1, r0
 8012b02:	4605      	mov	r5, r0
 8012b04:	4658      	mov	r0, fp
 8012b06:	f000 faf3 	bl	80130f0 <__multiply>
 8012b0a:	4649      	mov	r1, r9
 8012b0c:	9004      	str	r0, [sp, #16]
 8012b0e:	4658      	mov	r0, fp
 8012b10:	f000 fa3d 	bl	8012f8e <_Bfree>
 8012b14:	9b04      	ldr	r3, [sp, #16]
 8012b16:	4699      	mov	r9, r3
 8012b18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b1a:	1b1a      	subs	r2, r3, r4
 8012b1c:	d004      	beq.n	8012b28 <_dtoa_r+0x760>
 8012b1e:	4649      	mov	r1, r9
 8012b20:	4658      	mov	r0, fp
 8012b22:	f000 fb8f 	bl	8013244 <__pow5mult>
 8012b26:	4681      	mov	r9, r0
 8012b28:	2101      	movs	r1, #1
 8012b2a:	4658      	mov	r0, fp
 8012b2c:	f000 faca 	bl	80130c4 <__i2b>
 8012b30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b32:	4604      	mov	r4, r0
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	f000 81cc 	beq.w	8012ed2 <_dtoa_r+0xb0a>
 8012b3a:	461a      	mov	r2, r3
 8012b3c:	4601      	mov	r1, r0
 8012b3e:	4658      	mov	r0, fp
 8012b40:	f000 fb80 	bl	8013244 <__pow5mult>
 8012b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b46:	2b01      	cmp	r3, #1
 8012b48:	4604      	mov	r4, r0
 8012b4a:	f300 8095 	bgt.w	8012c78 <_dtoa_r+0x8b0>
 8012b4e:	9b02      	ldr	r3, [sp, #8]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	f040 8087 	bne.w	8012c64 <_dtoa_r+0x89c>
 8012b56:	9b03      	ldr	r3, [sp, #12]
 8012b58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	f040 8089 	bne.w	8012c74 <_dtoa_r+0x8ac>
 8012b62:	9b03      	ldr	r3, [sp, #12]
 8012b64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012b68:	0d1b      	lsrs	r3, r3, #20
 8012b6a:	051b      	lsls	r3, r3, #20
 8012b6c:	b12b      	cbz	r3, 8012b7a <_dtoa_r+0x7b2>
 8012b6e:	9b08      	ldr	r3, [sp, #32]
 8012b70:	3301      	adds	r3, #1
 8012b72:	9308      	str	r3, [sp, #32]
 8012b74:	f108 0801 	add.w	r8, r8, #1
 8012b78:	2301      	movs	r3, #1
 8012b7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8012b7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	f000 81ad 	beq.w	8012ede <_dtoa_r+0xb16>
 8012b84:	6923      	ldr	r3, [r4, #16]
 8012b86:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012b8a:	6918      	ldr	r0, [r3, #16]
 8012b8c:	f000 fa4e 	bl	801302c <__hi0bits>
 8012b90:	f1c0 0020 	rsb	r0, r0, #32
 8012b94:	9b08      	ldr	r3, [sp, #32]
 8012b96:	4418      	add	r0, r3
 8012b98:	f010 001f 	ands.w	r0, r0, #31
 8012b9c:	d077      	beq.n	8012c8e <_dtoa_r+0x8c6>
 8012b9e:	f1c0 0320 	rsb	r3, r0, #32
 8012ba2:	2b04      	cmp	r3, #4
 8012ba4:	dd6b      	ble.n	8012c7e <_dtoa_r+0x8b6>
 8012ba6:	9b08      	ldr	r3, [sp, #32]
 8012ba8:	f1c0 001c 	rsb	r0, r0, #28
 8012bac:	4403      	add	r3, r0
 8012bae:	4480      	add	r8, r0
 8012bb0:	4406      	add	r6, r0
 8012bb2:	9308      	str	r3, [sp, #32]
 8012bb4:	f1b8 0f00 	cmp.w	r8, #0
 8012bb8:	dd05      	ble.n	8012bc6 <_dtoa_r+0x7fe>
 8012bba:	4649      	mov	r1, r9
 8012bbc:	4642      	mov	r2, r8
 8012bbe:	4658      	mov	r0, fp
 8012bc0:	f000 fb80 	bl	80132c4 <__lshift>
 8012bc4:	4681      	mov	r9, r0
 8012bc6:	9b08      	ldr	r3, [sp, #32]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	dd05      	ble.n	8012bd8 <_dtoa_r+0x810>
 8012bcc:	4621      	mov	r1, r4
 8012bce:	461a      	mov	r2, r3
 8012bd0:	4658      	mov	r0, fp
 8012bd2:	f000 fb77 	bl	80132c4 <__lshift>
 8012bd6:	4604      	mov	r4, r0
 8012bd8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d059      	beq.n	8012c92 <_dtoa_r+0x8ca>
 8012bde:	4621      	mov	r1, r4
 8012be0:	4648      	mov	r0, r9
 8012be2:	f000 fbdb 	bl	801339c <__mcmp>
 8012be6:	2800      	cmp	r0, #0
 8012be8:	da53      	bge.n	8012c92 <_dtoa_r+0x8ca>
 8012bea:	1e7b      	subs	r3, r7, #1
 8012bec:	9304      	str	r3, [sp, #16]
 8012bee:	4649      	mov	r1, r9
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	220a      	movs	r2, #10
 8012bf4:	4658      	mov	r0, fp
 8012bf6:	f000 f9d3 	bl	8012fa0 <__multadd>
 8012bfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012bfc:	4681      	mov	r9, r0
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	f000 816f 	beq.w	8012ee2 <_dtoa_r+0xb1a>
 8012c04:	2300      	movs	r3, #0
 8012c06:	4629      	mov	r1, r5
 8012c08:	220a      	movs	r2, #10
 8012c0a:	4658      	mov	r0, fp
 8012c0c:	f000 f9c8 	bl	8012fa0 <__multadd>
 8012c10:	9b00      	ldr	r3, [sp, #0]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	4605      	mov	r5, r0
 8012c16:	dc67      	bgt.n	8012ce8 <_dtoa_r+0x920>
 8012c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c1a:	2b02      	cmp	r3, #2
 8012c1c:	dc41      	bgt.n	8012ca2 <_dtoa_r+0x8da>
 8012c1e:	e063      	b.n	8012ce8 <_dtoa_r+0x920>
 8012c20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012c22:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012c26:	e746      	b.n	8012ab6 <_dtoa_r+0x6ee>
 8012c28:	9b07      	ldr	r3, [sp, #28]
 8012c2a:	1e5c      	subs	r4, r3, #1
 8012c2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012c2e:	42a3      	cmp	r3, r4
 8012c30:	bfbf      	itttt	lt
 8012c32:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012c34:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8012c36:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012c38:	1ae3      	sublt	r3, r4, r3
 8012c3a:	bfb4      	ite	lt
 8012c3c:	18d2      	addlt	r2, r2, r3
 8012c3e:	1b1c      	subge	r4, r3, r4
 8012c40:	9b07      	ldr	r3, [sp, #28]
 8012c42:	bfbc      	itt	lt
 8012c44:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8012c46:	2400      	movlt	r4, #0
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	bfb5      	itete	lt
 8012c4c:	eba8 0603 	sublt.w	r6, r8, r3
 8012c50:	9b07      	ldrge	r3, [sp, #28]
 8012c52:	2300      	movlt	r3, #0
 8012c54:	4646      	movge	r6, r8
 8012c56:	e730      	b.n	8012aba <_dtoa_r+0x6f2>
 8012c58:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012c5a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012c5c:	4646      	mov	r6, r8
 8012c5e:	e735      	b.n	8012acc <_dtoa_r+0x704>
 8012c60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012c62:	e75c      	b.n	8012b1e <_dtoa_r+0x756>
 8012c64:	2300      	movs	r3, #0
 8012c66:	e788      	b.n	8012b7a <_dtoa_r+0x7b2>
 8012c68:	3fe00000 	.word	0x3fe00000
 8012c6c:	40240000 	.word	0x40240000
 8012c70:	40140000 	.word	0x40140000
 8012c74:	9b02      	ldr	r3, [sp, #8]
 8012c76:	e780      	b.n	8012b7a <_dtoa_r+0x7b2>
 8012c78:	2300      	movs	r3, #0
 8012c7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8012c7c:	e782      	b.n	8012b84 <_dtoa_r+0x7bc>
 8012c7e:	d099      	beq.n	8012bb4 <_dtoa_r+0x7ec>
 8012c80:	9a08      	ldr	r2, [sp, #32]
 8012c82:	331c      	adds	r3, #28
 8012c84:	441a      	add	r2, r3
 8012c86:	4498      	add	r8, r3
 8012c88:	441e      	add	r6, r3
 8012c8a:	9208      	str	r2, [sp, #32]
 8012c8c:	e792      	b.n	8012bb4 <_dtoa_r+0x7ec>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	e7f6      	b.n	8012c80 <_dtoa_r+0x8b8>
 8012c92:	9b07      	ldr	r3, [sp, #28]
 8012c94:	9704      	str	r7, [sp, #16]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	dc20      	bgt.n	8012cdc <_dtoa_r+0x914>
 8012c9a:	9300      	str	r3, [sp, #0]
 8012c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c9e:	2b02      	cmp	r3, #2
 8012ca0:	dd1e      	ble.n	8012ce0 <_dtoa_r+0x918>
 8012ca2:	9b00      	ldr	r3, [sp, #0]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	f47f aec0 	bne.w	8012a2a <_dtoa_r+0x662>
 8012caa:	4621      	mov	r1, r4
 8012cac:	2205      	movs	r2, #5
 8012cae:	4658      	mov	r0, fp
 8012cb0:	f000 f976 	bl	8012fa0 <__multadd>
 8012cb4:	4601      	mov	r1, r0
 8012cb6:	4604      	mov	r4, r0
 8012cb8:	4648      	mov	r0, r9
 8012cba:	f000 fb6f 	bl	801339c <__mcmp>
 8012cbe:	2800      	cmp	r0, #0
 8012cc0:	f77f aeb3 	ble.w	8012a2a <_dtoa_r+0x662>
 8012cc4:	4656      	mov	r6, sl
 8012cc6:	2331      	movs	r3, #49	@ 0x31
 8012cc8:	f806 3b01 	strb.w	r3, [r6], #1
 8012ccc:	9b04      	ldr	r3, [sp, #16]
 8012cce:	3301      	adds	r3, #1
 8012cd0:	9304      	str	r3, [sp, #16]
 8012cd2:	e6ae      	b.n	8012a32 <_dtoa_r+0x66a>
 8012cd4:	9c07      	ldr	r4, [sp, #28]
 8012cd6:	9704      	str	r7, [sp, #16]
 8012cd8:	4625      	mov	r5, r4
 8012cda:	e7f3      	b.n	8012cc4 <_dtoa_r+0x8fc>
 8012cdc:	9b07      	ldr	r3, [sp, #28]
 8012cde:	9300      	str	r3, [sp, #0]
 8012ce0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	f000 8101 	beq.w	8012eea <_dtoa_r+0xb22>
 8012ce8:	2e00      	cmp	r6, #0
 8012cea:	dd05      	ble.n	8012cf8 <_dtoa_r+0x930>
 8012cec:	4629      	mov	r1, r5
 8012cee:	4632      	mov	r2, r6
 8012cf0:	4658      	mov	r0, fp
 8012cf2:	f000 fae7 	bl	80132c4 <__lshift>
 8012cf6:	4605      	mov	r5, r0
 8012cf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d059      	beq.n	8012db2 <_dtoa_r+0x9ea>
 8012cfe:	6869      	ldr	r1, [r5, #4]
 8012d00:	4658      	mov	r0, fp
 8012d02:	f000 f91f 	bl	8012f44 <_Balloc>
 8012d06:	4606      	mov	r6, r0
 8012d08:	b920      	cbnz	r0, 8012d14 <_dtoa_r+0x94c>
 8012d0a:	4b83      	ldr	r3, [pc, #524]	@ (8012f18 <_dtoa_r+0xb50>)
 8012d0c:	4602      	mov	r2, r0
 8012d0e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012d12:	e480      	b.n	8012616 <_dtoa_r+0x24e>
 8012d14:	692a      	ldr	r2, [r5, #16]
 8012d16:	3202      	adds	r2, #2
 8012d18:	0092      	lsls	r2, r2, #2
 8012d1a:	f105 010c 	add.w	r1, r5, #12
 8012d1e:	300c      	adds	r0, #12
 8012d20:	f7fc fc12 	bl	800f548 <memcpy>
 8012d24:	2201      	movs	r2, #1
 8012d26:	4631      	mov	r1, r6
 8012d28:	4658      	mov	r0, fp
 8012d2a:	f000 facb 	bl	80132c4 <__lshift>
 8012d2e:	f10a 0301 	add.w	r3, sl, #1
 8012d32:	9307      	str	r3, [sp, #28]
 8012d34:	9b00      	ldr	r3, [sp, #0]
 8012d36:	4453      	add	r3, sl
 8012d38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012d3a:	9b02      	ldr	r3, [sp, #8]
 8012d3c:	f003 0301 	and.w	r3, r3, #1
 8012d40:	462f      	mov	r7, r5
 8012d42:	930a      	str	r3, [sp, #40]	@ 0x28
 8012d44:	4605      	mov	r5, r0
 8012d46:	9b07      	ldr	r3, [sp, #28]
 8012d48:	4621      	mov	r1, r4
 8012d4a:	3b01      	subs	r3, #1
 8012d4c:	4648      	mov	r0, r9
 8012d4e:	9300      	str	r3, [sp, #0]
 8012d50:	f7ff fab0 	bl	80122b4 <quorem>
 8012d54:	4639      	mov	r1, r7
 8012d56:	9002      	str	r0, [sp, #8]
 8012d58:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012d5c:	4648      	mov	r0, r9
 8012d5e:	f000 fb1d 	bl	801339c <__mcmp>
 8012d62:	462a      	mov	r2, r5
 8012d64:	9008      	str	r0, [sp, #32]
 8012d66:	4621      	mov	r1, r4
 8012d68:	4658      	mov	r0, fp
 8012d6a:	f000 fb33 	bl	80133d4 <__mdiff>
 8012d6e:	68c2      	ldr	r2, [r0, #12]
 8012d70:	4606      	mov	r6, r0
 8012d72:	bb02      	cbnz	r2, 8012db6 <_dtoa_r+0x9ee>
 8012d74:	4601      	mov	r1, r0
 8012d76:	4648      	mov	r0, r9
 8012d78:	f000 fb10 	bl	801339c <__mcmp>
 8012d7c:	4602      	mov	r2, r0
 8012d7e:	4631      	mov	r1, r6
 8012d80:	4658      	mov	r0, fp
 8012d82:	920e      	str	r2, [sp, #56]	@ 0x38
 8012d84:	f000 f903 	bl	8012f8e <_Bfree>
 8012d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012d8c:	9e07      	ldr	r6, [sp, #28]
 8012d8e:	ea43 0102 	orr.w	r1, r3, r2
 8012d92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012d94:	4319      	orrs	r1, r3
 8012d96:	d110      	bne.n	8012dba <_dtoa_r+0x9f2>
 8012d98:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012d9c:	d029      	beq.n	8012df2 <_dtoa_r+0xa2a>
 8012d9e:	9b08      	ldr	r3, [sp, #32]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	dd02      	ble.n	8012daa <_dtoa_r+0x9e2>
 8012da4:	9b02      	ldr	r3, [sp, #8]
 8012da6:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012daa:	9b00      	ldr	r3, [sp, #0]
 8012dac:	f883 8000 	strb.w	r8, [r3]
 8012db0:	e640      	b.n	8012a34 <_dtoa_r+0x66c>
 8012db2:	4628      	mov	r0, r5
 8012db4:	e7bb      	b.n	8012d2e <_dtoa_r+0x966>
 8012db6:	2201      	movs	r2, #1
 8012db8:	e7e1      	b.n	8012d7e <_dtoa_r+0x9b6>
 8012dba:	9b08      	ldr	r3, [sp, #32]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	db04      	blt.n	8012dca <_dtoa_r+0xa02>
 8012dc0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012dc2:	430b      	orrs	r3, r1
 8012dc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012dc6:	430b      	orrs	r3, r1
 8012dc8:	d120      	bne.n	8012e0c <_dtoa_r+0xa44>
 8012dca:	2a00      	cmp	r2, #0
 8012dcc:	dded      	ble.n	8012daa <_dtoa_r+0x9e2>
 8012dce:	4649      	mov	r1, r9
 8012dd0:	2201      	movs	r2, #1
 8012dd2:	4658      	mov	r0, fp
 8012dd4:	f000 fa76 	bl	80132c4 <__lshift>
 8012dd8:	4621      	mov	r1, r4
 8012dda:	4681      	mov	r9, r0
 8012ddc:	f000 fade 	bl	801339c <__mcmp>
 8012de0:	2800      	cmp	r0, #0
 8012de2:	dc03      	bgt.n	8012dec <_dtoa_r+0xa24>
 8012de4:	d1e1      	bne.n	8012daa <_dtoa_r+0x9e2>
 8012de6:	f018 0f01 	tst.w	r8, #1
 8012dea:	d0de      	beq.n	8012daa <_dtoa_r+0x9e2>
 8012dec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012df0:	d1d8      	bne.n	8012da4 <_dtoa_r+0x9dc>
 8012df2:	9a00      	ldr	r2, [sp, #0]
 8012df4:	2339      	movs	r3, #57	@ 0x39
 8012df6:	7013      	strb	r3, [r2, #0]
 8012df8:	4633      	mov	r3, r6
 8012dfa:	461e      	mov	r6, r3
 8012dfc:	3b01      	subs	r3, #1
 8012dfe:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012e02:	2a39      	cmp	r2, #57	@ 0x39
 8012e04:	d052      	beq.n	8012eac <_dtoa_r+0xae4>
 8012e06:	3201      	adds	r2, #1
 8012e08:	701a      	strb	r2, [r3, #0]
 8012e0a:	e613      	b.n	8012a34 <_dtoa_r+0x66c>
 8012e0c:	2a00      	cmp	r2, #0
 8012e0e:	dd07      	ble.n	8012e20 <_dtoa_r+0xa58>
 8012e10:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012e14:	d0ed      	beq.n	8012df2 <_dtoa_r+0xa2a>
 8012e16:	9a00      	ldr	r2, [sp, #0]
 8012e18:	f108 0301 	add.w	r3, r8, #1
 8012e1c:	7013      	strb	r3, [r2, #0]
 8012e1e:	e609      	b.n	8012a34 <_dtoa_r+0x66c>
 8012e20:	9b07      	ldr	r3, [sp, #28]
 8012e22:	9a07      	ldr	r2, [sp, #28]
 8012e24:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012e28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012e2a:	4293      	cmp	r3, r2
 8012e2c:	d028      	beq.n	8012e80 <_dtoa_r+0xab8>
 8012e2e:	4649      	mov	r1, r9
 8012e30:	2300      	movs	r3, #0
 8012e32:	220a      	movs	r2, #10
 8012e34:	4658      	mov	r0, fp
 8012e36:	f000 f8b3 	bl	8012fa0 <__multadd>
 8012e3a:	42af      	cmp	r7, r5
 8012e3c:	4681      	mov	r9, r0
 8012e3e:	f04f 0300 	mov.w	r3, #0
 8012e42:	f04f 020a 	mov.w	r2, #10
 8012e46:	4639      	mov	r1, r7
 8012e48:	4658      	mov	r0, fp
 8012e4a:	d107      	bne.n	8012e5c <_dtoa_r+0xa94>
 8012e4c:	f000 f8a8 	bl	8012fa0 <__multadd>
 8012e50:	4607      	mov	r7, r0
 8012e52:	4605      	mov	r5, r0
 8012e54:	9b07      	ldr	r3, [sp, #28]
 8012e56:	3301      	adds	r3, #1
 8012e58:	9307      	str	r3, [sp, #28]
 8012e5a:	e774      	b.n	8012d46 <_dtoa_r+0x97e>
 8012e5c:	f000 f8a0 	bl	8012fa0 <__multadd>
 8012e60:	4629      	mov	r1, r5
 8012e62:	4607      	mov	r7, r0
 8012e64:	2300      	movs	r3, #0
 8012e66:	220a      	movs	r2, #10
 8012e68:	4658      	mov	r0, fp
 8012e6a:	f000 f899 	bl	8012fa0 <__multadd>
 8012e6e:	4605      	mov	r5, r0
 8012e70:	e7f0      	b.n	8012e54 <_dtoa_r+0xa8c>
 8012e72:	9b00      	ldr	r3, [sp, #0]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	bfcc      	ite	gt
 8012e78:	461e      	movgt	r6, r3
 8012e7a:	2601      	movle	r6, #1
 8012e7c:	4456      	add	r6, sl
 8012e7e:	2700      	movs	r7, #0
 8012e80:	4649      	mov	r1, r9
 8012e82:	2201      	movs	r2, #1
 8012e84:	4658      	mov	r0, fp
 8012e86:	f000 fa1d 	bl	80132c4 <__lshift>
 8012e8a:	4621      	mov	r1, r4
 8012e8c:	4681      	mov	r9, r0
 8012e8e:	f000 fa85 	bl	801339c <__mcmp>
 8012e92:	2800      	cmp	r0, #0
 8012e94:	dcb0      	bgt.n	8012df8 <_dtoa_r+0xa30>
 8012e96:	d102      	bne.n	8012e9e <_dtoa_r+0xad6>
 8012e98:	f018 0f01 	tst.w	r8, #1
 8012e9c:	d1ac      	bne.n	8012df8 <_dtoa_r+0xa30>
 8012e9e:	4633      	mov	r3, r6
 8012ea0:	461e      	mov	r6, r3
 8012ea2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012ea6:	2a30      	cmp	r2, #48	@ 0x30
 8012ea8:	d0fa      	beq.n	8012ea0 <_dtoa_r+0xad8>
 8012eaa:	e5c3      	b.n	8012a34 <_dtoa_r+0x66c>
 8012eac:	459a      	cmp	sl, r3
 8012eae:	d1a4      	bne.n	8012dfa <_dtoa_r+0xa32>
 8012eb0:	9b04      	ldr	r3, [sp, #16]
 8012eb2:	3301      	adds	r3, #1
 8012eb4:	9304      	str	r3, [sp, #16]
 8012eb6:	2331      	movs	r3, #49	@ 0x31
 8012eb8:	f88a 3000 	strb.w	r3, [sl]
 8012ebc:	e5ba      	b.n	8012a34 <_dtoa_r+0x66c>
 8012ebe:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012ec0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8012f1c <_dtoa_r+0xb54>
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	f43f aab6 	beq.w	8012436 <_dtoa_r+0x6e>
 8012eca:	f10a 0308 	add.w	r3, sl, #8
 8012ece:	f7ff bab0 	b.w	8012432 <_dtoa_r+0x6a>
 8012ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ed4:	2b01      	cmp	r3, #1
 8012ed6:	f77f ae3a 	ble.w	8012b4e <_dtoa_r+0x786>
 8012eda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012edc:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ede:	2001      	movs	r0, #1
 8012ee0:	e658      	b.n	8012b94 <_dtoa_r+0x7cc>
 8012ee2:	9b00      	ldr	r3, [sp, #0]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	f77f aed9 	ble.w	8012c9c <_dtoa_r+0x8d4>
 8012eea:	4656      	mov	r6, sl
 8012eec:	4621      	mov	r1, r4
 8012eee:	4648      	mov	r0, r9
 8012ef0:	f7ff f9e0 	bl	80122b4 <quorem>
 8012ef4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012ef8:	f806 8b01 	strb.w	r8, [r6], #1
 8012efc:	9b00      	ldr	r3, [sp, #0]
 8012efe:	eba6 020a 	sub.w	r2, r6, sl
 8012f02:	4293      	cmp	r3, r2
 8012f04:	ddb5      	ble.n	8012e72 <_dtoa_r+0xaaa>
 8012f06:	4649      	mov	r1, r9
 8012f08:	2300      	movs	r3, #0
 8012f0a:	220a      	movs	r2, #10
 8012f0c:	4658      	mov	r0, fp
 8012f0e:	f000 f847 	bl	8012fa0 <__multadd>
 8012f12:	4681      	mov	r9, r0
 8012f14:	e7ea      	b.n	8012eec <_dtoa_r+0xb24>
 8012f16:	bf00      	nop
 8012f18:	080168f2 	.word	0x080168f2
 8012f1c:	080168e5 	.word	0x080168e5

08012f20 <__ascii_mbtowc>:
 8012f20:	b082      	sub	sp, #8
 8012f22:	b901      	cbnz	r1, 8012f26 <__ascii_mbtowc+0x6>
 8012f24:	a901      	add	r1, sp, #4
 8012f26:	b142      	cbz	r2, 8012f3a <__ascii_mbtowc+0x1a>
 8012f28:	b14b      	cbz	r3, 8012f3e <__ascii_mbtowc+0x1e>
 8012f2a:	7813      	ldrb	r3, [r2, #0]
 8012f2c:	600b      	str	r3, [r1, #0]
 8012f2e:	7812      	ldrb	r2, [r2, #0]
 8012f30:	1e10      	subs	r0, r2, #0
 8012f32:	bf18      	it	ne
 8012f34:	2001      	movne	r0, #1
 8012f36:	b002      	add	sp, #8
 8012f38:	4770      	bx	lr
 8012f3a:	4610      	mov	r0, r2
 8012f3c:	e7fb      	b.n	8012f36 <__ascii_mbtowc+0x16>
 8012f3e:	f06f 0001 	mvn.w	r0, #1
 8012f42:	e7f8      	b.n	8012f36 <__ascii_mbtowc+0x16>

08012f44 <_Balloc>:
 8012f44:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8012f46:	b570      	push	{r4, r5, r6, lr}
 8012f48:	4605      	mov	r5, r0
 8012f4a:	460c      	mov	r4, r1
 8012f4c:	b17b      	cbz	r3, 8012f6e <_Balloc+0x2a>
 8012f4e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8012f50:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012f54:	b9a0      	cbnz	r0, 8012f80 <_Balloc+0x3c>
 8012f56:	2101      	movs	r1, #1
 8012f58:	fa01 f604 	lsl.w	r6, r1, r4
 8012f5c:	1d72      	adds	r2, r6, #5
 8012f5e:	0092      	lsls	r2, r2, #2
 8012f60:	4628      	mov	r0, r5
 8012f62:	f000 fddd 	bl	8013b20 <_calloc_r>
 8012f66:	b148      	cbz	r0, 8012f7c <_Balloc+0x38>
 8012f68:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8012f6c:	e00b      	b.n	8012f86 <_Balloc+0x42>
 8012f6e:	2221      	movs	r2, #33	@ 0x21
 8012f70:	2104      	movs	r1, #4
 8012f72:	f000 fdd5 	bl	8013b20 <_calloc_r>
 8012f76:	6468      	str	r0, [r5, #68]	@ 0x44
 8012f78:	2800      	cmp	r0, #0
 8012f7a:	d1e8      	bne.n	8012f4e <_Balloc+0xa>
 8012f7c:	2000      	movs	r0, #0
 8012f7e:	bd70      	pop	{r4, r5, r6, pc}
 8012f80:	6802      	ldr	r2, [r0, #0]
 8012f82:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8012f86:	2300      	movs	r3, #0
 8012f88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012f8c:	e7f7      	b.n	8012f7e <_Balloc+0x3a>

08012f8e <_Bfree>:
 8012f8e:	b131      	cbz	r1, 8012f9e <_Bfree+0x10>
 8012f90:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8012f92:	684a      	ldr	r2, [r1, #4]
 8012f94:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012f98:	6008      	str	r0, [r1, #0]
 8012f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8012f9e:	4770      	bx	lr

08012fa0 <__multadd>:
 8012fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fa4:	690d      	ldr	r5, [r1, #16]
 8012fa6:	4607      	mov	r7, r0
 8012fa8:	460c      	mov	r4, r1
 8012faa:	461e      	mov	r6, r3
 8012fac:	f101 0c14 	add.w	ip, r1, #20
 8012fb0:	2000      	movs	r0, #0
 8012fb2:	f8dc 3000 	ldr.w	r3, [ip]
 8012fb6:	b299      	uxth	r1, r3
 8012fb8:	fb02 6101 	mla	r1, r2, r1, r6
 8012fbc:	0c1e      	lsrs	r6, r3, #16
 8012fbe:	0c0b      	lsrs	r3, r1, #16
 8012fc0:	fb02 3306 	mla	r3, r2, r6, r3
 8012fc4:	b289      	uxth	r1, r1
 8012fc6:	3001      	adds	r0, #1
 8012fc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012fcc:	4285      	cmp	r5, r0
 8012fce:	f84c 1b04 	str.w	r1, [ip], #4
 8012fd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012fd6:	dcec      	bgt.n	8012fb2 <__multadd+0x12>
 8012fd8:	b30e      	cbz	r6, 801301e <__multadd+0x7e>
 8012fda:	68a3      	ldr	r3, [r4, #8]
 8012fdc:	42ab      	cmp	r3, r5
 8012fde:	dc19      	bgt.n	8013014 <__multadd+0x74>
 8012fe0:	6861      	ldr	r1, [r4, #4]
 8012fe2:	4638      	mov	r0, r7
 8012fe4:	3101      	adds	r1, #1
 8012fe6:	f7ff ffad 	bl	8012f44 <_Balloc>
 8012fea:	4680      	mov	r8, r0
 8012fec:	b928      	cbnz	r0, 8012ffa <__multadd+0x5a>
 8012fee:	4602      	mov	r2, r0
 8012ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8013024 <__multadd+0x84>)
 8012ff2:	480d      	ldr	r0, [pc, #52]	@ (8013028 <__multadd+0x88>)
 8012ff4:	21ba      	movs	r1, #186	@ 0xba
 8012ff6:	f000 fd75 	bl	8013ae4 <__assert_func>
 8012ffa:	6922      	ldr	r2, [r4, #16]
 8012ffc:	3202      	adds	r2, #2
 8012ffe:	f104 010c 	add.w	r1, r4, #12
 8013002:	0092      	lsls	r2, r2, #2
 8013004:	300c      	adds	r0, #12
 8013006:	f7fc fa9f 	bl	800f548 <memcpy>
 801300a:	4621      	mov	r1, r4
 801300c:	4638      	mov	r0, r7
 801300e:	f7ff ffbe 	bl	8012f8e <_Bfree>
 8013012:	4644      	mov	r4, r8
 8013014:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013018:	3501      	adds	r5, #1
 801301a:	615e      	str	r6, [r3, #20]
 801301c:	6125      	str	r5, [r4, #16]
 801301e:	4620      	mov	r0, r4
 8013020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013024:	080168f2 	.word	0x080168f2
 8013028:	0801695b 	.word	0x0801695b

0801302c <__hi0bits>:
 801302c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013030:	4603      	mov	r3, r0
 8013032:	bf36      	itet	cc
 8013034:	0403      	lslcc	r3, r0, #16
 8013036:	2000      	movcs	r0, #0
 8013038:	2010      	movcc	r0, #16
 801303a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801303e:	bf3c      	itt	cc
 8013040:	021b      	lslcc	r3, r3, #8
 8013042:	3008      	addcc	r0, #8
 8013044:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013048:	bf3c      	itt	cc
 801304a:	011b      	lslcc	r3, r3, #4
 801304c:	3004      	addcc	r0, #4
 801304e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013052:	bf3c      	itt	cc
 8013054:	009b      	lslcc	r3, r3, #2
 8013056:	3002      	addcc	r0, #2
 8013058:	2b00      	cmp	r3, #0
 801305a:	db05      	blt.n	8013068 <__hi0bits+0x3c>
 801305c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013060:	f100 0001 	add.w	r0, r0, #1
 8013064:	bf08      	it	eq
 8013066:	2020      	moveq	r0, #32
 8013068:	4770      	bx	lr

0801306a <__lo0bits>:
 801306a:	6803      	ldr	r3, [r0, #0]
 801306c:	4602      	mov	r2, r0
 801306e:	f013 0007 	ands.w	r0, r3, #7
 8013072:	d00b      	beq.n	801308c <__lo0bits+0x22>
 8013074:	07d9      	lsls	r1, r3, #31
 8013076:	d421      	bmi.n	80130bc <__lo0bits+0x52>
 8013078:	0798      	lsls	r0, r3, #30
 801307a:	bf49      	itett	mi
 801307c:	085b      	lsrmi	r3, r3, #1
 801307e:	089b      	lsrpl	r3, r3, #2
 8013080:	2001      	movmi	r0, #1
 8013082:	6013      	strmi	r3, [r2, #0]
 8013084:	bf5c      	itt	pl
 8013086:	6013      	strpl	r3, [r2, #0]
 8013088:	2002      	movpl	r0, #2
 801308a:	4770      	bx	lr
 801308c:	b299      	uxth	r1, r3
 801308e:	b909      	cbnz	r1, 8013094 <__lo0bits+0x2a>
 8013090:	0c1b      	lsrs	r3, r3, #16
 8013092:	2010      	movs	r0, #16
 8013094:	b2d9      	uxtb	r1, r3
 8013096:	b909      	cbnz	r1, 801309c <__lo0bits+0x32>
 8013098:	3008      	adds	r0, #8
 801309a:	0a1b      	lsrs	r3, r3, #8
 801309c:	0719      	lsls	r1, r3, #28
 801309e:	bf04      	itt	eq
 80130a0:	091b      	lsreq	r3, r3, #4
 80130a2:	3004      	addeq	r0, #4
 80130a4:	0799      	lsls	r1, r3, #30
 80130a6:	bf04      	itt	eq
 80130a8:	089b      	lsreq	r3, r3, #2
 80130aa:	3002      	addeq	r0, #2
 80130ac:	07d9      	lsls	r1, r3, #31
 80130ae:	d403      	bmi.n	80130b8 <__lo0bits+0x4e>
 80130b0:	085b      	lsrs	r3, r3, #1
 80130b2:	f100 0001 	add.w	r0, r0, #1
 80130b6:	d003      	beq.n	80130c0 <__lo0bits+0x56>
 80130b8:	6013      	str	r3, [r2, #0]
 80130ba:	4770      	bx	lr
 80130bc:	2000      	movs	r0, #0
 80130be:	4770      	bx	lr
 80130c0:	2020      	movs	r0, #32
 80130c2:	4770      	bx	lr

080130c4 <__i2b>:
 80130c4:	b510      	push	{r4, lr}
 80130c6:	460c      	mov	r4, r1
 80130c8:	2101      	movs	r1, #1
 80130ca:	f7ff ff3b 	bl	8012f44 <_Balloc>
 80130ce:	4602      	mov	r2, r0
 80130d0:	b928      	cbnz	r0, 80130de <__i2b+0x1a>
 80130d2:	4b05      	ldr	r3, [pc, #20]	@ (80130e8 <__i2b+0x24>)
 80130d4:	4805      	ldr	r0, [pc, #20]	@ (80130ec <__i2b+0x28>)
 80130d6:	f240 1145 	movw	r1, #325	@ 0x145
 80130da:	f000 fd03 	bl	8013ae4 <__assert_func>
 80130de:	2301      	movs	r3, #1
 80130e0:	6144      	str	r4, [r0, #20]
 80130e2:	6103      	str	r3, [r0, #16]
 80130e4:	bd10      	pop	{r4, pc}
 80130e6:	bf00      	nop
 80130e8:	080168f2 	.word	0x080168f2
 80130ec:	0801695b 	.word	0x0801695b

080130f0 <__multiply>:
 80130f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130f4:	4614      	mov	r4, r2
 80130f6:	690a      	ldr	r2, [r1, #16]
 80130f8:	6923      	ldr	r3, [r4, #16]
 80130fa:	429a      	cmp	r2, r3
 80130fc:	bfa8      	it	ge
 80130fe:	4623      	movge	r3, r4
 8013100:	460f      	mov	r7, r1
 8013102:	bfa4      	itt	ge
 8013104:	460c      	movge	r4, r1
 8013106:	461f      	movge	r7, r3
 8013108:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801310c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013110:	68a3      	ldr	r3, [r4, #8]
 8013112:	6861      	ldr	r1, [r4, #4]
 8013114:	eb0a 0609 	add.w	r6, sl, r9
 8013118:	42b3      	cmp	r3, r6
 801311a:	b085      	sub	sp, #20
 801311c:	bfb8      	it	lt
 801311e:	3101      	addlt	r1, #1
 8013120:	f7ff ff10 	bl	8012f44 <_Balloc>
 8013124:	b930      	cbnz	r0, 8013134 <__multiply+0x44>
 8013126:	4602      	mov	r2, r0
 8013128:	4b44      	ldr	r3, [pc, #272]	@ (801323c <__multiply+0x14c>)
 801312a:	4845      	ldr	r0, [pc, #276]	@ (8013240 <__multiply+0x150>)
 801312c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013130:	f000 fcd8 	bl	8013ae4 <__assert_func>
 8013134:	f100 0514 	add.w	r5, r0, #20
 8013138:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801313c:	462b      	mov	r3, r5
 801313e:	2200      	movs	r2, #0
 8013140:	4543      	cmp	r3, r8
 8013142:	d321      	bcc.n	8013188 <__multiply+0x98>
 8013144:	f107 0114 	add.w	r1, r7, #20
 8013148:	f104 0214 	add.w	r2, r4, #20
 801314c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013150:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013154:	9302      	str	r3, [sp, #8]
 8013156:	1b13      	subs	r3, r2, r4
 8013158:	3b15      	subs	r3, #21
 801315a:	f023 0303 	bic.w	r3, r3, #3
 801315e:	3304      	adds	r3, #4
 8013160:	f104 0715 	add.w	r7, r4, #21
 8013164:	42ba      	cmp	r2, r7
 8013166:	bf38      	it	cc
 8013168:	2304      	movcc	r3, #4
 801316a:	9301      	str	r3, [sp, #4]
 801316c:	9b02      	ldr	r3, [sp, #8]
 801316e:	9103      	str	r1, [sp, #12]
 8013170:	428b      	cmp	r3, r1
 8013172:	d80c      	bhi.n	801318e <__multiply+0x9e>
 8013174:	2e00      	cmp	r6, #0
 8013176:	dd03      	ble.n	8013180 <__multiply+0x90>
 8013178:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801317c:	2b00      	cmp	r3, #0
 801317e:	d05b      	beq.n	8013238 <__multiply+0x148>
 8013180:	6106      	str	r6, [r0, #16]
 8013182:	b005      	add	sp, #20
 8013184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013188:	f843 2b04 	str.w	r2, [r3], #4
 801318c:	e7d8      	b.n	8013140 <__multiply+0x50>
 801318e:	f8b1 a000 	ldrh.w	sl, [r1]
 8013192:	f1ba 0f00 	cmp.w	sl, #0
 8013196:	d024      	beq.n	80131e2 <__multiply+0xf2>
 8013198:	f104 0e14 	add.w	lr, r4, #20
 801319c:	46a9      	mov	r9, r5
 801319e:	f04f 0c00 	mov.w	ip, #0
 80131a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80131a6:	f8d9 3000 	ldr.w	r3, [r9]
 80131aa:	fa1f fb87 	uxth.w	fp, r7
 80131ae:	b29b      	uxth	r3, r3
 80131b0:	fb0a 330b 	mla	r3, sl, fp, r3
 80131b4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80131b8:	f8d9 7000 	ldr.w	r7, [r9]
 80131bc:	4463      	add	r3, ip
 80131be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80131c2:	fb0a c70b 	mla	r7, sl, fp, ip
 80131c6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80131ca:	b29b      	uxth	r3, r3
 80131cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80131d0:	4572      	cmp	r2, lr
 80131d2:	f849 3b04 	str.w	r3, [r9], #4
 80131d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80131da:	d8e2      	bhi.n	80131a2 <__multiply+0xb2>
 80131dc:	9b01      	ldr	r3, [sp, #4]
 80131de:	f845 c003 	str.w	ip, [r5, r3]
 80131e2:	9b03      	ldr	r3, [sp, #12]
 80131e4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80131e8:	3104      	adds	r1, #4
 80131ea:	f1b9 0f00 	cmp.w	r9, #0
 80131ee:	d021      	beq.n	8013234 <__multiply+0x144>
 80131f0:	682b      	ldr	r3, [r5, #0]
 80131f2:	f104 0c14 	add.w	ip, r4, #20
 80131f6:	46ae      	mov	lr, r5
 80131f8:	f04f 0a00 	mov.w	sl, #0
 80131fc:	f8bc b000 	ldrh.w	fp, [ip]
 8013200:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013204:	fb09 770b 	mla	r7, r9, fp, r7
 8013208:	4457      	add	r7, sl
 801320a:	b29b      	uxth	r3, r3
 801320c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013210:	f84e 3b04 	str.w	r3, [lr], #4
 8013214:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013218:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801321c:	f8be 3000 	ldrh.w	r3, [lr]
 8013220:	fb09 330a 	mla	r3, r9, sl, r3
 8013224:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013228:	4562      	cmp	r2, ip
 801322a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801322e:	d8e5      	bhi.n	80131fc <__multiply+0x10c>
 8013230:	9f01      	ldr	r7, [sp, #4]
 8013232:	51eb      	str	r3, [r5, r7]
 8013234:	3504      	adds	r5, #4
 8013236:	e799      	b.n	801316c <__multiply+0x7c>
 8013238:	3e01      	subs	r6, #1
 801323a:	e79b      	b.n	8013174 <__multiply+0x84>
 801323c:	080168f2 	.word	0x080168f2
 8013240:	0801695b 	.word	0x0801695b

08013244 <__pow5mult>:
 8013244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013248:	4615      	mov	r5, r2
 801324a:	f012 0203 	ands.w	r2, r2, #3
 801324e:	4607      	mov	r7, r0
 8013250:	460e      	mov	r6, r1
 8013252:	d007      	beq.n	8013264 <__pow5mult+0x20>
 8013254:	4c1a      	ldr	r4, [pc, #104]	@ (80132c0 <__pow5mult+0x7c>)
 8013256:	3a01      	subs	r2, #1
 8013258:	2300      	movs	r3, #0
 801325a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801325e:	f7ff fe9f 	bl	8012fa0 <__multadd>
 8013262:	4606      	mov	r6, r0
 8013264:	10ad      	asrs	r5, r5, #2
 8013266:	d027      	beq.n	80132b8 <__pow5mult+0x74>
 8013268:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 801326a:	b944      	cbnz	r4, 801327e <__pow5mult+0x3a>
 801326c:	f240 2171 	movw	r1, #625	@ 0x271
 8013270:	4638      	mov	r0, r7
 8013272:	f7ff ff27 	bl	80130c4 <__i2b>
 8013276:	2300      	movs	r3, #0
 8013278:	6438      	str	r0, [r7, #64]	@ 0x40
 801327a:	4604      	mov	r4, r0
 801327c:	6003      	str	r3, [r0, #0]
 801327e:	f04f 0900 	mov.w	r9, #0
 8013282:	07eb      	lsls	r3, r5, #31
 8013284:	d50a      	bpl.n	801329c <__pow5mult+0x58>
 8013286:	4631      	mov	r1, r6
 8013288:	4622      	mov	r2, r4
 801328a:	4638      	mov	r0, r7
 801328c:	f7ff ff30 	bl	80130f0 <__multiply>
 8013290:	4631      	mov	r1, r6
 8013292:	4680      	mov	r8, r0
 8013294:	4638      	mov	r0, r7
 8013296:	f7ff fe7a 	bl	8012f8e <_Bfree>
 801329a:	4646      	mov	r6, r8
 801329c:	106d      	asrs	r5, r5, #1
 801329e:	d00b      	beq.n	80132b8 <__pow5mult+0x74>
 80132a0:	6820      	ldr	r0, [r4, #0]
 80132a2:	b938      	cbnz	r0, 80132b4 <__pow5mult+0x70>
 80132a4:	4622      	mov	r2, r4
 80132a6:	4621      	mov	r1, r4
 80132a8:	4638      	mov	r0, r7
 80132aa:	f7ff ff21 	bl	80130f0 <__multiply>
 80132ae:	6020      	str	r0, [r4, #0]
 80132b0:	f8c0 9000 	str.w	r9, [r0]
 80132b4:	4604      	mov	r4, r0
 80132b6:	e7e4      	b.n	8013282 <__pow5mult+0x3e>
 80132b8:	4630      	mov	r0, r6
 80132ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132be:	bf00      	nop
 80132c0:	080169b4 	.word	0x080169b4

080132c4 <__lshift>:
 80132c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132c8:	460c      	mov	r4, r1
 80132ca:	6849      	ldr	r1, [r1, #4]
 80132cc:	6923      	ldr	r3, [r4, #16]
 80132ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80132d2:	68a3      	ldr	r3, [r4, #8]
 80132d4:	4607      	mov	r7, r0
 80132d6:	4691      	mov	r9, r2
 80132d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80132dc:	f108 0601 	add.w	r6, r8, #1
 80132e0:	42b3      	cmp	r3, r6
 80132e2:	db0b      	blt.n	80132fc <__lshift+0x38>
 80132e4:	4638      	mov	r0, r7
 80132e6:	f7ff fe2d 	bl	8012f44 <_Balloc>
 80132ea:	4605      	mov	r5, r0
 80132ec:	b948      	cbnz	r0, 8013302 <__lshift+0x3e>
 80132ee:	4602      	mov	r2, r0
 80132f0:	4b28      	ldr	r3, [pc, #160]	@ (8013394 <__lshift+0xd0>)
 80132f2:	4829      	ldr	r0, [pc, #164]	@ (8013398 <__lshift+0xd4>)
 80132f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80132f8:	f000 fbf4 	bl	8013ae4 <__assert_func>
 80132fc:	3101      	adds	r1, #1
 80132fe:	005b      	lsls	r3, r3, #1
 8013300:	e7ee      	b.n	80132e0 <__lshift+0x1c>
 8013302:	2300      	movs	r3, #0
 8013304:	f100 0114 	add.w	r1, r0, #20
 8013308:	f100 0210 	add.w	r2, r0, #16
 801330c:	4618      	mov	r0, r3
 801330e:	4553      	cmp	r3, sl
 8013310:	db33      	blt.n	801337a <__lshift+0xb6>
 8013312:	6920      	ldr	r0, [r4, #16]
 8013314:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013318:	f104 0314 	add.w	r3, r4, #20
 801331c:	f019 091f 	ands.w	r9, r9, #31
 8013320:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013324:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013328:	d02b      	beq.n	8013382 <__lshift+0xbe>
 801332a:	f1c9 0e20 	rsb	lr, r9, #32
 801332e:	468a      	mov	sl, r1
 8013330:	2200      	movs	r2, #0
 8013332:	6818      	ldr	r0, [r3, #0]
 8013334:	fa00 f009 	lsl.w	r0, r0, r9
 8013338:	4310      	orrs	r0, r2
 801333a:	f84a 0b04 	str.w	r0, [sl], #4
 801333e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013342:	459c      	cmp	ip, r3
 8013344:	fa22 f20e 	lsr.w	r2, r2, lr
 8013348:	d8f3      	bhi.n	8013332 <__lshift+0x6e>
 801334a:	ebac 0304 	sub.w	r3, ip, r4
 801334e:	3b15      	subs	r3, #21
 8013350:	f023 0303 	bic.w	r3, r3, #3
 8013354:	3304      	adds	r3, #4
 8013356:	f104 0015 	add.w	r0, r4, #21
 801335a:	4584      	cmp	ip, r0
 801335c:	bf38      	it	cc
 801335e:	2304      	movcc	r3, #4
 8013360:	50ca      	str	r2, [r1, r3]
 8013362:	b10a      	cbz	r2, 8013368 <__lshift+0xa4>
 8013364:	f108 0602 	add.w	r6, r8, #2
 8013368:	3e01      	subs	r6, #1
 801336a:	4638      	mov	r0, r7
 801336c:	612e      	str	r6, [r5, #16]
 801336e:	4621      	mov	r1, r4
 8013370:	f7ff fe0d 	bl	8012f8e <_Bfree>
 8013374:	4628      	mov	r0, r5
 8013376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801337a:	f842 0f04 	str.w	r0, [r2, #4]!
 801337e:	3301      	adds	r3, #1
 8013380:	e7c5      	b.n	801330e <__lshift+0x4a>
 8013382:	3904      	subs	r1, #4
 8013384:	f853 2b04 	ldr.w	r2, [r3], #4
 8013388:	f841 2f04 	str.w	r2, [r1, #4]!
 801338c:	459c      	cmp	ip, r3
 801338e:	d8f9      	bhi.n	8013384 <__lshift+0xc0>
 8013390:	e7ea      	b.n	8013368 <__lshift+0xa4>
 8013392:	bf00      	nop
 8013394:	080168f2 	.word	0x080168f2
 8013398:	0801695b 	.word	0x0801695b

0801339c <__mcmp>:
 801339c:	690a      	ldr	r2, [r1, #16]
 801339e:	4603      	mov	r3, r0
 80133a0:	6900      	ldr	r0, [r0, #16]
 80133a2:	1a80      	subs	r0, r0, r2
 80133a4:	b530      	push	{r4, r5, lr}
 80133a6:	d10e      	bne.n	80133c6 <__mcmp+0x2a>
 80133a8:	3314      	adds	r3, #20
 80133aa:	3114      	adds	r1, #20
 80133ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80133b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80133b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80133b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80133bc:	4295      	cmp	r5, r2
 80133be:	d003      	beq.n	80133c8 <__mcmp+0x2c>
 80133c0:	d205      	bcs.n	80133ce <__mcmp+0x32>
 80133c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80133c6:	bd30      	pop	{r4, r5, pc}
 80133c8:	42a3      	cmp	r3, r4
 80133ca:	d3f3      	bcc.n	80133b4 <__mcmp+0x18>
 80133cc:	e7fb      	b.n	80133c6 <__mcmp+0x2a>
 80133ce:	2001      	movs	r0, #1
 80133d0:	e7f9      	b.n	80133c6 <__mcmp+0x2a>
	...

080133d4 <__mdiff>:
 80133d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133d8:	4689      	mov	r9, r1
 80133da:	4606      	mov	r6, r0
 80133dc:	4611      	mov	r1, r2
 80133de:	4648      	mov	r0, r9
 80133e0:	4614      	mov	r4, r2
 80133e2:	f7ff ffdb 	bl	801339c <__mcmp>
 80133e6:	1e05      	subs	r5, r0, #0
 80133e8:	d112      	bne.n	8013410 <__mdiff+0x3c>
 80133ea:	4629      	mov	r1, r5
 80133ec:	4630      	mov	r0, r6
 80133ee:	f7ff fda9 	bl	8012f44 <_Balloc>
 80133f2:	4602      	mov	r2, r0
 80133f4:	b928      	cbnz	r0, 8013402 <__mdiff+0x2e>
 80133f6:	4b3f      	ldr	r3, [pc, #252]	@ (80134f4 <__mdiff+0x120>)
 80133f8:	f240 2137 	movw	r1, #567	@ 0x237
 80133fc:	483e      	ldr	r0, [pc, #248]	@ (80134f8 <__mdiff+0x124>)
 80133fe:	f000 fb71 	bl	8013ae4 <__assert_func>
 8013402:	2301      	movs	r3, #1
 8013404:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013408:	4610      	mov	r0, r2
 801340a:	b003      	add	sp, #12
 801340c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013410:	bfbc      	itt	lt
 8013412:	464b      	movlt	r3, r9
 8013414:	46a1      	movlt	r9, r4
 8013416:	4630      	mov	r0, r6
 8013418:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801341c:	bfba      	itte	lt
 801341e:	461c      	movlt	r4, r3
 8013420:	2501      	movlt	r5, #1
 8013422:	2500      	movge	r5, #0
 8013424:	f7ff fd8e 	bl	8012f44 <_Balloc>
 8013428:	4602      	mov	r2, r0
 801342a:	b918      	cbnz	r0, 8013434 <__mdiff+0x60>
 801342c:	4b31      	ldr	r3, [pc, #196]	@ (80134f4 <__mdiff+0x120>)
 801342e:	f240 2145 	movw	r1, #581	@ 0x245
 8013432:	e7e3      	b.n	80133fc <__mdiff+0x28>
 8013434:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013438:	6926      	ldr	r6, [r4, #16]
 801343a:	60c5      	str	r5, [r0, #12]
 801343c:	f109 0310 	add.w	r3, r9, #16
 8013440:	f109 0514 	add.w	r5, r9, #20
 8013444:	f104 0e14 	add.w	lr, r4, #20
 8013448:	f100 0b14 	add.w	fp, r0, #20
 801344c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013450:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013454:	9301      	str	r3, [sp, #4]
 8013456:	46d9      	mov	r9, fp
 8013458:	f04f 0c00 	mov.w	ip, #0
 801345c:	9b01      	ldr	r3, [sp, #4]
 801345e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013462:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013466:	9301      	str	r3, [sp, #4]
 8013468:	fa1f f38a 	uxth.w	r3, sl
 801346c:	4619      	mov	r1, r3
 801346e:	b283      	uxth	r3, r0
 8013470:	1acb      	subs	r3, r1, r3
 8013472:	0c00      	lsrs	r0, r0, #16
 8013474:	4463      	add	r3, ip
 8013476:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801347a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801347e:	b29b      	uxth	r3, r3
 8013480:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013484:	4576      	cmp	r6, lr
 8013486:	f849 3b04 	str.w	r3, [r9], #4
 801348a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801348e:	d8e5      	bhi.n	801345c <__mdiff+0x88>
 8013490:	1b33      	subs	r3, r6, r4
 8013492:	3b15      	subs	r3, #21
 8013494:	f023 0303 	bic.w	r3, r3, #3
 8013498:	3415      	adds	r4, #21
 801349a:	3304      	adds	r3, #4
 801349c:	42a6      	cmp	r6, r4
 801349e:	bf38      	it	cc
 80134a0:	2304      	movcc	r3, #4
 80134a2:	441d      	add	r5, r3
 80134a4:	445b      	add	r3, fp
 80134a6:	461e      	mov	r6, r3
 80134a8:	462c      	mov	r4, r5
 80134aa:	4544      	cmp	r4, r8
 80134ac:	d30e      	bcc.n	80134cc <__mdiff+0xf8>
 80134ae:	f108 0103 	add.w	r1, r8, #3
 80134b2:	1b49      	subs	r1, r1, r5
 80134b4:	f021 0103 	bic.w	r1, r1, #3
 80134b8:	3d03      	subs	r5, #3
 80134ba:	45a8      	cmp	r8, r5
 80134bc:	bf38      	it	cc
 80134be:	2100      	movcc	r1, #0
 80134c0:	440b      	add	r3, r1
 80134c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80134c6:	b191      	cbz	r1, 80134ee <__mdiff+0x11a>
 80134c8:	6117      	str	r7, [r2, #16]
 80134ca:	e79d      	b.n	8013408 <__mdiff+0x34>
 80134cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80134d0:	46e6      	mov	lr, ip
 80134d2:	0c08      	lsrs	r0, r1, #16
 80134d4:	fa1c fc81 	uxtah	ip, ip, r1
 80134d8:	4471      	add	r1, lr
 80134da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80134de:	b289      	uxth	r1, r1
 80134e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80134e4:	f846 1b04 	str.w	r1, [r6], #4
 80134e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80134ec:	e7dd      	b.n	80134aa <__mdiff+0xd6>
 80134ee:	3f01      	subs	r7, #1
 80134f0:	e7e7      	b.n	80134c2 <__mdiff+0xee>
 80134f2:	bf00      	nop
 80134f4:	080168f2 	.word	0x080168f2
 80134f8:	0801695b 	.word	0x0801695b

080134fc <__d2b>:
 80134fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013500:	460f      	mov	r7, r1
 8013502:	2101      	movs	r1, #1
 8013504:	ec59 8b10 	vmov	r8, r9, d0
 8013508:	4616      	mov	r6, r2
 801350a:	f7ff fd1b 	bl	8012f44 <_Balloc>
 801350e:	4604      	mov	r4, r0
 8013510:	b930      	cbnz	r0, 8013520 <__d2b+0x24>
 8013512:	4602      	mov	r2, r0
 8013514:	4b23      	ldr	r3, [pc, #140]	@ (80135a4 <__d2b+0xa8>)
 8013516:	4824      	ldr	r0, [pc, #144]	@ (80135a8 <__d2b+0xac>)
 8013518:	f240 310f 	movw	r1, #783	@ 0x30f
 801351c:	f000 fae2 	bl	8013ae4 <__assert_func>
 8013520:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013524:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013528:	b10d      	cbz	r5, 801352e <__d2b+0x32>
 801352a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801352e:	9301      	str	r3, [sp, #4]
 8013530:	f1b8 0300 	subs.w	r3, r8, #0
 8013534:	d023      	beq.n	801357e <__d2b+0x82>
 8013536:	4668      	mov	r0, sp
 8013538:	9300      	str	r3, [sp, #0]
 801353a:	f7ff fd96 	bl	801306a <__lo0bits>
 801353e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013542:	b1d0      	cbz	r0, 801357a <__d2b+0x7e>
 8013544:	f1c0 0320 	rsb	r3, r0, #32
 8013548:	fa02 f303 	lsl.w	r3, r2, r3
 801354c:	430b      	orrs	r3, r1
 801354e:	40c2      	lsrs	r2, r0
 8013550:	6163      	str	r3, [r4, #20]
 8013552:	9201      	str	r2, [sp, #4]
 8013554:	9b01      	ldr	r3, [sp, #4]
 8013556:	61a3      	str	r3, [r4, #24]
 8013558:	2b00      	cmp	r3, #0
 801355a:	bf0c      	ite	eq
 801355c:	2201      	moveq	r2, #1
 801355e:	2202      	movne	r2, #2
 8013560:	6122      	str	r2, [r4, #16]
 8013562:	b1a5      	cbz	r5, 801358e <__d2b+0x92>
 8013564:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013568:	4405      	add	r5, r0
 801356a:	603d      	str	r5, [r7, #0]
 801356c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013570:	6030      	str	r0, [r6, #0]
 8013572:	4620      	mov	r0, r4
 8013574:	b003      	add	sp, #12
 8013576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801357a:	6161      	str	r1, [r4, #20]
 801357c:	e7ea      	b.n	8013554 <__d2b+0x58>
 801357e:	a801      	add	r0, sp, #4
 8013580:	f7ff fd73 	bl	801306a <__lo0bits>
 8013584:	9b01      	ldr	r3, [sp, #4]
 8013586:	6163      	str	r3, [r4, #20]
 8013588:	3020      	adds	r0, #32
 801358a:	2201      	movs	r2, #1
 801358c:	e7e8      	b.n	8013560 <__d2b+0x64>
 801358e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013592:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013596:	6038      	str	r0, [r7, #0]
 8013598:	6918      	ldr	r0, [r3, #16]
 801359a:	f7ff fd47 	bl	801302c <__hi0bits>
 801359e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80135a2:	e7e5      	b.n	8013570 <__d2b+0x74>
 80135a4:	080168f2 	.word	0x080168f2
 80135a8:	0801695b 	.word	0x0801695b

080135ac <_realloc_r>:
 80135ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135b0:	4682      	mov	sl, r0
 80135b2:	4693      	mov	fp, r2
 80135b4:	460c      	mov	r4, r1
 80135b6:	b929      	cbnz	r1, 80135c4 <_realloc_r+0x18>
 80135b8:	4611      	mov	r1, r2
 80135ba:	b003      	add	sp, #12
 80135bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135c0:	f7fc b8f6 	b.w	800f7b0 <_malloc_r>
 80135c4:	f7fc fb2e 	bl	800fc24 <__malloc_lock>
 80135c8:	f10b 080b 	add.w	r8, fp, #11
 80135cc:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80135d0:	f1b8 0f16 	cmp.w	r8, #22
 80135d4:	f1a4 0908 	sub.w	r9, r4, #8
 80135d8:	f025 0603 	bic.w	r6, r5, #3
 80135dc:	d908      	bls.n	80135f0 <_realloc_r+0x44>
 80135de:	f038 0807 	bics.w	r8, r8, #7
 80135e2:	d507      	bpl.n	80135f4 <_realloc_r+0x48>
 80135e4:	230c      	movs	r3, #12
 80135e6:	f8ca 3000 	str.w	r3, [sl]
 80135ea:	f04f 0b00 	mov.w	fp, #0
 80135ee:	e032      	b.n	8013656 <_realloc_r+0xaa>
 80135f0:	f04f 0810 	mov.w	r8, #16
 80135f4:	45c3      	cmp	fp, r8
 80135f6:	d8f5      	bhi.n	80135e4 <_realloc_r+0x38>
 80135f8:	4546      	cmp	r6, r8
 80135fa:	f280 8174 	bge.w	80138e6 <_realloc_r+0x33a>
 80135fe:	4b9e      	ldr	r3, [pc, #632]	@ (8013878 <_realloc_r+0x2cc>)
 8013600:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8013604:	eb09 0106 	add.w	r1, r9, r6
 8013608:	458c      	cmp	ip, r1
 801360a:	6848      	ldr	r0, [r1, #4]
 801360c:	d005      	beq.n	801361a <_realloc_r+0x6e>
 801360e:	f020 0201 	bic.w	r2, r0, #1
 8013612:	440a      	add	r2, r1
 8013614:	6852      	ldr	r2, [r2, #4]
 8013616:	07d7      	lsls	r7, r2, #31
 8013618:	d449      	bmi.n	80136ae <_realloc_r+0x102>
 801361a:	f020 0003 	bic.w	r0, r0, #3
 801361e:	458c      	cmp	ip, r1
 8013620:	eb06 0700 	add.w	r7, r6, r0
 8013624:	d11b      	bne.n	801365e <_realloc_r+0xb2>
 8013626:	f108 0210 	add.w	r2, r8, #16
 801362a:	42ba      	cmp	r2, r7
 801362c:	dc41      	bgt.n	80136b2 <_realloc_r+0x106>
 801362e:	eb09 0208 	add.w	r2, r9, r8
 8013632:	eba7 0708 	sub.w	r7, r7, r8
 8013636:	f047 0701 	orr.w	r7, r7, #1
 801363a:	609a      	str	r2, [r3, #8]
 801363c:	6057      	str	r7, [r2, #4]
 801363e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013642:	f003 0301 	and.w	r3, r3, #1
 8013646:	ea43 0308 	orr.w	r3, r3, r8
 801364a:	f844 3c04 	str.w	r3, [r4, #-4]
 801364e:	4650      	mov	r0, sl
 8013650:	f7fc faee 	bl	800fc30 <__malloc_unlock>
 8013654:	46a3      	mov	fp, r4
 8013656:	4658      	mov	r0, fp
 8013658:	b003      	add	sp, #12
 801365a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801365e:	45b8      	cmp	r8, r7
 8013660:	dc27      	bgt.n	80136b2 <_realloc_r+0x106>
 8013662:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8013666:	60d3      	str	r3, [r2, #12]
 8013668:	609a      	str	r2, [r3, #8]
 801366a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801366e:	eba7 0008 	sub.w	r0, r7, r8
 8013672:	280f      	cmp	r0, #15
 8013674:	f003 0301 	and.w	r3, r3, #1
 8013678:	eb09 0207 	add.w	r2, r9, r7
 801367c:	f240 8135 	bls.w	80138ea <_realloc_r+0x33e>
 8013680:	eb09 0108 	add.w	r1, r9, r8
 8013684:	ea48 0303 	orr.w	r3, r8, r3
 8013688:	f040 0001 	orr.w	r0, r0, #1
 801368c:	f8c9 3004 	str.w	r3, [r9, #4]
 8013690:	6048      	str	r0, [r1, #4]
 8013692:	6853      	ldr	r3, [r2, #4]
 8013694:	f043 0301 	orr.w	r3, r3, #1
 8013698:	6053      	str	r3, [r2, #4]
 801369a:	3108      	adds	r1, #8
 801369c:	4650      	mov	r0, sl
 801369e:	f7fb ffc7 	bl	800f630 <_free_r>
 80136a2:	4650      	mov	r0, sl
 80136a4:	f7fc fac4 	bl	800fc30 <__malloc_unlock>
 80136a8:	f109 0b08 	add.w	fp, r9, #8
 80136ac:	e7d3      	b.n	8013656 <_realloc_r+0xaa>
 80136ae:	2000      	movs	r0, #0
 80136b0:	4601      	mov	r1, r0
 80136b2:	07ea      	lsls	r2, r5, #31
 80136b4:	f100 80c7 	bmi.w	8013846 <_realloc_r+0x29a>
 80136b8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80136bc:	eba9 0505 	sub.w	r5, r9, r5
 80136c0:	686a      	ldr	r2, [r5, #4]
 80136c2:	f022 0203 	bic.w	r2, r2, #3
 80136c6:	4432      	add	r2, r6
 80136c8:	9201      	str	r2, [sp, #4]
 80136ca:	2900      	cmp	r1, #0
 80136cc:	f000 8086 	beq.w	80137dc <_realloc_r+0x230>
 80136d0:	458c      	cmp	ip, r1
 80136d2:	eb00 0702 	add.w	r7, r0, r2
 80136d6:	d149      	bne.n	801376c <_realloc_r+0x1c0>
 80136d8:	f108 0210 	add.w	r2, r8, #16
 80136dc:	42ba      	cmp	r2, r7
 80136de:	dc7d      	bgt.n	80137dc <_realloc_r+0x230>
 80136e0:	46ab      	mov	fp, r5
 80136e2:	68ea      	ldr	r2, [r5, #12]
 80136e4:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 80136e8:	60ca      	str	r2, [r1, #12]
 80136ea:	6091      	str	r1, [r2, #8]
 80136ec:	1f32      	subs	r2, r6, #4
 80136ee:	2a24      	cmp	r2, #36	@ 0x24
 80136f0:	d836      	bhi.n	8013760 <_realloc_r+0x1b4>
 80136f2:	2a13      	cmp	r2, #19
 80136f4:	d932      	bls.n	801375c <_realloc_r+0x1b0>
 80136f6:	6821      	ldr	r1, [r4, #0]
 80136f8:	60a9      	str	r1, [r5, #8]
 80136fa:	6861      	ldr	r1, [r4, #4]
 80136fc:	60e9      	str	r1, [r5, #12]
 80136fe:	2a1b      	cmp	r2, #27
 8013700:	d81a      	bhi.n	8013738 <_realloc_r+0x18c>
 8013702:	3408      	adds	r4, #8
 8013704:	f105 0210 	add.w	r2, r5, #16
 8013708:	6821      	ldr	r1, [r4, #0]
 801370a:	6011      	str	r1, [r2, #0]
 801370c:	6861      	ldr	r1, [r4, #4]
 801370e:	6051      	str	r1, [r2, #4]
 8013710:	68a1      	ldr	r1, [r4, #8]
 8013712:	6091      	str	r1, [r2, #8]
 8013714:	eb05 0208 	add.w	r2, r5, r8
 8013718:	eba7 0708 	sub.w	r7, r7, r8
 801371c:	f047 0701 	orr.w	r7, r7, #1
 8013720:	609a      	str	r2, [r3, #8]
 8013722:	6057      	str	r7, [r2, #4]
 8013724:	686b      	ldr	r3, [r5, #4]
 8013726:	f003 0301 	and.w	r3, r3, #1
 801372a:	ea43 0308 	orr.w	r3, r3, r8
 801372e:	606b      	str	r3, [r5, #4]
 8013730:	4650      	mov	r0, sl
 8013732:	f7fc fa7d 	bl	800fc30 <__malloc_unlock>
 8013736:	e78e      	b.n	8013656 <_realloc_r+0xaa>
 8013738:	68a1      	ldr	r1, [r4, #8]
 801373a:	6129      	str	r1, [r5, #16]
 801373c:	68e1      	ldr	r1, [r4, #12]
 801373e:	6169      	str	r1, [r5, #20]
 8013740:	2a24      	cmp	r2, #36	@ 0x24
 8013742:	bf01      	itttt	eq
 8013744:	6922      	ldreq	r2, [r4, #16]
 8013746:	61aa      	streq	r2, [r5, #24]
 8013748:	6961      	ldreq	r1, [r4, #20]
 801374a:	61e9      	streq	r1, [r5, #28]
 801374c:	bf19      	ittee	ne
 801374e:	3410      	addne	r4, #16
 8013750:	f105 0218 	addne.w	r2, r5, #24
 8013754:	f105 0220 	addeq.w	r2, r5, #32
 8013758:	3418      	addeq	r4, #24
 801375a:	e7d5      	b.n	8013708 <_realloc_r+0x15c>
 801375c:	465a      	mov	r2, fp
 801375e:	e7d3      	b.n	8013708 <_realloc_r+0x15c>
 8013760:	4621      	mov	r1, r4
 8013762:	4658      	mov	r0, fp
 8013764:	f7fb fe59 	bl	800f41a <memmove>
 8013768:	4b43      	ldr	r3, [pc, #268]	@ (8013878 <_realloc_r+0x2cc>)
 801376a:	e7d3      	b.n	8013714 <_realloc_r+0x168>
 801376c:	45b8      	cmp	r8, r7
 801376e:	dc35      	bgt.n	80137dc <_realloc_r+0x230>
 8013770:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8013774:	4628      	mov	r0, r5
 8013776:	60d3      	str	r3, [r2, #12]
 8013778:	609a      	str	r2, [r3, #8]
 801377a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801377e:	68eb      	ldr	r3, [r5, #12]
 8013780:	60d3      	str	r3, [r2, #12]
 8013782:	609a      	str	r2, [r3, #8]
 8013784:	1f32      	subs	r2, r6, #4
 8013786:	2a24      	cmp	r2, #36	@ 0x24
 8013788:	d824      	bhi.n	80137d4 <_realloc_r+0x228>
 801378a:	2a13      	cmp	r2, #19
 801378c:	d908      	bls.n	80137a0 <_realloc_r+0x1f4>
 801378e:	6823      	ldr	r3, [r4, #0]
 8013790:	60ab      	str	r3, [r5, #8]
 8013792:	6863      	ldr	r3, [r4, #4]
 8013794:	60eb      	str	r3, [r5, #12]
 8013796:	2a1b      	cmp	r2, #27
 8013798:	d80a      	bhi.n	80137b0 <_realloc_r+0x204>
 801379a:	3408      	adds	r4, #8
 801379c:	f105 0010 	add.w	r0, r5, #16
 80137a0:	6823      	ldr	r3, [r4, #0]
 80137a2:	6003      	str	r3, [r0, #0]
 80137a4:	6863      	ldr	r3, [r4, #4]
 80137a6:	6043      	str	r3, [r0, #4]
 80137a8:	68a3      	ldr	r3, [r4, #8]
 80137aa:	6083      	str	r3, [r0, #8]
 80137ac:	46a9      	mov	r9, r5
 80137ae:	e75c      	b.n	801366a <_realloc_r+0xbe>
 80137b0:	68a3      	ldr	r3, [r4, #8]
 80137b2:	612b      	str	r3, [r5, #16]
 80137b4:	68e3      	ldr	r3, [r4, #12]
 80137b6:	616b      	str	r3, [r5, #20]
 80137b8:	2a24      	cmp	r2, #36	@ 0x24
 80137ba:	bf01      	itttt	eq
 80137bc:	6923      	ldreq	r3, [r4, #16]
 80137be:	61ab      	streq	r3, [r5, #24]
 80137c0:	6963      	ldreq	r3, [r4, #20]
 80137c2:	61eb      	streq	r3, [r5, #28]
 80137c4:	bf19      	ittee	ne
 80137c6:	3410      	addne	r4, #16
 80137c8:	f105 0018 	addne.w	r0, r5, #24
 80137cc:	f105 0020 	addeq.w	r0, r5, #32
 80137d0:	3418      	addeq	r4, #24
 80137d2:	e7e5      	b.n	80137a0 <_realloc_r+0x1f4>
 80137d4:	4621      	mov	r1, r4
 80137d6:	f7fb fe20 	bl	800f41a <memmove>
 80137da:	e7e7      	b.n	80137ac <_realloc_r+0x200>
 80137dc:	9b01      	ldr	r3, [sp, #4]
 80137de:	4598      	cmp	r8, r3
 80137e0:	dc31      	bgt.n	8013846 <_realloc_r+0x29a>
 80137e2:	4628      	mov	r0, r5
 80137e4:	68eb      	ldr	r3, [r5, #12]
 80137e6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80137ea:	60d3      	str	r3, [r2, #12]
 80137ec:	609a      	str	r2, [r3, #8]
 80137ee:	1f32      	subs	r2, r6, #4
 80137f0:	2a24      	cmp	r2, #36	@ 0x24
 80137f2:	d824      	bhi.n	801383e <_realloc_r+0x292>
 80137f4:	2a13      	cmp	r2, #19
 80137f6:	d908      	bls.n	801380a <_realloc_r+0x25e>
 80137f8:	6823      	ldr	r3, [r4, #0]
 80137fa:	60ab      	str	r3, [r5, #8]
 80137fc:	6863      	ldr	r3, [r4, #4]
 80137fe:	60eb      	str	r3, [r5, #12]
 8013800:	2a1b      	cmp	r2, #27
 8013802:	d80a      	bhi.n	801381a <_realloc_r+0x26e>
 8013804:	3408      	adds	r4, #8
 8013806:	f105 0010 	add.w	r0, r5, #16
 801380a:	6823      	ldr	r3, [r4, #0]
 801380c:	6003      	str	r3, [r0, #0]
 801380e:	6863      	ldr	r3, [r4, #4]
 8013810:	6043      	str	r3, [r0, #4]
 8013812:	68a3      	ldr	r3, [r4, #8]
 8013814:	6083      	str	r3, [r0, #8]
 8013816:	9f01      	ldr	r7, [sp, #4]
 8013818:	e7c8      	b.n	80137ac <_realloc_r+0x200>
 801381a:	68a3      	ldr	r3, [r4, #8]
 801381c:	612b      	str	r3, [r5, #16]
 801381e:	68e3      	ldr	r3, [r4, #12]
 8013820:	616b      	str	r3, [r5, #20]
 8013822:	2a24      	cmp	r2, #36	@ 0x24
 8013824:	bf01      	itttt	eq
 8013826:	6923      	ldreq	r3, [r4, #16]
 8013828:	61ab      	streq	r3, [r5, #24]
 801382a:	6963      	ldreq	r3, [r4, #20]
 801382c:	61eb      	streq	r3, [r5, #28]
 801382e:	bf19      	ittee	ne
 8013830:	3410      	addne	r4, #16
 8013832:	f105 0018 	addne.w	r0, r5, #24
 8013836:	f105 0020 	addeq.w	r0, r5, #32
 801383a:	3418      	addeq	r4, #24
 801383c:	e7e5      	b.n	801380a <_realloc_r+0x25e>
 801383e:	4621      	mov	r1, r4
 8013840:	f7fb fdeb 	bl	800f41a <memmove>
 8013844:	e7e7      	b.n	8013816 <_realloc_r+0x26a>
 8013846:	4659      	mov	r1, fp
 8013848:	4650      	mov	r0, sl
 801384a:	f7fb ffb1 	bl	800f7b0 <_malloc_r>
 801384e:	4683      	mov	fp, r0
 8013850:	b918      	cbnz	r0, 801385a <_realloc_r+0x2ae>
 8013852:	4650      	mov	r0, sl
 8013854:	f7fc f9ec 	bl	800fc30 <__malloc_unlock>
 8013858:	e6c7      	b.n	80135ea <_realloc_r+0x3e>
 801385a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801385e:	f023 0301 	bic.w	r3, r3, #1
 8013862:	444b      	add	r3, r9
 8013864:	f1a0 0208 	sub.w	r2, r0, #8
 8013868:	4293      	cmp	r3, r2
 801386a:	d107      	bne.n	801387c <_realloc_r+0x2d0>
 801386c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8013870:	f027 0703 	bic.w	r7, r7, #3
 8013874:	4437      	add	r7, r6
 8013876:	e6f8      	b.n	801366a <_realloc_r+0xbe>
 8013878:	2000016c 	.word	0x2000016c
 801387c:	1f32      	subs	r2, r6, #4
 801387e:	2a24      	cmp	r2, #36	@ 0x24
 8013880:	d82d      	bhi.n	80138de <_realloc_r+0x332>
 8013882:	2a13      	cmp	r2, #19
 8013884:	d928      	bls.n	80138d8 <_realloc_r+0x32c>
 8013886:	6823      	ldr	r3, [r4, #0]
 8013888:	6003      	str	r3, [r0, #0]
 801388a:	6863      	ldr	r3, [r4, #4]
 801388c:	6043      	str	r3, [r0, #4]
 801388e:	2a1b      	cmp	r2, #27
 8013890:	d80e      	bhi.n	80138b0 <_realloc_r+0x304>
 8013892:	f104 0208 	add.w	r2, r4, #8
 8013896:	f100 0308 	add.w	r3, r0, #8
 801389a:	6811      	ldr	r1, [r2, #0]
 801389c:	6019      	str	r1, [r3, #0]
 801389e:	6851      	ldr	r1, [r2, #4]
 80138a0:	6059      	str	r1, [r3, #4]
 80138a2:	6892      	ldr	r2, [r2, #8]
 80138a4:	609a      	str	r2, [r3, #8]
 80138a6:	4621      	mov	r1, r4
 80138a8:	4650      	mov	r0, sl
 80138aa:	f7fb fec1 	bl	800f630 <_free_r>
 80138ae:	e73f      	b.n	8013730 <_realloc_r+0x184>
 80138b0:	68a3      	ldr	r3, [r4, #8]
 80138b2:	6083      	str	r3, [r0, #8]
 80138b4:	68e3      	ldr	r3, [r4, #12]
 80138b6:	60c3      	str	r3, [r0, #12]
 80138b8:	2a24      	cmp	r2, #36	@ 0x24
 80138ba:	bf01      	itttt	eq
 80138bc:	6923      	ldreq	r3, [r4, #16]
 80138be:	6103      	streq	r3, [r0, #16]
 80138c0:	6961      	ldreq	r1, [r4, #20]
 80138c2:	6141      	streq	r1, [r0, #20]
 80138c4:	bf19      	ittee	ne
 80138c6:	f104 0210 	addne.w	r2, r4, #16
 80138ca:	f100 0310 	addne.w	r3, r0, #16
 80138ce:	f104 0218 	addeq.w	r2, r4, #24
 80138d2:	f100 0318 	addeq.w	r3, r0, #24
 80138d6:	e7e0      	b.n	801389a <_realloc_r+0x2ee>
 80138d8:	4603      	mov	r3, r0
 80138da:	4622      	mov	r2, r4
 80138dc:	e7dd      	b.n	801389a <_realloc_r+0x2ee>
 80138de:	4621      	mov	r1, r4
 80138e0:	f7fb fd9b 	bl	800f41a <memmove>
 80138e4:	e7df      	b.n	80138a6 <_realloc_r+0x2fa>
 80138e6:	4637      	mov	r7, r6
 80138e8:	e6bf      	b.n	801366a <_realloc_r+0xbe>
 80138ea:	431f      	orrs	r7, r3
 80138ec:	f8c9 7004 	str.w	r7, [r9, #4]
 80138f0:	6853      	ldr	r3, [r2, #4]
 80138f2:	f043 0301 	orr.w	r3, r3, #1
 80138f6:	6053      	str	r3, [r2, #4]
 80138f8:	e6d3      	b.n	80136a2 <_realloc_r+0xf6>
 80138fa:	bf00      	nop

080138fc <__ascii_wctomb>:
 80138fc:	4603      	mov	r3, r0
 80138fe:	4608      	mov	r0, r1
 8013900:	b141      	cbz	r1, 8013914 <__ascii_wctomb+0x18>
 8013902:	2aff      	cmp	r2, #255	@ 0xff
 8013904:	d904      	bls.n	8013910 <__ascii_wctomb+0x14>
 8013906:	228a      	movs	r2, #138	@ 0x8a
 8013908:	601a      	str	r2, [r3, #0]
 801390a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801390e:	4770      	bx	lr
 8013910:	700a      	strb	r2, [r1, #0]
 8013912:	2001      	movs	r0, #1
 8013914:	4770      	bx	lr
	...

08013918 <_wcrtomb_r>:
 8013918:	b5f0      	push	{r4, r5, r6, r7, lr}
 801391a:	4c09      	ldr	r4, [pc, #36]	@ (8013940 <_wcrtomb_r+0x28>)
 801391c:	b085      	sub	sp, #20
 801391e:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 8013922:	4605      	mov	r5, r0
 8013924:	461e      	mov	r6, r3
 8013926:	b909      	cbnz	r1, 801392c <_wcrtomb_r+0x14>
 8013928:	460a      	mov	r2, r1
 801392a:	a901      	add	r1, sp, #4
 801392c:	47b8      	blx	r7
 801392e:	1c43      	adds	r3, r0, #1
 8013930:	bf01      	itttt	eq
 8013932:	2300      	moveq	r3, #0
 8013934:	6033      	streq	r3, [r6, #0]
 8013936:	238a      	moveq	r3, #138	@ 0x8a
 8013938:	602b      	streq	r3, [r5, #0]
 801393a:	b005      	add	sp, #20
 801393c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801393e:	bf00      	nop
 8013940:	20000574 	.word	0x20000574

08013944 <__swhatbuf_r>:
 8013944:	b570      	push	{r4, r5, r6, lr}
 8013946:	460c      	mov	r4, r1
 8013948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801394c:	2900      	cmp	r1, #0
 801394e:	b096      	sub	sp, #88	@ 0x58
 8013950:	4615      	mov	r5, r2
 8013952:	461e      	mov	r6, r3
 8013954:	da07      	bge.n	8013966 <__swhatbuf_r+0x22>
 8013956:	89a1      	ldrh	r1, [r4, #12]
 8013958:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 801395c:	d117      	bne.n	801398e <__swhatbuf_r+0x4a>
 801395e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013962:	4608      	mov	r0, r1
 8013964:	e00f      	b.n	8013986 <__swhatbuf_r+0x42>
 8013966:	466a      	mov	r2, sp
 8013968:	f000 f89a 	bl	8013aa0 <_fstat_r>
 801396c:	2800      	cmp	r0, #0
 801396e:	dbf2      	blt.n	8013956 <__swhatbuf_r+0x12>
 8013970:	9901      	ldr	r1, [sp, #4]
 8013972:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013976:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801397a:	4259      	negs	r1, r3
 801397c:	4159      	adcs	r1, r3
 801397e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8013982:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013986:	6031      	str	r1, [r6, #0]
 8013988:	602b      	str	r3, [r5, #0]
 801398a:	b016      	add	sp, #88	@ 0x58
 801398c:	bd70      	pop	{r4, r5, r6, pc}
 801398e:	2100      	movs	r1, #0
 8013990:	2340      	movs	r3, #64	@ 0x40
 8013992:	e7e6      	b.n	8013962 <__swhatbuf_r+0x1e>

08013994 <__smakebuf_r>:
 8013994:	898b      	ldrh	r3, [r1, #12]
 8013996:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013998:	079d      	lsls	r5, r3, #30
 801399a:	4606      	mov	r6, r0
 801399c:	460c      	mov	r4, r1
 801399e:	d507      	bpl.n	80139b0 <__smakebuf_r+0x1c>
 80139a0:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 80139a4:	6023      	str	r3, [r4, #0]
 80139a6:	6123      	str	r3, [r4, #16]
 80139a8:	2301      	movs	r3, #1
 80139aa:	6163      	str	r3, [r4, #20]
 80139ac:	b003      	add	sp, #12
 80139ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139b0:	ab01      	add	r3, sp, #4
 80139b2:	466a      	mov	r2, sp
 80139b4:	f7ff ffc6 	bl	8013944 <__swhatbuf_r>
 80139b8:	9f00      	ldr	r7, [sp, #0]
 80139ba:	4605      	mov	r5, r0
 80139bc:	4639      	mov	r1, r7
 80139be:	4630      	mov	r0, r6
 80139c0:	f7fb fef6 	bl	800f7b0 <_malloc_r>
 80139c4:	b948      	cbnz	r0, 80139da <__smakebuf_r+0x46>
 80139c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80139ca:	059a      	lsls	r2, r3, #22
 80139cc:	d4ee      	bmi.n	80139ac <__smakebuf_r+0x18>
 80139ce:	f023 0303 	bic.w	r3, r3, #3
 80139d2:	f043 0302 	orr.w	r3, r3, #2
 80139d6:	81a3      	strh	r3, [r4, #12]
 80139d8:	e7e2      	b.n	80139a0 <__smakebuf_r+0xc>
 80139da:	89a3      	ldrh	r3, [r4, #12]
 80139dc:	6020      	str	r0, [r4, #0]
 80139de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80139e2:	81a3      	strh	r3, [r4, #12]
 80139e4:	9b01      	ldr	r3, [sp, #4]
 80139e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80139ea:	b15b      	cbz	r3, 8013a04 <__smakebuf_r+0x70>
 80139ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80139f0:	4630      	mov	r0, r6
 80139f2:	f000 f867 	bl	8013ac4 <_isatty_r>
 80139f6:	b128      	cbz	r0, 8013a04 <__smakebuf_r+0x70>
 80139f8:	89a3      	ldrh	r3, [r4, #12]
 80139fa:	f023 0303 	bic.w	r3, r3, #3
 80139fe:	f043 0301 	orr.w	r3, r3, #1
 8013a02:	81a3      	strh	r3, [r4, #12]
 8013a04:	89a3      	ldrh	r3, [r4, #12]
 8013a06:	431d      	orrs	r5, r3
 8013a08:	81a5      	strh	r5, [r4, #12]
 8013a0a:	e7cf      	b.n	80139ac <__smakebuf_r+0x18>

08013a0c <__swbuf_r>:
 8013a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a0e:	460e      	mov	r6, r1
 8013a10:	4614      	mov	r4, r2
 8013a12:	4605      	mov	r5, r0
 8013a14:	b118      	cbz	r0, 8013a1e <__swbuf_r+0x12>
 8013a16:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8013a18:	b90b      	cbnz	r3, 8013a1e <__swbuf_r+0x12>
 8013a1a:	f7fb fc15 	bl	800f248 <__sinit>
 8013a1e:	69a3      	ldr	r3, [r4, #24]
 8013a20:	60a3      	str	r3, [r4, #8]
 8013a22:	89a3      	ldrh	r3, [r4, #12]
 8013a24:	0719      	lsls	r1, r3, #28
 8013a26:	d501      	bpl.n	8013a2c <__swbuf_r+0x20>
 8013a28:	6923      	ldr	r3, [r4, #16]
 8013a2a:	b943      	cbnz	r3, 8013a3e <__swbuf_r+0x32>
 8013a2c:	4621      	mov	r1, r4
 8013a2e:	4628      	mov	r0, r5
 8013a30:	f7fe fabc 	bl	8011fac <__swsetup_r>
 8013a34:	b118      	cbz	r0, 8013a3e <__swbuf_r+0x32>
 8013a36:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013a3a:	4638      	mov	r0, r7
 8013a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a42:	b2f6      	uxtb	r6, r6
 8013a44:	049a      	lsls	r2, r3, #18
 8013a46:	4637      	mov	r7, r6
 8013a48:	d406      	bmi.n	8013a58 <__swbuf_r+0x4c>
 8013a4a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013a4e:	81a3      	strh	r3, [r4, #12]
 8013a50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013a52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013a56:	6663      	str	r3, [r4, #100]	@ 0x64
 8013a58:	6823      	ldr	r3, [r4, #0]
 8013a5a:	6922      	ldr	r2, [r4, #16]
 8013a5c:	1a98      	subs	r0, r3, r2
 8013a5e:	6963      	ldr	r3, [r4, #20]
 8013a60:	4283      	cmp	r3, r0
 8013a62:	dc05      	bgt.n	8013a70 <__swbuf_r+0x64>
 8013a64:	4621      	mov	r1, r4
 8013a66:	4628      	mov	r0, r5
 8013a68:	f7fe f92e 	bl	8011cc8 <_fflush_r>
 8013a6c:	2800      	cmp	r0, #0
 8013a6e:	d1e2      	bne.n	8013a36 <__swbuf_r+0x2a>
 8013a70:	68a3      	ldr	r3, [r4, #8]
 8013a72:	3b01      	subs	r3, #1
 8013a74:	60a3      	str	r3, [r4, #8]
 8013a76:	6823      	ldr	r3, [r4, #0]
 8013a78:	1c5a      	adds	r2, r3, #1
 8013a7a:	6022      	str	r2, [r4, #0]
 8013a7c:	701e      	strb	r6, [r3, #0]
 8013a7e:	6962      	ldr	r2, [r4, #20]
 8013a80:	1c43      	adds	r3, r0, #1
 8013a82:	429a      	cmp	r2, r3
 8013a84:	d004      	beq.n	8013a90 <__swbuf_r+0x84>
 8013a86:	89a3      	ldrh	r3, [r4, #12]
 8013a88:	07db      	lsls	r3, r3, #31
 8013a8a:	d5d6      	bpl.n	8013a3a <__swbuf_r+0x2e>
 8013a8c:	2e0a      	cmp	r6, #10
 8013a8e:	d1d4      	bne.n	8013a3a <__swbuf_r+0x2e>
 8013a90:	4621      	mov	r1, r4
 8013a92:	4628      	mov	r0, r5
 8013a94:	f7fe f918 	bl	8011cc8 <_fflush_r>
 8013a98:	2800      	cmp	r0, #0
 8013a9a:	d0ce      	beq.n	8013a3a <__swbuf_r+0x2e>
 8013a9c:	e7cb      	b.n	8013a36 <__swbuf_r+0x2a>
	...

08013aa0 <_fstat_r>:
 8013aa0:	b538      	push	{r3, r4, r5, lr}
 8013aa2:	4d07      	ldr	r5, [pc, #28]	@ (8013ac0 <_fstat_r+0x20>)
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	4604      	mov	r4, r0
 8013aa8:	4608      	mov	r0, r1
 8013aaa:	4611      	mov	r1, r2
 8013aac:	602b      	str	r3, [r5, #0]
 8013aae:	f7ed fd7f 	bl	80015b0 <_fstat>
 8013ab2:	1c43      	adds	r3, r0, #1
 8013ab4:	d102      	bne.n	8013abc <_fstat_r+0x1c>
 8013ab6:	682b      	ldr	r3, [r5, #0]
 8013ab8:	b103      	cbz	r3, 8013abc <_fstat_r+0x1c>
 8013aba:	6023      	str	r3, [r4, #0]
 8013abc:	bd38      	pop	{r3, r4, r5, pc}
 8013abe:	bf00      	nop
 8013ac0:	20008b84 	.word	0x20008b84

08013ac4 <_isatty_r>:
 8013ac4:	b538      	push	{r3, r4, r5, lr}
 8013ac6:	4d06      	ldr	r5, [pc, #24]	@ (8013ae0 <_isatty_r+0x1c>)
 8013ac8:	2300      	movs	r3, #0
 8013aca:	4604      	mov	r4, r0
 8013acc:	4608      	mov	r0, r1
 8013ace:	602b      	str	r3, [r5, #0]
 8013ad0:	f7ed fd7e 	bl	80015d0 <_isatty>
 8013ad4:	1c43      	adds	r3, r0, #1
 8013ad6:	d102      	bne.n	8013ade <_isatty_r+0x1a>
 8013ad8:	682b      	ldr	r3, [r5, #0]
 8013ada:	b103      	cbz	r3, 8013ade <_isatty_r+0x1a>
 8013adc:	6023      	str	r3, [r4, #0]
 8013ade:	bd38      	pop	{r3, r4, r5, pc}
 8013ae0:	20008b84 	.word	0x20008b84

08013ae4 <__assert_func>:
 8013ae4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013ae6:	4614      	mov	r4, r2
 8013ae8:	461a      	mov	r2, r3
 8013aea:	4b09      	ldr	r3, [pc, #36]	@ (8013b10 <__assert_func+0x2c>)
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	4605      	mov	r5, r0
 8013af0:	68d8      	ldr	r0, [r3, #12]
 8013af2:	b954      	cbnz	r4, 8013b0a <__assert_func+0x26>
 8013af4:	4b07      	ldr	r3, [pc, #28]	@ (8013b14 <__assert_func+0x30>)
 8013af6:	461c      	mov	r4, r3
 8013af8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013afc:	9100      	str	r1, [sp, #0]
 8013afe:	462b      	mov	r3, r5
 8013b00:	4905      	ldr	r1, [pc, #20]	@ (8013b18 <__assert_func+0x34>)
 8013b02:	f000 f843 	bl	8013b8c <fiprintf>
 8013b06:	f000 f853 	bl	8013bb0 <abort>
 8013b0a:	4b04      	ldr	r3, [pc, #16]	@ (8013b1c <__assert_func+0x38>)
 8013b0c:	e7f4      	b.n	8013af8 <__assert_func+0x14>
 8013b0e:	bf00      	nop
 8013b10:	20000038 	.word	0x20000038
 8013b14:	08016aeb 	.word	0x08016aeb
 8013b18:	08016abd 	.word	0x08016abd
 8013b1c:	08016ab0 	.word	0x08016ab0

08013b20 <_calloc_r>:
 8013b20:	b538      	push	{r3, r4, r5, lr}
 8013b22:	fba1 1502 	umull	r1, r5, r1, r2
 8013b26:	b935      	cbnz	r5, 8013b36 <_calloc_r+0x16>
 8013b28:	f7fb fe42 	bl	800f7b0 <_malloc_r>
 8013b2c:	4604      	mov	r4, r0
 8013b2e:	b938      	cbnz	r0, 8013b40 <_calloc_r+0x20>
 8013b30:	2400      	movs	r4, #0
 8013b32:	4620      	mov	r0, r4
 8013b34:	bd38      	pop	{r3, r4, r5, pc}
 8013b36:	f7fb fcd9 	bl	800f4ec <__errno>
 8013b3a:	230c      	movs	r3, #12
 8013b3c:	6003      	str	r3, [r0, #0]
 8013b3e:	e7f7      	b.n	8013b30 <_calloc_r+0x10>
 8013b40:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8013b44:	f022 0203 	bic.w	r2, r2, #3
 8013b48:	3a04      	subs	r2, #4
 8013b4a:	2a24      	cmp	r2, #36	@ 0x24
 8013b4c:	d819      	bhi.n	8013b82 <_calloc_r+0x62>
 8013b4e:	2a13      	cmp	r2, #19
 8013b50:	d915      	bls.n	8013b7e <_calloc_r+0x5e>
 8013b52:	2a1b      	cmp	r2, #27
 8013b54:	e9c0 5500 	strd	r5, r5, [r0]
 8013b58:	d806      	bhi.n	8013b68 <_calloc_r+0x48>
 8013b5a:	f100 0308 	add.w	r3, r0, #8
 8013b5e:	2200      	movs	r2, #0
 8013b60:	e9c3 2200 	strd	r2, r2, [r3]
 8013b64:	609a      	str	r2, [r3, #8]
 8013b66:	e7e4      	b.n	8013b32 <_calloc_r+0x12>
 8013b68:	2a24      	cmp	r2, #36	@ 0x24
 8013b6a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8013b6e:	bf11      	iteee	ne
 8013b70:	f100 0310 	addne.w	r3, r0, #16
 8013b74:	6105      	streq	r5, [r0, #16]
 8013b76:	f100 0318 	addeq.w	r3, r0, #24
 8013b7a:	6145      	streq	r5, [r0, #20]
 8013b7c:	e7ef      	b.n	8013b5e <_calloc_r+0x3e>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	e7ed      	b.n	8013b5e <_calloc_r+0x3e>
 8013b82:	4629      	mov	r1, r5
 8013b84:	f7fb fc63 	bl	800f44e <memset>
 8013b88:	e7d3      	b.n	8013b32 <_calloc_r+0x12>
	...

08013b8c <fiprintf>:
 8013b8c:	b40e      	push	{r1, r2, r3}
 8013b8e:	b503      	push	{r0, r1, lr}
 8013b90:	4601      	mov	r1, r0
 8013b92:	ab03      	add	r3, sp, #12
 8013b94:	4805      	ldr	r0, [pc, #20]	@ (8013bac <fiprintf+0x20>)
 8013b96:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b9a:	6800      	ldr	r0, [r0, #0]
 8013b9c:	9301      	str	r3, [sp, #4]
 8013b9e:	f7fd faed 	bl	801117c <_vfiprintf_r>
 8013ba2:	b002      	add	sp, #8
 8013ba4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ba8:	b003      	add	sp, #12
 8013baa:	4770      	bx	lr
 8013bac:	20000038 	.word	0x20000038

08013bb0 <abort>:
 8013bb0:	b508      	push	{r3, lr}
 8013bb2:	2006      	movs	r0, #6
 8013bb4:	f000 f82c 	bl	8013c10 <raise>
 8013bb8:	2001      	movs	r0, #1
 8013bba:	f7ed fcc5 	bl	8001548 <_exit>

08013bbe <_raise_r>:
 8013bbe:	291f      	cmp	r1, #31
 8013bc0:	b538      	push	{r3, r4, r5, lr}
 8013bc2:	4605      	mov	r5, r0
 8013bc4:	460c      	mov	r4, r1
 8013bc6:	d904      	bls.n	8013bd2 <_raise_r+0x14>
 8013bc8:	2316      	movs	r3, #22
 8013bca:	6003      	str	r3, [r0, #0]
 8013bcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013bd0:	bd38      	pop	{r3, r4, r5, pc}
 8013bd2:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8013bd6:	b112      	cbz	r2, 8013bde <_raise_r+0x20>
 8013bd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013bdc:	b94b      	cbnz	r3, 8013bf2 <_raise_r+0x34>
 8013bde:	4628      	mov	r0, r5
 8013be0:	f000 f830 	bl	8013c44 <_getpid_r>
 8013be4:	4622      	mov	r2, r4
 8013be6:	4601      	mov	r1, r0
 8013be8:	4628      	mov	r0, r5
 8013bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013bee:	f000 b817 	b.w	8013c20 <_kill_r>
 8013bf2:	2b01      	cmp	r3, #1
 8013bf4:	d00a      	beq.n	8013c0c <_raise_r+0x4e>
 8013bf6:	1c59      	adds	r1, r3, #1
 8013bf8:	d103      	bne.n	8013c02 <_raise_r+0x44>
 8013bfa:	2316      	movs	r3, #22
 8013bfc:	6003      	str	r3, [r0, #0]
 8013bfe:	2001      	movs	r0, #1
 8013c00:	e7e6      	b.n	8013bd0 <_raise_r+0x12>
 8013c02:	2100      	movs	r1, #0
 8013c04:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013c08:	4620      	mov	r0, r4
 8013c0a:	4798      	blx	r3
 8013c0c:	2000      	movs	r0, #0
 8013c0e:	e7df      	b.n	8013bd0 <_raise_r+0x12>

08013c10 <raise>:
 8013c10:	4b02      	ldr	r3, [pc, #8]	@ (8013c1c <raise+0xc>)
 8013c12:	4601      	mov	r1, r0
 8013c14:	6818      	ldr	r0, [r3, #0]
 8013c16:	f7ff bfd2 	b.w	8013bbe <_raise_r>
 8013c1a:	bf00      	nop
 8013c1c:	20000038 	.word	0x20000038

08013c20 <_kill_r>:
 8013c20:	b538      	push	{r3, r4, r5, lr}
 8013c22:	4d07      	ldr	r5, [pc, #28]	@ (8013c40 <_kill_r+0x20>)
 8013c24:	2300      	movs	r3, #0
 8013c26:	4604      	mov	r4, r0
 8013c28:	4608      	mov	r0, r1
 8013c2a:	4611      	mov	r1, r2
 8013c2c:	602b      	str	r3, [r5, #0]
 8013c2e:	f7ed fc79 	bl	8001524 <_kill>
 8013c32:	1c43      	adds	r3, r0, #1
 8013c34:	d102      	bne.n	8013c3c <_kill_r+0x1c>
 8013c36:	682b      	ldr	r3, [r5, #0]
 8013c38:	b103      	cbz	r3, 8013c3c <_kill_r+0x1c>
 8013c3a:	6023      	str	r3, [r4, #0]
 8013c3c:	bd38      	pop	{r3, r4, r5, pc}
 8013c3e:	bf00      	nop
 8013c40:	20008b84 	.word	0x20008b84

08013c44 <_getpid_r>:
 8013c44:	f7ed bc66 	b.w	8001514 <_getpid>

08013c48 <_init>:
 8013c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c4a:	bf00      	nop
 8013c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c4e:	bc08      	pop	{r3}
 8013c50:	469e      	mov	lr, r3
 8013c52:	4770      	bx	lr

08013c54 <_fini>:
 8013c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c56:	bf00      	nop
 8013c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c5a:	bc08      	pop	{r3}
 8013c5c:	469e      	mov	lr, r3
 8013c5e:	4770      	bx	lr
